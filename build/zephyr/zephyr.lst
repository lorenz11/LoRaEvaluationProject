
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	20004778 	.word	0x20004778
}
   4:	00005765 	.word	0x00005765
   8:	000205bd 	.word	0x000205bd
   c:	00005795 	.word	0x00005795
  10:	00005795 	.word	0x00005795
  14:	00005795 	.word	0x00005795
  18:	00005795 	.word	0x00005795
	...
  2c:	000054f5 	.word	0x000054f5
  30:	00005795 	.word	0x00005795
  34:	00000000 	.word	0x00000000
  38:	000054ad 	.word	0x000054ad
  3c:	0001f363 	.word	0x0001f363

00000040 <_irq_vector_table>:
  40:	00005725 000175c5 00005725 00005725     %W...u..%W..%W..
  50:	00005725 00005725 00005725 00005725     %W..%W..%W..%W..
  60:	00005725 00005725 00005725 00005725     %W..%W..%W..%W..
  70:	00005725 00005725 00005725 00005725     %W..%W..%W..%W..
  80:	00005725 00005725 00005725 00005725     %W..%W..%W..%W..
  90:	00005725 00005725 00005725 00005725     %W..%W..%W..%W..
  a0:	00005725 00005725 00005725 00005725     %W..%W..%W..%W..
  b0:	00005725 00005725 00005725 00005725     %W..%W..%W..%W..
  c0:	00005725 00005725 00005725 00005725     %W..%W..%W..%W..
  d0:	00005725 00005725 00005725 00005725     %W..%W..%W..%W..
  e0:	00005725 00005725 00005725 00005725     %W..%W..%W..%W..
  f0:	00005725 00005725 00005725 00005725     %W..%W..%W..%W..

Disassembly of section text:

00000100 <__aeabi_drsub>:
     100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     104:	e002      	b.n	10c <__adddf3>
     106:	bf00      	nop

00000108 <__aeabi_dsub>:
     108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000010c <__adddf3>:
     10c:	b530      	push	{r4, r5, lr}
     10e:	ea4f 0441 	mov.w	r4, r1, lsl #1
     112:	ea4f 0543 	mov.w	r5, r3, lsl #1
     116:	ea94 0f05 	teq	r4, r5
     11a:	bf08      	it	eq
     11c:	ea90 0f02 	teqeq	r0, r2
     120:	bf1f      	itttt	ne
     122:	ea54 0c00 	orrsne.w	ip, r4, r0
     126:	ea55 0c02 	orrsne.w	ip, r5, r2
     12a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     12e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     132:	f000 80e2 	beq.w	2fa <CONFIG_BT_HCI_TX_STACK_SIZE+0x7a>
     136:	ea4f 5454 	mov.w	r4, r4, lsr #21
     13a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     13e:	bfb8      	it	lt
     140:	426d      	neglt	r5, r5
     142:	dd0c      	ble.n	15e <CONFIG_IDLE_STACK_SIZE+0x1e>
     144:	442c      	add	r4, r5
     146:	ea80 0202 	eor.w	r2, r0, r2
     14a:	ea81 0303 	eor.w	r3, r1, r3
     14e:	ea82 0000 	eor.w	r0, r2, r0
     152:	ea83 0101 	eor.w	r1, r3, r1
     156:	ea80 0202 	eor.w	r2, r0, r2
     15a:	ea81 0303 	eor.w	r3, r1, r3
     15e:	2d36      	cmp	r5, #54	; 0x36
     160:	bf88      	it	hi
     162:	bd30      	pophi	{r4, r5, pc}
     164:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     168:	ea4f 3101 	mov.w	r1, r1, lsl #12
     16c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     174:	d002      	beq.n	17c <CONFIG_IDLE_STACK_SIZE+0x3c>
     176:	4240      	negs	r0, r0
     178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     17c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     180:	ea4f 3303 	mov.w	r3, r3, lsl #12
     184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     188:	d002      	beq.n	190 <CONFIG_IDLE_STACK_SIZE+0x50>
     18a:	4252      	negs	r2, r2
     18c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     190:	ea94 0f05 	teq	r4, r5
     194:	f000 80a7 	beq.w	2e6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x66>
     198:	f1a4 0401 	sub.w	r4, r4, #1
     19c:	f1d5 0e20 	rsbs	lr, r5, #32
     1a0:	db0d      	blt.n	1be <CONFIG_IDLE_STACK_SIZE+0x7e>
     1a2:	fa02 fc0e 	lsl.w	ip, r2, lr
     1a6:	fa22 f205 	lsr.w	r2, r2, r5
     1aa:	1880      	adds	r0, r0, r2
     1ac:	f141 0100 	adc.w	r1, r1, #0
     1b0:	fa03 f20e 	lsl.w	r2, r3, lr
     1b4:	1880      	adds	r0, r0, r2
     1b6:	fa43 f305 	asr.w	r3, r3, r5
     1ba:	4159      	adcs	r1, r3
     1bc:	e00e      	b.n	1dc <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x1c>
     1be:	f1a5 0520 	sub.w	r5, r5, #32
     1c2:	f10e 0e20 	add.w	lr, lr, #32
     1c6:	2a01      	cmp	r2, #1
     1c8:	fa03 fc0e 	lsl.w	ip, r3, lr
     1cc:	bf28      	it	cs
     1ce:	f04c 0c02 	orrcs.w	ip, ip, #2
     1d2:	fa43 f305 	asr.w	r3, r3, r5
     1d6:	18c0      	adds	r0, r0, r3
     1d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     1dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1e0:	d507      	bpl.n	1f2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x32>
     1e2:	f04f 0e00 	mov.w	lr, #0
     1e6:	f1dc 0c00 	rsbs	ip, ip, #0
     1ea:	eb7e 0000 	sbcs.w	r0, lr, r0
     1ee:	eb6e 0101 	sbc.w	r1, lr, r1
     1f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1f6:	d31b      	bcc.n	230 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x70>
     1f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1fc:	d30c      	bcc.n	218 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x58>
     1fe:	0849      	lsrs	r1, r1, #1
     200:	ea5f 0030 	movs.w	r0, r0, rrx
     204:	ea4f 0c3c 	mov.w	ip, ip, rrx
     208:	f104 0401 	add.w	r4, r4, #1
     20c:	ea4f 5244 	mov.w	r2, r4, lsl #21
     210:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     214:	f080 809a 	bcs.w	34c <CONFIG_BT_DEVICE_APPEARANCE+0xb>
     218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     21c:	bf08      	it	eq
     21e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     222:	f150 0000 	adcs.w	r0, r0, #0
     226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     22a:	ea41 0105 	orr.w	r1, r1, r5
     22e:	bd30      	pop	{r4, r5, pc}
     230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     234:	4140      	adcs	r0, r0
     236:	eb41 0101 	adc.w	r1, r1, r1
     23a:	3c01      	subs	r4, #1
     23c:	bf28      	it	cs
     23e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     242:	d2e9      	bcs.n	218 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x58>
     244:	f091 0f00 	teq	r1, #0
     248:	bf04      	itt	eq
     24a:	4601      	moveq	r1, r0
     24c:	2000      	moveq	r0, #0
     24e:	fab1 f381 	clz	r3, r1
     252:	bf08      	it	eq
     254:	3320      	addeq	r3, #32
     256:	f1a3 030b 	sub.w	r3, r3, #11
     25a:	f1b3 0220 	subs.w	r2, r3, #32
     25e:	da0c      	bge.n	27a <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0xba>
     260:	320c      	adds	r2, #12
     262:	dd08      	ble.n	276 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0xb6>
     264:	f102 0c14 	add.w	ip, r2, #20
     268:	f1c2 020c 	rsb	r2, r2, #12
     26c:	fa01 f00c 	lsl.w	r0, r1, ip
     270:	fa21 f102 	lsr.w	r1, r1, r2
     274:	e00c      	b.n	290 <CONFIG_BT_HCI_TX_STACK_SIZE+0x10>
     276:	f102 0214 	add.w	r2, r2, #20
     27a:	bfd8      	it	le
     27c:	f1c2 0c20 	rsble	ip, r2, #32
     280:	fa01 f102 	lsl.w	r1, r1, r2
     284:	fa20 fc0c 	lsr.w	ip, r0, ip
     288:	bfdc      	itt	le
     28a:	ea41 010c 	orrle.w	r1, r1, ip
     28e:	4090      	lslle	r0, r2
     290:	1ae4      	subs	r4, r4, r3
     292:	bfa2      	ittt	ge
     294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     298:	4329      	orrge	r1, r5
     29a:	bd30      	popge	{r4, r5, pc}
     29c:	ea6f 0404 	mvn.w	r4, r4
     2a0:	3c1f      	subs	r4, #31
     2a2:	da1c      	bge.n	2de <CONFIG_BT_HCI_TX_STACK_SIZE+0x5e>
     2a4:	340c      	adds	r4, #12
     2a6:	dc0e      	bgt.n	2c6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x46>
     2a8:	f104 0414 	add.w	r4, r4, #20
     2ac:	f1c4 0220 	rsb	r2, r4, #32
     2b0:	fa20 f004 	lsr.w	r0, r0, r4
     2b4:	fa01 f302 	lsl.w	r3, r1, r2
     2b8:	ea40 0003 	orr.w	r0, r0, r3
     2bc:	fa21 f304 	lsr.w	r3, r1, r4
     2c0:	ea45 0103 	orr.w	r1, r5, r3
     2c4:	bd30      	pop	{r4, r5, pc}
     2c6:	f1c4 040c 	rsb	r4, r4, #12
     2ca:	f1c4 0220 	rsb	r2, r4, #32
     2ce:	fa20 f002 	lsr.w	r0, r0, r2
     2d2:	fa01 f304 	lsl.w	r3, r1, r4
     2d6:	ea40 0003 	orr.w	r0, r0, r3
     2da:	4629      	mov	r1, r5
     2dc:	bd30      	pop	{r4, r5, pc}
     2de:	fa21 f004 	lsr.w	r0, r1, r4
     2e2:	4629      	mov	r1, r5
     2e4:	bd30      	pop	{r4, r5, pc}
     2e6:	f094 0f00 	teq	r4, #0
     2ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ee:	bf06      	itte	eq
     2f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2f4:	3401      	addeq	r4, #1
     2f6:	3d01      	subne	r5, #1
     2f8:	e74e      	b.n	198 <CONFIG_IDLE_STACK_SIZE+0x58>
     2fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2fe:	bf18      	it	ne
     300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     304:	d029      	beq.n	35a <CONFIG_BT_DEVICE_APPEARANCE+0x19>
     306:	ea94 0f05 	teq	r4, r5
     30a:	bf08      	it	eq
     30c:	ea90 0f02 	teqeq	r0, r2
     310:	d005      	beq.n	31e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x1e>
     312:	ea54 0c00 	orrs.w	ip, r4, r0
     316:	bf04      	itt	eq
     318:	4619      	moveq	r1, r3
     31a:	4610      	moveq	r0, r2
     31c:	bd30      	pop	{r4, r5, pc}
     31e:	ea91 0f03 	teq	r1, r3
     322:	bf1e      	ittt	ne
     324:	2100      	movne	r1, #0
     326:	2000      	movne	r0, #0
     328:	bd30      	popne	{r4, r5, pc}
     32a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     32e:	d105      	bne.n	33c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x3c>
     330:	0040      	lsls	r0, r0, #1
     332:	4149      	adcs	r1, r1
     334:	bf28      	it	cs
     336:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     33a:	bd30      	pop	{r4, r5, pc}
     33c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     340:	bf3c      	itt	cc
     342:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     346:	bd30      	popcc	{r4, r5, pc}
     348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     34c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     354:	f04f 0000 	mov.w	r0, #0
     358:	bd30      	pop	{r4, r5, pc}
     35a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     35e:	bf1a      	itte	ne
     360:	4619      	movne	r1, r3
     362:	4610      	movne	r0, r2
     364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     368:	bf1c      	itt	ne
     36a:	460b      	movne	r3, r1
     36c:	4602      	movne	r2, r0
     36e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     372:	bf06      	itte	eq
     374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     378:	ea91 0f03 	teqeq	r1, r3
     37c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     380:	bd30      	pop	{r4, r5, pc}
     382:	bf00      	nop

00000384 <__aeabi_ui2d>:
     384:	f090 0f00 	teq	r0, #0
     388:	bf04      	itt	eq
     38a:	2100      	moveq	r1, #0
     38c:	4770      	bxeq	lr
     38e:	b530      	push	{r4, r5, lr}
     390:	f44f 6480 	mov.w	r4, #1024	; 0x400
     394:	f104 0432 	add.w	r4, r4, #50	; 0x32
     398:	f04f 0500 	mov.w	r5, #0
     39c:	f04f 0100 	mov.w	r1, #0
     3a0:	e750      	b.n	244 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x84>
     3a2:	bf00      	nop

000003a4 <__aeabi_i2d>:
     3a4:	f090 0f00 	teq	r0, #0
     3a8:	bf04      	itt	eq
     3aa:	2100      	moveq	r1, #0
     3ac:	4770      	bxeq	lr
     3ae:	b530      	push	{r4, r5, lr}
     3b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     3bc:	bf48      	it	mi
     3be:	4240      	negmi	r0, r0
     3c0:	f04f 0100 	mov.w	r1, #0
     3c4:	e73e      	b.n	244 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x84>
     3c6:	bf00      	nop

000003c8 <__aeabi_f2d>:
     3c8:	0042      	lsls	r2, r0, #1
     3ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3ce:	ea4f 0131 	mov.w	r1, r1, rrx
     3d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3d6:	bf1f      	itttt	ne
     3d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     3dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3e4:	4770      	bxne	lr
     3e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3ea:	bf08      	it	eq
     3ec:	4770      	bxeq	lr
     3ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3f2:	bf04      	itt	eq
     3f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     3f8:	4770      	bxeq	lr
     3fa:	b530      	push	{r4, r5, lr}
     3fc:	f44f 7460 	mov.w	r4, #896	; 0x380
     400:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     408:	e71c      	b.n	244 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x84>
     40a:	bf00      	nop

0000040c <__aeabi_ul2d>:
     40c:	ea50 0201 	orrs.w	r2, r0, r1
     410:	bf08      	it	eq
     412:	4770      	bxeq	lr
     414:	b530      	push	{r4, r5, lr}
     416:	f04f 0500 	mov.w	r5, #0
     41a:	e00a      	b.n	432 <__aeabi_l2d+0x16>

0000041c <__aeabi_l2d>:
     41c:	ea50 0201 	orrs.w	r2, r0, r1
     420:	bf08      	it	eq
     422:	4770      	bxeq	lr
     424:	b530      	push	{r4, r5, lr}
     426:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     42a:	d502      	bpl.n	432 <__aeabi_l2d+0x16>
     42c:	4240      	negs	r0, r0
     42e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     432:	f44f 6480 	mov.w	r4, #1024	; 0x400
     436:	f104 0432 	add.w	r4, r4, #50	; 0x32
     43a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     43e:	f43f aed8 	beq.w	1f2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x32>
     442:	f04f 0203 	mov.w	r2, #3
     446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     44a:	bf18      	it	ne
     44c:	3203      	addne	r2, #3
     44e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     452:	bf18      	it	ne
     454:	3203      	addne	r2, #3
     456:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     45a:	f1c2 0320 	rsb	r3, r2, #32
     45e:	fa00 fc03 	lsl.w	ip, r0, r3
     462:	fa20 f002 	lsr.w	r0, r0, r2
     466:	fa01 fe03 	lsl.w	lr, r1, r3
     46a:	ea40 000e 	orr.w	r0, r0, lr
     46e:	fa21 f102 	lsr.w	r1, r1, r2
     472:	4414      	add	r4, r2
     474:	e6bd      	b.n	1f2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x32>
     476:	bf00      	nop

00000478 <__aeabi_dmul>:
     478:	b570      	push	{r4, r5, r6, lr}
     47a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     47e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     482:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     486:	bf1d      	ittte	ne
     488:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     48c:	ea94 0f0c 	teqne	r4, ip
     490:	ea95 0f0c 	teqne	r5, ip
     494:	f000 f8de 	bleq	654 <CONFIG_BT_COMPANY_ID+0x63>
     498:	442c      	add	r4, r5
     49a:	ea81 0603 	eor.w	r6, r1, r3
     49e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     4a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     4a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     4aa:	bf18      	it	ne
     4ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     4b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     4b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     4b8:	d038      	beq.n	52c <__aeabi_dmul+0xb4>
     4ba:	fba0 ce02 	umull	ip, lr, r0, r2
     4be:	f04f 0500 	mov.w	r5, #0
     4c2:	fbe1 e502 	umlal	lr, r5, r1, r2
     4c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     4ca:	fbe0 e503 	umlal	lr, r5, r0, r3
     4ce:	f04f 0600 	mov.w	r6, #0
     4d2:	fbe1 5603 	umlal	r5, r6, r1, r3
     4d6:	f09c 0f00 	teq	ip, #0
     4da:	bf18      	it	ne
     4dc:	f04e 0e01 	orrne.w	lr, lr, #1
     4e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     4e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4ec:	d204      	bcs.n	4f8 <__aeabi_dmul+0x80>
     4ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4f2:	416d      	adcs	r5, r5
     4f4:	eb46 0606 	adc.w	r6, r6, r6
     4f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     500:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     504:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     508:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     50c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     510:	bf88      	it	hi
     512:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     516:	d81e      	bhi.n	556 <__aeabi_dmul+0xde>
     518:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     51c:	bf08      	it	eq
     51e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     522:	f150 0000 	adcs.w	r0, r0, #0
     526:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     52a:	bd70      	pop	{r4, r5, r6, pc}
     52c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     530:	ea46 0101 	orr.w	r1, r6, r1
     534:	ea40 0002 	orr.w	r0, r0, r2
     538:	ea81 0103 	eor.w	r1, r1, r3
     53c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     540:	bfc2      	ittt	gt
     542:	ebd4 050c 	rsbsgt	r5, r4, ip
     546:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     54a:	bd70      	popgt	{r4, r5, r6, pc}
     54c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     550:	f04f 0e00 	mov.w	lr, #0
     554:	3c01      	subs	r4, #1
     556:	f300 80ab 	bgt.w	6b0 <CONFIG_BT_COMPANY_ID+0xbf>
     55a:	f114 0f36 	cmn.w	r4, #54	; 0x36
     55e:	bfde      	ittt	le
     560:	2000      	movle	r0, #0
     562:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     566:	bd70      	pople	{r4, r5, r6, pc}
     568:	f1c4 0400 	rsb	r4, r4, #0
     56c:	3c20      	subs	r4, #32
     56e:	da35      	bge.n	5dc <CONFIG_BT_CTLR_XTAL_THRESHOLD>
     570:	340c      	adds	r4, #12
     572:	dc1b      	bgt.n	5ac <__aeabi_dmul+0x134>
     574:	f104 0414 	add.w	r4, r4, #20
     578:	f1c4 0520 	rsb	r5, r4, #32
     57c:	fa00 f305 	lsl.w	r3, r0, r5
     580:	fa20 f004 	lsr.w	r0, r0, r4
     584:	fa01 f205 	lsl.w	r2, r1, r5
     588:	ea40 0002 	orr.w	r0, r0, r2
     58c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     590:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     594:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     598:	fa21 f604 	lsr.w	r6, r1, r4
     59c:	eb42 0106 	adc.w	r1, r2, r6
     5a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5a4:	bf08      	it	eq
     5a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5aa:	bd70      	pop	{r4, r5, r6, pc}
     5ac:	f1c4 040c 	rsb	r4, r4, #12
     5b0:	f1c4 0520 	rsb	r5, r4, #32
     5b4:	fa00 f304 	lsl.w	r3, r0, r4
     5b8:	fa20 f005 	lsr.w	r0, r0, r5
     5bc:	fa01 f204 	lsl.w	r2, r1, r4
     5c0:	ea40 0002 	orr.w	r0, r0, r2
     5c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5cc:	f141 0100 	adc.w	r1, r1, #0
     5d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5d4:	bf08      	it	eq
     5d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5da:	bd70      	pop	{r4, r5, r6, pc}
     5dc:	f1c4 0520 	rsb	r5, r4, #32
     5e0:	fa00 f205 	lsl.w	r2, r0, r5
     5e4:	ea4e 0e02 	orr.w	lr, lr, r2
     5e8:	fa20 f304 	lsr.w	r3, r0, r4
     5ec:	fa01 f205 	lsl.w	r2, r1, r5
     5f0:	ea43 0302 	orr.w	r3, r3, r2
     5f4:	fa21 f004 	lsr.w	r0, r1, r4
     5f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5fc:	fa21 f204 	lsr.w	r2, r1, r4
     600:	ea20 0002 	bic.w	r0, r0, r2
     604:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     60c:	bf08      	it	eq
     60e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     612:	bd70      	pop	{r4, r5, r6, pc}
     614:	f094 0f00 	teq	r4, #0
     618:	d10f      	bne.n	63a <CONFIG_BT_COMPANY_ID+0x49>
     61a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     61e:	0040      	lsls	r0, r0, #1
     620:	eb41 0101 	adc.w	r1, r1, r1
     624:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     628:	bf08      	it	eq
     62a:	3c01      	subeq	r4, #1
     62c:	d0f7      	beq.n	61e <CONFIG_BT_COMPANY_ID+0x2d>
     62e:	ea41 0106 	orr.w	r1, r1, r6
     632:	f095 0f00 	teq	r5, #0
     636:	bf18      	it	ne
     638:	4770      	bxne	lr
     63a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     63e:	0052      	lsls	r2, r2, #1
     640:	eb43 0303 	adc.w	r3, r3, r3
     644:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     648:	bf08      	it	eq
     64a:	3d01      	subeq	r5, #1
     64c:	d0f7      	beq.n	63e <CONFIG_BT_COMPANY_ID+0x4d>
     64e:	ea43 0306 	orr.w	r3, r3, r6
     652:	4770      	bx	lr
     654:	ea94 0f0c 	teq	r4, ip
     658:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     65c:	bf18      	it	ne
     65e:	ea95 0f0c 	teqne	r5, ip
     662:	d00c      	beq.n	67e <CONFIG_BT_COMPANY_ID+0x8d>
     664:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     668:	bf18      	it	ne
     66a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     66e:	d1d1      	bne.n	614 <CONFIG_BT_COMPANY_ID+0x23>
     670:	ea81 0103 	eor.w	r1, r1, r3
     674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     678:	f04f 0000 	mov.w	r0, #0
     67c:	bd70      	pop	{r4, r5, r6, pc}
     67e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     682:	bf06      	itte	eq
     684:	4610      	moveq	r0, r2
     686:	4619      	moveq	r1, r3
     688:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     68c:	d019      	beq.n	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     68e:	ea94 0f0c 	teq	r4, ip
     692:	d102      	bne.n	69a <CONFIG_BT_COMPANY_ID+0xa9>
     694:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     698:	d113      	bne.n	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     69a:	ea95 0f0c 	teq	r5, ip
     69e:	d105      	bne.n	6ac <CONFIG_BT_COMPANY_ID+0xbb>
     6a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     6a4:	bf1c      	itt	ne
     6a6:	4610      	movne	r0, r2
     6a8:	4619      	movne	r1, r3
     6aa:	d10a      	bne.n	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     6ac:	ea81 0103 	eor.w	r1, r1, r3
     6b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     6bc:	f04f 0000 	mov.w	r0, #0
     6c0:	bd70      	pop	{r4, r5, r6, pc}
     6c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     6ca:	bd70      	pop	{r4, r5, r6, pc}

000006cc <__aeabi_ddiv>:
     6cc:	b570      	push	{r4, r5, r6, lr}
     6ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
     6d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     6d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     6da:	bf1d      	ittte	ne
     6dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     6e0:	ea94 0f0c 	teqne	r4, ip
     6e4:	ea95 0f0c 	teqne	r5, ip
     6e8:	f000 f8a7 	bleq	83a <CONFIG_ISR_STACK_SIZE+0x3a>
     6ec:	eba4 0405 	sub.w	r4, r4, r5
     6f0:	ea81 0e03 	eor.w	lr, r1, r3
     6f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6fc:	f000 8088 	beq.w	810 <CONFIG_ISR_STACK_SIZE+0x10>
     700:	ea4f 3303 	mov.w	r3, r3, lsl #12
     704:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     708:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     70c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     710:	ea4f 2202 	mov.w	r2, r2, lsl #8
     714:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     718:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     71c:	ea4f 2600 	mov.w	r6, r0, lsl #8
     720:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     724:	429d      	cmp	r5, r3
     726:	bf08      	it	eq
     728:	4296      	cmpeq	r6, r2
     72a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     72e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     732:	d202      	bcs.n	73a <__aeabi_ddiv+0x6e>
     734:	085b      	lsrs	r3, r3, #1
     736:	ea4f 0232 	mov.w	r2, r2, rrx
     73a:	1ab6      	subs	r6, r6, r2
     73c:	eb65 0503 	sbc.w	r5, r5, r3
     740:	085b      	lsrs	r3, r3, #1
     742:	ea4f 0232 	mov.w	r2, r2, rrx
     746:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     74a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     74e:	ebb6 0e02 	subs.w	lr, r6, r2
     752:	eb75 0e03 	sbcs.w	lr, r5, r3
     756:	bf22      	ittt	cs
     758:	1ab6      	subcs	r6, r6, r2
     75a:	4675      	movcs	r5, lr
     75c:	ea40 000c 	orrcs.w	r0, r0, ip
     760:	085b      	lsrs	r3, r3, #1
     762:	ea4f 0232 	mov.w	r2, r2, rrx
     766:	ebb6 0e02 	subs.w	lr, r6, r2
     76a:	eb75 0e03 	sbcs.w	lr, r5, r3
     76e:	bf22      	ittt	cs
     770:	1ab6      	subcs	r6, r6, r2
     772:	4675      	movcs	r5, lr
     774:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     778:	085b      	lsrs	r3, r3, #1
     77a:	ea4f 0232 	mov.w	r2, r2, rrx
     77e:	ebb6 0e02 	subs.w	lr, r6, r2
     782:	eb75 0e03 	sbcs.w	lr, r5, r3
     786:	bf22      	ittt	cs
     788:	1ab6      	subcs	r6, r6, r2
     78a:	4675      	movcs	r5, lr
     78c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     790:	085b      	lsrs	r3, r3, #1
     792:	ea4f 0232 	mov.w	r2, r2, rrx
     796:	ebb6 0e02 	subs.w	lr, r6, r2
     79a:	eb75 0e03 	sbcs.w	lr, r5, r3
     79e:	bf22      	ittt	cs
     7a0:	1ab6      	subcs	r6, r6, r2
     7a2:	4675      	movcs	r5, lr
     7a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     7a8:	ea55 0e06 	orrs.w	lr, r5, r6
     7ac:	d018      	beq.n	7e0 <__aeabi_ddiv+0x114>
     7ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
     7b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     7b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
     7ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     7be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     7c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     7c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     7ca:	d1c0      	bne.n	74e <__aeabi_ddiv+0x82>
     7cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7d0:	d10b      	bne.n	7ea <__aeabi_ddiv+0x11e>
     7d2:	ea41 0100 	orr.w	r1, r1, r0
     7d6:	f04f 0000 	mov.w	r0, #0
     7da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     7de:	e7b6      	b.n	74e <__aeabi_ddiv+0x82>
     7e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7e4:	bf04      	itt	eq
     7e6:	4301      	orreq	r1, r0
     7e8:	2000      	moveq	r0, #0
     7ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7ee:	bf88      	it	hi
     7f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7f4:	f63f aeaf 	bhi.w	556 <__aeabi_dmul+0xde>
     7f8:	ebb5 0c03 	subs.w	ip, r5, r3
     7fc:	bf04      	itt	eq
     7fe:	ebb6 0c02 	subseq.w	ip, r6, r2
     802:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     806:	f150 0000 	adcs.w	r0, r0, #0
     80a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     80e:	bd70      	pop	{r4, r5, r6, pc}
     810:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     814:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     818:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     81c:	bfc2      	ittt	gt
     81e:	ebd4 050c 	rsbsgt	r5, r4, ip
     822:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     826:	bd70      	popgt	{r4, r5, r6, pc}
     828:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     82c:	f04f 0e00 	mov.w	lr, #0
     830:	3c01      	subs	r4, #1
     832:	e690      	b.n	556 <__aeabi_dmul+0xde>
     834:	ea45 0e06 	orr.w	lr, r5, r6
     838:	e68d      	b.n	556 <__aeabi_dmul+0xde>
     83a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     83e:	ea94 0f0c 	teq	r4, ip
     842:	bf08      	it	eq
     844:	ea95 0f0c 	teqeq	r5, ip
     848:	f43f af3b 	beq.w	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     84c:	ea94 0f0c 	teq	r4, ip
     850:	d10a      	bne.n	868 <CONFIG_ISR_STACK_SIZE+0x68>
     852:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     856:	f47f af34 	bne.w	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     85a:	ea95 0f0c 	teq	r5, ip
     85e:	f47f af25 	bne.w	6ac <CONFIG_BT_COMPANY_ID+0xbb>
     862:	4610      	mov	r0, r2
     864:	4619      	mov	r1, r3
     866:	e72c      	b.n	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     868:	ea95 0f0c 	teq	r5, ip
     86c:	d106      	bne.n	87c <CONFIG_ISR_STACK_SIZE+0x7c>
     86e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     872:	f43f aefd 	beq.w	670 <CONFIG_BT_COMPANY_ID+0x7f>
     876:	4610      	mov	r0, r2
     878:	4619      	mov	r1, r3
     87a:	e722      	b.n	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     87c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     880:	bf18      	it	ne
     882:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     886:	f47f aec5 	bne.w	614 <CONFIG_BT_COMPANY_ID+0x23>
     88a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     88e:	f47f af0d 	bne.w	6ac <CONFIG_BT_COMPANY_ID+0xbb>
     892:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     896:	f47f aeeb 	bne.w	670 <CONFIG_BT_COMPANY_ID+0x7f>
     89a:	e712      	b.n	6c2 <CONFIG_BT_COMPANY_ID+0xd1>

0000089c <__gedf2>:
     89c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
     8a0:	e006      	b.n	8b0 <__cmpdf2+0x4>
     8a2:	bf00      	nop

000008a4 <__ledf2>:
     8a4:	f04f 0c01 	mov.w	ip, #1
     8a8:	e002      	b.n	8b0 <__cmpdf2+0x4>
     8aa:	bf00      	nop

000008ac <__cmpdf2>:
     8ac:	f04f 0c01 	mov.w	ip, #1
     8b0:	f84d cd04 	str.w	ip, [sp, #-4]!
     8b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     8b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     8bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     8c0:	bf18      	it	ne
     8c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     8c6:	d01b      	beq.n	900 <__cmpdf2+0x54>
     8c8:	b001      	add	sp, #4
     8ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     8ce:	bf0c      	ite	eq
     8d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     8d4:	ea91 0f03 	teqne	r1, r3
     8d8:	bf02      	ittt	eq
     8da:	ea90 0f02 	teqeq	r0, r2
     8de:	2000      	moveq	r0, #0
     8e0:	4770      	bxeq	lr
     8e2:	f110 0f00 	cmn.w	r0, #0
     8e6:	ea91 0f03 	teq	r1, r3
     8ea:	bf58      	it	pl
     8ec:	4299      	cmppl	r1, r3
     8ee:	bf08      	it	eq
     8f0:	4290      	cmpeq	r0, r2
     8f2:	bf2c      	ite	cs
     8f4:	17d8      	asrcs	r0, r3, #31
     8f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     8fa:	f040 0001 	orr.w	r0, r0, #1
     8fe:	4770      	bx	lr
     900:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     908:	d102      	bne.n	910 <__cmpdf2+0x64>
     90a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     90e:	d107      	bne.n	920 <__cmpdf2+0x74>
     910:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     914:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     918:	d1d6      	bne.n	8c8 <__cmpdf2+0x1c>
     91a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     91e:	d0d3      	beq.n	8c8 <__cmpdf2+0x1c>
     920:	f85d 0b04 	ldr.w	r0, [sp], #4
     924:	4770      	bx	lr
     926:	bf00      	nop

00000928 <__aeabi_cdrcmple>:
     928:	4684      	mov	ip, r0
     92a:	4610      	mov	r0, r2
     92c:	4662      	mov	r2, ip
     92e:	468c      	mov	ip, r1
     930:	4619      	mov	r1, r3
     932:	4663      	mov	r3, ip
     934:	e000      	b.n	938 <__aeabi_cdcmpeq>
     936:	bf00      	nop

00000938 <__aeabi_cdcmpeq>:
     938:	b501      	push	{r0, lr}
     93a:	f7ff ffb7 	bl	8ac <__cmpdf2>
     93e:	2800      	cmp	r0, #0
     940:	bf48      	it	mi
     942:	f110 0f00 	cmnmi.w	r0, #0
     946:	bd01      	pop	{r0, pc}

00000948 <__aeabi_dcmpeq>:
     948:	f84d ed08 	str.w	lr, [sp, #-8]!
     94c:	f7ff fff4 	bl	938 <__aeabi_cdcmpeq>
     950:	bf0c      	ite	eq
     952:	2001      	moveq	r0, #1
     954:	2000      	movne	r0, #0
     956:	f85d fb08 	ldr.w	pc, [sp], #8
     95a:	bf00      	nop

0000095c <__aeabi_dcmplt>:
     95c:	f84d ed08 	str.w	lr, [sp, #-8]!
     960:	f7ff ffea 	bl	938 <__aeabi_cdcmpeq>
     964:	bf34      	ite	cc
     966:	2001      	movcc	r0, #1
     968:	2000      	movcs	r0, #0
     96a:	f85d fb08 	ldr.w	pc, [sp], #8
     96e:	bf00      	nop

00000970 <__aeabi_dcmple>:
     970:	f84d ed08 	str.w	lr, [sp, #-8]!
     974:	f7ff ffe0 	bl	938 <__aeabi_cdcmpeq>
     978:	bf94      	ite	ls
     97a:	2001      	movls	r0, #1
     97c:	2000      	movhi	r0, #0
     97e:	f85d fb08 	ldr.w	pc, [sp], #8
     982:	bf00      	nop

00000984 <__aeabi_dcmpge>:
     984:	f84d ed08 	str.w	lr, [sp, #-8]!
     988:	f7ff ffce 	bl	928 <__aeabi_cdrcmple>
     98c:	bf94      	ite	ls
     98e:	2001      	movls	r0, #1
     990:	2000      	movhi	r0, #0
     992:	f85d fb08 	ldr.w	pc, [sp], #8
     996:	bf00      	nop

00000998 <__aeabi_dcmpgt>:
     998:	f84d ed08 	str.w	lr, [sp, #-8]!
     99c:	f7ff ffc4 	bl	928 <__aeabi_cdrcmple>
     9a0:	bf34      	ite	cc
     9a2:	2001      	movcc	r0, #1
     9a4:	2000      	movcs	r0, #0
     9a6:	f85d fb08 	ldr.w	pc, [sp], #8
     9aa:	bf00      	nop

000009ac <__aeabi_d2iz>:
     9ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
     9b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     9b4:	d215      	bcs.n	9e2 <__aeabi_d2iz+0x36>
     9b6:	d511      	bpl.n	9dc <__aeabi_d2iz+0x30>
     9b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     9bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     9c0:	d912      	bls.n	9e8 <__aeabi_d2iz+0x3c>
     9c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     9c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     9ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     9ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     9d2:	fa23 f002 	lsr.w	r0, r3, r2
     9d6:	bf18      	it	ne
     9d8:	4240      	negne	r0, r0
     9da:	4770      	bx	lr
     9dc:	f04f 0000 	mov.w	r0, #0
     9e0:	4770      	bx	lr
     9e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     9e6:	d105      	bne.n	9f4 <__aeabi_d2iz+0x48>
     9e8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     9ec:	bf08      	it	eq
     9ee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     9f2:	4770      	bx	lr
     9f4:	f04f 0000 	mov.w	r0, #0
     9f8:	4770      	bx	lr
     9fa:	bf00      	nop

000009fc <__aeabi_d2uiz>:
     9fc:	004a      	lsls	r2, r1, #1
     9fe:	d211      	bcs.n	a24 <__aeabi_d2uiz+0x28>
     a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     a04:	d211      	bcs.n	a2a <__aeabi_d2uiz+0x2e>
     a06:	d50d      	bpl.n	a24 <__aeabi_d2uiz+0x28>
     a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     a10:	d40e      	bmi.n	a30 <__aeabi_d2uiz+0x34>
     a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     a1e:	fa23 f002 	lsr.w	r0, r3, r2
     a22:	4770      	bx	lr
     a24:	f04f 0000 	mov.w	r0, #0
     a28:	4770      	bx	lr
     a2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     a2e:	d102      	bne.n	a36 <__aeabi_d2uiz+0x3a>
     a30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     a34:	4770      	bx	lr
     a36:	f04f 0000 	mov.w	r0, #0
     a3a:	4770      	bx	lr

00000a3c <__aeabi_uldivmod>:
     a3c:	b953      	cbnz	r3, a54 <__aeabi_uldivmod+0x18>
     a3e:	b94a      	cbnz	r2, a54 <__aeabi_uldivmod+0x18>
     a40:	2900      	cmp	r1, #0
     a42:	bf08      	it	eq
     a44:	2800      	cmpeq	r0, #0
     a46:	bf1c      	itt	ne
     a48:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     a4c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     a50:	f000 b96e 	b.w	d30 <__aeabi_idiv0>
     a54:	f1ad 0c08 	sub.w	ip, sp, #8
     a58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     a5c:	f000 f806 	bl	a6c <__udivmoddi4>
     a60:	f8dd e004 	ldr.w	lr, [sp, #4]
     a64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     a68:	b004      	add	sp, #16
     a6a:	4770      	bx	lr

00000a6c <__udivmoddi4>:
     a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     a70:	9d08      	ldr	r5, [sp, #32]
     a72:	460e      	mov	r6, r1
     a74:	4604      	mov	r4, r0
     a76:	468c      	mov	ip, r1
     a78:	2b00      	cmp	r3, #0
     a7a:	f040 8081 	bne.w	b80 <__udivmoddi4+0x114>
     a7e:	428a      	cmp	r2, r1
     a80:	4617      	mov	r7, r2
     a82:	d945      	bls.n	b10 <__udivmoddi4+0xa4>
     a84:	fab2 f282 	clz	r2, r2
     a88:	b14a      	cbz	r2, a9e <__udivmoddi4+0x32>
     a8a:	f1c2 0120 	rsb	r1, r2, #32
     a8e:	fa06 f302 	lsl.w	r3, r6, r2
     a92:	fa20 f101 	lsr.w	r1, r0, r1
     a96:	4097      	lsls	r7, r2
     a98:	ea41 0c03 	orr.w	ip, r1, r3
     a9c:	4094      	lsls	r4, r2
     a9e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     aa2:	0c23      	lsrs	r3, r4, #16
     aa4:	fbbc f6fe 	udiv	r6, ip, lr
     aa8:	b2b9      	uxth	r1, r7
     aaa:	fb0e cc16 	mls	ip, lr, r6, ip
     aae:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     ab2:	fb06 f001 	mul.w	r0, r6, r1
     ab6:	4298      	cmp	r0, r3
     ab8:	d909      	bls.n	ace <__udivmoddi4+0x62>
     aba:	18fb      	adds	r3, r7, r3
     abc:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
     ac0:	f080 8115 	bcs.w	cee <__udivmoddi4+0x282>
     ac4:	4298      	cmp	r0, r3
     ac6:	f240 8112 	bls.w	cee <__udivmoddi4+0x282>
     aca:	3e02      	subs	r6, #2
     acc:	443b      	add	r3, r7
     ace:	1a1b      	subs	r3, r3, r0
     ad0:	b2a4      	uxth	r4, r4
     ad2:	fbb3 f0fe 	udiv	r0, r3, lr
     ad6:	fb0e 3310 	mls	r3, lr, r0, r3
     ada:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     ade:	fb00 f101 	mul.w	r1, r0, r1
     ae2:	42a1      	cmp	r1, r4
     ae4:	d909      	bls.n	afa <__udivmoddi4+0x8e>
     ae6:	193c      	adds	r4, r7, r4
     ae8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     aec:	f080 8101 	bcs.w	cf2 <__udivmoddi4+0x286>
     af0:	42a1      	cmp	r1, r4
     af2:	f240 80fe 	bls.w	cf2 <__udivmoddi4+0x286>
     af6:	3802      	subs	r0, #2
     af8:	443c      	add	r4, r7
     afa:	1a64      	subs	r4, r4, r1
     afc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     b00:	2100      	movs	r1, #0
     b02:	b11d      	cbz	r5, b0c <__udivmoddi4+0xa0>
     b04:	40d4      	lsrs	r4, r2
     b06:	2300      	movs	r3, #0
     b08:	e9c5 4300 	strd	r4, r3, [r5]
     b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     b10:	b902      	cbnz	r2, b14 <__udivmoddi4+0xa8>
     b12:	deff      	udf	#255	; 0xff
     b14:	fab2 f282 	clz	r2, r2
     b18:	2a00      	cmp	r2, #0
     b1a:	d14f      	bne.n	bbc <__udivmoddi4+0x150>
     b1c:	1bcb      	subs	r3, r1, r7
     b1e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     b22:	fa1f f887 	uxth.w	r8, r7
     b26:	2101      	movs	r1, #1
     b28:	fbb3 fcfe 	udiv	ip, r3, lr
     b2c:	0c26      	lsrs	r6, r4, #16
     b2e:	fb0e 331c 	mls	r3, lr, ip, r3
     b32:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
     b36:	fb08 f30c 	mul.w	r3, r8, ip
     b3a:	42b3      	cmp	r3, r6
     b3c:	d907      	bls.n	b4e <__udivmoddi4+0xe2>
     b3e:	19be      	adds	r6, r7, r6
     b40:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     b44:	d202      	bcs.n	b4c <__udivmoddi4+0xe0>
     b46:	42b3      	cmp	r3, r6
     b48:	f200 80eb 	bhi.w	d22 <__udivmoddi4+0x2b6>
     b4c:	4684      	mov	ip, r0
     b4e:	1af6      	subs	r6, r6, r3
     b50:	b2a3      	uxth	r3, r4
     b52:	fbb6 f0fe 	udiv	r0, r6, lr
     b56:	fb0e 6610 	mls	r6, lr, r0, r6
     b5a:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
     b5e:	fb08 f800 	mul.w	r8, r8, r0
     b62:	45a0      	cmp	r8, r4
     b64:	d907      	bls.n	b76 <__udivmoddi4+0x10a>
     b66:	193c      	adds	r4, r7, r4
     b68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     b6c:	d202      	bcs.n	b74 <__udivmoddi4+0x108>
     b6e:	45a0      	cmp	r8, r4
     b70:	f200 80d2 	bhi.w	d18 <__udivmoddi4+0x2ac>
     b74:	4618      	mov	r0, r3
     b76:	eba4 0408 	sub.w	r4, r4, r8
     b7a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     b7e:	e7c0      	b.n	b02 <__udivmoddi4+0x96>
     b80:	428b      	cmp	r3, r1
     b82:	d908      	bls.n	b96 <__udivmoddi4+0x12a>
     b84:	2d00      	cmp	r5, #0
     b86:	f000 80af 	beq.w	ce8 <__udivmoddi4+0x27c>
     b8a:	2100      	movs	r1, #0
     b8c:	e9c5 0600 	strd	r0, r6, [r5]
     b90:	4608      	mov	r0, r1
     b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     b96:	fab3 f183 	clz	r1, r3
     b9a:	2900      	cmp	r1, #0
     b9c:	d149      	bne.n	c32 <__udivmoddi4+0x1c6>
     b9e:	42b3      	cmp	r3, r6
     ba0:	d302      	bcc.n	ba8 <__udivmoddi4+0x13c>
     ba2:	4282      	cmp	r2, r0
     ba4:	f200 80bb 	bhi.w	d1e <__udivmoddi4+0x2b2>
     ba8:	1a84      	subs	r4, r0, r2
     baa:	eb66 0303 	sbc.w	r3, r6, r3
     bae:	2001      	movs	r0, #1
     bb0:	469c      	mov	ip, r3
     bb2:	2d00      	cmp	r5, #0
     bb4:	d0aa      	beq.n	b0c <__udivmoddi4+0xa0>
     bb6:	e9c5 4c00 	strd	r4, ip, [r5]
     bba:	e7a7      	b.n	b0c <__udivmoddi4+0xa0>
     bbc:	f1c2 0320 	rsb	r3, r2, #32
     bc0:	4097      	lsls	r7, r2
     bc2:	40d8      	lsrs	r0, r3
     bc4:	4091      	lsls	r1, r2
     bc6:	40de      	lsrs	r6, r3
     bc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     bcc:	4308      	orrs	r0, r1
     bce:	ea4f 4c10 	mov.w	ip, r0, lsr #16
     bd2:	fbb6 f1fe 	udiv	r1, r6, lr
     bd6:	fa1f f887 	uxth.w	r8, r7
     bda:	fb0e 6611 	mls	r6, lr, r1, r6
     bde:	ea4c 4606 	orr.w	r6, ip, r6, lsl #16
     be2:	fb01 f308 	mul.w	r3, r1, r8
     be6:	42b3      	cmp	r3, r6
     be8:	fa04 f402 	lsl.w	r4, r4, r2
     bec:	d909      	bls.n	c02 <__udivmoddi4+0x196>
     bee:	19be      	adds	r6, r7, r6
     bf0:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
     bf4:	f080 808e 	bcs.w	d14 <__udivmoddi4+0x2a8>
     bf8:	42b3      	cmp	r3, r6
     bfa:	f240 808b 	bls.w	d14 <__udivmoddi4+0x2a8>
     bfe:	3902      	subs	r1, #2
     c00:	443e      	add	r6, r7
     c02:	1af3      	subs	r3, r6, r3
     c04:	b286      	uxth	r6, r0
     c06:	fbb3 f0fe 	udiv	r0, r3, lr
     c0a:	fb0e 3310 	mls	r3, lr, r0, r3
     c0e:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
     c12:	fb00 f308 	mul.w	r3, r0, r8
     c16:	42b3      	cmp	r3, r6
     c18:	d907      	bls.n	c2a <__udivmoddi4+0x1be>
     c1a:	19be      	adds	r6, r7, r6
     c1c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     c20:	d274      	bcs.n	d0c <__udivmoddi4+0x2a0>
     c22:	42b3      	cmp	r3, r6
     c24:	d972      	bls.n	d0c <__udivmoddi4+0x2a0>
     c26:	3802      	subs	r0, #2
     c28:	443e      	add	r6, r7
     c2a:	1af3      	subs	r3, r6, r3
     c2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     c30:	e77a      	b.n	b28 <__udivmoddi4+0xbc>
     c32:	f1c1 0720 	rsb	r7, r1, #32
     c36:	fa03 f401 	lsl.w	r4, r3, r1
     c3a:	fa22 f307 	lsr.w	r3, r2, r7
     c3e:	431c      	orrs	r4, r3
     c40:	fa20 f907 	lsr.w	r9, r0, r7
     c44:	fa06 f301 	lsl.w	r3, r6, r1
     c48:	ea4f 4c14 	mov.w	ip, r4, lsr #16
     c4c:	40fe      	lsrs	r6, r7
     c4e:	ea49 0903 	orr.w	r9, r9, r3
     c52:	ea4f 4319 	mov.w	r3, r9, lsr #16
     c56:	fbb6 fefc 	udiv	lr, r6, ip
     c5a:	fa1f f884 	uxth.w	r8, r4
     c5e:	fb0c 661e 	mls	r6, ip, lr, r6
     c62:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
     c66:	fb0e fa08 	mul.w	sl, lr, r8
     c6a:	45b2      	cmp	sl, r6
     c6c:	fa02 f201 	lsl.w	r2, r2, r1
     c70:	fa00 f301 	lsl.w	r3, r0, r1
     c74:	d908      	bls.n	c88 <__udivmoddi4+0x21c>
     c76:	19a6      	adds	r6, r4, r6
     c78:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
     c7c:	d248      	bcs.n	d10 <__udivmoddi4+0x2a4>
     c7e:	45b2      	cmp	sl, r6
     c80:	d946      	bls.n	d10 <__udivmoddi4+0x2a4>
     c82:	f1ae 0e02 	sub.w	lr, lr, #2
     c86:	4426      	add	r6, r4
     c88:	eba6 060a 	sub.w	r6, r6, sl
     c8c:	fa1f f989 	uxth.w	r9, r9
     c90:	fbb6 f0fc 	udiv	r0, r6, ip
     c94:	fb0c 6610 	mls	r6, ip, r0, r6
     c98:	ea49 4606 	orr.w	r6, r9, r6, lsl #16
     c9c:	fb00 f808 	mul.w	r8, r0, r8
     ca0:	45b0      	cmp	r8, r6
     ca2:	d907      	bls.n	cb4 <__udivmoddi4+0x248>
     ca4:	19a6      	adds	r6, r4, r6
     ca6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     caa:	d22d      	bcs.n	d08 <__udivmoddi4+0x29c>
     cac:	45b0      	cmp	r8, r6
     cae:	d92b      	bls.n	d08 <__udivmoddi4+0x29c>
     cb0:	3802      	subs	r0, #2
     cb2:	4426      	add	r6, r4
     cb4:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     cb8:	eba6 0608 	sub.w	r6, r6, r8
     cbc:	fba0 8902 	umull	r8, r9, r0, r2
     cc0:	454e      	cmp	r6, r9
     cc2:	46c4      	mov	ip, r8
     cc4:	46ce      	mov	lr, r9
     cc6:	d318      	bcc.n	cfa <__udivmoddi4+0x28e>
     cc8:	d015      	beq.n	cf6 <__udivmoddi4+0x28a>
     cca:	b375      	cbz	r5, d2a <__udivmoddi4+0x2be>
     ccc:	ebb3 020c 	subs.w	r2, r3, ip
     cd0:	eb66 060e 	sbc.w	r6, r6, lr
     cd4:	fa06 f707 	lsl.w	r7, r6, r7
     cd8:	fa22 f301 	lsr.w	r3, r2, r1
     cdc:	40ce      	lsrs	r6, r1
     cde:	431f      	orrs	r7, r3
     ce0:	e9c5 7600 	strd	r7, r6, [r5]
     ce4:	2100      	movs	r1, #0
     ce6:	e711      	b.n	b0c <__udivmoddi4+0xa0>
     ce8:	4629      	mov	r1, r5
     cea:	4628      	mov	r0, r5
     cec:	e70e      	b.n	b0c <__udivmoddi4+0xa0>
     cee:	4666      	mov	r6, ip
     cf0:	e6ed      	b.n	ace <__udivmoddi4+0x62>
     cf2:	4618      	mov	r0, r3
     cf4:	e701      	b.n	afa <__udivmoddi4+0x8e>
     cf6:	4543      	cmp	r3, r8
     cf8:	d2e7      	bcs.n	cca <__udivmoddi4+0x25e>
     cfa:	ebb8 0c02 	subs.w	ip, r8, r2
     cfe:	eb69 0404 	sbc.w	r4, r9, r4
     d02:	3801      	subs	r0, #1
     d04:	46a6      	mov	lr, r4
     d06:	e7e0      	b.n	cca <__udivmoddi4+0x25e>
     d08:	4660      	mov	r0, ip
     d0a:	e7d3      	b.n	cb4 <__udivmoddi4+0x248>
     d0c:	4660      	mov	r0, ip
     d0e:	e78c      	b.n	c2a <__udivmoddi4+0x1be>
     d10:	4686      	mov	lr, r0
     d12:	e7b9      	b.n	c88 <__udivmoddi4+0x21c>
     d14:	4661      	mov	r1, ip
     d16:	e774      	b.n	c02 <__udivmoddi4+0x196>
     d18:	3802      	subs	r0, #2
     d1a:	443c      	add	r4, r7
     d1c:	e72b      	b.n	b76 <__udivmoddi4+0x10a>
     d1e:	4608      	mov	r0, r1
     d20:	e747      	b.n	bb2 <__udivmoddi4+0x146>
     d22:	f1ac 0c02 	sub.w	ip, ip, #2
     d26:	443e      	add	r6, r7
     d28:	e711      	b.n	b4e <__udivmoddi4+0xe2>
     d2a:	4629      	mov	r1, r5
     d2c:	e6ee      	b.n	b0c <__udivmoddi4+0xa0>
     d2e:	bf00      	nop

00000d30 <__aeabi_idiv0>:
     d30:	4770      	bx	lr
     d32:	bf00      	nop

00000d34 <strcmp>:
     d34:	f810 2b01 	ldrb.w	r2, [r0], #1
     d38:	f811 3b01 	ldrb.w	r3, [r1], #1
     d3c:	2a01      	cmp	r2, #1
     d3e:	bf28      	it	cs
     d40:	429a      	cmpcs	r2, r3
     d42:	d0f7      	beq.n	d34 <strcmp>
     d44:	1ad0      	subs	r0, r2, r3
     d46:	4770      	bx	lr

00000d48 <strlen>:
     d48:	4603      	mov	r3, r0
     d4a:	f813 2b01 	ldrb.w	r2, [r3], #1
     d4e:	2a00      	cmp	r2, #0
     d50:	d1fb      	bne.n	d4a <strlen+0x2>
     d52:	1a18      	subs	r0, r3, r0
     d54:	3801      	subs	r0, #1
     d56:	4770      	bx	lr

00000d58 <hci_init>:
	}
}
#endif /* CONFIG_BT_HCI_VS_EXT */

static int hci_init(void)
{
     d58:	b570      	push	{r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
     d5a:	4d46      	ldr	r5, [pc, #280]	; (e74 <hci_init+0x11c>)
     d5c:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
     d60:	6899      	ldr	r1, [r3, #8]
     d62:	f011 0101 	ands.w	r1, r1, #1
{
     d66:	b088      	sub	sp, #32
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
     d68:	d121      	bne.n	dae <hci_init+0x56>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
     d6a:	aa03      	add	r2, sp, #12
     d6c:	f640 4003 	movw	r0, #3075	; 0xc03
     d70:	f006 f8bc 	bl	6eec <bt_hci_cmd_send_sync>
		if (err) {
     d74:	4604      	mov	r4, r0
     d76:	2800      	cmp	r0, #0
     d78:	d178      	bne.n	e6c <hci_init+0x114>
		hci_reset_complete(rsp);
     d7a:	9b03      	ldr	r3, [sp, #12]
	uint8_t status = buf->data[0];
     d7c:	689b      	ldr	r3, [r3, #8]
	if (status) {
     d7e:	781b      	ldrb	r3, [r3, #0]
     d80:	b993      	cbnz	r3, da8 <hci_init+0x50>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
     d82:	f3bf 8f5b 	dmb	ish
     d86:	462b      	mov	r3, r5
     d88:	f853 2f98 	ldr.w	r2, [r3, #152]!
     d8c:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
     d90:	f002 0205 	and.w	r2, r2, #5
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     d94:	f3bf 8f5b 	dmb	ish
     d98:	e853 1f00 	ldrex	r1, [r3]
     d9c:	e843 2000 	strex	r0, r2, [r3]
     da0:	2800      	cmp	r0, #0
     da2:	d1f9      	bne.n	d98 <hci_init+0x40>
     da4:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
     da8:	9803      	ldr	r0, [sp, #12]
     daa:	f019 f9df 	bl	1a16c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
     dae:	aa03      	add	r2, sp, #12
     db0:	2100      	movs	r1, #0
     db2:	f241 0003 	movw	r0, #4099	; 0x1003
     db6:	f006 f899 	bl	6eec <bt_hci_cmd_send_sync>
	if (err) {
     dba:	4604      	mov	r4, r0
     dbc:	2800      	cmp	r0, #0
     dbe:	d155      	bne.n	e6c <hci_init+0x114>
	read_local_features_complete(rsp);
     dc0:	9a03      	ldr	r2, [sp, #12]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
     dc2:	4e2d      	ldr	r6, [pc, #180]	; (e78 <hci_init+0x120>)
     dc4:	6893      	ldr	r3, [r2, #8]
     dc6:	f853 0f01 	ldr.w	r0, [r3, #1]!
     dca:	6859      	ldr	r1, [r3, #4]
     dcc:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
     dce:	4610      	mov	r0, r2
     dd0:	f019 f9cc 	bl	1a16c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
     dd4:	4621      	mov	r1, r4
     dd6:	aa03      	add	r2, sp, #12
     dd8:	f241 0001 	movw	r0, #4097	; 0x1001
     ddc:	f006 f886 	bl	6eec <bt_hci_cmd_send_sync>
	if (err) {
     de0:	4604      	mov	r4, r0
     de2:	2800      	cmp	r0, #0
     de4:	d142      	bne.n	e6c <hci_init+0x114>
	read_local_ver_complete(rsp);
     de6:	9803      	ldr	r0, [sp, #12]
     de8:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
     dea:	785a      	ldrb	r2, [r3, #1]
     dec:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
     df0:	78d9      	ldrb	r1, [r3, #3]
     df2:	789a      	ldrb	r2, [r3, #2]
     df4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     df8:	86ea      	strh	r2, [r5, #54]	; 0x36
	bt_dev.lmp_version = rp->lmp_version;
     dfa:	791a      	ldrb	r2, [r3, #4]
     dfc:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
     e00:	7a19      	ldrb	r1, [r3, #8]
     e02:	79da      	ldrb	r2, [r3, #7]
     e04:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     e08:	872a      	strh	r2, [r5, #56]	; 0x38
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
     e0a:	795a      	ldrb	r2, [r3, #5]
     e0c:	799b      	ldrb	r3, [r3, #6]
     e0e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
     e12:	876b      	strh	r3, [r5, #58]	; 0x3a
	net_buf_unref(rsp);
     e14:	f019 f9aa 	bl	1a16c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
     e18:	4621      	mov	r1, r4
     e1a:	aa03      	add	r2, sp, #12
     e1c:	f241 0002 	movw	r0, #4098	; 0x1002
     e20:	f006 f864 	bl	6eec <bt_hci_cmd_send_sync>
	if (err) {
     e24:	4604      	mov	r4, r0
     e26:	bb08      	cbnz	r0, e6c <hci_init+0x114>
	read_supported_commands_complete(rsp);
     e28:	9b03      	ldr	r3, [sp, #12]
     e2a:	689a      	ldr	r2, [r3, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
     e2c:	1c53      	adds	r3, r2, #1
     e2e:	3241      	adds	r2, #65	; 0x41
     e30:	6818      	ldr	r0, [r3, #0]
     e32:	6859      	ldr	r1, [r3, #4]
     e34:	4634      	mov	r4, r6
     e36:	c403      	stmia	r4!, {r0, r1}
     e38:	3308      	adds	r3, #8
     e3a:	4293      	cmp	r3, r2
     e3c:	4626      	mov	r6, r4
     e3e:	d1f7      	bne.n	e30 <hci_init+0xd8>
		bt_hci_ecc_supported_commands(bt_dev.supported_commands);
     e40:	480e      	ldr	r0, [pc, #56]	; (e7c <hci_init+0x124>)
     e42:	f01f fc5b 	bl	206fc <bt_hci_ecc_supported_commands>
	net_buf_unref(rsp);
     e46:	9803      	ldr	r0, [sp, #12]
     e48:	f019 f990 	bl	1a16c <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
     e4c:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
     e50:	065a      	lsls	r2, r3, #25
     e52:	d41b      	bmi.n	e8c <hci_init+0x134>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
     e54:	4b0a      	ldr	r3, [pc, #40]	; (e80 <hci_init+0x128>)
     e56:	490b      	ldr	r1, [pc, #44]	; (e84 <hci_init+0x12c>)
		BT_ERR("Non-LE capable controller detected!");
     e58:	480b      	ldr	r0, [pc, #44]	; (e88 <hci_init+0x130>)
     e5a:	1ac9      	subs	r1, r1, r3
     e5c:	08c9      	lsrs	r1, r1, #3
     e5e:	0189      	lsls	r1, r1, #6
     e60:	f041 0101 	orr.w	r1, r1, #1
     e64:	f01d fe68 	bl	1eb38 <log_0>
		return -ENODEV;
     e68:	f06f 0412 	mvn.w	r4, #18
	if (err) {
		return err;
	}

	return 0;
}
     e6c:	4620      	mov	r0, r4
     e6e:	b008      	add	sp, #32
     e70:	bd70      	pop	{r4, r5, r6, pc}
     e72:	bf00      	nop
     e74:	20000000 	.word	0x20000000
     e78:	2000003c 	.word	0x2000003c
     e7c:	20000044 	.word	0x20000044
     e80:	0002393c 	.word	0x0002393c
     e84:	00023a14 	.word	0x00023a14
     e88:	00026150 	.word	0x00026150
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
     e8c:	aa03      	add	r2, sp, #12
     e8e:	2100      	movs	r1, #0
     e90:	f242 0003 	movw	r0, #8195	; 0x2003
     e94:	f006 f82a 	bl	6eec <bt_hci_cmd_send_sync>
	if (err) {
     e98:	4604      	mov	r4, r0
     e9a:	2800      	cmp	r0, #0
     e9c:	d1e6      	bne.n	e6c <hci_init+0x114>
	read_le_features_complete(rsp);
     e9e:	9a03      	ldr	r2, [sp, #12]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
     ea0:	4ebf      	ldr	r6, [pc, #764]	; (11a0 <hci_init+0x448>)
     ea2:	6893      	ldr	r3, [r2, #8]
     ea4:	f853 0f01 	ldr.w	r0, [r3, #1]!
     ea8:	6859      	ldr	r1, [r3, #4]
     eaa:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
     eac:	4610      	mov	r0, r2
     eae:	f019 f95d 	bl	1a16c <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
     eb2:	4621      	mov	r1, r4
     eb4:	aa03      	add	r2, sp, #12
     eb6:	f242 0002 	movw	r0, #8194	; 0x2002
     eba:	f006 f817 	bl	6eec <bt_hci_cmd_send_sync>
		if (err) {
     ebe:	4604      	mov	r4, r0
     ec0:	2800      	cmp	r0, #0
     ec2:	d1d3      	bne.n	e6c <hci_init+0x114>
		le_read_buffer_size_complete(rsp);
     ec4:	9b03      	ldr	r3, [sp, #12]
     ec6:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
     ec8:	f8b3 2001 	ldrh.w	r2, [r3, #1]
     ecc:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
     ed0:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
     ed2:	b129      	cbz	r1, ee0 <hci_init+0x188>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
     ed4:	78da      	ldrb	r2, [r3, #3]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
     ed6:	4611      	mov	r1, r2
     ed8:	f106 0028 	add.w	r0, r6, #40	; 0x28
     edc:	f022 f8f7 	bl	230ce <z_impl_k_sem_init>
		net_buf_unref(rsp);
     ee0:	9803      	ldr	r0, [sp, #12]
     ee2:	f019 f943 	bl	1a16c <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
     ee6:	f895 6040 	ldrb.w	r6, [r5, #64]	; 0x40
     eea:	f016 0620 	ands.w	r6, r6, #32
     eee:	f000 80eb 	beq.w	10c8 <hci_init+0x370>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
     ef2:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
     ef6:	071b      	lsls	r3, r3, #28
     ef8:	d511      	bpl.n	f1e <hci_init+0x1c6>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
     efa:	aa03      	add	r2, sp, #12
     efc:	2100      	movs	r1, #0
     efe:	f242 001c 	movw	r0, #8220	; 0x201c
     f02:	f005 fff3 	bl	6eec <bt_hci_cmd_send_sync>
		if (err) {
     f06:	4604      	mov	r4, r0
     f08:	2800      	cmp	r0, #0
     f0a:	d1af      	bne.n	e6c <hci_init+0x114>
		le_read_supp_states_complete(rsp);
     f0c:	9803      	ldr	r0, [sp, #12]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
     f0e:	6883      	ldr	r3, [r0, #8]
     f10:	f853 2f01 	ldr.w	r2, [r3, #1]!
     f14:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
     f16:	e9c5 232a 	strd	r2, r3, [r5, #168]	; 0xa8
		net_buf_unref(rsp);
     f1a:	f019 f927 	bl	1a16c <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
     f1e:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
     f22:	069e      	lsls	r6, r3, #26
     f24:	d524      	bpl.n	f70 <hci_init+0x218>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
     f26:	a902      	add	r1, sp, #8
     f28:	f10d 0006 	add.w	r0, sp, #6
     f2c:	f006 f856 	bl	6fdc <hci_le_read_max_data_len>
		if (err) {
     f30:	4604      	mov	r4, r0
     f32:	2800      	cmp	r0, #0
     f34:	d19a      	bne.n	e6c <hci_init+0x114>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
     f36:	2104      	movs	r1, #4
     f38:	f242 0024 	movw	r0, #8228	; 0x2024
     f3c:	f005 fe72 	bl	6c24 <bt_hci_cmd_create>
		if (!buf) {
     f40:	4606      	mov	r6, r0
     f42:	2800      	cmp	r0, #0
     f44:	f000 80c7 	beq.w	10d6 <hci_init+0x37e>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
     f48:	2104      	movs	r1, #4
     f4a:	3008      	adds	r0, #8
     f4c:	f021 fb71 	bl	22632 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
     f50:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     f54:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
     f56:	f8bd 3008 	ldrh.w	r3, [sp, #8]
     f5a:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
     f5c:	4622      	mov	r2, r4
     f5e:	4631      	mov	r1, r6
     f60:	f242 0024 	movw	r0, #8228	; 0x2024
     f64:	f005 ffc2 	bl	6eec <bt_hci_cmd_send_sync>
		if (err) {
     f68:	4604      	mov	r4, r0
     f6a:	2800      	cmp	r0, #0
     f6c:	f47f af7e 	bne.w	e6c <hci_init+0x114>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
     f70:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
     f74:	065c      	lsls	r4, r3, #25
     f76:	d510      	bpl.n	f9a <hci_init+0x242>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
     f78:	aa03      	add	r2, sp, #12
     f7a:	2100      	movs	r1, #0
     f7c:	f242 002a 	movw	r0, #8234	; 0x202a
     f80:	f005 ffb4 	bl	6eec <bt_hci_cmd_send_sync>
		if (err) {
     f84:	4604      	mov	r4, r0
     f86:	2800      	cmp	r0, #0
     f88:	f47f af70 	bne.w	e6c <hci_init+0x114>
		le_read_resolving_list_size_complete(rsp);
     f8c:	9803      	ldr	r0, [sp, #12]
	bt_dev.le.rl_size = rp->rl_size;
     f8e:	6883      	ldr	r3, [r0, #8]
     f90:	785b      	ldrb	r3, [r3, #1]
     f92:	f885 30e8 	strb.w	r3, [r5, #232]	; 0xe8
		net_buf_unref(rsp);
     f96:	f019 f8e9 	bl	1a16c <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
     f9a:	2108      	movs	r1, #8
     f9c:	f242 0001 	movw	r0, #8193	; 0x2001
     fa0:	f005 fe40 	bl	6c24 <bt_hci_cmd_create>
	if (!buf) {
     fa4:	4604      	mov	r4, r0
     fa6:	2800      	cmp	r0, #0
     fa8:	f000 8095 	beq.w	10d6 <hci_init+0x37e>
     fac:	2108      	movs	r1, #8
     fae:	4408      	add	r0, r1
     fb0:	f021 fb3f 	bl	22632 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
     fb4:	f895 10a0 	ldrb.w	r1, [r5, #160]	; 0xa0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
     fb8:	f011 0f40 	tst.w	r1, #64	; 0x40
     fbc:	4602      	mov	r2, r0
     fbe:	f240 2302 	movw	r3, #514	; 0x202
     fc2:	bf08      	it	eq
     fc4:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
     fc6:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
     fc8:	bf4c      	ite	mi
     fca:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
     fce:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
     fd2:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
     fd4:	f895 30a1 	ldrb.w	r3, [r5, #161]	; 0xa1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
     fd8:	bf48      	it	mi
     fda:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
     fde:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
     fe2:	f895 3066 	ldrb.w	r3, [r5, #102]	; 0x66
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
     fe6:	bf18      	it	ne
     fe8:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
     fec:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
     ff0:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
     ff2:	bf48      	it	mi
     ff4:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
     ff8:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
     ffa:	bf08      	it	eq
     ffc:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
    1000:	2100      	movs	r1, #0
    1002:	f01f fc2a 	bl	2085a <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    1006:	4621      	mov	r1, r4
    1008:	2200      	movs	r2, #0
    100a:	f242 0001 	movw	r0, #8193	; 0x2001
    100e:	f005 ff6d 	bl	6eec <bt_hci_cmd_send_sync>
	if (err) {
    1012:	4604      	mov	r4, r0
    1014:	2800      	cmp	r0, #0
    1016:	f47f af29 	bne.w	e6c <hci_init+0x114>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    101a:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    101e:	0698      	lsls	r0, r3, #26
    1020:	d41e      	bmi.n	1060 <hci_init+0x308>
	if (bt_dev.le.acl_mtu) {
    1022:	f8b5 10cc 	ldrh.w	r1, [r5, #204]	; 0xcc
    1026:	b9d9      	cbnz	r1, 1060 <hci_init+0x308>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    1028:	aa03      	add	r2, sp, #12
    102a:	f241 0005 	movw	r0, #4101	; 0x1005
    102e:	f005 ff5d 	bl	6eec <bt_hci_cmd_send_sync>
	if (err) {
    1032:	4604      	mov	r4, r0
    1034:	2800      	cmp	r0, #0
    1036:	f47f af19 	bne.w	e6c <hci_init+0x114>
	if (bt_dev.le.acl_mtu) {
    103a:	f8b5 30cc 	ldrh.w	r3, [r5, #204]	; 0xcc
    103e:	b963      	cbnz	r3, 105a <hci_init+0x302>
	read_buffer_size_complete(rsp);
    1040:	9b03      	ldr	r3, [sp, #12]
    1042:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    1044:	785a      	ldrb	r2, [r3, #1]
    1046:	7899      	ldrb	r1, [r3, #2]
    1048:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    104c:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    1050:	889a      	ldrh	r2, [r3, #4]
    1052:	4854      	ldr	r0, [pc, #336]	; (11a4 <hci_init+0x44c>)
    1054:	4611      	mov	r1, r2
    1056:	f022 f83a 	bl	230ce <z_impl_k_sem_init>
	net_buf_unref(rsp);
    105a:	9803      	ldr	r0, [sp, #12]
    105c:	f019 f886 	bl	1a16c <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    1060:	2108      	movs	r1, #8
    1062:	f640 4001 	movw	r0, #3073	; 0xc01
    1066:	f005 fddd 	bl	6c24 <bt_hci_cmd_create>
	if (!buf) {
    106a:	4604      	mov	r4, r0
    106c:	b398      	cbz	r0, 10d6 <hci_init+0x37e>
    106e:	2108      	movs	r1, #8
    1070:	4408      	add	r0, r1
    1072:	f021 fade 	bl	22632 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    1076:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
    107a:	07d9      	lsls	r1, r3, #31
    107c:	4602      	mov	r2, r0
    107e:	d53f      	bpl.n	1100 <hci_init+0x3a8>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    1080:	a145      	add	r1, pc, #276	; (adr r1, 1198 <hci_init+0x440>)
    1082:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
    1086:	f01f fbe8 	bl	2085a <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    108a:	4621      	mov	r1, r4
    108c:	2200      	movs	r2, #0
    108e:	f640 4001 	movw	r0, #3073	; 0xc01
    1092:	f005 ff2b 	bl	6eec <bt_hci_cmd_send_sync>
	if (err) {
    1096:	4604      	mov	r4, r0
    1098:	2800      	cmp	r0, #0
    109a:	f47f aee7 	bne.w	e6c <hci_init+0x114>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    109e:	4601      	mov	r1, r0
    10a0:	aa02      	add	r2, sp, #8
    10a2:	f64f 4001 	movw	r0, #64513	; 0xfc01
    10a6:	f005 ff21 	bl	6eec <bt_hci_cmd_send_sync>
	if (err) {
    10aa:	4c3f      	ldr	r4, [pc, #252]	; (11a8 <hci_init+0x450>)
    10ac:	4b3f      	ldr	r3, [pc, #252]	; (11ac <hci_init+0x454>)
    10ae:	1ae4      	subs	r4, r4, r3
    10b0:	08e4      	lsrs	r4, r4, #3
    10b2:	01a4      	lsls	r4, r4, #6
    10b4:	b340      	cbz	r0, 1108 <hci_init+0x3b0>
		BT_WARN("Vendor HCI extensions not available");
    10b6:	483e      	ldr	r0, [pc, #248]	; (11b0 <hci_init+0x458>)
    10b8:	f044 0102 	orr.w	r1, r4, #2
			BT_WARN("Failed to read supported vendor features");
    10bc:	f01d fd3c 	bl	1eb38 <log_0>
	err = bt_id_init();
    10c0:	f006 ff66 	bl	7f90 <bt_id_init>
    10c4:	4604      	mov	r4, r0
	if (err) {
    10c6:	e6d1      	b.n	e6c <hci_init+0x114>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    10c8:	2102      	movs	r1, #2
    10ca:	f640 406d 	movw	r0, #3181	; 0xc6d
    10ce:	f005 fda9 	bl	6c24 <bt_hci_cmd_create>
		if (!buf) {
    10d2:	4604      	mov	r4, r0
    10d4:	b910      	cbnz	r0, 10dc <hci_init+0x384>
		return -ENOBUFS;
    10d6:	f06f 0468 	mvn.w	r4, #104	; 0x68
    10da:	e6c7      	b.n	e6c <hci_init+0x114>
    10dc:	2102      	movs	r1, #2
    10de:	3008      	adds	r0, #8
    10e0:	f021 faa7 	bl	22632 <net_buf_simple_add>
		cp_le->le = 0x01;
    10e4:	2301      	movs	r3, #1
    10e6:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    10e8:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    10ea:	4621      	mov	r1, r4
    10ec:	4632      	mov	r2, r6
    10ee:	f640 406d 	movw	r0, #3181	; 0xc6d
    10f2:	f005 fefb 	bl	6eec <bt_hci_cmd_send_sync>
		if (err) {
    10f6:	4604      	mov	r4, r0
    10f8:	2800      	cmp	r0, #0
    10fa:	f43f aefa 	beq.w	ef2 <hci_init+0x19a>
    10fe:	e6b5      	b.n	e6c <hci_init+0x114>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    1100:	482c      	ldr	r0, [pc, #176]	; (11b4 <hci_init+0x45c>)
    1102:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    1106:	e7be      	b.n	1086 <hci_init+0x32e>
	rp.info = (void *)rsp->data;
    1108:	9b02      	ldr	r3, [sp, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    110a:	482b      	ldr	r0, [pc, #172]	; (11b8 <hci_init+0x460>)
	rp.info = (void *)rsp->data;
    110c:	689d      	ldr	r5, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    110e:	f8b5 2001 	ldrh.w	r2, [r5, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
    1112:	2a03      	cmp	r2, #3
		return plat_str[platform];
    1114:	bf96      	itet	ls
    1116:	4929      	ldrls	r1, [pc, #164]	; (11bc <hci_init+0x464>)
	return "unknown";
    1118:	4929      	ldrhi	r1, [pc, #164]	; (11c0 <hci_init+0x468>)
		return plat_str[platform];
    111a:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
    111e:	f044 0303 	orr.w	r3, r4, #3
    1122:	f01d fd2a 	bl	1eb7a <log_2>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    1126:	f8b5 1001 	ldrh.w	r1, [r5, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
    112a:	f8b5 2003 	ldrh.w	r2, [r5, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    112e:	2902      	cmp	r1, #2
	BT_INFO("HW Variant: %s (0x%04x)",
    1130:	f044 0303 	orr.w	r3, r4, #3
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    1134:	d12e      	bne.n	1194 <hci_init+0x43c>
	if (variant < ARRAY_SIZE(nordic_str)) {
    1136:	2a03      	cmp	r2, #3
    1138:	d82c      	bhi.n	1194 <hci_init+0x43c>
		return nordic_str[variant];
    113a:	4922      	ldr	r1, [pc, #136]	; (11c4 <hci_init+0x46c>)
    113c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
    1140:	4821      	ldr	r0, [pc, #132]	; (11c8 <hci_init+0x470>)
    1142:	f01d fd1a 	bl	1eb7a <log_2>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    1146:	796a      	ldrb	r2, [r5, #5]
    1148:	4820      	ldr	r0, [pc, #128]	; (11cc <hci_init+0x474>)
	if (variant < ARRAY_SIZE(var_str)) {
    114a:	2a03      	cmp	r2, #3
		return var_str[variant];
    114c:	bf96      	itet	ls
    114e:	4920      	ldrls	r1, [pc, #128]	; (11d0 <hci_init+0x478>)
	return "unknown";
    1150:	491b      	ldrhi	r1, [pc, #108]	; (11c0 <hci_init+0x468>)
		return var_str[variant];
    1152:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    1156:	e9cd 1203 	strd	r1, r2, [sp, #12]
    115a:	79aa      	ldrb	r2, [r5, #6]
    115c:	9205      	str	r2, [sp, #20]
    115e:	f8b5 2007 	ldrh.w	r2, [r5, #7]
    1162:	9206      	str	r2, [sp, #24]
    1164:	f8d5 2009 	ldr.w	r2, [r5, #9]
    1168:	9207      	str	r2, [sp, #28]
    116a:	f044 0303 	orr.w	r3, r4, #3
    116e:	2205      	movs	r2, #5
    1170:	a903      	add	r1, sp, #12
    1172:	f01d fd37 	bl	1ebe4 <log_n>
	net_buf_unref(rsp);
    1176:	9802      	ldr	r0, [sp, #8]
    1178:	f018 fff8 	bl	1a16c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    117c:	aa02      	add	r2, sp, #8
    117e:	2100      	movs	r1, #0
    1180:	f64f 4002 	movw	r0, #64514	; 0xfc02
    1184:	f005 feb2 	bl	6eec <bt_hci_cmd_send_sync>
	if (err) {
    1188:	4605      	mov	r5, r0
    118a:	b328      	cbz	r0, 11d8 <hci_init+0x480>
		BT_WARN("Failed to read supported vendor commands");
    118c:	4811      	ldr	r0, [pc, #68]	; (11d4 <hci_init+0x47c>)
    118e:	f044 0102 	orr.w	r1, r4, #2
    1192:	e793      	b.n	10bc <hci_init+0x364>
		return "unknown";
    1194:	490a      	ldr	r1, [pc, #40]	; (11c0 <hci_init+0x468>)
    1196:	e7d3      	b.n	1140 <hci_init+0x3e8>
    1198:	02008890 	.word	0x02008890
    119c:	20008000 	.word	0x20008000
    11a0:	200000a0 	.word	0x200000a0
    11a4:	200000d0 	.word	0x200000d0
    11a8:	00023a14 	.word	0x00023a14
    11ac:	0002393c 	.word	0x0002393c
    11b0:	00026174 	.word	0x00026174
    11b4:	02008810 	.word	0x02008810
    11b8:	00026198 	.word	0x00026198
    11bc:	00024008 	.word	0x00024008
    11c0:	00025e46 	.word	0x00025e46
    11c4:	00023fc8 	.word	0x00023fc8
    11c8:	000261b1 	.word	0x000261b1
    11cc:	000261c9 	.word	0x000261c9
    11d0:	00024040 	.word	0x00024040
    11d4:	000261f6 	.word	0x000261f6
	rp.cmds = (void *)rsp->data;
    11d8:	9802      	ldr	r0, [sp, #8]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    11da:	4e10      	ldr	r6, [pc, #64]	; (121c <hci_init+0x4c4>)
    11dc:	6883      	ldr	r3, [r0, #8]
    11de:	f8b3 3001 	ldrh.w	r3, [r3, #1]
    11e2:	f8a6 3085 	strh.w	r3, [r6, #133]	; 0x85
	net_buf_unref(rsp);
    11e6:	f018 ffc1 	bl	1a16c <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    11ea:	f896 3085 	ldrb.w	r3, [r6, #133]	; 0x85
    11ee:	075b      	lsls	r3, r3, #29
    11f0:	f57f af66 	bpl.w	10c0 <hci_init+0x368>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    11f4:	aa02      	add	r2, sp, #8
    11f6:	4629      	mov	r1, r5
    11f8:	f64f 4003 	movw	r0, #64515	; 0xfc03
    11fc:	f005 fe76 	bl	6eec <bt_hci_cmd_send_sync>
		if (err) {
    1200:	b118      	cbz	r0, 120a <hci_init+0x4b2>
			BT_WARN("Failed to read supported vendor features");
    1202:	4807      	ldr	r0, [pc, #28]	; (1220 <hci_init+0x4c8>)
    1204:	f044 0102 	orr.w	r1, r4, #2
    1208:	e758      	b.n	10bc <hci_init+0x364>
		rp.feat = (void *)rsp->data;
    120a:	9802      	ldr	r0, [sp, #8]
		memcpy(bt_dev.vs_features, rp.feat->features,
    120c:	6883      	ldr	r3, [r0, #8]
    120e:	785b      	ldrb	r3, [r3, #1]
    1210:	f886 3084 	strb.w	r3, [r6, #132]	; 0x84
		net_buf_unref(rsp);
    1214:	f018 ffaa 	bl	1a16c <net_buf_unref>
    1218:	e752      	b.n	10c0 <hci_init+0x368>
    121a:	bf00      	nop
    121c:	20000000 	.word	0x20000000
    1220:	0002621f 	.word	0x0002621f
    1224:	00000000 	.word	0x00000000

00001228 <ull_drift_ticks_get>:
 * @param ticks_drift_minus[out] Negative part of drift uncertainty window
 */
void ull_drift_ticks_get(struct node_rx_event_done *done,
			 uint32_t *ticks_drift_plus,
			 uint32_t *ticks_drift_minus)
{
    1228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	start_to_address_actual_us =
		done->extra.drift.start_to_address_actual_us;
	window_widening_event_us =
		done->extra.drift.window_widening_event_us;
	preamble_to_addr_us =
    122c:	e9d0 c70b 	ldrd	ip, r7, [r0, #44]	; 0x2c
	start_to_address_actual_us =
    1230:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
		done->extra.drift.preamble_to_addr_us;

	start_to_address_expected_us = EVENT_JITTER_US +
				       EVENT_TICKER_RES_MARGIN_US +
				       window_widening_event_us +
    1234:	eb0c 0407 	add.w	r4, ip, r7
	start_to_address_expected_us = EVENT_JITTER_US +
    1238:	3430      	adds	r4, #48	; 0x30
				       preamble_to_addr_us;

	if (start_to_address_actual_us <= start_to_address_expected_us) {
    123a:	45a0      	cmp	r8, r4
{
    123c:	460e      	mov	r6, r1
    123e:	4615      	mov	r5, r2
	if (start_to_address_actual_us <= start_to_address_expected_us) {
    1240:	d818      	bhi.n	1274 <ull_drift_ticks_get+0x4c>
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
    1242:	4f1b      	ldr	r7, [pc, #108]	; (12b0 <ull_drift_ticks_get+0x88>)
    1244:	a318      	add	r3, pc, #96	; (adr r3, 12a8 <ull_drift_ticks_get+0x80>)
    1246:	e9d3 2300 	ldrd	r2, r3, [r3]
    124a:	fbac 0107 	umull	r0, r1, ip, r7
    124e:	f7ff fbf5 	bl	a3c <__aeabi_uldivmod>
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
    1252:	eba4 0408 	sub.w	r4, r4, r8
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
    1256:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
    125a:	6030      	str	r0, [r6, #0]
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
    125c:	a312      	add	r3, pc, #72	; (adr r3, 12a8 <ull_drift_ticks_get+0x80>)
    125e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1262:	fba4 0107 	umull	r0, r1, r4, r7
    1266:	f7ff fbe9 	bl	a3c <__aeabi_uldivmod>
    126a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
    126e:	6028      	str	r0, [r5, #0]
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
					       EVENT_TICKER_RES_MARGIN_US +
					       preamble_to_addr_us);
	}
}
    1270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
    1274:	4c0e      	ldr	r4, [pc, #56]	; (12b0 <ull_drift_ticks_get+0x88>)
    1276:	a30c      	add	r3, pc, #48	; (adr r3, 12a8 <ull_drift_ticks_get+0x80>)
    1278:	e9d3 2300 	ldrd	r2, r3, [r3]
    127c:	fba8 0104 	umull	r0, r1, r8, r4
    1280:	f7ff fbdc 	bl	a3c <__aeabi_uldivmod>
    1284:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
    1288:	f107 0030 	add.w	r0, r7, #48	; 0x30
		*ticks_drift_plus =
    128c:	6033      	str	r3, [r6, #0]
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
    128e:	fba0 0104 	umull	r0, r1, r0, r4
    1292:	a305      	add	r3, pc, #20	; (adr r3, 12a8 <ull_drift_ticks_get+0x80>)
    1294:	e9d3 2300 	ldrd	r2, r3, [r3]
    1298:	f7ff fbd0 	bl	a3c <__aeabi_uldivmod>
    129c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
    12a0:	6028      	str	r0, [r5, #0]
}
    12a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    12a6:	bf00      	nop
    12a8:	1afd498d 	.word	0x1afd498d
    12ac:	00000007 	.word	0x00000007
    12b0:	3b9aca00 	.word	0x3b9aca00
    12b4:	00000000 	.word	0x00000000

000012b8 <ll_adv_enable>:
	uint8_t aux_is_started = 0U;
	uint32_t ticks_anchor;
#endif /* !CONFIG_BT_HCI_MESH_EXT */
#else /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
uint8_t ll_adv_enable(uint8_t enable)
{
    12b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    12bc:	4ca8      	ldr	r4, [pc, #672]	; (1560 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1d8>)
    12be:	f894 604a 	ldrb.w	r6, [r4, #74]	; 0x4a
    12c2:	b08f      	sub	sp, #60	; 0x3c
    12c4:	f006 0601 	and.w	r6, r6, #1
	struct pdu_adv *pdu_adv;
	struct ll_adv_set *adv;
	struct lll_adv *lll;
	uint32_t ret;

	if (!enable) {
    12c8:	2800      	cmp	r0, #0
    12ca:	f000 8153 	beq.w	1574 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1ec>
static inline struct ll_adv_set *is_disabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || adv->is_enabled) {
    12ce:	bbb6      	cbnz	r6, 133e <ll_adv_enable+0x86>
	lll_adv_pdu_enqueue(&lll->scan_rsp, idx);
}

static inline struct pdu_adv *lll_adv_scan_rsp_peek(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    12d0:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    12d4:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
	ull_filter_adv_update(lll->filter_policy);
    12d8:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    12dc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    12e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    12e4:	f000 0003 	and.w	r0, r0, #3
	lll->rl_idx = FILTER_IDX_NONE;
    12e8:	21ff      	movs	r1, #255	; 0xff
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    12ea:	f8d2 8038 	ldr.w	r8, [r2, #56]	; 0x38
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    12ee:	f8d3 902c 	ldr.w	r9, [r3, #44]	; 0x2c
    12f2:	f884 1026 	strb.w	r1, [r4, #38]	; 0x26
	ull_filter_adv_update(lll->filter_policy);
    12f6:	f015 fc19 	bl	16b2c <ull_filter_adv_update>
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
    12fa:	f894 004a 	ldrb.w	r0, [r4, #74]	; 0x4a
    12fe:	0742      	lsls	r2, r0, #29
    1300:	f100 8113 	bmi.w	152a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a2>
	if (pdu_adv_to_update) {
    1304:	f1b9 0f00 	cmp.w	r9, #0
    1308:	d011      	beq.n	132e <ll_adv_enable+0x76>
		adv_addr = ull_adv_pdu_update_addrs(adv, pdu_adv_to_update);
    130a:	4895      	ldr	r0, [pc, #596]	; (1560 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1d8>)
    130c:	4649      	mov	r1, r9
    130e:	f010 fab7 	bl	11880 <ull_adv_pdu_update_addrs>
		if (pdu_adv_to_update->tx_addr &&
    1312:	f899 3000 	ldrb.w	r3, [r9]
    1316:	065b      	lsls	r3, r3, #25
    1318:	d505      	bpl.n	1326 <ll_adv_enable+0x6e>
		    !mem_nz((void *)adv_addr, BDADDR_SIZE)) {
    131a:	2106      	movs	r1, #6
    131c:	f00b fcde 	bl	ccdc <mem_nz>
		if (pdu_adv_to_update->tx_addr &&
    1320:	2800      	cmp	r0, #0
    1322:	f000 8240 	beq.w	17a6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x41e>
			ull_adv_pdu_update_addrs(adv, pdu_scan);
    1326:	488e      	ldr	r0, [pc, #568]	; (1560 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1d8>)
    1328:	4641      	mov	r1, r8
    132a:	f010 faa9 	bl	11880 <ull_adv_pdu_update_addrs>
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    132e:	f899 3000 	ldrb.w	r3, [r9]
    1332:	f013 0f0e 	tst.w	r3, #14
    1336:	f040 80ce 	bne.w	14d6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x14e>
		if (lll->conn) {
    133a:	6a23      	ldr	r3, [r4, #32]
    133c:	b123      	cbz	r3, 1348 <ll_adv_enable+0x90>
	ret = ull_ticker_status_take(ret, &ret_cb);
	if (ret) {
		mark = ull_disable_unmark(adv);
		LL_ASSERT(mark == adv);

		return BT_HCI_ERR_CMD_DISALLOWED;
    133e:	260c      	movs	r6, #12
}
    1340:	4630      	mov	r0, r6
    1342:	b00f      	add	sp, #60	; 0x3c
    1344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		link = ll_rx_link_alloc();
    1348:	f00f fb7e 	bl	10a48 <ll_rx_link_alloc>
		if (!link) {
    134c:	4682      	mov	sl, r0
    134e:	2800      	cmp	r0, #0
    1350:	f000 8246 	beq.w	17e0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x458>
		node_rx = ll_rx_alloc();
    1354:	f00f fb84 	bl	10a60 <ll_rx_alloc>
		if (!node_rx) {
    1358:	4683      	mov	fp, r0
    135a:	2800      	cmp	r0, #0
    135c:	f000 8259 	beq.w	1812 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x48a>
		conn = ll_conn_acquire();
    1360:	f010 fff4 	bl	1234c <ll_conn_acquire>
		if (!conn) {
    1364:	4605      	mov	r5, r0
    1366:	2800      	cmp	r0, #0
    1368:	f000 8250 	beq.w	180c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x484>
		conn_lll->handle = 0xFFFF;
    136c:	f64f 73ff 	movw	r3, #65535	; 0xffff
		if (!conn_lll->link_tx_free) {
    1370:	6f40      	ldr	r0, [r0, #116]	; 0x74
		conn_lll->handle = 0xFFFF;
    1372:	852b      	strh	r3, [r5, #40]	; 0x28
		conn_lll = &conn->lll;
    1374:	f105 031c 	add.w	r3, r5, #28
    1378:	930b      	str	r3, [sp, #44]	; 0x2c
		if (!conn_lll->link_tx_free) {
    137a:	2800      	cmp	r0, #0
    137c:	f000 822c 	beq.w	17d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x450>
		memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
    1380:	f105 0268 	add.w	r2, r5, #104	; 0x68
    1384:	f105 0164 	add.w	r1, r5, #100	; 0x64
    1388:	f00b fcb4 	bl	ccf4 <memq_init>
			conn_lll->phy_tx = PHY_1M;
    138c:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
    1390:	4874      	ldr	r0, [pc, #464]	; (1564 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1dc>)
		conn_lll->data_chan_sel = 0;
    1392:	f895 1039 	ldrb.w	r1, [r5, #57]	; 0x39
		conn_lll->max_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    1396:	4b74      	ldr	r3, [pc, #464]	; (1568 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1e0>)
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
    1398:	f895 713a 	ldrb.w	r7, [r5, #314]	; 0x13a
		conn_lll->slave.initiated = 0;
    139c:	f895 c03c 	ldrb.w	ip, [r5, #60]	; 0x3c
		conn->llcp_terminate.node_rx.hdr.link = link;
    13a0:	f8c5 a144 	str.w	sl, [r5, #324]	; 0x144
			conn_lll->phy_tx = PHY_1M;
    13a4:	4002      	ands	r2, r0
		conn_lll->sn = 0;
    13a6:	f895 007a 	ldrb.w	r0, [r5, #122]	; 0x7a
		conn_lll->data_chan_sel = 0;
    13aa:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    13ae:	f061 017f 	orn	r1, r1, #127	; 0x7f
		conn_lll->sn = 0;
    13b2:	f020 001f 	bic.w	r0, r0, #31
		conn_lll->data_chan_sel = 0;
    13b6:	f885 1039 	strb.w	r1, [r5, #57]	; 0x39
		conn_lll->sn = 0;
    13ba:	f885 007a 	strb.w	r0, [r5, #122]	; 0x7a
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    13be:	f04f 111b 	mov.w	r1, #1769499	; 0x1b001b
		conn->llcp_feature.features_conn = LL_FEAT;
    13c2:	486a      	ldr	r0, [pc, #424]	; (156c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1e4>)
			conn_lll->phy_tx = PHY_1M;
    13c4:	f442 7288 	orr.w	r2, r2, #272	; 0x110
		conn_lll->max_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    13c8:	e9c5 1316 	strd	r1, r3, [r5, #88]	; 0x58
			conn_lll->phy_tx = PHY_1M;
    13cc:	f042 0201 	orr.w	r2, r2, #1
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
    13d0:	f027 0703 	bic.w	r7, r7, #3
		conn->llcp_feature.features_conn = LL_FEAT;
    13d4:	2100      	movs	r1, #0
    13d6:	e9c5 014a 	strd	r0, r1, [r5, #296]	; 0x128
		conn_lll->slave.initiated = 0;
    13da:	f02c 0c07 	bic.w	ip, ip, #7
			conn_lll->phy_tx = PHY_1M;
    13de:	f8a5 2060 	strh.w	r2, [r5, #96]	; 0x60
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
    13e2:	f885 713a 	strb.w	r7, [r5, #314]	; 0x13a
		conn->connect_expire = 6;
    13e6:	2206      	movs	r2, #6
		conn_lll->latency_prepare = 0;
    13e8:	2700      	movs	r7, #0
		conn->llcp_feature.features_peer = 0;
    13ea:	2000      	movs	r0, #0
    13ec:	2100      	movs	r1, #0
    13ee:	e9c5 014c 	strd	r0, r1, [r5, #304]	; 0x130
		conn_lll->slave.initiated = 0;
    13f2:	f885 c03c 	strb.w	ip, [r5, #60]	; 0x3c
		conn->connect_expire = 6;
    13f6:	f8a5 20c0 	strh.w	r2, [r5, #192]	; 0xc0
		conn_lll->slave.window_widening_event_us = 0;
    13fa:	e9c5 7712 	strd	r7, r7, [r5, #72]	; 0x48
		conn_lll->latency_prepare = 0;
    13fe:	85ef      	strh	r7, [r5, #46]	; 0x2e
		conn_lll->latency_event = 0;
    1400:	632f      	str	r7, [r5, #48]	; 0x30
		conn_lll->data_chan_use = 0;
    1402:	f885 703b 	strb.w	r7, [r5, #59]	; 0x3b
		conn_lll->slave.window_size_prepare_us = 0;
    1406:	652f      	str	r7, [r5, #80]	; 0x50
		conn->supervision_expire = 0;
    1408:	f8a5 70c4 	strh.w	r7, [r5, #196]	; 0xc4
		conn->procedure_expire = 0;
    140c:	f8a5 70c8 	strh.w	r7, [r5, #200]	; 0xc8
		conn->llcp_rx = NULL;
    1410:	f8c5 7108 	str.w	r7, [r5, #264]	; 0x108
		conn->llcp_cu.req = conn->llcp_cu.ack = 0;
    1414:	f8a5 710c 	strh.w	r7, [r5, #268]	; 0x10c
		conn->llcp_feature.req = conn->llcp_feature.ack = 0;
    1418:	f8a5 7120 	strh.w	r7, [r5, #288]	; 0x120
		conn->llcp_version.req = conn->llcp_version.ack = 0;
    141c:	f8a5 7138 	strh.w	r7, [r5, #312]	; 0x138
		conn->llcp_terminate.reason_peer = 0;
    1420:	f885 7143 	strb.w	r7, [r5, #323]	; 0x143
		conn_lll->link_tx_free = NULL;
    1424:	676f      	str	r7, [r5, #116]	; 0x74
		conn_lll->packet_tx_head_len = 0;
    1426:	f8a5 7078 	strh.w	r7, [r5, #120]	; 0x78
		conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
    142a:	f8a5 7164 	strh.w	r7, [r5, #356]	; 0x164
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
    142e:	f895 1166 	ldrb.w	r1, [r5, #358]	; 0x166
		conn->llcp_conn_param.disabled = 0;
    1432:	f895 c186 	ldrb.w	ip, [r5, #390]	; 0x186
		conn->llcp_length.disabled = 0U;
    1436:	f895 01ae 	ldrb.w	r0, [r5, #430]	; 0x1ae
		conn->common.fex_valid = 0;
    143a:	f8b5 20d8 	ldrh.w	r2, [r5, #216]	; 0xd8
		conn->llcp_conn_param.req = 0;
    143e:	f8a5 7184 	strh.w	r7, [r5, #388]	; 0x184
		conn->llcp_conn_param.disabled = 0;
    1442:	f367 1c04 	bfi	ip, r7, #4, #1
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
    1446:	f021 0107 	bic.w	r1, r1, #7
		conn->common.fex_valid = 0;
    144a:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
		conn->llcp_length.disabled = 0U;
    144e:	f367 00c3 	bfi	r0, r7, #3, #1
		conn->llcp_conn_param.disabled = 0;
    1452:	f885 c186 	strb.w	ip, [r5, #390]	; 0x186
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
    1456:	f885 1166 	strb.w	r1, [r5, #358]	; 0x166
		conn->common.fex_valid = 0;
    145a:	f8a5 20d8 	strh.w	r2, [r5, #216]	; 0xd8
		conn->slave.ticks_to_offset = 0;
    145e:	f8c5 70e0 	str.w	r7, [r5, #224]	; 0xe0
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
    1462:	f8a5 70e4 	strh.w	r7, [r5, #228]	; 0xe4
    1466:	f885 70e6 	strb.w	r7, [r5, #230]	; 0xe6
		conn->llcp_length.req = conn->llcp_length.ack = 0U;
    146a:	f8a5 71ac 	strh.w	r7, [r5, #428]	; 0x1ac
		conn->llcp_length.cache.tx_octets = 0U;
    146e:	f8a5 71b8 	strh.w	r7, [r5, #440]	; 0x1b8
		conn->llcp_length.disabled = 0U;
    1472:	f885 01ae 	strb.w	r0, [r5, #430]	; 0x1ae
		conn->default_tx_octets = ull_conn_default_tx_octets_get();
    1476:	f011 faa3 	bl	129c0 <ull_conn_default_tx_octets_get>
    147a:	f8a5 00d2 	strh.w	r0, [r5, #210]	; 0xd2
		conn->default_tx_time = ull_conn_default_tx_time_get();
    147e:	f011 faa5 	bl	129cc <ull_conn_default_tx_time_get>
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
    1482:	f8d5 11bc 	ldr.w	r1, [r5, #444]	; 0x1bc
    1486:	4a3a      	ldr	r2, [pc, #232]	; (1570 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1e8>)
		conn->default_tx_time = ull_conn_default_tx_time_get();
    1488:	f8a5 00d4 	strh.w	r0, [r5, #212]	; 0xd4
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
    148c:	400a      	ands	r2, r1
    148e:	f8c5 21bc 	str.w	r2, [r5, #444]	; 0x1bc
		conn->phy_pref_tx = ull_conn_default_phy_tx_get();
    1492:	f011 faa1 	bl	129d8 <ull_conn_default_phy_tx_get>
    1496:	f895 21c0 	ldrb.w	r2, [r5, #448]	; 0x1c0
    149a:	f360 0202 	bfi	r2, r0, #0, #3
    149e:	f885 21c0 	strb.w	r2, [r5, #448]	; 0x1c0
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    14a2:	f011 fa9f 	bl	129e4 <ull_conn_default_phy_rx_get>
    14a6:	f895 21c0 	ldrb.w	r2, [r5, #448]	; 0x1c0
		lll->conn = conn_lll;
    14aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    14ac:	6223      	str	r3, [r4, #32]
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    14ae:	f360 02c5 	bfi	r2, r0, #3, #3
		adv->node_rx_cc_free = node_rx;
    14b2:	e9c4 ab10 	strd	sl, fp, [r4, #64]	; 0x40
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
    14b6:	e9c5 7773 	strd	r7, r7, [r5, #460]	; 0x1cc
    14ba:	e9c5 7771 	strd	r7, r7, [r5, #452]	; 0x1c4
	return hdr->ref--;
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->disabled_cb = hdr->disabled_param = NULL;
    14be:	e9c5 7705 	strd	r7, r7, [r5, #20]
		conn->tx_data = conn->tx_data_last = 0;
    14c2:	f8c5 71d4 	str.w	r7, [r5, #468]	; 0x1d4
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    14c6:	f885 21c0 	strb.w	r2, [r5, #448]	; 0x1c0

static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
    14ca:	61ed      	str	r5, [r5, #28]
		err = lll_clock_wait();
    14cc:	f016 fc82 	bl	17dd4 <lll_clock_wait>
		if (err) {
    14d0:	2800      	cmp	r0, #0
    14d2:	f040 816a 	bne.w	17aa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x422>
	uint8_t ch_map = lll->chan_map;
    14d6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    14da:	2101      	movs	r1, #1
	uint8_t ch_map = lll->chan_map;
    14dc:	f3c3 0342 	ubfx	r3, r3, #1, #3
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    14e0:	a80d      	add	r0, sp, #52	; 0x34
	uint8_t ch_map = lll->chan_map;
    14e2:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    14e6:	f00b fd7d 	bl	cfe4 <util_ones_count_get>
	if (adv_chn_cnt == 0) {
    14ea:	b390      	cbz	r0, 1552 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1ca>
		if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
    14ec:	f899 3000 	ldrb.w	r3, [r9]
    14f0:	f003 030f 	and.w	r3, r3, #15
    14f4:	2b02      	cmp	r3, #2
    14f6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
    14fa:	f000 80a7 	beq.w	164c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2c4>
			if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    14fe:	2b01      	cmp	r3, #1
    1500:	f000 8157 	beq.w	17b2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x42a>
					BYTES2US((PDU_OVERHEAD_SIZE(PHY_1M) +
    1504:	f898 0001 	ldrb.w	r0, [r8, #1]
    1508:	3010      	adds	r0, #16
		const uint16_t scan_rsp_us =
    150a:	00c0      	lsls	r0, r0, #3
			} else if (pdu_adv->type == PDU_ADV_TYPE_ADV_IND) {
    150c:	2b00      	cmp	r3, #0
    150e:	f040 8142 	bne.w	1796 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x40e>
				adv_size += pdu_adv->len;
    1512:	f899 3001 	ldrb.w	r3, [r9, #1]
    1516:	3310      	adds	r3, #16
    1518:	00db      	lsls	r3, r3, #3
    151a:	f503 714d 	add.w	r1, r3, #820	; 0x334
    151e:	4408      	add	r0, r1
    1520:	f503 739a 	add.w	r3, r3, #308	; 0x134
			slot_us += (BYTES2US(adv_size, phy) + EVENT_IFS_MAX_US
    1524:	fb03 0002 	mla	r0, r3, r2, r0
    1528:	e09b      	b.n	1662 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2da>
		lll->rl_idx = ull_filter_rl_find(adv->peer_addr_type,
    152a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    152e:	4632      	mov	r2, r6
    1530:	f104 014b 	add.w	r1, r4, #75	; 0x4b
    1534:	f015 fc6a 	bl	16e0c <ull_filter_rl_find>
		if (lll->rl_idx != FILTER_IDX_NONE) {
    1538:	28ff      	cmp	r0, #255	; 0xff
		lll->rl_idx = ull_filter_rl_find(adv->peer_addr_type,
    153a:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
		if (lll->rl_idx != FILTER_IDX_NONE) {
    153e:	f43f aee1 	beq.w	1304 <ll_adv_enable+0x4c>
			ull_filter_rpa_update(false);
    1542:	4630      	mov	r0, r6
    1544:	f015 fb0c 	bl	16b60 <ull_filter_rpa_update>
	if (pdu_adv_to_update) {
    1548:	f1b9 0f00 	cmp.w	r9, #0
    154c:	f47f aedd 	bne.w	130a <ll_adv_enable+0x52>
    1550:	e6ed      	b.n	132e <ll_adv_enable+0x76>
	if (adv->lll.conn) {
    1552:	6a23      	ldr	r3, [r4, #32]
    1554:	2b00      	cmp	r3, #0
    1556:	f43f aef2 	beq.w	133e <ll_adv_enable+0x86>
		conn_release(adv);
    155a:	f00f ff31 	bl	113c0 <conn_release.constprop.0>
    155e:	e6ee      	b.n	133e <ll_adv_enable+0x86>
    1560:	20002000 	.word	0x20002000
    1564:	fffff880 	.word	0xfffff880
    1568:	01480148 	.word	0x01480148
    156c:	0001417f 	.word	0x0001417f
    1570:	f6ff0000 	.word	0xf6ff0000
	if (!adv || !adv->is_enabled) {
    1574:	2e00      	cmp	r6, #0
    1576:	f43f aee2 	beq.w	133e <ll_adv_enable+0x86>
	if (adv->lll.conn) {
    157a:	6a23      	ldr	r3, [r4, #32]
    157c:	b15b      	cbz	r3, 1596 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x20e>
		adv->lll.conn->slave.cancelled = 1U;
    157e:	f893 2020 	ldrb.w	r2, [r3, #32]
    1582:	f042 0202 	orr.w	r2, r2, #2
    1586:	f883 2020 	strb.w	r2, [r3, #32]
		if (unlikely(adv->lll.conn->slave.initiated)) {
    158a:	6a23      	ldr	r3, [r4, #32]
    158c:	f893 3020 	ldrb.w	r3, [r3, #32]
    1590:	07d8      	lsls	r0, r3, #31
    1592:	f53f aed4 	bmi.w	133e <ll_adv_enable+0x86>
	mark = ull_disable_mark(adv);
    1596:	48a8      	ldr	r0, [pc, #672]	; (1838 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4b0>)
    1598:	f00f fb0c 	bl	10bb4 <ull_disable_mark>
	LL_ASSERT(mark == adv);
    159c:	4284      	cmp	r4, r0
    159e:	d00c      	beq.n	15ba <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x232>
    15a0:	4aa6      	ldr	r2, [pc, #664]	; (183c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4b4>)
    15a2:	49a7      	ldr	r1, [pc, #668]	; (1840 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4b8>)
    15a4:	48a7      	ldr	r0, [pc, #668]	; (1844 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4bc>)
    15a6:	f240 73df 	movw	r3, #2015	; 0x7df
    15aa:	f01c feeb 	bl	1e384 <printk>
    15ae:	4040      	eors	r0, r0
    15b0:	f380 8811 	msr	BASEPRI, r0
    15b4:	f04f 0003 	mov.w	r0, #3
    15b8:	df02      	svc	2
	if (adv->lll.is_hdcd) {
    15ba:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    15be:	07d9      	lsls	r1, r3, #31
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    15c0:	ad0d      	add	r5, sp, #52	; 0x34
	if (adv->lll.is_hdcd) {
    15c2:	d50e      	bpl.n	15e2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x25a>
		ret_cb = TICKER_STATUS_BUSY;
    15c4:	2202      	movs	r2, #2
    15c6:	920d      	str	r2, [sp, #52]	; 0x34
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    15c8:	2103      	movs	r1, #3
    15ca:	4b9f      	ldr	r3, [pc, #636]	; (1848 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4c0>)
    15cc:	9500      	str	r5, [sp, #0]
    15ce:	2201      	movs	r2, #1
    15d0:	2000      	movs	r0, #0
    15d2:	f00c ff17 	bl	e404 <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
    15d6:	4629      	mov	r1, r5
    15d8:	f00f fac4 	bl	10b64 <ull_ticker_status_take>
		if (ret) {
    15dc:	2800      	cmp	r0, #0
    15de:	f040 811d 	bne.w	181c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x494>
	ret_cb = TICKER_STATUS_BUSY;
    15e2:	2202      	movs	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    15e4:	2103      	movs	r1, #3
    15e6:	4b98      	ldr	r3, [pc, #608]	; (1848 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4c0>)
    15e8:	9500      	str	r5, [sp, #0]
    15ea:	2000      	movs	r0, #0
	ret_cb = TICKER_STATUS_BUSY;
    15ec:	920d      	str	r2, [sp, #52]	; 0x34
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    15ee:	f00c ff09 	bl	e404 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
    15f2:	4629      	mov	r1, r5
    15f4:	f00f fab6 	bl	10b64 <ull_ticker_status_take>
	if (ret) {
    15f8:	2800      	cmp	r0, #0
    15fa:	f040 80f3 	bne.w	17e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x45c>
	}

	ret = ull_disable(&adv->lll);
    15fe:	4893      	ldr	r0, [pc, #588]	; (184c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4c4>)
    1600:	f00f fb14 	bl	10c2c <ull_disable>
	LL_ASSERT(!ret);
    1604:	2800      	cmp	r0, #0
    1606:	f040 80d9 	bne.w	17bc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x434>

	mark = ull_disable_unmark(adv);
    160a:	488b      	ldr	r0, [pc, #556]	; (1838 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4b0>)
    160c:	f00f fade 	bl	10bcc <ull_disable_unmark>
	LL_ASSERT(mark == adv);
    1610:	4284      	cmp	r4, r0
    1612:	d00c      	beq.n	162e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2a6>
    1614:	4a89      	ldr	r2, [pc, #548]	; (183c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4b4>)
    1616:	498a      	ldr	r1, [pc, #552]	; (1840 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4b8>)
    1618:	488a      	ldr	r0, [pc, #552]	; (1844 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4bc>)
    161a:	f640 0301 	movw	r3, #2049	; 0x801
    161e:	f01c feb1 	bl	1e384 <printk>
    1622:	4040      	eors	r0, r0
    1624:	f380 8811 	msr	BASEPRI, r0
    1628:	f04f 0003 	mov.w	r0, #3
    162c:	df02      	svc	2
		}
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT && (CONFIG_BT_CTLR_ADV_AUX_SET > 0) */

#if defined(CONFIG_BT_PERIPHERAL)
	if (adv->lll.conn) {
    162e:	6a23      	ldr	r3, [r4, #32]
    1630:	b10b      	cbz	r3, 1636 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2ae>
		conn_release(adv);
    1632:	f00f fec5 	bl	113c0 <conn_release.constprop.0>
		ll_rx_link_release(node_rx_adv_term->hdr.link);
		ll_rx_release(node_rx_adv_term);
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	adv->is_enabled = 0U;
    1636:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
		ull_filter_adv_scan_state_cb(0);
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	return 0;
    163a:	2600      	movs	r6, #0
	adv->is_enabled = 0U;
    163c:	f36f 0300 	bfc	r3, #0, #1
}
    1640:	4630      	mov	r0, r6
	adv->is_enabled = 0U;
    1642:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
}
    1646:	b00f      	add	sp, #60	; 0x3c
    1648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			adv_size += pdu_adv->len;
    164c:	f899 3001 	ldrb.w	r3, [r9, #1]
    1650:	3310      	adds	r3, #16
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
    1652:	00db      	lsls	r3, r3, #3
    1654:	fb00 f003 	mul.w	r0, r0, r3
    1658:	f500 70aa 	add.w	r0, r0, #340	; 0x154
				   rxtx_turn_us * (adv_chn_cnt - 1);
    165c:	2364      	movs	r3, #100	; 0x64
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
    165e:	fb03 0002 	mla	r0, r3, r2, r0
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    1662:	4a7b      	ldr	r2, [pc, #492]	; (1850 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4c8>)
    1664:	61e4      	str	r4, [r4, #28]
	adv->evt.ticks_xtal_to_start =
    1666:	2331      	movs	r3, #49	; 0x31
    1668:	2500      	movs	r5, #0
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    166a:	fba0 0102 	umull	r0, r1, r0, r2
	adv->evt.ticks_xtal_to_start =
    166e:	6023      	str	r3, [r4, #0]
    1670:	e9c4 5505 	strd	r5, r5, [r4, #20]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    1674:	a36e      	add	r3, pc, #440	; (adr r3, 1830 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4a8>)
    1676:	e9d3 2300 	ldrd	r2, r3, [r3]
	adv->evt.ticks_preempt_to_start =
    167a:	e9c4 5501 	strd	r5, r5, [r4, #4]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    167e:	f7ff f9dd 	bl	a3c <__aeabi_uldivmod>
	uint16_t interval = adv->interval;
    1682:	f8b4 8048 	ldrh.w	r8, [r4, #72]	; 0x48
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    1686:	60e0      	str	r0, [r4, #12]
	ticks_anchor = ticker_ticks_now_get();
    1688:	f00c ff02 	bl	e490 <ticker_ticks_now_get>
    168c:	4607      	mov	r7, r0
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
    168e:	f1b8 0f00 	cmp.w	r8, #0
    1692:	d108      	bne.n	16a6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x31e>
    1694:	f899 5000 	ldrb.w	r5, [r9]
    1698:	f005 050f 	and.w	r5, r5, #15
    169c:	f1a5 0501 	sub.w	r5, r5, #1
    16a0:	fab5 f585 	clz	r5, r5
    16a4:	096d      	lsrs	r5, r5, #5
    16a6:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
    16aa:	68e3      	ldr	r3, [r4, #12]
    16ac:	f365 0200 	bfi	r2, r5, #0, #1
	if (lll->is_hdcd) {
    16b0:	f012 0501 	ands.w	r5, r2, #1
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
    16b4:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
	if (lll->is_hdcd) {
    16b8:	d03d      	beq.n	1736 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3ae>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    16ba:	f8df 918c 	ldr.w	r9, [pc, #396]	; 1848 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4c0>
    16be:	4965      	ldr	r1, [pc, #404]	; (1854 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4cc>)
    16c0:	9304      	str	r3, [sp, #16]
    16c2:	2000      	movs	r0, #0
		ret_cb = TICKER_STATUS_BUSY;
    16c4:	2502      	movs	r5, #2
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    16c6:	f10d 0830 	add.w	r8, sp, #48	; 0x30
    16ca:	9301      	str	r3, [sp, #4]
    16cc:	9105      	str	r1, [sp, #20]
    16ce:	e9cd 9807 	strd	r9, r8, [sp, #28]
    16d2:	2103      	movs	r1, #3
    16d4:	e9cd 0002 	strd	r0, r0, [sp, #8]
    16d8:	9406      	str	r4, [sp, #24]
    16da:	462a      	mov	r2, r5
    16dc:	9000      	str	r0, [sp, #0]
    16de:	463b      	mov	r3, r7
		ret_cb = TICKER_STATUS_BUSY;
    16e0:	950c      	str	r5, [sp, #48]	; 0x30
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    16e2:	f00c fe07 	bl	e2f4 <ticker_start>
		ret = ull_ticker_status_take(ret, &ret_cb);
    16e6:	4641      	mov	r1, r8
    16e8:	f00f fa3c 	bl	10b64 <ull_ticker_status_take>
		if (ret != TICKER_STATUS_SUCCESS) {
    16ec:	2800      	cmp	r0, #0
    16ee:	f47f af30 	bne.w	1552 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1ca>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    16f2:	4959      	ldr	r1, [pc, #356]	; (1858 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4d0>)
    16f4:	9105      	str	r1, [sp, #20]
    16f6:	f24a 32d8 	movw	r2, #41944	; 0xa3d8
    16fa:	9200      	str	r2, [sp, #0]
    16fc:	e9cd 9807 	strd	r9, r8, [sp, #28]
    1700:	e9cd 0003 	strd	r0, r0, [sp, #12]
    1704:	e9cd 0001 	strd	r0, r0, [sp, #4]
    1708:	9406      	str	r4, [sp, #24]
    170a:	463b      	mov	r3, r7
    170c:	2201      	movs	r2, #1
    170e:	2103      	movs	r1, #3
		ret_cb = TICKER_STATUS_BUSY;
    1710:	950c      	str	r5, [sp, #48]	; 0x30
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1712:	f00c fdef 	bl	e2f4 <ticker_start>
	ret = ull_ticker_status_take(ret, &ret_cb);
    1716:	4641      	mov	r1, r8
    1718:	f00f fa24 	bl	10b64 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
    171c:	2800      	cmp	r0, #0
    171e:	f47f af18 	bne.w	1552 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1ca>
	adv->is_enabled = 1;
    1722:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
}
    1726:	4630      	mov	r0, r6
	adv->is_enabled = 1;
    1728:	f043 0301 	orr.w	r3, r3, #1
    172c:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
}
    1730:	b00f      	add	sp, #60	; 0x3c
    1732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    1736:	4849      	ldr	r0, [pc, #292]	; (185c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4d4>)
		ll_adv_ticker_ext[handle].ticks_slot_window =
    1738:	4a49      	ldr	r2, [pc, #292]	; (1860 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4d8>)
		ret = ticker_start_ext(
    173a:	f8df e10c 	ldr.w	lr, [pc, #268]	; 1848 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4c0>
    173e:	f8df c114 	ldr.w	ip, [pc, #276]	; 1854 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4cc>
    1742:	9406      	str	r4, [sp, #24]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    1744:	fba8 0100 	umull	r0, r1, r8, r0
    1748:	f04f 0991 	mov.w	r9, #145	; 0x91
    174c:	fb09 1108 	mla	r1, r9, r8, r1
			ULL_ADV_RANDOM_DELAY + ticks_slot;
    1750:	f203 1847 	addw	r8, r3, #327	; 0x147
		ll_adv_ticker_ext[handle].ticks_slot_window =
    1754:	f8c2 8000 	str.w	r8, [r2]
		ret_cb = TICKER_STATUS_BUSY;
    1758:	f04f 0902 	mov.w	r9, #2
		ret = ticker_start_ext(
    175c:	9304      	str	r3, [sp, #16]
    175e:	9209      	str	r2, [sp, #36]	; 0x24
    1760:	f10d 0830 	add.w	r8, sp, #48	; 0x30
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    1764:	a332      	add	r3, pc, #200	; (adr r3, 1830 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4a8>)
    1766:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret = ticker_start_ext(
    176a:	f64f 7aff 	movw	sl, #65535	; 0xffff
    176e:	e9cd e807 	strd	lr, r8, [sp, #28]
    1772:	9502      	str	r5, [sp, #8]
		ret_cb = TICKER_STATUS_BUSY;
    1774:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
		ret = ticker_start_ext(
    1778:	f8cd c014 	str.w	ip, [sp, #20]
    177c:	f8cd a00c 	str.w	sl, [sp, #12]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    1780:	f7ff f95c 	bl	a3c <__aeabi_uldivmod>
		ret = ticker_start_ext(
    1784:	464a      	mov	r2, r9
    1786:	e9cd 5000 	strd	r5, r0, [sp]
    178a:	463b      	mov	r3, r7
    178c:	4628      	mov	r0, r5
    178e:	2103      	movs	r1, #3
    1790:	f00c fd5a 	bl	e248 <ticker_start_ext>
    1794:	e7bf      	b.n	1716 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x38e>
			} else if (pdu_adv->type == PDU_ADV_TYPE_SCAN_IND) {
    1796:	2b06      	cmp	r3, #6
    1798:	f43f aebb 	beq.w	1512 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x18a>
    179c:	f44f 73da 	mov.w	r3, #436	; 0x1b4
    17a0:	f44f 701b 	mov.w	r0, #620	; 0x26c
    17a4:	e6be      	b.n	1524 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x19c>
			return BT_HCI_ERR_INVALID_PARAM;
    17a6:	2612      	movs	r6, #18
    17a8:	e5ca      	b.n	1340 <ll_adv_enable+0x88>
			conn_release(adv);
    17aa:	f00f fe09 	bl	113c0 <conn_release.constprop.0>
			return BT_HCI_ERR_HW_FAILURE;
    17ae:	2603      	movs	r6, #3
    17b0:	e5c6      	b.n	1340 <ll_adv_enable+0x88>
    17b2:	f44f 73f2 	mov.w	r3, #484	; 0x1e4
    17b6:	f44f 707f 	mov.w	r0, #1020	; 0x3fc
    17ba:	e6b3      	b.n	1524 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x19c>
	LL_ASSERT(!ret);
    17bc:	4a1f      	ldr	r2, [pc, #124]	; (183c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4b4>)
    17be:	4929      	ldr	r1, [pc, #164]	; (1864 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4dc>)
    17c0:	4820      	ldr	r0, [pc, #128]	; (1844 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4bc>)
    17c2:	f240 73fe 	movw	r3, #2046	; 0x7fe
    17c6:	f01c fddd 	bl	1e384 <printk>
    17ca:	4040      	eors	r0, r0
    17cc:	f380 8811 	msr	BASEPRI, r0
    17d0:	f04f 0003 	mov.w	r0, #3
    17d4:	df02      	svc	2
    17d6:	e718      	b.n	160a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x282>
			conn_lll->link_tx_free = &conn_lll->link_tx;
    17d8:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    17dc:	6768      	str	r0, [r5, #116]	; 0x74
    17de:	e5cf      	b.n	1380 <ll_adv_enable+0xc8>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    17e0:	2607      	movs	r6, #7
    17e2:	e5ad      	b.n	1340 <ll_adv_enable+0x88>
		mark = ull_disable_unmark(adv);
    17e4:	4814      	ldr	r0, [pc, #80]	; (1838 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4b0>)
    17e6:	f00f f9f1 	bl	10bcc <ull_disable_unmark>
		LL_ASSERT(mark == adv);
    17ea:	4284      	cmp	r4, r0
    17ec:	f43f ada7 	beq.w	133e <ll_adv_enable+0x86>
    17f0:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
    17f4:	4a11      	ldr	r2, [pc, #68]	; (183c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4b4>)
    17f6:	4912      	ldr	r1, [pc, #72]	; (1840 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4b8>)
    17f8:	4812      	ldr	r0, [pc, #72]	; (1844 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4bc>)
    17fa:	f01c fdc3 	bl	1e384 <printk>
    17fe:	4040      	eors	r0, r0
    1800:	f380 8811 	msr	BASEPRI, r0
    1804:	f04f 0003 	mov.w	r0, #3
    1808:	df02      	svc	2
    180a:	e598      	b.n	133e <ll_adv_enable+0x86>
			ll_rx_release(node_rx);
    180c:	4658      	mov	r0, fp
    180e:	f00f f92d 	bl	10a6c <ll_rx_release>
			ll_rx_link_release(link);
    1812:	4650      	mov	r0, sl
    1814:	f00f f91e 	bl	10a54 <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    1818:	2607      	movs	r6, #7
    181a:	e591      	b.n	1340 <ll_adv_enable+0x88>
			mark = ull_disable_unmark(adv);
    181c:	4806      	ldr	r0, [pc, #24]	; (1838 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4b0>)
    181e:	f00f f9d5 	bl	10bcc <ull_disable_unmark>
			LL_ASSERT(mark == adv);
    1822:	4284      	cmp	r4, r0
    1824:	f43f ad8b 	beq.w	133e <ll_adv_enable+0x86>
    1828:	f240 73ea 	movw	r3, #2026	; 0x7ea
    182c:	e7e2      	b.n	17f4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x46c>
    182e:	bf00      	nop
    1830:	1afd498d 	.word	0x1afd498d
    1834:	00000007 	.word	0x00000007
    1838:	20002000 	.word	0x20002000
    183c:	00024768 	.word	0x00024768
    1840:	00024858 	.word	0x00024858
    1844:	00024334 	.word	0x00024334
    1848:	0000fa8d 	.word	0x0000fa8d
    184c:	2000201c 	.word	0x2000201c
    1850:	3b9aca00 	.word	0x3b9aca00
    1854:	00011031 	.word	0x00011031
    1858:	000112d9 	.word	0x000112d9
    185c:	84e72a00 	.word	0x84e72a00
    1860:	20002054 	.word	0x20002054
    1864:	000246c8 	.word	0x000246c8

00001868 <event_conn_upd_prep>:
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
}

static inline int event_conn_upd_prep(struct ll_conn *conn, uint16_t lazy,
				      uint32_t ticks_at_expire)
{
    1868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_conn *lll = &conn->lll;
	struct ll_conn *conn_upd;
	uint16_t instant_latency;
	uint16_t event_counter;

	conn_upd = conn_upd_curr;
    186c:	4dc8      	ldr	r5, [pc, #800]	; (1b90 <event_conn_upd_prep+0x328>)

	/* set mutex */
	if (!conn_upd) {
    186e:	682b      	ldr	r3, [r5, #0]
{
    1870:	b08b      	sub	sp, #44	; 0x2c
    1872:	4604      	mov	r4, r0
    1874:	460f      	mov	r7, r1
    1876:	4691      	mov	r9, r2
	if (!conn_upd) {
    1878:	2b00      	cmp	r3, #0
    187a:	f000 8214 	beq.w	1ca6 <event_conn_upd_prep+0x43e>
		conn_upd_curr = conn;
	}

	/* Calculate current event counter */
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    187e:	8e66      	ldrh	r6, [r4, #50]	; 0x32
    1880:	8de2      	ldrh	r2, [r4, #46]	; 0x2e

	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
			  0xffff;
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    1882:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    1886:	4416      	add	r6, r2
    1888:	443e      	add	r6, r7
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    188a:	f013 0307 	ands.w	r3, r3, #7
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    188e:	b2b6      	uxth	r6, r6
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    1890:	f040 81a7 	bne.w	1be2 <event_conn_upd_prep+0x37a>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    1894:	f8b4 80e8 	ldrh.w	r8, [r4, #232]	; 0xe8
    1898:	eba6 0208 	sub.w	r2, r6, r8
    189c:	fa1f fa82 	uxth.w	sl, r2
		pdu_ctrl_tx->llctrl.conn_update_ind.instant =
			sys_cpu_to_le16(conn->llcp.conn_upd.instant);
		/* enqueue control PDU */
		ctrl_tx_enqueue(conn, tx);
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
	} else if (instant_latency <= 0x7FFF) {
    18a0:	0412      	lsls	r2, r2, #16
    18a2:	f100 825e 	bmi.w	1d62 <event_conn_upd_prep+0x4fa>
		uint32_t ticker_status;
		uint32_t periodic_us;
		uint16_t latency;

#if defined(CONFIG_BT_PERIPHERAL) && defined(CONFIG_BT_CTLR_LE_ENC)
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
    18a6:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
    18aa:	2a00      	cmp	r2, #0
    18ac:	f2c0 813d 	blt.w	1b2a <event_conn_upd_prep+0x2c2>
			conn->slave.llcp_type = LLCP_NONE;
		} else
#endif /* CONFIG_BT_PERIPHERAL && CONFIG_BT_CTLR_LE_ENC */
		{
			/* procedure request acked */
			conn->llcp_ack = conn->llcp_req;
    18b0:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    18b4:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5

		/* procedure request acked */
		conn->llcp_cu.ack = conn->llcp_cu.req;

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    18b8:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
    18bc:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
		conn->llcp_cu.ack = conn->llcp_cu.req;
    18c0:	f894 110c 	ldrb.w	r1, [r4, #268]	; 0x10c
    18c4:	f884 110d 	strb.w	r1, [r4, #269]	; 0x10d
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    18c8:	4293      	cmp	r3, r2
    18ca:	d006      	beq.n	18da <event_conn_upd_prep+0x72>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
    18cc:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    18d0:	f003 0307 	and.w	r3, r3, #7
    18d4:	2b05      	cmp	r3, #5
    18d6:	f000 824f 	beq.w	1d78 <event_conn_upd_prep+0x510>
			conn->procedure_expire = 0U;
		}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

		/* reset mutex */
		if (conn_upd_curr == conn) {
    18da:	682b      	ldr	r3, [r5, #0]
    18dc:	42a3      	cmp	r3, r4
	conn_upd_curr = NULL;
    18de:	bf04      	itt	eq
    18e0:	2300      	moveq	r3, #0
    18e2:	602b      	streq	r3, [r5, #0]
		}

		lll = &conn->lll;

		/* Acquire Rx node */
		rx = conn->llcp_rx;
    18e4:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
		LL_ASSERT(rx && rx->hdr.link);
    18e8:	2d00      	cmp	r5, #0
    18ea:	f000 816b 	beq.w	1bc4 <event_conn_upd_prep+0x35c>
    18ee:	6828      	ldr	r0, [r5, #0]
    18f0:	2800      	cmp	r0, #0
    18f2:	f000 8167 	beq.w	1bc4 <event_conn_upd_prep+0x35c>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Prepare the rx packet structure */
		if ((conn->llcp_cu.interval != lll->interval) ||
    18f6:	f8b4 3110 	ldrh.w	r3, [r4, #272]	; 0x110
    18fa:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
		conn->llcp_rx = rx->hdr.link->mem;
    18fe:	6842      	ldr	r2, [r0, #4]
    1900:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
		if ((conn->llcp_cu.interval != lll->interval) ||
    1904:	4563      	cmp	r3, ip
    1906:	f8b4 2112 	ldrh.w	r2, [r4, #274]	; 0x112
    190a:	f8b4 1114 	ldrh.w	r1, [r4, #276]	; 0x114
    190e:	f000 8120 	beq.w	1b52 <event_conn_upd_prep+0x2ea>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
				       lll->interval * CONN_INT_UNIT_US) !=
		     conn->supervision_reload)) {
			struct node_rx_cu *cu;

			rx->hdr.handle = lll->handle;
    1912:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
    1916:	f8a5 c006 	strh.w	ip, [r5, #6]
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    191a:	f04f 0e16 	mov.w	lr, #22

			/* prepare connection update complete structure */
			cu = (void *)rx->pdu;
			cu->status = 0x00;
    191e:	f04f 0c00 	mov.w	ip, #0
			cu->interval = conn->llcp_cu.interval;
    1922:	83eb      	strh	r3, [r5, #30]
			cu->latency = conn->llcp_cu.latency;
    1924:	842a      	strh	r2, [r5, #32]
			cu->timeout = conn->llcp_cu.timeout;
    1926:	8469      	strh	r1, [r5, #34]	; 0x22
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    1928:	f885 e004 	strb.w	lr, [r5, #4]
			cu->status = 0x00;
    192c:	f885 c01c 	strb.w	ip, [r5, #28]
			/* Mark for buffer for release */
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
		}

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
    1930:	4629      	mov	r1, r5
    1932:	f00f f8a1 	bl	10a78 <ll_rx_put>
		ll_rx_sched();
    1936:	f00f f8a9 	bl	10a8c <ll_rx_sched>

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED)
		/* restore to normal prepare */
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
    193a:	6823      	ldr	r3, [r4, #0]
    193c:	2b00      	cmp	r3, #0
    193e:	f2c0 80fc 	blt.w	1b3a <event_conn_upd_prep+0x2d2>
					    ticks_prepare_to_start);
		}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * lll->interval;
    1942:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
		latency = conn_interval_old / conn->llcp_cu.interval;
    1944:	f8b4 5110 	ldrh.w	r5, [r4, #272]	; 0x110
		conn_interval_old = instant_latency * lll->interval;
    1948:	fb10 f00a 	smulbb	r0, r0, sl
    194c:	b280      	uxth	r0, r0
		latency = conn_interval_old / conn->llcp_cu.interval;
    194e:	fbb0 f3f5 	udiv	r3, r0, r5
		conn_interval_new = latency * conn->llcp_cu.interval;
    1952:	fb15 f203 	smulbb	r2, r5, r3
    1956:	b292      	uxth	r2, r2
		if (conn_interval_new > conn_interval_old) {
    1958:	4290      	cmp	r0, r2
		latency = conn_interval_old / conn->llcp_cu.interval;
    195a:	fa1f fb83 	uxth.w	fp, r3
		if (conn_interval_new > conn_interval_old) {
    195e:	f0c0 80d3 	bcc.w	1b08 <event_conn_upd_prep+0x2a0>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
				(conn_interval_new - conn_interval_old) *
				CONN_INT_UNIT_US);
		} else {
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1962:	fb05 0313 	mls	r3, r5, r3, r0
    1966:	f240 42e2 	movw	r2, #1250	; 0x4e2
    196a:	488a      	ldr	r0, [pc, #552]	; (1b94 <event_conn_upd_prep+0x32c>)
    196c:	b29b      	uxth	r3, r3
    196e:	fb02 f303 	mul.w	r3, r2, r3
    1972:	fba3 0100 	umull	r0, r1, r3, r0
    1976:	a384      	add	r3, pc, #528	; (adr r3, 1b88 <event_conn_upd_prep+0x320>)
    1978:	e9d3 2300 	ldrd	r2, r3, [r3]
    197c:	f7ff f85e 	bl	a3c <__aeabi_uldivmod>
    1980:	eba9 0900 	sub.w	r9, r9, r0
				(conn_interval_old - conn_interval_new) *
				CONN_INT_UNIT_US);
		}
		lll->latency_prepare += lazy;
    1984:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
			CONN_INT_UNIT_US;
		periodic_us = conn_interval_us;

		if (0) {
#if defined(CONFIG_BT_PERIPHERAL)
		} else if (lll->role) {
    1986:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		lll->latency_prepare -= (instant_latency - latency);
    198a:	eba8 0606 	sub.w	r6, r8, r6
    198e:	445e      	add	r6, fp
		lll->latency_prepare += lazy;
    1990:	440f      	add	r7, r1
		lll->latency_prepare -= (instant_latency - latency);
    1992:	4437      	add	r7, r6
		conn_interval_us = conn->llcp_cu.interval *
    1994:	f240 48e2 	movw	r8, #1250	; 0x4e2
		} else if (lll->role) {
    1998:	2b00      	cmp	r3, #0
		lll->latency_prepare -= (instant_latency - latency);
    199a:	85e7      	strh	r7, [r4, #46]	; 0x2e
		conn_interval_us = conn->llcp_cu.interval *
    199c:	fb08 f505 	mul.w	r5, r8, r5
		} else if (lll->role) {
    19a0:	f2c0 8183 	blt.w	1caa <event_conn_upd_prep+0x442>
			 */
			ticks_win_offset += 1U;
#endif /* CONFIG_BT_CENTRAL */

		} else {
			LL_ASSERT(0);
    19a4:	4a7c      	ldr	r2, [pc, #496]	; (1b98 <event_conn_upd_prep+0x330>)
    19a6:	497d      	ldr	r1, [pc, #500]	; (1b9c <event_conn_upd_prep+0x334>)
    19a8:	487d      	ldr	r0, [pc, #500]	; (1ba0 <event_conn_upd_prep+0x338>)
    19aa:	f44f 6326 	mov.w	r3, #2656	; 0xa60
    19ae:	f01c fce9 	bl	1e384 <printk>
    19b2:	4040      	eors	r0, r0
    19b4:	f380 8811 	msr	BASEPRI, r0
    19b8:	f04f 0003 	mov.w	r0, #3
    19bc:	df02      	svc	2
		uint32_t ticks_win_offset = 0;
    19be:	2700      	movs	r7, #0
		periodic_us = conn_interval_us;
    19c0:	46aa      	mov	sl, r5

		lll->interval = conn->llcp_cu.interval;
		lll->latency = conn->llcp_cu.latency;

		conn->supervision_reload =
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    19c2:	f8b4 2114 	ldrh.w	r2, [r4, #276]	; 0x114
		lll->latency = conn->llcp_cu.latency;
    19c6:	f8b4 0112 	ldrh.w	r0, [r4, #274]	; 0x112
		conn->procedure_reload =
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);

#if defined(CONFIG_BT_CTLR_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    19ca:	4b76      	ldr	r3, [pc, #472]	; (1ba4 <event_conn_upd_prep+0x33c>)
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    19cc:	4976      	ldr	r1, [pc, #472]	; (1ba8 <event_conn_upd_prep+0x340>)
		lll->latency = conn->llcp_cu.latency;
    19ce:	85a0      	strh	r0, [r4, #44]	; 0x2c
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    19d0:	f242 7c10 	movw	ip, #10000	; 0x2710
    19d4:	fb0c 5202 	mla	r2, ip, r2, r5
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    19d8:	442b      	add	r3, r5
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    19da:	4429      	add	r1, r5
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    19dc:	fbb3 f3f5 	udiv	r3, r3, r5
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    19e0:	f100 0c06 	add.w	ip, r0, #6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    19e4:	3a01      	subs	r2, #1
    19e6:	fbb2 f2f5 	udiv	r2, r2, r5
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    19ea:	fbb1 f5f5 	udiv	r5, r1, r5
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    19ee:	b299      	uxth	r1, r3
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    19f0:	f8a4 20c2 	strh.w	r2, [r4, #194]	; 0xc2
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    19f4:	4561      	cmp	r1, ip
		lll->interval = conn->llcp_cu.interval;
    19f6:	f8b4 2110 	ldrh.w	r2, [r4, #272]	; 0x110
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    19fa:	f8a4 10ce 	strh.w	r1, [r4, #206]	; 0xce
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    19fe:	f8a4 50c6 	strh.w	r5, [r4, #198]	; 0xc6
		lll->interval = conn->llcp_cu.interval;
    1a02:	8562      	strh	r2, [r4, #42]	; 0x2a
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1a04:	dd02      	ble.n	1a0c <event_conn_upd_prep+0x1a4>
				     (conn->apto_reload - (lll->latency + 6)) :
    1a06:	1a09      	subs	r1, r1, r0
    1a08:	3906      	subs	r1, #6
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1a0a:	b289      	uxth	r1, r1
				     conn->apto_reload;
#endif /* CONFIG_BT_CTLR_LE_PING */

		if (conn->llcp_cu.cmd) {
    1a0c:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1a10:	f8a4 10ca 	strh.w	r1, [r4, #202]	; 0xca
		if (conn->llcp_cu.cmd) {
    1a14:	071b      	lsls	r3, r3, #28
			conn->supervision_expire = 0U;
    1a16:	bf44      	itt	mi
    1a18:	2300      	movmi	r3, #0
    1a1a:	f8a4 30c4 	strhmi.w	r3, [r4, #196]	; 0xc4
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		uint32_t mayfly_was_enabled =
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    1a1e:	2102      	movs	r1, #2
    1a20:	2001      	movs	r0, #1
    1a22:	f018 f925 	bl	19c70 <mayfly_is_enabled>
					  TICKER_USER_ID_ULL_LOW);
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    1a26:	2200      	movs	r2, #0
    1a28:	2102      	movs	r1, #2
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    1a2a:	4605      	mov	r5, r0
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    1a2c:	2001      	movs	r0, #1
    1a2e:	f00b f9af 	bl	cd90 <mayfly_enable>
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    1a32:	495e      	ldr	r1, [pc, #376]	; (1bac <event_conn_upd_prep+0x344>)
    1a34:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    1a38:	4620      	mov	r0, r4
    1a3a:	f00b f93b 	bl	ccb4 <mem_index_get>
			      0);
#endif

		/* start slave/master with new timings */
		ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    1a3e:	f100 0803 	add.w	r8, r0, #3
    1a42:	fa5f f888 	uxtb.w	r8, r8
		ticker_status =	ticker_stop(TICKER_INSTANCE_ID_CTLR,
    1a46:	4b5a      	ldr	r3, [pc, #360]	; (1bb0 <event_conn_upd_prep+0x348>)
    1a48:	9400      	str	r4, [sp, #0]
    1a4a:	4642      	mov	r2, r8
    1a4c:	2101      	movs	r1, #1
    1a4e:	2000      	movs	r0, #0
    1a50:	f00c fcd8 	bl	e404 <ticker_stop>
					    TICKER_USER_ID_ULL_HIGH,
					    ticker_id_conn,
					    ticker_stop_conn_op_cb,
					    (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    1a54:	f030 0302 	bics.w	r3, r0, #2
    1a58:	d00c      	beq.n	1a74 <event_conn_upd_prep+0x20c>
    1a5a:	4a4f      	ldr	r2, [pc, #316]	; (1b98 <event_conn_upd_prep+0x330>)
    1a5c:	4955      	ldr	r1, [pc, #340]	; (1bb4 <event_conn_upd_prep+0x34c>)
    1a5e:	4850      	ldr	r0, [pc, #320]	; (1ba0 <event_conn_upd_prep+0x338>)
    1a60:	f640 238f 	movw	r3, #2703	; 0xa8f
    1a64:	f01c fc8e 	bl	1e384 <printk>
    1a68:	4040      	eors	r0, r0
    1a6a:	f380 8811 	msr	BASEPRI, r0
    1a6e:	f04f 0003 	mov.w	r0, #3
    1a72:	df02      	svc	2
		ticker_status =
			ticker_start(TICKER_INSTANCE_ID_CTLR,
				     TICKER_USER_ID_ULL_HIGH,
				     ticker_id_conn,
				     ticks_at_expire, ticks_win_offset,
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    1a74:	4b47      	ldr	r3, [pc, #284]	; (1b94 <event_conn_upd_prep+0x32c>)
    1a76:	fbaa ab03 	umull	sl, fp, sl, r3
    1a7a:	4650      	mov	r0, sl
    1a7c:	a342      	add	r3, pc, #264	; (adr r3, 1b88 <event_conn_upd_prep+0x320>)
    1a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1a82:	4659      	mov	r1, fp
    1a84:	f7fe ffda 	bl	a3c <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(periodic_us),
    1a88:	4a4b      	ldr	r2, [pc, #300]	; (1bb8 <event_conn_upd_prep+0x350>)
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1a8a:	68e3      	ldr	r3, [r4, #12]
    1a8c:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_REMAINDER(periodic_us),
    1a8e:	f020 467f 	bic.w	r6, r0, #4278190080	; 0xff000000
    1a92:	fba6 2302 	umull	r2, r3, r6, r2
    1a96:	2007      	movs	r0, #7
    1a98:	fb00 3306 	mla	r3, r0, r6, r3
    1a9c:	ebba 0002 	subs.w	r0, sl, r2
    1aa0:	eb6b 0103 	sbc.w	r1, fp, r3
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1aa4:	f8df e114 	ldr.w	lr, [pc, #276]	; 1bbc <event_conn_upd_prep+0x354>
    1aa8:	f8df c114 	ldr.w	ip, [pc, #276]	; 1bc0 <event_conn_upd_prep+0x358>
    1aac:	9408      	str	r4, [sp, #32]
    1aae:	9406      	str	r4, [sp, #24]
				     HAL_TICKER_REMAINDER(periodic_us),
    1ab0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1ab4:	2300      	movs	r3, #0
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1ab6:	f64f 74fe 	movw	r4, #65534	; 0xfffe
    1aba:	f8cd e01c 	str.w	lr, [sp, #28]
    1abe:	f8cd c014 	str.w	ip, [sp, #20]
    1ac2:	9403      	str	r4, [sp, #12]
				     HAL_TICKER_REMAINDER(periodic_us),
    1ac4:	f7fe ffba 	bl	a3c <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1ac8:	464b      	mov	r3, r9
    1aca:	e9cd 6001 	strd	r6, r0, [sp, #4]
    1ace:	9700      	str	r7, [sp, #0]
    1ad0:	4642      	mov	r2, r8
    1ad2:	2101      	movs	r1, #1
    1ad4:	2000      	movs	r0, #0
    1ad6:	f00c fc0d 	bl	e2f4 <ticker_start>
#else
				     ull_master_ticker_cb,
#endif
				     conn, ticker_start_conn_op_cb,
				     (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    1ada:	f030 0302 	bics.w	r3, r0, #2
    1ade:	d00c      	beq.n	1afa <event_conn_upd_prep+0x292>
    1ae0:	4a2d      	ldr	r2, [pc, #180]	; (1b98 <event_conn_upd_prep+0x330>)
    1ae2:	4934      	ldr	r1, [pc, #208]	; (1bb4 <event_conn_upd_prep+0x34c>)
    1ae4:	482e      	ldr	r0, [pc, #184]	; (1ba0 <event_conn_upd_prep+0x338>)
    1ae6:	f640 23a9 	movw	r3, #2729	; 0xaa9
    1aea:	f01c fc4b 	bl	1e384 <printk>
    1aee:	4040      	eors	r0, r0
    1af0:	f380 8811 	msr	BASEPRI, r0
    1af4:	f04f 0003 	mov.w	r0, #3
    1af8:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* enable ticker job, if disabled in this function */
		if (mayfly_was_enabled) {
    1afa:	2d00      	cmp	r5, #0
    1afc:	f040 8136 	bne.w	1d6c <event_conn_upd_prep+0x504>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
				      TICKER_USER_ID_ULL_LOW, 1);
		}
#endif

		return 0;
    1b00:	2000      	movs	r0, #0
	}

	return -EINPROGRESS;
}
    1b02:	b00b      	add	sp, #44	; 0x2c
    1b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    1b08:	1a12      	subs	r2, r2, r0
    1b0a:	f240 43e2 	movw	r3, #1250	; 0x4e2
    1b0e:	4821      	ldr	r0, [pc, #132]	; (1b94 <event_conn_upd_prep+0x32c>)
    1b10:	fb03 f202 	mul.w	r2, r3, r2
    1b14:	fba2 0100 	umull	r0, r1, r2, r0
    1b18:	a31b      	add	r3, pc, #108	; (adr r3, 1b88 <event_conn_upd_prep+0x320>)
    1b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b1e:	f7fe ff8d 	bl	a3c <__aeabi_uldivmod>
    1b22:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1b26:	4481      	add	r9, r0
    1b28:	e72c      	b.n	1984 <event_conn_upd_prep+0x11c>
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
    1b2a:	f894 20d9 	ldrb.w	r2, [r4, #217]	; 0xd9
    1b2e:	2a00      	cmp	r2, #0
    1b30:	f43f aebe 	beq.w	18b0 <event_conn_upd_prep+0x48>
			conn->slave.llcp_type = LLCP_NONE;
    1b34:	f884 30d9 	strb.w	r3, [r4, #217]	; 0xd9
    1b38:	e6be      	b.n	18b8 <event_conn_upd_prep+0x50>
			uint32_t ticks_prepare_to_start =
    1b3a:	e9d4 0201 	ldrd	r0, r2, [r4, #4]
			conn->evt.ticks_xtal_to_start &= ~XON_BITMASK;
    1b3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    1b42:	4282      	cmp	r2, r0
    1b44:	bf2c      	ite	cs
    1b46:	4491      	addcs	r9, r2
    1b48:	4481      	addcc	r9, r0
    1b4a:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->evt.ticks_xtal_to_start -
    1b4c:	eba9 0903 	sub.w	r9, r9, r3
    1b50:	e6f7      	b.n	1942 <event_conn_upd_prep+0xda>
		if ((conn->llcp_cu.interval != lll->interval) ||
    1b52:	f8b4 c02c 	ldrh.w	ip, [r4, #44]	; 0x2c
    1b56:	4594      	cmp	ip, r2
    1b58:	f47f aedb 	bne.w	1912 <event_conn_upd_prep+0xaa>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    1b5c:	f240 4ce2 	movw	ip, #1250	; 0x4e2
    1b60:	fb0c fb03 	mul.w	fp, ip, r3
    1b64:	f242 7c10 	movw	ip, #10000	; 0x2710
		    (conn->llcp_cu.latency != lll->latency) ||
    1b68:	f8b4 e0c2 	ldrh.w	lr, [r4, #194]	; 0xc2
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    1b6c:	fb0c bc01 	mla	ip, ip, r1, fp
    1b70:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    1b74:	fbbc fcfb 	udiv	ip, ip, fp
		    (conn->llcp_cu.latency != lll->latency) ||
    1b78:	fa1f fc8c 	uxth.w	ip, ip
    1b7c:	45e6      	cmp	lr, ip
    1b7e:	f47f aec8 	bne.w	1912 <event_conn_upd_prep+0xaa>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
    1b82:	2301      	movs	r3, #1
    1b84:	712b      	strb	r3, [r5, #4]
    1b86:	e6d3      	b.n	1930 <event_conn_upd_prep+0xc8>
    1b88:	1afd498d 	.word	0x1afd498d
    1b8c:	00000007 	.word	0x00000007
    1b90:	20002074 	.word	0x20002074
    1b94:	3b9aca00 	.word	0x3b9aca00
    1b98:	00024874 	.word	0x00024874
    1b9c:	000243a4 	.word	0x000243a4
    1ba0:	00024334 	.word	0x00024334
    1ba4:	01c9c37f 	.word	0x01c9c37f
    1ba8:	026259ff 	.word	0x026259ff
    1bac:	20001078 	.word	0x20001078
    1bb0:	00011c55 	.word	0x00011c55
    1bb4:	00024954 	.word	0x00024954
    1bb8:	1afd498d 	.word	0x1afd498d
    1bbc:	00011bfd 	.word	0x00011bfd
    1bc0:	0001645d 	.word	0x0001645d
		LL_ASSERT(rx && rx->hdr.link);
    1bc4:	4a80      	ldr	r2, [pc, #512]	; (1dc8 <event_conn_upd_prep+0x560>)
    1bc6:	4981      	ldr	r1, [pc, #516]	; (1dcc <event_conn_upd_prep+0x564>)
    1bc8:	4881      	ldr	r0, [pc, #516]	; (1dd0 <event_conn_upd_prep+0x568>)
    1bca:	f640 13e4 	movw	r3, #2532	; 0x9e4
    1bce:	f01c fbd9 	bl	1e384 <printk>
    1bd2:	4040      	eors	r0, r0
    1bd4:	f380 8811 	msr	BASEPRI, r0
    1bd8:	f04f 0003 	mov.w	r0, #3
    1bdc:	df02      	svc	2
    1bde:	6828      	ldr	r0, [r5, #0]
    1be0:	e689      	b.n	18f6 <event_conn_upd_prep+0x8e>
		rx = ll_pdu_rx_alloc_peek(1);
    1be2:	2001      	movs	r0, #1
    1be4:	f00e ff58 	bl	10a98 <ll_pdu_rx_alloc_peek>
		if (!rx) {
    1be8:	4607      	mov	r7, r0
    1bea:	2800      	cmp	r0, #0
    1bec:	f000 80ca 	beq.w	1d84 <event_conn_upd_prep+0x51c>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1bf0:	4878      	ldr	r0, [pc, #480]	; (1dd4 <event_conn_upd_prep+0x56c>)
    1bf2:	f00b f82b 	bl	cc4c <mem_acquire>
		if (!tx) {
    1bf6:	4605      	mov	r5, r0
    1bf8:	2800      	cmp	r0, #0
    1bfa:	f000 80c3 	beq.w	1d84 <event_conn_upd_prep+0x51c>
		(void)ll_pdu_rx_alloc();
    1bfe:	f00e ff69 	bl	10ad4 <ll_pdu_rx_alloc>
		rx->hdr.link->mem = conn->llcp_rx;
    1c02:	683a      	ldr	r2, [r7, #0]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1c04:	792b      	ldrb	r3, [r5, #4]
		rx->hdr.link->mem = conn->llcp_rx;
    1c06:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
    1c0a:	6051      	str	r1, [r2, #4]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1c0c:	f043 0303 	orr.w	r3, r3, #3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    1c10:	220c      	movs	r2, #12
		conn->llcp_rx = rx;
    1c12:	f8c4 7108 	str.w	r7, [r4, #264]	; 0x108
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    1c16:	716a      	strb	r2, [r5, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1c18:	712b      	strb	r3, [r5, #4]
		conn->llcp.conn_upd.instant = event_counter +
    1c1a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
    1c1c:	f8d4 2118 	ldr.w	r2, [r4, #280]	; 0x118
    1c20:	4f6d      	ldr	r7, [pc, #436]	; (1dd8 <event_conn_upd_prep+0x570>)
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    1c22:	f894 110e 	ldrb.w	r1, [r4, #270]	; 0x10e
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    1c26:	2000      	movs	r0, #0
		conn->llcp.conn_upd.instant = event_counter +
    1c28:	441e      	add	r6, r3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    1c2a:	71e8      	strb	r0, [r5, #7]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
    1c2c:	fba7 3202 	umull	r3, r2, r7, r2
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
    1c30:	f3c2 228f 	ubfx	r2, r2, #10, #16
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
    1c34:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
    1c38:	722b      	strb	r3, [r5, #8]
	    conn->tx_head &&
    1c3a:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
    1c3e:	f8a5 2009 	strh.w	r2, [r5, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    1c42:	f8b4 2110 	ldrh.w	r2, [r4, #272]	; 0x110
    1c46:	f8a5 200b 	strh.w	r2, [r5, #11]
					      conn->lll.latency + 6;
    1c4a:	3606      	adds	r6, #6
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    1c4c:	f8b4 2112 	ldrh.w	r2, [r4, #274]	; 0x112
    1c50:	f8a5 200d 	strh.w	r2, [r5, #13]
					      conn->lll.latency + 6;
    1c54:	b2b6      	uxth	r6, r6
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    1c56:	f8b4 2114 	ldrh.w	r2, [r4, #276]	; 0x114
    1c5a:	f8a5 200f 	strh.w	r2, [r5, #15]
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    1c5e:	f360 0102 	bfi	r1, r0, #0, #3
		conn->llcp.conn_upd.instant = event_counter +
    1c62:	f8a4 60e8 	strh.w	r6, [r4, #232]	; 0xe8
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    1c66:	f884 110e 	strb.w	r1, [r4, #270]	; 0x10e
		pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    1c6a:	f8a5 6011 	strh.w	r6, [r5, #17]
	if (
    1c6e:	2b00      	cmp	r3, #0
    1c70:	d069      	beq.n	1d46 <event_conn_upd_prep+0x4de>
	    !conn->llcp_enc.pause_tx &&
    1c72:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
    1c76:	0790      	lsls	r0, r2, #30
    1c78:	d465      	bmi.n	1d46 <event_conn_upd_prep+0x4de>
	    !conn->llcp_phy.pause_tx &&
    1c7a:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
    1c7e:	07d1      	lsls	r1, r2, #31
    1c80:	d461      	bmi.n	1d46 <event_conn_upd_prep+0x4de>
		if (conn->tx_head == conn->tx_data) {
    1c82:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
    1c86:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
    1c88:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
    1c8c:	f000 8085 	beq.w	1d9a <event_conn_upd_prep+0x532>
		} else if (!conn->tx_ctrl) {
    1c90:	2a00      	cmp	r2, #0
    1c92:	d15b      	bne.n	1d4c <event_conn_upd_prep+0x4e4>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    1c94:	791a      	ldrb	r2, [r3, #4]
    1c96:	f002 0203 	and.w	r2, r2, #3
    1c9a:	2a03      	cmp	r2, #3
    1c9c:	f000 8089 	beq.w	1db2 <event_conn_upd_prep+0x54a>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    1ca0:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
    1ca4:	e054      	b.n	1d50 <event_conn_upd_prep+0x4e8>
		conn_upd_curr = conn;
    1ca6:	6028      	str	r0, [r5, #0]
    1ca8:	e5e9      	b.n	187e <event_conn_upd_prep+0x16>
			lll->slave.window_widening_prepare_us -=
    1caa:	6ca2      	ldr	r2, [r4, #72]	; 0x48
				lll->slave.window_widening_periodic_us *
    1cac:	6c23      	ldr	r3, [r4, #64]	; 0x40
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1cae:	4f4b      	ldr	r7, [pc, #300]	; (1ddc <event_conn_upd_prep+0x574>)
			lll->slave.window_widening_prepare_us -=
    1cb0:	fb03 231a 	mls	r3, r3, sl, r2
    1cb4:	64a3      	str	r3, [r4, #72]	; 0x48
				(((lll_clock_ppm_local_get() +
    1cb6:	f016 f8df 	bl	17e78 <lll_clock_ppm_local_get>
    1cba:	4606      	mov	r6, r0
				   lll_clock_ppm_get(conn->slave.sca)) *
    1cbc:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
    1cc0:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    1cc4:	f016 f8da 	bl	17e7c <lll_clock_ppm_get>
				(((lll_clock_ppm_local_get() +
    1cc8:	4406      	add	r6, r0
				   lll_clock_ppm_get(conn->slave.sca)) *
    1cca:	fb05 f606 	mul.w	r6, r5, r6
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    1cce:	4b44      	ldr	r3, [pc, #272]	; (1de0 <event_conn_upd_prep+0x578>)
			lll->slave.window_widening_prepare_us +=
    1cd0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
    1cd2:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    1cd6:	f506 2674 	add.w	r6, r6, #999424	; 0xf4000
    1cda:	f206 263f 	addw	r6, r6, #575	; 0x23f
    1cde:	fba3 3606 	umull	r3, r6, r3, r6
    1ce2:	0cb6      	lsrs	r6, r6, #18
				lll->slave.window_widening_periodic_us *
    1ce4:	fb06 f00b 	mul.w	r0, r6, fp
				(conn_interval_us >> 1) - EVENT_IFS_US;
    1ce8:	086b      	lsrs	r3, r5, #1
			lll->slave.window_widening_prepare_us +=
    1cea:	4402      	add	r2, r0
				(conn_interval_us >> 1) - EVENT_IFS_US;
    1cec:	3b96      	subs	r3, #150	; 0x96
			lll->slave.window_widening_prepare_us +=
    1cee:	429a      	cmp	r2, r3
    1cf0:	bf28      	it	cs
    1cf2:	461a      	movcs	r2, r3
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
    1cf4:	fb08 fc01 	mul.w	ip, r8, r1
			conn->slave.ticks_to_offset = 0U;
    1cf8:	f04f 0e00 	mov.w	lr, #0
			lll->slave.window_widening_max_us =
    1cfc:	e9c4 3211 	strd	r3, r2, [r4, #68]	; 0x44
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1d00:	fba0 0107 	umull	r0, r1, r0, r7
    1d04:	a32e      	add	r3, pc, #184	; (adr r3, 1dc0 <event_conn_upd_prep+0x558>)
    1d06:	e9d3 2300 	ldrd	r2, r3, [r3]
			lll->slave.window_size_prepare_us =
    1d0a:	f8c4 c050 	str.w	ip, [r4, #80]	; 0x50
			conn->slave.ticks_to_offset = 0U;
    1d0e:	f8c4 e0e0 	str.w	lr, [r4, #224]	; 0xe0
			lll->slave.window_widening_periodic_us =
    1d12:	6426      	str	r6, [r4, #64]	; 0x40
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1d14:	f7fe fe92 	bl	a3c <__aeabi_uldivmod>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    1d18:	4b2f      	ldr	r3, [pc, #188]	; (1dd8 <event_conn_upd_prep+0x570>)
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1d1a:	4684      	mov	ip, r0
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    1d1c:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
    1d20:	fba3 3000 	umull	r3, r0, r3, r0
    1d24:	0a80      	lsrs	r0, r0, #10
    1d26:	fb08 f000 	mul.w	r0, r8, r0
    1d2a:	fba0 0107 	umull	r0, r1, r0, r7
    1d2e:	a324      	add	r3, pc, #144	; (adr r3, 1dc0 <event_conn_upd_prep+0x558>)
    1d30:	e9d3 2300 	ldrd	r2, r3, [r3]
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1d34:	eba9 090c 	sub.w	r9, r9, ip
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    1d38:	f7fe fe80 	bl	a3c <__aeabi_uldivmod>
			periodic_us -= lll->slave.window_widening_periodic_us;
    1d3c:	eba5 0a06 	sub.w	sl, r5, r6
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    1d40:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
			periodic_us -= lll->slave.window_widening_periodic_us;
    1d44:	e63d      	b.n	19c2 <event_conn_upd_prep+0x15a>
		if (!conn->tx_ctrl) {
    1d46:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
    1d4a:	b302      	cbz	r2, 1d8e <event_conn_upd_prep+0x526>
	tx->next = conn->tx_ctrl_last->next;
    1d4c:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    1d50:	681a      	ldr	r2, [r3, #0]
    1d52:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
    1d54:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
    1d56:	682b      	ldr	r3, [r5, #0]
    1d58:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
	if (!tx->next) {
    1d5c:	b90b      	cbnz	r3, 1d62 <event_conn_upd_prep+0x4fa>
		conn->tx_data_last = tx;
    1d5e:	f8c4 51d4 	str.w	r5, [r4, #468]	; 0x1d4
	return -EINPROGRESS;
    1d62:	f06f 0076 	mvn.w	r0, #118	; 0x76
}
    1d66:	b00b      	add	sp, #44	; 0x2c
    1d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
    1d6c:	2201      	movs	r2, #1
    1d6e:	4610      	mov	r0, r2
    1d70:	2102      	movs	r1, #2
    1d72:	f00b f80d 	bl	cd90 <mayfly_enable>
    1d76:	e6c3      	b.n	1b00 <event_conn_upd_prep+0x298>
			conn->procedure_expire = 0U;
    1d78:	2300      	movs	r3, #0
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    1d7a:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
			conn->procedure_expire = 0U;
    1d7e:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
    1d82:	e5aa      	b.n	18da <event_conn_upd_prep+0x72>
			return -ENOBUFS;
    1d84:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    1d88:	b00b      	add	sp, #44	; 0x2c
    1d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tx->next = conn->tx_head;
    1d8e:	602b      	str	r3, [r5, #0]
				conn->tx_ctrl = tx;
    1d90:	e9c4 5571 	strd	r5, r5, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    1d94:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
    1d98:	e7e0      	b.n	1d5c <event_conn_upd_prep+0x4f4>
			conn->tx_data = conn->tx_data->next;
    1d9a:	6819      	ldr	r1, [r3, #0]
    1d9c:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    1da0:	2a00      	cmp	r2, #0
    1da2:	d1d3      	bne.n	1d4c <event_conn_upd_prep+0x4e4>
			tx->next = conn->tx_head->next;
    1da4:	681a      	ldr	r2, [r3, #0]
    1da6:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
    1da8:	601d      	str	r5, [r3, #0]
				conn->tx_ctrl = tx;
    1daa:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
    1dac:	e9c4 5572 	strd	r5, r5, [r4, #456]	; 0x1c8
    1db0:	e7d4      	b.n	1d5c <event_conn_upd_prep+0x4f4>
	    ((pdu_data_tx->llctrl.opcode !=
    1db2:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    1db4:	2a03      	cmp	r2, #3
    1db6:	d0f5      	beq.n	1da4 <event_conn_upd_prep+0x53c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    1db8:	2a0a      	cmp	r2, #10
    1dba:	f47f af71 	bne.w	1ca0 <event_conn_upd_prep+0x438>
    1dbe:	e7f1      	b.n	1da4 <event_conn_upd_prep+0x53c>
    1dc0:	1afd498d 	.word	0x1afd498d
    1dc4:	00000007 	.word	0x00000007
    1dc8:	00024874 	.word	0x00024874
    1dcc:	00024940 	.word	0x00024940
    1dd0:	00024334 	.word	0x00024334
    1dd4:	200020f8 	.word	0x200020f8
    1dd8:	d1b71759 	.word	0xd1b71759
    1ddc:	3b9aca00 	.word	0x3b9aca00
    1de0:	431bde83 	.word	0x431bde83
    1de4:	00000000 	.word	0x00000000

00001de8 <ull_slave_setup>:
static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *params);

void ull_slave_setup(memq_link_t *link, struct node_rx_hdr *rx,
		     struct node_rx_ftr *ftr, struct lll_conn *lll)
{
    1de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1dec:	460f      	mov	r7, r1
    1dee:	4616      	mov	r6, r2
    1df0:	4681      	mov	r9, r0
	conn = lll->hdr.parent;

	/* Populate the slave context */
	pdu_adv = (void *)((struct node_rx_pdu *)rx)->pdu;

	peer_addr_type = pdu_adv->tx_addr;
    1df2:	7f0a      	ldrb	r2, [r1, #28]
    1df4:	f857 0f1e 	ldr.w	r0, [r7, #30]!
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);

#if defined(CONFIG_BT_CTLR_PRIVACY)
	uint8_t rl_idx = ftr->rl_idx;
    1df8:	f896 a012 	ldrb.w	sl, [r6, #18]
    1dfc:	88bc      	ldrh	r4, [r7, #4]
	conn = lll->hdr.parent;
    1dfe:	f8d3 8000 	ldr.w	r8, [r3]
{
    1e02:	b095      	sub	sp, #84	; 0x54
    1e04:	460d      	mov	r5, r1
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    1e06:	6831      	ldr	r1, [r6, #0]
    1e08:	f8ad 404c 	strh.w	r4, [sp, #76]	; 0x4c
	peer_addr_type = pdu_adv->tx_addr;
    1e0c:	f3c2 1280 	ubfx	r2, r2, #6, #1

	if (rl_idx != FILTER_IDX_NONE) {
    1e10:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    1e14:	f8d1 b000 	ldr.w	fp, [r1]
	peer_addr_type = pdu_adv->tx_addr;
    1e18:	9012      	str	r0, [sp, #72]	; 0x48
{
    1e1a:	461c      	mov	r4, r3
	peer_addr_type = pdu_adv->tx_addr;
    1e1c:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
	if (rl_idx != FILTER_IDX_NONE) {
    1e20:	d148      	bne.n	1eb4 <ull_slave_setup+0xcc>
		peer_addr_type += 2;
	} else {
#else /* CONFIG_BT_CTLR_PRIVACY */
	if (1) {
#endif /* CONFIG_BT_CTLR_PRIVACY */
		memcpy(peer_id_addr, peer_addr, BDADDR_SIZE);
    1e22:	ab12      	add	r3, sp, #72	; 0x48
    1e24:	e893 0003 	ldmia.w	r3, {r0, r1}
    1e28:	9010      	str	r0, [sp, #64]	; 0x40
    1e2a:	f8ad 1044 	strh.w	r1, [sp, #68]	; 0x44
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    1e2e:	462a      	mov	r2, r5
    1e30:	462b      	mov	r3, r5
    1e32:	f832 1f2e 	ldrh.w	r1, [r2, #46]!
    1e36:	7892      	ldrb	r2, [r2, #2]
    1e38:	72a2      	strb	r2, [r4, #10]
    1e3a:	8121      	strh	r1, [r4, #8]
    1e3c:	f8d5 202a 	ldr.w	r2, [r5, #42]	; 0x2a
    1e40:	6062      	str	r2, [r4, #4]
    1e42:	f853 2f3a 	ldr.w	r2, [r3, #58]!
    1e46:	61a2      	str	r2, [r4, #24]
	memcpy(conn->own_addr, own_addr, sizeof(conn->own_addr));
#endif /* CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN */

	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    1e48:	f104 0018 	add.w	r0, r4, #24
    1e4c:	791b      	ldrb	r3, [r3, #4]
    1e4e:	7103      	strb	r3, [r0, #4]
	       sizeof(lll->data_chan_map));
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    1e50:	2105      	movs	r1, #5
    1e52:	f00b f8c7 	bl	cfe4 <util_ones_count_get>
			       sizeof(lll->data_chan_map));
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    1e56:	f895 203f 	ldrb.w	r2, [r5, #63]	; 0x3f
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    1e5a:	7f63      	ldrb	r3, [r4, #29]
    1e5c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    1e60:	f360 0305 	bfi	r3, r0, #0, #6
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    1e64:	f3c2 0104 	ubfx	r1, r2, #0, #5
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    1e68:	7763      	strb	r3, [r4, #29]
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    1e6a:	77a1      	strb	r1, [r4, #30]
	lll->interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    1e6c:	8eaf      	ldrh	r7, [r5, #52]	; 0x34
    1e6e:	81e7      	strh	r7, [r4, #14]
	if ((lll->data_chan_count < 2) || (lll->data_chan_hop < 5) ||
    1e70:	2801      	cmp	r0, #1
	lll->interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    1e72:	b2bf      	uxth	r7, r7
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    1e74:	f002 031f 	and.w	r3, r2, #31
	if ((lll->data_chan_count < 2) || (lll->data_chan_hop < 5) ||
    1e78:	d905      	bls.n	1e86 <ull_slave_setup+0x9e>
    1e7a:	331b      	adds	r3, #27
    1e7c:	f003 031f 	and.w	r3, r3, #31
    1e80:	2b0b      	cmp	r3, #11
    1e82:	d800      	bhi.n	1e86 <ull_slave_setup+0x9e>
	    (lll->data_chan_hop > 16) || !lll->interval) {
    1e84:	bb17      	cbnz	r7, 1ecc <ull_slave_setup+0xe4>
		lll->slave.initiated = 0U;
    1e86:	f894 3020 	ldrb.w	r3, [r4, #32]

		/* Mark for buffer for release */
		rx->type = NODE_RX_TYPE_RELEASE;
    1e8a:	2701      	movs	r7, #1
		lll->slave.initiated = 0U;
    1e8c:	f36f 0300 	bfc	r3, #0, #1
    1e90:	f884 3020 	strb.w	r3, [r4, #32]
		rx->type = NODE_RX_TYPE_RELEASE;
    1e94:	712f      	strb	r7, [r5, #4]
			struct node_rx_pdu *rx_csa;

			/* pick the rx node instance stored within the
			 * connection rx node.
			 */
			rx_csa = (void *)ftr->extra;
    1e96:	6874      	ldr	r4, [r6, #4]

			/* Enqueue the connection event to be release */
			ll_rx_put(link, rx);
    1e98:	4648      	mov	r0, r9
    1e9a:	4629      	mov	r1, r5
    1e9c:	f00e fdec 	bl	10a78 <ll_rx_put>
			/* Mark for buffer for release */
			rx->type = NODE_RX_TYPE_RELEASE;
		}

		/* Enqueue connection or CSA event to be release */
		ll_rx_put(link, rx);
    1ea0:	6820      	ldr	r0, [r4, #0]
			rx->type = NODE_RX_TYPE_RELEASE;
    1ea2:	7127      	strb	r7, [r4, #4]
		ll_rx_put(link, rx);
    1ea4:	4621      	mov	r1, r4
    1ea6:	f00e fde7 	bl	10a78 <ll_rx_put>
		ll_rx_sched();
    1eaa:	f00e fdef 	bl	10a8c <ll_rx_sched>
	/* enable ticker job, irrespective of disabled in this function so
	 * first connection event can be scheduled as soon as possible.
	 */
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
#endif
}
    1eae:	b015      	add	sp, #84	; 0x54
    1eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ll_rl_id_addr_get(rl_idx, &peer_addr_type, peer_id_addr);
    1eb4:	aa10      	add	r2, sp, #64	; 0x40
    1eb6:	f10d 013f 	add.w	r1, sp, #63	; 0x3f
    1eba:	4650      	mov	r0, sl
    1ebc:	f014 fd68 	bl	16990 <ll_rl_id_addr_get>
		peer_addr_type += 2;
    1ec0:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
    1ec4:	3302      	adds	r3, #2
    1ec6:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
    1eca:	e7b0      	b.n	1e2e <ull_slave_setup+0x46>
	((struct lll_adv *)ftr->param)->conn = NULL;
    1ecc:	6833      	ldr	r3, [r6, #0]
	conn->slave.sca = pdu_adv->connect_ind.sca;
    1ece:	f898 10d8 	ldrb.w	r1, [r8, #216]	; 0xd8
	((struct lll_adv *)ftr->param)->conn = NULL;
    1ed2:	2000      	movs	r0, #0
    1ed4:	6058      	str	r0, [r3, #4]
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    1ed6:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
    1eda:	f895 0037 	ldrb.w	r0, [r5, #55]	; 0x37
	conn->slave.sca = pdu_adv->connect_ind.sca;
    1ede:	0952      	lsrs	r2, r2, #5
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    1ee0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	conn->slave.sca = pdu_adv->connect_ind.sca;
    1ee4:	f362 01c5 	bfi	r1, r2, #3, #3
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    1ee8:	8223      	strh	r3, [r4, #16]
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    1eea:	f240 42e2 	movw	r2, #1250	; 0x4e2
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
    1eee:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
	conn->slave.sca = pdu_adv->connect_ind.sca;
    1ef0:	f888 10d8 	strb.w	r1, [r8, #216]	; 0xd8
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    1ef4:	fb02 f707 	mul.w	r7, r2, r7
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
    1ef8:	930b      	str	r3, [sp, #44]	; 0x2c
		(((lll_clock_ppm_local_get() +
    1efa:	f015 ffbd 	bl	17e78 <lll_clock_ppm_local_get>
    1efe:	4603      	mov	r3, r0
		   lll_clock_ppm_get(conn->slave.sca)) *
    1f00:	f898 00d8 	ldrb.w	r0, [r8, #216]	; 0xd8
		(((lll_clock_ppm_local_get() +
    1f04:	930a      	str	r3, [sp, #40]	; 0x28
		   lll_clock_ppm_get(conn->slave.sca)) *
    1f06:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    1f0a:	f015 ffb7 	bl	17e7c <lll_clock_ppm_get>
		(((lll_clock_ppm_local_get() +
    1f0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    1f10:	f8df e2d8 	ldr.w	lr, [pc, #728]	; 21ec <ull_slave_setup+0x404>
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size *
    1f14:	f895 c031 	ldrb.w	ip, [r5, #49]	; 0x31
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1f18:	49ab      	ldr	r1, [pc, #684]	; (21c8 <ull_slave_setup+0x3e0>)
		(((lll_clock_ppm_local_get() +
    1f1a:	4403      	add	r3, r0
		   lll_clock_ppm_get(conn->slave.sca)) *
    1f1c:	fb07 f303 	mul.w	r3, r7, r3
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    1f20:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
    1f24:	f203 233f 	addw	r3, r3, #575	; 0x23f
    1f28:	fbae 2303 	umull	r2, r3, lr, r3
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    1f2c:	ea4f 0e57 	mov.w	lr, r7, lsr #1
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size *
    1f30:	f240 42e2 	movw	r2, #1250	; 0x4e2
    1f34:	fb02 f20c 	mul.w	r2, r2, ip
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    1f38:	0c9b      	lsrs	r3, r3, #18
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    1f3a:	f1ae 0e96 	sub.w	lr, lr, #150	; 0x96
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size *
    1f3e:	63a2      	str	r2, [r4, #56]	; 0x38
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    1f40:	f8c4 e028 	str.w	lr, [r4, #40]	; 0x28
	lll->slave.window_widening_periodic_us =
    1f44:	6263      	str	r3, [r4, #36]	; 0x24
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    1f46:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1f48:	8a20      	ldrh	r0, [r4, #16]
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1f4a:	f8df c2a4 	ldr.w	ip, [pc, #676]	; 21f0 <ull_slave_setup+0x408>
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    1f4e:	f242 7210 	movw	r2, #10000	; 0x2710
    1f52:	fb02 7203 	mla	r2, r2, r3, r7
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1f56:	4439      	add	r1, r7
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1f58:	f100 0e06 	add.w	lr, r0, #6
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    1f5c:	3a01      	subs	r2, #1
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1f5e:	fbb1 f1f7 	udiv	r1, r1, r7
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    1f62:	fbb2 f2f7 	udiv	r2, r2, r7
    1f66:	f8a8 20c2 	strh.w	r2, [r8, #194]	; 0xc2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1f6a:	b28a      	uxth	r2, r1
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1f6c:	4572      	cmp	r2, lr
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1f6e:	44bc      	add	ip, r7
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1f70:	f8a8 20ce 	strh.w	r2, [r8, #206]	; 0xce
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1f74:	fbbc fcf7 	udiv	ip, ip, r7
    1f78:	f8a8 c0c6 	strh.w	ip, [r8, #198]	; 0xc6
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1f7c:	dd02      	ble.n	1f84 <ull_slave_setup+0x19c>
			     (conn->apto_reload - (lll->latency + 6)) :
    1f7e:	1a12      	subs	r2, r2, r0
    1f80:	3a06      	subs	r2, #6
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1f82:	b292      	uxth	r2, r2
    1f84:	f8a8 20ca 	strh.w	r2, [r8, #202]	; 0xca
    1f88:	6862      	ldr	r2, [r4, #4]
    1f8a:	f8c8 20dc 	str.w	r2, [r8, #220]	; 0xdc
		chan_sel = pdu_adv->chan_sel;
    1f8e:	7f2a      	ldrb	r2, [r5, #28]
    1f90:	930c      	str	r3, [sp, #48]	; 0x30
	cc->status = 0U;
    1f92:	f44f 7180 	mov.w	r1, #256	; 0x100
    1f96:	83a9      	strh	r1, [r5, #28]
		chan_sel = pdu_adv->chan_sel;
    1f98:	f3c2 1340 	ubfx	r3, r2, #5, #1
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    1f9c:	f89b 0026 	ldrb.w	r0, [fp, #38]	; 0x26
		chan_sel = pdu_adv->chan_sel;
    1fa0:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    1fa4:	930a      	str	r3, [sp, #40]	; 0x28
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    1fa6:	f015 fa25 	bl	173f4 <ull_filter_lll_lrpa_used>
    1faa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1fac:	f105 022b 	add.w	r2, r5, #43	; 0x2b
    1fb0:	2800      	cmp	r0, #0
    1fb2:	f000 80e0 	beq.w	2176 <ull_slave_setup+0x38e>
    1fb6:	4629      	mov	r1, r5
    1fb8:	f851 0f24 	ldr.w	r0, [r1, #36]!
    1fbc:	f8c5 002b 	str.w	r0, [r5, #43]	; 0x2b
    1fc0:	8889      	ldrh	r1, [r1, #4]
    1fc2:	8091      	strh	r1, [r2, #4]
	if (rl_idx != FILTER_IDX_NONE) {
    1fc4:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    1fc8:	f000 80d9 	beq.w	217e <ull_slave_setup+0x396>
    1fcc:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
    1fd0:	9812      	ldr	r0, [sp, #72]	; 0x48
    1fd2:	f8a5 2029 	strh.w	r2, [r5, #41]	; 0x29
    1fd6:	f8c5 0025 	str.w	r0, [r5, #37]	; 0x25
	cc->peer_addr_type = peer_addr_type;
    1fda:	f89d 103f 	ldrb.w	r1, [sp, #63]	; 0x3f
    1fde:	9810      	ldr	r0, [sp, #64]	; 0x40
    1fe0:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
    1fe4:	77a9      	strb	r1, [r5, #30]
    1fe6:	f8c5 001f 	str.w	r0, [r5, #31]
    1fea:	f8a5 2023 	strh.w	r2, [r5, #35]	; 0x23
	cc->sca = conn->slave.sca;
    1fee:	f898 20d8 	ldrb.w	r2, [r8, #216]	; 0xd8
	cc->interval = lll->interval;
    1ff2:	89e0      	ldrh	r0, [r4, #14]
	cc->latency = lll->latency;
    1ff4:	8a21      	ldrh	r1, [r4, #16]
    1ff6:	86a9      	strh	r1, [r5, #52]	; 0x34
	cc->sca = conn->slave.sca;
    1ff8:	f3c2 02c2 	ubfx	r2, r2, #3, #3
	cc->timeout = timeout;
    1ffc:	86eb      	strh	r3, [r5, #54]	; 0x36
	cc->interval = lll->interval;
    1ffe:	8668      	strh	r0, [r5, #50]	; 0x32
	cc->sca = conn->slave.sca;
    2000:	f885 2038 	strb.w	r2, [r5, #56]	; 0x38
	lll->handle = ll_conn_handle_get(conn);
    2004:	4640      	mov	r0, r8
    2006:	f010 f9ad 	bl	12364 <ll_conn_handle_get>
		ll_rx_put(link, rx);
    200a:	4629      	mov	r1, r5
	lll->handle = ll_conn_handle_get(conn);
    200c:	81a0      	strh	r0, [r4, #12]
	rx->handle = lll->handle;
    200e:	80e8      	strh	r0, [r5, #6]
		rx_csa = (void *)ftr->extra;
    2010:	6875      	ldr	r5, [r6, #4]
		ll_rx_put(link, rx);
    2012:	4648      	mov	r0, r9
    2014:	f00e fd30 	bl	10a78 <ll_rx_put>
		rx->handle = lll->handle;
    2018:	89a3      	ldrh	r3, [r4, #12]
    201a:	80eb      	strh	r3, [r5, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    201c:	2319      	movs	r3, #25
    201e:	712b      	strb	r3, [r5, #4]
		if (chan_sel) {
    2020:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		link = rx->link;
    2022:	f8d5 9000 	ldr.w	r9, [r5]
		if (chan_sel) {
    2026:	2b00      	cmp	r3, #0
    2028:	f040 80b7 	bne.w	219a <ull_slave_setup+0x3b2>
			cs->csa = 0x00;
    202c:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    2030:	772b      	strb	r3, [r5, #28]
	ll_rx_put(link, rx);
    2032:	4629      	mov	r1, r5
    2034:	4648      	mov	r0, r9
    2036:	f00e fd1f 	bl	10a78 <ll_rx_put>
	ll_rx_sched();
    203a:	f00e fd27 	bl	10a8c <ll_rx_sched>
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    203e:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
    2042:	2101      	movs	r1, #1
    2044:	f000 0007 	and.w	r0, r0, #7
    2048:	f015 fd72 	bl	17b30 <lll_radio_rx_ready_delay_get>
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    204c:	4a5f      	ldr	r2, [pc, #380]	; (21cc <ull_slave_setup+0x3e4>)
	conn->evt.ticks_active_to_start = 0U;
    204e:	2500      	movs	r5, #0
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    2050:	4681      	mov	r9, r0
	conn->evt.ticks_xtal_to_start =
    2052:	2331      	movs	r3, #49	; 0x31
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    2054:	f200 4052 	addw	r0, r0, #1106	; 0x452
    2058:	fba0 0102 	umull	r0, r1, r0, r2
	conn->evt.ticks_xtal_to_start =
    205c:	f8c8 3000 	str.w	r3, [r8]
	conn->evt.ticks_preempt_to_start =
    2060:	e9c8 5501 	strd	r5, r5, [r8, #4]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    2064:	a356      	add	r3, pc, #344	; (adr r3, 21c0 <ull_slave_setup+0x3d8>)
    2066:	e9d3 2300 	ldrd	r2, r3, [r3]
    206a:	f7fe fce7 	bl	a3c <__aeabi_uldivmod>
	conn_offset_us = ftr->radio_end_us;
    206e:	68f3      	ldr	r3, [r6, #12]
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    2070:	990b      	ldr	r1, [sp, #44]	; 0x2c
	conn_interval_us -= lll->slave.window_widening_periodic_us;
    2072:	6a64      	ldr	r4, [r4, #36]	; 0x24
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    2074:	f240 42e2 	movw	r2, #1250	; 0x4e2
    2078:	fb02 3301 	mla	r3, r2, r1, r3
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    207c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn_offset_us -= EVENT_JITTER_US;
    2080:	f203 3386 	addw	r3, r3, #902	; 0x386
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    2084:	462a      	mov	r2, r5
    2086:	2102      	movs	r1, #2
	conn->evt.ticks_slot =
    2088:	f8c8 000c 	str.w	r0, [r8, #12]
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    208c:	2001      	movs	r0, #1
	conn_offset_us -= ready_delay_us;
    208e:	eba3 0909 	sub.w	r9, r3, r9
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    2092:	f00a fe7d 	bl	cd90 <mayfly_enable>
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
    2096:	4658      	mov	r0, fp
    2098:	f00f fb2c 	bl	116f4 <ull_adv_handle_get>
    209c:	1c82      	adds	r2, r0, #2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    209e:	4b4c      	ldr	r3, [pc, #304]	; (21d0 <ull_slave_setup+0x3e8>)
    20a0:	f8cd b000 	str.w	fp, [sp]
    20a4:	b2d2      	uxtb	r2, r2
    20a6:	4628      	mov	r0, r5
    20a8:	2101      	movs	r1, #1
    20aa:	f00c f9ab 	bl	e404 <ticker_stop>
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void ticker_op_stop_adv_cb(uint32_t status, void *param)
{
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    20ae:	2801      	cmp	r0, #1
	conn_interval_us -= lll->slave.window_widening_periodic_us;
    20b0:	eba7 0404 	sub.w	r4, r7, r4
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    20b4:	d07c      	beq.n	21b0 <ull_slave_setup+0x3c8>
	if (adv->lll.is_hdcd) {
    20b6:	f89b 3024 	ldrb.w	r3, [fp, #36]	; 0x24
    20ba:	07db      	lsls	r3, r3, #31
    20bc:	d465      	bmi.n	218a <ull_slave_setup+0x3a2>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    20be:	4640      	mov	r0, r8
    20c0:	f010 f950 	bl	12364 <ll_conn_handle_get>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    20c4:	f8df b104 	ldr.w	fp, [pc, #260]	; 21cc <ull_slave_setup+0x3e4>
    20c8:	fba4 450b 	umull	r4, r5, r4, fp
    20cc:	a33c      	add	r3, pc, #240	; (adr r3, 21c0 <ull_slave_setup+0x3d8>)
    20ce:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    20d2:	4607      	mov	r7, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    20d4:	4629      	mov	r1, r5
    20d6:	4620      	mov	r0, r4
    20d8:	f7fe fcb0 	bl	a3c <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(conn_interval_us),
    20dc:	4a3d      	ldr	r2, [pc, #244]	; (21d4 <ull_slave_setup+0x3ec>)
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    20de:	f8cd 8018 	str.w	r8, [sp, #24]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    20e2:	f020 4a7f 	bic.w	sl, r0, #4278190080	; 0xff000000
    20e6:	fbaa 2302 	umull	r2, r3, sl, r2
    20ea:	2107      	movs	r1, #7
    20ec:	fb01 330a 	mla	r3, r1, sl, r3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    20f0:	f240 11a1 	movw	r1, #417	; 0x1a1
    20f4:	68b6      	ldr	r6, [r6, #8]
    20f6:	9108      	str	r1, [sp, #32]
    20f8:	4937      	ldr	r1, [pc, #220]	; (21d8 <ull_slave_setup+0x3f0>)
    20fa:	9107      	str	r1, [sp, #28]
    20fc:	4937      	ldr	r1, [pc, #220]	; (21dc <ull_slave_setup+0x3f4>)
    20fe:	9105      	str	r1, [sp, #20]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    2100:	1aa0      	subs	r0, r4, r2
    2102:	eb65 0103 	sbc.w	r1, r5, r3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2106:	f8d8 300c 	ldr.w	r3, [r8, #12]
    210a:	9304      	str	r3, [sp, #16]
    210c:	2400      	movs	r4, #0
				     HAL_TICKER_REMAINDER(conn_interval_us),
    210e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2112:	2300      	movs	r3, #0
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2114:	9403      	str	r4, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    2116:	f7fe fc91 	bl	a3c <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    211a:	a329      	add	r3, pc, #164	; (adr r3, 21c0 <ull_slave_setup+0x3d8>)
    211c:	e9d3 2300 	ldrd	r2, r3, [r3]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    2120:	4605      	mov	r5, r0
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    2122:	fba9 010b 	umull	r0, r1, r9, fp
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2126:	e9cd a501 	strd	sl, r5, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    212a:	f7fe fc87 	bl	a3c <__aeabi_uldivmod>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    212e:	3703      	adds	r7, #3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2130:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2134:	b2ff      	uxtb	r7, r7
    2136:	3e31      	subs	r6, #49	; 0x31
    2138:	4633      	mov	r3, r6
    213a:	9000      	str	r0, [sp, #0]
    213c:	463a      	mov	r2, r7
    213e:	4620      	mov	r0, r4
    2140:	2101      	movs	r1, #1
    2142:	f00c f8d7 	bl	e2f4 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    2146:	f030 0302 	bics.w	r3, r0, #2
    214a:	d00c      	beq.n	2166 <ull_slave_setup+0x37e>
    214c:	4a24      	ldr	r2, [pc, #144]	; (21e0 <ull_slave_setup+0x3f8>)
    214e:	4925      	ldr	r1, [pc, #148]	; (21e4 <ull_slave_setup+0x3fc>)
    2150:	4825      	ldr	r0, [pc, #148]	; (21e8 <ull_slave_setup+0x400>)
    2152:	f44f 73d1 	mov.w	r3, #418	; 0x1a2
    2156:	f01c f915 	bl	1e384 <printk>
    215a:	4040      	eors	r0, r0
    215c:	f380 8811 	msr	BASEPRI, r0
    2160:	f04f 0003 	mov.w	r0, #3
    2164:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    2166:	2201      	movs	r2, #1
    2168:	4610      	mov	r0, r2
    216a:	2102      	movs	r1, #2
    216c:	f00a fe10 	bl	cd90 <mayfly_enable>
}
    2170:	b015      	add	sp, #84	; 0x54
    2172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    2176:	f8c5 002b 	str.w	r0, [r5, #43]	; 0x2b
    217a:	8090      	strh	r0, [r2, #4]
    217c:	e722      	b.n	1fc4 <ull_slave_setup+0x1dc>
    217e:	2100      	movs	r1, #0
    2180:	f8c5 1025 	str.w	r1, [r5, #37]	; 0x25
    2184:	f8a5 1029 	strh.w	r1, [r5, #41]	; 0x29
    2188:	e727      	b.n	1fda <ull_slave_setup+0x1f2>
		ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    218a:	2300      	movs	r3, #0
    218c:	2201      	movs	r2, #1
    218e:	9300      	str	r3, [sp, #0]
    2190:	4618      	mov	r0, r3
    2192:	4611      	mov	r1, r2
    2194:	f00c f936 	bl	e404 <ticker_stop>
    2198:	e791      	b.n	20be <ull_slave_setup+0x2d6>
			lll->data_chan_sel = 1;
    219a:	7f63      	ldrb	r3, [r4, #29]
    219c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    21a0:	7763      	strb	r3, [r4, #29]
			lll->data_chan_id = lll_chan_id(lll->access_addr);
    21a2:	1d20      	adds	r0, r4, #4
    21a4:	f014 fa7c 	bl	166a0 <lll_chan_id>
			cs->csa = 0x01;
    21a8:	2301      	movs	r3, #1
			lll->data_chan_id = lll_chan_id(lll->access_addr);
    21aa:	83e0      	strh	r0, [r4, #30]
			cs->csa = 0x01;
    21ac:	772b      	strb	r3, [r5, #28]
    21ae:	e740      	b.n	2032 <ull_slave_setup+0x24a>
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    21b0:	f00e fd18 	bl	10be4 <ull_disable_mark_get>
    21b4:	4583      	cmp	fp, r0
    21b6:	f43f af7e 	beq.w	20b6 <ull_slave_setup+0x2ce>
    21ba:	f014 f92b 	bl	16414 <ticker_op_stop_adv_cb.part.0>
    21be:	e77a      	b.n	20b6 <ull_slave_setup+0x2ce>
    21c0:	1afd498d 	.word	0x1afd498d
    21c4:	00000007 	.word	0x00000007
    21c8:	01c9c37f 	.word	0x01c9c37f
    21cc:	3b9aca00 	.word	0x3b9aca00
    21d0:	00016441 	.word	0x00016441
    21d4:	1afd498d 	.word	0x1afd498d
    21d8:	000163e5 	.word	0x000163e5
    21dc:	0001645d 	.word	0x0001645d
    21e0:	00024a9c 	.word	0x00024a9c
    21e4:	00024954 	.word	0x00024954
    21e8:	00024334 	.word	0x00024334
    21ec:	431bde83 	.word	0x431bde83
    21f0:	026259ff 	.word	0x026259ff
    21f4:	00000000 	.word	0x00000000

000021f8 <SX1276SetChannel>:
    return SX1276.Settings.State;
}

void SX1276SetChannel( uint32_t freq )
{
    SX1276.Settings.Channel = freq;
    21f8:	4b11      	ldr	r3, [pc, #68]	; (2240 <SX1276SetChannel+0x48>)
{
    21fa:	b510      	push	{r4, lr}
    SX1276.Settings.Channel = freq;
    21fc:	f8c3 00e4 	str.w	r0, [r3, #228]	; 0xe4
    freq = ( uint32_t )( ( double )freq / ( double )FREQ_STEP );
    2200:	f7fe f8c0 	bl	384 <__aeabi_ui2d>
    2204:	a30c      	add	r3, pc, #48	; (adr r3, 2238 <SX1276SetChannel+0x40>)
    2206:	e9d3 2300 	ldrd	r2, r3, [r3]
    220a:	f7fe fa5f 	bl	6cc <__aeabi_ddiv>
    220e:	f7fe fbf5 	bl	9fc <__aeabi_d2uiz>
    2212:	4604      	mov	r4, r0
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freq >> 16 ) & 0xFF ) );
    2214:	f3c0 4107 	ubfx	r1, r0, #16, #8
    2218:	2006      	movs	r0, #6
    221a:	f020 fb9a 	bl	22952 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( freq >> 8 ) & 0xFF ) );
    221e:	f3c4 2107 	ubfx	r1, r4, #8, #8
    2222:	2007      	movs	r0, #7
    2224:	f020 fb95 	bl	22952 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( freq & 0xFF ) );
    2228:	b2e1      	uxtb	r1, r4
    222a:	2008      	movs	r0, #8
}
    222c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SX1276Write( REG_FRFLSB, ( uint8_t )( freq & 0xFF ) );
    2230:	f020 bb8f 	b.w	22952 <SX1276Write>
    2234:	f3af 8000 	nop.w
    2238:	00000000 	.word	0x00000000
    223c:	404e8480 	.word	0x404e8480
    2240:	20002984 	.word	0x20002984
    2244:	00000000 	.word	0x00000000

00002248 <RxChainCalibration>:
 * Performs the Rx chain calibration for LF and HF bands
 * \remark Must be called just after the reset so all registers are at their
 *         default values
 */
static void RxChainCalibration( void )
{
    2248:	b570      	push	{r4, r5, r6, lr}
    uint8_t regPaConfigInitVal;
    uint32_t initialFreq;

    // Save context
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
    224a:	2009      	movs	r0, #9
    224c:	f020 fb8c 	bl	22968 <SX1276Read>
    2250:	4605      	mov	r5, r0
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
    2252:	2006      	movs	r0, #6
    2254:	f020 fb88 	bl	22968 <SX1276Read>
    2258:	4606      	mov	r6, r0
                              ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
    225a:	2007      	movs	r0, #7
    225c:	f020 fb84 	bl	22968 <SX1276Read>
    2260:	0204      	lsls	r4, r0, #8
                              ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) * ( double )FREQ_STEP;
    2262:	2008      	movs	r0, #8
    2264:	f020 fb80 	bl	22968 <SX1276Read>
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
    2268:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
    226c:	4320      	orrs	r0, r4
    226e:	f7fe f889 	bl	384 <__aeabi_ui2d>
                              ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) * ( double )FREQ_STEP;
    2272:	a31b      	add	r3, pc, #108	; (adr r3, 22e0 <RxChainCalibration+0x98>)
    2274:	e9d3 2300 	ldrd	r2, r3, [r3]
    2278:	f7fe f8fe 	bl	478 <__aeabi_dmul>
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
    227c:	f7fe fbbe 	bl	9fc <__aeabi_d2uiz>

    // Cut the PA just in case, RFO output, power = -1 dBm
    SX1276Write( REG_PACONFIG, 0x00 );
    2280:	2100      	movs	r1, #0
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
    2282:	4604      	mov	r4, r0
    SX1276Write( REG_PACONFIG, 0x00 );
    2284:	2009      	movs	r0, #9
    2286:	f020 fb64 	bl	22952 <SX1276Write>

    // Launch Rx chain calibration for LF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
    228a:	203b      	movs	r0, #59	; 0x3b
    228c:	f020 fb6c 	bl	22968 <SX1276Read>
    2290:	f040 0140 	orr.w	r1, r0, #64	; 0x40
    2294:	b2c9      	uxtb	r1, r1
    2296:	203b      	movs	r0, #59	; 0x3b
    2298:	f020 fb5b 	bl	22952 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
    229c:	203b      	movs	r0, #59	; 0x3b
    229e:	f020 fb63 	bl	22968 <SX1276Read>
    22a2:	0682      	lsls	r2, r0, #26
    22a4:	d4fa      	bmi.n	229c <RxChainCalibration+0x54>
    {
    }

    // Sets a Frequency in HF band
    SX1276SetChannel( 868000000 );
    22a6:	4810      	ldr	r0, [pc, #64]	; (22e8 <RxChainCalibration+0xa0>)
    22a8:	f7ff ffa6 	bl	21f8 <SX1276SetChannel>

    // Launch Rx chain calibration for HF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
    22ac:	203b      	movs	r0, #59	; 0x3b
    22ae:	f020 fb5b 	bl	22968 <SX1276Read>
    22b2:	f040 0140 	orr.w	r1, r0, #64	; 0x40
    22b6:	b2c9      	uxtb	r1, r1
    22b8:	203b      	movs	r0, #59	; 0x3b
    22ba:	f020 fb4a 	bl	22952 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
    22be:	203b      	movs	r0, #59	; 0x3b
    22c0:	f020 fb52 	bl	22968 <SX1276Read>
    22c4:	0683      	lsls	r3, r0, #26
    22c6:	d4fa      	bmi.n	22be <RxChainCalibration+0x76>
    {
    }

    // Restore context
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
    22c8:	4629      	mov	r1, r5
    22ca:	2009      	movs	r0, #9
    22cc:	f020 fb41 	bl	22952 <SX1276Write>
    SX1276SetChannel( initialFreq );
    22d0:	4620      	mov	r0, r4
}
    22d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    SX1276SetChannel( initialFreq );
    22d6:	f7ff bf8f 	b.w	21f8 <SX1276SetChannel>
    22da:	bf00      	nop
    22dc:	f3af 8000 	nop.w
    22e0:	00000000 	.word	0x00000000
    22e4:	404e8480 	.word	0x404e8480
    22e8:	33bca100 	.word	0x33bca100
    22ec:	00000000 	.word	0x00000000

000022f0 <SX1276GetTimeOnAir>:
        break;
    }
}

uint32_t SX1276GetTimeOnAir( RadioModems_t modem, uint8_t pktLen )
{
    22f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    22f4:	4688      	mov	r8, r1
    uint32_t airTime = 0;

    switch( modem )
    22f6:	b120      	cbz	r0, 2302 <SX1276GetTimeOnAir+0x12>
    22f8:	2801      	cmp	r0, #1
    22fa:	d055      	beq.n	23a8 <SX1276GetTimeOnAir+0xb8>
    22fc:	2000      	movs	r0, #0
            airTime = floor( tOnAir * 1000 + 0.999 );
        }
        break;
    }
    return airTime;
}
    22fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
    2302:	4c71      	ldr	r4, [pc, #452]	; (24c8 <SX1276GetTimeOnAir+0x1d8>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
    2304:	2027      	movs	r0, #39	; 0x27
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
    2306:	f8b4 50fc 	ldrh.w	r5, [r4, #252]	; 0xfc
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
    230a:	f020 fb2d 	bl	22968 <SX1276Read>
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
    230e:	3501      	adds	r5, #1
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
    2310:	f020 00f8 	bic.w	r0, r0, #248	; 0xf8
    2314:	4428      	add	r0, r5
    2316:	f7fe f845 	bl	3a4 <__aeabi_i2d>
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
    231a:	f894 30fe 	ldrb.w	r3, [r4, #254]	; 0xfe
    231e:	2200      	movs	r2, #0
    2320:	2b00      	cmp	r3, #0
    2322:	d13c      	bne.n	239e <SX1276GetTimeOnAir+0xae>
    2324:	4b69      	ldr	r3, [pc, #420]	; (24cc <SX1276GetTimeOnAir+0x1dc>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
    2326:	f7fd fef1 	bl	10c <__adddf3>
    232a:	4606      	mov	r6, r0
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
    232c:	2030      	movs	r0, #48	; 0x30
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
    232e:	460f      	mov	r7, r1
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
    2330:	f020 fb1a 	bl	22968 <SX1276Read>
    2334:	f030 03f9 	bics.w	r3, r0, #249	; 0xf9
    2338:	bf14      	ite	ne
    233a:	4b64      	ldrne	r3, [pc, #400]	; (24cc <SX1276GetTimeOnAir+0x1dc>)
    233c:	2300      	moveq	r3, #0
    233e:	2200      	movs	r2, #0
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
    2340:	4630      	mov	r0, r6
    2342:	4639      	mov	r1, r7
    2344:	f7fd fee2 	bl	10c <__adddf3>
    2348:	4606      	mov	r6, r0
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
    234a:	4640      	mov	r0, r8
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
    234c:	460f      	mov	r7, r1
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
    234e:	f7fe f829 	bl	3a4 <__aeabi_i2d>
    2352:	4602      	mov	r2, r0
    2354:	460b      	mov	r3, r1
    2356:	4630      	mov	r0, r6
    2358:	4639      	mov	r1, r7
    235a:	f7fd fed7 	bl	10c <__adddf3>
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
    235e:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
    2362:	2200      	movs	r2, #0
    2364:	b9eb      	cbnz	r3, 23a2 <SX1276GetTimeOnAir+0xb2>
    2366:	2300      	movs	r3, #0
                                     pktLen +
    2368:	f7fd fed0 	bl	10c <__adddf3>
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
    236c:	4b58      	ldr	r3, [pc, #352]	; (24d0 <SX1276GetTimeOnAir+0x1e0>)
    236e:	2200      	movs	r2, #0
    2370:	f7fe f882 	bl	478 <__aeabi_dmul>
    2374:	4606      	mov	r6, r0
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
    2376:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
    237a:	460f      	mov	r7, r1
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
    237c:	f7fe f802 	bl	384 <__aeabi_ui2d>
    2380:	4602      	mov	r2, r0
    2382:	460b      	mov	r3, r1
    2384:	4630      	mov	r0, r6
    2386:	4639      	mov	r1, r7
    2388:	f7fe f9a0 	bl	6cc <__aeabi_ddiv>
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
    238c:	4b51      	ldr	r3, [pc, #324]	; (24d4 <SX1276GetTimeOnAir+0x1e4>)
    238e:	2200      	movs	r2, #0
    2390:	f7fe f872 	bl	478 <__aeabi_dmul>
    2394:	f01b ff1e 	bl	1e1d4 <round>
            airTime = floor( tOnAir * 1000 + 0.999 );
    2398:	f7fe fb30 	bl	9fc <__aeabi_d2uiz>
    return airTime;
    239c:	e7af      	b.n	22fe <SX1276GetTimeOnAir+0xe>
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
    239e:	2300      	movs	r3, #0
    23a0:	e7c1      	b.n	2326 <SX1276GetTimeOnAir+0x36>
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
    23a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    23a6:	e7df      	b.n	2368 <SX1276GetTimeOnAir+0x78>
            switch( SX1276.Settings.LoRa.Bandwidth )
    23a8:	4a47      	ldr	r2, [pc, #284]	; (24c8 <SX1276GetTimeOnAir+0x1d8>)
    23aa:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    23ae:	3b07      	subs	r3, #7
    23b0:	2b02      	cmp	r3, #2
    23b2:	4692      	mov	sl, r2
    23b4:	d87f      	bhi.n	24b6 <SX1276GetTimeOnAir+0x1c6>
    23b6:	4a48      	ldr	r2, [pc, #288]	; (24d8 <SX1276GetTimeOnAir+0x1e8>)
    23b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    23bc:	e9d3 4500 	ldrd	r4, r5, [r3]
            double rs = bw / ( 1 << SX1276.Settings.LoRa.Datarate );
    23c0:	f8da b124 	ldr.w	fp, [sl, #292]	; 0x124
    23c4:	2001      	movs	r0, #1
    23c6:	fa00 f00b 	lsl.w	r0, r0, fp
    23ca:	f7fd ffeb 	bl	3a4 <__aeabi_i2d>
    23ce:	4602      	mov	r2, r0
    23d0:	460b      	mov	r3, r1
    23d2:	4620      	mov	r0, r4
    23d4:	4629      	mov	r1, r5
    23d6:	f7fe f979 	bl	6cc <__aeabi_ddiv>
    23da:	4602      	mov	r2, r0
    23dc:	460b      	mov	r3, r1
            double ts = 1 / rs;
    23de:	2000      	movs	r0, #0
    23e0:	493a      	ldr	r1, [pc, #232]	; (24cc <SX1276GetTimeOnAir+0x1dc>)
    23e2:	f7fe f973 	bl	6cc <__aeabi_ddiv>
    23e6:	4604      	mov	r4, r0
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
    23e8:	f8ba 012a 	ldrh.w	r0, [sl, #298]	; 0x12a
            double ts = 1 / rs;
    23ec:	460d      	mov	r5, r1
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
    23ee:	f7fd ffd9 	bl	3a4 <__aeabi_i2d>
    23f2:	4b3a      	ldr	r3, [pc, #232]	; (24dc <SX1276GetTimeOnAir+0x1ec>)
    23f4:	2200      	movs	r2, #0
    23f6:	f7fd fe89 	bl	10c <__adddf3>
    23fa:	4622      	mov	r2, r4
    23fc:	462b      	mov	r3, r5
    23fe:	f7fe f83b 	bl	478 <__aeabi_dmul>
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
    2402:	f89a 212c 	ldrb.w	r2, [sl, #300]	; 0x12c
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
    2406:	f89a 312e 	ldrb.w	r3, [sl, #302]	; 0x12e
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
    240a:	460f      	mov	r7, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
    240c:	ea4f 018b 	mov.w	r1, fp, lsl #2
    2410:	f1c1 011c 	rsb	r1, r1, #28
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
    2414:	2a00      	cmp	r2, #0
    2416:	eb01 1303 	add.w	r3, r1, r3, lsl #4
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
    241a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
    241e:	4606      	mov	r6, r0
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
    2420:	bf14      	ite	ne
    2422:	2014      	movne	r0, #20
    2424:	2000      	moveq	r0, #0
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
    2426:	1a18      	subs	r0, r3, r0
    2428:	f7fd ffac 	bl	384 <__aeabi_ui2d>
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
    242c:	f89a 3128 	ldrb.w	r3, [sl, #296]	; 0x128
    2430:	2b00      	cmp	r3, #0
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
    2432:	4680      	mov	r8, r0
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
    2434:	bf14      	ite	ne
    2436:	2002      	movne	r0, #2
    2438:	2000      	moveq	r0, #0
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
    243a:	ebab 0000 	sub.w	r0, fp, r0
    243e:	0080      	lsls	r0, r0, #2
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
    2440:	4689      	mov	r9, r1
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
    2442:	f7fd ff9f 	bl	384 <__aeabi_ui2d>
    2446:	4602      	mov	r2, r0
    2448:	460b      	mov	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
    244a:	4640      	mov	r0, r8
    244c:	4649      	mov	r1, r9
    244e:	f7fe f93d 	bl	6cc <__aeabi_ddiv>
    2452:	f000 fb61 	bl	2b18 <ceil>
    2456:	4680      	mov	r8, r0
                                 ( SX1276.Settings.LoRa.Coderate + 4 );
    2458:	f89a 0129 	ldrb.w	r0, [sl, #297]	; 0x129
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
    245c:	4689      	mov	r9, r1
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
    245e:	3004      	adds	r0, #4
    2460:	f7fd ffa0 	bl	3a4 <__aeabi_i2d>
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
    2464:	4642      	mov	r2, r8
    2466:	464b      	mov	r3, r9
    2468:	f7fe f806 	bl	478 <__aeabi_dmul>
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
    246c:	2200      	movs	r2, #0
    246e:	2300      	movs	r3, #0
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
    2470:	4680      	mov	r8, r0
    2472:	4689      	mov	r9, r1
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
    2474:	f7fe fa90 	bl	998 <__aeabi_dcmpgt>
    2478:	b918      	cbnz	r0, 2482 <SX1276GetTimeOnAir+0x192>
    247a:	f04f 0800 	mov.w	r8, #0
    247e:	f04f 0900 	mov.w	r9, #0
    2482:	4b13      	ldr	r3, [pc, #76]	; (24d0 <SX1276GetTimeOnAir+0x1e0>)
    2484:	2200      	movs	r2, #0
    2486:	4640      	mov	r0, r8
    2488:	4649      	mov	r1, r9
    248a:	f7fd fe3f 	bl	10c <__adddf3>
            double tPayload = nPayload * ts;
    248e:	4622      	mov	r2, r4
    2490:	462b      	mov	r3, r5
    2492:	f7fd fff1 	bl	478 <__aeabi_dmul>
            double tOnAir = tPreamble + tPayload;
    2496:	4632      	mov	r2, r6
    2498:	463b      	mov	r3, r7
    249a:	f7fd fe37 	bl	10c <__adddf3>
            airTime = floor( tOnAir * 1000 + 0.999 );
    249e:	4b0d      	ldr	r3, [pc, #52]	; (24d4 <SX1276GetTimeOnAir+0x1e4>)
    24a0:	2200      	movs	r2, #0
    24a2:	f7fd ffe9 	bl	478 <__aeabi_dmul>
    24a6:	a306      	add	r3, pc, #24	; (adr r3, 24c0 <SX1276GetTimeOnAir+0x1d0>)
    24a8:	e9d3 2300 	ldrd	r2, r3, [r3]
    24ac:	f7fd fe2e 	bl	10c <__adddf3>
    24b0:	f000 fc1a 	bl	2ce8 <floor>
    24b4:	e770      	b.n	2398 <SX1276GetTimeOnAir+0xa8>
            switch( SX1276.Settings.LoRa.Bandwidth )
    24b6:	2400      	movs	r4, #0
    24b8:	2500      	movs	r5, #0
    24ba:	e781      	b.n	23c0 <SX1276GetTimeOnAir+0xd0>
    24bc:	f3af 8000 	nop.w
    24c0:	d916872b 	.word	0xd916872b
    24c4:	3feff7ce 	.word	0x3feff7ce
    24c8:	20002984 	.word	0x20002984
    24cc:	3ff00000 	.word	0x3ff00000
    24d0:	40200000 	.word	0x40200000
    24d4:	408f4000 	.word	0x408f4000
    24d8:	00023bf8 	.word	0x00023bf8
    24dc:	40110000 	.word	0x40110000

000024e0 <SX1276SetRxConfig>:
{
    24e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    24e4:	b089      	sub	sp, #36	; 0x24
    24e6:	4699      	mov	r9, r3
    24e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    24ea:	9304      	str	r3, [sp, #16]
    24ec:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
    24f0:	9301      	str	r3, [sp, #4]
    24f2:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
    24f6:	9302      	str	r3, [sp, #8]
    24f8:	4683      	mov	fp, r0
    24fa:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
    24fe:	9305      	str	r3, [sp, #20]
    2500:	460c      	mov	r4, r1
    2502:	4690      	mov	r8, r2
    2504:	f89d 1060 	ldrb.w	r1, [sp, #96]	; 0x60
    2508:	f89d 2068 	ldrb.w	r2, [sp, #104]	; 0x68
    250c:	9206      	str	r2, [sp, #24]
    250e:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
    2512:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
    2516:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
    251a:	f89d a05c 	ldrb.w	sl, [sp, #92]	; 0x5c
    251e:	9107      	str	r1, [sp, #28]
    SX1276SetModem( modem );
    2520:	f019 f820 	bl	1b564 <SX1276SetModem>
    switch( modem )
    2524:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
    2528:	f1bb 0f00 	cmp.w	fp, #0
    252c:	d007      	beq.n	253e <SX1276SetRxConfig+0x5e>
    252e:	f1bb 0f01 	cmp.w	fp, #1
    2532:	9907      	ldr	r1, [sp, #28]
    2534:	f000 8089 	beq.w	264a <SX1276SetRxConfig+0x16a>
}
    2538:	b009      	add	sp, #36	; 0x24
    253a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
    253e:	f8df b29c 	ldr.w	fp, [pc, #668]	; 27dc <SX1276SetRxConfig+0x2fc>
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
    2542:	9904      	ldr	r1, [sp, #16]
            SX1276.Settings.Fsk.Datarate = datarate;
    2544:	f8cb 80f8 	str.w	r8, [fp, #248]	; 0xf8
            SX1276.Settings.Fsk.IqInverted = iqInverted;
    2548:	f88b 2101 	strb.w	r2, [fp, #257]	; 0x101
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
    254c:	f88b 3102 	strb.w	r3, [fp, #258]	; 0x102
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
    2550:	4640      	mov	r0, r8
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
    2552:	f8cb 40f0 	str.w	r4, [fp, #240]	; 0xf0
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
    2556:	f8cb 10f4 	str.w	r1, [fp, #244]	; 0xf4
            SX1276.Settings.Fsk.FixLen = fixLen;
    255a:	f88b 50fe 	strb.w	r5, [fp, #254]	; 0xfe
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
    255e:	f88b 70ff 	strb.w	r7, [fp, #255]	; 0xff
            SX1276.Settings.Fsk.CrcOn = crcOn;
    2562:	f88b a100 	strb.w	sl, [fp, #256]	; 0x100
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
    2566:	f8ab 60fc 	strh.w	r6, [fp, #252]	; 0xfc
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
    256a:	f7fd ff0b 	bl	384 <__aeabi_ui2d>
    256e:	4680      	mov	r8, r0
    2570:	4602      	mov	r2, r0
    2572:	460b      	mov	r3, r1
    2574:	4689      	mov	r9, r1
    2576:	2000      	movs	r0, #0
    2578:	4995      	ldr	r1, [pc, #596]	; (27d0 <SX1276SetRxConfig+0x2f0>)
    257a:	f7fe f8a7 	bl	6cc <__aeabi_ddiv>
    257e:	4b95      	ldr	r3, [pc, #596]	; (27d4 <SX1276SetRxConfig+0x2f4>)
    2580:	2200      	movs	r2, #0
    2582:	f7fd ff79 	bl	478 <__aeabi_dmul>
    2586:	e9cd 0102 	strd	r0, r1, [sp, #8]
    258a:	9801      	ldr	r0, [sp, #4]
    258c:	f7fd ff0a 	bl	3a4 <__aeabi_i2d>
    2590:	4602      	mov	r2, r0
    2592:	460b      	mov	r3, r1
    2594:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    2598:	f7fd ff6e 	bl	478 <__aeabi_dmul>
    259c:	4b8e      	ldr	r3, [pc, #568]	; (27d8 <SX1276SetRxConfig+0x2f8>)
    259e:	2200      	movs	r2, #0
    25a0:	f7fd ff6a 	bl	478 <__aeabi_dmul>
    25a4:	f7fe fa2a 	bl	9fc <__aeabi_d2uiz>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
    25a8:	4642      	mov	r2, r8
    25aa:	464b      	mov	r3, r9
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
    25ac:	f8cb 0108 	str.w	r0, [fp, #264]	; 0x108
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
    25b0:	a185      	add	r1, pc, #532	; (adr r1, 27c8 <SX1276SetRxConfig+0x2e8>)
    25b2:	e9d1 0100 	ldrd	r0, r1, [r1]
    25b6:	f7fe f889 	bl	6cc <__aeabi_ddiv>
    25ba:	f7fe fa1f 	bl	9fc <__aeabi_d2uiz>
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
    25be:	f3c0 2107 	ubfx	r1, r0, #8, #8
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
    25c2:	fa1f f880 	uxth.w	r8, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
    25c6:	2002      	movs	r0, #2
    25c8:	f020 f9c3 	bl	22952 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
    25cc:	fa5f f188 	uxtb.w	r1, r8
    25d0:	2003      	movs	r0, #3
    25d2:	f020 f9be 	bl	22952 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
    25d6:	4620      	mov	r0, r4
    25d8:	f018 fdda 	bl	1b190 <GetFskBandwidthRegValue>
    25dc:	4601      	mov	r1, r0
    25de:	2012      	movs	r0, #18
    25e0:	f020 f9b7 	bl	22952 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
    25e4:	9804      	ldr	r0, [sp, #16]
    25e6:	f018 fdd3 	bl	1b190 <GetFskBandwidthRegValue>
    25ea:	4601      	mov	r1, r0
    25ec:	2013      	movs	r0, #19
    25ee:	f020 f9b0 	bl	22952 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
    25f2:	0a31      	lsrs	r1, r6, #8
    25f4:	2025      	movs	r0, #37	; 0x25
    25f6:	f020 f9ac 	bl	22952 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
    25fa:	b2f1      	uxtb	r1, r6
    25fc:	2026      	movs	r0, #38	; 0x26
    25fe:	f020 f9a8 	bl	22952 <SX1276Write>
            if( fixLen == 1 )
    2602:	b305      	cbz	r5, 2646 <SX1276SetRxConfig+0x166>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
    2604:	4639      	mov	r1, r7
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
    2606:	2032      	movs	r0, #50	; 0x32
    2608:	f020 f9a3 	bl	22952 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
    260c:	2030      	movs	r0, #48	; 0x30
    260e:	f020 f9ab 	bl	22968 <SX1276Read>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
    2612:	2d00      	cmp	r5, #0
                           RF_PACKETCONFIG1_CRC_MASK &
    2614:	f000 016f 	and.w	r1, r0, #111	; 0x6f
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
    2618:	ea41 110a 	orr.w	r1, r1, sl, lsl #4
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
    261c:	bf14      	ite	ne
    261e:	2000      	movne	r0, #0
    2620:	f06f 007f 	mvneq.w	r0, #127	; 0x7f
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
    2624:	4301      	orrs	r1, r0
            SX1276Write( REG_PACKETCONFIG1,
    2626:	b2c9      	uxtb	r1, r1
    2628:	2030      	movs	r0, #48	; 0x30
    262a:	f020 f992 	bl	22952 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
    262e:	2031      	movs	r0, #49	; 0x31
    2630:	f020 f99a 	bl	22968 <SX1276Read>
    2634:	f040 0140 	orr.w	r1, r0, #64	; 0x40
    2638:	b2c9      	uxtb	r1, r1
    263a:	2031      	movs	r0, #49	; 0x31
}
    263c:	b009      	add	sp, #36	; 0x24
    263e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    2642:	f020 b986 	b.w	22952 <SX1276Write>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
    2646:	21ff      	movs	r1, #255	; 0xff
    2648:	e7dd      	b.n	2606 <SX1276SetRxConfig+0x126>
            if( bandwidth > 2 )
    264a:	2c02      	cmp	r4, #2
    264c:	d900      	bls.n	2650 <SX1276SetRxConfig+0x170>
                while( 1 );
    264e:	e7fe      	b.n	264e <SX1276SetRxConfig+0x16e>
            bandwidth += 7;
    2650:	f104 0b07 	add.w	fp, r4, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
    2654:	4c61      	ldr	r4, [pc, #388]	; (27dc <SX1276SetRxConfig+0x2fc>)
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
    2656:	f884 112f 	strb.w	r1, [r4, #303]	; 0x12f
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
    265a:	9902      	ldr	r1, [sp, #8]
    265c:	f884 1130 	strb.w	r1, [r4, #304]	; 0x130
    2660:	4641      	mov	r1, r8
    2662:	2906      	cmp	r1, #6
    2664:	bf38      	it	cc
    2666:	2106      	movcc	r1, #6
    2668:	290c      	cmp	r1, #12
            SX1276.Settings.LoRa.IqInverted = iqInverted;
    266a:	f884 2131 	strb.w	r2, [r4, #305]	; 0x131
    266e:	460a      	mov	r2, r1
    2670:	bf28      	it	cs
    2672:	220c      	movcs	r2, #12
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    2674:	f1bb 0f07 	cmp.w	fp, #7
            SX1276.Settings.LoRa.Datarate = datarate;
    2678:	e9c4 b848 	strd	fp, r8, [r4, #288]	; 0x120
            SX1276.Settings.LoRa.Coderate = coderate;
    267c:	f884 9129 	strb.w	r9, [r4, #297]	; 0x129
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
    2680:	f8a4 612a 	strh.w	r6, [r4, #298]	; 0x12a
            SX1276.Settings.LoRa.FixLen = fixLen;
    2684:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
    2688:	f884 712d 	strb.w	r7, [r4, #301]	; 0x12d
            SX1276.Settings.LoRa.CrcOn = crcOn;
    268c:	f884 a12e 	strb.w	sl, [r4, #302]	; 0x12e
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
    2690:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    2694:	d178      	bne.n	2788 <SX1276SetRxConfig+0x2a8>
    2696:	f1a2 030b 	sub.w	r3, r2, #11
    269a:	2b01      	cmp	r3, #1
    269c:	bf8c      	ite	hi
    269e:	2300      	movhi	r3, #0
    26a0:	2301      	movls	r3, #1
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
    26a2:	201d      	movs	r0, #29
    26a4:	9204      	str	r2, [sp, #16]
    26a6:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    26aa:	f020 f95d 	bl	22968 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
    26ae:	ea45 0149 	orr.w	r1, r5, r9, lsl #1
    26b2:	ea41 110b 	orr.w	r1, r1, fp, lsl #4
            SX1276Write( REG_LR_MODEMCONFIG1,
    26b6:	b2c9      	uxtb	r1, r1
    26b8:	201d      	movs	r0, #29
    26ba:	f020 f94a 	bl	22952 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
    26be:	201e      	movs	r0, #30
    26c0:	f020 f952 	bl	22968 <SX1276Read>
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
    26c4:	9b01      	ldr	r3, [sp, #4]
            SX1276Write( REG_LR_MODEMCONFIG2,
    26c6:	9a04      	ldr	r2, [sp, #16]
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
    26c8:	f3c3 2101 	ubfx	r1, r3, #8, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
    26cc:	ea41 018a 	orr.w	r1, r1, sl, lsl #2
    26d0:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
    26d4:	f000 0008 	and.w	r0, r0, #8
            SX1276Write( REG_LR_MODEMCONFIG2,
    26d8:	4301      	orrs	r1, r0
    26da:	b2c9      	uxtb	r1, r1
    26dc:	201e      	movs	r0, #30
    26de:	f020 f938 	bl	22952 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
    26e2:	2026      	movs	r0, #38	; 0x26
    26e4:	f020 f940 	bl	22968 <SX1276Read>
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
    26e8:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
    26ec:	f020 0108 	bic.w	r1, r0, #8
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
    26f0:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
            SX1276Write( REG_LR_MODEMCONFIG3,
    26f4:	b2c9      	uxtb	r1, r1
    26f6:	2026      	movs	r0, #38	; 0x26
    26f8:	f020 f92b 	bl	22952 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
    26fc:	f89d 1004 	ldrb.w	r1, [sp, #4]
    2700:	201f      	movs	r0, #31
    2702:	f020 f926 	bl	22952 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
    2706:	0a31      	lsrs	r1, r6, #8
    2708:	2020      	movs	r0, #32
    270a:	f020 f922 	bl	22952 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
    270e:	b2f1      	uxtb	r1, r6
    2710:	2021      	movs	r0, #33	; 0x21
    2712:	f020 f91e 	bl	22952 <SX1276Write>
            if( fixLen == 1 )
    2716:	b11d      	cbz	r5, 2720 <SX1276SetRxConfig+0x240>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
    2718:	4639      	mov	r1, r7
    271a:	2022      	movs	r0, #34	; 0x22
    271c:	f020 f919 	bl	22952 <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
    2720:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
    2724:	b16b      	cbz	r3, 2742 <SX1276SetRxConfig+0x262>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
    2726:	2044      	movs	r0, #68	; 0x44
    2728:	f020 f91e 	bl	22968 <SX1276Read>
    272c:	f060 017f 	orn	r1, r0, #127	; 0x7f
    2730:	b2c9      	uxtb	r1, r1
    2732:	2044      	movs	r0, #68	; 0x44
    2734:	f020 f90d 	bl	22952 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
    2738:	f894 1130 	ldrb.w	r1, [r4, #304]	; 0x130
    273c:	2024      	movs	r0, #36	; 0x24
    273e:	f020 f908 	bl	22952 <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
    2742:	f1bb 0f09 	cmp.w	fp, #9
    2746:	d12e      	bne.n	27a6 <SX1276SetRxConfig+0x2c6>
    2748:	f8d4 20e4 	ldr.w	r2, [r4, #228]	; 0xe4
    274c:	4b24      	ldr	r3, [pc, #144]	; (27e0 <SX1276SetRxConfig+0x300>)
    274e:	429a      	cmp	r2, r3
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
    2750:	f04f 0102 	mov.w	r1, #2
    2754:	f04f 0036 	mov.w	r0, #54	; 0x36
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
    2758:	d921      	bls.n	279e <SX1276SetRxConfig+0x2be>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
    275a:	f020 f8fa 	bl	22952 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
    275e:	2164      	movs	r1, #100	; 0x64
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
    2760:	203a      	movs	r0, #58	; 0x3a
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
    2762:	f020 f8f6 	bl	22952 <SX1276Write>
            if( datarate == 6 )
    2766:	f1b8 0f06 	cmp.w	r8, #6
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
    276a:	f04f 0031 	mov.w	r0, #49	; 0x31
            if( datarate == 6 )
    276e:	d81d      	bhi.n	27ac <SX1276SetRxConfig+0x2cc>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
    2770:	f020 f8fa 	bl	22968 <SX1276Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
    2774:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
                SX1276Write( REG_LR_DETECTOPTIMIZE,
    2778:	f041 0105 	orr.w	r1, r1, #5
    277c:	2031      	movs	r0, #49	; 0x31
    277e:	f020 f8e8 	bl	22952 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    2782:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    2784:	2037      	movs	r0, #55	; 0x37
    2786:	e759      	b.n	263c <SX1276SetRxConfig+0x15c>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    2788:	f1bb 0f08 	cmp.w	fp, #8
    278c:	d105      	bne.n	279a <SX1276SetRxConfig+0x2ba>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
    278e:	f1b8 0f0b 	cmp.w	r8, #11
    2792:	bf94      	ite	ls
    2794:	2300      	movls	r3, #0
    2796:	2301      	movhi	r3, #1
    2798:	e783      	b.n	26a2 <SX1276SetRxConfig+0x1c2>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
    279a:	2300      	movs	r3, #0
    279c:	e781      	b.n	26a2 <SX1276SetRxConfig+0x1c2>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
    279e:	f020 f8d8 	bl	22952 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
    27a2:	217f      	movs	r1, #127	; 0x7f
    27a4:	e7dc      	b.n	2760 <SX1276SetRxConfig+0x280>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
    27a6:	2103      	movs	r1, #3
    27a8:	2036      	movs	r0, #54	; 0x36
    27aa:	e7da      	b.n	2762 <SX1276SetRxConfig+0x282>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
    27ac:	f020 f8dc 	bl	22968 <SX1276Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
    27b0:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
                SX1276Write( REG_LR_DETECTOPTIMIZE,
    27b4:	f041 0103 	orr.w	r1, r1, #3
    27b8:	2031      	movs	r0, #49	; 0x31
    27ba:	f020 f8ca 	bl	22952 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    27be:	210a      	movs	r1, #10
    27c0:	e7e0      	b.n	2784 <SX1276SetRxConfig+0x2a4>
    27c2:	bf00      	nop
    27c4:	f3af 8000 	nop.w
    27c8:	00000000 	.word	0x00000000
    27cc:	417e8480 	.word	0x417e8480
    27d0:	3ff00000 	.word	0x3ff00000
    27d4:	40200000 	.word	0x40200000
    27d8:	408f4000 	.word	0x408f4000
    27dc:	20002984 	.word	0x20002984
    27e0:	1f4add40 	.word	0x1f4add40
    27e4:	00000000 	.word	0x00000000

000027e8 <SX1276SetTxConfig>:
{
    27e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    27ec:	b087      	sub	sp, #28
    27ee:	461d      	mov	r5, r3
    27f0:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
    27f4:	9302      	str	r3, [sp, #8]
    27f6:	4689      	mov	r9, r1
    27f8:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
    27fc:	9918      	ldr	r1, [sp, #96]	; 0x60
    27fe:	9304      	str	r3, [sp, #16]
    2800:	4692      	mov	sl, r2
    2802:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
    2806:	9205      	str	r2, [sp, #20]
    2808:	9103      	str	r1, [sp, #12]
    280a:	9001      	str	r0, [sp, #4]
    280c:	9f10      	ldr	r7, [sp, #64]	; 0x40
    280e:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
    2812:	f8bd 8048 	ldrh.w	r8, [sp, #72]	; 0x48
    2816:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
    281a:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
    SX1276SetModem( modem );
    281e:	f018 fea1 	bl	1b564 <SX1276SetModem>
    SX1276SetRfTxPower( power );
    2822:	4648      	mov	r0, r9
    2824:	f018 fc4a 	bl	1b0bc <SX1276SetRfTxPower>
    switch( modem )
    2828:	9a01      	ldr	r2, [sp, #4]
    282a:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
    282e:	b12a      	cbz	r2, 283c <SX1276SetTxConfig+0x54>
    2830:	2a01      	cmp	r2, #1
    2832:	9a05      	ldr	r2, [sp, #20]
    2834:	d064      	beq.n	2900 <SX1276SetTxConfig+0x118>
}
    2836:	b007      	add	sp, #28
    2838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Power = power;
    283c:	4a7e      	ldr	r2, [pc, #504]	; (2a38 <SX1276SetTxConfig+0x250>)
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
    283e:	4650      	mov	r0, sl
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
    2840:	e9c2 a53b 	strd	sl, r5, [r2, #236]	; 0xec
            SX1276.Settings.Fsk.CrcOn = crcOn;
    2844:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
            SX1276.Settings.Fsk.Power = power;
    2848:	f882 90e8 	strb.w	r9, [r2, #232]	; 0xe8
            SX1276.Settings.Fsk.Datarate = datarate;
    284c:	f8c2 70f8 	str.w	r7, [r2, #248]	; 0xf8
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
    2850:	f8a2 80fc 	strh.w	r8, [r2, #252]	; 0xfc
            SX1276.Settings.Fsk.FixLen = fixLen;
    2854:	f882 60fe 	strb.w	r6, [r2, #254]	; 0xfe
            SX1276.Settings.Fsk.IqInverted = iqInverted;
    2858:	f882 3101 	strb.w	r3, [r2, #257]	; 0x101
            SX1276.Settings.Fsk.TxTimeout = timeout;
    285c:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
    2860:	f7fd fd90 	bl	384 <__aeabi_ui2d>
    2864:	a370      	add	r3, pc, #448	; (adr r3, 2a28 <SX1276SetTxConfig+0x240>)
    2866:	e9d3 2300 	ldrd	r2, r3, [r3]
    286a:	f7fd ff2f 	bl	6cc <__aeabi_ddiv>
    286e:	f7fe f8c5 	bl	9fc <__aeabi_d2uiz>
    2872:	b285      	uxth	r5, r0
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
    2874:	f3c0 2107 	ubfx	r1, r0, #8, #8
    2878:	2004      	movs	r0, #4
    287a:	f020 f86a 	bl	22952 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
    287e:	b2e9      	uxtb	r1, r5
    2880:	2005      	movs	r0, #5
    2882:	f020 f866 	bl	22952 <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
    2886:	4638      	mov	r0, r7
    2888:	f7fd fd7c 	bl	384 <__aeabi_ui2d>
    288c:	4602      	mov	r2, r0
    288e:	460b      	mov	r3, r1
    2890:	a167      	add	r1, pc, #412	; (adr r1, 2a30 <SX1276SetTxConfig+0x248>)
    2892:	e9d1 0100 	ldrd	r0, r1, [r1]
    2896:	f7fd ff19 	bl	6cc <__aeabi_ddiv>
    289a:	f7fe f8af 	bl	9fc <__aeabi_d2uiz>
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
    289e:	f3c0 2107 	ubfx	r1, r0, #8, #8
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
    28a2:	b285      	uxth	r5, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
    28a4:	2002      	movs	r0, #2
    28a6:	f020 f854 	bl	22952 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
    28aa:	b2e9      	uxtb	r1, r5
    28ac:	2003      	movs	r0, #3
    28ae:	f020 f850 	bl	22952 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
    28b2:	ea4f 2118 	mov.w	r1, r8, lsr #8
    28b6:	2025      	movs	r0, #37	; 0x25
    28b8:	f020 f84b 	bl	22952 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
    28bc:	fa5f f188 	uxtb.w	r1, r8
    28c0:	2026      	movs	r0, #38	; 0x26
    28c2:	f020 f846 	bl	22952 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
    28c6:	2030      	movs	r0, #48	; 0x30
    28c8:	f020 f84e 	bl	22968 <SX1276Read>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
    28cc:	2e00      	cmp	r6, #0
                           RF_PACKETCONFIG1_CRC_MASK &
    28ce:	f000 006f 	and.w	r0, r0, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
    28d2:	bf14      	ite	ne
    28d4:	2100      	movne	r1, #0
    28d6:	f06f 017f 	mvneq.w	r1, #127	; 0x7f
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
    28da:	ea40 1404 	orr.w	r4, r0, r4, lsl #4
    28de:	4321      	orrs	r1, r4
            SX1276Write( REG_PACKETCONFIG1,
    28e0:	b2c9      	uxtb	r1, r1
    28e2:	2030      	movs	r0, #48	; 0x30
    28e4:	f020 f835 	bl	22952 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
    28e8:	2031      	movs	r0, #49	; 0x31
    28ea:	f020 f83d 	bl	22968 <SX1276Read>
    28ee:	f040 0140 	orr.w	r1, r0, #64	; 0x40
    28f2:	b2c9      	uxtb	r1, r1
    28f4:	2031      	movs	r0, #49	; 0x31
}
    28f6:	b007      	add	sp, #28
    28f8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    28fc:	f020 b829 	b.w	22952 <SX1276Write>
            SX1276.Settings.LoRa.Power = power;
    2900:	484d      	ldr	r0, [pc, #308]	; (2a38 <SX1276SetTxConfig+0x250>)
            if( bandwidth > 2 )
    2902:	2d02      	cmp	r5, #2
            SX1276.Settings.LoRa.Power = power;
    2904:	f880 911c 	strb.w	r9, [r0, #284]	; 0x11c
            if( bandwidth > 2 )
    2908:	4681      	mov	r9, r0
    290a:	d900      	bls.n	290e <SX1276SetTxConfig+0x126>
                while( 1 );
    290c:	e7fe      	b.n	290c <SX1276SetTxConfig+0x124>
            bandwidth += 7;
    290e:	2f06      	cmp	r7, #6
    2910:	46ba      	mov	sl, r7
    2912:	bf38      	it	cc
    2914:	f04f 0a06 	movcc.w	sl, #6
    2918:	3507      	adds	r5, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
    291a:	f1ba 0f0c 	cmp.w	sl, #12
            SX1276.Settings.LoRa.Datarate = datarate;
    291e:	e9c0 5748 	strd	r5, r7, [r0, #288]	; 0x120
            SX1276.Settings.LoRa.Coderate = coderate;
    2922:	f880 b129 	strb.w	fp, [r0, #297]	; 0x129
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
    2926:	f8a0 812a 	strh.w	r8, [r0, #298]	; 0x12a
            SX1276.Settings.LoRa.FixLen = fixLen;
    292a:	f880 612c 	strb.w	r6, [r0, #300]	; 0x12c
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
    292e:	f880 212f 	strb.w	r2, [r0, #303]	; 0x12f
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
    2932:	bf28      	it	cs
    2934:	f04f 0a0c 	movcs.w	sl, #12
    2938:	9802      	ldr	r0, [sp, #8]
    293a:	f889 0130 	strb.w	r0, [r9, #304]	; 0x130
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    293e:	2d07      	cmp	r5, #7
            SX1276.Settings.LoRa.CrcOn = crcOn;
    2940:	f889 412e 	strb.w	r4, [r9, #302]	; 0x12e
            SX1276.Settings.LoRa.IqInverted = iqInverted;
    2944:	f889 3131 	strb.w	r3, [r9, #305]	; 0x131
            SX1276.Settings.LoRa.TxTimeout = timeout;
    2948:	f8c9 1134 	str.w	r1, [r9, #308]	; 0x134
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    294c:	d157      	bne.n	29fe <SX1276SetTxConfig+0x216>
    294e:	f1aa 030b 	sub.w	r3, sl, #11
    2952:	2b01      	cmp	r3, #1
    2954:	bf8c      	ite	hi
    2956:	2300      	movhi	r3, #0
    2958:	2301      	movls	r3, #1
    295a:	f889 3128 	strb.w	r3, [r9, #296]	; 0x128
            if( SX1276.Settings.LoRa.FreqHopOn == true )
    295e:	b16a      	cbz	r2, 297c <SX1276SetTxConfig+0x194>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
    2960:	2044      	movs	r0, #68	; 0x44
    2962:	f020 f801 	bl	22968 <SX1276Read>
    2966:	f060 017f 	orn	r1, r0, #127	; 0x7f
    296a:	b2c9      	uxtb	r1, r1
    296c:	2044      	movs	r0, #68	; 0x44
    296e:	f01f fff0 	bl	22952 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
    2972:	f899 1130 	ldrb.w	r1, [r9, #304]	; 0x130
    2976:	2024      	movs	r0, #36	; 0x24
    2978:	f01f ffeb 	bl	22952 <SX1276Write>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
    297c:	ea46 064b 	orr.w	r6, r6, fp, lsl #1
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
    2980:	201d      	movs	r0, #29
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
    2982:	ea46 1505 	orr.w	r5, r6, r5, lsl #4
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
    2986:	f01f ffef 	bl	22968 <SX1276Read>
            SX1276Write( REG_LR_MODEMCONFIG1,
    298a:	b2e9      	uxtb	r1, r5
    298c:	201d      	movs	r0, #29
    298e:	f01f ffe0 	bl	22952 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
    2992:	201e      	movs	r0, #30
    2994:	f01f ffe8 	bl	22968 <SX1276Read>
                           ( datarate << 4 ) | ( crcOn << 2 ) );
    2998:	00a4      	lsls	r4, r4, #2
                           RFLR_MODEMCONFIG2_SF_MASK &
    299a:	f000 000b 	and.w	r0, r0, #11
            SX1276Write( REG_LR_MODEMCONFIG2,
    299e:	ea44 1a0a 	orr.w	sl, r4, sl, lsl #4
    29a2:	ea4a 0a00 	orr.w	sl, sl, r0
    29a6:	fa5f f18a 	uxtb.w	r1, sl
    29aa:	201e      	movs	r0, #30
    29ac:	f01f ffd1 	bl	22952 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
    29b0:	2026      	movs	r0, #38	; 0x26
    29b2:	f01f ffd9 	bl	22968 <SX1276Read>
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
    29b6:	f899 3128 	ldrb.w	r3, [r9, #296]	; 0x128
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
    29ba:	f020 0108 	bic.w	r1, r0, #8
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
    29be:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
            SX1276Write( REG_LR_MODEMCONFIG3,
    29c2:	b2c9      	uxtb	r1, r1
    29c4:	2026      	movs	r0, #38	; 0x26
    29c6:	f01f ffc4 	bl	22952 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
    29ca:	ea4f 2118 	mov.w	r1, r8, lsr #8
    29ce:	2020      	movs	r0, #32
    29d0:	f01f ffbf 	bl	22952 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
    29d4:	2021      	movs	r0, #33	; 0x21
    29d6:	fa5f f188 	uxtb.w	r1, r8
    29da:	f01f ffba 	bl	22952 <SX1276Write>
            if( datarate == 6 )
    29de:	2f06      	cmp	r7, #6
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
    29e0:	f04f 0031 	mov.w	r0, #49	; 0x31
            if( datarate == 6 )
    29e4:	d814      	bhi.n	2a10 <SX1276SetTxConfig+0x228>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
    29e6:	f01f ffbf 	bl	22968 <SX1276Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
    29ea:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
                SX1276Write( REG_LR_DETECTOPTIMIZE,
    29ee:	f041 0105 	orr.w	r1, r1, #5
    29f2:	2031      	movs	r0, #49	; 0x31
    29f4:	f01f ffad 	bl	22952 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    29f8:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    29fa:	2037      	movs	r0, #55	; 0x37
    29fc:	e77b      	b.n	28f6 <SX1276SetTxConfig+0x10e>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    29fe:	2d08      	cmp	r5, #8
    2a00:	d104      	bne.n	2a0c <SX1276SetTxConfig+0x224>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
    2a02:	2f0b      	cmp	r7, #11
    2a04:	bf94      	ite	ls
    2a06:	2300      	movls	r3, #0
    2a08:	2301      	movhi	r3, #1
    2a0a:	e7a6      	b.n	295a <SX1276SetTxConfig+0x172>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
    2a0c:	2300      	movs	r3, #0
    2a0e:	e7a4      	b.n	295a <SX1276SetTxConfig+0x172>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
    2a10:	f01f ffaa 	bl	22968 <SX1276Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
    2a14:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
                SX1276Write( REG_LR_DETECTOPTIMIZE,
    2a18:	f041 0103 	orr.w	r1, r1, #3
    2a1c:	2031      	movs	r0, #49	; 0x31
    2a1e:	f01f ff98 	bl	22952 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    2a22:	210a      	movs	r1, #10
    2a24:	e7e9      	b.n	29fa <SX1276SetTxConfig+0x212>
    2a26:	bf00      	nop
    2a28:	00000000 	.word	0x00000000
    2a2c:	404e8480 	.word	0x404e8480
    2a30:	00000000 	.word	0x00000000
    2a34:	417e8480 	.word	0x417e8480
    2a38:	20002984 	.word	0x20002984
    2a3c:	00000000 	.word	0x00000000

00002a40 <SX1276OnDio2Irq>:
            break;
    }
}

void SX1276OnDio2Irq( void* context )
{
    2a40:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
    2a42:	4b31      	ldr	r3, [pc, #196]	; (2b08 <SX1276OnDio2Irq+0xc8>)
    2a44:	f893 10e0 	ldrb.w	r1, [r3, #224]	; 0xe0
    2a48:	2901      	cmp	r1, #1
    2a4a:	461c      	mov	r4, r3
    2a4c:	d002      	beq.n	2a54 <SX1276OnDio2Irq+0x14>
    2a4e:	2902      	cmp	r1, #2
    2a50:	d04c      	beq.n	2aec <SX1276OnDio2Irq+0xac>
            }
            break;
        default:
            break;
    }
}
    2a52:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
    2a54:	f893 20e1 	ldrb.w	r2, [r3, #225]	; 0xe1
    2a58:	b1ca      	cbz	r2, 2a8e <SX1276OnDio2Irq+0x4e>
    2a5a:	2a01      	cmp	r2, #1
    2a5c:	d1f9      	bne.n	2a52 <SX1276OnDio2Irq+0x12>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
    2a5e:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
    2a62:	2b00      	cmp	r3, #0
    2a64:	d0f5      	beq.n	2a52 <SX1276OnDio2Irq+0x12>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
    2a66:	2102      	movs	r1, #2
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
    2a68:	2012      	movs	r0, #18
    2a6a:	f01f ff72 	bl	22952 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
    2a6e:	4b27      	ldr	r3, [pc, #156]	; (2b0c <SX1276OnDio2Irq+0xcc>)
    2a70:	681b      	ldr	r3, [r3, #0]
    2a72:	2b00      	cmp	r3, #0
    2a74:	d0ed      	beq.n	2a52 <SX1276OnDio2Irq+0x12>
    2a76:	695c      	ldr	r4, [r3, #20]
    2a78:	2c00      	cmp	r4, #0
    2a7a:	d0ea      	beq.n	2a52 <SX1276OnDio2Irq+0x12>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
    2a7c:	201c      	movs	r0, #28
    2a7e:	f01f ff73 	bl	22968 <SX1276Read>
    2a82:	4623      	mov	r3, r4
    2a84:	f000 003f 	and.w	r0, r0, #63	; 0x3f
}
    2a88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
    2a8c:	4718      	bx	r3
                if( SX1276.DIO4.port == NULL )
    2a8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2a90:	b90b      	cbnz	r3, 2a96 <SX1276OnDio2Irq+0x56>
                    SX1276.Settings.FskPacketHandler.PreambleDetected = true;
    2a92:	f884 110c 	strb.w	r1, [r4, #268]	; 0x10c
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected == true ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == false ) )
    2a96:	f8b4 510c 	ldrh.w	r5, [r4, #268]	; 0x10c
    2a9a:	2d01      	cmp	r5, #1
    2a9c:	d1d9      	bne.n	2a52 <SX1276OnDio2Irq+0x12>
                    TimerStop( &RxTimeoutSyncWord );
    2a9e:	481c      	ldr	r0, [pc, #112]	; (2b10 <SX1276OnDio2Irq+0xd0>)
    2aa0:	f019 f990 	bl	1bdc4 <TimerStop>
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
    2aa4:	2011      	movs	r0, #17
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
    2aa6:	f884 510d 	strb.w	r5, [r4, #269]	; 0x10d
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
    2aaa:	f01f ff5d 	bl	22968 <SX1276Read>
    2aae:	0840      	lsrs	r0, r0, #1
    2ab0:	4240      	negs	r0, r0
    2ab2:	f884 010e 	strb.w	r0, [r4, #270]	; 0x10e
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )( double )( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
    2ab6:	201b      	movs	r0, #27
    2ab8:	f01f ff56 	bl	22968 <SX1276Read>
    2abc:	4605      	mov	r5, r0
                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) ) *
    2abe:	201c      	movs	r0, #28
    2ac0:	f01f ff52 	bl	22968 <SX1276Read>
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )( double )( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
    2ac4:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
    2ac8:	f7fd fc6c 	bl	3a4 <__aeabi_i2d>
                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) ) *
    2acc:	a30c      	add	r3, pc, #48	; (adr r3, 2b00 <SX1276OnDio2Irq+0xc0>)
    2ace:	e9d3 2300 	ldrd	r2, r3, [r3]
    2ad2:	f7fd fcd1 	bl	478 <__aeabi_dmul>
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )( double )( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
    2ad6:	f7fd ff69 	bl	9ac <__aeabi_d2iz>
    2ada:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
    2ade:	200c      	movs	r0, #12
    2ae0:	f01f ff42 	bl	22968 <SX1276Read>
    2ae4:	0940      	lsrs	r0, r0, #5
    2ae6:	f884 0114 	strb.w	r0, [r4, #276]	; 0x114
    2aea:	e7b2      	b.n	2a52 <SX1276OnDio2Irq+0x12>
            switch( SX1276.Settings.Modem )
    2aec:	f893 20e1 	ldrb.w	r2, [r3, #225]	; 0xe1
    2af0:	2a01      	cmp	r2, #1
    2af2:	d1ae      	bne.n	2a52 <SX1276OnDio2Irq+0x12>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
    2af4:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
    2af8:	2b00      	cmp	r3, #0
    2afa:	d0aa      	beq.n	2a52 <SX1276OnDio2Irq+0x12>
    2afc:	e7b4      	b.n	2a68 <SX1276OnDio2Irq+0x28>
    2afe:	bf00      	nop
    2b00:	00000000 	.word	0x00000000
    2b04:	404e8480 	.word	0x404e8480
    2b08:	20002984 	.word	0x20002984
    2b0c:	20002950 	.word	0x20002950
    2b10:	20002954 	.word	0x20002954
    2b14:	00000000 	.word	0x00000000

00002b18 <ceil>:
    2b18:	b580      	push	{r7, lr}
    2b1a:	b08c      	sub	sp, #48	; 0x30
    2b1c:	af00      	add	r7, sp, #0
    2b1e:	e9c7 0100 	strd	r0, r1, [r7]
    2b22:	e9d7 2300 	ldrd	r2, r3, [r7]
    2b26:	e9c7 2304 	strd	r2, r3, [r7, #16]
    2b2a:	697b      	ldr	r3, [r7, #20]
    2b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    2b2e:	693b      	ldr	r3, [r7, #16]
    2b30:	62bb      	str	r3, [r7, #40]	; 0x28
    2b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2b34:	151b      	asrs	r3, r3, #20
    2b36:	f3c3 030a 	ubfx	r3, r3, #0, #11
    2b3a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
    2b3e:	627b      	str	r3, [r7, #36]	; 0x24
    2b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2b42:	2b13      	cmp	r3, #19
    2b44:	dc61      	bgt.n	2c0a <ceil+0xf2>
    2b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2b48:	2b00      	cmp	r3, #0
    2b4a:	da28      	bge.n	2b9e <ceil+0x86>
    2b4c:	a162      	add	r1, pc, #392	; (adr r1, 2cd8 <ceil+0x1c0>)
    2b4e:	e9d1 0100 	ldrd	r0, r1, [r1]
    2b52:	e9d7 2300 	ldrd	r2, r3, [r7]
    2b56:	f7fd fad9 	bl	10c <__adddf3>
    2b5a:	4602      	mov	r2, r0
    2b5c:	460b      	mov	r3, r1
    2b5e:	4610      	mov	r0, r2
    2b60:	4619      	mov	r1, r3
    2b62:	f04f 0200 	mov.w	r2, #0
    2b66:	f04f 0300 	mov.w	r3, #0
    2b6a:	f7fd ff15 	bl	998 <__aeabi_dcmpgt>
    2b6e:	4603      	mov	r3, r0
    2b70:	2b00      	cmp	r3, #0
    2b72:	f000 80a0 	beq.w	2cb6 <ceil+0x19e>
    2b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2b78:	2b00      	cmp	r3, #0
    2b7a:	da05      	bge.n	2b88 <ceil+0x70>
    2b7c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    2b80:	62fb      	str	r3, [r7, #44]	; 0x2c
    2b82:	2300      	movs	r3, #0
    2b84:	62bb      	str	r3, [r7, #40]	; 0x28
    2b86:	e096      	b.n	2cb6 <ceil+0x19e>
    2b88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2b8c:	4313      	orrs	r3, r2
    2b8e:	2b00      	cmp	r3, #0
    2b90:	f000 8091 	beq.w	2cb6 <ceil+0x19e>
    2b94:	4b52      	ldr	r3, [pc, #328]	; (2ce0 <ceil+0x1c8>)
    2b96:	62fb      	str	r3, [r7, #44]	; 0x2c
    2b98:	2300      	movs	r3, #0
    2b9a:	62bb      	str	r3, [r7, #40]	; 0x28
    2b9c:	e08b      	b.n	2cb6 <ceil+0x19e>
    2b9e:	4a51      	ldr	r2, [pc, #324]	; (2ce4 <ceil+0x1cc>)
    2ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2ba2:	fa42 f303 	asr.w	r3, r2, r3
    2ba6:	623b      	str	r3, [r7, #32]
    2ba8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2baa:	6a3b      	ldr	r3, [r7, #32]
    2bac:	401a      	ands	r2, r3
    2bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2bb0:	4313      	orrs	r3, r2
    2bb2:	2b00      	cmp	r3, #0
    2bb4:	d102      	bne.n	2bbc <ceil+0xa4>
    2bb6:	e9d7 2300 	ldrd	r2, r3, [r7]
    2bba:	e086      	b.n	2cca <ceil+0x1b2>
    2bbc:	a146      	add	r1, pc, #280	; (adr r1, 2cd8 <ceil+0x1c0>)
    2bbe:	e9d1 0100 	ldrd	r0, r1, [r1]
    2bc2:	e9d7 2300 	ldrd	r2, r3, [r7]
    2bc6:	f7fd faa1 	bl	10c <__adddf3>
    2bca:	4602      	mov	r2, r0
    2bcc:	460b      	mov	r3, r1
    2bce:	4610      	mov	r0, r2
    2bd0:	4619      	mov	r1, r3
    2bd2:	f04f 0200 	mov.w	r2, #0
    2bd6:	f04f 0300 	mov.w	r3, #0
    2bda:	f7fd fedd 	bl	998 <__aeabi_dcmpgt>
    2bde:	4603      	mov	r3, r0
    2be0:	2b00      	cmp	r3, #0
    2be2:	d068      	beq.n	2cb6 <ceil+0x19e>
    2be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2be6:	2b00      	cmp	r3, #0
    2be8:	dd07      	ble.n	2bfa <ceil+0xe2>
    2bea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    2bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2bf0:	fa42 f303 	asr.w	r3, r2, r3
    2bf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2bf6:	4413      	add	r3, r2
    2bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    2bfa:	6a3b      	ldr	r3, [r7, #32]
    2bfc:	43da      	mvns	r2, r3
    2bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2c00:	4013      	ands	r3, r2
    2c02:	62fb      	str	r3, [r7, #44]	; 0x2c
    2c04:	2300      	movs	r3, #0
    2c06:	62bb      	str	r3, [r7, #40]	; 0x28
    2c08:	e055      	b.n	2cb6 <ceil+0x19e>
    2c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2c0c:	2b33      	cmp	r3, #51	; 0x33
    2c0e:	dd0f      	ble.n	2c30 <ceil+0x118>
    2c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2c12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    2c16:	d108      	bne.n	2c2a <ceil+0x112>
    2c18:	e9d7 0100 	ldrd	r0, r1, [r7]
    2c1c:	4602      	mov	r2, r0
    2c1e:	460b      	mov	r3, r1
    2c20:	f7fd fa74 	bl	10c <__adddf3>
    2c24:	4602      	mov	r2, r0
    2c26:	460b      	mov	r3, r1
    2c28:	e04f      	b.n	2cca <ceil+0x1b2>
    2c2a:	e9d7 2300 	ldrd	r2, r3, [r7]
    2c2e:	e04c      	b.n	2cca <ceil+0x1b2>
    2c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2c32:	3b14      	subs	r3, #20
    2c34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2c38:	fa22 f303 	lsr.w	r3, r2, r3
    2c3c:	623b      	str	r3, [r7, #32]
    2c3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2c40:	6a3b      	ldr	r3, [r7, #32]
    2c42:	4013      	ands	r3, r2
    2c44:	2b00      	cmp	r3, #0
    2c46:	d102      	bne.n	2c4e <ceil+0x136>
    2c48:	e9d7 2300 	ldrd	r2, r3, [r7]
    2c4c:	e03d      	b.n	2cca <ceil+0x1b2>
    2c4e:	a122      	add	r1, pc, #136	; (adr r1, 2cd8 <ceil+0x1c0>)
    2c50:	e9d1 0100 	ldrd	r0, r1, [r1]
    2c54:	e9d7 2300 	ldrd	r2, r3, [r7]
    2c58:	f7fd fa58 	bl	10c <__adddf3>
    2c5c:	4602      	mov	r2, r0
    2c5e:	460b      	mov	r3, r1
    2c60:	4610      	mov	r0, r2
    2c62:	4619      	mov	r1, r3
    2c64:	f04f 0200 	mov.w	r2, #0
    2c68:	f04f 0300 	mov.w	r3, #0
    2c6c:	f7fd fe94 	bl	998 <__aeabi_dcmpgt>
    2c70:	4603      	mov	r3, r0
    2c72:	2b00      	cmp	r3, #0
    2c74:	d01f      	beq.n	2cb6 <ceil+0x19e>
    2c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2c78:	2b00      	cmp	r3, #0
    2c7a:	dd17      	ble.n	2cac <ceil+0x194>
    2c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2c7e:	2b14      	cmp	r3, #20
    2c80:	d103      	bne.n	2c8a <ceil+0x172>
    2c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2c84:	3301      	adds	r3, #1
    2c86:	62fb      	str	r3, [r7, #44]	; 0x2c
    2c88:	e010      	b.n	2cac <ceil+0x194>
    2c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2c8c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
    2c90:	2201      	movs	r2, #1
    2c92:	409a      	lsls	r2, r3
    2c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2c96:	4413      	add	r3, r2
    2c98:	61fb      	str	r3, [r7, #28]
    2c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2c9c:	69fa      	ldr	r2, [r7, #28]
    2c9e:	429a      	cmp	r2, r3
    2ca0:	d202      	bcs.n	2ca8 <ceil+0x190>
    2ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2ca4:	3301      	adds	r3, #1
    2ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
    2ca8:	69fb      	ldr	r3, [r7, #28]
    2caa:	62bb      	str	r3, [r7, #40]	; 0x28
    2cac:	6a3b      	ldr	r3, [r7, #32]
    2cae:	43da      	mvns	r2, r3
    2cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2cb2:	4013      	ands	r3, r2
    2cb4:	62bb      	str	r3, [r7, #40]	; 0x28
    2cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2cb8:	60fb      	str	r3, [r7, #12]
    2cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2cbc:	60bb      	str	r3, [r7, #8]
    2cbe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    2cc2:	e9c7 2300 	strd	r2, r3, [r7]
    2cc6:	e9d7 2300 	ldrd	r2, r3, [r7]
    2cca:	4610      	mov	r0, r2
    2ccc:	4619      	mov	r1, r3
    2cce:	3730      	adds	r7, #48	; 0x30
    2cd0:	46bd      	mov	sp, r7
    2cd2:	bd80      	pop	{r7, pc}
    2cd4:	f3af 8000 	nop.w
    2cd8:	8800759c 	.word	0x8800759c
    2cdc:	7e37e43c 	.word	0x7e37e43c
    2ce0:	3ff00000 	.word	0x3ff00000
    2ce4:	000fffff 	.word	0x000fffff

00002ce8 <floor>:
    2ce8:	b580      	push	{r7, lr}
    2cea:	b08c      	sub	sp, #48	; 0x30
    2cec:	af00      	add	r7, sp, #0
    2cee:	e9c7 0100 	strd	r0, r1, [r7]
    2cf2:	e9d7 2300 	ldrd	r2, r3, [r7]
    2cf6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    2cfa:	697b      	ldr	r3, [r7, #20]
    2cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    2cfe:	693b      	ldr	r3, [r7, #16]
    2d00:	62bb      	str	r3, [r7, #40]	; 0x28
    2d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2d04:	151b      	asrs	r3, r3, #20
    2d06:	f3c3 030a 	ubfx	r3, r3, #0, #11
    2d0a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
    2d0e:	627b      	str	r3, [r7, #36]	; 0x24
    2d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2d12:	2b13      	cmp	r3, #19
    2d14:	dc62      	bgt.n	2ddc <floor+0xf4>
    2d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2d18:	2b00      	cmp	r3, #0
    2d1a:	da29      	bge.n	2d70 <floor+0x88>
    2d1c:	a162      	add	r1, pc, #392	; (adr r1, 2ea8 <floor+0x1c0>)
    2d1e:	e9d1 0100 	ldrd	r0, r1, [r1]
    2d22:	e9d7 2300 	ldrd	r2, r3, [r7]
    2d26:	f7fd f9f1 	bl	10c <__adddf3>
    2d2a:	4602      	mov	r2, r0
    2d2c:	460b      	mov	r3, r1
    2d2e:	4610      	mov	r0, r2
    2d30:	4619      	mov	r1, r3
    2d32:	f04f 0200 	mov.w	r2, #0
    2d36:	f04f 0300 	mov.w	r3, #0
    2d3a:	f7fd fe2d 	bl	998 <__aeabi_dcmpgt>
    2d3e:	4603      	mov	r3, r0
    2d40:	2b00      	cmp	r3, #0
    2d42:	f000 80a1 	beq.w	2e88 <floor+0x1a0>
    2d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2d48:	2b00      	cmp	r3, #0
    2d4a:	db04      	blt.n	2d56 <floor+0x6e>
    2d4c:	2300      	movs	r3, #0
    2d4e:	62bb      	str	r3, [r7, #40]	; 0x28
    2d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2d52:	62fb      	str	r3, [r7, #44]	; 0x2c
    2d54:	e098      	b.n	2e88 <floor+0x1a0>
    2d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2d58:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    2d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2d5e:	4313      	orrs	r3, r2
    2d60:	2b00      	cmp	r3, #0
    2d62:	f000 8091 	beq.w	2e88 <floor+0x1a0>
    2d66:	4b52      	ldr	r3, [pc, #328]	; (2eb0 <floor+0x1c8>)
    2d68:	62fb      	str	r3, [r7, #44]	; 0x2c
    2d6a:	2300      	movs	r3, #0
    2d6c:	62bb      	str	r3, [r7, #40]	; 0x28
    2d6e:	e08b      	b.n	2e88 <floor+0x1a0>
    2d70:	4a50      	ldr	r2, [pc, #320]	; (2eb4 <floor+0x1cc>)
    2d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2d74:	fa42 f303 	asr.w	r3, r2, r3
    2d78:	623b      	str	r3, [r7, #32]
    2d7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2d7c:	6a3b      	ldr	r3, [r7, #32]
    2d7e:	401a      	ands	r2, r3
    2d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2d82:	4313      	orrs	r3, r2
    2d84:	2b00      	cmp	r3, #0
    2d86:	d102      	bne.n	2d8e <floor+0xa6>
    2d88:	e9d7 2300 	ldrd	r2, r3, [r7]
    2d8c:	e086      	b.n	2e9c <floor+0x1b4>
    2d8e:	a146      	add	r1, pc, #280	; (adr r1, 2ea8 <floor+0x1c0>)
    2d90:	e9d1 0100 	ldrd	r0, r1, [r1]
    2d94:	e9d7 2300 	ldrd	r2, r3, [r7]
    2d98:	f7fd f9b8 	bl	10c <__adddf3>
    2d9c:	4602      	mov	r2, r0
    2d9e:	460b      	mov	r3, r1
    2da0:	4610      	mov	r0, r2
    2da2:	4619      	mov	r1, r3
    2da4:	f04f 0200 	mov.w	r2, #0
    2da8:	f04f 0300 	mov.w	r3, #0
    2dac:	f7fd fdf4 	bl	998 <__aeabi_dcmpgt>
    2db0:	4603      	mov	r3, r0
    2db2:	2b00      	cmp	r3, #0
    2db4:	d068      	beq.n	2e88 <floor+0x1a0>
    2db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2db8:	2b00      	cmp	r3, #0
    2dba:	da07      	bge.n	2dcc <floor+0xe4>
    2dbc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    2dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2dc2:	fa42 f303 	asr.w	r3, r2, r3
    2dc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2dc8:	4413      	add	r3, r2
    2dca:	62fb      	str	r3, [r7, #44]	; 0x2c
    2dcc:	6a3b      	ldr	r3, [r7, #32]
    2dce:	43da      	mvns	r2, r3
    2dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2dd2:	4013      	ands	r3, r2
    2dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    2dd6:	2300      	movs	r3, #0
    2dd8:	62bb      	str	r3, [r7, #40]	; 0x28
    2dda:	e055      	b.n	2e88 <floor+0x1a0>
    2ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2dde:	2b33      	cmp	r3, #51	; 0x33
    2de0:	dd0f      	ble.n	2e02 <floor+0x11a>
    2de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2de4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    2de8:	d108      	bne.n	2dfc <floor+0x114>
    2dea:	e9d7 0100 	ldrd	r0, r1, [r7]
    2dee:	4602      	mov	r2, r0
    2df0:	460b      	mov	r3, r1
    2df2:	f7fd f98b 	bl	10c <__adddf3>
    2df6:	4602      	mov	r2, r0
    2df8:	460b      	mov	r3, r1
    2dfa:	e04f      	b.n	2e9c <floor+0x1b4>
    2dfc:	e9d7 2300 	ldrd	r2, r3, [r7]
    2e00:	e04c      	b.n	2e9c <floor+0x1b4>
    2e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2e04:	3b14      	subs	r3, #20
    2e06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2e0a:	fa22 f303 	lsr.w	r3, r2, r3
    2e0e:	623b      	str	r3, [r7, #32]
    2e10:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2e12:	6a3b      	ldr	r3, [r7, #32]
    2e14:	4013      	ands	r3, r2
    2e16:	2b00      	cmp	r3, #0
    2e18:	d102      	bne.n	2e20 <floor+0x138>
    2e1a:	e9d7 2300 	ldrd	r2, r3, [r7]
    2e1e:	e03d      	b.n	2e9c <floor+0x1b4>
    2e20:	a121      	add	r1, pc, #132	; (adr r1, 2ea8 <floor+0x1c0>)
    2e22:	e9d1 0100 	ldrd	r0, r1, [r1]
    2e26:	e9d7 2300 	ldrd	r2, r3, [r7]
    2e2a:	f7fd f96f 	bl	10c <__adddf3>
    2e2e:	4602      	mov	r2, r0
    2e30:	460b      	mov	r3, r1
    2e32:	4610      	mov	r0, r2
    2e34:	4619      	mov	r1, r3
    2e36:	f04f 0200 	mov.w	r2, #0
    2e3a:	f04f 0300 	mov.w	r3, #0
    2e3e:	f7fd fdab 	bl	998 <__aeabi_dcmpgt>
    2e42:	4603      	mov	r3, r0
    2e44:	2b00      	cmp	r3, #0
    2e46:	d01f      	beq.n	2e88 <floor+0x1a0>
    2e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2e4a:	2b00      	cmp	r3, #0
    2e4c:	da17      	bge.n	2e7e <floor+0x196>
    2e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2e50:	2b14      	cmp	r3, #20
    2e52:	d103      	bne.n	2e5c <floor+0x174>
    2e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2e56:	3301      	adds	r3, #1
    2e58:	62fb      	str	r3, [r7, #44]	; 0x2c
    2e5a:	e010      	b.n	2e7e <floor+0x196>
    2e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2e5e:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
    2e62:	2201      	movs	r2, #1
    2e64:	409a      	lsls	r2, r3
    2e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2e68:	4413      	add	r3, r2
    2e6a:	61fb      	str	r3, [r7, #28]
    2e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2e6e:	69fa      	ldr	r2, [r7, #28]
    2e70:	429a      	cmp	r2, r3
    2e72:	d202      	bcs.n	2e7a <floor+0x192>
    2e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2e76:	3301      	adds	r3, #1
    2e78:	62fb      	str	r3, [r7, #44]	; 0x2c
    2e7a:	69fb      	ldr	r3, [r7, #28]
    2e7c:	62bb      	str	r3, [r7, #40]	; 0x28
    2e7e:	6a3b      	ldr	r3, [r7, #32]
    2e80:	43da      	mvns	r2, r3
    2e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2e84:	4013      	ands	r3, r2
    2e86:	62bb      	str	r3, [r7, #40]	; 0x28
    2e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2e8a:	60fb      	str	r3, [r7, #12]
    2e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2e8e:	60bb      	str	r3, [r7, #8]
    2e90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    2e94:	e9c7 2300 	strd	r2, r3, [r7]
    2e98:	e9d7 2300 	ldrd	r2, r3, [r7]
    2e9c:	4610      	mov	r0, r2
    2e9e:	4619      	mov	r1, r3
    2ea0:	3730      	adds	r7, #48	; 0x30
    2ea2:	46bd      	mov	sp, r7
    2ea4:	bd80      	pop	{r7, pc}
    2ea6:	bf00      	nop
    2ea8:	8800759c 	.word	0x8800759c
    2eac:	7e37e43c 	.word	0x7e37e43c
    2eb0:	bff00000 	.word	0xbff00000
    2eb4:	000fffff 	.word	0x000fffff

00002eb8 <disconnected>:
}

// triggered when disconnected from phone
static void disconnected(struct bt_conn *conn, uint8_t reason)
{
	printk("Disconnected (reason 0x%02x)\n", reason);
    2eb8:	4801      	ldr	r0, [pc, #4]	; (2ec0 <disconnected+0x8>)
    2eba:	f01b ba63 	b.w	1e384 <printk>
    2ebe:	bf00      	nop
    2ec0:	00025388 	.word	0x00025388

00002ec4 <connected>:
	if (err) {
    2ec4:	b111      	cbz	r1, 2ecc <connected+0x8>
		printk("Connection failed (err 0x%02x)\n", err);
    2ec6:	4803      	ldr	r0, [pc, #12]	; (2ed4 <connected+0x10>)
    2ec8:	f01b ba5c 	b.w	1e384 <printk>
		printk("Connected\n");
    2ecc:	4802      	ldr	r0, [pc, #8]	; (2ed8 <connected+0x14>)
    2ece:	f01b ba59 	b.w	1e384 <printk>
    2ed2:	bf00      	nop
    2ed4:	000253a6 	.word	0x000253a6
    2ed8:	000253c6 	.word	0x000253c6

00002edc <auth_cancel>:

	printk("Advertising successfully started\n");
}

static void auth_cancel(struct bt_conn *conn)
{
    2edc:	b530      	push	{r4, r5, lr}
    2ede:	b093      	sub	sp, #76	; 0x4c
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    2ee0:	f01e f85d 	bl	20f9e <bt_conn_get_dst>
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    2ee4:	7803      	ldrb	r3, [r0, #0]
    2ee6:	4604      	mov	r4, r0
    2ee8:	ad07      	add	r5, sp, #28
    2eea:	2b03      	cmp	r3, #3
    2eec:	d824      	bhi.n	2f38 <auth_cancel+0x5c>
    2eee:	e8df f003 	tbb	[pc, r3]
    2ef2:	1d02      	.short	0x1d02
    2ef4:	211f      	.short	0x211f
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    2ef6:	4913      	ldr	r1, [pc, #76]	; (2f44 <auth_cancel+0x68>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    2ef8:	4628      	mov	r0, r5
    2efa:	f020 fbc8 	bl	2368e <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    2efe:	79a3      	ldrb	r3, [r4, #6]
    2f00:	9505      	str	r5, [sp, #20]
    2f02:	7862      	ldrb	r2, [r4, #1]
    2f04:	9204      	str	r2, [sp, #16]
    2f06:	78a2      	ldrb	r2, [r4, #2]
    2f08:	9203      	str	r2, [sp, #12]
    2f0a:	78e2      	ldrb	r2, [r4, #3]
    2f0c:	9202      	str	r2, [sp, #8]
    2f0e:	7922      	ldrb	r2, [r4, #4]
    2f10:	9201      	str	r2, [sp, #4]
    2f12:	7962      	ldrb	r2, [r4, #5]
    2f14:	9200      	str	r2, [sp, #0]
    2f16:	211e      	movs	r1, #30
    2f18:	4a0b      	ldr	r2, [pc, #44]	; (2f48 <auth_cancel+0x6c>)
    2f1a:	a80a      	add	r0, sp, #40	; 0x28
    2f1c:	f01b fa3f 	bl	1e39e <snprintk>

	printk("Pairing cancelled: %s\n", addr);
    2f20:	480a      	ldr	r0, [pc, #40]	; (2f4c <auth_cancel+0x70>)
    2f22:	a90a      	add	r1, sp, #40	; 0x28
    2f24:	f01b fa2e 	bl	1e384 <printk>
}
    2f28:	b013      	add	sp, #76	; 0x4c
    2f2a:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    2f2c:	4908      	ldr	r1, [pc, #32]	; (2f50 <auth_cancel+0x74>)
    2f2e:	e7e3      	b.n	2ef8 <auth_cancel+0x1c>
		strcpy(type, "public-id");
    2f30:	4908      	ldr	r1, [pc, #32]	; (2f54 <auth_cancel+0x78>)
    2f32:	e7e1      	b.n	2ef8 <auth_cancel+0x1c>
		strcpy(type, "random-id");
    2f34:	4908      	ldr	r1, [pc, #32]	; (2f58 <auth_cancel+0x7c>)
    2f36:	e7df      	b.n	2ef8 <auth_cancel+0x1c>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    2f38:	4a08      	ldr	r2, [pc, #32]	; (2f5c <auth_cancel+0x80>)
    2f3a:	210a      	movs	r1, #10
    2f3c:	4628      	mov	r0, r5
    2f3e:	f01b fa2e 	bl	1e39e <snprintk>
		break;
    2f42:	e7dc      	b.n	2efe <auth_cancel+0x22>
    2f44:	000253d1 	.word	0x000253d1
    2f48:	000253f3 	.word	0x000253f3
    2f4c:	00025416 	.word	0x00025416
    2f50:	000253d8 	.word	0x000253d8
    2f54:	000253df 	.word	0x000253df
    2f58:	000253e9 	.word	0x000253e9
    2f5c:	00027059 	.word	0x00027059

00002f60 <main>:




void main(void)
{
    2f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	// for ble connection
    int err;

	err = bt_enable(NULL);
    2f64:	2000      	movs	r0, #0
{
    2f66:	b08e      	sub	sp, #56	; 0x38
	err = bt_enable(NULL);
    2f68:	f004 fc06 	bl	7778 <bt_enable>
	if (err) {
    2f6c:	4606      	mov	r6, r0
    2f6e:	b130      	cbz	r0, 2f7e <main+0x1e>
		printk("Bluetooth init failed (err %d)\n", err);
    2f70:	4601      	mov	r1, r0
    2f72:	484c      	ldr	r0, [pc, #304]	; (30a4 <main+0x144>)
    2f74:	f01b fa06 	bl	1e384 <printk>
		lres_notify(data, 1);
		
		LOG_INF("Received data: %s (RSSI:%ddBm, SNR:%ddBm)",
			log_strdup(data), rssi, snr);
	}
}
    2f78:	b00e      	add	sp, #56	; 0x38
    2f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
    2f7e:	4d4a      	ldr	r5, [pc, #296]	; (30a8 <main+0x148>)
	printk("Bluetooth initialized\n");
    2f80:	484a      	ldr	r0, [pc, #296]	; (30ac <main+0x14c>)
    2f82:	f01b f9ff 	bl	1e384 <printk>
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
    2f86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2f88:	ac09      	add	r4, sp, #36	; 0x24
    2f8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2f8c:	682b      	ldr	r3, [r5, #0]
    2f8e:	6023      	str	r3, [r4, #0]
    2f90:	4947      	ldr	r1, [pc, #284]	; (30b0 <main+0x150>)
    2f92:	9600      	str	r6, [sp, #0]
    2f94:	4633      	mov	r3, r6
    2f96:	2202      	movs	r2, #2
    2f98:	a809      	add	r0, sp, #36	; 0x24
    2f9a:	f005 fa63 	bl	8464 <bt_le_adv_start>
	if (err) {
    2f9e:	4601      	mov	r1, r0
    2fa0:	b1f8      	cbz	r0, 2fe2 <main+0x82>
		printk("Advertising failed to start (err %d)\n", err);
    2fa2:	4844      	ldr	r0, [pc, #272]	; (30b4 <main+0x154>)
    2fa4:	f01b f9ee 	bl	1e384 <printk>
	bt_conn_cb_register(&conn_callbacks);
    2fa8:	4843      	ldr	r0, [pc, #268]	; (30b8 <main+0x158>)
    2faa:	f005 fd57 	bl	8a5c <bt_conn_cb_register>
	bt_conn_auth_cb_register(&auth_cb_display);
    2fae:	4843      	ldr	r0, [pc, #268]	; (30bc <main+0x15c>)
    2fb0:	f006 f98c 	bl	92cc <bt_conn_auth_cb_register>
	uint8_t data[MAX_DATA_LEN] = {0};
    2fb4:	2100      	movs	r1, #0
    2fb6:	2210      	movs	r2, #16
    2fb8:	a80a      	add	r0, sp, #40	; 0x28
    2fba:	9109      	str	r1, [sp, #36]	; 0x24
    2fbc:	f020 fb5f 	bl	2367e <memset>
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    2fc0:	483f      	ldr	r0, [pc, #252]	; (30c0 <main+0x160>)
    2fc2:	4c40      	ldr	r4, [pc, #256]	; (30c4 <main+0x164>)
    2fc4:	f019 fd44 	bl	1ca50 <z_impl_device_get_binding>
	if (!lora_dev) {
    2fc8:	4b3f      	ldr	r3, [pc, #252]	; (30c8 <main+0x168>)
    2fca:	1ae4      	subs	r4, r4, r3
    2fcc:	08e4      	lsrs	r4, r4, #3
    2fce:	4605      	mov	r5, r0
    2fd0:	01a4      	lsls	r4, r4, #6
    2fd2:	b950      	cbnz	r0, 2fea <main+0x8a>
		LOG_ERR("%s Device not found", DEFAULT_RADIO);
    2fd4:	493a      	ldr	r1, [pc, #232]	; (30c0 <main+0x160>)
    2fd6:	483d      	ldr	r0, [pc, #244]	; (30cc <main+0x16c>)
    2fd8:	f044 0201 	orr.w	r2, r4, #1
    2fdc:	f01b fdb9 	bl	1eb52 <log_1>
		return;
    2fe0:	e7ca      	b.n	2f78 <main+0x18>
	printk("Advertising successfully started\n");
    2fe2:	483b      	ldr	r0, [pc, #236]	; (30d0 <main+0x170>)
    2fe4:	f01b f9ce 	bl	1e384 <printk>
    2fe8:	e7de      	b.n	2fa8 <main+0x48>
	config.frequency = 868100000;
    2fea:	4b3a      	ldr	r3, [pc, #232]	; (30d4 <main+0x174>)
    2fec:	9306      	str	r3, [sp, #24]
	config.bandwidth = 0;
    2fee:	f44f 6320 	mov.w	r3, #2560	; 0xa00
    2ff2:	f8ad 301c 	strh.w	r3, [sp, #28]
	config.coding_rate = 1;
    2ff6:	2301      	movs	r3, #1
    2ff8:	f88d 301e 	strb.w	r3, [sp, #30]
	config.preamble_len = 8;
    2ffc:	4b36      	ldr	r3, [pc, #216]	; (30d8 <main+0x178>)
    2ffe:	9308      	str	r3, [sp, #32]
			      struct lora_modem_config *config)
{
	const struct lora_driver_api *api =
		(const struct lora_driver_api *)dev->api;

	return api->config(dev, config);
    3000:	6883      	ldr	r3, [r0, #8]
    3002:	a906      	add	r1, sp, #24
    3004:	681b      	ldr	r3, [r3, #0]
    3006:	4798      	blx	r3
	if (ret < 0) {
    3008:	2800      	cmp	r0, #0
    300a:	db1e      	blt.n	304a <main+0xea>
		printk("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
    300c:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 30e8 <main+0x188>
		printk("bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb");
    3010:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 30ec <main+0x18c>
    3014:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    3018:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
		printk("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
    301c:	4648      	mov	r0, r9
    301e:	f01b f9b1 	bl	1e384 <printk>
			    k_timeout_t timeout, int16_t *rssi, int8_t *snr)
{
	const struct lora_driver_api *api =
		(const struct lora_driver_api *)dev->api;

	return api->recv(dev, data, size, timeout, rssi, snr);
    3022:	68ab      	ldr	r3, [r5, #8]
    3024:	f10d 0213 	add.w	r2, sp, #19
    3028:	e9cd 6700 	strd	r6, r7, [sp]
    302c:	9203      	str	r2, [sp, #12]
    302e:	f10d 0216 	add.w	r2, sp, #22
    3032:	9202      	str	r2, [sp, #8]
    3034:	689b      	ldr	r3, [r3, #8]
    3036:	2214      	movs	r2, #20
    3038:	a909      	add	r1, sp, #36	; 0x24
    303a:	4628      	mov	r0, r5
    303c:	4798      	blx	r3
		if (len < 0) {
    303e:	2800      	cmp	r0, #0
    3040:	da09      	bge.n	3056 <main+0xf6>
			LOG_ERR("LoRa receive failed");
    3042:	4826      	ldr	r0, [pc, #152]	; (30dc <main+0x17c>)
    3044:	f044 0101 	orr.w	r1, r4, #1
    3048:	e002      	b.n	3050 <main+0xf0>
		LOG_ERR("Lora config failed");
    304a:	4825      	ldr	r0, [pc, #148]	; (30e0 <main+0x180>)
    304c:	f044 0101 	orr.w	r1, r4, #1
			LOG_ERR("LoRa receive failed");
    3050:	f01b fd72 	bl	1eb38 <log_0>
			return;
    3054:	e790      	b.n	2f78 <main+0x18>
		printk("bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb");
    3056:	4640      	mov	r0, r8
    3058:	f01b f994 	bl	1e384 <printk>
		rssi = (uint8_t) -rssi; // negated to fit into an unsigned int (original value is negative)
    305c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    3060:	425b      	negs	r3, r3
    3062:	b2db      	uxtb	r3, r3
    3064:	f8ad 3016 	strh.w	r3, [sp, #22]
		ndata[0] = rssi;
    3068:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_lres_notify(data, type_of_notification);
    306c:	2100      	movs	r1, #0
		ndata[1] = snr;
    306e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    3072:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_lres_notify(data, type_of_notification);
    3076:	a805      	add	r0, sp, #20
    3078:	f001 fc04 	bl	4884 <bt_lres_notify>
    307c:	2101      	movs	r1, #1
    307e:	a809      	add	r0, sp, #36	; 0x24
    3080:	f001 fc00 	bl	4884 <bt_lres_notify>
		LOG_INF("Received data: %s (RSSI:%ddBm, SNR:%ddBm)",
    3084:	a809      	add	r0, sp, #36	; 0x24
    3086:	f000 fe31 	bl	3cec <log_strdup>
    308a:	f044 0a03 	orr.w	sl, r4, #3
    308e:	4601      	mov	r1, r0
    3090:	f99d 3013 	ldrsb.w	r3, [sp, #19]
    3094:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
    3098:	4812      	ldr	r0, [pc, #72]	; (30e4 <main+0x184>)
    309a:	f8ad a000 	strh.w	sl, [sp]
    309e:	f01b fd85 	bl	1ebac <log_3>
    30a2:	e7bb      	b.n	301c <main+0xbc>
    30a4:	0002542d 	.word	0x0002542d
    30a8:	00023b10 	.word	0x00023b10
    30ac:	0002544d 	.word	0x0002544d
    30b0:	00023c10 	.word	0x00023c10
    30b4:	00025464 	.word	0x00025464
    30b8:	2000015c 	.word	0x2000015c
    30bc:	20000138 	.word	0x20000138
    30c0:	000254ac 	.word	0x000254ac
    30c4:	00023a5c 	.word	0x00023a5c
    30c8:	0002393c 	.word	0x0002393c
    30cc:	000254b3 	.word	0x000254b3
    30d0:	0002548a 	.word	0x0002548a
    30d4:	33be27a0 	.word	0x33be27a0
    30d8:	00050008 	.word	0x00050008
    30dc:	00025501 	.word	0x00025501
    30e0:	000254c7 	.word	0x000254c7
    30e4:	0002553d 	.word	0x0002553d
    30e8:	000254da 	.word	0x000254da
    30ec:	00025515 	.word	0x00025515

000030f0 <__printk_hook_install>:
 *
 * @return N/A
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
    30f0:	4b01      	ldr	r3, [pc, #4]	; (30f8 <__printk_hook_install+0x8>)
    30f2:	6018      	str	r0, [r3, #0]
}
    30f4:	4770      	bx	lr
    30f6:	bf00      	nop
    30f8:	20000178 	.word	0x20000178

000030fc <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    30fc:	b530      	push	{r4, r5, lr}
    30fe:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    3100:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    3104:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    3106:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
    3108:	a901      	add	r1, sp, #4
    310a:	4805      	ldr	r0, [pc, #20]	; (3120 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    310c:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    310e:	f000 f955 	bl	33bc <cbvprintf>

	if (ctx.count < ctx.max) {
    3112:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    3116:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    3118:	bfb8      	it	lt
    311a:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    311c:	b005      	add	sp, #20
    311e:	bd30      	pop	{r4, r5, pc}
    3120:	0001e35f 	.word	0x0001e35f

00003124 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    3124:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    3128:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    312c:	f019 0808 	ands.w	r8, r9, #8
{
    3130:	4604      	mov	r4, r0
    3132:	4693      	mov	fp, r2
	if (processing) {
    3134:	d00d      	beq.n	3152 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    3136:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    3138:	bf0c      	ite	eq
    313a:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    313e:	f049 0920 	orrne.w	r9, r9, #32
    3142:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    3146:	f38b 8811 	msr	BASEPRI, fp
    314a:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    314e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    3152:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    3156:	2902      	cmp	r1, #2
    3158:	d107      	bne.n	316a <process_event+0x46>
			evt = process_recheck(mgr);
    315a:	4620      	mov	r0, r4
    315c:	f01b f92c 	bl	1e3b8 <process_recheck>
		if (evt == EVT_NOP) {
    3160:	2800      	cmp	r0, #0
    3162:	d0f0      	beq.n	3146 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    3164:	2801      	cmp	r0, #1
    3166:	8b23      	ldrh	r3, [r4, #24]
    3168:	d150      	bne.n	320c <process_event+0xe8>
			res = mgr->last_res;
    316a:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    316c:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    316e:	2f00      	cmp	r7, #0
    3170:	da15      	bge.n	319e <process_event+0x7a>
		*clients = mgr->clients;
    3172:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3174:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    3178:	e9c4 8800 	strd	r8, r8, [r4]
    317c:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    3180:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    3182:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    3184:	8b21      	ldrh	r1, [r4, #24]
    3186:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    318a:	45ca      	cmp	sl, r9
    318c:	d002      	beq.n	3194 <process_event+0x70>
		if (do_monitors
    318e:	68a3      	ldr	r3, [r4, #8]
    3190:	2b00      	cmp	r3, #0
    3192:	d15c      	bne.n	324e <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
    3194:	b90d      	cbnz	r5, 319a <process_event+0x76>
		    || (transit != NULL)) {
    3196:	2e00      	cmp	r6, #0
    3198:	d074      	beq.n	3284 <process_event+0x160>
    319a:	2300      	movs	r3, #0
    319c:	e058      	b.n	3250 <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    319e:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    31a2:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    31a4:	2a01      	cmp	r2, #1
    31a6:	d820      	bhi.n	31ea <process_event+0xc6>
		*clients = mgr->clients;
    31a8:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    31ac:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    31ae:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
    31b0:	b289      	uxth	r1, r1
	list->tail = NULL;
    31b2:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    31b6:	d10c      	bne.n	31d2 <process_event+0xae>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    31b8:	2d00      	cmp	r5, #0
    31ba:	462b      	mov	r3, r5
    31bc:	bf38      	it	cc
    31be:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    31c0:	b12b      	cbz	r3, 31ce <process_event+0xaa>
				mgr->refs += 1U;
    31c2:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    31c4:	681b      	ldr	r3, [r3, #0]
    31c6:	3201      	adds	r2, #1
    31c8:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    31ca:	2b00      	cmp	r3, #0
    31cc:	d1f8      	bne.n	31c0 <process_event+0x9c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    31ce:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    31d2:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    31d4:	4620      	mov	r0, r4
    31d6:	f01b f8ef 	bl	1e3b8 <process_recheck>
    31da:	4606      	mov	r6, r0
    31dc:	2800      	cmp	r0, #0
    31de:	d0d1      	beq.n	3184 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    31e0:	8b23      	ldrh	r3, [r4, #24]
    31e2:	f043 0320 	orr.w	r3, r3, #32
    31e6:	8323      	strh	r3, [r4, #24]
    31e8:	e7cb      	b.n	3182 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    31ea:	2b04      	cmp	r3, #4
    31ec:	d10c      	bne.n	3208 <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    31ee:	f021 0107 	bic.w	r1, r1, #7
    31f2:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    31f4:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    31f6:	4620      	mov	r0, r4
    31f8:	f01b f8de 	bl	1e3b8 <process_recheck>
    31fc:	4605      	mov	r5, r0
    31fe:	2800      	cmp	r0, #0
    3200:	d0bf      	beq.n	3182 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    3202:	f041 0120 	orr.w	r1, r1, #32
    3206:	8321      	strh	r1, [r4, #24]
    3208:	2500      	movs	r5, #0
    320a:	e7ba      	b.n	3182 <process_event+0x5e>
		} else if (evt == EVT_START) {
    320c:	2803      	cmp	r0, #3
    320e:	d109      	bne.n	3224 <process_event+0x100>
			transit = mgr->transitions->start;
    3210:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3212:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    3216:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3218:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    321c:	8323      	strh	r3, [r4, #24]
}
    321e:	2500      	movs	r5, #0
		res = 0;
    3220:	462f      	mov	r7, r5
    3222:	e7af      	b.n	3184 <process_event+0x60>
		} else if (evt == EVT_STOP) {
    3224:	2804      	cmp	r0, #4
    3226:	d106      	bne.n	3236 <process_event+0x112>
			transit = mgr->transitions->stop;
    3228:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    322a:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    322e:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3230:	f043 0304 	orr.w	r3, r3, #4
    3234:	e7f2      	b.n	321c <process_event+0xf8>
		} else if (evt == EVT_RESET) {
    3236:	2805      	cmp	r0, #5
    3238:	d106      	bne.n	3248 <process_event+0x124>
			transit = mgr->transitions->reset;
    323a:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    323c:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    3240:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3242:	f043 0305 	orr.w	r3, r3, #5
    3246:	e7e9      	b.n	321c <process_event+0xf8>
    3248:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    324a:	462e      	mov	r6, r5
    324c:	e7e8      	b.n	3220 <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
    324e:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    3250:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    3254:	8321      	strh	r1, [r4, #24]
    3256:	f38b 8811 	msr	BASEPRI, fp
    325a:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    325e:	bb03      	cbnz	r3, 32a2 <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
    3260:	2d00      	cmp	r5, #0
    3262:	d133      	bne.n	32cc <process_event+0x1a8>
			if (transit != NULL) {
    3264:	b116      	cbz	r6, 326c <process_event+0x148>
				transit(mgr, transition_complete);
    3266:	4921      	ldr	r1, [pc, #132]	; (32ec <process_event+0x1c8>)
    3268:	4620      	mov	r0, r4
    326a:	47b0      	blx	r6
	__asm__ volatile(
    326c:	f04f 0320 	mov.w	r3, #32
    3270:	f3ef 8b11 	mrs	fp, BASEPRI
    3274:	f383 8811 	msr	BASEPRI, r3
    3278:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    327c:	8b23      	ldrh	r3, [r4, #24]
    327e:	f023 0308 	bic.w	r3, r3, #8
    3282:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    3284:	8b23      	ldrh	r3, [r4, #24]
    3286:	06da      	lsls	r2, r3, #27
    3288:	d528      	bpl.n	32dc <process_event+0x1b8>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    328a:	f023 0310 	bic.w	r3, r3, #16
    328e:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    3290:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    3292:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    3296:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    329a:	2900      	cmp	r1, #0
    329c:	f47f af5b 	bne.w	3156 <process_event+0x32>
out:
    32a0:	e751      	b.n	3146 <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    32a2:	68a1      	ldr	r1, [r4, #8]
    32a4:	2900      	cmp	r1, #0
    32a6:	d0db      	beq.n	3260 <process_event+0x13c>
	return node->next;
    32a8:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
    32aa:	f8d1 b004 	ldr.w	fp, [r1, #4]
    32ae:	2b00      	cmp	r3, #0
    32b0:	bf38      	it	cc
    32b2:	2300      	movcc	r3, #0
    32b4:	4699      	mov	r9, r3
    32b6:	4652      	mov	r2, sl
    32b8:	463b      	mov	r3, r7
    32ba:	4620      	mov	r0, r4
    32bc:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    32be:	f1b9 0f00 	cmp.w	r9, #0
    32c2:	d0cd      	beq.n	3260 <process_event+0x13c>
    32c4:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    32c8:	4649      	mov	r1, r9
    32ca:	e7ee      	b.n	32aa <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    32cc:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    32ce:	463b      	mov	r3, r7
    32d0:	4652      	mov	r2, sl
    32d2:	4620      	mov	r0, r4
    32d4:	682d      	ldr	r5, [r5, #0]
    32d6:	f01b f88b 	bl	1e3f0 <notify_one>
    32da:	e7c1      	b.n	3260 <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    32dc:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    32e0:	bf1e      	ittt	ne
    32e2:	f023 0320 	bicne.w	r3, r3, #32
    32e6:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    32e8:	2102      	movne	r1, #2
    32ea:	e7d2      	b.n	3292 <process_event+0x16e>
    32ec:	0001e41d 	.word	0x0001e41d

000032f0 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    32f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
    32f2:	4e09      	ldr	r6, [pc, #36]	; (3318 <extract_decimal+0x28>)
    32f4:	6801      	ldr	r1, [r0, #0]
{
    32f6:	4602      	mov	r2, r0
		val = 10U * val + *sp++ - '0';
    32f8:	270a      	movs	r7, #10
	size_t val = 0;
    32fa:	2000      	movs	r0, #0
    32fc:	460c      	mov	r4, r1
	while (isdigit((int)(unsigned char)*sp)) {
    32fe:	3101      	adds	r1, #1
    3300:	7823      	ldrb	r3, [r4, #0]
    3302:	5d9d      	ldrb	r5, [r3, r6]
    3304:	076d      	lsls	r5, r5, #29
    3306:	d401      	bmi.n	330c <extract_decimal+0x1c>
	}
	*str = sp;
    3308:	6014      	str	r4, [r2, #0]
	return val;
}
    330a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    330c:	fb07 3300 	mla	r3, r7, r0, r3
    3310:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    3314:	e7f2      	b.n	32fc <extract_decimal+0xc>
    3316:	bf00      	nop
    3318:	000275af 	.word	0x000275af

0000331c <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    331c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3320:	4614      	mov	r4, r2
    3322:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
    3324:	78d3      	ldrb	r3, [r2, #3]
    3326:	4a24      	ldr	r2, [pc, #144]	; (33b8 <encode_uint+0x9c>)
    3328:	f813 a002 	ldrb.w	sl, [r3, r2]
	switch (specifier) {
    332c:	2b6f      	cmp	r3, #111	; 0x6f
    332e:	f00a 0203 	and.w	r2, sl, #3
{
    3332:	4606      	mov	r6, r0
    3334:	460f      	mov	r7, r1
    3336:	9201      	str	r2, [sp, #4]
	switch (specifier) {
    3338:	d02d      	beq.n	3396 <encode_uint+0x7a>
    333a:	d828      	bhi.n	338e <encode_uint+0x72>
		return 16;
    333c:	2b58      	cmp	r3, #88	; 0x58
    333e:	bf14      	ite	ne
    3340:	250a      	movne	r5, #10
    3342:	2510      	moveq	r5, #16
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    3344:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30

	do {
		unsigned int lsv = (unsigned int)(value % radix);
    3348:	46aa      	mov	sl, r5
    334a:	f04f 0b00 	mov.w	fp, #0
    334e:	4652      	mov	r2, sl
    3350:	465b      	mov	r3, fp
    3352:	4630      	mov	r0, r6
    3354:	4639      	mov	r1, r7
    3356:	f7fd fb71 	bl	a3c <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
    335a:	2a09      	cmp	r2, #9
    335c:	b2d3      	uxtb	r3, r2
    335e:	d81f      	bhi.n	33a0 <encode_uint+0x84>
    3360:	3330      	adds	r3, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
    3362:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
    3364:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
    3366:	bf08      	it	eq
    3368:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
    336a:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
    336e:	d301      	bcc.n	3374 <encode_uint+0x58>
    3370:	45c8      	cmp	r8, r9
    3372:	d812      	bhi.n	339a <encode_uint+0x7e>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    3374:	7823      	ldrb	r3, [r4, #0]
    3376:	069b      	lsls	r3, r3, #26
    3378:	d505      	bpl.n	3386 <encode_uint+0x6a>
		if (radix == 8) {
    337a:	2d08      	cmp	r5, #8
    337c:	d116      	bne.n	33ac <encode_uint+0x90>
			conv->altform_0 = true;
    337e:	78a3      	ldrb	r3, [r4, #2]
    3380:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
    3384:	70a3      	strb	r3, [r4, #2]
		}
	}

	return bp;
}
    3386:	4640      	mov	r0, r8
    3388:	b003      	add	sp, #12
    338a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    338e:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    3392:	2b70      	cmp	r3, #112	; 0x70
    3394:	e7d3      	b.n	333e <encode_uint+0x22>
	switch (specifier) {
    3396:	2508      	movs	r5, #8
    3398:	e7d4      	b.n	3344 <encode_uint+0x28>
		value /= radix;
    339a:	4606      	mov	r6, r0
    339c:	460f      	mov	r7, r1
    339e:	e7d6      	b.n	334e <encode_uint+0x32>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    33a0:	9a01      	ldr	r2, [sp, #4]
    33a2:	2a01      	cmp	r2, #1
    33a4:	bf0c      	ite	eq
    33a6:	3337      	addeq	r3, #55	; 0x37
    33a8:	3357      	addne	r3, #87	; 0x57
    33aa:	e7da      	b.n	3362 <encode_uint+0x46>
		} else if (radix == 16) {
    33ac:	2d10      	cmp	r5, #16
    33ae:	d1ea      	bne.n	3386 <encode_uint+0x6a>
			conv->altform_0c = true;
    33b0:	78a3      	ldrb	r3, [r4, #2]
    33b2:	f043 0310 	orr.w	r3, r3, #16
    33b6:	e7e5      	b.n	3384 <encode_uint+0x68>
    33b8:	000275af 	.word	0x000275af

000033bc <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    33bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    33c0:	4682      	mov	sl, r0
    33c2:	b093      	sub	sp, #76	; 0x4c
    33c4:	468b      	mov	fp, r1
    33c6:	4691      	mov	r9, r2
    33c8:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    33ca:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    33cc:	f899 0000 	ldrb.w	r0, [r9]
    33d0:	b908      	cbnz	r0, 33d6 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    33d2:	4628      	mov	r0, r5
    33d4:	e33a      	b.n	3a4c <cbvprintf+0x690>
		if (*fp != '%') {
    33d6:	f109 0301 	add.w	r3, r9, #1
    33da:	2825      	cmp	r0, #37	; 0x25
    33dc:	9302      	str	r3, [sp, #8]
    33de:	d006      	beq.n	33ee <cbvprintf+0x32>
			OUTC('%');
    33e0:	4659      	mov	r1, fp
    33e2:	47d0      	blx	sl
    33e4:	2800      	cmp	r0, #0
    33e6:	f2c0 8331 	blt.w	3a4c <cbvprintf+0x690>
    33ea:	3501      	adds	r5, #1
			break;
    33ec:	e1f1      	b.n	37d2 <cbvprintf+0x416>
		} state = {
    33ee:	2218      	movs	r2, #24
    33f0:	2100      	movs	r1, #0
    33f2:	a80c      	add	r0, sp, #48	; 0x30
    33f4:	f020 f943 	bl	2367e <memset>
	if (*sp == '%') {
    33f8:	f899 3001 	ldrb.w	r3, [r9, #1]
    33fc:	2b25      	cmp	r3, #37	; 0x25
    33fe:	d059      	beq.n	34b4 <cbvprintf+0xf8>
    3400:	9a02      	ldr	r2, [sp, #8]
    3402:	4616      	mov	r6, r2
		switch (*sp) {
    3404:	f812 3b01 	ldrb.w	r3, [r2], #1
    3408:	2b2b      	cmp	r3, #43	; 0x2b
    340a:	f000 808b 	beq.w	3524 <cbvprintf+0x168>
    340e:	d879      	bhi.n	3504 <cbvprintf+0x148>
    3410:	2b20      	cmp	r3, #32
    3412:	f000 808c 	beq.w	352e <cbvprintf+0x172>
    3416:	2b23      	cmp	r3, #35	; 0x23
    3418:	f000 808e 	beq.w	3538 <cbvprintf+0x17c>
	if (conv->flag_zero && conv->flag_dash) {
    341c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    3420:	f003 0244 	and.w	r2, r3, #68	; 0x44
    3424:	2a44      	cmp	r2, #68	; 0x44
    3426:	d103      	bne.n	3430 <cbvprintf+0x74>
		conv->flag_zero = false;
    3428:	f36f 1386 	bfc	r3, #6, #1
    342c:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	conv->width_present = true;
    3430:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    3434:	9605      	str	r6, [sp, #20]
    3436:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    343a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (*sp == '*') {
    343e:	7833      	ldrb	r3, [r6, #0]
    3440:	2b2a      	cmp	r3, #42	; 0x2a
    3442:	d17e      	bne.n	3542 <cbvprintf+0x186>
		conv->width_star = true;
    3444:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    3448:	f043 0301 	orr.w	r3, r3, #1
    344c:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		return ++sp;
    3450:	1c73      	adds	r3, r6, #1
	sp = extract_prec(conv, sp);
    3452:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
    3454:	781a      	ldrb	r2, [r3, #0]
    3456:	2a2e      	cmp	r2, #46	; 0x2e
    3458:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    345c:	bf0c      	ite	eq
    345e:	2101      	moveq	r1, #1
    3460:	2100      	movne	r1, #0
    3462:	f361 0241 	bfi	r2, r1, #1, #1
    3466:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
    346a:	d10b      	bne.n	3484 <cbvprintf+0xc8>
	++sp;
    346c:	1c5a      	adds	r2, r3, #1
    346e:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
    3470:	785a      	ldrb	r2, [r3, #1]
    3472:	2a2a      	cmp	r2, #42	; 0x2a
    3474:	d17b      	bne.n	356e <cbvprintf+0x1b2>
		conv->prec_star = true;
    3476:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    347a:	f042 0204 	orr.w	r2, r2, #4
    347e:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		return ++sp;
    3482:	3302      	adds	r3, #2
	switch (*sp) {
    3484:	4619      	mov	r1, r3
    3486:	f811 0b01 	ldrb.w	r0, [r1], #1
    348a:	286c      	cmp	r0, #108	; 0x6c
    348c:	f000 80b6 	beq.w	35fc <cbvprintf+0x240>
    3490:	d87d      	bhi.n	358e <cbvprintf+0x1d2>
    3492:	2868      	cmp	r0, #104	; 0x68
    3494:	f000 8084 	beq.w	35a0 <cbvprintf+0x1e4>
    3498:	286a      	cmp	r0, #106	; 0x6a
    349a:	f000 80b9 	beq.w	3610 <cbvprintf+0x254>
    349e:	284c      	cmp	r0, #76	; 0x4c
    34a0:	f000 80bd 	beq.w	361e <cbvprintf+0x262>
		conv->length_mod = LENGTH_NONE;
    34a4:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    34a8:	f36f 02c6 	bfc	r2, #3, #4
    34ac:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		break;
    34b0:	4619      	mov	r1, r3
    34b2:	e080      	b.n	35b6 <cbvprintf+0x1fa>
		conv->specifier = *sp++;
    34b4:	f109 0202 	add.w	r2, r9, #2
    34b8:	9202      	str	r2, [sp, #8]
    34ba:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
    34be:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    34c2:	07d9      	lsls	r1, r3, #31
    34c4:	f140 8149 	bpl.w	375a <cbvprintf+0x39e>
			width = va_arg(ap, int);
    34c8:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    34cc:	f1b8 0f00 	cmp.w	r8, #0
    34d0:	da07      	bge.n	34e2 <cbvprintf+0x126>
				conv->flag_dash = true;
    34d2:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    34d6:	f042 0204 	orr.w	r2, r2, #4
    34da:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
    34de:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
    34e2:	075a      	lsls	r2, r3, #29
    34e4:	f140 8142 	bpl.w	376c <cbvprintf+0x3b0>
			int arg = va_arg(ap, int);
    34e8:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
    34ec:	2f00      	cmp	r7, #0
    34ee:	f280 8141 	bge.w	3774 <cbvprintf+0x3b8>
				conv->prec_present = false;
    34f2:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    34f6:	f36f 0341 	bfc	r3, #1, #1
    34fa:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
    34fe:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    3502:	e137      	b.n	3774 <cbvprintf+0x3b8>
		switch (*sp) {
    3504:	2b2d      	cmp	r3, #45	; 0x2d
    3506:	d006      	beq.n	3516 <cbvprintf+0x15a>
    3508:	2b30      	cmp	r3, #48	; 0x30
    350a:	d187      	bne.n	341c <cbvprintf+0x60>
			conv->flag_zero = true;
    350c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    3510:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3514:	e003      	b.n	351e <cbvprintf+0x162>
			conv->flag_dash = true;
    3516:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    351a:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
    351e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
			break;
    3522:	e76e      	b.n	3402 <cbvprintf+0x46>
			conv->flag_plus = true;
    3524:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    3528:	f043 0308 	orr.w	r3, r3, #8
    352c:	e7f7      	b.n	351e <cbvprintf+0x162>
			conv->flag_space = true;
    352e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    3532:	f043 0310 	orr.w	r3, r3, #16
    3536:	e7f2      	b.n	351e <cbvprintf+0x162>
			conv->flag_hash = true;
    3538:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    353c:	f043 0320 	orr.w	r3, r3, #32
    3540:	e7ed      	b.n	351e <cbvprintf+0x162>
	size_t width = extract_decimal(&sp);
    3542:	a805      	add	r0, sp, #20
    3544:	f7ff fed4 	bl	32f0 <extract_decimal>
	if (sp != wp) {
    3548:	9b05      	ldr	r3, [sp, #20]
    354a:	42b3      	cmp	r3, r6
    354c:	d081      	beq.n	3452 <cbvprintf+0x96>
		conv->unsupported |= ((conv->width_value < 0)
    354e:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		conv->width_value = width;
    3552:	900f      	str	r0, [sp, #60]	; 0x3c
		conv->unsupported |= ((conv->width_value < 0)
    3554:	f3c1 0240 	ubfx	r2, r1, #1, #1
    3558:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
    355c:	0052      	lsls	r2, r2, #1
    355e:	f062 027f 	orn	r2, r2, #127	; 0x7f
    3562:	f001 017d 	and.w	r1, r1, #125	; 0x7d
    3566:	430a      	orrs	r2, r1
    3568:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
    356c:	e771      	b.n	3452 <cbvprintf+0x96>
	size_t prec = extract_decimal(&sp);
    356e:	a805      	add	r0, sp, #20
    3570:	f7ff febe 	bl	32f0 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    3574:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	conv->prec_value = prec;
    3578:	9010      	str	r0, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
    357a:	f3c3 0240 	ubfx	r2, r3, #1, #1
    357e:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
    3582:	f360 0341 	bfi	r3, r0, #1, #1
    3586:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	return sp;
    358a:	9b05      	ldr	r3, [sp, #20]
    358c:	e77a      	b.n	3484 <cbvprintf+0xc8>
	switch (*sp) {
    358e:	2874      	cmp	r0, #116	; 0x74
    3590:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    3594:	d040      	beq.n	3618 <cbvprintf+0x25c>
    3596:	287a      	cmp	r0, #122	; 0x7a
    3598:	d184      	bne.n	34a4 <cbvprintf+0xe8>
		conv->length_mod = LENGTH_Z;
    359a:	4613      	mov	r3, r2
    359c:	2206      	movs	r2, #6
    359e:	e028      	b.n	35f2 <cbvprintf+0x236>
		if (*++sp == 'h') {
    35a0:	785a      	ldrb	r2, [r3, #1]
    35a2:	2a68      	cmp	r2, #104	; 0x68
    35a4:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    35a8:	d121      	bne.n	35ee <cbvprintf+0x232>
			conv->length_mod = LENGTH_HH;
    35aa:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    35ac:	f361 02c6 	bfi	r2, r1, #3, #4
    35b0:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			++sp;
    35b4:	1c99      	adds	r1, r3, #2
	conv->specifier = *sp++;
    35b6:	460b      	mov	r3, r1
    35b8:	f813 2b01 	ldrb.w	r2, [r3], #1
    35bc:	9302      	str	r3, [sp, #8]
	switch (conv->specifier) {
    35be:	2a78      	cmp	r2, #120	; 0x78
    35c0:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
	conv->specifier = *sp++;
    35c4:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
    35c8:	f200 80bf 	bhi.w	374a <cbvprintf+0x38e>
    35cc:	2a57      	cmp	r2, #87	; 0x57
    35ce:	d833      	bhi.n	3638 <cbvprintf+0x27c>
    35d0:	2a41      	cmp	r2, #65	; 0x41
    35d2:	d003      	beq.n	35dc <cbvprintf+0x220>
    35d4:	3a45      	subs	r2, #69	; 0x45
    35d6:	2a02      	cmp	r2, #2
    35d8:	f200 80b7 	bhi.w	374a <cbvprintf+0x38e>
		conv->specifier_cat = SPECIFIER_FP;
    35dc:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    35e0:	2204      	movs	r2, #4
    35e2:	f362 0302 	bfi	r3, r2, #0, #3
    35e6:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			unsupported = true;
    35ea:	2301      	movs	r3, #1
			break;
    35ec:	e084      	b.n	36f8 <cbvprintf+0x33c>
			conv->length_mod = LENGTH_H;
    35ee:	4613      	mov	r3, r2
    35f0:	2202      	movs	r2, #2
			conv->length_mod = LENGTH_L;
    35f2:	f362 03c6 	bfi	r3, r2, #3, #4
    35f6:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    35fa:	e7dc      	b.n	35b6 <cbvprintf+0x1fa>
		if (*++sp == 'l') {
    35fc:	785a      	ldrb	r2, [r3, #1]
    35fe:	2a6c      	cmp	r2, #108	; 0x6c
    3600:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    3604:	d101      	bne.n	360a <cbvprintf+0x24e>
			conv->length_mod = LENGTH_LL;
    3606:	2104      	movs	r1, #4
    3608:	e7d0      	b.n	35ac <cbvprintf+0x1f0>
			conv->length_mod = LENGTH_L;
    360a:	4613      	mov	r3, r2
    360c:	2203      	movs	r2, #3
    360e:	e7f0      	b.n	35f2 <cbvprintf+0x236>
		conv->length_mod = LENGTH_J;
    3610:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    3614:	2205      	movs	r2, #5
    3616:	e7ec      	b.n	35f2 <cbvprintf+0x236>
		conv->length_mod = LENGTH_T;
    3618:	4613      	mov	r3, r2
    361a:	2207      	movs	r2, #7
    361c:	e7e9      	b.n	35f2 <cbvprintf+0x236>
		conv->unsupported = true;
    361e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    3622:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    3626:	f023 0302 	bic.w	r3, r3, #2
    362a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    362e:	f043 0302 	orr.w	r3, r3, #2
    3632:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
    3636:	e7be      	b.n	35b6 <cbvprintf+0x1fa>
    3638:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    363c:	2920      	cmp	r1, #32
    363e:	f200 8084 	bhi.w	374a <cbvprintf+0x38e>
    3642:	a001      	add	r0, pc, #4	; (adr r0, 3648 <cbvprintf+0x28c>)
    3644:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    3648:	0000370d 	.word	0x0000370d
    364c:	0000374b 	.word	0x0000374b
    3650:	0000374b 	.word	0x0000374b
    3654:	0000374b 	.word	0x0000374b
    3658:	0000374b 	.word	0x0000374b
    365c:	0000374b 	.word	0x0000374b
    3660:	0000374b 	.word	0x0000374b
    3664:	0000374b 	.word	0x0000374b
    3668:	0000374b 	.word	0x0000374b
    366c:	000035dd 	.word	0x000035dd
    3670:	0000374b 	.word	0x0000374b
    3674:	0000370d 	.word	0x0000370d
    3678:	000036cd 	.word	0x000036cd
    367c:	000035dd 	.word	0x000035dd
    3680:	000035dd 	.word	0x000035dd
    3684:	000035dd 	.word	0x000035dd
    3688:	0000374b 	.word	0x0000374b
    368c:	000036cd 	.word	0x000036cd
    3690:	0000374b 	.word	0x0000374b
    3694:	0000374b 	.word	0x0000374b
    3698:	0000374b 	.word	0x0000374b
    369c:	0000374b 	.word	0x0000374b
    36a0:	00003715 	.word	0x00003715
    36a4:	0000370d 	.word	0x0000370d
    36a8:	00003731 	.word	0x00003731
    36ac:	0000374b 	.word	0x0000374b
    36b0:	0000374b 	.word	0x0000374b
    36b4:	00003731 	.word	0x00003731
    36b8:	0000374b 	.word	0x0000374b
    36bc:	0000370d 	.word	0x0000370d
    36c0:	0000374b 	.word	0x0000374b
    36c4:	0000374b 	.word	0x0000374b
    36c8:	0000370d 	.word	0x0000370d
		conv->specifier_cat = SPECIFIER_SINT;
    36cc:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
    36d0:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    36d2:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    36d6:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    36da:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    36dc:	f88d 103a 	strb.w	r1, [sp, #58]	; 0x3a
			conv->invalid = true;
    36e0:	bf02      	ittt	eq
    36e2:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
    36e6:	f041 0101 	orreq.w	r1, r1, #1
    36ea:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
    36ee:	2a63      	cmp	r2, #99	; 0x63
    36f0:	d131      	bne.n	3756 <cbvprintf+0x39a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    36f2:	3b00      	subs	r3, #0
    36f4:	bf18      	it	ne
    36f6:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    36f8:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    36fc:	f3c2 0140 	ubfx	r1, r2, #1, #1
    3700:	430b      	orrs	r3, r1
    3702:	f363 0241 	bfi	r2, r3, #1, #1
    3706:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
    370a:	e6d8      	b.n	34be <cbvprintf+0x102>
		conv->specifier_cat = SPECIFIER_UINT;
    370c:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
    3710:	2002      	movs	r0, #2
    3712:	e7de      	b.n	36d2 <cbvprintf+0x316>
		conv->specifier_cat = SPECIFIER_PTR;
    3714:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    3718:	f003 0378 	and.w	r3, r3, #120	; 0x78
    371c:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    3720:	2103      	movs	r1, #3
    3722:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    3726:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    3728:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    372c:	4143      	adcs	r3, r0
    372e:	e7e3      	b.n	36f8 <cbvprintf+0x33c>
		conv->specifier_cat = SPECIFIER_PTR;
    3730:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
    3734:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    3736:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    373a:	f361 0202 	bfi	r2, r1, #0, #3
    373e:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
    3742:	bf14      	ite	ne
    3744:	2301      	movne	r3, #1
    3746:	2300      	moveq	r3, #0
    3748:	e7d6      	b.n	36f8 <cbvprintf+0x33c>
		conv->invalid = true;
    374a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    374e:	f043 0301 	orr.w	r3, r3, #1
    3752:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	bool unsupported = false;
    3756:	2300      	movs	r3, #0
    3758:	e7ce      	b.n	36f8 <cbvprintf+0x33c>
		} else if (conv->width_present) {
    375a:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
    375e:	2a00      	cmp	r2, #0
			width = conv->width_value;
    3760:	bfb4      	ite	lt
    3762:	f8dd 803c 	ldrlt.w	r8, [sp, #60]	; 0x3c
		int width = -1;
    3766:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
    376a:	e6ba      	b.n	34e2 <cbvprintf+0x126>
		} else if (conv->prec_present) {
    376c:	079f      	lsls	r7, r3, #30
    376e:	f57f aec6 	bpl.w	34fe <cbvprintf+0x142>
			precision = conv->prec_value;
    3772:	9f10      	ldr	r7, [sp, #64]	; 0x40
			= (enum length_mod_enum)conv->length_mod;
    3774:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		conv->pad0_value = 0;
    3778:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    377a:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
			= (enum specifier_cat_enum)conv->specifier_cat;
    377e:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		enum specifier_cat_enum specifier_cat
    3782:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    3786:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    3788:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    378c:	d137      	bne.n	37fe <cbvprintf+0x442>
			switch (length_mod) {
    378e:	1ecb      	subs	r3, r1, #3
    3790:	2b04      	cmp	r3, #4
    3792:	d821      	bhi.n	37d8 <cbvprintf+0x41c>
    3794:	e8df f003 	tbb	[pc, r3]
    3798:	20070703 	.word	0x20070703
    379c:	20          	.byte	0x20
    379d:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    379e:	f854 2b04 	ldr.w	r2, [r4], #4
				value->sint = (short)value->sint;
    37a2:	17d3      	asrs	r3, r2, #31
    37a4:	e004      	b.n	37b0 <cbvprintf+0x3f4>
					(sint_value_type)va_arg(ap, intmax_t);
    37a6:	3407      	adds	r4, #7
    37a8:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    37ac:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->sint = (short)value->sint;
    37b0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
    37b4:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    37b8:	f013 0603 	ands.w	r6, r3, #3
    37bc:	d055      	beq.n	386a <cbvprintf+0x4ae>
			OUTS(sp, fp);
    37be:	9b02      	ldr	r3, [sp, #8]
    37c0:	464a      	mov	r2, r9
    37c2:	4659      	mov	r1, fp
    37c4:	4650      	mov	r0, sl
    37c6:	f01b f97d 	bl	1eac4 <outs>
    37ca:	2800      	cmp	r0, #0
    37cc:	f2c0 813e 	blt.w	3a4c <cbvprintf+0x690>
    37d0:	4405      	add	r5, r0
			OUTS(bps, bpe);
    37d2:	f8dd 9008 	ldr.w	r9, [sp, #8]
    37d6:	e5f9      	b.n	33cc <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    37d8:	f854 2b04 	ldr.w	r2, [r4], #4
			if (length_mod == LENGTH_HH) {
    37dc:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    37de:	ea4f 73e2 	mov.w	r3, r2, asr #31
    37e2:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    37e6:	d105      	bne.n	37f4 <cbvprintf+0x438>
				value->uint = (unsigned char)value->uint;
    37e8:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
    37ec:	930c      	str	r3, [sp, #48]	; 0x30
    37ee:	2300      	movs	r3, #0
    37f0:	930d      	str	r3, [sp, #52]	; 0x34
    37f2:	e7df      	b.n	37b4 <cbvprintf+0x3f8>
			} else if (length_mod == LENGTH_H) {
    37f4:	2902      	cmp	r1, #2
    37f6:	d1dd      	bne.n	37b4 <cbvprintf+0x3f8>
				value->sint = (short)value->sint;
    37f8:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
    37fc:	e7d1      	b.n	37a2 <cbvprintf+0x3e6>
		} else if (specifier_cat == SPECIFIER_UINT) {
    37fe:	2b02      	cmp	r3, #2
    3800:	d123      	bne.n	384a <cbvprintf+0x48e>
			switch (length_mod) {
    3802:	1ecb      	subs	r3, r1, #3
    3804:	2b04      	cmp	r3, #4
    3806:	d813      	bhi.n	3830 <cbvprintf+0x474>
    3808:	e8df f003 	tbb	[pc, r3]
    380c:	120a0a03 	.word	0x120a0a03
    3810:	12          	.byte	0x12
    3811:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    3812:	6822      	ldr	r2, [r4, #0]
    3814:	920c      	str	r2, [sp, #48]	; 0x30
    3816:	2300      	movs	r3, #0
    3818:	1d20      	adds	r0, r4, #4
    381a:	930d      	str	r3, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
    381c:	4604      	mov	r4, r0
    381e:	e7c9      	b.n	37b4 <cbvprintf+0x3f8>
					(uint_value_type)va_arg(ap,
    3820:	3407      	adds	r4, #7
    3822:	f024 0007 	bic.w	r0, r4, #7
				value->uint =
    3826:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    382a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				break;
    382e:	e7f5      	b.n	381c <cbvprintf+0x460>
					(uint_value_type)va_arg(ap, size_t);
    3830:	f854 3b04 	ldr.w	r3, [r4], #4
    3834:	930c      	str	r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    3836:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    3838:	f04f 0300 	mov.w	r3, #0
    383c:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
    383e:	d0d3      	beq.n	37e8 <cbvprintf+0x42c>
			} else if (length_mod == LENGTH_H) {
    3840:	2902      	cmp	r1, #2
    3842:	d1b7      	bne.n	37b4 <cbvprintf+0x3f8>
				value->uint = (unsigned short)value->uint;
    3844:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    3848:	e7d0      	b.n	37ec <cbvprintf+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
    384a:	2b04      	cmp	r3, #4
    384c:	d107      	bne.n	385e <cbvprintf+0x4a2>
			if (length_mod == LENGTH_UPPER_L) {
    384e:	3407      	adds	r4, #7
    3850:	f024 0407 	bic.w	r4, r4, #7
    3854:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->ldbl = va_arg(ap, long double);
    3858:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    385c:	e7aa      	b.n	37b4 <cbvprintf+0x3f8>
		} else if (specifier_cat == SPECIFIER_PTR) {
    385e:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    3860:	bf04      	itt	eq
    3862:	f854 3b04 	ldreq.w	r3, [r4], #4
    3866:	930c      	streq	r3, [sp, #48]	; 0x30
    3868:	e7a4      	b.n	37b4 <cbvprintf+0x3f8>
		switch (conv->specifier) {
    386a:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    386e:	2878      	cmp	r0, #120	; 0x78
    3870:	d8af      	bhi.n	37d2 <cbvprintf+0x416>
    3872:	2862      	cmp	r0, #98	; 0x62
    3874:	d820      	bhi.n	38b8 <cbvprintf+0x4fc>
    3876:	2825      	cmp	r0, #37	; 0x25
    3878:	f43f adb2 	beq.w	33e0 <cbvprintf+0x24>
    387c:	2858      	cmp	r0, #88	; 0x58
    387e:	d1a8      	bne.n	37d2 <cbvprintf+0x416>
			bps = encode_uint(value->uint, conv, buf, bpe);
    3880:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
    3884:	9300      	str	r3, [sp, #0]
    3886:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    388a:	ab06      	add	r3, sp, #24
    388c:	aa0e      	add	r2, sp, #56	; 0x38
    388e:	f7ff fd45 	bl	331c <encode_uint>
    3892:	4681      	mov	r9, r0
			if (precision >= 0) {
    3894:	2f00      	cmp	r7, #0
    3896:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
    389a:	db0b      	blt.n	38b4 <cbvprintf+0x4f8>
				conv->flag_zero = false;
    389c:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
				size_t len = bpe - bps;
    38a0:	eba0 0309 	sub.w	r3, r0, r9
				conv->flag_zero = false;
    38a4:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    38a8:	429f      	cmp	r7, r3
				conv->flag_zero = false;
    38aa:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
    38ae:	d901      	bls.n	38b4 <cbvprintf+0x4f8>
					conv->pad0_value = precision - (int)len;
    38b0:	1aff      	subs	r7, r7, r3
    38b2:	970f      	str	r7, [sp, #60]	; 0x3c
		const char *bpe = buf + sizeof(buf);
    38b4:	4607      	mov	r7, r0
    38b6:	e03c      	b.n	3932 <cbvprintf+0x576>
    38b8:	3863      	subs	r0, #99	; 0x63
    38ba:	2815      	cmp	r0, #21
    38bc:	d889      	bhi.n	37d2 <cbvprintf+0x416>
    38be:	a201      	add	r2, pc, #4	; (adr r2, 38c4 <cbvprintf+0x508>)
    38c0:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    38c4:	00003943 	.word	0x00003943
    38c8:	000039a5 	.word	0x000039a5
    38cc:	000037d3 	.word	0x000037d3
    38d0:	000037d3 	.word	0x000037d3
    38d4:	000037d3 	.word	0x000037d3
    38d8:	000037d3 	.word	0x000037d3
    38dc:	000039a5 	.word	0x000039a5
    38e0:	000037d3 	.word	0x000037d3
    38e4:	000037d3 	.word	0x000037d3
    38e8:	000037d3 	.word	0x000037d3
    38ec:	000037d3 	.word	0x000037d3
    38f0:	00003a03 	.word	0x00003a03
    38f4:	000039d1 	.word	0x000039d1
    38f8:	000039d5 	.word	0x000039d5
    38fc:	000037d3 	.word	0x000037d3
    3900:	000037d3 	.word	0x000037d3
    3904:	0000391d 	.word	0x0000391d
    3908:	000037d3 	.word	0x000037d3
    390c:	000039d1 	.word	0x000039d1
    3910:	000037d3 	.word	0x000037d3
    3914:	000037d3 	.word	0x000037d3
    3918:	000039d1 	.word	0x000039d1
			if (precision >= 0) {
    391c:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
    391e:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
			if (precision >= 0) {
    3922:	db0a      	blt.n	393a <cbvprintf+0x57e>
				len = strnlen(bps, precision);
    3924:	4639      	mov	r1, r7
    3926:	4648      	mov	r0, r9
    3928:	f01f fecc 	bl	236c4 <strnlen>
			bpe = bps + len;
    392c:	eb09 0700 	add.w	r7, r9, r0
		char sign = 0;
    3930:	2600      	movs	r6, #0
		if (bps == NULL) {
    3932:	f1b9 0f00 	cmp.w	r9, #0
    3936:	d10c      	bne.n	3952 <cbvprintf+0x596>
    3938:	e74b      	b.n	37d2 <cbvprintf+0x416>
				len = strlen(bps);
    393a:	4648      	mov	r0, r9
    393c:	f7fd fa04 	bl	d48 <strlen>
    3940:	e7f4      	b.n	392c <cbvprintf+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    3942:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3944:	f88d 3018 	strb.w	r3, [sp, #24]
			break;
    3948:	2600      	movs	r6, #0
			bpe = buf + 1;
    394a:	f10d 0719 	add.w	r7, sp, #25
			bps = buf;
    394e:	f10d 0918 	add.w	r9, sp, #24
		size_t nj_len = (bpe - bps);
    3952:	eba7 0309 	sub.w	r3, r7, r9
		if (sign != 0) {
    3956:	b106      	cbz	r6, 395a <cbvprintf+0x59e>
			nj_len += 1U;
    3958:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    395a:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
    395e:	06d0      	lsls	r0, r2, #27
    3960:	d569      	bpl.n	3a36 <cbvprintf+0x67a>
			nj_len += 2U;
    3962:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    3964:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    3966:	990f      	ldr	r1, [sp, #60]	; 0x3c
			nj_len += conv->pad0_pre_exp;
    3968:	bf48      	it	mi
    396a:	9a10      	ldrmi	r2, [sp, #64]	; 0x40
		nj_len += conv->pad0_value;
    396c:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    396e:	bf48      	it	mi
    3970:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    3972:	f1b8 0f00 	cmp.w	r8, #0
    3976:	dd76      	ble.n	3a66 <cbvprintf+0x6aa>
			if (!conv->flag_dash) {
    3978:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
			width -= (int)nj_len;
    397c:	eba8 0803 	sub.w	r8, r8, r3
			if (!conv->flag_dash) {
    3980:	f3c2 0380 	ubfx	r3, r2, #2, #1
    3984:	9303      	str	r3, [sp, #12]
    3986:	0753      	lsls	r3, r2, #29
    3988:	d46d      	bmi.n	3a66 <cbvprintf+0x6aa>
				if (conv->flag_zero) {
    398a:	0650      	lsls	r0, r2, #25
    398c:	d561      	bpl.n	3a52 <cbvprintf+0x696>
					if (sign != 0) {
    398e:	b13e      	cbz	r6, 39a0 <cbvprintf+0x5e4>
						OUTC(sign);
    3990:	4659      	mov	r1, fp
    3992:	4630      	mov	r0, r6
    3994:	47d0      	blx	sl
    3996:	2800      	cmp	r0, #0
    3998:	db58      	blt.n	3a4c <cbvprintf+0x690>
						sign = 0;
    399a:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    399c:	3501      	adds	r5, #1
						sign = 0;
    399e:	461e      	mov	r6, r3
					pad = '0';
    39a0:	2330      	movs	r3, #48	; 0x30
    39a2:	e057      	b.n	3a54 <cbvprintf+0x698>
			if (conv->flag_plus) {
    39a4:	071e      	lsls	r6, r3, #28
    39a6:	d411      	bmi.n	39cc <cbvprintf+0x610>
				sign = ' ';
    39a8:	f013 0610 	ands.w	r6, r3, #16
    39ac:	bf18      	it	ne
    39ae:	2620      	movne	r6, #32
			sint = value->sint;
    39b0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
    39b4:	2a00      	cmp	r2, #0
    39b6:	f173 0100 	sbcs.w	r1, r3, #0
    39ba:	f6bf af61 	bge.w	3880 <cbvprintf+0x4c4>
				value->uint = (uint_value_type)-sint;
    39be:	4252      	negs	r2, r2
    39c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    39c4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
    39c8:	262d      	movs	r6, #45	; 0x2d
    39ca:	e759      	b.n	3880 <cbvprintf+0x4c4>
				sign = '+';
    39cc:	262b      	movs	r6, #43	; 0x2b
    39ce:	e7ef      	b.n	39b0 <cbvprintf+0x5f4>
		switch (conv->specifier) {
    39d0:	2600      	movs	r6, #0
    39d2:	e755      	b.n	3880 <cbvprintf+0x4c4>
			if (value->ptr != NULL) {
    39d4:	980c      	ldr	r0, [sp, #48]	; 0x30
    39d6:	b348      	cbz	r0, 3a2c <cbvprintf+0x670>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    39d8:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
    39dc:	9300      	str	r3, [sp, #0]
    39de:	aa0e      	add	r2, sp, #56	; 0x38
    39e0:	ab06      	add	r3, sp, #24
    39e2:	2100      	movs	r1, #0
    39e4:	f7ff fc9a 	bl	331c <encode_uint>
				conv->altform_0c = true;
    39e8:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
    39ec:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    39f0:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    39f4:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    39f8:	4681      	mov	r9, r0
				conv->altform_0c = true;
    39fa:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		char sign = 0;
    39fe:	2600      	movs	r6, #0
				goto prec_int_pad0;
    3a00:	e748      	b.n	3894 <cbvprintf+0x4d8>
				store_count(conv, value->ptr, count);
    3a02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
    3a04:	2907      	cmp	r1, #7
    3a06:	f63f aee4 	bhi.w	37d2 <cbvprintf+0x416>
    3a0a:	e8df f001 	tbb	[pc, r1]
    3a0e:	040d      	.short	0x040d
    3a10:	08080d06 	.word	0x08080d06
    3a14:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
    3a16:	701d      	strb	r5, [r3, #0]
		break;
    3a18:	e6db      	b.n	37d2 <cbvprintf+0x416>
		*(short *)dp = (short)count;
    3a1a:	801d      	strh	r5, [r3, #0]
		break;
    3a1c:	e6d9      	b.n	37d2 <cbvprintf+0x416>
		*(intmax_t *)dp = (intmax_t)count;
    3a1e:	4628      	mov	r0, r5
    3a20:	17e9      	asrs	r1, r5, #31
    3a22:	e9c3 0100 	strd	r0, r1, [r3]
		break;
    3a26:	e6d4      	b.n	37d2 <cbvprintf+0x416>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    3a28:	601d      	str	r5, [r3, #0]
		break;
    3a2a:	e6d2      	b.n	37d2 <cbvprintf+0x416>
			bpe = bps + 5;
    3a2c:	4f2e      	ldr	r7, [pc, #184]	; (3ae8 <cbvprintf+0x72c>)
    3a2e:	4606      	mov	r6, r0
			bps = "(nil)";
    3a30:	f1a7 0905 	sub.w	r9, r7, #5
    3a34:	e78d      	b.n	3952 <cbvprintf+0x596>
		} else if (conv->altform_0) {
    3a36:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    3a38:	bf48      	it	mi
    3a3a:	3301      	addmi	r3, #1
    3a3c:	e792      	b.n	3964 <cbvprintf+0x5a8>
					OUTC(pad);
    3a3e:	4618      	mov	r0, r3
    3a40:	4659      	mov	r1, fp
    3a42:	9303      	str	r3, [sp, #12]
    3a44:	47d0      	blx	sl
    3a46:	2800      	cmp	r0, #0
    3a48:	9b03      	ldr	r3, [sp, #12]
    3a4a:	da04      	bge.n	3a56 <cbvprintf+0x69a>
#undef OUTS
#undef OUTC
}
    3a4c:	b013      	add	sp, #76	; 0x4c
    3a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    3a52:	2320      	movs	r3, #32
    3a54:	4445      	add	r5, r8
    3a56:	4642      	mov	r2, r8
				while (width-- > 0) {
    3a58:	2a00      	cmp	r2, #0
    3a5a:	eba5 0108 	sub.w	r1, r5, r8
    3a5e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    3a62:	dcec      	bgt.n	3a3e <cbvprintf+0x682>
    3a64:	460d      	mov	r5, r1
		if (sign != 0) {
    3a66:	b12e      	cbz	r6, 3a74 <cbvprintf+0x6b8>
			OUTC(sign);
    3a68:	4659      	mov	r1, fp
    3a6a:	4630      	mov	r0, r6
    3a6c:	47d0      	blx	sl
    3a6e:	2800      	cmp	r0, #0
    3a70:	dbec      	blt.n	3a4c <cbvprintf+0x690>
    3a72:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    3a74:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    3a78:	06d9      	lsls	r1, r3, #27
    3a7a:	d401      	bmi.n	3a80 <cbvprintf+0x6c4>
    3a7c:	071a      	lsls	r2, r3, #28
    3a7e:	d505      	bpl.n	3a8c <cbvprintf+0x6d0>
				OUTC('0');
    3a80:	4659      	mov	r1, fp
    3a82:	2030      	movs	r0, #48	; 0x30
    3a84:	47d0      	blx	sl
    3a86:	2800      	cmp	r0, #0
    3a88:	dbe0      	blt.n	3a4c <cbvprintf+0x690>
    3a8a:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    3a8c:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    3a90:	06db      	lsls	r3, r3, #27
    3a92:	d506      	bpl.n	3aa2 <cbvprintf+0x6e6>
				OUTC(conv->specifier);
    3a94:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    3a98:	4659      	mov	r1, fp
    3a9a:	47d0      	blx	sl
    3a9c:	2800      	cmp	r0, #0
    3a9e:	dbd5      	blt.n	3a4c <cbvprintf+0x690>
    3aa0:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    3aa2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    3aa4:	442e      	add	r6, r5
    3aa6:	1b73      	subs	r3, r6, r5
    3aa8:	2b00      	cmp	r3, #0
    3aaa:	dc15      	bgt.n	3ad8 <cbvprintf+0x71c>
			OUTS(bps, bpe);
    3aac:	463b      	mov	r3, r7
    3aae:	464a      	mov	r2, r9
    3ab0:	4659      	mov	r1, fp
    3ab2:	4650      	mov	r0, sl
    3ab4:	f01b f806 	bl	1eac4 <outs>
    3ab8:	2800      	cmp	r0, #0
    3aba:	dbc7      	blt.n	3a4c <cbvprintf+0x690>
    3abc:	4405      	add	r5, r0
		while (width > 0) {
    3abe:	44a8      	add	r8, r5
    3ac0:	eba8 0305 	sub.w	r3, r8, r5
    3ac4:	2b00      	cmp	r3, #0
    3ac6:	f77f ae84 	ble.w	37d2 <cbvprintf+0x416>
			OUTC(' ');
    3aca:	4659      	mov	r1, fp
    3acc:	2020      	movs	r0, #32
    3ace:	47d0      	blx	sl
    3ad0:	2800      	cmp	r0, #0
    3ad2:	dbbb      	blt.n	3a4c <cbvprintf+0x690>
    3ad4:	3501      	adds	r5, #1
			--width;
    3ad6:	e7f3      	b.n	3ac0 <cbvprintf+0x704>
				OUTC('0');
    3ad8:	4659      	mov	r1, fp
    3ada:	2030      	movs	r0, #48	; 0x30
    3adc:	47d0      	blx	sl
    3ade:	2800      	cmp	r0, #0
    3ae0:	dbb4      	blt.n	3a4c <cbvprintf+0x690>
    3ae2:	3501      	adds	r5, #1
    3ae4:	e7df      	b.n	3aa6 <cbvprintf+0x6ea>
    3ae6:	bf00      	nop
    3ae8:	00025579 	.word	0x00025579

00003aec <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    3aec:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    3aee:	4910      	ldr	r1, [pc, #64]	; (3b30 <enable_logger+0x44>)
    3af0:	4810      	ldr	r0, [pc, #64]	; (3b34 <enable_logger+0x48>)
{
    3af2:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    3af4:	2200      	movs	r2, #0
    3af6:	f01f fc3b 	bl	23370 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    3afa:	4d0f      	ldr	r5, [pc, #60]	; (3b38 <enable_logger+0x4c>)
    3afc:	490f      	ldr	r1, [pc, #60]	; (3b3c <enable_logger+0x50>)
    3afe:	2200      	movs	r2, #0
    3b00:	2300      	movs	r3, #0
    3b02:	e9cd 2306 	strd	r2, r3, [sp, #24]
    3b06:	2400      	movs	r4, #0
    3b08:	230e      	movs	r3, #14
    3b0a:	e9cd 3403 	strd	r3, r4, [sp, #12]
    3b0e:	e9cd 4401 	strd	r4, r4, [sp, #4]
    3b12:	4b0b      	ldr	r3, [pc, #44]	; (3b40 <enable_logger+0x54>)
    3b14:	9400      	str	r4, [sp, #0]
    3b16:	f44f 7240 	mov.w	r2, #768	; 0x300
    3b1a:	4628      	mov	r0, r5
    3b1c:	f019 fe98 	bl	1d850 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    3b20:	4908      	ldr	r1, [pc, #32]	; (3b44 <enable_logger+0x58>)
    3b22:	4628      	mov	r0, r5
    3b24:	f01f faed 	bl	23102 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    3b28:	4620      	mov	r0, r4
    3b2a:	b009      	add	sp, #36	; 0x24
    3b2c:	bd30      	pop	{r4, r5, pc}
    3b2e:	bf00      	nop
    3b30:	00003b49 	.word	0x00003b49
    3b34:	200009d0 	.word	0x200009d0
    3b38:	20000a08 	.word	0x20000a08
    3b3c:	200032c8 	.word	0x200032c8
    3b40:	00003fb1 	.word	0x00003fb1
    3b44:	0002557a 	.word	0x0002557a

00003b48 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    3b48:	4801      	ldr	r0, [pc, #4]	; (3b50 <log_process_thread_timer_expiry_fn+0x8>)
    3b4a:	f019 bde7 	b.w	1d71c <z_impl_k_sem_give>
    3b4e:	bf00      	nop
    3b50:	20000868 	.word	0x20000868

00003b54 <z_log_get_s_mask>:
{
    3b54:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b56:	4605      	mov	r5, r0
		} else if (arm && isalpha((int)curr)) {
    3b58:	4e0f      	ldr	r6, [pc, #60]	; (3b98 <z_log_get_s_mask+0x44>)
	uint32_t mask = 0U;
    3b5a:	2000      	movs	r0, #0
	uint32_t arg = 0U;
    3b5c:	4603      	mov	r3, r0
	bool arm = false;
    3b5e:	4602      	mov	r2, r0
				mask |= BIT(arg);
    3b60:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
    3b62:	f815 4b01 	ldrb.w	r4, [r5], #1
    3b66:	b10c      	cbz	r4, 3b6c <z_log_get_s_mask+0x18>
    3b68:	428b      	cmp	r3, r1
    3b6a:	d300      	bcc.n	3b6e <z_log_get_s_mask+0x1a>
}
    3b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
    3b6e:	2c25      	cmp	r4, #37	; 0x25
    3b70:	d102      	bne.n	3b78 <z_log_get_s_mask+0x24>
			arm = !arm;
    3b72:	f082 0201 	eor.w	r2, r2, #1
    3b76:	e7f4      	b.n	3b62 <z_log_get_s_mask+0xe>
		} else if (arm && isalpha((int)curr)) {
    3b78:	2a00      	cmp	r2, #0
    3b7a:	d0f2      	beq.n	3b62 <z_log_get_s_mask+0xe>
    3b7c:	f814 c006 	ldrb.w	ip, [r4, r6]
    3b80:	f01c 0f03 	tst.w	ip, #3
    3b84:	d0ed      	beq.n	3b62 <z_log_get_s_mask+0xe>
			if (curr == 's') {
    3b86:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
    3b88:	bf04      	itt	eq
    3b8a:	fa07 f203 	lsleq.w	r2, r7, r3
    3b8e:	4310      	orreq	r0, r2
			arg++;
    3b90:	3301      	adds	r3, #1
			arm = false;
    3b92:	2200      	movs	r2, #0
    3b94:	e7e5      	b.n	3b62 <z_log_get_s_mask+0xe>
    3b96:	bf00      	nop
    3b98:	000275af 	.word	0x000275af

00003b9c <log_core_init>:
{
    3b9c:	b508      	push	{r3, lr}
		log_msg_pool_init();
    3b9e:	f000 fa69 	bl	4074 <log_msg_pool_init>
		log_list_init(&list);
    3ba2:	4809      	ldr	r0, [pc, #36]	; (3bc8 <log_core_init+0x2c>)
    3ba4:	f01a ffa5 	bl	1eaf2 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    3ba8:	2308      	movs	r3, #8
    3baa:	2248      	movs	r2, #72	; 0x48
    3bac:	4907      	ldr	r1, [pc, #28]	; (3bcc <log_core_init+0x30>)
    3bae:	4808      	ldr	r0, [pc, #32]	; (3bd0 <log_core_init+0x34>)
    3bb0:	f01f f88d 	bl	22cce <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
    3bb4:	4b07      	ldr	r3, [pc, #28]	; (3bd4 <log_core_init+0x38>)
    3bb6:	4a08      	ldr	r2, [pc, #32]	; (3bd8 <log_core_init+0x3c>)
    3bb8:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    3bba:	f44f 4000 	mov.w	r0, #32768	; 0x8000
}
    3bbe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
    3bc2:	f000 bca1 	b.w	4508 <log_output_timestamp_freq_set>
    3bc6:	bf00      	nop
    3bc8:	20001444 	.word	0x20001444
    3bcc:	200054b8 	.word	0x200054b8
    3bd0:	2000144c 	.word	0x2000144c
    3bd4:	2000017c 	.word	0x2000017c
    3bd8:	0001eb31 	.word	0x0001eb31

00003bdc <dropped_notify>:
{
    3bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3bde:	4b0f      	ldr	r3, [pc, #60]	; (3c1c <dropped_notify+0x40>)
    3be0:	f3bf 8f5b 	dmb	ish
    3be4:	2500      	movs	r5, #0
    3be6:	e853 7f00 	ldrex	r7, [r3]
    3bea:	e843 5200 	strex	r2, r5, [r3]
    3bee:	2a00      	cmp	r2, #0
    3bf0:	d1f9      	bne.n	3be6 <dropped_notify+0xa>
    3bf2:	f3bf 8f5b 	dmb	ish
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    3bf6:	4c0a      	ldr	r4, [pc, #40]	; (3c20 <dropped_notify+0x44>)
    3bf8:	4e0a      	ldr	r6, [pc, #40]	; (3c24 <dropped_notify+0x48>)
    3bfa:	1b36      	subs	r6, r6, r4
    3bfc:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    3bfe:	42b5      	cmp	r5, r6
    3c00:	db00      	blt.n	3c04 <dropped_notify+0x28>
}
    3c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    3c04:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    3c06:	795b      	ldrb	r3, [r3, #5]
    3c08:	b12b      	cbz	r3, 3c16 <dropped_notify+0x3a>
	if (backend->api->dropped != NULL) {
    3c0a:	6823      	ldr	r3, [r4, #0]
    3c0c:	68db      	ldr	r3, [r3, #12]
    3c0e:	b113      	cbz	r3, 3c16 <dropped_notify+0x3a>
		backend->api->dropped(backend, cnt);
    3c10:	4639      	mov	r1, r7
    3c12:	4620      	mov	r0, r4
    3c14:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    3c16:	3501      	adds	r5, #1
    3c18:	3410      	adds	r4, #16
    3c1a:	e7f0      	b.n	3bfe <dropped_notify+0x22>
    3c1c:	2000143c 	.word	0x2000143c
    3c20:	00023aac 	.word	0x00023aac
    3c24:	00023abc 	.word	0x00023abc

00003c28 <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    3c28:	4b06      	ldr	r3, [pc, #24]	; (3c44 <log_dropped+0x1c>)
    3c2a:	f3bf 8f5b 	dmb	ish
    3c2e:	e853 2f00 	ldrex	r2, [r3]
    3c32:	3201      	adds	r2, #1
    3c34:	e843 2100 	strex	r1, r2, [r3]
    3c38:	2900      	cmp	r1, #0
    3c3a:	d1f8      	bne.n	3c2e <log_dropped+0x6>
    3c3c:	f3bf 8f5b 	dmb	ish
}
    3c40:	4770      	bx	lr
    3c42:	bf00      	nop
    3c44:	2000143c 	.word	0x2000143c

00003c48 <log_source_name_get>:
    3c48:	4a04      	ldr	r2, [pc, #16]	; (3c5c <log_source_name_get+0x14>)
    3c4a:	4b05      	ldr	r3, [pc, #20]	; (3c60 <log_source_name_get+0x18>)
    3c4c:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    3c4e:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    3c52:	bf34      	ite	cc
    3c54:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    3c58:	2000      	movcs	r0, #0
}
    3c5a:	4770      	bx	lr
    3c5c:	0002393c 	.word	0x0002393c
    3c60:	00023aac 	.word	0x00023aac

00003c64 <log_backend_enable>:
	id += backend - log_backend_get(0);
    3c64:	4b09      	ldr	r3, [pc, #36]	; (3c8c <log_backend_enable+0x28>)
	log_backend_id_set(backend, id);
    3c66:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
    3c68:	1ac3      	subs	r3, r0, r3
    3c6a:	111b      	asrs	r3, r3, #4
    3c6c:	3301      	adds	r3, #1
{
    3c6e:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
    3c70:	7113      	strb	r3, [r2, #4]
	log_backend_activate(backend, ctx);
    3c72:	6843      	ldr	r3, [r0, #4]
	if (!backend_attached) {
    3c74:	4c06      	ldr	r4, [pc, #24]	; (3c90 <log_backend_enable+0x2c>)
	backend->cb->ctx = ctx;
    3c76:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    3c78:	2201      	movs	r2, #1
    3c7a:	715a      	strb	r2, [r3, #5]
    3c7c:	7822      	ldrb	r2, [r4, #0]
    3c7e:	b912      	cbnz	r2, 3c86 <log_backend_enable+0x22>
    3c80:	4804      	ldr	r0, [pc, #16]	; (3c94 <log_backend_enable+0x30>)
    3c82:	f019 fd4b 	bl	1d71c <z_impl_k_sem_give>
	backend_attached = true;
    3c86:	2301      	movs	r3, #1
    3c88:	7023      	strb	r3, [r4, #0]
}
    3c8a:	bd10      	pop	{r4, pc}
    3c8c:	00023aac 	.word	0x00023aac
    3c90:	20002c3e 	.word	0x20002c3e
    3c94:	20000868 	.word	0x20000868

00003c98 <log_init>:
{
    3c98:	b570      	push	{r4, r5, r6, lr}
    3c9a:	4b11      	ldr	r3, [pc, #68]	; (3ce0 <log_init+0x48>)
    3c9c:	f3bf 8f5b 	dmb	ish
    3ca0:	e853 5f00 	ldrex	r5, [r3]
    3ca4:	1c6a      	adds	r2, r5, #1
    3ca6:	e843 2100 	strex	r1, r2, [r3]
    3caa:	2900      	cmp	r1, #0
    3cac:	d1f8      	bne.n	3ca0 <log_init+0x8>
    3cae:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    3cb2:	b92d      	cbnz	r5, 3cc0 <log_init+0x28>
	return __log_backends_end - __log_backends_start;
    3cb4:	4c0b      	ldr	r4, [pc, #44]	; (3ce4 <log_init+0x4c>)
    3cb6:	4e0c      	ldr	r6, [pc, #48]	; (3ce8 <log_init+0x50>)
    3cb8:	1b36      	subs	r6, r6, r4
    3cba:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    3cbc:	42b5      	cmp	r5, r6
    3cbe:	db00      	blt.n	3cc2 <log_init+0x2a>
}
    3cc0:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    3cc2:	7b23      	ldrb	r3, [r4, #12]
    3cc4:	b14b      	cbz	r3, 3cda <log_init+0x42>
			if (backend->api->init != NULL) {
    3cc6:	6823      	ldr	r3, [r4, #0]
    3cc8:	695b      	ldr	r3, [r3, #20]
    3cca:	b10b      	cbz	r3, 3cd0 <log_init+0x38>
				backend->api->init(backend);
    3ccc:	4620      	mov	r0, r4
    3cce:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    3cd0:	2204      	movs	r2, #4
    3cd2:	2100      	movs	r1, #0
    3cd4:	4620      	mov	r0, r4
    3cd6:	f7ff ffc5 	bl	3c64 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    3cda:	3501      	adds	r5, #1
    3cdc:	3410      	adds	r4, #16
    3cde:	e7ed      	b.n	3cbc <log_init+0x24>
    3ce0:	20001440 	.word	0x20001440
    3ce4:	00023aac 	.word	0x00023aac
    3ce8:	00023abc 	.word	0x00023abc

00003cec <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    3cec:	4b17      	ldr	r3, [pc, #92]	; (3d4c <log_strdup+0x60>)
    3cee:	4298      	cmp	r0, r3
{
    3cf0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    3cf2:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    3cf4:	d302      	bcc.n	3cfc <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    3cf6:	4b16      	ldr	r3, [pc, #88]	; (3d50 <log_strdup+0x64>)
    3cf8:	4298      	cmp	r0, r3
    3cfa:	d321      	bcc.n	3d40 <log_strdup+0x54>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    3cfc:	4815      	ldr	r0, [pc, #84]	; (3d54 <log_strdup+0x68>)
    3cfe:	2200      	movs	r2, #0
    3d00:	2300      	movs	r3, #0
    3d02:	a901      	add	r1, sp, #4
    3d04:	f019 f83a 	bl	1cd7c <k_mem_slab_alloc>
	if (err != 0) {
    3d08:	4605      	mov	r5, r0
    3d0a:	b9e0      	cbnz	r0, 3d46 <log_strdup+0x5a>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3d0c:	2201      	movs	r2, #1
    3d0e:	9b01      	ldr	r3, [sp, #4]
    3d10:	f3bf 8f5b 	dmb	ish
    3d14:	e853 1f00 	ldrex	r1, [r3]
    3d18:	e843 2000 	strex	r0, r2, [r3]
    3d1c:	2800      	cmp	r0, #0
    3d1e:	d1f9      	bne.n	3d14 <log_strdup+0x28>
    3d20:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    3d24:	9e01      	ldr	r6, [sp, #4]
    3d26:	1d33      	adds	r3, r6, #4
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
    3d28:	2241      	movs	r2, #65	; 0x41
    3d2a:	4618      	mov	r0, r3
    3d2c:	4621      	mov	r1, r4
    3d2e:	f01f fcb6 	bl	2369e <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    3d32:	227e      	movs	r2, #126	; 0x7e
    3d34:	4603      	mov	r3, r0
    3d36:	f886 2045 	strb.w	r2, [r6, #69]	; 0x45
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    3d3a:	f886 5046 	strb.w	r5, [r6, #70]	; 0x46
	return dup->buf;
    3d3e:	461c      	mov	r4, r3
}
    3d40:	4620      	mov	r0, r4
    3d42:	b002      	add	sp, #8
    3d44:	bd70      	pop	{r4, r5, r6, pc}
		return (char *)log_strdup_fail_msg;
    3d46:	4b04      	ldr	r3, [pc, #16]	; (3d58 <log_strdup+0x6c>)
    3d48:	e7f9      	b.n	3d3e <log_strdup+0x52>
    3d4a:	bf00      	nop
    3d4c:	000236e8 	.word	0x000236e8
    3d50:	000276b0 	.word	0x000276b0
    3d54:	2000144c 	.word	0x2000144c
    3d58:	00025582 	.word	0x00025582

00003d5c <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
    3d5c:	b150      	cbz	r0, 3d74 <log_is_strdup+0x18>
    3d5e:	4b06      	ldr	r3, [pc, #24]	; (3d78 <log_is_strdup+0x1c>)
    3d60:	4298      	cmp	r0, r3
    3d62:	d306      	bcc.n	3d72 <log_is_strdup+0x16>
    3d64:	f503 7310 	add.w	r3, r3, #576	; 0x240
    3d68:	4298      	cmp	r0, r3
    3d6a:	bf2c      	ite	cs
    3d6c:	2000      	movcs	r0, #0
    3d6e:	2001      	movcc	r0, #1
    3d70:	4770      	bx	lr
    3d72:	2000      	movs	r0, #0
}
    3d74:	4770      	bx	lr
    3d76:	bf00      	nop
    3d78:	200054b8 	.word	0x200054b8

00003d7c <z_impl_log_process>:
{
    3d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
    3d80:	4b4c      	ldr	r3, [pc, #304]	; (3eb4 <z_impl_log_process+0x138>)
    3d82:	781b      	ldrb	r3, [r3, #0]
{
    3d84:	b085      	sub	sp, #20
    3d86:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    3d88:	b903      	cbnz	r3, 3d8c <z_impl_log_process+0x10>
    3d8a:	b360      	cbz	r0, 3de6 <z_impl_log_process+0x6a>
    3d8c:	f04f 0320 	mov.w	r3, #32
    3d90:	f3ef 8611 	mrs	r6, BASEPRI
    3d94:	f383 8811 	msr	BASEPRI, r3
    3d98:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
    3d9c:	4846      	ldr	r0, [pc, #280]	; (3eb8 <z_impl_log_process+0x13c>)
    3d9e:	f01a feb8 	bl	1eb12 <log_list_head_get>
    3da2:	4605      	mov	r5, r0
	__asm__ volatile(
    3da4:	f386 8811 	msr	BASEPRI, r6
    3da8:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
    3dac:	b178      	cbz	r0, 3dce <z_impl_log_process+0x52>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    3dae:	f3bf 8f5b 	dmb	ish
    3db2:	4b42      	ldr	r3, [pc, #264]	; (3ebc <z_impl_log_process+0x140>)
    3db4:	e853 2f00 	ldrex	r2, [r3]
    3db8:	3a01      	subs	r2, #1
    3dba:	e843 2100 	strex	r1, r2, [r3]
    3dbe:	2900      	cmp	r1, #0
    3dc0:	d1f8      	bne.n	3db4 <z_impl_log_process+0x38>
    3dc2:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
    3dc6:	b194      	cbz	r4, 3dee <z_impl_log_process+0x72>
	log_msg_put(msg);
    3dc8:	4628      	mov	r0, r5
    3dca:	f01a ffb3 	bl	1ed34 <log_msg_put>
	if (!bypass && dropped_cnt) {
    3dce:	b924      	cbnz	r4, 3dda <z_impl_log_process+0x5e>
    3dd0:	4b3b      	ldr	r3, [pc, #236]	; (3ec0 <z_impl_log_process+0x144>)
    3dd2:	681b      	ldr	r3, [r3, #0]
    3dd4:	b10b      	cbz	r3, 3dda <z_impl_log_process+0x5e>
		dropped_notify();
    3dd6:	f7ff ff01 	bl	3bdc <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    3dda:	4837      	ldr	r0, [pc, #220]	; (3eb8 <z_impl_log_process+0x13c>)
    3ddc:	f01a fe97 	bl	1eb0e <log_list_head_peek>
    3de0:	1e04      	subs	r4, r0, #0
    3de2:	bf18      	it	ne
    3de4:	2401      	movne	r4, #1
}
    3de6:	4620      	mov	r0, r4
    3de8:	b005      	add	sp, #20
    3dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
    3dee:	4b35      	ldr	r3, [pc, #212]	; (3ec4 <z_impl_log_process+0x148>)
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
    3df0:	781b      	ldrb	r3, [r3, #0]
    3df2:	b9cb      	cbnz	r3, 3e28 <z_impl_log_process+0xac>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    3df4:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
    3df6:	07db      	lsls	r3, r3, #31
    3df8:	d416      	bmi.n	3e28 <z_impl_log_process+0xac>
	msg_str = log_msg_str_get(msg);
    3dfa:	f01a ffae 	bl	1ed5a <log_msg_str_get>
    3dfe:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    3e00:	4628      	mov	r0, r5
    3e02:	f01a ff75 	bl	1ecf0 <log_msg_nargs_get>
    3e06:	4601      	mov	r1, r0
    3e08:	4640      	mov	r0, r8
    3e0a:	f7ff fea3 	bl	3b54 <z_log_get_s_mask>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    3e0e:	4f2e      	ldr	r7, [pc, #184]	; (3ec8 <z_impl_log_process+0x14c>)
    3e10:	4b2e      	ldr	r3, [pc, #184]	; (3ecc <z_impl_log_process+0x150>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    3e12:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 3ee8 <z_impl_log_process+0x16c>
    3e16:	1bdb      	subs	r3, r3, r7
    3e18:	08db      	lsrs	r3, r3, #3
    3e1a:	9303      	str	r3, [sp, #12]
    3e1c:	4b2c      	ldr	r3, [pc, #176]	; (3ed0 <z_impl_log_process+0x154>)
    3e1e:	1bdb      	subs	r3, r3, r7
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    3e20:	4606      	mov	r6, r0
    3e22:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
	while (mask) {
    3e26:	b936      	cbnz	r6, 3e36 <z_impl_log_process+0xba>
    3e28:	4e2a      	ldr	r6, [pc, #168]	; (3ed4 <z_impl_log_process+0x158>)
    3e2a:	4f2b      	ldr	r7, [pc, #172]	; (3ed8 <z_impl_log_process+0x15c>)
    3e2c:	1bbf      	subs	r7, r7, r6
    3e2e:	113f      	asrs	r7, r7, #4
    3e30:	f04f 0800 	mov.w	r8, #0
    3e34:	e03a      	b.n	3eac <z_impl_log_process+0x130>
		idx = 31 - __builtin_clz(mask);
    3e36:	fab6 f186 	clz	r1, r6
    3e3a:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    3e3e:	4649      	mov	r1, r9
    3e40:	4628      	mov	r0, r5
    3e42:	f01a ff58 	bl	1ecf6 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
    3e46:	4b25      	ldr	r3, [pc, #148]	; (3edc <z_impl_log_process+0x160>)
    3e48:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
    3e4a:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    3e4c:	d302      	bcc.n	3e54 <z_impl_log_process+0xd8>
		if (!is_rodata(str) && !log_is_strdup(str) &&
    3e4e:	4b24      	ldr	r3, [pc, #144]	; (3ee0 <z_impl_log_process+0x164>)
    3e50:	4298      	cmp	r0, r3
    3e52:	d31a      	bcc.n	3e8a <z_impl_log_process+0x10e>
    3e54:	4608      	mov	r0, r1
    3e56:	f7ff ff81 	bl	3d5c <log_is_strdup>
    3e5a:	4602      	mov	r2, r0
    3e5c:	b9a8      	cbnz	r0, 3e8a <z_impl_log_process+0x10e>
    3e5e:	4b21      	ldr	r3, [pc, #132]	; (3ee4 <z_impl_log_process+0x168>)
    3e60:	4299      	cmp	r1, r3
    3e62:	d012      	beq.n	3e8a <z_impl_log_process+0x10e>
	return msg->hdr.ids.source_id;
    3e64:	896b      	ldrh	r3, [r5, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    3e66:	9803      	ldr	r0, [sp, #12]
    3e68:	0999      	lsrs	r1, r3, #6
    3e6a:	ebb0 1f93 	cmp.w	r0, r3, lsr #6
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    3e6e:	ea4f 138a 	mov.w	r3, sl, lsl #6
    3e72:	f043 0301 	orr.w	r3, r3, #1
	return __log_const_start[source_id].name;
    3e76:	bf88      	it	hi
    3e78:	f857 2031 	ldrhi.w	r2, [r7, r1, lsl #3]
    3e7c:	f8ad 3000 	strh.w	r3, [sp]
    3e80:	4649      	mov	r1, r9
    3e82:	4643      	mov	r3, r8
    3e84:	4658      	mov	r0, fp
    3e86:	f01a fe91 	bl	1ebac <log_3>
		mask &= ~BIT(idx);
    3e8a:	2101      	movs	r1, #1
    3e8c:	fa01 f109 	lsl.w	r1, r1, r9
    3e90:	ea26 0601 	bic.w	r6, r6, r1
    3e94:	e7c7      	b.n	3e26 <z_impl_log_process+0xaa>
	return backend->cb->active;
    3e96:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
    3e98:	795b      	ldrb	r3, [r3, #5]
    3e9a:	b123      	cbz	r3, 3ea6 <z_impl_log_process+0x12a>
	backend->api->put(backend, msg);
    3e9c:	6833      	ldr	r3, [r6, #0]
    3e9e:	4629      	mov	r1, r5
    3ea0:	681b      	ldr	r3, [r3, #0]
    3ea2:	4630      	mov	r0, r6
    3ea4:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    3ea6:	f108 0801 	add.w	r8, r8, #1
    3eaa:	3610      	adds	r6, #16
    3eac:	45b8      	cmp	r8, r7
    3eae:	dbf2      	blt.n	3e96 <z_impl_log_process+0x11a>
    3eb0:	e78a      	b.n	3dc8 <z_impl_log_process+0x4c>
    3eb2:	bf00      	nop
    3eb4:	20002c3e 	.word	0x20002c3e
    3eb8:	20001444 	.word	0x20001444
    3ebc:	20001438 	.word	0x20001438
    3ec0:	2000143c 	.word	0x2000143c
    3ec4:	20002c3f 	.word	0x20002c3f
    3ec8:	0002393c 	.word	0x0002393c
    3ecc:	00023aac 	.word	0x00023aac
    3ed0:	00023a54 	.word	0x00023a54
    3ed4:	00023aac 	.word	0x00023aac
    3ed8:	00023abc 	.word	0x00023abc
    3edc:	000236e8 	.word	0x000236e8
    3ee0:	000276b0 	.word	0x000276b0
    3ee4:	00025582 	.word	0x00025582
    3ee8:	0002559c 	.word	0x0002559c

00003eec <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    3eec:	4b29      	ldr	r3, [pc, #164]	; (3f94 <msg_finalize+0xa8>)
{
    3eee:	b537      	push	{r0, r1, r2, r4, r5, lr}
	msg->hdr.timestamp = timestamp_func();
    3ef0:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    3ef2:	8141      	strh	r1, [r0, #10]
{
    3ef4:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    3ef6:	4798      	blx	r3
    3ef8:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    3efa:	f04f 0320 	mov.w	r3, #32
    3efe:	f3ef 8511 	mrs	r5, BASEPRI
    3f02:	f383 8811 	msr	BASEPRI, r3
    3f06:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    3f0a:	4823      	ldr	r0, [pc, #140]	; (3f98 <msg_finalize+0xac>)
    3f0c:	4621      	mov	r1, r4
    3f0e:	f01a fdf4 	bl	1eafa <log_list_add_tail>
	__asm__ volatile(
    3f12:	f385 8811 	msr	BASEPRI, r5
    3f16:	f3bf 8f6f 	isb	sy
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    3f1a:	f3bf 8f5b 	dmb	ish
    3f1e:	4b1f      	ldr	r3, [pc, #124]	; (3f9c <msg_finalize+0xb0>)
    3f20:	e853 2f00 	ldrex	r2, [r3]
    3f24:	3201      	adds	r2, #1
    3f26:	e843 2100 	strex	r1, r2, [r3]
    3f2a:	2900      	cmp	r1, #0
    3f2c:	d1f8      	bne.n	3f20 <msg_finalize+0x34>
    3f2e:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
    3f32:	4a1b      	ldr	r2, [pc, #108]	; (3fa0 <msg_finalize+0xb4>)
    3f34:	7812      	ldrb	r2, [r2, #0]
    3f36:	b182      	cbz	r2, 3f5a <msg_finalize+0x6e>
	__asm__ volatile(
    3f38:	f04f 0320 	mov.w	r3, #32
    3f3c:	f3ef 8411 	mrs	r4, BASEPRI
    3f40:	f383 8811 	msr	BASEPRI, r3
    3f44:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    3f48:	2000      	movs	r0, #0
    3f4a:	f7ff ff17 	bl	3d7c <z_impl_log_process>
	__asm__ volatile(
    3f4e:	f384 8811 	msr	BASEPRI, r4
    3f52:	f3bf 8f6f 	isb	sy
}
    3f56:	b003      	add	sp, #12
    3f58:	bd30      	pop	{r4, r5, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    3f5a:	4a12      	ldr	r2, [pc, #72]	; (3fa4 <msg_finalize+0xb8>)
    3f5c:	681b      	ldr	r3, [r3, #0]
    3f5e:	6812      	ldr	r2, [r2, #0]
    3f60:	2a00      	cmp	r2, #0
    3f62:	d0f8      	beq.n	3f56 <msg_finalize+0x6a>
    3f64:	2b01      	cmp	r3, #1
    3f66:	d10a      	bne.n	3f7e <msg_finalize+0x92>
	z_impl_k_timer_start(timer, duration, period);
    3f68:	2200      	movs	r2, #0
    3f6a:	2300      	movs	r3, #0
    3f6c:	e9cd 2300 	strd	r2, r3, [sp]
    3f70:	480d      	ldr	r0, [pc, #52]	; (3fa8 <msg_finalize+0xbc>)
    3f72:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    3f76:	2300      	movs	r3, #0
    3f78:	f01a f828 	bl	1dfcc <z_impl_k_timer_start>
    3f7c:	e7eb      	b.n	3f56 <msg_finalize+0x6a>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    3f7e:	2b0a      	cmp	r3, #10
    3f80:	d1e9      	bne.n	3f56 <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
    3f82:	4809      	ldr	r0, [pc, #36]	; (3fa8 <msg_finalize+0xbc>)
    3f84:	f01f fa00 	bl	23388 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    3f88:	4808      	ldr	r0, [pc, #32]	; (3fac <msg_finalize+0xc0>)
}
    3f8a:	b003      	add	sp, #12
    3f8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    3f90:	f019 bbc4 	b.w	1d71c <z_impl_k_sem_give>
    3f94:	2000017c 	.word	0x2000017c
    3f98:	20001444 	.word	0x20001444
    3f9c:	20001438 	.word	0x20001438
    3fa0:	20002c3f 	.word	0x20002c3f
    3fa4:	20001468 	.word	0x20001468
    3fa8:	200009d0 	.word	0x200009d0
    3fac:	20000868 	.word	0x20000868

00003fb0 <log_process_thread_func>:
{
    3fb0:	b510      	push	{r4, lr}
	log_init();
    3fb2:	f7ff fe71 	bl	3c98 <log_init>
	return z_impl_k_current_get();
    3fb6:	f019 fb37 	bl	1d628 <z_impl_k_current_get>
	proc_tid = process_tid;
    3fba:	4b0c      	ldr	r3, [pc, #48]	; (3fec <log_process_thread_func+0x3c>)
    3fbc:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    3fbe:	b130      	cbz	r0, 3fce <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    3fc0:	4b0b      	ldr	r3, [pc, #44]	; (3ff0 <log_process_thread_func+0x40>)
	    process_tid &&
    3fc2:	681b      	ldr	r3, [r3, #0]
    3fc4:	2b09      	cmp	r3, #9
    3fc6:	dd02      	ble.n	3fce <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    3fc8:	480a      	ldr	r0, [pc, #40]	; (3ff4 <log_process_thread_func+0x44>)
    3fca:	f019 fba7 	bl	1d71c <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    3fce:	4c09      	ldr	r4, [pc, #36]	; (3ff4 <log_process_thread_func+0x44>)
    3fd0:	2000      	movs	r0, #0
    3fd2:	f7ff fed3 	bl	3d7c <z_impl_log_process>
		if (log_process(false) == false) {
    3fd6:	2800      	cmp	r0, #0
    3fd8:	d1fa      	bne.n	3fd0 <log_process_thread_func+0x20>
    3fda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3fde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3fe2:	4620      	mov	r0, r4
    3fe4:	f019 fbc0 	bl	1d768 <z_impl_k_sem_take>
    3fe8:	e7f2      	b.n	3fd0 <log_process_thread_func+0x20>
    3fea:	bf00      	nop
    3fec:	20001468 	.word	0x20001468
    3ff0:	20001438 	.word	0x20001438
    3ff4:	20000868 	.word	0x20000868

00003ff8 <z_impl_log_panic>:
{
    3ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    3ffa:	4f0e      	ldr	r7, [pc, #56]	; (4034 <z_impl_log_panic+0x3c>)
    3ffc:	783d      	ldrb	r5, [r7, #0]
    3ffe:	b975      	cbnz	r5, 401e <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
    4000:	4c0d      	ldr	r4, [pc, #52]	; (4038 <z_impl_log_panic+0x40>)
    4002:	4e0e      	ldr	r6, [pc, #56]	; (403c <z_impl_log_panic+0x44>)
	log_init();
    4004:	f7ff fe48 	bl	3c98 <log_init>
    4008:	1b36      	subs	r6, r6, r4
    400a:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    400c:	42b5      	cmp	r5, r6
    400e:	db07      	blt.n	4020 <z_impl_log_panic+0x28>
    4010:	2000      	movs	r0, #0
    4012:	f7ff feb3 	bl	3d7c <z_impl_log_process>
		while (log_process(false) == true) {
    4016:	2800      	cmp	r0, #0
    4018:	d1fa      	bne.n	4010 <z_impl_log_panic+0x18>
	panic_mode = true;
    401a:	2301      	movs	r3, #1
    401c:	703b      	strb	r3, [r7, #0]
}
    401e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    4020:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    4022:	795b      	ldrb	r3, [r3, #5]
    4024:	b11b      	cbz	r3, 402e <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    4026:	6823      	ldr	r3, [r4, #0]
    4028:	4620      	mov	r0, r4
    402a:	691b      	ldr	r3, [r3, #16]
    402c:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    402e:	3501      	adds	r5, #1
    4030:	3410      	adds	r4, #16
    4032:	e7eb      	b.n	400c <z_impl_log_panic+0x14>
    4034:	20002c3f 	.word	0x20002c3f
    4038:	00023aac 	.word	0x00023aac
    403c:	00023abc 	.word	0x00023abc

00004040 <log_free>:
{
    4040:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    4042:	3804      	subs	r0, #4
    4044:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    4046:	f3bf 8f5b 	dmb	ish
    404a:	e850 3f00 	ldrex	r3, [r0]
    404e:	1e5a      	subs	r2, r3, #1
    4050:	e840 2100 	strex	r1, r2, [r0]
    4054:	2900      	cmp	r1, #0
    4056:	d1f8      	bne.n	404a <log_free+0xa>
    4058:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
    405c:	2b01      	cmp	r3, #1
    405e:	d103      	bne.n	4068 <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    4060:	4803      	ldr	r0, [pc, #12]	; (4070 <log_free+0x30>)
    4062:	a901      	add	r1, sp, #4
    4064:	f018 febc 	bl	1cde0 <k_mem_slab_free>
}
    4068:	b003      	add	sp, #12
    406a:	f85d fb04 	ldr.w	pc, [sp], #4
    406e:	bf00      	nop
    4070:	2000144c 	.word	0x2000144c

00004074 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    4074:	2320      	movs	r3, #32
    4076:	4902      	ldr	r1, [pc, #8]	; (4080 <log_msg_pool_init+0xc>)
    4078:	4802      	ldr	r0, [pc, #8]	; (4084 <log_msg_pool_init+0x10>)
    407a:	461a      	mov	r2, r3
    407c:	f01e be27 	b.w	22cce <k_mem_slab_init>
    4080:	200056f8 	.word	0x200056f8
    4084:	2000146c 	.word	0x2000146c

00004088 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
    4088:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
    408a:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    408c:	4d09      	ldr	r5, [pc, #36]	; (40b4 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    408e:	9301      	str	r3, [sp, #4]
    4090:	2001      	movs	r0, #1
    4092:	f7ff fe73 	bl	3d7c <z_impl_log_process>
    4096:	4604      	mov	r4, r0
			log_dropped();
    4098:	f7ff fdc6 	bl	3c28 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    409c:	2200      	movs	r2, #0
    409e:	2300      	movs	r3, #0
    40a0:	a901      	add	r1, sp, #4
    40a2:	4628      	mov	r0, r5
    40a4:	f018 fe6a 	bl	1cd7c <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    40a8:	b108      	cbz	r0, 40ae <log_msg_no_space_handle+0x26>
    40aa:	2c00      	cmp	r4, #0
    40ac:	d1f0      	bne.n	4090 <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
    40ae:	9801      	ldr	r0, [sp, #4]
    40b0:	b003      	add	sp, #12
    40b2:	bd30      	pop	{r4, r5, pc}
    40b4:	2000146c 	.word	0x2000146c

000040b8 <log_msg_chunk_alloc>:
{
    40b8:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    40ba:	2300      	movs	r3, #0
    40bc:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    40be:	4807      	ldr	r0, [pc, #28]	; (40dc <log_msg_chunk_alloc+0x24>)
    40c0:	2200      	movs	r2, #0
    40c2:	2300      	movs	r3, #0
    40c4:	a901      	add	r1, sp, #4
    40c6:	f018 fe59 	bl	1cd7c <k_mem_slab_alloc>
	if (err != 0) {
    40ca:	b110      	cbz	r0, 40d2 <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
    40cc:	f7ff ffdc 	bl	4088 <log_msg_no_space_handle>
    40d0:	9001      	str	r0, [sp, #4]
}
    40d2:	9801      	ldr	r0, [sp, #4]
    40d4:	b003      	add	sp, #12
    40d6:	f85d fb04 	ldr.w	pc, [sp], #4
    40da:	bf00      	nop
    40dc:	2000146c 	.word	0x2000146c

000040e0 <msg_free>:
{
    40e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    40e2:	7a03      	ldrb	r3, [r0, #8]
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
    40e4:	7a45      	ldrb	r5, [r0, #9]
{
    40e6:	b085      	sub	sp, #20
	return msg->hdr.params.std.nargs;
    40e8:	092d      	lsrs	r5, r5, #4
{
    40ea:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
    40ec:	07d8      	lsls	r0, r3, #31
    40ee:	d41c      	bmi.n	412a <msg_free+0x4a>
    40f0:	b1dd      	cbz	r5, 412a <msg_free+0x4a>
		uint32_t smask = 0U;
    40f2:	2400      	movs	r4, #0
		for (i = 0U; i < nargs; i++) {
    40f4:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
    40f6:	9801      	ldr	r0, [sp, #4]
    40f8:	4631      	mov	r1, r6
    40fa:	f01a fdfc 	bl	1ecf6 <log_msg_arg_get>
    40fe:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
    4100:	f7ff fe2c 	bl	3d5c <log_is_strdup>
    4104:	b170      	cbz	r0, 4124 <msg_free+0x44>
				if (smask == 0U) {
    4106:	b934      	cbnz	r4, 4116 <msg_free+0x36>
					smask = z_log_get_s_mask(
    4108:	9b01      	ldr	r3, [sp, #4]
    410a:	4629      	mov	r1, r5
    410c:	6918      	ldr	r0, [r3, #16]
    410e:	f7ff fd21 	bl	3b54 <z_log_get_s_mask>
					if (smask == 0U) {
    4112:	4604      	mov	r4, r0
    4114:	b148      	cbz	r0, 412a <msg_free+0x4a>
				if (smask & BIT(i)) {
    4116:	fa24 f306 	lsr.w	r3, r4, r6
    411a:	07d9      	lsls	r1, r3, #31
    411c:	d502      	bpl.n	4124 <msg_free+0x44>
					log_free(buf);
    411e:	4638      	mov	r0, r7
    4120:	f7ff ff8e 	bl	4040 <log_free>
		for (i = 0U; i < nargs; i++) {
    4124:	3601      	adds	r6, #1
    4126:	42ae      	cmp	r6, r5
    4128:	d3e5      	bcc.n	40f6 <msg_free+0x16>
	if (msg->hdr.params.generic.ext == 1) {
    412a:	9b01      	ldr	r3, [sp, #4]
    412c:	7a1a      	ldrb	r2, [r3, #8]
    412e:	0792      	lsls	r2, r2, #30
    4130:	d504      	bpl.n	413c <msg_free+0x5c>
		cont_free(msg->payload.ext.next);
    4132:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    4134:	4c08      	ldr	r4, [pc, #32]	; (4158 <msg_free+0x78>)
    4136:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    4138:	9b03      	ldr	r3, [sp, #12]
    413a:	b92b      	cbnz	r3, 4148 <msg_free+0x68>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    413c:	4806      	ldr	r0, [pc, #24]	; (4158 <msg_free+0x78>)
    413e:	a901      	add	r1, sp, #4
    4140:	f018 fe4e 	bl	1cde0 <k_mem_slab_free>
}
    4144:	b005      	add	sp, #20
    4146:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
    4148:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    414a:	a903      	add	r1, sp, #12
    414c:	4620      	mov	r0, r4
    414e:	f018 fe47 	bl	1cde0 <k_mem_slab_free>
		cont = next;
    4152:	9503      	str	r5, [sp, #12]
    4154:	e7f0      	b.n	4138 <msg_free+0x58>
    4156:	bf00      	nop
    4158:	2000146c 	.word	0x2000146c

0000415c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    415c:	b40e      	push	{r1, r2, r3}
    415e:	b503      	push	{r0, r1, lr}
    4160:	ab03      	add	r3, sp, #12
    4162:	4601      	mov	r1, r0
    4164:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    4168:	4804      	ldr	r0, [pc, #16]	; (417c <print_formatted+0x20>)
	va_start(args, fmt);
    416a:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    416c:	f7ff f926 	bl	33bc <cbvprintf>
	va_end(args);

	return length;
}
    4170:	b002      	add	sp, #8
    4172:	f85d eb04 	ldr.w	lr, [sp], #4
    4176:	b003      	add	sp, #12
    4178:	4770      	bx	lr
    417a:	bf00      	nop
    417c:	0001f1a7 	.word	0x0001f1a7

00004180 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, uint16_t source_id)
{
    4180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4184:	b085      	sub	sp, #20
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    4186:	f011 0402 	ands.w	r4, r1, #2
{
    418a:	4690      	mov	r8, r2
    418c:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
    4190:	4606      	mov	r6, r0
    4192:	461a      	mov	r2, r3
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    4194:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    4198:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    419c:	d007      	beq.n	41ae <prefix_print+0x2e>
	if (!format) {
    419e:	f011 0f44 	tst.w	r1, #68	; 0x44
    41a2:	d137      	bne.n	4214 <prefix_print+0x94>
		length = print_formatted(output, "[%08lu] ", timestamp);
    41a4:	4932      	ldr	r1, [pc, #200]	; (4270 <prefix_print+0xf0>)
    41a6:	f7ff ffd9 	bl	415c <print_formatted>
			length = print_formatted(output,
    41aa:	4601      	mov	r1, r0
		length += timestamp_print(output, flags, timestamp);
    41ac:	460c      	mov	r4, r1
	if (color) {
    41ae:	f1b9 0f00 	cmp.w	r9, #0
    41b2:	d00a      	beq.n	41ca <prefix_print+0x4a>
		const char *log_color = start && (colors[level] != NULL) ?
    41b4:	4b2f      	ldr	r3, [pc, #188]	; (4274 <prefix_print+0xf4>)
		print_formatted(output, "%s", log_color);
    41b6:	4930      	ldr	r1, [pc, #192]	; (4278 <prefix_print+0xf8>)
		const char *log_color = start && (colors[level] != NULL) ?
    41b8:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(output, "%s", log_color);
    41bc:	4b2f      	ldr	r3, [pc, #188]	; (427c <prefix_print+0xfc>)
    41be:	4630      	mov	r0, r6
    41c0:	2a00      	cmp	r2, #0
    41c2:	bf08      	it	eq
    41c4:	461a      	moveq	r2, r3
    41c6:	f7ff ffc9 	bl	415c <print_formatted>
	if (level_on) {
    41ca:	b13d      	cbz	r5, 41dc <prefix_print+0x5c>
		total += print_formatted(output, "<%s> ", severity[level]);
    41cc:	4b2c      	ldr	r3, [pc, #176]	; (4280 <prefix_print+0x100>)
    41ce:	492d      	ldr	r1, [pc, #180]	; (4284 <prefix_print+0x104>)
    41d0:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    41d4:	4630      	mov	r0, r6
    41d6:	f7ff ffc1 	bl	415c <print_formatted>
    41da:	4605      	mov	r5, r0
	total += print_formatted(output,
    41dc:	f1b8 0f00 	cmp.w	r8, #0
    41e0:	d043      	beq.n	426a <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    41e2:	2301      	movs	r3, #1
    41e4:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(output,
    41e8:	4b27      	ldr	r3, [pc, #156]	; (4288 <prefix_print+0x108>)
    41ea:	f017 0f10 	tst.w	r7, #16
    41ee:	4f27      	ldr	r7, [pc, #156]	; (428c <prefix_print+0x10c>)
    41f0:	bf18      	it	ne
    41f2:	461f      	movne	r7, r3
    41f4:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    41f8:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    41fc:	f7ff fd24 	bl	3c48 <log_source_name_get>
    4200:	4639      	mov	r1, r7
    4202:	4602      	mov	r2, r0
    4204:	4630      	mov	r0, r6
    4206:	f7ff ffa9 	bl	415c <print_formatted>
    420a:	4428      	add	r0, r5

	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);

	return length;
}
    420c:	4420      	add	r0, r4
    420e:	b005      	add	sp, #20
    4210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    4214:	4b1e      	ldr	r3, [pc, #120]	; (4290 <prefix_print+0x110>)
    4216:	6819      	ldr	r1, [r3, #0]
    4218:	2900      	cmp	r1, #0
    421a:	d0c7      	beq.n	41ac <prefix_print+0x2c>
		timestamp /= timestamp_div;
    421c:	4b1d      	ldr	r3, [pc, #116]	; (4294 <prefix_print+0x114>)
    421e:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    4222:	681b      	ldr	r3, [r3, #0]
    4224:	fbb2 f3f3 	udiv	r3, r2, r3
		ms = (remainder * 1000U) / freq;
    4228:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		total_seconds = timestamp / freq;
    422c:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    4230:	fbb4 f2fe 	udiv	r2, r4, lr
    4234:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
    4238:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    423c:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    4240:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    4244:	fbb4 fbf1 	udiv	fp, r4, r1
    4248:	fb01 441b 	mls	r4, r1, fp, r4
    424c:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    4250:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    4254:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(output,
    4258:	e9cd b101 	strd	fp, r1, [sp, #4]
    425c:	fb0a e113 	mls	r1, sl, r3, lr
    4260:	9100      	str	r1, [sp, #0]
    4262:	490d      	ldr	r1, [pc, #52]	; (4298 <prefix_print+0x118>)
    4264:	f7ff ff7a 	bl	415c <print_formatted>
    4268:	e79f      	b.n	41aa <prefix_print+0x2a>
	total += print_formatted(output,
    426a:	4f08      	ldr	r7, [pc, #32]	; (428c <prefix_print+0x10c>)
    426c:	e7c2      	b.n	41f4 <prefix_print+0x74>
    426e:	bf00      	nop
    4270:	000255ed 	.word	0x000255ed
    4274:	00023c20 	.word	0x00023c20
    4278:	000263cd 	.word	0x000263cd
    427c:	000255df 	.word	0x000255df
    4280:	00023c34 	.word	0x00023c34
    4284:	00025612 	.word	0x00025612
    4288:	000255e9 	.word	0x000255e9
    428c:	000255e4 	.word	0x000255e4
    4290:	20001488 	.word	0x20001488
    4294:	2000148c 	.word	0x2000148c
    4298:	000255f6 	.word	0x000255f6

0000429c <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
    429c:	b538      	push	{r3, r4, r5, lr}
    429e:	460c      	mov	r4, r1
	if (color) {
    42a0:	07e1      	lsls	r1, r4, #31
{
    42a2:	4605      	mov	r5, r0
	if (color) {
    42a4:	d503      	bpl.n	42ae <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
    42a6:	4a08      	ldr	r2, [pc, #32]	; (42c8 <postfix_print+0x2c>)
    42a8:	4908      	ldr	r1, [pc, #32]	; (42cc <postfix_print+0x30>)
    42aa:	f7ff ff57 	bl	415c <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    42ae:	06e2      	lsls	r2, r4, #27
    42b0:	d408      	bmi.n	42c4 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    42b2:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    42b4:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    42b6:	bf4c      	ite	mi
    42b8:	4905      	ldrmi	r1, [pc, #20]	; (42d0 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    42ba:	4906      	ldrpl	r1, [pc, #24]	; (42d4 <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
    42bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    42c0:	f7ff bf4c 	b.w	415c <print_formatted>
}
    42c4:	bd38      	pop	{r3, r4, r5, pc}
    42c6:	bf00      	nop
    42c8:	000255df 	.word	0x000255df
    42cc:	000263cd 	.word	0x000263cd
    42d0:	00025619 	.word	0x00025619
    42d4:	00025618 	.word	0x00025618

000042d8 <hexdump_line_print>:
{
    42d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    42dc:	461d      	mov	r5, r3
    42de:	9b08      	ldr	r3, [sp, #32]
    42e0:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    42e2:	06da      	lsls	r2, r3, #27
{
    42e4:	4604      	mov	r4, r0
    42e6:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    42e8:	d405      	bmi.n	42f6 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    42ea:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    42ec:	bf4c      	ite	mi
    42ee:	492b      	ldrmi	r1, [pc, #172]	; (439c <hexdump_line_print+0xc4>)
		print_formatted(ctx, "\r\n");
    42f0:	492b      	ldrpl	r1, [pc, #172]	; (43a0 <hexdump_line_print+0xc8>)
    42f2:	f7ff ff33 	bl	415c <print_formatted>
		print_formatted(output, " ");
    42f6:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 43a8 <hexdump_line_print+0xd0>
{
    42fa:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    42fe:	45a8      	cmp	r8, r5
    4300:	db2d      	blt.n	435e <hexdump_line_print+0x86>
			print_formatted(output, "   ");
    4302:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 43ac <hexdump_line_print+0xd4>
			print_formatted(output, "%02x ", data[i]);
    4306:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 43b0 <hexdump_line_print+0xd8>
			print_formatted(output, " ");
    430a:	f8df a09c 	ldr.w	sl, [pc, #156]	; 43a8 <hexdump_line_print+0xd0>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    430e:	2500      	movs	r5, #0
		if (i < length) {
    4310:	42bd      	cmp	r5, r7
    4312:	d232      	bcs.n	437a <hexdump_line_print+0xa2>
			print_formatted(output, "%02x ", data[i]);
    4314:	5d72      	ldrb	r2, [r6, r5]
    4316:	4649      	mov	r1, r9
    4318:	4620      	mov	r0, r4
    431a:	f7ff ff1f 	bl	415c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    431e:	3501      	adds	r5, #1
    4320:	2d10      	cmp	r5, #16
    4322:	d123      	bne.n	436c <hexdump_line_print+0x94>
	print_formatted(output, "|");
    4324:	491f      	ldr	r1, [pc, #124]	; (43a4 <hexdump_line_print+0xcc>)
			print_formatted(output, " ");
    4326:	f8df 8080 	ldr.w	r8, [pc, #128]	; 43a8 <hexdump_line_print+0xd0>
			      isprint((int)c) ? c : '.');
    432a:	f8df 9088 	ldr.w	r9, [pc, #136]	; 43b4 <hexdump_line_print+0xdc>
			print_formatted(output, "%c",
    432e:	f8df a088 	ldr.w	sl, [pc, #136]	; 43b8 <hexdump_line_print+0xe0>
	print_formatted(output, "|");
    4332:	4620      	mov	r0, r4
    4334:	f7ff ff12 	bl	415c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    4338:	2500      	movs	r5, #0
		if (i < length) {
    433a:	42af      	cmp	r7, r5
    433c:	d929      	bls.n	4392 <hexdump_line_print+0xba>
			char c = (char)data[i];
    433e:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(output, "%c",
    4340:	f812 3009 	ldrb.w	r3, [r2, r9]
    4344:	f013 0f97 	tst.w	r3, #151	; 0x97
    4348:	bf08      	it	eq
    434a:	222e      	moveq	r2, #46	; 0x2e
    434c:	4651      	mov	r1, sl
    434e:	4620      	mov	r0, r4
    4350:	f7ff ff04 	bl	415c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    4354:	3501      	adds	r5, #1
    4356:	2d10      	cmp	r5, #16
    4358:	d114      	bne.n	4384 <hexdump_line_print+0xac>
}
    435a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
    435e:	4649      	mov	r1, r9
    4360:	4620      	mov	r0, r4
    4362:	f7ff fefb 	bl	415c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    4366:	f108 0801 	add.w	r8, r8, #1
    436a:	e7c8      	b.n	42fe <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    436c:	076a      	lsls	r2, r5, #29
    436e:	d1cf      	bne.n	4310 <hexdump_line_print+0x38>
			print_formatted(output, " ");
    4370:	4651      	mov	r1, sl
    4372:	4620      	mov	r0, r4
    4374:	f7ff fef2 	bl	415c <print_formatted>
    4378:	e7ca      	b.n	4310 <hexdump_line_print+0x38>
			print_formatted(output, "   ");
    437a:	4641      	mov	r1, r8
    437c:	4620      	mov	r0, r4
    437e:	f7ff feed 	bl	415c <print_formatted>
    4382:	e7cc      	b.n	431e <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    4384:	076b      	lsls	r3, r5, #29
    4386:	d1d8      	bne.n	433a <hexdump_line_print+0x62>
			print_formatted(output, " ");
    4388:	4641      	mov	r1, r8
    438a:	4620      	mov	r0, r4
    438c:	f7ff fee6 	bl	415c <print_formatted>
    4390:	e7d3      	b.n	433a <hexdump_line_print+0x62>
			print_formatted(output, " ");
    4392:	4641      	mov	r1, r8
    4394:	4620      	mov	r0, r4
    4396:	f7ff fee1 	bl	415c <print_formatted>
    439a:	e7db      	b.n	4354 <hexdump_line_print+0x7c>
    439c:	00025619 	.word	0x00025619
    43a0:	00025618 	.word	0x00025618
    43a4:	00025625 	.word	0x00025625
    43a8:	00025623 	.word	0x00025623
    43ac:	00025621 	.word	0x00025621
    43b0:	0002561b 	.word	0x0002561b
    43b4:	000275af 	.word	0x000275af
    43b8:	00025627 	.word	0x00025627

000043bc <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg,
			    uint32_t flags)
{
    43bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
    43c0:	7a8b      	ldrb	r3, [r1, #10]
		log_output_msg_syst_process(output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(output, flags, std_msg, timestamp,
    43c2:	f013 0807 	ands.w	r8, r3, #7
{
    43c6:	4617      	mov	r7, r2
    43c8:	b08a      	sub	sp, #40	; 0x28
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    43ca:	7a0a      	ldrb	r2, [r1, #8]
    43cc:	4605      	mov	r5, r0
    43ce:	460e      	mov	r6, r1
			0 : prefix_print(output, flags, std_msg, timestamp,
    43d0:	d020      	beq.n	4414 <log_output_msg_process+0x58>
	return msg->hdr.ids.source_id;
    43d2:	8949      	ldrh	r1, [r1, #10]
    43d4:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    43d8:	0989      	lsrs	r1, r1, #6
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    43da:	43d2      	mvns	r2, r2
    43dc:	e9cd 8300 	strd	r8, r3, [sp]
    43e0:	9102      	str	r1, [sp, #8]
    43e2:	68f3      	ldr	r3, [r6, #12]
    43e4:	f002 0201 	and.w	r2, r2, #1
    43e8:	4639      	mov	r1, r7
    43ea:	f7ff fec9 	bl	4180 <prefix_print>
    43ee:	4681      	mov	r9, r0
    43f0:	7a34      	ldrb	r4, [r6, #8]
    43f2:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    43f4:	f014 0401 	ands.w	r4, r4, #1
    43f8:	d00e      	beq.n	4418 <log_output_msg_process+0x5c>
		std_print(msg, output);
    43fa:	4629      	mov	r1, r5
    43fc:	4630      	mov	r0, r6
    43fe:	f01a fd68 	bl	1eed2 <std_print>
		raw_string_print(msg, output);
	} else {
		hexdump_print(msg, output, prefix_offset, flags);
	}

	if (!raw_string) {
    4402:	f1b8 0f00 	cmp.w	r8, #0
    4406:	d02b      	beq.n	4460 <log_output_msg_process+0xa4>
		postfix_print(output, flags, level);
    4408:	4642      	mov	r2, r8
    440a:	4639      	mov	r1, r7
    440c:	4628      	mov	r0, r5
    440e:	f7ff ff45 	bl	429c <postfix_print>
    4412:	e025      	b.n	4460 <log_output_msg_process+0xa4>
			0 : prefix_print(output, flags, std_msg, timestamp,
    4414:	46c1      	mov	r9, r8
    4416:	e7eb      	b.n	43f0 <log_output_msg_process+0x34>
	} else if (raw_string) {
    4418:	f1b8 0f00 	cmp.w	r8, #0
    441c:	d126      	bne.n	446c <log_output_msg_process+0xb0>
	size_t offset = 0;
    441e:	4627      	mov	r7, r4
		length = output->size;
    4420:	68eb      	ldr	r3, [r5, #12]
    4422:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
    4424:	aa06      	add	r2, sp, #24
    4426:	463b      	mov	r3, r7
    4428:	68a9      	ldr	r1, [r5, #8]
    442a:	4630      	mov	r0, r6
    442c:	f01a fd3d 	bl	1eeaa <log_msg_hexdump_data_get>
		output->control_block->offset = length;
    4430:	9a06      	ldr	r2, [sp, #24]
    4432:	686b      	ldr	r3, [r5, #4]
    4434:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    4436:	b13a      	cbz	r2, 4448 <log_output_msg_process+0x8c>
			eol = (output->buf[length - 1] == '\n');
    4438:	68ab      	ldr	r3, [r5, #8]
    443a:	4413      	add	r3, r2
    443c:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    4440:	f1a4 030a 	sub.w	r3, r4, #10
    4444:	425c      	negs	r4, r3
    4446:	415c      	adcs	r4, r3
		log_output_flush(output);
    4448:	4628      	mov	r0, r5
    444a:	f01a fe9f 	bl	1f18c <log_output_flush>
		offset += length;
    444e:	9b06      	ldr	r3, [sp, #24]
    4450:	441f      	add	r7, r3
	} while (length > 0);
    4452:	2b00      	cmp	r3, #0
    4454:	d1e4      	bne.n	4420 <log_output_msg_process+0x64>
	if (eol) {
    4456:	b11c      	cbz	r4, 4460 <log_output_msg_process+0xa4>
		print_formatted(output, "\r");
    4458:	4913      	ldr	r1, [pc, #76]	; (44a8 <log_output_msg_process+0xec>)
    445a:	4628      	mov	r0, r5
    445c:	f7ff fe7e 	bl	415c <print_formatted>
	}

	log_output_flush(output);
    4460:	4628      	mov	r0, r5
    4462:	f01a fe93 	bl	1f18c <log_output_flush>
}
    4466:	b00a      	add	sp, #40	; 0x28
    4468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(output, "%s", log_msg_str_get(msg));
    446c:	4630      	mov	r0, r6
    446e:	f01a fc74 	bl	1ed5a <log_msg_str_get>
    4472:	490e      	ldr	r1, [pc, #56]	; (44ac <log_output_msg_process+0xf0>)
    4474:	4602      	mov	r2, r0
    4476:	4628      	mov	r0, r5
    4478:	f7ff fe70 	bl	415c <print_formatted>
		length = sizeof(buf);
    447c:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    4480:	aa05      	add	r2, sp, #20
    4482:	4623      	mov	r3, r4
    4484:	a906      	add	r1, sp, #24
    4486:	4630      	mov	r0, r6
		length = sizeof(buf);
    4488:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    448c:	f01a fd0d 	bl	1eeaa <log_msg_hexdump_data_get>
		if (length) {
    4490:	9a05      	ldr	r2, [sp, #20]
    4492:	2a00      	cmp	r2, #0
    4494:	d0b8      	beq.n	4408 <log_output_msg_process+0x4c>
			hexdump_line_print(output, buf, length,
    4496:	464b      	mov	r3, r9
    4498:	9700      	str	r7, [sp, #0]
    449a:	a906      	add	r1, sp, #24
    449c:	4628      	mov	r0, r5
    449e:	f7ff ff1b 	bl	42d8 <hexdump_line_print>
			offset += length;
    44a2:	9b05      	ldr	r3, [sp, #20]
    44a4:	441c      	add	r4, r3
		length = sizeof(buf);
    44a6:	e7eb      	b.n	4480 <log_output_msg_process+0xc4>
    44a8:	0002562a 	.word	0x0002562a
    44ac:	000263cd 	.word	0x000263cd

000044b0 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    44b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    44b2:	f242 730f 	movw	r3, #9999	; 0x270f
    44b6:	428b      	cmp	r3, r1
    44b8:	bf28      	it	cs
    44ba:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    44bc:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    44be:	4a0f      	ldr	r2, [pc, #60]	; (44fc <log_output_dropped_process+0x4c>)
{
    44c0:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    44c2:	2105      	movs	r1, #5
    44c4:	4668      	mov	r0, sp
    44c6:	f019 ff6a 	bl	1e39e <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    44ca:	6863      	ldr	r3, [r4, #4]
    44cc:	490c      	ldr	r1, [pc, #48]	; (4500 <log_output_dropped_process+0x50>)
    44ce:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    44d0:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    44d2:	220b      	movs	r2, #11
    44d4:	4628      	mov	r0, r5
    44d6:	f01a fcef 	bl	1eeb8 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    44da:	6863      	ldr	r3, [r4, #4]
    44dc:	4632      	mov	r2, r6
    44de:	4669      	mov	r1, sp
    44e0:	4628      	mov	r0, r5
    44e2:	685b      	ldr	r3, [r3, #4]
    44e4:	f01a fce8 	bl	1eeb8 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    44e8:	6863      	ldr	r3, [r4, #4]
    44ea:	4906      	ldr	r1, [pc, #24]	; (4504 <log_output_dropped_process+0x54>)
    44ec:	685b      	ldr	r3, [r3, #4]
    44ee:	221b      	movs	r2, #27
    44f0:	4628      	mov	r0, r5
    44f2:	f01a fce1 	bl	1eeb8 <buffer_write>
		     output->control_block->ctx);
}
    44f6:	b002      	add	sp, #8
    44f8:	bd70      	pop	{r4, r5, r6, pc}
    44fa:	bf00      	nop
    44fc:	0002733b 	.word	0x0002733b
    4500:	00025668 	.word	0x00025668
    4504:	0002564c 	.word	0x0002564c

00004508 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    4508:	4a08      	ldr	r2, [pc, #32]	; (452c <log_output_timestamp_freq_set+0x24>)
{
    450a:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    450c:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    450e:	4c08      	ldr	r4, [pc, #32]	; (4530 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    4510:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    4512:	2100      	movs	r1, #0
    4514:	42a0      	cmp	r0, r4
    4516:	d804      	bhi.n	4522 <log_output_timestamp_freq_set+0x1a>
    4518:	b101      	cbz	r1, 451c <log_output_timestamp_freq_set+0x14>
    451a:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    451c:	4b05      	ldr	r3, [pc, #20]	; (4534 <log_output_timestamp_freq_set+0x2c>)
    451e:	6018      	str	r0, [r3, #0]
}
    4520:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    4522:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    4524:	005b      	lsls	r3, r3, #1
    4526:	2101      	movs	r1, #1
    4528:	e7f4      	b.n	4514 <log_output_timestamp_freq_set+0xc>
    452a:	bf00      	nop
    452c:	2000148c 	.word	0x2000148c
    4530:	000f4240 	.word	0x000f4240
    4534:	20001488 	.word	0x20001488

00004538 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    4538:	4b01      	ldr	r3, [pc, #4]	; (4540 <log_backend_rtt_init+0x8>)
    453a:	2201      	movs	r2, #1
    453c:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    453e:	4770      	bx	lr
    4540:	20002c50 	.word	0x20002c50

00004544 <panic>:

static void panic(struct log_backend const *const backend)
{
	panic_mode = true;
    4544:	4b02      	ldr	r3, [pc, #8]	; (4550 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    4546:	4803      	ldr	r0, [pc, #12]	; (4554 <panic+0x10>)
    4548:	2201      	movs	r2, #1
    454a:	701a      	strb	r2, [r3, #0]
    454c:	f01a be1e 	b.w	1f18c <log_output_flush>
    4550:	20002c51 	.word	0x20002c51
    4554:	00023c60 	.word	0x00023c60

00004558 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    4558:	4801      	ldr	r0, [pc, #4]	; (4560 <dropped+0x8>)
    455a:	f7ff bfa9 	b.w	44b0 <log_output_dropped_process>
    455e:	bf00      	nop
    4560:	00023c60 	.word	0x00023c60

00004564 <put>:
{
    4564:	b510      	push	{r4, lr}
	log_msg_get(msg);
    4566:	4608      	mov	r0, r1
    4568:	460c      	mov	r4, r1
    456a:	f01a fbb4 	bl	1ecd6 <log_msg_get>
	log_output_msg_process(output, msg, flags);
    456e:	4805      	ldr	r0, [pc, #20]	; (4584 <put+0x20>)
    4570:	4621      	mov	r1, r4
    4572:	220f      	movs	r2, #15
    4574:	f7ff ff22 	bl	43bc <log_output_msg_process>
	log_msg_put(msg);
    4578:	4620      	mov	r0, r4
}
    457a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    457e:	f01a bbd9 	b.w	1ed34 <log_msg_put>
    4582:	bf00      	nop
    4584:	00023c60 	.word	0x00023c60

00004588 <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    4588:	4b05      	ldr	r3, [pc, #20]	; (45a0 <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
    458a:	781b      	ldrb	r3, [r3, #0]
    458c:	b11b      	cbz	r3, 4596 <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
    458e:	f241 3088 	movw	r0, #5000	; 0x1388
    4592:	f01e bdb2 	b.w	230fa <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    4596:	20a4      	movs	r0, #164	; 0xa4
    4598:	2100      	movs	r1, #0
    459a:	f019 b823 	b.w	1d5e4 <z_impl_k_sleep>
    459e:	bf00      	nop
    45a0:	20002c51 	.word	0x20002c51

000045a4 <data_out_block_mode>:
{
    45a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    45a8:	f8df 9090 	ldr.w	r9, [pc, #144]	; 463c <data_out_block_mode+0x98>
	return z_impl_k_mutex_lock(mutex, timeout);
    45ac:	f8df b090 	ldr.w	fp, [pc, #144]	; 4640 <data_out_block_mode+0x9c>
{
    45b0:	4607      	mov	r7, r0
    45b2:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    45b4:	2404      	movs	r4, #4
    45b6:	46ca      	mov	sl, r9
		if (!is_sync_mode()) {
    45b8:	f899 3000 	ldrb.w	r3, [r9]
    45bc:	b933      	cbnz	r3, 45cc <data_out_block_mode+0x28>
    45be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    45c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    45c6:	4658      	mov	r0, fp
    45c8:	f018 fc34 	bl	1ce34 <z_impl_k_mutex_lock>
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    45cc:	4632      	mov	r2, r6
    45ce:	4639      	mov	r1, r7
    45d0:	2000      	movs	r0, #0
    45d2:	f000 fd35 	bl	5040 <SEGGER_RTT_WriteSkipNoLock>
		if (!is_sync_mode()) {
    45d6:	f89a 3000 	ldrb.w	r3, [sl]
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    45da:	4680      	mov	r8, r0
		if (!is_sync_mode()) {
    45dc:	b913      	cbnz	r3, 45e4 <data_out_block_mode+0x40>
	return z_impl_k_mutex_unlock(mutex);
    45de:	4658      	mov	r0, fp
    45e0:	f018 fca0 	bl	1cf24 <z_impl_k_mutex_unlock>
		if (ret) {
    45e4:	4d14      	ldr	r5, [pc, #80]	; (4638 <data_out_block_mode+0x94>)
    45e6:	f1b8 0f00 	cmp.w	r8, #0
    45ea:	d018      	beq.n	461e <data_out_block_mode+0x7a>
	host_present = true;
    45ec:	2301      	movs	r3, #1
    45ee:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
    45f0:	f89a 3000 	ldrb.w	r3, [sl]
    45f4:	b933      	cbnz	r3, 4604 <data_out_block_mode+0x60>
}
    45f6:	4630      	mov	r0, r6
    45f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (retry_cnt == 0) {
    45fc:	b95c      	cbnz	r4, 4616 <data_out_block_mode+0x72>
		host_present = false;
    45fe:	702c      	strb	r4, [r5, #0]
    4600:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    4604:	2000      	movs	r0, #0
    4606:	f000 fd9b 	bl	5140 <SEGGER_RTT_HasDataUp>
    460a:	2800      	cmp	r0, #0
    460c:	d0f3      	beq.n	45f6 <data_out_block_mode+0x52>
    460e:	782b      	ldrb	r3, [r5, #0]
    4610:	2b00      	cmp	r3, #0
    4612:	d1f3      	bne.n	45fc <data_out_block_mode+0x58>
    4614:	e7ef      	b.n	45f6 <data_out_block_mode+0x52>
			on_failed_write(retry_cnt--);
    4616:	3c01      	subs	r4, #1
    4618:	f7ff ffb6 	bl	4588 <on_failed_write.part.0>
    461c:	e7f2      	b.n	4604 <data_out_block_mode+0x60>
		} else if (host_present) {
    461e:	782b      	ldrb	r3, [r5, #0]
    4620:	b113      	cbz	r3, 4628 <data_out_block_mode+0x84>
	if (retry_cnt == 0) {
    4622:	3c01      	subs	r4, #1
    4624:	d104      	bne.n	4630 <data_out_block_mode+0x8c>
		host_present = false;
    4626:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    4628:	782b      	ldrb	r3, [r5, #0]
    462a:	2b00      	cmp	r3, #0
    462c:	d1c4      	bne.n	45b8 <data_out_block_mode+0x14>
    462e:	e7e2      	b.n	45f6 <data_out_block_mode+0x52>
    4630:	f7ff ffaa 	bl	4588 <on_failed_write.part.0>
    4634:	e7f8      	b.n	4628 <data_out_block_mode+0x84>
    4636:	bf00      	nop
    4638:	20002c50 	.word	0x20002c50
    463c:	20002c51 	.word	0x20002c51
    4640:	2000083c 	.word	0x2000083c

00004644 <lec_ccc_cfg_changed>:
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    4644:	4b07      	ldr	r3, [pc, #28]	; (4664 <lec_ccc_cfg_changed+0x20>)
    4646:	4a08      	ldr	r2, [pc, #32]	; (4668 <lec_ccc_cfg_changed+0x24>)
{
	ARG_UNUSED(attr);

	bool notif_enabled = (value == BT_GATT_CCC_NOTIFY);

	LOG_INF("LRES notifications %s", notif_enabled ? "enabled" : "disabled");
    4648:	4808      	ldr	r0, [pc, #32]	; (466c <lec_ccc_cfg_changed+0x28>)
    464a:	1ad2      	subs	r2, r2, r3
    464c:	08d2      	lsrs	r2, r2, #3
    464e:	4b08      	ldr	r3, [pc, #32]	; (4670 <lec_ccc_cfg_changed+0x2c>)
    4650:	0192      	lsls	r2, r2, #6
    4652:	2901      	cmp	r1, #1
    4654:	bf14      	ite	ne
    4656:	4601      	movne	r1, r0
    4658:	4619      	moveq	r1, r3
    465a:	f042 0203 	orr.w	r2, r2, #3
    465e:	4805      	ldr	r0, [pc, #20]	; (4674 <lec_ccc_cfg_changed+0x30>)
    4660:	f01a ba77 	b.w	1eb52 <log_1>
    4664:	0002393c 	.word	0x0002393c
    4668:	00023a64 	.word	0x00023a64
    466c:	000256ae 	.word	0x000256ae
    4670:	000256a6 	.word	0x000256a6
    4674:	000256b7 	.word	0x000256b7

00004678 <bt_gatt_notify.constprop.0>:
 *  @param data Pointer to Attribute data.
 *  @param len Attribute value length.
 *
 *  @return 0 in case of success or negative value in case of error.
 */
static inline int bt_gatt_notify(struct bt_conn *conn,
    4678:	b530      	push	{r4, r5, lr}
    467a:	b087      	sub	sp, #28
    467c:	4605      	mov	r5, r0
    467e:	460c      	mov	r4, r1
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
    4680:	2218      	movs	r2, #24
    4682:	2100      	movs	r1, #0
    4684:	4668      	mov	r0, sp
    4686:	f01e fffa 	bl	2367e <memset>

	params.attr = attr;
    468a:	4b05      	ldr	r3, [pc, #20]	; (46a0 <bt_gatt_notify.constprop.0+0x28>)
	params.data = data;
	params.len = len;
    468c:	f8ad 400c 	strh.w	r4, [sp, #12]

	return bt_gatt_notify_cb(conn, &params);
    4690:	4669      	mov	r1, sp
    4692:	2000      	movs	r0, #0
	params.data = data;
    4694:	e9cd 3501 	strd	r3, r5, [sp, #4]
	return bt_gatt_notify_cb(conn, &params);
    4698:	f006 fbae 	bl	adf8 <bt_gatt_notify_cb>
}
    469c:	b007      	add	sp, #28
    469e:	bd30      	pop	{r4, r5, pc}
    46a0:	00023ce8 	.word	0x00023ce8

000046a4 <exp_settings_cb>:
}


static ssize_t exp_settings_cb(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			 const void *buf, uint16_t len, uint16_t offset, uint8_t sth)
{
    46a4:	b570      	push	{r4, r5, r6, lr}
	uint8_t *pu = (uint8_t *) buf;
	uint8_t data[MAX_DATA_LEN] = {0};
    46a6:	2400      	movs	r4, #0
{
    46a8:	b08e      	sub	sp, #56	; 0x38
	uint8_t data[MAX_DATA_LEN] = {0};
    46aa:	4621      	mov	r1, r4
{
    46ac:	4616      	mov	r6, r2
	uint8_t data[MAX_DATA_LEN] = {0};
    46ae:	a80a      	add	r0, sp, #40	; 0x28
    46b0:	2210      	movs	r2, #16
{
    46b2:	461d      	mov	r5, r3
	uint8_t data[MAX_DATA_LEN] = {0};
    46b4:	9409      	str	r4, [sp, #36]	; 0x24
    46b6:	f01e ffe2 	bl	2367e <memset>
	for(int16_t i = 0; i < len; i++) {
    46ba:	4621      	mov	r1, r4
    46bc:	b208      	sxth	r0, r1
    46be:	42a8      	cmp	r0, r5
    46c0:	db24      	blt.n	470c <exp_settings_cb+0x68>
    46c2:	482e      	ldr	r0, [pc, #184]	; (477c <exp_settings_cb+0xd8>)
    46c4:	f018 f9c4 	bl	1ca50 <z_impl_device_get_binding>


	const struct device *lora_dev;

	lora_dev = device_get_binding(DEFAULT_RADIO);
	if (!lora_dev) {
    46c8:	4604      	mov	r4, r0
    46ca:	b950      	cbnz	r0, 46e2 <exp_settings_cb+0x3e>
    46cc:	4a2c      	ldr	r2, [pc, #176]	; (4780 <exp_settings_cb+0xdc>)
    46ce:	4b2d      	ldr	r3, [pc, #180]	; (4784 <exp_settings_cb+0xe0>)
		LOG_ERR("%s Device not found", DEFAULT_RADIO);
    46d0:	492a      	ldr	r1, [pc, #168]	; (477c <exp_settings_cb+0xd8>)
    46d2:	482d      	ldr	r0, [pc, #180]	; (4788 <exp_settings_cb+0xe4>)
    46d4:	1ad2      	subs	r2, r2, r3
    46d6:	08d2      	lsrs	r2, r2, #3
    46d8:	0192      	lsls	r2, r2, #6
    46da:	f042 0201 	orr.w	r2, r2, #1
    46de:	f01a fa38 	bl	1eb52 <log_1>
			    uint8_t *data, uint32_t data_len)
{
	const struct lora_driver_api *api =
		(const struct lora_driver_api *)dev->api;

	return api->send(dev, data, data_len);
    46e2:	68a3      	ldr	r3, [r4, #8]
    46e4:	2214      	movs	r2, #20
    46e6:	685b      	ldr	r3, [r3, #4]
    46e8:	a909      	add	r1, sp, #36	; 0x24
    46ea:	4620      	mov	r0, r4
    46ec:	4798      	blx	r3
	}

	int ret;
	ret = lora_send(lora_dev, data, MAX_DATA_LEN);
	if (ret < 0) {
    46ee:	2800      	cmp	r0, #0
    46f0:	da13      	bge.n	471a <exp_settings_cb+0x76>
    46f2:	4923      	ldr	r1, [pc, #140]	; (4780 <exp_settings_cb+0xdc>)
    46f4:	4b23      	ldr	r3, [pc, #140]	; (4784 <exp_settings_cb+0xe0>)
		LOG_ERR("LoRa send failed");
    46f6:	4825      	ldr	r0, [pc, #148]	; (478c <exp_settings_cb+0xe8>)
    46f8:	1ac9      	subs	r1, r1, r3
    46fa:	08c9      	lsrs	r1, r1, #3
    46fc:	0189      	lsls	r1, r1, #6
    46fe:	f041 0101 	orr.w	r1, r1, #1
    4702:	f01a fa19 	bl	1eb38 <log_0>
	LOG_INF("Received data: %s (RSSI:%ddBm, SNR:%ddBm)",
			log_strdup(data), rssi, snr);*/


	return 0;
}
    4706:	2000      	movs	r0, #0
    4708:	b00e      	add	sp, #56	; 0x38
    470a:	bd70      	pop	{r4, r5, r6, pc}
		data[i] = *pu;
    470c:	ab0e      	add	r3, sp, #56	; 0x38
    470e:	4418      	add	r0, r3
    4710:	5c73      	ldrb	r3, [r6, r1]
    4712:	f800 3c14 	strb.w	r3, [r0, #-20]
	for(int16_t i = 0; i < len; i++) {
    4716:	3101      	adds	r1, #1
    4718:	e7d0      	b.n	46bc <exp_settings_cb+0x18>
	config.frequency = 868100000;
    471a:	4b1d      	ldr	r3, [pc, #116]	; (4790 <exp_settings_cb+0xec>)
    471c:	9306      	str	r3, [sp, #24]
	config.bandwidth = 0;
    471e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
    4722:	f8ad 301c 	strh.w	r3, [sp, #28]
	config.coding_rate = 1;
    4726:	2301      	movs	r3, #1
    4728:	f88d 301e 	strb.w	r3, [sp, #30]
	config.preamble_len = 8;
    472c:	4b19      	ldr	r3, [pc, #100]	; (4794 <exp_settings_cb+0xf0>)
    472e:	9308      	str	r3, [sp, #32]
	return api->config(dev, config);
    4730:	68a3      	ldr	r3, [r4, #8]
    4732:	a906      	add	r1, sp, #24
    4734:	681b      	ldr	r3, [r3, #0]
    4736:	4620      	mov	r0, r4
    4738:	4798      	blx	r3
	if (ret < 0) {
    473a:	2800      	cmp	r0, #0
    473c:	da09      	bge.n	4752 <exp_settings_cb+0xae>
    473e:	4910      	ldr	r1, [pc, #64]	; (4780 <exp_settings_cb+0xdc>)
    4740:	4b10      	ldr	r3, [pc, #64]	; (4784 <exp_settings_cb+0xe0>)
		LOG_ERR("LoRa config failed");
    4742:	4815      	ldr	r0, [pc, #84]	; (4798 <exp_settings_cb+0xf4>)
    4744:	1ac9      	subs	r1, r1, r3
    4746:	08c9      	lsrs	r1, r1, #3
    4748:	0189      	lsls	r1, r1, #6
    474a:	f041 0101 	orr.w	r1, r1, #1
    474e:	f01a f9f3 	bl	1eb38 <log_0>
			    k_timeout_t timeout, int16_t *rssi, int8_t *snr)
{
	const struct lora_driver_api *api =
		(const struct lora_driver_api *)dev->api;

	return api->recv(dev, data, size, timeout, rssi, snr);
    4752:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    4756:	2100      	movs	r1, #0
    4758:	68a3      	ldr	r3, [r4, #8]
    475a:	f10d 0215 	add.w	r2, sp, #21
    475e:	e9cd 0100 	strd	r0, r1, [sp]
    4762:	9203      	str	r2, [sp, #12]
    4764:	f10d 0216 	add.w	r2, sp, #22
    4768:	9202      	str	r2, [sp, #8]
    476a:	689b      	ldr	r3, [r3, #8]
    476c:	2214      	movs	r2, #20
    476e:	a909      	add	r1, sp, #36	; 0x24
    4770:	4620      	mov	r0, r4
    4772:	4798      	blx	r3
	printk("two seconds... \n");
    4774:	4809      	ldr	r0, [pc, #36]	; (479c <exp_settings_cb+0xf8>)
    4776:	f019 fe05 	bl	1e384 <printk>
	return 0;
    477a:	e7c4      	b.n	4706 <exp_settings_cb+0x62>
    477c:	000254ac 	.word	0x000254ac
    4780:	00023a64 	.word	0x00023a64
    4784:	0002393c 	.word	0x0002393c
    4788:	000254b3 	.word	0x000254b3
    478c:	000256cd 	.word	0x000256cd
    4790:	33be27a0 	.word	0x33be27a0
    4794:	00050008 	.word	0x00050008
    4798:	000256de 	.word	0x000256de
    479c:	000256f1 	.word	0x000256f1

000047a0 <change_config>:
void change_config(uint8_t* pu, bool tx) {
    47a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	int frequencies[8] =  {868100000, 868300000, 868500000, 867100000, 867300000, 867500000, 867700000, 869500000};
    47a2:	4e2f      	ldr	r6, [pc, #188]	; (4860 <change_config+0xc0>)
void change_config(uint8_t* pu, bool tx) {
    47a4:	4604      	mov	r4, r0
    47a6:	460f      	mov	r7, r1
	int frequencies[8] =  {868100000, 868300000, 868500000, 867100000, 867300000, 867500000, 867700000, 869500000};
    47a8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
void change_config(uint8_t* pu, bool tx) {
    47aa:	b089      	sub	sp, #36	; 0x24
	int frequencies[8] =  {868100000, 868300000, 868500000, 867100000, 867300000, 867500000, 867700000, 869500000};
    47ac:	466d      	mov	r5, sp
    47ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    47b0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    47b4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	config.frequency = frequencies[*pu];
    47b8:	7823      	ldrb	r3, [r4, #0]
    47ba:	4d2a      	ldr	r5, [pc, #168]	; (4864 <change_config+0xc4>)
	printk("[NOTIFICATION] data %d length %u\n", *pu, len);
    47bc:	482a      	ldr	r0, [pc, #168]	; (4868 <change_config+0xc8>)
	config.frequency = frequencies[*pu];
    47be:	aa08      	add	r2, sp, #32
    47c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	printk("[NOTIFICATION] data %d length %u\n", *pu, len);
    47c4:	2205      	movs	r2, #5
	config.frequency = frequencies[*pu];
    47c6:	f853 3c20 	ldr.w	r3, [r3, #-32]
    47ca:	602b      	str	r3, [r5, #0]
	printk("[NOTIFICATION] data %d length %u\n", *pu, len);
    47cc:	7821      	ldrb	r1, [r4, #0]
    47ce:	f019 fdd9 	bl	1e384 <printk>
	config.bandwidth = *pu;
    47d2:	7861      	ldrb	r1, [r4, #1]
	printk("[NOTIFICATION] data %d length %u\n", *pu, len);
    47d4:	4824      	ldr	r0, [pc, #144]	; (4868 <change_config+0xc8>)
	config.bandwidth = *pu;
    47d6:	7129      	strb	r1, [r5, #4]
	printk("[NOTIFICATION] data %d length %u\n", *pu, len);
    47d8:	2205      	movs	r2, #5
    47da:	f019 fdd3 	bl	1e384 <printk>
	config.datarate = *pu + 7;
    47de:	78a3      	ldrb	r3, [r4, #2]
	printk("[NOTIFICATION] dat %d length %u\n", *pu, len);
    47e0:	4822      	ldr	r0, [pc, #136]	; (486c <change_config+0xcc>)
	config.datarate = *pu + 7;
    47e2:	3307      	adds	r3, #7
    47e4:	716b      	strb	r3, [r5, #5]
	printk("[NOTIFICATION] dat %d length %u\n", *pu, len);
    47e6:	78a1      	ldrb	r1, [r4, #2]
    47e8:	2205      	movs	r2, #5
    47ea:	f019 fdcb 	bl	1e384 <printk>
	config.preamble_len = 8;
    47ee:	2308      	movs	r3, #8
    47f0:	812b      	strh	r3, [r5, #8]
	config.coding_rate = *pu + 1;
    47f2:	78e3      	ldrb	r3, [r4, #3]
	printk("[NOTIFICATION] data %d length %u\n", *pu, len);
    47f4:	481c      	ldr	r0, [pc, #112]	; (4868 <change_config+0xc8>)
	config.coding_rate = *pu + 1;
    47f6:	3301      	adds	r3, #1
    47f8:	71ab      	strb	r3, [r5, #6]
	printk("[NOTIFICATION] data %d length %u\n", *pu, len);
    47fa:	78e1      	ldrb	r1, [r4, #3]
    47fc:	2205      	movs	r2, #5
    47fe:	f019 fdc1 	bl	1e384 <printk>
	config.tx_power = *pu + 5;
    4802:	7923      	ldrb	r3, [r4, #4]
	printk("[NOTIFICATION] data %d length %u\n", *pu, len);
    4804:	4818      	ldr	r0, [pc, #96]	; (4868 <change_config+0xc8>)
	config.tx_power = *pu + 5;
    4806:	3305      	adds	r3, #5
    4808:	72ab      	strb	r3, [r5, #10]
	printk("[NOTIFICATION] data %d length %u\n", *pu, len);
    480a:	7921      	ldrb	r1, [r4, #4]
    480c:	2205      	movs	r2, #5
    480e:	f019 fdb9 	bl	1e384 <printk>
	config.tx = tx;
    4812:	72ef      	strb	r7, [r5, #11]
    4814:	4816      	ldr	r0, [pc, #88]	; (4870 <change_config+0xd0>)
    4816:	f018 f91b 	bl	1ca50 <z_impl_device_get_binding>
	if (!lora_dev) {
    481a:	4604      	mov	r4, r0
    481c:	b950      	cbnz	r0, 4834 <change_config+0x94>
    481e:	4a15      	ldr	r2, [pc, #84]	; (4874 <change_config+0xd4>)
    4820:	4b15      	ldr	r3, [pc, #84]	; (4878 <change_config+0xd8>)
		LOG_ERR("%s Device not found", DEFAULT_RADIO);
    4822:	4913      	ldr	r1, [pc, #76]	; (4870 <change_config+0xd0>)
    4824:	4815      	ldr	r0, [pc, #84]	; (487c <change_config+0xdc>)
    4826:	1ad2      	subs	r2, r2, r3
    4828:	08d2      	lsrs	r2, r2, #3
    482a:	0192      	lsls	r2, r2, #6
    482c:	f042 0201 	orr.w	r2, r2, #1
    4830:	f01a f98f 	bl	1eb52 <log_1>
	return api->config(dev, config);
    4834:	68a3      	ldr	r3, [r4, #8]
    4836:	490b      	ldr	r1, [pc, #44]	; (4864 <change_config+0xc4>)
    4838:	681b      	ldr	r3, [r3, #0]
    483a:	4620      	mov	r0, r4
    483c:	4798      	blx	r3
	if (ret < 0) {
    483e:	2800      	cmp	r0, #0
    4840:	da0c      	bge.n	485c <change_config+0xbc>
    4842:	4b0d      	ldr	r3, [pc, #52]	; (4878 <change_config+0xd8>)
    4844:	490b      	ldr	r1, [pc, #44]	; (4874 <change_config+0xd4>)
		LOG_ERR("LoRa config failed");
    4846:	480e      	ldr	r0, [pc, #56]	; (4880 <change_config+0xe0>)
    4848:	1ac9      	subs	r1, r1, r3
    484a:	08c9      	lsrs	r1, r1, #3
    484c:	0189      	lsls	r1, r1, #6
    484e:	f041 0101 	orr.w	r1, r1, #1
}
    4852:	b009      	add	sp, #36	; 0x24
    4854:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		LOG_ERR("LoRa config failed");
    4858:	f01a b96e 	b.w	1eb38 <log_0>
}
    485c:	b009      	add	sp, #36	; 0x24
    485e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4860:	00023b24 	.word	0x00023b24
    4864:	200014a4 	.word	0x200014a4
    4868:	00025702 	.word	0x00025702
    486c:	00025724 	.word	0x00025724
    4870:	000254ac 	.word	0x000254ac
    4874:	00023a64 	.word	0x00023a64
    4878:	0002393c 	.word	0x0002393c
    487c:	000254b3 	.word	0x000254b3
    4880:	000256de 	.word	0x000256de

00004884 <bt_lres_notify>:
	return 0;
}

// notify phone about anything
int bt_lres_notify(const void *data, uint8_t type_of_notification)
{
    4884:	b510      	push	{r4, lr}
    4886:	4604      	mov	r4, r0
    4888:	b086      	sub	sp, #24
	int rc;

	if(type_of_notification == 0) {		// RSSI/SNR notification
    488a:	b991      	cbnz	r1, 48b2 <bt_lres_notify+0x2e>
		printk("at stats\n");
    488c:	4814      	ldr	r0, [pc, #80]	; (48e0 <bt_lres_notify+0x5c>)
    488e:	f019 fd79 	bl	1e384 <printk>
		uint8_t *pu = (uint8_t *) data;

		static uint8_t stats[3];

		// put -1 at index 0 to distinguish from msg notification
		stats[0] = -1;
    4892:	4814      	ldr	r0, [pc, #80]	; (48e4 <bt_lres_notify+0x60>)
    4894:	23ff      	movs	r3, #255	; 0xff
    4896:	7003      	strb	r3, [r0, #0]
		stats[1] = *pu;
    4898:	7823      	ldrb	r3, [r4, #0]
    489a:	7043      	strb	r3, [r0, #1]
		pu++;
		stats[2] = *pu;
    489c:	7863      	ldrb	r3, [r4, #1]
    489e:	7083      	strb	r3, [r0, #2]

		rc = bt_gatt_notify(NULL, &lres_svc.attrs[1], &stats, sizeof(stats));
    48a0:	2103      	movs	r1, #3
		rc = bt_gatt_notify(NULL, &lres_svc.attrs[1], &data, sizeof(data));
	} else {		// notify about config changed
		static int8_t notifier[1];
		notifier[0] = -2;

		rc = bt_gatt_notify(NULL, &lres_svc.attrs[1], &notifier, sizeof(notifier));
    48a2:	f7ff fee9 	bl	4678 <bt_gatt_notify.constprop.0>
	}
	

	return rc == -ENOTCONN ? 0 : rc;
    48a6:	f110 0f80 	cmn.w	r0, #128	; 0x80
}
    48aa:	bf08      	it	eq
    48ac:	2000      	moveq	r0, #0
    48ae:	b006      	add	sp, #24
    48b0:	bd10      	pop	{r4, pc}
	} else if(type_of_notification == 1){							// msg notification
    48b2:	2901      	cmp	r1, #1
    48b4:	d10e      	bne.n	48d4 <bt_lres_notify+0x50>
		printk("at msg\n");
    48b6:	480c      	ldr	r0, [pc, #48]	; (48e8 <bt_lres_notify+0x64>)
    48b8:	f019 fd64 	bl	1e384 <printk>
		for(uint16_t i = 0; i < MAX_DATA_LEN; i++) {
    48bc:	aa01      	add	r2, sp, #4
    48be:	1e63      	subs	r3, r4, #1
    48c0:	4610      	mov	r0, r2
    48c2:	3413      	adds	r4, #19
			data[i] = *pc;
    48c4:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    48c8:	f802 1b01 	strb.w	r1, [r2], #1
		for(uint16_t i = 0; i < MAX_DATA_LEN; i++) {
    48cc:	42a3      	cmp	r3, r4
    48ce:	d1f9      	bne.n	48c4 <bt_lres_notify+0x40>
		rc = bt_gatt_notify(NULL, &lres_svc.attrs[1], &data, sizeof(data));
    48d0:	2114      	movs	r1, #20
    48d2:	e7e6      	b.n	48a2 <bt_lres_notify+0x1e>
		notifier[0] = -2;
    48d4:	4805      	ldr	r0, [pc, #20]	; (48ec <bt_lres_notify+0x68>)
    48d6:	23fe      	movs	r3, #254	; 0xfe
    48d8:	7003      	strb	r3, [r0, #0]
		rc = bt_gatt_notify(NULL, &lres_svc.attrs[1], &notifier, sizeof(notifier));
    48da:	2101      	movs	r1, #1
    48dc:	e7e1      	b.n	48a2 <bt_lres_notify+0x1e>
    48de:	bf00      	nop
    48e0:	00025745 	.word	0x00025745
    48e4:	20002c53 	.word	0x20002c53
    48e8:	0002574f 	.word	0x0002574f
    48ec:	20002c52 	.word	0x20002c52

000048f0 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    48f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    48f2:	4605      	mov	r5, r0
	__asm__ volatile(
    48f4:	f04f 0320 	mov.w	r3, #32
    48f8:	f3ef 8611 	mrs	r6, BASEPRI
    48fc:	f383 8811 	msr	BASEPRI, r3
    4900:	f3bf 8f6f 	isb	sy
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    4904:	4b0b      	ldr	r3, [pc, #44]	; (4934 <pm_state_notify+0x44>)
    4906:	681c      	ldr	r4, [r3, #0]
    4908:	2c00      	cmp	r4, #0
    490a:	bf38      	it	cc
    490c:	2400      	movcc	r4, #0
    490e:	b15c      	cbz	r4, 4928 <pm_state_notify+0x38>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
    4910:	4f09      	ldr	r7, [pc, #36]	; (4938 <pm_state_notify+0x48>)
			callback = notifier->state_exit;
    4912:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    4916:	2d00      	cmp	r5, #0
    4918:	bf08      	it	eq
    491a:	4613      	moveq	r3, r2
		if (callback) {
    491c:	b10b      	cbz	r3, 4922 <pm_state_notify+0x32>
			callback(z_power_state.state);
    491e:	7838      	ldrb	r0, [r7, #0]
    4920:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    4922:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    4924:	2c00      	cmp	r4, #0
    4926:	d1f4      	bne.n	4912 <pm_state_notify+0x22>
	__asm__ volatile(
    4928:	f386 8811 	msr	BASEPRI, r6
    492c:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    4930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4932:	bf00      	nop
    4934:	200014b0 	.word	0x200014b0
    4938:	200014b8 	.word	0x200014b8

0000493c <pm_system_resume>:
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
    493c:	4b08      	ldr	r3, [pc, #32]	; (4960 <pm_system_resume+0x24>)
{
    493e:	b510      	push	{r4, lr}
	if (!post_ops_done) {
    4940:	681c      	ldr	r4, [r3, #0]
    4942:	b95c      	cbnz	r4, 495c <pm_system_resume+0x20>
		post_ops_done = 1;
    4944:	2201      	movs	r2, #1
    4946:	601a      	str	r2, [r3, #0]
		pm_power_state_exit_post_ops(z_power_state);
    4948:	4b06      	ldr	r3, [pc, #24]	; (4964 <pm_system_resume+0x28>)
    494a:	e893 0003 	ldmia.w	r3, {r0, r1}
    494e:	f01b fe54 	bl	205fa <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    4952:	4620      	mov	r0, r4
	}
}
    4954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		pm_state_notify(false);
    4958:	f7ff bfca 	b.w	48f0 <pm_state_notify>
}
    495c:	bd10      	pop	{r4, pc}
    495e:	bf00      	nop
    4960:	200001cc 	.word	0x200001cc
    4964:	200014b8 	.word	0x200014b8

00004968 <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
    4968:	b537      	push	{r0, r1, r2, r4, r5, lr}
	z_power_state = pm_policy_next_state(ticks);
    496a:	466d      	mov	r5, sp
{
    496c:	4601      	mov	r1, r0
	z_power_state = pm_policy_next_state(ticks);
    496e:	4628      	mov	r0, r5
    4970:	f01a fc60 	bl	1f234 <pm_policy_next_state>
    4974:	e895 0003 	ldmia.w	r5, {r0, r1}
    4978:	4c0b      	ldr	r4, [pc, #44]	; (49a8 <pm_system_suspend+0x40>)
    497a:	e884 0003 	stmia.w	r4, {r0, r1}
	if (z_power_state.state == PM_STATE_ACTIVE) {
    497e:	7820      	ldrb	r0, [r4, #0]
    4980:	b180      	cbz	r0, 49a4 <pm_system_suspend+0x3c>
		LOG_DBG("No PM operations done.");
		return z_power_state.state;
	}
	post_ops_done = 0;
    4982:	4b0a      	ldr	r3, [pc, #40]	; (49ac <pm_system_suspend+0x44>)
    4984:	2200      	movs	r2, #0
    4986:	601a      	str	r2, [r3, #0]
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    4988:	f018 fba0 	bl	1d0cc <k_sched_lock>
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
    498c:	2001      	movs	r0, #1
    498e:	f7ff ffaf 	bl	48f0 <pm_state_notify>
	pm_power_state_set(z_power_state);
    4992:	e894 0003 	ldmia.w	r4, {r0, r1}
    4996:	f01b fe1d 	bl	205d4 <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
    499a:	f7ff ffcf 	bl	493c <pm_system_resume>
	k_sched_unlock();
    499e:	f018 fc85 	bl	1d2ac <k_sched_unlock>

	return z_power_state.state;
    49a2:	7820      	ldrb	r0, [r4, #0]
}
    49a4:	b003      	add	sp, #12
    49a6:	bd30      	pop	{r4, r5, pc}
    49a8:	200014b8 	.word	0x200014b8
    49ac:	200001cc 	.word	0x200001cc

000049b0 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
    49b0:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
    49b2:	4c04      	ldr	r4, [pc, #16]	; (49c4 <rtt_console_init+0x14>)
    49b4:	4620      	mov	r0, r4
    49b6:	f7fe fb9b 	bl	30f0 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
    49ba:	4620      	mov	r0, r4
    49bc:	f001 f9e0 	bl	5d80 <__stdout_hook_install>

	return 0;
}
    49c0:	2000      	movs	r0, #0
    49c2:	bd10      	pop	{r4, pc}
    49c4:	000049c9 	.word	0x000049c9

000049c8 <rtt_console_out>:
{
    49c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
    49cc:	f8df 8060 	ldr.w	r8, [pc, #96]	; 4a30 <rtt_console_out+0x68>
    49d0:	4e16      	ldr	r6, [pc, #88]	; (4a2c <rtt_console_out+0x64>)
	char c = (char)character;
    49d2:	f88d 0007 	strb.w	r0, [sp, #7]
{
    49d6:	4604      	mov	r4, r0
	char c = (char)character;
    49d8:	2503      	movs	r5, #3
    49da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    49de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    49e2:	4640      	mov	r0, r8
    49e4:	f018 fa26 	bl	1ce34 <z_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    49e8:	2201      	movs	r2, #1
    49ea:	f10d 0107 	add.w	r1, sp, #7
    49ee:	2000      	movs	r0, #0
    49f0:	f000 fb72 	bl	50d8 <SEGGER_RTT_WriteNoLock>
    49f4:	4607      	mov	r7, r0
	return z_impl_k_mutex_unlock(mutex);
    49f6:	4640      	mov	r0, r8
    49f8:	f018 fa94 	bl	1cf24 <z_impl_k_mutex_unlock>
		if (cnt) {
    49fc:	b12f      	cbz	r7, 4a0a <rtt_console_out+0x42>
			host_present = true;
    49fe:	2301      	movs	r3, #1
    4a00:	7033      	strb	r3, [r6, #0]
}
    4a02:	4620      	mov	r0, r4
    4a04:	b002      	add	sp, #8
    4a06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (host_present) {
    4a0a:	7833      	ldrb	r3, [r6, #0]
    4a0c:	2b00      	cmp	r3, #0
    4a0e:	d0f8      	beq.n	4a02 <rtt_console_out+0x3a>
			if (max_cnt) {
    4a10:	3d01      	subs	r5, #1
    4a12:	d008      	beq.n	4a26 <rtt_console_out+0x5e>
	if (k_is_in_isr()) {
    4a14:	f01e fb6b 	bl	230ee <k_is_in_isr>
    4a18:	2800      	cmp	r0, #0
    4a1a:	d1de      	bne.n	49da <rtt_console_out+0x12>
	return z_impl_k_sleep(timeout);
    4a1c:	2100      	movs	r1, #0
    4a1e:	2042      	movs	r0, #66	; 0x42
    4a20:	f018 fde0 	bl	1d5e4 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
    4a24:	e7d9      	b.n	49da <rtt_console_out+0x12>
				host_present = false;
    4a26:	7035      	strb	r5, [r6, #0]
    4a28:	e7eb      	b.n	4a02 <rtt_console_out+0x3a>
    4a2a:	bf00      	nop
    4a2c:	20002c56 	.word	0x20002c56
    4a30:	2000083c 	.word	0x2000083c

00004a34 <onoff_stop>:
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    4a34:	b570      	push	{r4, r5, r6, lr}
    4a36:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
    4a38:	480d      	ldr	r0, [pc, #52]	; (4a70 <onoff_stop+0x3c>)
    4a3a:	1a23      	subs	r3, r4, r0
    4a3c:	109a      	asrs	r2, r3, #2
    4a3e:	4b0d      	ldr	r3, [pc, #52]	; (4a74 <onoff_stop+0x40>)
    4a40:	4353      	muls	r3, r2
    4a42:	b2db      	uxtb	r3, r3
	err = set_off_state(&subdata->flags, ctx);
    4a44:	250c      	movs	r5, #12
    4a46:	435d      	muls	r5, r3
    4a48:	f105 0340 	add.w	r3, r5, #64	; 0x40
{
    4a4c:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
    4a4e:	4418      	add	r0, r3
    4a50:	2140      	movs	r1, #64	; 0x40
    4a52:	f01a fbfc 	bl	1f24e <set_off_state>
	if (err < 0) {
    4a56:	1e01      	subs	r1, r0, #0
    4a58:	db04      	blt.n	4a64 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
    4a5a:	4b07      	ldr	r3, [pc, #28]	; (4a78 <onoff_stop+0x44>)
    4a5c:	442b      	add	r3, r5
    4a5e:	685b      	ldr	r3, [r3, #4]
    4a60:	4798      	blx	r3
	return 0;
    4a62:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
    4a64:	4620      	mov	r0, r4
    4a66:	4633      	mov	r3, r6
}
    4a68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    4a6c:	4718      	bx	r3
    4a6e:	bf00      	nop
    4a70:	200014d4 	.word	0x200014d4
    4a74:	b6db6db7 	.word	0xb6db6db7
    4a78:	00023d88 	.word	0x00023d88

00004a7c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    4a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    4a80:	4c0f      	ldr	r4, [pc, #60]	; (4ac0 <onoff_start+0x44>)
    4a82:	4d10      	ldr	r5, [pc, #64]	; (4ac4 <onoff_start+0x48>)
    4a84:	1b03      	subs	r3, r0, r4
    4a86:	109b      	asrs	r3, r3, #2
    4a88:	435d      	muls	r5, r3
    4a8a:	b2eb      	uxtb	r3, r5
	err = set_starting_state(&subdata->flags, ctx);
    4a8c:	250c      	movs	r5, #12
    4a8e:	435d      	muls	r5, r3
{
    4a90:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
    4a92:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
    4a96:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
    4a98:	4420      	add	r0, r4
    4a9a:	2140      	movs	r1, #64	; 0x40
    4a9c:	f01a fbf0 	bl	1f280 <set_starting_state>
	if (err < 0) {
    4aa0:	1e01      	subs	r1, r0, #0
    4aa2:	db08      	blt.n	4ab6 <onoff_start+0x3a>
	subdata->cb = cb;
    4aa4:	4b08      	ldr	r3, [pc, #32]	; (4ac8 <onoff_start+0x4c>)
    4aa6:	442c      	add	r4, r5
	subdata->user_data = user_data;
    4aa8:	e9c4 360e 	strd	r3, r6, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    4aac:	4b07      	ldr	r3, [pc, #28]	; (4acc <onoff_start+0x50>)
    4aae:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    4ab0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    4ab4:	4718      	bx	r3
		notify(mgr, err);
    4ab6:	4638      	mov	r0, r7
    4ab8:	4633      	mov	r3, r6
}
    4aba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    4abe:	4718      	bx	r3
    4ac0:	200014d4 	.word	0x200014d4
    4ac4:	b6db6db7 	.word	0xb6db6db7
    4ac8:	0001f2e3 	.word	0x0001f2e3
    4acc:	00023d88 	.word	0x00023d88

00004ad0 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4ad0:	2200      	movs	r2, #0
{
    4ad2:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4ad4:	2101      	movs	r1, #1
{
    4ad6:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4ad8:	4610      	mov	r0, r2
    4ada:	f000 fd4d 	bl	5578 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    4ade:	2000      	movs	r0, #0
    4ae0:	f000 fd18 	bl	5514 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    4ae4:	480f      	ldr	r0, [pc, #60]	; (4b24 <clk_init+0x54>)
    4ae6:	f017 fd2f 	bl	1c548 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    4aea:	4b0f      	ldr	r3, [pc, #60]	; (4b28 <clk_init+0x58>)
    4aec:	4298      	cmp	r0, r3
    4aee:	d115      	bne.n	4b1c <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    4af0:	f01e f810 	bl	22b14 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    4af4:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    4af6:	490d      	ldr	r1, [pc, #52]	; (4b2c <clk_init+0x5c>)
    4af8:	4630      	mov	r0, r6
    4afa:	f019 fcac 	bl	1e456 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    4afe:	2800      	cmp	r0, #0
    4b00:	db0b      	blt.n	4b1a <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    4b02:	2501      	movs	r5, #1
    4b04:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
    4b06:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    4b08:	4908      	ldr	r1, [pc, #32]	; (4b2c <clk_init+0x5c>)
    4b0a:	f104 001c 	add.w	r0, r4, #28
    4b0e:	f019 fca2 	bl	1e456 <onoff_manager_init>
		if (err < 0) {
    4b12:	2800      	cmp	r0, #0
    4b14:	db01      	blt.n	4b1a <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    4b16:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    4b18:	2000      	movs	r0, #0
}
    4b1a:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    4b1c:	f06f 0004 	mvn.w	r0, #4
    4b20:	e7fb      	b.n	4b1a <clk_init+0x4a>
    4b22:	bf00      	nop
    4b24:	00004b65 	.word	0x00004b65
    4b28:	0bad0000 	.word	0x0bad0000
    4b2c:	00023da0 	.word	0x00023da0

00004b30 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    4b30:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    4b32:	230c      	movs	r3, #12
    4b34:	4809      	ldr	r0, [pc, #36]	; (4b5c <clkstarted_handle.constprop.0+0x2c>)
    4b36:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    4b38:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    4b3a:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    4b3c:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    4b40:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    4b42:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    4b44:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    4b46:	4418      	add	r0, r3
    4b48:	f01a fbb8 	bl	1f2bc <set_on_state>
	if (callback) {
    4b4c:	b12d      	cbz	r5, 4b5a <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    4b4e:	4632      	mov	r2, r6
    4b50:	462b      	mov	r3, r5
    4b52:	4803      	ldr	r0, [pc, #12]	; (4b60 <clkstarted_handle.constprop.0+0x30>)
}
    4b54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    4b58:	4718      	bx	r3
}
    4b5a:	bd70      	pop	{r4, r5, r6, pc}
    4b5c:	200014d4 	.word	0x200014d4
    4b60:	200006f0 	.word	0x200006f0

00004b64 <clock_event_handler>:
	switch (event) {
    4b64:	b110      	cbz	r0, 4b6c <clock_event_handler+0x8>
    4b66:	2801      	cmp	r0, #1
    4b68:	d004      	beq.n	4b74 <clock_event_handler+0x10>
    4b6a:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    4b6c:	4b03      	ldr	r3, [pc, #12]	; (4b7c <clock_event_handler+0x18>)
    4b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4b70:	075b      	lsls	r3, r3, #29
    4b72:	d101      	bne.n	4b78 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    4b74:	f7ff bfdc 	b.w	4b30 <clkstarted_handle.constprop.0>
}
    4b78:	4770      	bx	lr
    4b7a:	bf00      	nop
    4b7c:	200014d4 	.word	0x200014d4

00004b80 <generic_hfclk_start>:
{
    4b80:	b508      	push	{r3, lr}
	__asm__ volatile(
    4b82:	f04f 0320 	mov.w	r3, #32
    4b86:	f3ef 8111 	mrs	r1, BASEPRI
    4b8a:	f383 8811 	msr	BASEPRI, r3
    4b8e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    4b92:	4a12      	ldr	r2, [pc, #72]	; (4bdc <generic_hfclk_start+0x5c>)
    4b94:	6813      	ldr	r3, [r2, #0]
    4b96:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    4b9a:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    4b9e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    4ba0:	d00c      	beq.n	4bbc <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4ba2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4ba6:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4baa:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    4bae:	f013 0301 	ands.w	r3, r3, #1
    4bb2:	d003      	beq.n	4bbc <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    4bb4:	480a      	ldr	r0, [pc, #40]	; (4be0 <generic_hfclk_start+0x60>)
    4bb6:	f01a fb81 	bl	1f2bc <set_on_state>
			already_started = true;
    4bba:	2301      	movs	r3, #1
	__asm__ volatile(
    4bbc:	f381 8811 	msr	BASEPRI, r1
    4bc0:	f3bf 8f6f 	isb	sy
	if (already_started) {
    4bc4:	b123      	cbz	r3, 4bd0 <generic_hfclk_start+0x50>
}
    4bc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    4bca:	2000      	movs	r0, #0
    4bcc:	f7ff bfb0 	b.w	4b30 <clkstarted_handle.constprop.0>
}
    4bd0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    4bd4:	2001      	movs	r0, #1
    4bd6:	f017 bcc7 	b.w	1c568 <nrfx_clock_start>
    4bda:	bf00      	nop
    4bdc:	20001524 	.word	0x20001524
    4be0:	20001514 	.word	0x20001514

00004be4 <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4be4:	4b09      	ldr	r3, [pc, #36]	; (4c0c <generic_hfclk_stop+0x28>)
    4be6:	f3bf 8f5b 	dmb	ish
    4bea:	e853 2f00 	ldrex	r2, [r3]
    4bee:	f022 0102 	bic.w	r1, r2, #2
    4bf2:	e843 1000 	strex	r0, r1, [r3]
    4bf6:	2800      	cmp	r0, #0
    4bf8:	d1f7      	bne.n	4bea <generic_hfclk_stop+0x6>
    4bfa:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    4bfe:	07d3      	lsls	r3, r2, #31
    4c00:	d402      	bmi.n	4c08 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    4c02:	2001      	movs	r0, #1
    4c04:	f017 bce2 	b.w	1c5cc <nrfx_clock_stop>
}
    4c08:	4770      	bx	lr
    4c0a:	bf00      	nop
    4c0c:	20001524 	.word	0x20001524

00004c10 <api_blocking_start>:
{
    4c10:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    4c12:	2200      	movs	r2, #0
    4c14:	2301      	movs	r3, #1
    4c16:	e9cd 2302 	strd	r2, r3, [sp, #8]
    4c1a:	ab04      	add	r3, sp, #16
    4c1c:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    4c20:	4a09      	ldr	r2, [pc, #36]	; (4c48 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    4c22:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    4c26:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    4c28:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    4c2c:	f01a fb7f 	bl	1f32e <api_start>
	if (err < 0) {
    4c30:	2800      	cmp	r0, #0
    4c32:	db05      	blt.n	4c40 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    4c34:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    4c38:	2300      	movs	r3, #0
    4c3a:	4668      	mov	r0, sp
    4c3c:	f018 fd94 	bl	1d768 <z_impl_k_sem_take>
}
    4c40:	b007      	add	sp, #28
    4c42:	f85d fb04 	ldr.w	pc, [sp], #4
    4c46:	bf00      	nop
    4c48:	0001f301 	.word	0x0001f301

00004c4c <z_nrf_clock_control_get_onoff>:
}
    4c4c:	4a02      	ldr	r2, [pc, #8]	; (4c58 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
    4c4e:	b2c3      	uxtb	r3, r0
}
    4c50:	201c      	movs	r0, #28
    4c52:	fb03 2000 	mla	r0, r3, r0, r2
    4c56:	4770      	bx	lr
    4c58:	200014d4 	.word	0x200014d4

00004c5c <z_nrf_clock_bt_ctlr_hf_request>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4c5c:	4b09      	ldr	r3, [pc, #36]	; (4c84 <z_nrf_clock_bt_ctlr_hf_request+0x28>)
    4c5e:	f3bf 8f5b 	dmb	ish
    4c62:	e853 2f00 	ldrex	r2, [r3]
    4c66:	f042 0101 	orr.w	r1, r2, #1
    4c6a:	e843 1000 	strex	r0, r1, [r3]
    4c6e:	2800      	cmp	r0, #0
    4c70:	d1f7      	bne.n	4c62 <z_nrf_clock_bt_ctlr_hf_request+0x6>
    4c72:	f3bf 8f5b 	dmb	ish
	if (atomic_or(&hfclk_users, HF_USER_BT) & HF_USER_GENERIC) {
    4c76:	0793      	lsls	r3, r2, #30
    4c78:	d402      	bmi.n	4c80 <z_nrf_clock_bt_ctlr_hf_request+0x24>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    4c7a:	2001      	movs	r0, #1
    4c7c:	f017 bc74 	b.w	1c568 <nrfx_clock_start>
}
    4c80:	4770      	bx	lr
    4c82:	bf00      	nop
    4c84:	20001524 	.word	0x20001524

00004c88 <z_nrf_clock_bt_ctlr_hf_release>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4c88:	4b09      	ldr	r3, [pc, #36]	; (4cb0 <z_nrf_clock_bt_ctlr_hf_release+0x28>)
    4c8a:	f3bf 8f5b 	dmb	ish
    4c8e:	e853 2f00 	ldrex	r2, [r3]
    4c92:	f022 0101 	bic.w	r1, r2, #1
    4c96:	e843 1000 	strex	r0, r1, [r3]
    4c9a:	2800      	cmp	r0, #0
    4c9c:	d1f7      	bne.n	4c8e <z_nrf_clock_bt_ctlr_hf_release+0x6>
    4c9e:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_BT) & HF_USER_GENERIC) {
    4ca2:	0793      	lsls	r3, r2, #30
    4ca4:	d402      	bmi.n	4cac <z_nrf_clock_bt_ctlr_hf_release+0x24>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    4ca6:	2001      	movs	r0, #1
    4ca8:	f017 bc90 	b.w	1c5cc <nrfx_clock_stop>
}
    4cac:	4770      	bx	lr
    4cae:	bf00      	nop
    4cb0:	20001524 	.word	0x20001524

00004cb4 <z_nrf_clock_control_lf_on>:
{
    4cb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    4cb8:	493a      	ldr	r1, [pc, #232]	; (4da4 <z_nrf_clock_control_lf_on+0xf0>)
    4cba:	f3bf 8f5b 	dmb	ish
    4cbe:	4606      	mov	r6, r0
    4cc0:	2201      	movs	r2, #1
    4cc2:	e851 3f00 	ldrex	r3, [r1]
    4cc6:	e841 2000 	strex	r0, r2, [r1]
    4cca:	2800      	cmp	r0, #0
    4ccc:	d1f9      	bne.n	4cc2 <z_nrf_clock_control_lf_on+0xe>
    4cce:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    4cd2:	b933      	cbnz	r3, 4ce2 <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    4cd4:	4934      	ldr	r1, [pc, #208]	; (4da8 <z_nrf_clock_control_lf_on+0xf4>)
		err = onoff_request(mgr, &cli);
    4cd6:	4835      	ldr	r0, [pc, #212]	; (4dac <z_nrf_clock_control_lf_on+0xf8>)
    4cd8:	604b      	str	r3, [r1, #4]
    4cda:	60cb      	str	r3, [r1, #12]
    4cdc:	608a      	str	r2, [r1, #8]
    4cde:	f019 fbcd 	bl	1e47c <onoff_request>
	switch (start_mode) {
    4ce2:	1e73      	subs	r3, r6, #1
    4ce4:	2b01      	cmp	r3, #1
    4ce6:	d832      	bhi.n	4d4e <z_nrf_clock_control_lf_on+0x9a>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    4ce8:	2e01      	cmp	r6, #1
    4cea:	d107      	bne.n	4cfc <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    4cec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4cf0:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    4cf4:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    4cf8:	2b01      	cmp	r3, #1
    4cfa:	d028      	beq.n	4d4e <z_nrf_clock_control_lf_on+0x9a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4cfc:	f01e f9f7 	bl	230ee <k_is_in_isr>
    4d00:	4604      	mov	r4, r0
    4d02:	b918      	cbnz	r0, 4d0c <z_nrf_clock_control_lf_on+0x58>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    4d04:	4b2a      	ldr	r3, [pc, #168]	; (4db0 <z_nrf_clock_control_lf_on+0xfc>)
	int key = isr_mode ? irq_lock() : 0;
    4d06:	781b      	ldrb	r3, [r3, #0]
    4d08:	2b00      	cmp	r3, #0
    4d0a:	d144      	bne.n	4d96 <z_nrf_clock_control_lf_on+0xe2>
	__asm__ volatile(
    4d0c:	f04f 0320 	mov.w	r3, #32
    4d10:	f3ef 8511 	mrs	r5, BASEPRI
    4d14:	f383 8811 	msr	BASEPRI, r3
    4d18:	f3bf 8f6f 	isb	sy
    4d1c:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4d1e:	4f25      	ldr	r7, [pc, #148]	; (4db4 <z_nrf_clock_control_lf_on+0x100>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4d20:	f8df 8094 	ldr.w	r8, [pc, #148]	; 4db8 <z_nrf_clock_control_lf_on+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4d24:	f8df 9094 	ldr.w	r9, [pc, #148]	; 4dbc <z_nrf_clock_control_lf_on+0x108>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4d28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4d2c:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4d30:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    4d34:	03d2      	lsls	r2, r2, #15
    4d36:	d50c      	bpl.n	4d52 <z_nrf_clock_control_lf_on+0x9e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    4d38:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    4d3c:	2b01      	cmp	r3, #1
    4d3e:	d001      	beq.n	4d44 <z_nrf_clock_control_lf_on+0x90>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    4d40:	2e01      	cmp	r6, #1
    4d42:	d106      	bne.n	4d52 <z_nrf_clock_control_lf_on+0x9e>
	if (isr_mode) {
    4d44:	b30c      	cbz	r4, 4d8a <z_nrf_clock_control_lf_on+0xd6>
	__asm__ volatile(
    4d46:	f385 8811 	msr	BASEPRI, r5
    4d4a:	f3bf 8f6f 	isb	sy
}
    4d4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
    4d52:	b1ac      	cbz	r4, 4d80 <z_nrf_clock_control_lf_on+0xcc>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    4d54:	4628      	mov	r0, r5
    4d56:	f000 fc7d 	bl	5654 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    4d5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4d5e:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    4d62:	2b00      	cmp	r3, #0
    4d64:	d1e0      	bne.n	4d28 <z_nrf_clock_control_lf_on+0x74>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4d66:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    4d68:	2900      	cmp	r1, #0
    4d6a:	d0dd      	beq.n	4d28 <z_nrf_clock_control_lf_on+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4d6c:	603b      	str	r3, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    4d6e:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    4d70:	2301      	movs	r3, #1
    4d72:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    4d76:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4d7a:	f8c9 3000 	str.w	r3, [r9]
}
    4d7e:	e7d3      	b.n	4d28 <z_nrf_clock_control_lf_on+0x74>
	return z_impl_k_sleep(timeout);
    4d80:	2100      	movs	r1, #0
    4d82:	2021      	movs	r0, #33	; 0x21
    4d84:	f018 fc2e 	bl	1d5e4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    4d88:	e7e7      	b.n	4d5a <z_nrf_clock_control_lf_on+0xa6>
    p_reg->INTENSET = mask;
    4d8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4d8e:	2202      	movs	r2, #2
    4d90:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    4d94:	e7db      	b.n	4d4e <z_nrf_clock_control_lf_on+0x9a>
    p_reg->INTENCLR = mask;
    4d96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4d9a:	2202      	movs	r2, #2
    4d9c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    4da0:	4605      	mov	r5, r0
}
    4da2:	e7bc      	b.n	4d1e <z_nrf_clock_control_lf_on+0x6a>
    4da4:	20001528 	.word	0x20001528
    4da8:	200014c4 	.word	0x200014c4
    4dac:	200014f0 	.word	0x200014f0
    4db0:	200032c6 	.word	0x200032c6
    4db4:	40000104 	.word	0x40000104
    4db8:	e000e100 	.word	0xe000e100
    4dbc:	40000008 	.word	0x40000008

00004dc0 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(int32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    4dc0:	4a04      	ldr	r2, [pc, #16]	; (4dd4 <sys_clock_timeout_handler+0x14>)
    4dc2:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    4dc4:	1ac8      	subs	r0, r1, r3
    4dc6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    4dca:	4403      	add	r3, r0
    4dcc:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    4dce:	f019 b84f 	b.w	1de70 <sys_clock_announce>
    4dd2:	bf00      	nop
    4dd4:	2000153c 	.word	0x2000153c

00004dd8 <set_absolute_alarm>:
{
    4dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4ddc:	0086      	lsls	r6, r0, #2
    4dde:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    4de2:	f100 0450 	add.w	r4, r0, #80	; 0x50
    4de6:	f506 3688 	add.w	r6, r6, #69632	; 0x11000
    4dea:	00a4      	lsls	r4, r4, #2
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    4dec:	f8df 807c 	ldr.w	r8, [pc, #124]	; 4e6c <set_absolute_alarm+0x94>
    return p_reg->CC[ch];
    4df0:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4df4:	b2a4      	uxth	r4, r4
    4df6:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4dfa:	f44f 3780 	mov.w	r7, #65536	; 0x10000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    4dfe:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    4e02:	f504 3488 	add.w	r4, r4, #69632	; 0x11000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4e06:	4087      	lsls	r7, r0
    4e08:	46c1      	mov	r9, r8
     return p_reg->COUNTER;
    4e0a:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    4e0e:	eba3 030a 	sub.w	r3, r3, sl
    4e12:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    4e16:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    4e1a:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    4e1c:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    4e20:	d102      	bne.n	4e28 <set_absolute_alarm+0x50>
	z_impl_k_busy_wait(usec_to_wait);
    4e22:	2013      	movs	r0, #19
    4e24:	f01e f969 	bl	230fa <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    4e28:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
    4e2c:	1aab      	subs	r3, r5, r2
    4e2e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    4e32:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    4e36:	bf88      	it	hi
    4e38:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4e3a:	2300      	movs	r3, #0
    4e3c:	6023      	str	r3, [r4, #0]
    4e3e:	6823      	ldr	r3, [r4, #0]
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    4e40:	f8c9 7344 	str.w	r7, [r9, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    4e44:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    4e48:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    4e4c:	f8d9 3504 	ldr.w	r3, [r9, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    4e50:	459a      	cmp	sl, r3
    4e52:	d006      	beq.n	4e62 <set_absolute_alarm+0x8a>
	return (a - b) & COUNTER_MAX;
    4e54:	1aeb      	subs	r3, r5, r3
    4e56:	3b02      	subs	r3, #2
    4e58:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    4e5c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    4e60:	d801      	bhi.n	4e66 <set_absolute_alarm+0x8e>
}
    4e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
    4e66:	462b      	mov	r3, r5
    4e68:	e7cf      	b.n	4e0a <set_absolute_alarm+0x32>
    4e6a:	bf00      	nop
    4e6c:	40011000 	.word	0x40011000

00004e70 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    4e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return p_reg->INTENSET & mask;
    4e72:	4e10      	ldr	r6, [pc, #64]	; (4eb4 <rtc_nrf_isr+0x44>)
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4e74:	4f10      	ldr	r7, [pc, #64]	; (4eb8 <rtc_nrf_isr+0x48>)
	ARG_UNUSED(arg);

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    4e76:	2500      	movs	r5, #0
    4e78:	4b10      	ldr	r3, [pc, #64]	; (4ebc <rtc_nrf_isr+0x4c>)
    4e7a:	2000      	movs	r0, #0
    4e7c:	681c      	ldr	r4, [r3, #0]
    4e7e:	461a      	mov	r2, r3
    4e80:	b105      	cbz	r5, 4e84 <rtc_nrf_isr+0x14>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    4e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return p_reg->INTENSET & mask;
    4e84:	f8d6 1304 	ldr.w	r1, [r6, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    4e88:	03c9      	lsls	r1, r1, #15
    4e8a:	d5fa      	bpl.n	4e82 <rtc_nrf_isr+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4e8c:	6839      	ldr	r1, [r7, #0]
    4e8e:	2900      	cmp	r1, #0
    4e90:	d0f7      	beq.n	4e82 <rtc_nrf_isr+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4e92:	603d      	str	r5, [r7, #0]
    4e94:	6839      	ldr	r1, [r7, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    4e96:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    4e9a:	f8c6 1348 	str.w	r1, [r6, #840]	; 0x348
    return p_reg->CC[ch];
    4e9e:	f8d6 1540 	ldr.w	r1, [r6, #1344]	; 0x540
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    4ea2:	2501      	movs	r5, #1
			if (handler) {
    4ea4:	b11c      	cbz	r4, 4eae <rtc_nrf_isr+0x3e>
				handler(chan, cc_val,
    4ea6:	685a      	ldr	r2, [r3, #4]
    4ea8:	6018      	str	r0, [r3, #0]
    4eaa:	47a0      	blx	r4
    4eac:	e7e4      	b.n	4e78 <rtc_nrf_isr+0x8>
    4eae:	6014      	str	r4, [r2, #0]
}
    4eb0:	e7e7      	b.n	4e82 <rtc_nrf_isr+0x12>
    4eb2:	bf00      	nop
    4eb4:	40011000 	.word	0x40011000
    4eb8:	40011140 	.word	0x40011140
    4ebc:	20001530 	.word	0x20001530

00004ec0 <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
    4ec0:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    4ec2:	4d10      	ldr	r5, [pc, #64]	; (4f04 <sys_clock_driver_init+0x44>)
    4ec4:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
    4ec6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
    4eca:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->INTENSET = mask;
    4ece:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    4ed2:	4b0d      	ldr	r3, [pc, #52]	; (4f08 <sys_clock_driver_init+0x48>)
    4ed4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    4ed8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    4edc:	2101      	movs	r1, #1
    4ede:	4622      	mov	r2, r4
    4ee0:	2011      	movs	r0, #17
    4ee2:	f000 fb49 	bl	5578 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    4ee6:	2011      	movs	r0, #17
    4ee8:	f000 fb14 	bl	5514 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    4eec:	4a07      	ldr	r2, [pc, #28]	; (4f0c <sys_clock_driver_init+0x4c>)
    4eee:	2301      	movs	r3, #1
    4ef0:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    4ef2:	4a07      	ldr	r2, [pc, #28]	; (4f10 <sys_clock_driver_init+0x50>)
    4ef4:	602b      	str	r3, [r5, #0]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    4ef6:	2002      	movs	r0, #2
	int_mask = BIT_MASK(CHAN_COUNT);
    4ef8:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    4efa:	f7ff fedb 	bl	4cb4 <z_nrf_clock_control_lf_on>

	return 0;
}
    4efe:	4620      	mov	r0, r4
    4f00:	bd38      	pop	{r3, r4, r5, pc}
    4f02:	bf00      	nop
    4f04:	40011000 	.word	0x40011000
    4f08:	e000e100 	.word	0xe000e100
    4f0c:	40011008 	.word	0x40011008
    4f10:	20001538 	.word	0x20001538

00004f14 <sys_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    4f14:	4b13      	ldr	r3, [pc, #76]	; (4f64 <sys_clock_set_timeout+0x50>)
    4f16:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    4f1a:	bf08      	it	eq
    4f1c:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    4f1e:	3801      	subs	r0, #1
    4f20:	2800      	cmp	r0, #0
    4f22:	dd1c      	ble.n	4f5e <sys_clock_set_timeout+0x4a>
    4f24:	4298      	cmp	r0, r3
    4f26:	bfa8      	it	ge
    4f28:	4618      	movge	r0, r3
     return p_reg->COUNTER;
    4f2a:	4b0f      	ldr	r3, [pc, #60]	; (4f68 <sys_clock_set_timeout+0x54>)
    4f2c:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    4f30:	4b0e      	ldr	r3, [pc, #56]	; (4f6c <sys_clock_set_timeout+0x58>)
    4f32:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
    4f34:	1a52      	subs	r2, r2, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    4f36:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
    4f3a:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
		ticks = 0;
    4f3e:	bf18      	it	ne
    4f40:	2000      	movne	r0, #0
	cc_data[chan].callback = handler;
    4f42:	4a0b      	ldr	r2, [pc, #44]	; (4f70 <sys_clock_set_timeout+0x5c>)
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    4f44:	3301      	adds	r3, #1
    4f46:	4403      	add	r3, r0
	cc_data[chan].callback = handler;
    4f48:	480a      	ldr	r0, [pc, #40]	; (4f74 <sys_clock_set_timeout+0x60>)
    4f4a:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    4f4c:	2000      	movs	r0, #0
    4f4e:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    4f50:	4a04      	ldr	r2, [pc, #16]	; (4f64 <sys_clock_set_timeout+0x50>)
    4f52:	4293      	cmp	r3, r2
    4f54:	bf94      	ite	ls
    4f56:	18c9      	addls	r1, r1, r3
    4f58:	1889      	addhi	r1, r1, r2
    4f5a:	f7ff bf3d 	b.w	4dd8 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    4f5e:	2000      	movs	r0, #0
    4f60:	e7e3      	b.n	4f2a <sys_clock_set_timeout+0x16>
    4f62:	bf00      	nop
    4f64:	007fffff 	.word	0x007fffff
    4f68:	40011000 	.word	0x40011000
    4f6c:	2000153c 	.word	0x2000153c
    4f70:	20001530 	.word	0x20001530
    4f74:	00004dc1 	.word	0x00004dc1

00004f78 <sys_clock_elapsed>:
	__asm__ volatile(
    4f78:	f04f 0220 	mov.w	r2, #32
    4f7c:	f3ef 8311 	mrs	r3, BASEPRI
    4f80:	f382 8811 	msr	BASEPRI, r2
    4f84:	f3bf 8f6f 	isb	sy
    4f88:	4a06      	ldr	r2, [pc, #24]	; (4fa4 <sys_clock_elapsed+0x2c>)
    4f8a:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    4f8e:	4a06      	ldr	r2, [pc, #24]	; (4fa8 <sys_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    4f90:	6812      	ldr	r2, [r2, #0]
    4f92:	1a80      	subs	r0, r0, r2
    4f94:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    4f98:	f383 8811 	msr	BASEPRI, r3
    4f9c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    4fa0:	4770      	bx	lr
    4fa2:	bf00      	nop
    4fa4:	40011000 	.word	0x40011000
    4fa8:	2000153c 	.word	0x2000153c

00004fac <sys_clock_cycle_get_32>:
	__asm__ volatile(
    4fac:	f04f 0320 	mov.w	r3, #32
    4fb0:	f3ef 8211 	mrs	r2, BASEPRI
    4fb4:	f383 8811 	msr	BASEPRI, r3
    4fb8:	f3bf 8f6f 	isb	sy

uint32_t sys_clock_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
    4fbc:	4906      	ldr	r1, [pc, #24]	; (4fd8 <sys_clock_cycle_get_32+0x2c>)
    4fbe:	4b07      	ldr	r3, [pc, #28]	; (4fdc <sys_clock_cycle_get_32+0x30>)
    4fc0:	6808      	ldr	r0, [r1, #0]
    4fc2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    4fc6:	f382 8811 	msr	BASEPRI, r2
    4fca:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    4fce:	1a1b      	subs	r3, r3, r0
    4fd0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    4fd4:	4418      	add	r0, r3
    4fd6:	4770      	bx	lr
    4fd8:	2000153c 	.word	0x2000153c
    4fdc:	40011000 	.word	0x40011000

00004fe0 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
    4fe0:	b510      	push	{r4, lr}
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    4fe2:	4c11      	ldr	r4, [pc, #68]	; (5028 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    4fe4:	4a11      	ldr	r2, [pc, #68]	; (502c <_DoInit+0x4c>)
    4fe6:	61a2      	str	r2, [r4, #24]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    4fe8:	2303      	movs	r3, #3
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    4fea:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
    4fee:	4b10      	ldr	r3, [pc, #64]	; (5030 <_DoInit+0x50>)
    4ff0:	61e3      	str	r3, [r4, #28]
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    4ff2:	6622      	str	r2, [r4, #96]	; 0x60
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    4ff4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aDown[0].pBuffer       = _acDownBuffer;
    4ff8:	4a0e      	ldr	r2, [pc, #56]	; (5034 <_DoInit+0x54>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
    4ffa:	490f      	ldr	r1, [pc, #60]	; (5038 <_DoInit+0x58>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    4ffc:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
    4ffe:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
    5000:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    5002:	2210      	movs	r2, #16
  strcpy(&p->acID[7], "RTT");
    5004:	1de0      	adds	r0, r4, #7
  p->aUp[0].RdOff         = 0u;
    5006:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    5008:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    500a:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
    500c:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    500e:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    5010:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    5012:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
    5014:	f01e fb3b 	bl	2368e <strcpy>
  strcpy(&p->acID[0], "SEGGER");
    5018:	4908      	ldr	r1, [pc, #32]	; (503c <_DoInit+0x5c>)
    501a:	4620      	mov	r0, r4
    501c:	f01e fb37 	bl	2368e <strcpy>
  p->acID[6] = ' ';
    5020:	2320      	movs	r3, #32
    5022:	71a3      	strb	r3, [r4, #6]
}
    5024:	bd10      	pop	{r4, pc}
    5026:	bf00      	nop
    5028:	20001540 	.word	0x20001540
    502c:	0002578c 	.word	0x0002578c
    5030:	20002c67 	.word	0x20002c67
    5034:	20002c57 	.word	0x20002c57
    5038:	00025795 	.word	0x00025795
    503c:	00025799 	.word	0x00025799

00005040 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    5040:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  RdOff = pRing->RdOff;
    5044:	4f23      	ldr	r7, [pc, #140]	; (50d4 <SEGGER_RTT_WriteSkipNoLock+0x94>)
    5046:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    504a:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    504c:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    5050:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    5052:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    5054:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    5056:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    5058:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    505a:	d834      	bhi.n	50c6 <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    505c:	f8d2 a020 	ldr.w	sl, [r2, #32]
    5060:	ebaa 0905 	sub.w	r9, sl, r5
    5064:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    5068:	4294      	cmp	r4, r2
    506a:	d811      	bhi.n	5090 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
    506c:	f04f 0918 	mov.w	r9, #24
    5070:	fb06 9309 	mla	r3, r6, r9, r9
    5074:	443b      	add	r3, r7
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    5076:	4622      	mov	r2, r4
    5078:	6858      	ldr	r0, [r3, #4]
    507a:	4641      	mov	r1, r8
    507c:	4428      	add	r0, r5
    507e:	f01e faf0 	bl	23662 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    5082:	fb09 7606 	mla	r6, r9, r6, r7
    5086:	442c      	add	r4, r5
      // Therefore, check if 2nd memcpy is necessary at all
      //
      if (NumBytes) {
        memcpy(pRing->pBuffer, pData + Rem, NumBytes);
      }
      pRing->WrOff = NumBytes;
    5088:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
    508a:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    508c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    5090:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    5092:	429c      	cmp	r4, r3
    5094:	d81b      	bhi.n	50ce <SEGGER_RTT_WriteSkipNoLock+0x8e>
      memcpy(pRing->pBuffer + WrOff, pData, Rem);       // Copy 1st chunk
    5096:	fb00 bb0b 	mla	fp, r0, fp, fp
    509a:	44bb      	add	fp, r7
    509c:	464a      	mov	r2, r9
    509e:	f8db 0004 	ldr.w	r0, [fp, #4]
    50a2:	442c      	add	r4, r5
    50a4:	4428      	add	r0, r5
    50a6:	f01e fadc 	bl	23662 <memcpy>
      if (NumBytes) {
    50aa:	ebb4 040a 	subs.w	r4, r4, sl
    50ae:	d006      	beq.n	50be <SEGGER_RTT_WriteSkipNoLock+0x7e>
    50b0:	f8db 0004 	ldr.w	r0, [fp, #4]
    50b4:	4622      	mov	r2, r4
    50b6:	eb08 0109 	add.w	r1, r8, r9
    50ba:	f01e fad2 	bl	23662 <memcpy>
      pRing->WrOff = NumBytes;
    50be:	2018      	movs	r0, #24
    50c0:	fb00 7606 	mla	r6, r0, r6, r7
    50c4:	e7e0      	b.n	5088 <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
    50c6:	3b01      	subs	r3, #1
    50c8:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    50ca:	42a3      	cmp	r3, r4
    50cc:	d2ce      	bcs.n	506c <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    50ce:	2000      	movs	r0, #0
    50d0:	e7dc      	b.n	508c <SEGGER_RTT_WriteSkipNoLock+0x4c>
    50d2:	bf00      	nop
    50d4:	20001540 	.word	0x20001540

000050d8 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    50d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    50da:	4c18      	ldr	r4, [pc, #96]	; (513c <SEGGER_RTT_WriteNoLock+0x64>)
    50dc:	2318      	movs	r3, #24
    50de:	fb00 3503 	mla	r5, r0, r3, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    50e2:	fb03 4000 	mla	r0, r3, r0, r4
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    50e6:	4425      	add	r5, r4
  switch (pRing->Flags) {
    50e8:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    50ea:	2c01      	cmp	r4, #1
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    50ec:	460f      	mov	r7, r1
    50ee:	4616      	mov	r6, r2
  switch (pRing->Flags) {
    50f0:	d00f      	beq.n	5112 <SEGGER_RTT_WriteNoLock+0x3a>
    50f2:	2c02      	cmp	r4, #2
    50f4:	d01a      	beq.n	512c <SEGGER_RTT_WriteNoLock+0x54>
    50f6:	b9f4      	cbnz	r4, 5136 <SEGGER_RTT_WriteNoLock+0x5e>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    50f8:	4628      	mov	r0, r5
    50fa:	f01a f934 	bl	1f366 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    50fe:	4286      	cmp	r6, r0
    5100:	d805      	bhi.n	510e <SEGGER_RTT_WriteNoLock+0x36>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    5102:	4632      	mov	r2, r6
    5104:	4639      	mov	r1, r7
    5106:	4628      	mov	r0, r5
    5108:	f01a f93b 	bl	1f382 <_WriteNoCheck>
    510c:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
    510e:	4620      	mov	r0, r4
    5110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
    5112:	4628      	mov	r0, r5
    5114:	f01a f927 	bl	1f366 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    5118:	4286      	cmp	r6, r0
    511a:	4634      	mov	r4, r6
    511c:	bf28      	it	cs
    511e:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    5120:	4622      	mov	r2, r4
    5122:	4639      	mov	r1, r7
    5124:	4628      	mov	r0, r5
    5126:	f01a f92c 	bl	1f382 <_WriteNoCheck>
    break;
    512a:	e7f0      	b.n	510e <SEGGER_RTT_WriteNoLock+0x36>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    512c:	4628      	mov	r0, r5
}
    512e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    5132:	f01a b942 	b.w	1f3ba <_WriteBlocking>
  switch (pRing->Flags) {
    5136:	2400      	movs	r4, #0
  return Status;
    5138:	e7e9      	b.n	510e <SEGGER_RTT_WriteNoLock+0x36>
    513a:	bf00      	nop
    513c:	20001540 	.word	0x20001540

00005140 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  v = pRing->RdOff;
    5140:	4b03      	ldr	r3, [pc, #12]	; (5150 <SEGGER_RTT_HasDataUp+0x10>)
    5142:	2218      	movs	r2, #24
    5144:	fb02 3300 	mla	r3, r2, r0, r3
    5148:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    514a:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    514c:	1a80      	subs	r0, r0, r2
    514e:	4770      	bx	lr
    5150:	20001540 	.word	0x20001540

00005154 <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
    5154:	4b01      	ldr	r3, [pc, #4]	; (515c <uECC_get_rng+0x8>)
    5156:	6818      	ldr	r0, [r3, #0]
    5158:	4770      	bx	lr
    515a:	bf00      	nop
    515c:	200001d0 	.word	0x200001d0

00005160 <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
    5160:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    5162:	2208      	movs	r2, #8
{
    5164:	b089      	sub	sp, #36	; 0x24
    5166:	460c      	mov	r4, r1
    5168:	4606      	mov	r6, r0
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    516a:	f01a fb1a 	bl	1f7a2 <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
    516e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    5170:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
    5172:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    5174:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
    5176:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    5178:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
    517a:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    517c:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    517e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    5180:	9307      	str	r3, [sp, #28]
	tmp[0] = tmp[1] = tmp[2] = 0;
    5182:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    5184:	2308      	movs	r3, #8
    5186:	466a      	mov	r2, sp
    5188:	4669      	mov	r1, sp
    518a:	4668      	mov	r0, sp
	tmp[0] = tmp[1] = tmp[2] = 0;
    518c:	e9cd 7701 	strd	r7, r7, [sp, #4]
    5190:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    5192:	f01a fa08 	bl	1f5a6 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    5196:	2308      	movs	r3, #8
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    5198:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    519a:	466a      	mov	r2, sp
    519c:	4631      	mov	r1, r6
    519e:	4630      	mov	r0, r6
    51a0:	f01a fa01 	bl	1f5a6 <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
    51a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    51a6:	9303      	str	r3, [sp, #12]
	tmp[4] = product[13];
    51a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    51aa:	9304      	str	r3, [sp, #16]
	tmp[5] = product[14];
    51ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    51ae:	9305      	str	r3, [sp, #20]
	tmp[6] = product[15];
    51b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    51b2:	4405      	add	r5, r0
	tmp[7] = 0;
    51b4:	e9cd 3706 	strd	r3, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    51b8:	466a      	mov	r2, sp
    51ba:	2308      	movs	r3, #8
    51bc:	4669      	mov	r1, sp
    51be:	4668      	mov	r0, sp
    51c0:	f01a f9f1 	bl	1f5a6 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    51c4:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    51c6:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    51c8:	2308      	movs	r3, #8
    51ca:	466a      	mov	r2, sp
    51cc:	4630      	mov	r0, r6
    51ce:	f01a f9ea 	bl	1f5a6 <uECC_vli_add>

	/* s3 */
	tmp[0] = product[8];
    51d2:	6a23      	ldr	r3, [r4, #32]
    51d4:	9300      	str	r3, [sp, #0]
	tmp[1] = product[9];
    51d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    51d8:	9301      	str	r3, [sp, #4]
	tmp[2] = product[10];
    51da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    51dc:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
    51de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    51e0:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    51e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    51e4:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    51e6:	4405      	add	r5, r0
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    51e8:	2308      	movs	r3, #8
    51ea:	466a      	mov	r2, sp
    51ec:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    51ee:	e9cd 7704 	strd	r7, r7, [sp, #16]
    51f2:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    51f4:	f01a f9d7 	bl	1f5a6 <uECC_vli_add>

	/* s4 */
	tmp[0] = product[9];
    51f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    51fa:	9300      	str	r3, [sp, #0]
	tmp[1] = product[10];
    51fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
    51fe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	tmp[1] = product[10];
    5200:	9301      	str	r3, [sp, #4]
	tmp[2] = product[11];
    5202:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5204:	9302      	str	r3, [sp, #8]
	tmp[4] = product[14];
    5206:	9204      	str	r2, [sp, #16]
	tmp[3] = product[13];
    5208:	6b63      	ldr	r3, [r4, #52]	; 0x34
	tmp[5] = product[15];
    520a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	tmp[3] = product[13];
    520c:	9303      	str	r3, [sp, #12]
	tmp[6] = product[13];
    520e:	e9cd 2305 	strd	r2, r3, [sp, #20]
	tmp[7] = product[8];
    5212:	6a23      	ldr	r3, [r4, #32]
    5214:	9307      	str	r3, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    5216:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    5218:	2308      	movs	r3, #8
    521a:	466a      	mov	r2, sp
    521c:	4630      	mov	r0, r6
    521e:	f01a f9c2 	bl	1f5a6 <uECC_vli_add>

	/* d1 */
	tmp[0] = product[11];
    5222:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5224:	9300      	str	r3, [sp, #0]
	tmp[1] = product[12];
    5226:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5228:	9301      	str	r3, [sp, #4]
	tmp[2] = product[13];
    522a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    522c:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
    522e:	6a23      	ldr	r3, [r4, #32]
    5230:	9306      	str	r3, [sp, #24]
	tmp[7] = product[10];
    5232:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5234:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    5236:	4405      	add	r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    5238:	2308      	movs	r3, #8
    523a:	466a      	mov	r2, sp
    523c:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    523e:	e9cd 7704 	strd	r7, r7, [sp, #16]
    5242:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    5244:	f01a fae3 	bl	1f80e <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
    5248:	6b23      	ldr	r3, [r4, #48]	; 0x30
    524a:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
    524c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    524e:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
    5250:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    5252:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
    5254:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    5256:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
    5258:	6a63      	ldr	r3, [r4, #36]	; 0x24
    525a:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
    525c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    525e:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    5260:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    5262:	2308      	movs	r3, #8
    5264:	466a      	mov	r2, sp
    5266:	4630      	mov	r0, r6
	tmp[4] = tmp[5] = 0;
    5268:	e9cd 7704 	strd	r7, r7, [sp, #16]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    526c:	f01a facf 	bl	1f80e <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
    5270:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5272:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
    5274:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    5276:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
    5278:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    527a:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
    527c:	6a23      	ldr	r3, [r4, #32]
    527e:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
    5280:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5282:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
    5284:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
    5286:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
    528a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    528c:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    528e:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    5290:	2308      	movs	r3, #8
    5292:	466a      	mov	r2, sp
    5294:	4630      	mov	r0, r6
    5296:	f01a faba 	bl	1f80e <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
    529a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    529c:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
    529e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
    52a0:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
    52a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    52a6:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
    52a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    52aa:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
    52ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[6] = 0;
    52ae:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[13];
    52b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
    52b4:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    52b6:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    52b8:	2308      	movs	r3, #8
    52ba:	466a      	mov	r2, sp
    52bc:	4630      	mov	r0, r6
    52be:	f01a faa6 	bl	1f80e <uECC_vli_sub>

	if (carry < 0) {
    52c2:	1a2d      	subs	r5, r5, r0
    52c4:	d410      	bmi.n	52e8 <vli_mmod_fast_secp256r1+0x188>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
		}
		while (carry < 0);
	} else  {
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    52c6:	4c0d      	ldr	r4, [pc, #52]	; (52fc <vli_mmod_fast_secp256r1+0x19c>)
		while (carry || 
    52c8:	b935      	cbnz	r5, 52d8 <vli_mmod_fast_secp256r1+0x178>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    52ca:	2208      	movs	r2, #8
    52cc:	4631      	mov	r1, r6
    52ce:	4620      	mov	r0, r4
    52d0:	f01a fa73 	bl	1f7ba <uECC_vli_cmp_unsafe>
		while (carry || 
    52d4:	2801      	cmp	r0, #1
    52d6:	d00f      	beq.n	52f8 <vli_mmod_fast_secp256r1+0x198>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    52d8:	2308      	movs	r3, #8
    52da:	4622      	mov	r2, r4
    52dc:	4631      	mov	r1, r6
    52de:	4630      	mov	r0, r6
    52e0:	f01a fa95 	bl	1f80e <uECC_vli_sub>
    52e4:	1a2d      	subs	r5, r5, r0
    52e6:	e7ef      	b.n	52c8 <vli_mmod_fast_secp256r1+0x168>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    52e8:	4a04      	ldr	r2, [pc, #16]	; (52fc <vli_mmod_fast_secp256r1+0x19c>)
    52ea:	2308      	movs	r3, #8
    52ec:	4631      	mov	r1, r6
    52ee:	4630      	mov	r0, r6
    52f0:	f01a f959 	bl	1f5a6 <uECC_vli_add>
		while (carry < 0);
    52f4:	182d      	adds	r5, r5, r0
    52f6:	d4f8      	bmi.n	52ea <vli_mmod_fast_secp256r1+0x18a>
		}
	}
}
    52f8:	b009      	add	sp, #36	; 0x24
    52fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    52fc:	00023db0 	.word	0x00023db0

00005300 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
    5300:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    5302:	4e26      	ldr	r6, [pc, #152]	; (539c <tc_aes128_set_encrypt_key+0x9c>)
{
    5304:	4607      	mov	r7, r0
    5306:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    5308:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    530a:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    530c:	ad01      	add	r5, sp, #4
    530e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    5310:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    5312:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    5314:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    5318:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
    531c:	4638      	mov	r0, r7
    531e:	2f00      	cmp	r7, #0
    5320:	d038      	beq.n	5394 <tc_aes128_set_encrypt_key+0x94>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
    5322:	2c00      	cmp	r4, #0
    5324:	d038      	beq.n	5398 <tc_aes128_set_encrypt_key+0x98>
    5326:	1f38      	subs	r0, r7, #4
    5328:	4621      	mov	r1, r4
    532a:	4602      	mov	r2, r0
    532c:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    532e:	784b      	ldrb	r3, [r1, #1]
    5330:	780d      	ldrb	r5, [r1, #0]
    5332:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    5334:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    5338:	78cd      	ldrb	r5, [r1, #3]
    533a:	432b      	orrs	r3, r5
    533c:	788d      	ldrb	r5, [r1, #2]
    533e:	3104      	adds	r1, #4
    5340:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    5344:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    5346:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    534a:	d1f0      	bne.n	532e <tc_aes128_set_encrypt_key+0x2e>
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
    534c:	4c14      	ldr	r4, [pc, #80]	; (53a0 <tc_aes128_set_encrypt_key+0xa0>)
    534e:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    5350:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    5352:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    5354:	d116      	bne.n	5384 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    5356:	f3c3 4207 	ubfx	r2, r3, #16, #8
    535a:	5ca5      	ldrb	r5, [r4, r2]
    535c:	0e1a      	lsrs	r2, r3, #24
    535e:	5ca2      	ldrb	r2, [r4, r2]
    5360:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    5364:	f3c3 2507 	ubfx	r5, r3, #8, #8
    5368:	b2db      	uxtb	r3, r3
    536a:	5d65      	ldrb	r5, [r4, r5]
    536c:	5ce3      	ldrb	r3, [r4, r3]
    536e:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    5372:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    5376:	ad0c      	add	r5, sp, #48	; 0x30
    5378:	f021 0303 	bic.w	r3, r1, #3
    537c:	442b      	add	r3, r5
    537e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    5382:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
    5384:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    5388:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    538a:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    538c:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    538e:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    5390:	d1de      	bne.n	5350 <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
    5392:	2001      	movs	r0, #1
}
    5394:	b00d      	add	sp, #52	; 0x34
    5396:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    5398:	4620      	mov	r0, r4
    539a:	e7fb      	b.n	5394 <tc_aes128_set_encrypt_key+0x94>
    539c:	00023b44 	.word	0x00023b44
    53a0:	000257a0 	.word	0x000257a0

000053a4 <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
    53a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    53a8:	4615      	mov	r5, r2
    53aa:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
    53ac:	4606      	mov	r6, r0
    53ae:	2800      	cmp	r0, #0
    53b0:	d058      	beq.n	5464 <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
    53b2:	2900      	cmp	r1, #0
    53b4:	d059      	beq.n	546a <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    53b6:	2a00      	cmp	r2, #0
    53b8:	d059      	beq.n	546e <tc_aes_encrypt+0xca>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    53ba:	2310      	movs	r3, #16
    53bc:	460a      	mov	r2, r1
    53be:	4668      	mov	r0, sp
    53c0:	4619      	mov	r1, r3
    53c2:	f01a f82a 	bl	1f41a <_copy>
	add_round_key(state, s->words);
    53c6:	4629      	mov	r1, r5
    53c8:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
    53ca:	4c2a      	ldr	r4, [pc, #168]	; (5474 <tc_aes_encrypt+0xd0>)
	add_round_key(state, s->words);
    53cc:	f01a ff31 	bl	20232 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
    53d0:	f105 0710 	add.w	r7, r5, #16
    53d4:	46a1      	mov	r9, r4
    53d6:	35a0      	adds	r5, #160	; 0xa0
	for (i = 0; i < (Nb * Nk); ++i) {
    53d8:	46e8      	mov	r8, sp
{
    53da:	466a      	mov	r2, sp
    53dc:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
    53de:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    53e0:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
    53e2:	5c61      	ldrb	r1, [r4, r1]
    53e4:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    53e8:	d1f9      	bne.n	53de <tc_aes_encrypt+0x3a>
		sub_bytes(state);
		shift_rows(state);
    53ea:	4668      	mov	r0, sp
    53ec:	f01a ff66 	bl	202bc <shift_rows>
	mult_row_column(t, s);
    53f0:	4669      	mov	r1, sp
    53f2:	a804      	add	r0, sp, #16
    53f4:	f01a ff9b 	bl	2032e <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
    53f8:	a901      	add	r1, sp, #4
    53fa:	a805      	add	r0, sp, #20
    53fc:	f01a ff97 	bl	2032e <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
    5400:	a902      	add	r1, sp, #8
    5402:	a806      	add	r0, sp, #24
    5404:	f01a ff93 	bl	2032e <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
    5408:	a903      	add	r1, sp, #12
    540a:	a807      	add	r0, sp, #28
    540c:	f01a ff8f 	bl	2032e <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
    5410:	2310      	movs	r3, #16
    5412:	4619      	mov	r1, r3
    5414:	eb0d 0203 	add.w	r2, sp, r3
    5418:	4668      	mov	r0, sp
    541a:	f019 fffe 	bl	1f41a <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
    541e:	4639      	mov	r1, r7
    5420:	4668      	mov	r0, sp
    5422:	3710      	adds	r7, #16
    5424:	f01a ff05 	bl	20232 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
    5428:	42af      	cmp	r7, r5
    542a:	d1d5      	bne.n	53d8 <tc_aes_encrypt+0x34>
    542c:	2410      	movs	r4, #16
		s[i] = sbox[s[i]];
    542e:	f898 3000 	ldrb.w	r3, [r8]
	for (i = 0; i < (Nb * Nk); ++i) {
    5432:	3c01      	subs	r4, #1
		s[i] = sbox[s[i]];
    5434:	f819 3003 	ldrb.w	r3, [r9, r3]
    5438:	f808 3b01 	strb.w	r3, [r8], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    543c:	d1f7      	bne.n	542e <tc_aes_encrypt+0x8a>
	}

	sub_bytes(state);
	shift_rows(state);
    543e:	4668      	mov	r0, sp
    5440:	f01a ff3c 	bl	202bc <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
    5444:	4629      	mov	r1, r5
    5446:	4668      	mov	r0, sp
    5448:	f01a fef3 	bl	20232 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
    544c:	2310      	movs	r3, #16
    544e:	4619      	mov	r1, r3
    5450:	466a      	mov	r2, sp
    5452:	4630      	mov	r0, r6
    5454:	f019 ffe1 	bl	1f41a <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    5458:	4668      	mov	r0, sp
    545a:	2210      	movs	r2, #16
    545c:	4621      	mov	r1, r4
    545e:	f019 ffe9 	bl	1f434 <_set>

	return TC_CRYPTO_SUCCESS;
    5462:	2001      	movs	r0, #1
}
    5464:	b009      	add	sp, #36	; 0x24
    5466:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
    546a:	4608      	mov	r0, r1
    546c:	e7fa      	b.n	5464 <tc_aes_encrypt+0xc0>
    546e:	4610      	mov	r0, r2
    5470:	e7f8      	b.n	5464 <tc_aes_encrypt+0xc0>
    5472:	bf00      	nop
    5474:	000257a0 	.word	0x000257a0

00005478 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    5478:	4a09      	ldr	r2, [pc, #36]	; (54a0 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    547a:	490a      	ldr	r1, [pc, #40]	; (54a4 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    547c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    547e:	6809      	ldr	r1, [r1, #0]
    5480:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    5482:	4909      	ldr	r1, [pc, #36]	; (54a8 <arch_swap+0x30>)
	_current->arch.basepri = key;
    5484:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    5486:	684b      	ldr	r3, [r1, #4]
    5488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    548c:	604b      	str	r3, [r1, #4]
    548e:	2300      	movs	r3, #0
    5490:	f383 8811 	msr	BASEPRI, r3
    5494:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    5498:	6893      	ldr	r3, [r2, #8]
}
    549a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    549c:	4770      	bx	lr
    549e:	bf00      	nop
    54a0:	20002bd4 	.word	0x20002bd4
    54a4:	00025370 	.word	0x00025370
    54a8:	e000ed00 	.word	0xe000ed00

000054ac <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    54ac:	490f      	ldr	r1, [pc, #60]	; (54ec <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
    54ae:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    54b0:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    54b4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    54b6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    54ba:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    54be:	2020      	movs	r0, #32
    msr BASEPRI, r0
    54c0:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    54c4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    54c8:	4f09      	ldr	r7, [pc, #36]	; (54f0 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    54ca:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    54ce:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    54d0:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    54d2:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    54d4:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    54d6:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    54d8:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    54da:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    54de:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    54e2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    54e6:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    54ea:	4770      	bx	lr
    ldr r1, =_kernel
    54ec:	20002bd4 	.word	0x20002bd4
    ldr v4, =_SCS_ICSR
    54f0:	e000ed04 	.word	0xe000ed04

000054f4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    54f4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    54f8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    54fa:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    54fe:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    5502:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    5504:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    5508:	2902      	cmp	r1, #2
    beq _oops
    550a:	d0ff      	beq.n	550c <_oops>

0000550c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    550c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    550e:	f01b f851 	bl	205b4 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    5512:	bd01      	pop	{r0, pc}

00005514 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    5514:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    5516:	2b00      	cmp	r3, #0
    5518:	db08      	blt.n	552c <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    551a:	2201      	movs	r2, #1
    551c:	f000 001f 	and.w	r0, r0, #31
    5520:	fa02 f000 	lsl.w	r0, r2, r0
    5524:	095b      	lsrs	r3, r3, #5
    5526:	4a02      	ldr	r2, [pc, #8]	; (5530 <arch_irq_enable+0x1c>)
    5528:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    552c:	4770      	bx	lr
    552e:	bf00      	nop
    5530:	e000e100 	.word	0xe000e100

00005534 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    5534:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    5536:	2b00      	cmp	r3, #0
    5538:	db0d      	blt.n	5556 <arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    553a:	2201      	movs	r2, #1
    553c:	095b      	lsrs	r3, r3, #5
    553e:	f000 001f 	and.w	r0, r0, #31
    5542:	fa02 f000 	lsl.w	r0, r2, r0
    5546:	3320      	adds	r3, #32
    5548:	4a03      	ldr	r2, [pc, #12]	; (5558 <arch_irq_disable+0x24>)
    554a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    554e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5552:	f3bf 8f6f 	isb	sy
}
    5556:	4770      	bx	lr
    5558:	e000e100 	.word	0xe000e100

0000555c <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    555c:	4b05      	ldr	r3, [pc, #20]	; (5574 <arch_irq_is_enabled+0x18>)
    555e:	0942      	lsrs	r2, r0, #5
    5560:	f000 001f 	and.w	r0, r0, #31
    5564:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    5568:	2301      	movs	r3, #1
    556a:	fa03 f000 	lsl.w	r0, r3, r0
}
    556e:	4010      	ands	r0, r2
    5570:	4770      	bx	lr
    5572:	bf00      	nop
    5574:	e000e100 	.word	0xe000e100

00005578 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    5578:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    557a:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    557c:	bfa8      	it	ge
    557e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    5582:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5586:	bfb8      	it	lt
    5588:	4b06      	ldrlt	r3, [pc, #24]	; (55a4 <z_arm_irq_priority_set+0x2c>)
    558a:	ea4f 1141 	mov.w	r1, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    558e:	bfac      	ite	ge
    5590:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5594:	f000 000f 	andlt.w	r0, r0, #15
    5598:	b2c9      	uxtb	r1, r1
    559a:	bfb4      	ite	lt
    559c:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    559e:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    55a2:	4770      	bx	lr
    55a4:	e000ed14 	.word	0xe000ed14

000055a8 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    55a8:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    55aa:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    55ac:	4b04      	ldr	r3, [pc, #16]	; (55c0 <_arch_isr_direct_pm+0x18>)
    55ae:	6a18      	ldr	r0, [r3, #32]
    55b0:	b118      	cbz	r0, 55ba <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    55b2:	2200      	movs	r2, #0
    55b4:	621a      	str	r2, [r3, #32]
		z_pm_save_idle_exit(idle_val);
    55b6:	f01d fb17 	bl	22be8 <z_pm_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    55ba:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    55bc:	bd08      	pop	{r3, pc}
    55be:	bf00      	nop
    55c0:	20002bd4 	.word	0x20002bd4

000055c4 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    55c4:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    55c8:	9b00      	ldr	r3, [sp, #0]
    55ca:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    55ce:	490a      	ldr	r1, [pc, #40]	; (55f8 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    55d0:	9b01      	ldr	r3, [sp, #4]
    55d2:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    55d6:	9b02      	ldr	r3, [sp, #8]
    55d8:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    55dc:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    55e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    55e4:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    55e8:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    55ec:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    55ee:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    55f0:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    55f2:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    55f4:	4770      	bx	lr
    55f6:	bf00      	nop
    55f8:	0001e559 	.word	0x0001e559

000055fc <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    55fc:	b508      	push	{r3, lr}
    55fe:	4606      	mov	r6, r0
    5600:	460d      	mov	r5, r1
    5602:	4614      	mov	r4, r2
	z_arm_configure_static_mpu_regions();
    5604:	f000 fb0a 	bl	5c1c <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    5608:	4b07      	ldr	r3, [pc, #28]	; (5628 <arch_switch_to_main_thread+0x2c>)
    560a:	609e      	str	r6, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    560c:	4620      	mov	r0, r4
    560e:	f385 8809 	msr	PSP, r5
    5612:	2100      	movs	r1, #0
    5614:	b663      	cpsie	if
    5616:	f381 8811 	msr	BASEPRI, r1
    561a:	f3bf 8f6f 	isb	sy
    561e:	2200      	movs	r2, #0
    5620:	2300      	movs	r3, #0
    5622:	f018 ff99 	bl	1e558 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    5626:	bf00      	nop
    5628:	20002bd4 	.word	0x20002bd4

0000562c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    562c:	4901      	ldr	r1, [pc, #4]	; (5634 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    562e:	2210      	movs	r2, #16
	str	r2, [r1]
    5630:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    5632:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    5634:	e000ed10 	.word	0xe000ed10

00005638 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    5638:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    563a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    563c:	f380 8811 	msr	BASEPRI, r0
	isb
    5640:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    5644:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    5648:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    564a:	b662      	cpsie	i
	isb
    564c:	f3bf 8f6f 	isb	sy

	bx	lr
    5650:	4770      	bx	lr
    5652:	bf00      	nop

00005654 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    5654:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    5656:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    5658:	f381 8811 	msr	BASEPRI, r1

	wfe
    565c:	bf20      	wfe

	msr	BASEPRI, r0
    565e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    5662:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    5664:	4770      	bx	lr
    5666:	bf00      	nop

00005668 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    5668:	b573      	push	{r0, r1, r4, r5, r6, lr}
    566a:	4606      	mov	r6, r0

	if (esf != NULL) {
    566c:	460c      	mov	r4, r1
    566e:	b301      	cbz	r1, 56b2 <z_arm_fatal_error+0x4a>
    5670:	4b13      	ldr	r3, [pc, #76]	; (56c0 <z_arm_fatal_error+0x58>)
    5672:	4d14      	ldr	r5, [pc, #80]	; (56c4 <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    5674:	4814      	ldr	r0, [pc, #80]	; (56c8 <z_arm_fatal_error+0x60>)
    5676:	1aed      	subs	r5, r5, r3
    5678:	08ed      	lsrs	r5, r5, #3
    567a:	01ad      	lsls	r5, r5, #6
    567c:	f045 0501 	orr.w	r5, r5, #1
    5680:	f8ad 5000 	strh.w	r5, [sp]
    5684:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    5688:	6809      	ldr	r1, [r1, #0]
    568a:	f019 fa8f 	bl	1ebac <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    568e:	f8ad 5000 	strh.w	r5, [sp]
    5692:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    5696:	68e1      	ldr	r1, [r4, #12]
    5698:	480c      	ldr	r0, [pc, #48]	; (56cc <z_arm_fatal_error+0x64>)
    569a:	f019 fa87 	bl	1ebac <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    569e:	69e1      	ldr	r1, [r4, #28]
    56a0:	480b      	ldr	r0, [pc, #44]	; (56d0 <z_arm_fatal_error+0x68>)
    56a2:	462a      	mov	r2, r5
    56a4:	f019 fa55 	bl	1eb52 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    56a8:	69a1      	ldr	r1, [r4, #24]
    56aa:	480a      	ldr	r0, [pc, #40]	; (56d4 <z_arm_fatal_error+0x6c>)
    56ac:	462a      	mov	r2, r5
    56ae:	f019 fa50 	bl	1eb52 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    56b2:	4621      	mov	r1, r4
    56b4:	4630      	mov	r0, r6
}
    56b6:	b002      	add	sp, #8
    56b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    56bc:	f017 ba0c 	b.w	1cad8 <z_fatal_error>
    56c0:	0002393c 	.word	0x0002393c
    56c4:	00023a7c 	.word	0x00023a7c
    56c8:	000258a0 	.word	0x000258a0
    56cc:	000258cf 	.word	0x000258cf
    56d0:	000258fe 	.word	0x000258fe
    56d4:	0002590d 	.word	0x0002590d

000056d8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    56d8:	bf30      	wfi
    b z_SysNmiOnReset
    56da:	f7ff bffd 	b.w	56d8 <z_SysNmiOnReset>
    56de:	bf00      	nop

000056e0 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    56e0:	4a0e      	ldr	r2, [pc, #56]	; (571c <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    56e2:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    56e4:	4b0e      	ldr	r3, [pc, #56]	; (5720 <z_arm_prep_c+0x40>)
    56e6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    56ea:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    56ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    56f0:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    56f4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    56f8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    56fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    5700:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    5704:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    5708:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    570c:	f017 fa58 	bl	1cbc0 <z_bss_zero>
	z_data_copy();
    5710:	f018 fab4 	bl	1dc7c <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    5714:	f000 fa64 	bl	5be0 <z_arm_interrupt_init>
	z_cstart();
    5718:	f017 fa76 	bl	1cc08 <z_cstart>
    571c:	00000000 	.word	0x00000000
    5720:	e000ed00 	.word	0xe000ed00

00005724 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    5724:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    5726:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    5728:	4a0b      	ldr	r2, [pc, #44]	; (5758 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    572a:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    572c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    572e:	bf1e      	ittt	ne
	movne	r1, #0
    5730:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    5732:	6211      	strne	r1, [r2, #32]
		blne	z_pm_save_idle_exit
    5734:	f01d fa58 	blne	22be8 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    5738:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    573a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    573e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    5742:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    5746:	4905      	ldr	r1, [pc, #20]	; (575c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    5748:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    574a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    574c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    574e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    5752:	4903      	ldr	r1, [pc, #12]	; (5760 <_isr_wrapper+0x3c>)
	bx r1
    5754:	4708      	bx	r1
    5756:	0000      	.short	0x0000
	ldr r2, =_kernel
    5758:	20002bd4 	.word	0x20002bd4
	ldr r1, =_sw_isr_table
    575c:	00023778 	.word	0x00023778
	ldr r1, =z_arm_int_exit
    5760:	00005bc5 	.word	0x00005bc5

00005764 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    5764:	f01a ff34 	bl	205d0 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    5768:	2020      	movs	r0, #32
    msr BASEPRI, r0
    576a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    576e:	4808      	ldr	r0, [pc, #32]	; (5790 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    5770:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    5774:	1840      	adds	r0, r0, r1
    msr PSP, r0
    5776:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    577a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    577e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    5780:	4308      	orrs	r0, r1
    msr CONTROL, r0
    5782:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    5786:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    578a:	f7ff ffa9 	bl	56e0 <z_arm_prep_c>
    578e:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    5790:	200048b8 	.word	0x200048b8

00005794 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    5794:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    5798:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    579c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    579e:	4672      	mov	r2, lr
	bl z_arm_fault
    57a0:	f000 f934 	bl	5a0c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    57a4:	bd01      	pop	{r0, pc}
    57a6:	bf00      	nop

000057a8 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    57a8:	b570      	push	{r4, r5, r6, lr}
    57aa:	4b23      	ldr	r3, [pc, #140]	; (5838 <usage_fault.isra.0+0x90>)
    57ac:	4c23      	ldr	r4, [pc, #140]	; (583c <usage_fault.isra.0+0x94>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    57ae:	4d24      	ldr	r5, [pc, #144]	; (5840 <usage_fault.isra.0+0x98>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    57b0:	4824      	ldr	r0, [pc, #144]	; (5844 <usage_fault.isra.0+0x9c>)
    57b2:	1ae4      	subs	r4, r4, r3
    57b4:	08e4      	lsrs	r4, r4, #3
    57b6:	01a4      	lsls	r4, r4, #6
    57b8:	f044 0601 	orr.w	r6, r4, #1
    57bc:	4631      	mov	r1, r6
    57be:	f019 f9bb 	bl	1eb38 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    57c2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    57c4:	0193      	lsls	r3, r2, #6
    57c6:	d503      	bpl.n	57d0 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
    57c8:	481f      	ldr	r0, [pc, #124]	; (5848 <usage_fault.isra.0+0xa0>)
    57ca:	4631      	mov	r1, r6
    57cc:	f019 f9b4 	bl	1eb38 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    57d0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    57d2:	01dd      	lsls	r5, r3, #7
    57d4:	d504      	bpl.n	57e0 <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
    57d6:	481d      	ldr	r0, [pc, #116]	; (584c <usage_fault.isra.0+0xa4>)
    57d8:	f044 0101 	orr.w	r1, r4, #1
    57dc:	f019 f9ac 	bl	1eb38 <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    57e0:	4d17      	ldr	r5, [pc, #92]	; (5840 <usage_fault.isra.0+0x98>)
    57e2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    57e4:	0310      	lsls	r0, r2, #12
    57e6:	d504      	bpl.n	57f2 <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    57e8:	4819      	ldr	r0, [pc, #100]	; (5850 <usage_fault.isra.0+0xa8>)
    57ea:	f044 0101 	orr.w	r1, r4, #1
    57ee:	f019 f9a3 	bl	1eb38 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    57f2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    57f4:	0359      	lsls	r1, r3, #13
    57f6:	d504      	bpl.n	5802 <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    57f8:	4816      	ldr	r0, [pc, #88]	; (5854 <usage_fault.isra.0+0xac>)
    57fa:	f044 0101 	orr.w	r1, r4, #1
    57fe:	f019 f99b 	bl	1eb38 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    5802:	4d0f      	ldr	r5, [pc, #60]	; (5840 <usage_fault.isra.0+0x98>)
    5804:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    5806:	0392      	lsls	r2, r2, #14
    5808:	d504      	bpl.n	5814 <usage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    580a:	4813      	ldr	r0, [pc, #76]	; (5858 <usage_fault.isra.0+0xb0>)
    580c:	f044 0101 	orr.w	r1, r4, #1
    5810:	f019 f992 	bl	1eb38 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    5814:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5816:	03db      	lsls	r3, r3, #15
    5818:	d504      	bpl.n	5824 <usage_fault.isra.0+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    581a:	4810      	ldr	r0, [pc, #64]	; (585c <usage_fault.isra.0+0xb4>)
    581c:	f044 0101 	orr.w	r1, r4, #1
    5820:	f019 f98a 	bl	1eb38 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    5824:	4a06      	ldr	r2, [pc, #24]	; (5840 <usage_fault.isra.0+0x98>)
    5826:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5828:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    582c:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    5830:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    5832:	2000      	movs	r0, #0
    5834:	bd70      	pop	{r4, r5, r6, pc}
    5836:	bf00      	nop
    5838:	0002393c 	.word	0x0002393c
    583c:	00023a7c 	.word	0x00023a7c
    5840:	e000ed00 	.word	0xe000ed00
    5844:	0002593b 	.word	0x0002593b
    5848:	00025953 	.word	0x00025953
    584c:	00025966 	.word	0x00025966
    5850:	00025980 	.word	0x00025980
    5854:	0002599e 	.word	0x0002599e
    5858:	000259c3 	.word	0x000259c3
    585c:	000259dd 	.word	0x000259dd

00005860 <mem_manage_fault.isra.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    5860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5864:	4b28      	ldr	r3, [pc, #160]	; (5908 <mem_manage_fault.isra.0+0xa8>)
    5866:	4c29      	ldr	r4, [pc, #164]	; (590c <mem_manage_fault.isra.0+0xac>)
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    5868:	4d29      	ldr	r5, [pc, #164]	; (5910 <mem_manage_fault.isra.0+0xb0>)
    586a:	1ae4      	subs	r4, r4, r3
    586c:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
    586e:	01a4      	lsls	r4, r4, #6
    5870:	f044 0801 	orr.w	r8, r4, #1
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    5874:	4607      	mov	r7, r0
    5876:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    5878:	4826      	ldr	r0, [pc, #152]	; (5914 <mem_manage_fault.isra.0+0xb4>)
    587a:	4641      	mov	r1, r8
    587c:	f019 f95c 	bl	1eb38 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    5880:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    5882:	06d0      	lsls	r0, r2, #27
    5884:	d503      	bpl.n	588e <mem_manage_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    5886:	4824      	ldr	r0, [pc, #144]	; (5918 <mem_manage_fault.isra.0+0xb8>)
    5888:	4641      	mov	r1, r8
    588a:	f019 f955 	bl	1eb38 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    588e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5890:	0719      	lsls	r1, r3, #28
    5892:	d504      	bpl.n	589e <mem_manage_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    5894:	4821      	ldr	r0, [pc, #132]	; (591c <mem_manage_fault.isra.0+0xbc>)
    5896:	f044 0101 	orr.w	r1, r4, #1
    589a:	f019 f94d 	bl	1eb38 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    589e:	4d1c      	ldr	r5, [pc, #112]	; (5910 <mem_manage_fault.isra.0+0xb0>)
    58a0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    58a2:	079a      	lsls	r2, r3, #30
    58a4:	d512      	bpl.n	58cc <mem_manage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Data Access Violation");
    58a6:	f044 0801 	orr.w	r8, r4, #1
    58aa:	4641      	mov	r1, r8
    58ac:	481c      	ldr	r0, [pc, #112]	; (5920 <mem_manage_fault.isra.0+0xc0>)
    58ae:	f019 f943 	bl	1eb38 <log_0>
		uint32_t temp = SCB->MMFAR;
    58b2:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    58b4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    58b6:	061b      	lsls	r3, r3, #24
    58b8:	d508      	bpl.n	58cc <mem_manage_fault.isra.0+0x6c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    58ba:	481a      	ldr	r0, [pc, #104]	; (5924 <mem_manage_fault.isra.0+0xc4>)
    58bc:	4642      	mov	r2, r8
    58be:	f019 f948 	bl	1eb52 <log_1>
			if (from_hard_fault != 0) {
    58c2:	b11f      	cbz	r7, 58cc <mem_manage_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    58c4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    58c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    58ca:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    58cc:	4d10      	ldr	r5, [pc, #64]	; (5910 <mem_manage_fault.isra.0+0xb0>)
    58ce:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    58d0:	07d0      	lsls	r0, r2, #31
    58d2:	d504      	bpl.n	58de <mem_manage_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Instruction Access Violation");
    58d4:	4814      	ldr	r0, [pc, #80]	; (5928 <mem_manage_fault.isra.0+0xc8>)
    58d6:	f044 0101 	orr.w	r1, r4, #1
    58da:	f019 f92d 	bl	1eb38 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    58de:	6aab      	ldr	r3, [r5, #40]	; 0x28
    58e0:	0699      	lsls	r1, r3, #26
    58e2:	d504      	bpl.n	58ee <mem_manage_fault.isra.0+0x8e>
		PR_FAULT_INFO(
    58e4:	4811      	ldr	r0, [pc, #68]	; (592c <mem_manage_fault.isra.0+0xcc>)
    58e6:	f044 0101 	orr.w	r1, r4, #1
    58ea:	f019 f925 	bl	1eb38 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    58ee:	4b08      	ldr	r3, [pc, #32]	; (5910 <mem_manage_fault.isra.0+0xb0>)
    58f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    58f2:	06d2      	lsls	r2, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    58f4:	bf58      	it	pl
    58f6:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    58f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    58fa:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    58fc:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    5900:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    5902:	7030      	strb	r0, [r6, #0]
}
    5904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5908:	0002393c 	.word	0x0002393c
    590c:	00023a7c 	.word	0x00023a7c
    5910:	e000ed00 	.word	0xe000ed00
    5914:	00025a08 	.word	0x00025a08
    5918:	00025a1e 	.word	0x00025a1e
    591c:	00025a51 	.word	0x00025a51
    5920:	00025a64 	.word	0x00025a64
    5924:	00025a7c 	.word	0x00025a7c
    5928:	00025a92 	.word	0x00025a92
    592c:	00025ab1 	.word	0x00025ab1

00005930 <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    5930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5934:	4b2a      	ldr	r3, [pc, #168]	; (59e0 <bus_fault.isra.0+0xb0>)
    5936:	4c2b      	ldr	r4, [pc, #172]	; (59e4 <bus_fault.isra.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    5938:	4d2b      	ldr	r5, [pc, #172]	; (59e8 <bus_fault.isra.0+0xb8>)
    593a:	1ae4      	subs	r4, r4, r3
    593c:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
    593e:	01a4      	lsls	r4, r4, #6
    5940:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    5944:	4607      	mov	r7, r0
    5946:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    5948:	4828      	ldr	r0, [pc, #160]	; (59ec <bus_fault.isra.0+0xbc>)
    594a:	4641      	mov	r1, r8
    594c:	f019 f8f4 	bl	1eb38 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    5950:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    5952:	04d1      	lsls	r1, r2, #19
    5954:	d503      	bpl.n	595e <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
    5956:	4826      	ldr	r0, [pc, #152]	; (59f0 <bus_fault.isra.0+0xc0>)
    5958:	4641      	mov	r1, r8
    595a:	f019 f8ed 	bl	1eb38 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    595e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5960:	051a      	lsls	r2, r3, #20
    5962:	d504      	bpl.n	596e <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    5964:	4823      	ldr	r0, [pc, #140]	; (59f4 <bus_fault.isra.0+0xc4>)
    5966:	f044 0101 	orr.w	r1, r4, #1
    596a:	f019 f8e5 	bl	1eb38 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    596e:	4d1e      	ldr	r5, [pc, #120]	; (59e8 <bus_fault.isra.0+0xb8>)
    5970:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5972:	059b      	lsls	r3, r3, #22
    5974:	d512      	bpl.n	599c <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
    5976:	f044 0801 	orr.w	r8, r4, #1
    597a:	481f      	ldr	r0, [pc, #124]	; (59f8 <bus_fault.isra.0+0xc8>)
    597c:	4641      	mov	r1, r8
    597e:	f019 f8db 	bl	1eb38 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    5982:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    5984:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5986:	0418      	lsls	r0, r3, #16
    5988:	d508      	bpl.n	599c <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    598a:	481c      	ldr	r0, [pc, #112]	; (59fc <bus_fault.isra.0+0xcc>)
    598c:	4642      	mov	r2, r8
    598e:	f019 f8e0 	bl	1eb52 <log_1>
			if (from_hard_fault != 0) {
    5992:	b11f      	cbz	r7, 599c <bus_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    5994:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5996:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    599a:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    599c:	4d12      	ldr	r5, [pc, #72]	; (59e8 <bus_fault.isra.0+0xb8>)
    599e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    59a0:	0559      	lsls	r1, r3, #21
    59a2:	d504      	bpl.n	59ae <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
    59a4:	4816      	ldr	r0, [pc, #88]	; (5a00 <bus_fault.isra.0+0xd0>)
    59a6:	f044 0101 	orr.w	r1, r4, #1
    59aa:	f019 f8c5 	bl	1eb38 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    59ae:	6aab      	ldr	r3, [r5, #40]	; 0x28
    59b0:	05da      	lsls	r2, r3, #23
    59b2:	d50d      	bpl.n	59d0 <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
    59b4:	4813      	ldr	r0, [pc, #76]	; (5a04 <bus_fault.isra.0+0xd4>)
    59b6:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    59ba:	f019 f8bd 	bl	1eb38 <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    59be:	4a0a      	ldr	r2, [pc, #40]	; (59e8 <bus_fault.isra.0+0xb8>)
    59c0:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    59c2:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    59c4:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    59c8:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    59ca:	7030      	strb	r0, [r6, #0]
}
    59cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    59d0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    59d2:	049b      	lsls	r3, r3, #18
    59d4:	d5f3      	bpl.n	59be <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    59d6:	480c      	ldr	r0, [pc, #48]	; (5a08 <bus_fault.isra.0+0xd8>)
    59d8:	f044 0101 	orr.w	r1, r4, #1
    59dc:	e7ed      	b.n	59ba <bus_fault.isra.0+0x8a>
    59de:	bf00      	nop
    59e0:	0002393c 	.word	0x0002393c
    59e4:	00023a7c 	.word	0x00023a7c
    59e8:	e000ed00 	.word	0xe000ed00
    59ec:	00025ae0 	.word	0x00025ae0
    59f0:	00025af6 	.word	0x00025af6
    59f4:	00025a51 	.word	0x00025a51
    59f8:	00025b07 	.word	0x00025b07
    59fc:	00025b20 	.word	0x00025b20
    5a00:	00025b35 	.word	0x00025b35
    5a04:	00025b50 	.word	0x00025b50
    5a08:	00025ab1 	.word	0x00025ab1

00005a0c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    5a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5a10:	460d      	mov	r5, r1
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    5a12:	495a      	ldr	r1, [pc, #360]	; (5b7c <z_arm_fault+0x170>)
    5a14:	684f      	ldr	r7, [r1, #4]
{
    5a16:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    5a18:	f3c7 0408 	ubfx	r4, r7, #0, #9
    5a1c:	2600      	movs	r6, #0
    5a1e:	f386 8811 	msr	BASEPRI, r6
    5a22:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    5a26:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
    5a2a:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
    5a2e:	d10d      	bne.n	5a4c <z_arm_fault+0x40>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    5a30:	f002 010c 	and.w	r1, r2, #12
    5a34:	2908      	cmp	r1, #8
    5a36:	d10b      	bne.n	5a50 <z_arm_fault+0x44>
    5a38:	4951      	ldr	r1, [pc, #324]	; (5b80 <z_arm_fault+0x174>)
    5a3a:	4b52      	ldr	r3, [pc, #328]	; (5b84 <z_arm_fault+0x178>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    5a3c:	4852      	ldr	r0, [pc, #328]	; (5b88 <z_arm_fault+0x17c>)
    5a3e:	1ac9      	subs	r1, r1, r3
    5a40:	08c9      	lsrs	r1, r1, #3
    5a42:	0189      	lsls	r1, r1, #6
    5a44:	f041 0101 	orr.w	r1, r1, #1
    5a48:	f019 f876 	bl	1eb38 <log_0>
		return NULL;
    5a4c:	4635      	mov	r5, r6
    5a4e:	e003      	b.n	5a58 <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    5a50:	0712      	lsls	r2, r2, #28
    5a52:	d401      	bmi.n	5a58 <z_arm_fault+0x4c>
			ptr_esf = (z_arch_esf_t *)msp;
    5a54:	4605      	mov	r5, r0
			*nested_exc = true;
    5a56:	2601      	movs	r6, #1
	*recoverable = false;
    5a58:	2300      	movs	r3, #0
    5a5a:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    5a5e:	1ee3      	subs	r3, r4, #3
    5a60:	2b09      	cmp	r3, #9
    5a62:	d871      	bhi.n	5b48 <z_arm_fault+0x13c>
    5a64:	e8df f003 	tbb	[pc, r3]
    5a68:	3c635f05 	.word	0x3c635f05
    5a6c:	70707070 	.word	0x70707070
    5a70:	6770      	.short	0x6770
    5a72:	4b44      	ldr	r3, [pc, #272]	; (5b84 <z_arm_fault+0x178>)
    5a74:	4f42      	ldr	r7, [pc, #264]	; (5b80 <z_arm_fault+0x174>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    5a76:	4845      	ldr	r0, [pc, #276]	; (5b8c <z_arm_fault+0x180>)
    5a78:	1aff      	subs	r7, r7, r3
    5a7a:	08ff      	lsrs	r7, r7, #3
    5a7c:	01bf      	lsls	r7, r7, #6
    5a7e:	f047 0701 	orr.w	r7, r7, #1
    5a82:	4639      	mov	r1, r7
    5a84:	f019 f858 	bl	1eb38 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    5a88:	4b3c      	ldr	r3, [pc, #240]	; (5b7c <z_arm_fault+0x170>)
    5a8a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
	*recoverable = false;
    5a8c:	f04f 0800 	mov.w	r8, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    5a90:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
    5a94:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    5a98:	d005      	beq.n	5aa6 <z_arm_fault+0x9a>
		PR_EXC("  Bus fault on vector table read");
    5a9a:	483d      	ldr	r0, [pc, #244]	; (5b90 <z_arm_fault+0x184>)
    5a9c:	4639      	mov	r1, r7
	PR_FAULT_INFO(
    5a9e:	f019 f84b 	bl	1eb38 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    5aa2:	2400      	movs	r4, #0
}
    5aa4:	e01f      	b.n	5ae6 <z_arm_fault+0xda>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    5aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5aa8:	005b      	lsls	r3, r3, #1
    5aaa:	d51c      	bpl.n	5ae6 <z_arm_fault+0xda>
		PR_EXC("  Fault escalation (see below)");
    5aac:	4839      	ldr	r0, [pc, #228]	; (5b94 <z_arm_fault+0x188>)
    5aae:	4639      	mov	r1, r7
    5ab0:	f019 f842 	bl	1eb38 <log_0>
		if (SCB_MMFSR != 0) {
    5ab4:	4b38      	ldr	r3, [pc, #224]	; (5b98 <z_arm_fault+0x18c>)
    5ab6:	781b      	ldrb	r3, [r3, #0]
    5ab8:	b12b      	cbz	r3, 5ac6 <z_arm_fault+0xba>
			reason = mem_manage_fault(esf, 1, recoverable);
    5aba:	f10d 0107 	add.w	r1, sp, #7
    5abe:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    5ac0:	f7ff fece 	bl	5860 <mem_manage_fault.isra.0>
    5ac4:	e00e      	b.n	5ae4 <z_arm_fault+0xd8>
		} else if (SCB_BFSR != 0) {
    5ac6:	4b35      	ldr	r3, [pc, #212]	; (5b9c <z_arm_fault+0x190>)
    5ac8:	781b      	ldrb	r3, [r3, #0]
    5aca:	b12b      	cbz	r3, 5ad8 <z_arm_fault+0xcc>
			reason = bus_fault(esf, 1, recoverable);
    5acc:	f10d 0107 	add.w	r1, sp, #7
    5ad0:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    5ad2:	f7ff ff2d 	bl	5930 <bus_fault.isra.0>
    5ad6:	e005      	b.n	5ae4 <z_arm_fault+0xd8>
		} else if (SCB_UFSR != 0) {
    5ad8:	4b31      	ldr	r3, [pc, #196]	; (5ba0 <z_arm_fault+0x194>)
    5ada:	881b      	ldrh	r3, [r3, #0]
    5adc:	b29b      	uxth	r3, r3
    5ade:	b113      	cbz	r3, 5ae6 <z_arm_fault+0xda>
			reason = usage_fault(esf);
    5ae0:	f7ff fe62 	bl	57a8 <usage_fault.isra.0>
    5ae4:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    5ae6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5aea:	b9cb      	cbnz	r3, 5b20 <z_arm_fault+0x114>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    5aec:	462b      	mov	r3, r5
    5aee:	f103 0720 	add.w	r7, r3, #32
    5af2:	ad02      	add	r5, sp, #8
    5af4:	6818      	ldr	r0, [r3, #0]
    5af6:	6859      	ldr	r1, [r3, #4]
    5af8:	462a      	mov	r2, r5
    5afa:	c203      	stmia	r2!, {r0, r1}
    5afc:	3308      	adds	r3, #8
    5afe:	42bb      	cmp	r3, r7
    5b00:	4615      	mov	r5, r2
    5b02:	d1f7      	bne.n	5af4 <z_arm_fault+0xe8>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    5b04:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5b06:	b39e      	cbz	r6, 5b70 <z_arm_fault+0x164>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    5b08:	f3c3 0208 	ubfx	r2, r3, #0, #9
    5b0c:	b922      	cbnz	r2, 5b18 <z_arm_fault+0x10c>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    5b0e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    5b12:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    5b16:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    5b18:	a902      	add	r1, sp, #8
    5b1a:	4620      	mov	r0, r4
    5b1c:	f7ff fda4 	bl	5668 <z_arm_fatal_error>
}
    5b20:	b00a      	add	sp, #40	; 0x28
    5b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    5b26:	f10d 0107 	add.w	r1, sp, #7
    5b2a:	2000      	movs	r0, #0
    5b2c:	e7c8      	b.n	5ac0 <z_arm_fault+0xb4>
		reason = bus_fault(esf, 0, recoverable);
    5b2e:	f10d 0107 	add.w	r1, sp, #7
    5b32:	2000      	movs	r0, #0
    5b34:	e7cd      	b.n	5ad2 <z_arm_fault+0xc6>
    5b36:	4912      	ldr	r1, [pc, #72]	; (5b80 <z_arm_fault+0x174>)
    5b38:	4b12      	ldr	r3, [pc, #72]	; (5b84 <z_arm_fault+0x178>)
	PR_FAULT_INFO(
    5b3a:	481a      	ldr	r0, [pc, #104]	; (5ba4 <z_arm_fault+0x198>)
    5b3c:	1ac9      	subs	r1, r1, r3
    5b3e:	08c9      	lsrs	r1, r1, #3
    5b40:	0189      	lsls	r1, r1, #6
    5b42:	f041 0101 	orr.w	r1, r1, #1
    5b46:	e7aa      	b.n	5a9e <z_arm_fault+0x92>
    5b48:	4a0e      	ldr	r2, [pc, #56]	; (5b84 <z_arm_fault+0x178>)
    5b4a:	4b0d      	ldr	r3, [pc, #52]	; (5b80 <z_arm_fault+0x174>)
	PR_FAULT_INFO("***** %s %d) *****",
    5b4c:	4816      	ldr	r0, [pc, #88]	; (5ba8 <z_arm_fault+0x19c>)
    5b4e:	4917      	ldr	r1, [pc, #92]	; (5bac <z_arm_fault+0x1a0>)
    5b50:	1a9b      	subs	r3, r3, r2
    5b52:	08db      	lsrs	r3, r3, #3
    5b54:	f417 7ff8 	tst.w	r7, #496	; 0x1f0
    5b58:	ea4f 1383 	mov.w	r3, r3, lsl #6
    5b5c:	bf18      	it	ne
    5b5e:	4601      	movne	r1, r0
    5b60:	f043 0301 	orr.w	r3, r3, #1
    5b64:	4812      	ldr	r0, [pc, #72]	; (5bb0 <z_arm_fault+0x1a4>)
    5b66:	f1a4 0210 	sub.w	r2, r4, #16
    5b6a:	f019 f806 	bl	1eb7a <log_2>
    5b6e:	e798      	b.n	5aa2 <z_arm_fault+0x96>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    5b70:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    5b74:	f023 0301 	bic.w	r3, r3, #1
    5b78:	e7cd      	b.n	5b16 <z_arm_fault+0x10a>
    5b7a:	bf00      	nop
    5b7c:	e000ed00 	.word	0xe000ed00
    5b80:	00023a7c 	.word	0x00023a7c
    5b84:	0002393c 	.word	0x0002393c
    5b88:	00025b68 	.word	0x00025b68
    5b8c:	00025b93 	.word	0x00025b93
    5b90:	00025baa 	.word	0x00025baa
    5b94:	00025bcb 	.word	0x00025bcb
    5b98:	e000ed28 	.word	0xe000ed28
    5b9c:	e000ed29 	.word	0xe000ed29
    5ba0:	e000ed2a 	.word	0xe000ed2a
    5ba4:	00025bea 	.word	0x00025bea
    5ba8:	00025c23 	.word	0x00025c23
    5bac:	00025c0e 	.word	0x00025c0e
    5bb0:	00025c3c 	.word	0x00025c3c

00005bb4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    5bb4:	4a02      	ldr	r2, [pc, #8]	; (5bc0 <z_arm_fault_init+0xc>)
    5bb6:	6953      	ldr	r3, [r2, #20]
    5bb8:	f043 0310 	orr.w	r3, r3, #16
    5bbc:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    5bbe:	4770      	bx	lr
    5bc0:	e000ed00 	.word	0xe000ed00

00005bc4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    5bc4:	4b04      	ldr	r3, [pc, #16]	; (5bd8 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    5bc6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    5bc8:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
    5bca:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    5bcc:	d003      	beq.n	5bd6 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    5bce:	4903      	ldr	r1, [pc, #12]	; (5bdc <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    5bd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    5bd4:	600a      	str	r2, [r1, #0]

00005bd6 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    5bd6:	4770      	bx	lr
	ldr r3, =_kernel
    5bd8:	20002bd4 	.word	0x20002bd4
	ldr r1, =_SCS_ICSR
    5bdc:	e000ed04 	.word	0xe000ed04

00005be0 <z_arm_interrupt_init>:
    5be0:	4804      	ldr	r0, [pc, #16]	; (5bf4 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    5be2:	2300      	movs	r3, #0
    5be4:	2120      	movs	r1, #32
    5be6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    5be8:	3301      	adds	r3, #1
    5bea:	2b30      	cmp	r3, #48	; 0x30
    5bec:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    5bf0:	d1f9      	bne.n	5be6 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    5bf2:	4770      	bx	lr
    5bf4:	e000e100 	.word	0xe000e100

00005bf8 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    5bf8:	4b06      	ldr	r3, [pc, #24]	; (5c14 <z_impl_k_thread_abort+0x1c>)
    5bfa:	689b      	ldr	r3, [r3, #8]
    5bfc:	4283      	cmp	r3, r0
    5bfe:	d107      	bne.n	5c10 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    5c00:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    5c04:	b123      	cbz	r3, 5c10 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    5c06:	4a04      	ldr	r2, [pc, #16]	; (5c18 <z_impl_k_thread_abort+0x20>)
    5c08:	6853      	ldr	r3, [r2, #4]
    5c0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    5c0e:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    5c10:	f017 bd20 	b.w	1d654 <z_thread_abort>
    5c14:	20002bd4 	.word	0x20002bd4
    5c18:	e000ed00 	.word	0xe000ed00

00005c1c <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    5c1c:	4b02      	ldr	r3, [pc, #8]	; (5c28 <z_arm_configure_static_mpu_regions+0xc>)
    5c1e:	4a03      	ldr	r2, [pc, #12]	; (5c2c <z_arm_configure_static_mpu_regions+0x10>)
    5c20:	4803      	ldr	r0, [pc, #12]	; (5c30 <z_arm_configure_static_mpu_regions+0x14>)
    5c22:	2101      	movs	r1, #1
    5c24:	f000 b8a2 	b.w	5d6c <arm_core_mpu_configure_static_mpu_regions>
    5c28:	20040000 	.word	0x20040000
    5c2c:	20000000 	.word	0x20000000
    5c30:	00023e5c 	.word	0x00023e5c

00005c34 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    5c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    5c36:	4f28      	ldr	r7, [pc, #160]	; (5cd8 <mpu_configure_regions+0xa4>)
    5c38:	460e      	mov	r6, r1
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    5c3a:	2100      	movs	r1, #0
    5c3c:	42b1      	cmp	r1, r6
    5c3e:	da14      	bge.n	5c6a <mpu_configure_regions+0x36>
		if (regions[i].size == 0U) {
    5c40:	6844      	ldr	r4, [r0, #4]
    5c42:	2c00      	cmp	r4, #0
    5c44:	d045      	beq.n	5cd2 <mpu_configure_regions+0x9e>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    5c46:	b1c3      	cbz	r3, 5c7a <mpu_configure_regions+0x46>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    5c48:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    5c4c:	ea14 0f0c 	tst.w	r4, ip
    5c50:	d00d      	beq.n	5c6e <mpu_configure_regions+0x3a>
    5c52:	4a22      	ldr	r2, [pc, #136]	; (5cdc <mpu_configure_regions+0xa8>)
    5c54:	4b22      	ldr	r3, [pc, #136]	; (5ce0 <mpu_configure_regions+0xac>)
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    5c56:	4823      	ldr	r0, [pc, #140]	; (5ce4 <mpu_configure_regions+0xb0>)
    5c58:	1ad2      	subs	r2, r2, r3
    5c5a:	08d2      	lsrs	r2, r2, #3
    5c5c:	0192      	lsls	r2, r2, #6
    5c5e:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    5c62:	f018 ff76 	bl	1eb52 <log_1>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    5c66:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    5c6a:	4610      	mov	r0, r2
    5c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
    5c6e:	2c1f      	cmp	r4, #31
    5c70:	d9ef      	bls.n	5c52 <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
    5c72:	6805      	ldr	r5, [r0, #0]
		&&
    5c74:	ea1c 0f05 	tst.w	ip, r5
    5c78:	d1eb      	bne.n	5c52 <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    5c7a:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    5c7c:	b2d5      	uxtb	r5, r2
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    5c7e:	f8d0 c008 	ldr.w	ip, [r0, #8]
	region_conf.base = new_region->start;
    5c82:	6802      	ldr	r2, [r0, #0]
    5c84:	d916      	bls.n	5cb4 <mpu_configure_regions+0x80>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    5c86:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    5c8a:	d815      	bhi.n	5cb8 <mpu_configure_regions+0x84>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    5c8c:	3c01      	subs	r4, #1
    5c8e:	fab4 f484 	clz	r4, r4
    5c92:	f1c4 041f 	rsb	r4, r4, #31
    5c96:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    5c98:	2d07      	cmp	r5, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    5c9a:	ea4c 0404 	orr.w	r4, ip, r4
    5c9e:	d90d      	bls.n	5cbc <mpu_configure_regions+0x88>
    5ca0:	4a0e      	ldr	r2, [pc, #56]	; (5cdc <mpu_configure_regions+0xa8>)
    5ca2:	4b0f      	ldr	r3, [pc, #60]	; (5ce0 <mpu_configure_regions+0xac>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    5ca4:	4810      	ldr	r0, [pc, #64]	; (5ce8 <mpu_configure_regions+0xb4>)
    5ca6:	1ad2      	subs	r2, r2, r3
    5ca8:	08d2      	lsrs	r2, r2, #3
    5caa:	0192      	lsls	r2, r2, #6
    5cac:	f042 0201 	orr.w	r2, r2, #1
    5cb0:	4629      	mov	r1, r5
    5cb2:	e7d6      	b.n	5c62 <mpu_configure_regions+0x2e>
		return REGION_32B;
    5cb4:	2408      	movs	r4, #8
    5cb6:	e7ef      	b.n	5c98 <mpu_configure_regions+0x64>
		return REGION_4G;
    5cb8:	243e      	movs	r4, #62	; 0x3e
    5cba:	e7ed      	b.n	5c98 <mpu_configure_regions+0x64>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    5cbc:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    5cc0:	432a      	orrs	r2, r5
    5cc2:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    5cc6:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    5cca:	60bd      	str	r5, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    5ccc:	60fa      	str	r2, [r7, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    5cce:	613c      	str	r4, [r7, #16]
		reg_index++;
    5cd0:	1c6a      	adds	r2, r5, #1
	for (i = 0; i < regions_num; i++) {
    5cd2:	3101      	adds	r1, #1
    5cd4:	300c      	adds	r0, #12
    5cd6:	e7b1      	b.n	5c3c <mpu_configure_regions+0x8>
    5cd8:	e000ed90 	.word	0xe000ed90
    5cdc:	00023a6c 	.word	0x00023a6c
    5ce0:	0002393c 	.word	0x0002393c
    5ce4:	00025c53 	.word	0x00025c53
    5ce8:	00025c76 	.word	0x00025c76

00005cec <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    5cec:	4b03      	ldr	r3, [pc, #12]	; (5cfc <arm_core_mpu_enable+0x10>)
    5cee:	2205      	movs	r2, #5
    5cf0:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    5cf2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5cf6:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    5cfa:	4770      	bx	lr
    5cfc:	e000ed90 	.word	0xe000ed90

00005d00 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    5d00:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    5d04:	4b01      	ldr	r3, [pc, #4]	; (5d0c <arm_core_mpu_disable+0xc>)
    5d06:	2200      	movs	r2, #0
    5d08:	605a      	str	r2, [r3, #4]
}
    5d0a:	4770      	bx	lr
    5d0c:	e000ed90 	.word	0xe000ed90

00005d10 <arm_mpu_init>:
 */
static int arm_mpu_init(const struct device *arg)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    5d10:	4913      	ldr	r1, [pc, #76]	; (5d60 <arm_mpu_init+0x50>)
    5d12:	6808      	ldr	r0, [r1, #0]
    5d14:	2808      	cmp	r0, #8
{
    5d16:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    5d18:	d81e      	bhi.n	5d58 <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    5d1a:	f7ff fff1 	bl	5d00 <arm_core_mpu_disable>
	MPU->RNR = index;
    5d1e:	4c11      	ldr	r4, [pc, #68]	; (5d64 <arm_mpu_init+0x54>)
    5d20:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    5d22:	2200      	movs	r2, #0
    5d24:	4290      	cmp	r0, r2
    5d26:	f101 010c 	add.w	r1, r1, #12
    5d2a:	d105      	bne.n	5d38 <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    5d2c:	4b0e      	ldr	r3, [pc, #56]	; (5d68 <arm_mpu_init+0x58>)
    5d2e:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    5d30:	f7ff ffdc 	bl	5cec <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    5d34:	2000      	movs	r0, #0
}
    5d36:	bd10      	pop	{r4, pc}
    5d38:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    5d3a:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    5d3e:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    5d42:	4313      	orrs	r3, r2
    5d44:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    5d48:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    5d4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
    5d4e:	f043 0301 	orr.w	r3, r3, #1
    5d52:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    5d54:	3201      	adds	r2, #1
    5d56:	e7e5      	b.n	5d24 <arm_mpu_init+0x14>
		return -1;
    5d58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5d5c:	e7eb      	b.n	5d36 <arm_mpu_init+0x26>
    5d5e:	bf00      	nop
    5d60:	00023e68 	.word	0x00023e68
    5d64:	e000ed90 	.word	0xe000ed90
    5d68:	20003067 	.word	0x20003067

00005d6c <arm_core_mpu_configure_static_mpu_regions>:
{
    5d6c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    5d6e:	4c03      	ldr	r4, [pc, #12]	; (5d7c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    5d70:	2301      	movs	r3, #1
    5d72:	7822      	ldrb	r2, [r4, #0]
    5d74:	f7ff ff5e 	bl	5c34 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    5d78:	7020      	strb	r0, [r4, #0]
}
    5d7a:	bd10      	pop	{r4, pc}
    5d7c:	20003067 	.word	0x20003067

00005d80 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    5d80:	4b01      	ldr	r3, [pc, #4]	; (5d88 <__stdout_hook_install+0x8>)
    5d82:	6018      	str	r0, [r3, #0]
}
    5d84:	4770      	bx	lr
    5d86:	bf00      	nop
    5d88:	200001d4 	.word	0x200001d4

00005d8c <nordicsemi_nrf52_init>:
	__asm__ volatile(
    5d8c:	f04f 0320 	mov.w	r3, #32
    5d90:	f3ef 8211 	mrs	r2, BASEPRI
    5d94:	f383 8811 	msr	BASEPRI, r3
    5d98:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    5d9c:	4906      	ldr	r1, [pc, #24]	; (5db8 <nordicsemi_nrf52_init+0x2c>)
    5d9e:	2301      	movs	r3, #1
    5da0:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    5da4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    5da8:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    5dac:	f382 8811 	msr	BASEPRI, r2
    5db0:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    5db4:	2000      	movs	r0, #0
    5db6:	4770      	bx	lr
    5db8:	4001e000 	.word	0x4001e000

00005dbc <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    5dbc:	b120      	cbz	r0, 5dc8 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    5dbe:	4b03      	ldr	r3, [pc, #12]	; (5dcc <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    5dc0:	0180      	lsls	r0, r0, #6
    5dc2:	f043 0301 	orr.w	r3, r3, #1
    5dc6:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    5dc8:	4770      	bx	lr
    5dca:	bf00      	nop
    5dcc:	00023bf0 	.word	0x00023bf0

00005dd0 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    5dd0:	4b0e      	ldr	r3, [pc, #56]	; (5e0c <bt_hex_real+0x3c>)
    5dd2:	2940      	cmp	r1, #64	; 0x40
{
    5dd4:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
    5dd6:	bf28      	it	cs
    5dd8:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    5dda:	4c0d      	ldr	r4, [pc, #52]	; (5e10 <bt_hex_real+0x40>)
    5ddc:	1846      	adds	r6, r0, r1
    5dde:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
    5de0:	42b0      	cmp	r0, r6
    5de2:	f103 0302 	add.w	r3, r3, #2
    5de6:	d104      	bne.n	5df2 <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    5de8:	2300      	movs	r3, #0
    5dea:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    5dee:	4807      	ldr	r0, [pc, #28]	; (5e0c <bt_hex_real+0x3c>)
    5df0:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    5df2:	7802      	ldrb	r2, [r0, #0]
    5df4:	0912      	lsrs	r2, r2, #4
    5df6:	5ca2      	ldrb	r2, [r4, r2]
    5df8:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    5dfc:	f810 2b01 	ldrb.w	r2, [r0], #1
    5e00:	f002 020f 	and.w	r2, r2, #15
    5e04:	5ca2      	ldrb	r2, [r4, r2]
    5e06:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
    5e0a:	e7e9      	b.n	5de0 <bt_hex_real+0x10>
    5e0c:	20003068 	.word	0x20003068
    5e10:	00025caf 	.word	0x00025caf

00005e14 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    5e14:	b530      	push	{r4, r5, lr}
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    5e16:	7803      	ldrb	r3, [r0, #0]
    5e18:	b08b      	sub	sp, #44	; 0x2c
    5e1a:	4604      	mov	r4, r0
    5e1c:	ad07      	add	r5, sp, #28
    5e1e:	2b03      	cmp	r3, #3
    5e20:	d821      	bhi.n	5e66 <bt_addr_le_str_real+0x52>
    5e22:	e8df f003 	tbb	[pc, r3]
    5e26:	1a02      	.short	0x1a02
    5e28:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    5e2a:	4912      	ldr	r1, [pc, #72]	; (5e74 <bt_addr_le_str_real+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    5e2c:	4628      	mov	r0, r5
    5e2e:	f01d fc2e 	bl	2368e <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    5e32:	7863      	ldrb	r3, [r4, #1]
    5e34:	9304      	str	r3, [sp, #16]
    5e36:	78a3      	ldrb	r3, [r4, #2]
    5e38:	9303      	str	r3, [sp, #12]
    5e3a:	78e3      	ldrb	r3, [r4, #3]
    5e3c:	9302      	str	r3, [sp, #8]
    5e3e:	7923      	ldrb	r3, [r4, #4]
    5e40:	9301      	str	r3, [sp, #4]
    5e42:	7963      	ldrb	r3, [r4, #5]
    5e44:	9300      	str	r3, [sp, #0]
    5e46:	4a0c      	ldr	r2, [pc, #48]	; (5e78 <bt_addr_le_str_real+0x64>)
    5e48:	79a3      	ldrb	r3, [r4, #6]
    5e4a:	9505      	str	r5, [sp, #20]
    5e4c:	211e      	movs	r1, #30
    5e4e:	480b      	ldr	r0, [pc, #44]	; (5e7c <bt_addr_le_str_real+0x68>)
    5e50:	f018 faa5 	bl	1e39e <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    5e54:	4809      	ldr	r0, [pc, #36]	; (5e7c <bt_addr_le_str_real+0x68>)
    5e56:	b00b      	add	sp, #44	; 0x2c
    5e58:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    5e5a:	4909      	ldr	r1, [pc, #36]	; (5e80 <bt_addr_le_str_real+0x6c>)
    5e5c:	e7e6      	b.n	5e2c <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
    5e5e:	4909      	ldr	r1, [pc, #36]	; (5e84 <bt_addr_le_str_real+0x70>)
    5e60:	e7e4      	b.n	5e2c <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
    5e62:	4909      	ldr	r1, [pc, #36]	; (5e88 <bt_addr_le_str_real+0x74>)
    5e64:	e7e2      	b.n	5e2c <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    5e66:	4a09      	ldr	r2, [pc, #36]	; (5e8c <bt_addr_le_str_real+0x78>)
    5e68:	210a      	movs	r1, #10
    5e6a:	4628      	mov	r0, r5
    5e6c:	f018 fa97 	bl	1e39e <snprintk>
		break;
    5e70:	e7df      	b.n	5e32 <bt_addr_le_str_real+0x1e>
    5e72:	bf00      	nop
    5e74:	000253d1 	.word	0x000253d1
    5e78:	000253f3 	.word	0x000253f3
    5e7c:	200030e9 	.word	0x200030e9
    5e80:	000253d8 	.word	0x000253d8
    5e84:	000253df 	.word	0x000253df
    5e88:	000253e9 	.word	0x000253e9
    5e8c:	00027059 	.word	0x00027059

00005e90 <ecc_thread>:

	bt_recv(buf);
}

static void ecc_thread(void *p1, void *p2, void *p3)
{
    5e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5e94:	4b6a      	ldr	r3, [pc, #424]	; (6040 <ecc_thread+0x1b0>)
    5e96:	4d6b      	ldr	r5, [pc, #428]	; (6044 <ecc_thread+0x1b4>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5e98:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 6064 <ecc_thread+0x1d4>
	return z_impl_k_sem_take(sem, timeout);
    5e9c:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 6068 <ecc_thread+0x1d8>
    5ea0:	1aed      	subs	r5, r5, r3
    5ea2:	08ed      	lsrs	r5, r5, #3
    5ea4:	4647      	mov	r7, r8
    5ea6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5eaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5eae:	4648      	mov	r0, r9
    5eb0:	f017 fc5a 	bl	1d768 <z_impl_k_sem_take>
    5eb4:	f3bf 8f5b 	dmb	ish
    5eb8:	f8d8 4000 	ldr.w	r4, [r8]
    5ebc:	f3bf 8f5b 	dmb	ish
	while (true) {
		k_sem_take(&cmd_sem, K_FOREVER);

		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    5ec0:	f014 0401 	ands.w	r4, r4, #1
    5ec4:	d05a      	beq.n	5f7c <ecc_thread+0xec>
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
    5ec6:	f8df a194 	ldr.w	sl, [pc, #404]	; 605c <ecc_thread+0x1cc>
    5eca:	4c5f      	ldr	r4, [pc, #380]	; (6048 <ecc_thread+0x1b8>)
	} while (memcmp(ecc.private_key_be, debug_private_key_be, 32) == 0);
    5ecc:	4e5f      	ldr	r6, [pc, #380]	; (604c <ecc_thread+0x1bc>)
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
    5ece:	4860      	ldr	r0, [pc, #384]	; (6050 <ecc_thread+0x1c0>)
    5ed0:	4652      	mov	r2, sl
    5ed2:	4621      	mov	r1, r4
    5ed4:	f019 fac0 	bl	1f458 <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
    5ed8:	bbe8      	cbnz	r0, 5f56 <ecc_thread+0xc6>
			BT_ERR("Failed to create ECC public/private pair");
    5eda:	01a9      	lsls	r1, r5, #6
    5edc:	485d      	ldr	r0, [pc, #372]	; (6054 <ecc_thread+0x1c4>)
    5ede:	f041 0101 	orr.w	r1, r1, #1
    5ee2:	f018 fe29 	bl	1eb38 <log_0>
			return BT_HCI_ERR_UNSPECIFIED;
    5ee6:	f04f 0a1f 	mov.w	sl, #31
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    5eea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5eee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5ef2:	2001      	movs	r0, #1
    5ef4:	f000 f9dc 	bl	62b0 <bt_buf_get_rx>
    5ef8:	f100 0608 	add.w	r6, r0, #8
    5efc:	2102      	movs	r1, #2
    5efe:	4604      	mov	r4, r0
    5f00:	4630      	mov	r0, r6
    5f02:	f01c fb96 	bl	22632 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    5f06:	233e      	movs	r3, #62	; 0x3e
    5f08:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    5f0a:	2342      	movs	r3, #66	; 0x42
    5f0c:	7043      	strb	r3, [r0, #1]
    5f0e:	2101      	movs	r1, #1
    5f10:	4630      	mov	r0, r6
    5f12:	f01c fb8e 	bl	22632 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
    5f16:	2308      	movs	r3, #8
    5f18:	7003      	strb	r3, [r0, #0]
    5f1a:	2141      	movs	r1, #65	; 0x41
    5f1c:	4630      	mov	r0, r6
    5f1e:	f01c fb88 	bl	22632 <net_buf_simple_add>
    5f22:	4606      	mov	r6, r0
	evt->status = status;
    5f24:	f800 ab01 	strb.w	sl, [r0], #1
	if (status) {
    5f28:	f1ba 0f00 	cmp.w	sl, #0
    5f2c:	d01d      	beq.n	5f6a <ecc_thread+0xda>
__ssp_bos_icheck3(memset, void *, int)
    5f2e:	2240      	movs	r2, #64	; 0x40
    5f30:	2100      	movs	r1, #0
    5f32:	f01d fba4 	bl	2367e <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5f36:	f3bf 8f5b 	dmb	ish
    5f3a:	e857 3f00 	ldrex	r3, [r7]
    5f3e:	f023 0301 	bic.w	r3, r3, #1
    5f42:	e847 3200 	strex	r2, r3, [r7]
    5f46:	2a00      	cmp	r2, #0
    5f48:	d1f7      	bne.n	5f3a <ecc_thread+0xaa>
    5f4a:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    5f4e:	4620      	mov	r0, r4
	bt_recv(buf);
    5f50:	f001 fab0 	bl	74b4 <bt_recv>
	while (true) {
    5f54:	e7a7      	b.n	5ea6 <ecc_thread+0x16>
	} while (memcmp(ecc.private_key_be, debug_private_key_be, 32) == 0);
    5f56:	2220      	movs	r2, #32
    5f58:	4631      	mov	r1, r6
    5f5a:	4620      	mov	r0, r4
    5f5c:	f01d fb73 	bl	23646 <memcmp>
    5f60:	2800      	cmp	r0, #0
    5f62:	d0b4      	beq.n	5ece <ecc_thread+0x3e>
	return 0;
    5f64:	f04f 0a00 	mov.w	sl, #0
    5f68:	e7bf      	b.n	5eea <ecc_thread+0x5a>
		sys_memcpy_swap(evt->key, ecc.public_key_be, 32);
    5f6a:	4939      	ldr	r1, [pc, #228]	; (6050 <ecc_thread+0x1c0>)
    5f6c:	f01a fbbc 	bl	206e8 <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecc.public_key_be[32], 32);
    5f70:	4939      	ldr	r1, [pc, #228]	; (6058 <ecc_thread+0x1c8>)
    5f72:	f106 0021 	add.w	r0, r6, #33	; 0x21
    5f76:	f01a fbb7 	bl	206e8 <sys_memcpy_swap.constprop.0>
    5f7a:	e7dc      	b.n	5f36 <ecc_thread+0xa6>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5f7c:	f3bf 8f5b 	dmb	ish
    5f80:	f8d8 3000 	ldr.w	r3, [r8]
    5f84:	f3bf 8f5b 	dmb	ish
			emulate_le_p256_public_key_cmd();
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
    5f88:	079b      	lsls	r3, r3, #30
    5f8a:	d58c      	bpl.n	5ea6 <ecc_thread+0x16>
	ret = uECC_valid_public_key(ecc.public_key_be, &curve_secp256r1);
    5f8c:	4933      	ldr	r1, [pc, #204]	; (605c <ecc_thread+0x1cc>)
    5f8e:	4830      	ldr	r0, [pc, #192]	; (6050 <ecc_thread+0x1c0>)
    5f90:	f01a f92c 	bl	201ec <uECC_valid_public_key>
	if (ret < 0) {
    5f94:	1e01      	subs	r1, r0, #0
    5f96:	da38      	bge.n	600a <ecc_thread+0x17a>
		BT_ERR("public key is not valid (ret %d)", ret);
    5f98:	01aa      	lsls	r2, r5, #6
    5f9a:	4831      	ldr	r0, [pc, #196]	; (6060 <ecc_thread+0x1d0>)
    5f9c:	f042 0201 	orr.w	r2, r2, #1
    5fa0:	f018 fdd7 	bl	1eb52 <log_1>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    5fa4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5fa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5fac:	2001      	movs	r0, #1
    5fae:	f000 f97f 	bl	62b0 <bt_buf_get_rx>
    5fb2:	f100 0a08 	add.w	sl, r0, #8
    5fb6:	2102      	movs	r1, #2
    5fb8:	4606      	mov	r6, r0
    5fba:	4650      	mov	r0, sl
    5fbc:	f01c fb39 	bl	22632 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    5fc0:	233e      	movs	r3, #62	; 0x3e
    5fc2:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    5fc4:	2322      	movs	r3, #34	; 0x22
    5fc6:	7043      	strb	r3, [r0, #1]
    5fc8:	2101      	movs	r1, #1
    5fca:	4650      	mov	r0, sl
    5fcc:	f01c fb31 	bl	22632 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
    5fd0:	2309      	movs	r3, #9
    5fd2:	7003      	strb	r3, [r0, #0]
    5fd4:	2121      	movs	r1, #33	; 0x21
    5fd6:	4650      	mov	r0, sl
    5fd8:	f01c fb2b 	bl	22632 <net_buf_simple_add>
    5fdc:	4603      	mov	r3, r0
	if (ret == TC_CRYPTO_FAIL) {
    5fde:	3001      	adds	r0, #1
    5fe0:	bb3c      	cbnz	r4, 6032 <ecc_thread+0x1a2>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
    5fe2:	221f      	movs	r2, #31
    5fe4:	701a      	strb	r2, [r3, #0]
    5fe6:	21ff      	movs	r1, #255	; 0xff
    5fe8:	2220      	movs	r2, #32
    5fea:	f01d fb48 	bl	2367e <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5fee:	f3bf 8f5b 	dmb	ish
    5ff2:	e857 3f00 	ldrex	r3, [r7]
    5ff6:	f023 0302 	bic.w	r3, r3, #2
    5ffa:	e847 3200 	strex	r2, r3, [r7]
    5ffe:	2a00      	cmp	r2, #0
    6000:	d1f7      	bne.n	5ff2 <ecc_thread+0x162>
    6002:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    6006:	4630      	mov	r0, r6
    6008:	e7a2      	b.n	5f50 <ecc_thread+0xc0>
		ret = uECC_shared_secret(ecc.public_key_be,
    600a:	490f      	ldr	r1, [pc, #60]	; (6048 <ecc_thread+0x1b8>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    600c:	f3bf 8f5b 	dmb	ish
    6010:	f8d8 3000 	ldr.w	r3, [r8]
    6014:	480d      	ldr	r0, [pc, #52]	; (604c <ecc_thread+0x1bc>)
    6016:	f3bf 8f5b 	dmb	ish
    601a:	f013 0f04 	tst.w	r3, #4
    601e:	f101 0220 	add.w	r2, r1, #32
    6022:	4b0e      	ldr	r3, [pc, #56]	; (605c <ecc_thread+0x1cc>)
    6024:	bf18      	it	ne
    6026:	4601      	movne	r1, r0
    6028:	4610      	mov	r0, r2
    602a:	f019 fa62 	bl	1f4f2 <uECC_shared_secret>
    602e:	4604      	mov	r4, r0
    6030:	e7b8      	b.n	5fa4 <ecc_thread+0x114>
		evt->status = 0U;
    6032:	2200      	movs	r2, #0
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
    6034:	4906      	ldr	r1, [pc, #24]	; (6050 <ecc_thread+0x1c0>)
		evt->status = 0U;
    6036:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
    6038:	f01a fb56 	bl	206e8 <sys_memcpy_swap.constprop.0>
    603c:	e7d7      	b.n	5fee <ecc_thread+0x15e>
    603e:	bf00      	nop
    6040:	0002393c 	.word	0x0002393c
    6044:	00023a1c 	.word	0x00023a1c
    6048:	20003107 	.word	0x20003107
    604c:	00025d23 	.word	0x00025d23
    6050:	20003127 	.word	0x20003127
    6054:	00025cc7 	.word	0x00025cc7
    6058:	20003147 	.word	0x20003147
    605c:	00023e88 	.word	0x00023e88
    6060:	00025cf0 	.word	0x00025cf0
    6064:	200015e8 	.word	0x200015e8
    6068:	20000850 	.word	0x20000850

0000606c <le_gen_dhkey>:
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
}

static uint8_t le_gen_dhkey(uint8_t *key, uint8_t key_type)
{
    606c:	b570      	push	{r4, r5, r6, lr}
    606e:	4c21      	ldr	r4, [pc, #132]	; (60f4 <le_gen_dhkey+0x88>)
    6070:	f3bf 8f5b 	dmb	ish
    6074:	6823      	ldr	r3, [r4, #0]
    6076:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    607a:	07da      	lsls	r2, r3, #31
{
    607c:	4606      	mov	r6, r0
    607e:	460d      	mov	r5, r1
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    6080:	d501      	bpl.n	6086 <le_gen_dhkey+0x1a>
		return BT_HCI_ERR_CMD_DISALLOWED;
    6082:	200c      	movs	r0, #12
			  key_type == BT_HCI_LE_KEY_TYPE_DEBUG);

	k_sem_give(&cmd_sem);

	return BT_HCI_ERR_SUCCESS;
}
    6084:	bd70      	pop	{r4, r5, r6, pc}
	if (key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
    6086:	2901      	cmp	r1, #1
    6088:	d831      	bhi.n	60ee <le_gen_dhkey+0x82>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    608a:	f3bf 8f5b 	dmb	ish
    608e:	e854 3f00 	ldrex	r3, [r4]
    6092:	f043 0202 	orr.w	r2, r3, #2
    6096:	e844 2100 	strex	r1, r2, [r4]
    609a:	2900      	cmp	r1, #0
    609c:	d1f7      	bne.n	608e <le_gen_dhkey+0x22>
    609e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
    60a2:	079b      	lsls	r3, r3, #30
    60a4:	d4ed      	bmi.n	6082 <le_gen_dhkey+0x16>
	sys_memcpy_swap(ecc.public_key_be, key, 32);
    60a6:	4814      	ldr	r0, [pc, #80]	; (60f8 <le_gen_dhkey+0x8c>)
    60a8:	4631      	mov	r1, r6
    60aa:	f01a fb1d 	bl	206e8 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecc.public_key_be[32], &key[32], 32);
    60ae:	4813      	ldr	r0, [pc, #76]	; (60fc <le_gen_dhkey+0x90>)
    60b0:	f106 0120 	add.w	r1, r6, #32
    60b4:	f01a fb18 	bl	206e8 <sys_memcpy_swap.constprop.0>
    60b8:	f3bf 8f5b 	dmb	ish
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	if (val) {
    60bc:	b175      	cbz	r5, 60dc <le_gen_dhkey+0x70>
    60be:	e854 3f00 	ldrex	r3, [r4]
    60c2:	f043 0304 	orr.w	r3, r3, #4
    60c6:	e844 3200 	strex	r2, r3, [r4]
    60ca:	2a00      	cmp	r2, #0
    60cc:	d1f7      	bne.n	60be <le_gen_dhkey+0x52>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    60ce:	f3bf 8f5b 	dmb	ish
	z_impl_k_sem_give(sem);
    60d2:	480b      	ldr	r0, [pc, #44]	; (6100 <le_gen_dhkey+0x94>)
    60d4:	f017 fb22 	bl	1d71c <z_impl_k_sem_give>
    60d8:	2000      	movs	r0, #0
    60da:	e7d3      	b.n	6084 <le_gen_dhkey+0x18>
    60dc:	e854 3f00 	ldrex	r3, [r4]
    60e0:	f023 0304 	bic.w	r3, r3, #4
    60e4:	e844 3200 	strex	r2, r3, [r4]
    60e8:	2a00      	cmp	r2, #0
    60ea:	d0f0      	beq.n	60ce <le_gen_dhkey+0x62>
    60ec:	e7f6      	b.n	60dc <le_gen_dhkey+0x70>
		return BT_HCI_ERR_INVALID_PARAM;
    60ee:	2012      	movs	r0, #18
    60f0:	e7c8      	b.n	6084 <le_gen_dhkey+0x18>
    60f2:	bf00      	nop
    60f4:	200015e8 	.word	0x200015e8
    60f8:	20003127 	.word	0x20003127
    60fc:	20003147 	.word	0x20003147
    6100:	20000850 	.word	0x20000850

00006104 <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
    6104:	b570      	push	{r4, r5, r6, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    6106:	7d06      	ldrb	r6, [r0, #20]
    6108:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
    610a:	b976      	cbnz	r6, 612a <bt_hci_ecc_send+0x26>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
    610c:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
    610e:	881d      	ldrh	r5, [r3, #0]
    6110:	f242 0226 	movw	r2, #8230	; 0x2026
    6114:	4295      	cmp	r5, r2
    6116:	d045      	beq.n	61a4 <bt_hci_ecc_send+0xa0>
    6118:	d80f      	bhi.n	613a <bt_hci_ecc_send+0x36>
    611a:	f242 0201 	movw	r2, #8193	; 0x2001
    611e:	4295      	cmp	r5, r2
    6120:	d04f      	beq.n	61c2 <bt_hci_ecc_send+0xbe>
    6122:	f242 0325 	movw	r3, #8229	; 0x2025
    6126:	429d      	cmp	r5, r3
    6128:	d013      	beq.n	6152 <bt_hci_ecc_send+0x4e>
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
    612a:	4b2a      	ldr	r3, [pc, #168]	; (61d4 <bt_hci_ecc_send+0xd0>)
    612c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    6130:	4620      	mov	r0, r4
    6132:	691b      	ldr	r3, [r3, #16]
}
    6134:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
    6138:	4718      	bx	r3
		switch (sys_le16_to_cpu(chdr->opcode)) {
    613a:	f242 035e 	movw	r3, #8286	; 0x205e
    613e:	429d      	cmp	r5, r3
    6140:	d1f3      	bne.n	612a <bt_hci_ecc_send+0x26>
 *
 * @return New beginning of the buffer data.
 */
static inline void *net_buf_pull(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull(&buf->b, len);
    6142:	2103      	movs	r1, #3
    6144:	3008      	adds	r0, #8
    6146:	f01c fa94 	bl	22672 <net_buf_simple_pull>
	cmd = (void *)buf->data;
    614a:	68a0      	ldr	r0, [r4, #8]
	status = le_gen_dhkey(cmd->key, cmd->key_type);
    614c:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    6150:	e02e      	b.n	61b0 <bt_hci_ecc_send+0xac>
    6152:	2103      	movs	r1, #3
    6154:	3008      	adds	r0, #8
    6156:	f01c fa8c 	bl	22672 <net_buf_simple_pull>
	net_buf_unref(buf);
    615a:	4620      	mov	r0, r4
    615c:	f014 f806 	bl	1a16c <net_buf_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6160:	f3bf 8f5b 	dmb	ish
    6164:	4b1c      	ldr	r3, [pc, #112]	; (61d8 <bt_hci_ecc_send+0xd4>)
    6166:	681a      	ldr	r2, [r3, #0]
    6168:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
    616c:	0792      	lsls	r2, r2, #30
    616e:	d507      	bpl.n	6180 <bt_hci_ecc_send+0x7c>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    6170:	260c      	movs	r6, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
    6172:	4631      	mov	r1, r6
    6174:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
    6178:	f01a fa92 	bl	206a0 <send_cmd_status>
}
    617c:	2000      	movs	r0, #0
    617e:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6180:	f3bf 8f5b 	dmb	ish
    6184:	e853 2f00 	ldrex	r2, [r3]
    6188:	f042 0101 	orr.w	r1, r2, #1
    618c:	e843 1000 	strex	r0, r1, [r3]
    6190:	2800      	cmp	r0, #0
    6192:	d1f7      	bne.n	6184 <bt_hci_ecc_send+0x80>
    6194:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
    6198:	07d3      	lsls	r3, r2, #31
    619a:	d4e9      	bmi.n	6170 <bt_hci_ecc_send+0x6c>
    619c:	480f      	ldr	r0, [pc, #60]	; (61dc <bt_hci_ecc_send+0xd8>)
    619e:	f017 fabd 	bl	1d71c <z_impl_k_sem_give>
}
    61a2:	e7e6      	b.n	6172 <bt_hci_ecc_send+0x6e>
    61a4:	2103      	movs	r1, #3
    61a6:	3008      	adds	r0, #8
    61a8:	f01c fa63 	bl	22672 <net_buf_simple_pull>
	status = le_gen_dhkey(cmd->key, BT_HCI_LE_KEY_TYPE_GENERATED);
    61ac:	68a0      	ldr	r0, [r4, #8]
    61ae:	4631      	mov	r1, r6
	status = le_gen_dhkey(cmd->key, cmd->key_type);
    61b0:	f7ff ff5c 	bl	606c <le_gen_dhkey>
    61b4:	4606      	mov	r6, r0
	net_buf_unref(buf);
    61b6:	4620      	mov	r0, r4
    61b8:	f013 ffd8 	bl	1a16c <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
    61bc:	4631      	mov	r1, r6
    61be:	4628      	mov	r0, r5
    61c0:	e7da      	b.n	6178 <bt_hci_ecc_send+0x74>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
    61c2:	78da      	ldrb	r2, [r3, #3]
    61c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    61c8:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
    61ca:	791a      	ldrb	r2, [r3, #4]
    61cc:	f022 0201 	bic.w	r2, r2, #1
    61d0:	711a      	strb	r2, [r3, #4]
}
    61d2:	e7aa      	b.n	612a <bt_hci_ecc_send+0x26>
    61d4:	20000000 	.word	0x20000000
    61d8:	200015e8 	.word	0x200015e8
    61dc:	20000850 	.word	0x20000850

000061e0 <bt_hci_ecc_init>:
{
	return !bt_rand(dst, len);
}

void bt_hci_ecc_init(void)
{
    61e0:	b510      	push	{r4, lr}
    61e2:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    61e4:	4c0c      	ldr	r4, [pc, #48]	; (6218 <bt_hci_ecc_init+0x38>)
    61e6:	490d      	ldr	r1, [pc, #52]	; (621c <bt_hci_ecc_init+0x3c>)
    61e8:	2200      	movs	r2, #0
    61ea:	2300      	movs	r3, #0
    61ec:	e9cd 2306 	strd	r2, r3, [sp, #24]
    61f0:	2300      	movs	r3, #0
    61f2:	220a      	movs	r2, #10
    61f4:	e9cd 2303 	strd	r2, r3, [sp, #12]
    61f8:	e9cd 3301 	strd	r3, r3, [sp, #4]
    61fc:	9300      	str	r3, [sp, #0]
    61fe:	f44f 628a 	mov.w	r2, #1104	; 0x450
    6202:	4b07      	ldr	r3, [pc, #28]	; (6220 <bt_hci_ecc_init+0x40>)
    6204:	4620      	mov	r0, r4
    6206:	f017 fb23 	bl	1d850 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    620a:	4906      	ldr	r1, [pc, #24]	; (6224 <bt_hci_ecc_init+0x44>)
    620c:	4620      	mov	r0, r4
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_KERNEL_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecc_thread_data, "BT ECC");
}
    620e:	b008      	add	sp, #32
    6210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6214:	f01c bf75 	b.w	23102 <z_impl_k_thread_name_set>
    6218:	20000a88 	.word	0x20000a88
    621c:	200035c8 	.word	0x200035c8
    6220:	00005e91 	.word	0x00005e91
    6224:	00025d11 	.word	0x00025d11

00006228 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    6228:	b5f0      	push	{r4, r5, r6, r7, lr}
    622a:	460b      	mov	r3, r1
	switch (src->type) {
    622c:	7801      	ldrb	r1, [r0, #0]
    622e:	2901      	cmp	r1, #1
{
    6230:	4602      	mov	r2, r0
	switch (src->type) {
    6232:	d015      	beq.n	6260 <uuid_to_uuid128+0x38>
    6234:	2902      	cmp	r1, #2
    6236:	d02b      	beq.n	6290 <uuid_to_uuid128+0x68>
    6238:	b989      	cbnz	r1, 625e <uuid_to_uuid128+0x36>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    623a:	4c1c      	ldr	r4, [pc, #112]	; (62ac <uuid_to_uuid128+0x84>)
    623c:	461d      	mov	r5, r3
    623e:	f104 0710 	add.w	r7, r4, #16
    6242:	6820      	ldr	r0, [r4, #0]
    6244:	6861      	ldr	r1, [r4, #4]
    6246:	462e      	mov	r6, r5
    6248:	c603      	stmia	r6!, {r0, r1}
    624a:	3408      	adds	r4, #8
    624c:	42bc      	cmp	r4, r7
    624e:	4635      	mov	r5, r6
    6250:	d1f7      	bne.n	6242 <uuid_to_uuid128+0x1a>
		sys_put_le16(BT_UUID_16(src)->val,
    6252:	8852      	ldrh	r2, [r2, #2]
		*dst = uuid128_base;
    6254:	7821      	ldrb	r1, [r4, #0]
    6256:	7031      	strb	r1, [r6, #0]
	dst[0] = val;
    6258:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    625a:	0a12      	lsrs	r2, r2, #8
    625c:	739a      	strb	r2, [r3, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    625e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst = uuid128_base;
    6260:	4c12      	ldr	r4, [pc, #72]	; (62ac <uuid_to_uuid128+0x84>)
    6262:	461d      	mov	r5, r3
    6264:	f104 0710 	add.w	r7, r4, #16
    6268:	6820      	ldr	r0, [r4, #0]
    626a:	6861      	ldr	r1, [r4, #4]
    626c:	462e      	mov	r6, r5
    626e:	c603      	stmia	r6!, {r0, r1}
    6270:	3408      	adds	r4, #8
    6272:	42bc      	cmp	r4, r7
    6274:	4635      	mov	r5, r6
    6276:	d1f7      	bne.n	6268 <uuid_to_uuid128+0x40>
		sys_put_le32(BT_UUID_32(src)->val,
    6278:	6852      	ldr	r2, [r2, #4]
		*dst = uuid128_base;
    627a:	7821      	ldrb	r1, [r4, #0]
    627c:	7031      	strb	r1, [r6, #0]
    627e:	f3c2 2107 	ubfx	r1, r2, #8, #8
	dst[0] = val;
    6282:	735a      	strb	r2, [r3, #13]
	sys_put_le16(val >> 16, &dst[2]);
    6284:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    6286:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    6288:	0a12      	lsrs	r2, r2, #8
    628a:	7399      	strb	r1, [r3, #14]
    628c:	741a      	strb	r2, [r3, #16]
}
    628e:	e7e6      	b.n	625e <uuid_to_uuid128+0x36>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    6290:	f100 0510 	add.w	r5, r0, #16
    6294:	6810      	ldr	r0, [r2, #0]
    6296:	6851      	ldr	r1, [r2, #4]
    6298:	461c      	mov	r4, r3
    629a:	c403      	stmia	r4!, {r0, r1}
    629c:	3208      	adds	r2, #8
    629e:	42aa      	cmp	r2, r5
    62a0:	4623      	mov	r3, r4
    62a2:	d1f7      	bne.n	6294 <uuid_to_uuid128+0x6c>
    62a4:	7812      	ldrb	r2, [r2, #0]
    62a6:	7022      	strb	r2, [r4, #0]
    62a8:	e7d9      	b.n	625e <uuid_to_uuid128+0x36>
    62aa:	bf00      	nop
    62ac:	00025d43 	.word	0x00025d43

000062b0 <bt_buf_get_rx>:
NET_BUF_POOL_DEFINE(acl_in_pool, CONFIG_BT_ACL_RX_COUNT, ACL_IN_SIZE,
		    sizeof(struct acl_data), bt_hci_host_num_completed_packets);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    62b0:	b538      	push	{r3, r4, r5, lr}
    62b2:	4605      	mov	r5, r0
	return net_buf_alloc_fixed(pool, timeout);
    62b4:	4805      	ldr	r0, [pc, #20]	; (62cc <bt_buf_get_rx+0x1c>)
    62b6:	f01c f966 	bl	22586 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    62ba:	4604      	mov	r4, r0
    62bc:	b120      	cbz	r0, 62c8 <bt_buf_get_rx+0x18>
	net_buf_simple_reserve(&buf->b, reserve);
    62be:	2100      	movs	r1, #0
    62c0:	3008      	adds	r0, #8
    62c2:	f01c f97f 	bl	225c4 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    62c6:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    62c8:	4620      	mov	r0, r4
    62ca:	bd38      	pop	{r3, r4, r5, pc}
    62cc:	20000980 	.word	0x20000980

000062d0 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    62d0:	b570      	push	{r4, r5, r6, lr}
    62d2:	4602      	mov	r2, r0
    62d4:	460b      	mov	r3, r1
	__asm__ volatile(
    62d6:	f04f 0120 	mov.w	r1, #32
    62da:	f3ef 8511 	mrs	r5, BASEPRI
    62de:	f381 8811 	msr	BASEPRI, r1
    62e2:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    62e6:	480c      	ldr	r0, [pc, #48]	; (6318 <bt_buf_get_cmd_complete+0x48>)
	bt_dev.sent_cmd = NULL;
    62e8:	2100      	movs	r1, #0
	buf = bt_dev.sent_cmd;
    62ea:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
	bt_dev.sent_cmd = NULL;
    62ee:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
	__asm__ volatile(
    62f2:	f385 8811 	msr	BASEPRI, r5
    62f6:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    62fa:	b924      	cbnz	r4, 6306 <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    62fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    6300:	2001      	movs	r0, #1
    6302:	f7ff bfd5 	b.w	62b0 <bt_buf_get_rx>
    6306:	2301      	movs	r3, #1
    6308:	f104 0008 	add.w	r0, r4, #8
    630c:	7523      	strb	r3, [r4, #20]
		buf->len = 0U;
    630e:	81a1      	strh	r1, [r4, #12]
    6310:	f01c f958 	bl	225c4 <net_buf_simple_reserve>
}
    6314:	4620      	mov	r0, r4
    6316:	bd70      	pop	{r4, r5, r6, pc}
    6318:	20000000 	.word	0x20000000

0000631c <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    631c:	b570      	push	{r4, r5, r6, lr}
    631e:	4604      	mov	r4, r0
	switch (evt) {
    6320:	2c0f      	cmp	r4, #15
{
    6322:	460d      	mov	r5, r1
    6324:	4610      	mov	r0, r2
    6326:	4619      	mov	r1, r3
	switch (evt) {
    6328:	d805      	bhi.n	6336 <bt_buf_get_evt+0x1a>
    632a:	2c0d      	cmp	r4, #13
    632c:	d912      	bls.n	6354 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_DISCARDABLE_BUF_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    632e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    6332:	f7ff bfcd 	b.w	62d0 <bt_buf_get_cmd_complete>
	switch (evt) {
    6336:	2c13      	cmp	r4, #19
    6338:	d10c      	bne.n	6354 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
    633a:	480b      	ldr	r0, [pc, #44]	; (6368 <bt_buf_get_evt+0x4c>)
    633c:	f01c f923 	bl	22586 <net_buf_alloc_fixed>
			if (buf) {
    6340:	4604      	mov	r4, r0
    6342:	b128      	cbz	r0, 6350 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
    6344:	2100      	movs	r1, #0
    6346:	3008      	adds	r0, #8
    6348:	f01c f93c 	bl	225c4 <net_buf_simple_reserve>
    634c:	2301      	movs	r3, #1
    634e:	7523      	strb	r3, [r4, #20]
}
    6350:	4620      	mov	r0, r4
    6352:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
    6354:	4602      	mov	r2, r0
    6356:	460b      	mov	r3, r1
		if (discardable) {
    6358:	b10d      	cbz	r5, 635e <bt_buf_get_evt+0x42>
    635a:	4804      	ldr	r0, [pc, #16]	; (636c <bt_buf_get_evt+0x50>)
    635c:	e7ee      	b.n	633c <bt_buf_get_evt+0x20>
}
    635e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    6362:	2001      	movs	r0, #1
    6364:	f7ff bfa4 	b.w	62b0 <bt_buf_get_rx>
    6368:	200009a8 	.word	0x200009a8
    636c:	20000908 	.word	0x20000908

00006370 <ver_str>:
{
    6370:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
    6372:	4d0b      	ldr	r5, [pc, #44]	; (63a0 <ver_str+0x30>)
{
    6374:	4606      	mov	r6, r0
	const char * const str[] = {
    6376:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    6378:	b08c      	sub	sp, #48	; 0x30
	const char * const str[] = {
    637a:	466c      	mov	r4, sp
    637c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    637e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6380:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6382:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    6386:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (ver < ARRAY_SIZE(str)) {
    638a:	2e0b      	cmp	r6, #11
		return str[ver];
    638c:	bf9b      	ittet	ls
    638e:	ab0c      	addls	r3, sp, #48	; 0x30
    6390:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	return "unknown";
    6394:	4803      	ldrhi	r0, [pc, #12]	; (63a4 <ver_str+0x34>)
		return str[ver];
    6396:	f856 0c30 	ldrls.w	r0, [r6, #-48]
}
    639a:	b00c      	add	sp, #48	; 0x30
    639c:	bd70      	pop	{r4, r5, r6, pc}
    639e:	bf00      	nop
    63a0:	00023b70 	.word	0x00023b70
    63a4:	00025e46 	.word	0x00025e46

000063a8 <hci_data_buf_overflow>:
    63a8:	4905      	ldr	r1, [pc, #20]	; (63c0 <hci_data_buf_overflow+0x18>)
    63aa:	4a06      	ldr	r2, [pc, #24]	; (63c4 <hci_data_buf_overflow+0x1c>)
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
    63ac:	6883      	ldr	r3, [r0, #8]
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    63ae:	4806      	ldr	r0, [pc, #24]	; (63c8 <hci_data_buf_overflow+0x20>)
    63b0:	1a52      	subs	r2, r2, r1
    63b2:	08d2      	lsrs	r2, r2, #3
    63b4:	0192      	lsls	r2, r2, #6
    63b6:	7819      	ldrb	r1, [r3, #0]
    63b8:	f042 0202 	orr.w	r2, r2, #2
    63bc:	f018 bbc9 	b.w	1eb52 <log_1>
    63c0:	0002393c 	.word	0x0002393c
    63c4:	00023a14 	.word	0x00023a14
    63c8:	00025e4e 	.word	0x00025e4e

000063cc <le_data_len_change>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    63cc:	6883      	ldr	r3, [r0, #8]
{
    63ce:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    63d0:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    63d2:	4620      	mov	r0, r4
    63d4:	f002 fcce 	bl	8d74 <bt_conn_lookup_handle>
	if (!conn) {
    63d8:	b960      	cbnz	r0, 63f4 <le_data_len_change+0x28>
    63da:	4a08      	ldr	r2, [pc, #32]	; (63fc <le_data_len_change+0x30>)
    63dc:	4b08      	ldr	r3, [pc, #32]	; (6400 <le_data_len_change+0x34>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    63de:	4809      	ldr	r0, [pc, #36]	; (6404 <le_data_len_change+0x38>)
    63e0:	1ad2      	subs	r2, r2, r3
    63e2:	08d2      	lsrs	r2, r2, #3
    63e4:	0192      	lsls	r2, r2, #6
    63e6:	4621      	mov	r1, r4
    63e8:	f042 0201 	orr.w	r2, r2, #1
}
    63ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    63f0:	f018 bbaf 	b.w	1eb52 <log_1>
}
    63f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
    63f8:	f01a bd98 	b.w	20f2c <bt_conn_unref>
    63fc:	00023a14 	.word	0x00023a14
    6400:	0002393c 	.word	0x0002393c
    6404:	00025e76 	.word	0x00025e76

00006408 <hci_disconn_complete_prio>:
{
    6408:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    640a:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
    640c:	781a      	ldrb	r2, [r3, #0]
    640e:	b9da      	cbnz	r2, 6448 <hci_disconn_complete_prio+0x40>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    6410:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    6414:	4628      	mov	r0, r5
    6416:	f002 fcad 	bl	8d74 <bt_conn_lookup_handle>
	if (!conn) {
    641a:	4604      	mov	r4, r0
    641c:	b960      	cbnz	r0, 6438 <hci_disconn_complete_prio+0x30>
    641e:	4b0b      	ldr	r3, [pc, #44]	; (644c <hci_disconn_complete_prio+0x44>)
    6420:	4a0b      	ldr	r2, [pc, #44]	; (6450 <hci_disconn_complete_prio+0x48>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    6422:	480c      	ldr	r0, [pc, #48]	; (6454 <hci_disconn_complete_prio+0x4c>)
    6424:	1ad2      	subs	r2, r2, r3
    6426:	08d2      	lsrs	r2, r2, #3
    6428:	0192      	lsls	r2, r2, #6
    642a:	4629      	mov	r1, r5
    642c:	f042 0201 	orr.w	r2, r2, #1
}
    6430:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    6434:	f018 bb8d 	b.w	1eb52 <log_1>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    6438:	2101      	movs	r1, #1
    643a:	f002 fca7 	bl	8d8c <bt_conn_set_state>
	bt_conn_unref(conn);
    643e:	4620      	mov	r0, r4
}
    6440:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    6444:	f01a bd72 	b.w	20f2c <bt_conn_unref>
}
    6448:	bd38      	pop	{r3, r4, r5, pc}
    644a:	bf00      	nop
    644c:	0002393c 	.word	0x0002393c
    6450:	00023a14 	.word	0x00023a14
    6454:	00025e9a 	.word	0x00025e9a

00006458 <hci_disconn_complete>:
{
    6458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    645a:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
    645c:	7835      	ldrb	r5, [r6, #0]
    645e:	b9f5      	cbnz	r5, 649e <hci_disconn_complete+0x46>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    6460:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    6464:	4638      	mov	r0, r7
    6466:	f002 fc85 	bl	8d74 <bt_conn_lookup_handle>
	if (!conn) {
    646a:	4604      	mov	r4, r0
    646c:	b960      	cbnz	r0, 6488 <hci_disconn_complete+0x30>
    646e:	4b0c      	ldr	r3, [pc, #48]	; (64a0 <hci_disconn_complete+0x48>)
    6470:	4a0c      	ldr	r2, [pc, #48]	; (64a4 <hci_disconn_complete+0x4c>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    6472:	480d      	ldr	r0, [pc, #52]	; (64a8 <hci_disconn_complete+0x50>)
    6474:	1ad2      	subs	r2, r2, r3
    6476:	08d2      	lsrs	r2, r2, #3
    6478:	0192      	lsls	r2, r2, #6
    647a:	4639      	mov	r1, r7
    647c:	f042 0201 	orr.w	r2, r2, #1
}
    6480:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    6484:	f018 bb65 	b.w	1eb52 <log_1>
	conn->err = evt->reason;
    6488:	78f3      	ldrb	r3, [r6, #3]
    648a:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    648c:	4629      	mov	r1, r5
    648e:	f002 fc7d 	bl	8d8c <bt_conn_set_state>
	conn->handle = 0U;
    6492:	8025      	strh	r5, [r4, #0]
		bt_conn_unref(conn);
    6494:	4620      	mov	r0, r4
}
    6496:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
    649a:	f01a bd47 	b.w	20f2c <bt_conn_unref>
}
    649e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    64a0:	0002393c 	.word	0x0002393c
    64a4:	00023a14 	.word	0x00023a14
    64a8:	00025e9a 	.word	0x00025e9a

000064ac <hci_hardware_error>:
{
    64ac:	b508      	push	{r3, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    64ae:	2101      	movs	r1, #1
    64b0:	3008      	adds	r0, #8
    64b2:	f01c f8e6 	bl	22682 <net_buf_simple_pull_mem>
    64b6:	4b06      	ldr	r3, [pc, #24]	; (64d0 <hci_hardware_error+0x24>)
    64b8:	4a06      	ldr	r2, [pc, #24]	; (64d4 <hci_hardware_error+0x28>)
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    64ba:	7801      	ldrb	r1, [r0, #0]
    64bc:	4806      	ldr	r0, [pc, #24]	; (64d8 <hci_hardware_error+0x2c>)
    64be:	1ad2      	subs	r2, r2, r3
    64c0:	08d2      	lsrs	r2, r2, #3
    64c2:	0192      	lsls	r2, r2, #6
}
    64c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    64c8:	f042 0201 	orr.w	r2, r2, #1
    64cc:	f018 bb41 	b.w	1eb52 <log_1>
    64d0:	0002393c 	.word	0x0002393c
    64d4:	00023a14 	.word	0x00023a14
    64d8:	00025ec0 	.word	0x00025ec0

000064dc <hci_vendor_event>:
{
    64dc:	b510      	push	{r4, lr}
    64de:	4a0a      	ldr	r2, [pc, #40]	; (6508 <hci_vendor_event+0x2c>)
    64e0:	4c0a      	ldr	r4, [pc, #40]	; (650c <hci_vendor_event+0x30>)
		BT_WARN("Unhandled vendor-specific event: %s",
    64e2:	8981      	ldrh	r1, [r0, #12]
    64e4:	6880      	ldr	r0, [r0, #8]
    64e6:	1aa4      	subs	r4, r4, r2
    64e8:	f7ff fc72 	bl	5dd0 <bt_hex_real>
    64ec:	f7fd fbfe 	bl	3cec <log_strdup>
    64f0:	08e4      	lsrs	r4, r4, #3
    64f2:	01a4      	lsls	r4, r4, #6
    64f4:	f044 0402 	orr.w	r4, r4, #2
    64f8:	4601      	mov	r1, r0
    64fa:	4622      	mov	r2, r4
    64fc:	4804      	ldr	r0, [pc, #16]	; (6510 <hci_vendor_event+0x34>)
}
    64fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    6502:	f018 bb26 	b.w	1eb52 <log_1>
    6506:	bf00      	nop
    6508:	0002393c 	.word	0x0002393c
    650c:	00023a14 	.word	0x00023a14
    6510:	00025ee2 	.word	0x00025ee2

00006514 <hci_encrypt_key_refresh_complete>:
{
    6514:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
    6516:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    6518:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	uint8_t status = evt->status;
    651c:	781d      	ldrb	r5, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    651e:	4630      	mov	r0, r6
    6520:	f002 fc28 	bl	8d74 <bt_conn_lookup_handle>
	if (!conn) {
    6524:	4604      	mov	r4, r0
    6526:	b960      	cbnz	r0, 6542 <hci_encrypt_key_refresh_complete+0x2e>
    6528:	4a1e      	ldr	r2, [pc, #120]	; (65a4 <hci_encrypt_key_refresh_complete+0x90>)
    652a:	4b1f      	ldr	r3, [pc, #124]	; (65a8 <hci_encrypt_key_refresh_complete+0x94>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    652c:	481f      	ldr	r0, [pc, #124]	; (65ac <hci_encrypt_key_refresh_complete+0x98>)
    652e:	1ad2      	subs	r2, r2, r3
    6530:	08d2      	lsrs	r2, r2, #3
    6532:	0192      	lsls	r2, r2, #6
    6534:	4631      	mov	r1, r6
    6536:	f042 0201 	orr.w	r2, r2, #1
}
    653a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    653e:	f018 bb08 	b.w	1eb52 <log_1>
	if (status) {
    6542:	b165      	cbz	r5, 655e <hci_encrypt_key_refresh_complete+0x4a>
	switch (hci_err) {
    6544:	2d29      	cmp	r5, #41	; 0x29
    6546:	bf96      	itet	ls
    6548:	4b19      	ldrls	r3, [pc, #100]	; (65b0 <hci_encrypt_key_refresh_complete+0x9c>)
	if (status) {
    654a:	2208      	movhi	r2, #8
    654c:	5d5a      	ldrbls	r2, [r3, r5]
		bt_conn_security_changed(conn, status,
    654e:	4629      	mov	r1, r5
    6550:	f002 fa6e 	bl	8a30 <bt_conn_security_changed>
	bt_conn_unref(conn);
    6554:	4620      	mov	r0, r4
}
    6556:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    655a:	f01a bce7 	b.w	20f2c <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    655e:	7883      	ldrb	r3, [r0, #2]
    6560:	2b01      	cmp	r3, #1
    6562:	d107      	bne.n	6574 <hci_encrypt_key_refresh_complete+0x60>
		bt_smp_update_keys(conn);
    6564:	f006 fa18 	bl	c998 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
    6568:	4620      	mov	r0, r4
    656a:	f01a f952 	bl	20812 <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
    656e:	2800      	cmp	r0, #0
    6570:	bf08      	it	eq
    6572:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
    6574:	4b0e      	ldr	r3, [pc, #56]	; (65b0 <hci_encrypt_key_refresh_complete+0x9c>)
    6576:	4629      	mov	r1, r5
    6578:	5d5a      	ldrb	r2, [r3, r5]
    657a:	4620      	mov	r0, r4
    657c:	f002 fa58 	bl	8a30 <bt_conn_security_changed>
	if (status) {
    6580:	2d00      	cmp	r5, #0
    6582:	d0e7      	beq.n	6554 <hci_encrypt_key_refresh_complete+0x40>
    6584:	4b08      	ldr	r3, [pc, #32]	; (65a8 <hci_encrypt_key_refresh_complete+0x94>)
    6586:	4907      	ldr	r1, [pc, #28]	; (65a4 <hci_encrypt_key_refresh_complete+0x90>)
		BT_ERR("Failed to set required security level");
    6588:	480a      	ldr	r0, [pc, #40]	; (65b4 <hci_encrypt_key_refresh_complete+0xa0>)
    658a:	1ac9      	subs	r1, r1, r3
    658c:	08c9      	lsrs	r1, r1, #3
    658e:	0189      	lsls	r1, r1, #6
    6590:	f041 0101 	orr.w	r1, r1, #1
    6594:	f018 fad0 	bl	1eb38 <log_0>
		bt_conn_disconnect(conn, status);
    6598:	4629      	mov	r1, r5
    659a:	4620      	mov	r0, r4
    659c:	f01a fd01 	bl	20fa2 <bt_conn_disconnect>
    65a0:	e7d8      	b.n	6554 <hci_encrypt_key_refresh_complete+0x40>
    65a2:	bf00      	nop
    65a4:	00023a14 	.word	0x00023a14
    65a8:	0002393c 	.word	0x0002393c
    65ac:	00025e9a 	.word	0x00025e9a
    65b0:	00026481 	.word	0x00026481
    65b4:	00025f06 	.word	0x00025f06

000065b8 <hci_encrypt_change>:
{
    65b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
    65ba:	6886      	ldr	r6, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    65bc:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	uint8_t status = evt->status;
    65c0:	7835      	ldrb	r5, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
    65c2:	4638      	mov	r0, r7
    65c4:	f002 fbd6 	bl	8d74 <bt_conn_lookup_handle>
	if (!conn) {
    65c8:	4604      	mov	r4, r0
    65ca:	b960      	cbnz	r0, 65e6 <hci_encrypt_change+0x2e>
    65cc:	4b1f      	ldr	r3, [pc, #124]	; (664c <hci_encrypt_change+0x94>)
    65ce:	4a20      	ldr	r2, [pc, #128]	; (6650 <hci_encrypt_change+0x98>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    65d0:	4820      	ldr	r0, [pc, #128]	; (6654 <hci_encrypt_change+0x9c>)
    65d2:	1ad2      	subs	r2, r2, r3
    65d4:	08d2      	lsrs	r2, r2, #3
    65d6:	0192      	lsls	r2, r2, #6
    65d8:	4639      	mov	r1, r7
    65da:	f042 0201 	orr.w	r2, r2, #1
}
    65de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    65e2:	f018 bab6 	b.w	1eb52 <log_1>
	if (status) {
    65e6:	b165      	cbz	r5, 6602 <hci_encrypt_change+0x4a>
	switch (hci_err) {
    65e8:	2d29      	cmp	r5, #41	; 0x29
    65ea:	bf96      	itet	ls
    65ec:	4b1a      	ldrls	r3, [pc, #104]	; (6658 <hci_encrypt_change+0xa0>)
	if (status) {
    65ee:	2208      	movhi	r2, #8
    65f0:	5d5a      	ldrbls	r2, [r3, r5]
		bt_conn_security_changed(conn, status,
    65f2:	4629      	mov	r1, r5
    65f4:	f002 fa1c 	bl	8a30 <bt_conn_security_changed>
	bt_conn_unref(conn);
    65f8:	4620      	mov	r0, r4
}
    65fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
    65fe:	f01a bc95 	b.w	20f2c <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    6602:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
    6604:	78f3      	ldrb	r3, [r6, #3]
    6606:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
    6608:	2a01      	cmp	r2, #1
    660a:	d108      	bne.n	661e <hci_encrypt_change+0x66>
		if (conn->encrypt) {
    660c:	b10b      	cbz	r3, 6612 <hci_encrypt_change+0x5a>
			bt_smp_update_keys(conn);
    660e:	f006 f9c3 	bl	c998 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
    6612:	4620      	mov	r0, r4
    6614:	f01a f8fd 	bl	20812 <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
    6618:	2800      	cmp	r0, #0
    661a:	bf08      	it	eq
    661c:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
    661e:	4b0e      	ldr	r3, [pc, #56]	; (6658 <hci_encrypt_change+0xa0>)
    6620:	4629      	mov	r1, r5
    6622:	5d5a      	ldrb	r2, [r3, r5]
    6624:	4620      	mov	r0, r4
    6626:	f002 fa03 	bl	8a30 <bt_conn_security_changed>
	if (status) {
    662a:	2d00      	cmp	r5, #0
    662c:	d0e4      	beq.n	65f8 <hci_encrypt_change+0x40>
    662e:	4b07      	ldr	r3, [pc, #28]	; (664c <hci_encrypt_change+0x94>)
    6630:	4907      	ldr	r1, [pc, #28]	; (6650 <hci_encrypt_change+0x98>)
		BT_ERR("Failed to set required security level");
    6632:	480a      	ldr	r0, [pc, #40]	; (665c <hci_encrypt_change+0xa4>)
    6634:	1ac9      	subs	r1, r1, r3
    6636:	08c9      	lsrs	r1, r1, #3
    6638:	0189      	lsls	r1, r1, #6
    663a:	f041 0101 	orr.w	r1, r1, #1
    663e:	f018 fa7b 	bl	1eb38 <log_0>
		bt_conn_disconnect(conn, status);
    6642:	4629      	mov	r1, r5
    6644:	4620      	mov	r0, r4
    6646:	f01a fcac 	bl	20fa2 <bt_conn_disconnect>
    664a:	e7d5      	b.n	65f8 <hci_encrypt_change+0x40>
    664c:	0002393c 	.word	0x0002393c
    6650:	00023a14 	.word	0x00023a14
    6654:	00025e9a 	.word	0x00025e9a
    6658:	00026481 	.word	0x00026481
    665c:	00025f06 	.word	0x00025f06

00006660 <hci_cmd_done>:
{
    6660:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6664:	4607      	mov	r7, r0
    6666:	b085      	sub	sp, #20
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    6668:	7990      	ldrb	r0, [r2, #6]
    666a:	4e43      	ldr	r6, [pc, #268]	; (6778 <hci_cmd_done+0x118>)
{
    666c:	4688      	mov	r8, r1
    666e:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    6670:	f013 fcc0 	bl	19ff4 <net_buf_pool_get>
    6674:	4286      	cmp	r6, r0
    6676:	d016      	beq.n	66a6 <hci_cmd_done+0x46>
    6678:	4b40      	ldr	r3, [pc, #256]	; (677c <hci_cmd_done+0x11c>)
    667a:	4d41      	ldr	r5, [pc, #260]	; (6780 <hci_cmd_done+0x120>)
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    667c:	79a0      	ldrb	r0, [r4, #6]
    667e:	9700      	str	r7, [sp, #0]
    6680:	1aed      	subs	r5, r5, r3
    6682:	08ed      	lsrs	r5, r5, #3
    6684:	9001      	str	r0, [sp, #4]
    6686:	f013 fcb5 	bl	19ff4 <net_buf_pool_get>
    668a:	01ad      	lsls	r5, r5, #6
    668c:	f045 0502 	orr.w	r5, r5, #2
    6690:	e9cd 0602 	strd	r0, r6, [sp, #8]
    6694:	462b      	mov	r3, r5
    6696:	483b      	ldr	r0, [pc, #236]	; (6784 <hci_cmd_done+0x124>)
    6698:	2204      	movs	r2, #4
    669a:	4669      	mov	r1, sp
    669c:	f018 faa2 	bl	1ebe4 <log_n>
}
    66a0:	b005      	add	sp, #20
    66a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
    66a6:	4620      	mov	r0, r4
    66a8:	f013 fcac 	bl	1a004 <net_buf_id>
    66ac:	4d36      	ldr	r5, [pc, #216]	; (6788 <hci_cmd_done+0x128>)
    66ae:	f04f 090c 	mov.w	r9, #12
    66b2:	fb09 5300 	mla	r3, r9, r0, r5
    66b6:	885b      	ldrh	r3, [r3, #2]
    66b8:	42bb      	cmp	r3, r7
    66ba:	d011      	beq.n	66e0 <hci_cmd_done+0x80>
    66bc:	4b2f      	ldr	r3, [pc, #188]	; (677c <hci_cmd_done+0x11c>)
    66be:	4e30      	ldr	r6, [pc, #192]	; (6780 <hci_cmd_done+0x120>)
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    66c0:	4620      	mov	r0, r4
    66c2:	1af6      	subs	r6, r6, r3
    66c4:	f013 fc9e 	bl	1a004 <net_buf_id>
    66c8:	08f6      	lsrs	r6, r6, #3
    66ca:	fb09 5000 	mla	r0, r9, r0, r5
    66ce:	01b6      	lsls	r6, r6, #6
    66d0:	f046 0602 	orr.w	r6, r6, #2
    66d4:	8842      	ldrh	r2, [r0, #2]
    66d6:	482d      	ldr	r0, [pc, #180]	; (678c <hci_cmd_done+0x12c>)
    66d8:	4633      	mov	r3, r6
    66da:	4639      	mov	r1, r7
    66dc:	f018 fa4d 	bl	1eb7a <log_2>
	if (cmd(buf)->state && !status) {
    66e0:	4620      	mov	r0, r4
    66e2:	f013 fc8f 	bl	1a004 <net_buf_id>
    66e6:	260c      	movs	r6, #12
    66e8:	fb06 5000 	mla	r0, r6, r0, r5
    66ec:	6843      	ldr	r3, [r0, #4]
    66ee:	b1f3      	cbz	r3, 672e <hci_cmd_done+0xce>
    66f0:	f1b8 0f00 	cmp.w	r8, #0
    66f4:	d11b      	bne.n	672e <hci_cmd_done+0xce>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    66f6:	4620      	mov	r0, r4
    66f8:	f013 fc84 	bl	1a004 <net_buf_id>
    66fc:	fb06 5000 	mla	r0, r6, r0, r5
	atomic_val_t mask = ATOMIC_MASK(bit);
    6700:	2201      	movs	r2, #1
    6702:	6840      	ldr	r0, [r0, #4]
    6704:	e9d0 3100 	ldrd	r3, r1, [r0]
	if (val) {
    6708:	7a00      	ldrb	r0, [r0, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
    670a:	f001 061f 	and.w	r6, r1, #31
    670e:	40b2      	lsls	r2, r6
	if (val) {
    6710:	0949      	lsrs	r1, r1, #5
    6712:	b320      	cbz	r0, 675e <hci_cmd_done+0xfe>
    6714:	f3bf 8f5b 	dmb	ish
    6718:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    671c:	e853 1f00 	ldrex	r1, [r3]
    6720:	4311      	orrs	r1, r2
    6722:	e843 1000 	strex	r0, r1, [r3]
    6726:	2800      	cmp	r0, #0
    6728:	d1f8      	bne.n	671c <hci_cmd_done+0xbc>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    672a:	f3bf 8f5b 	dmb	ish
	if (cmd(buf)->sync) {
    672e:	4620      	mov	r0, r4
    6730:	f013 fc68 	bl	1a004 <net_buf_id>
    6734:	260c      	movs	r6, #12
    6736:	fb06 5000 	mla	r0, r6, r0, r5
    673a:	6883      	ldr	r3, [r0, #8]
    673c:	2b00      	cmp	r3, #0
    673e:	d0af      	beq.n	66a0 <hci_cmd_done+0x40>
		cmd(buf)->status = status;
    6740:	4620      	mov	r0, r4
    6742:	f013 fc5f 	bl	1a004 <net_buf_id>
    6746:	4370      	muls	r0, r6
    6748:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    674c:	4620      	mov	r0, r4
    674e:	f013 fc59 	bl	1a004 <net_buf_id>
    6752:	fb06 5500 	mla	r5, r6, r0, r5
    6756:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
    6758:	f016 ffe0 	bl	1d71c <z_impl_k_sem_give>
}
    675c:	e7a0      	b.n	66a0 <hci_cmd_done+0x40>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    675e:	43d2      	mvns	r2, r2
    6760:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    6764:	f3bf 8f5b 	dmb	ish
    6768:	e853 1f00 	ldrex	r1, [r3]
    676c:	4011      	ands	r1, r2
    676e:	e843 1000 	strex	r0, r1, [r3]
    6772:	2800      	cmp	r0, #0
    6774:	d0d9      	beq.n	672a <hci_cmd_done+0xca>
    6776:	e7f7      	b.n	6768 <hci_cmd_done+0x108>
    6778:	20000958 	.word	0x20000958
    677c:	0002393c 	.word	0x0002393c
    6780:	00023a14 	.word	0x00023a14
    6784:	00025f2c 	.word	0x00025f2c
    6788:	200015ec 	.word	0x200015ec
    678c:	00025f61 	.word	0x00025f61

00006790 <handle_event>:
{
    6790:	b573      	push	{r0, r1, r4, r5, r6, lr}
    6792:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    6796:	4605      	mov	r5, r0
    6798:	4608      	mov	r0, r1
		if (handler->event != event) {
    679a:	7811      	ldrb	r1, [r2, #0]
    679c:	42a9      	cmp	r1, r5
    679e:	d01a      	beq.n	67d6 <handle_event+0x46>
	for (i = 0; i < num_handlers; i++) {
    67a0:	3208      	adds	r2, #8
    67a2:	429a      	cmp	r2, r3
    67a4:	d1f9      	bne.n	679a <handle_event+0xa>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
    67a6:	8986      	ldrh	r6, [r0, #12]
    67a8:	4b16      	ldr	r3, [pc, #88]	; (6804 <handle_event+0x74>)
    67aa:	4c17      	ldr	r4, [pc, #92]	; (6808 <handle_event+0x78>)
    67ac:	6880      	ldr	r0, [r0, #8]
    67ae:	4631      	mov	r1, r6
    67b0:	1ae4      	subs	r4, r4, r3
    67b2:	f7ff fb0d 	bl	5dd0 <bt_hex_real>
    67b6:	f7fd fa99 	bl	3cec <log_strdup>
    67ba:	08e4      	lsrs	r4, r4, #3
    67bc:	01a4      	lsls	r4, r4, #6
    67be:	f044 0402 	orr.w	r4, r4, #2
    67c2:	4603      	mov	r3, r0
    67c4:	f8ad 4000 	strh.w	r4, [sp]
    67c8:	4810      	ldr	r0, [pc, #64]	; (680c <handle_event+0x7c>)
    67ca:	4632      	mov	r2, r6
    67cc:	4629      	mov	r1, r5
    67ce:	f018 f9ed 	bl	1ebac <log_3>
}
    67d2:	b002      	add	sp, #8
    67d4:	bd70      	pop	{r4, r5, r6, pc}
		if (buf->len < handler->min_len) {
    67d6:	8981      	ldrh	r1, [r0, #12]
    67d8:	7853      	ldrb	r3, [r2, #1]
    67da:	428b      	cmp	r3, r1
    67dc:	d90d      	bls.n	67fa <handle_event+0x6a>
    67de:	4a09      	ldr	r2, [pc, #36]	; (6804 <handle_event+0x74>)
    67e0:	4b09      	ldr	r3, [pc, #36]	; (6808 <handle_event+0x78>)
			BT_ERR("Too small (%u bytes) event 0x%02x",
    67e2:	480b      	ldr	r0, [pc, #44]	; (6810 <handle_event+0x80>)
    67e4:	1a9b      	subs	r3, r3, r2
    67e6:	08db      	lsrs	r3, r3, #3
    67e8:	019b      	lsls	r3, r3, #6
    67ea:	f043 0301 	orr.w	r3, r3, #1
    67ee:	462a      	mov	r2, r5
}
    67f0:	b002      	add	sp, #8
    67f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
    67f6:	f018 b9c0 	b.w	1eb7a <log_2>
		handler->handler(buf);
    67fa:	6853      	ldr	r3, [r2, #4]
}
    67fc:	b002      	add	sp, #8
    67fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		handler->handler(buf);
    6802:	4718      	bx	r3
    6804:	0002393c 	.word	0x0002393c
    6808:	00023a14 	.word	0x00023a14
    680c:	00025fb6 	.word	0x00025fb6
    6810:	00025f94 	.word	0x00025f94

00006814 <hci_le_meta_event>:
{
    6814:	b510      	push	{r4, lr}
    6816:	2101      	movs	r1, #1
    6818:	4604      	mov	r4, r0
    681a:	3008      	adds	r0, #8
    681c:	f01b ff31 	bl	22682 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    6820:	4621      	mov	r1, r4
    6822:	4a03      	ldr	r2, [pc, #12]	; (6830 <hci_le_meta_event+0x1c>)
    6824:	7800      	ldrb	r0, [r0, #0]
}
    6826:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    682a:	230a      	movs	r3, #10
    682c:	f7ff bfb0 	b.w	6790 <handle_event>
    6830:	00023f68 	.word	0x00023f68

00006834 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    6834:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    6836:	4c0c      	ldr	r4, [pc, #48]	; (6868 <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    6838:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    683a:	2205      	movs	r2, #5
    683c:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    6840:	f002 fbda 	bl	8ff8 <bt_conn_lookup_state_le>
		if (!conn) {
    6844:	b970      	cbnz	r0, 6864 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
    6846:	4b09      	ldr	r3, [pc, #36]	; (686c <find_pending_connect.part.0+0x38>)
    6848:	6818      	ldr	r0, [r3, #0]
    684a:	889a      	ldrh	r2, [r3, #4]
    684c:	9000      	str	r0, [sp, #0]
    684e:	799b      	ldrb	r3, [r3, #6]
    6850:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    6854:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
						       BT_ADDR_LE_NONE,
    6858:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    685c:	2204      	movs	r2, #4
    685e:	4669      	mov	r1, sp
    6860:	f002 fbca 	bl	8ff8 <bt_conn_lookup_state_le>
}
    6864:	b002      	add	sp, #8
    6866:	bd10      	pop	{r4, pc}
    6868:	20000000 	.word	0x20000000
    686c:	00023ba0 	.word	0x00023ba0

00006870 <hci_num_completed_packets>:
{
    6870:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6874:	4d3a      	ldr	r5, [pc, #232]	; (6960 <hci_num_completed_packets+0xf0>)
    6876:	4b3b      	ldr	r3, [pc, #236]	; (6964 <hci_num_completed_packets+0xf4>)
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    6878:	f8d0 8008 	ldr.w	r8, [r0, #8]
	return k_work_submit_to_queue(&k_sys_work_q, work);
    687c:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 6970 <hci_num_completed_packets+0x100>
    6880:	1aed      	subs	r5, r5, r3
	for (i = 0; i < evt->num_handles; i++) {
    6882:	2600      	movs	r6, #0
    6884:	08ed      	lsrs	r5, r5, #3
			tx->pending_no_cb = 0U;
    6886:	46b1      	mov	r9, r6
	for (i = 0; i < evt->num_handles; i++) {
    6888:	f898 3000 	ldrb.w	r3, [r8]
    688c:	429e      	cmp	r6, r3
    688e:	db01      	blt.n	6894 <hci_num_completed_packets+0x24>
}
    6890:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    6894:	eb08 0386 	add.w	r3, r8, r6, lsl #2
    6898:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    689c:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
    68a0:	4658      	mov	r0, fp
    68a2:	f002 fa67 	bl	8d74 <bt_conn_lookup_handle>
		if (!conn) {
    68a6:	4604      	mov	r4, r0
    68a8:	b1d8      	cbz	r0, 68e2 <hci_num_completed_packets+0x72>
			k_work_submit(&conn->tx_complete_work);
    68aa:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
    68ae:	2f00      	cmp	r7, #0
    68b0:	d033      	beq.n	691a <hci_num_completed_packets+0xaa>
	__asm__ volatile(
    68b2:	f04f 0320 	mov.w	r3, #32
    68b6:	f3ef 8211 	mrs	r2, BASEPRI
    68ba:	f383 8811 	msr	BASEPRI, r3
    68be:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    68c2:	69e3      	ldr	r3, [r4, #28]
    68c4:	b1b3      	cbz	r3, 68f4 <hci_num_completed_packets+0x84>
				conn->pending_no_cb--;
    68c6:	3b01      	subs	r3, #1
    68c8:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    68ca:	f382 8811 	msr	BASEPRI, r2
    68ce:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    68d2:	4620      	mov	r0, r4
    68d4:	f002 f836 	bl	8944 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
    68d8:	3f01      	subs	r7, #1
    68da:	f016 ff1f 	bl	1d71c <z_impl_k_sem_give>
    68de:	b2bf      	uxth	r7, r7
    68e0:	e7e5      	b.n	68ae <hci_num_completed_packets+0x3e>
			BT_ERR("No connection for handle %u", handle);
    68e2:	01aa      	lsls	r2, r5, #6
    68e4:	4820      	ldr	r0, [pc, #128]	; (6968 <hci_num_completed_packets+0xf8>)
    68e6:	f042 0201 	orr.w	r2, r2, #1
    68ea:	4659      	mov	r1, fp
    68ec:	f018 f931 	bl	1eb52 <log_1>
	for (i = 0; i < evt->num_handles; i++) {
    68f0:	3601      	adds	r6, #1
    68f2:	e7c9      	b.n	6888 <hci_num_completed_packets+0x18>
Z_GENLIST_IS_EMPTY(slist)
    68f4:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    68f6:	b12b      	cbz	r3, 6904 <hci_num_completed_packets+0x94>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    68f8:	69a1      	ldr	r1, [r4, #24]
    68fa:	6818      	ldr	r0, [r3, #0]
	list->head = node;
    68fc:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    68fe:	428b      	cmp	r3, r1
	list->tail = node;
    6900:	bf08      	it	eq
    6902:	61a0      	streq	r0, [r4, #24]
    6904:	f382 8811 	msr	BASEPRI, r2
    6908:	f3bf 8f6f 	isb	sy
			if (!node) {
    690c:	b94b      	cbnz	r3, 6922 <hci_num_completed_packets+0xb2>
				BT_ERR("packets count mismatch");
    690e:	01a9      	lsls	r1, r5, #6
    6910:	4816      	ldr	r0, [pc, #88]	; (696c <hci_num_completed_packets+0xfc>)
    6912:	f041 0101 	orr.w	r1, r1, #1
    6916:	f018 f90f 	bl	1eb38 <log_0>
		bt_conn_unref(conn);
    691a:	4620      	mov	r0, r4
    691c:	f01a fb06 	bl	20f2c <bt_conn_unref>
    6920:	e7e6      	b.n	68f0 <hci_num_completed_packets+0x80>
	__asm__ volatile(
    6922:	f04f 0220 	mov.w	r2, #32
    6926:	f3ef 8111 	mrs	r1, BASEPRI
    692a:	f382 8811 	msr	BASEPRI, r2
    692e:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    6932:	68da      	ldr	r2, [r3, #12]
    6934:	61e2      	str	r2, [r4, #28]
	parent->next = child;
    6936:	f8c3 9000 	str.w	r9, [r3]
Z_GENLIST_APPEND(slist, snode)
    693a:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
    693c:	f8c3 900c 	str.w	r9, [r3, #12]
    6940:	b952      	cbnz	r2, 6958 <hci_num_completed_packets+0xe8>
	list->head = node;
    6942:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    6946:	f381 8811 	msr	BASEPRI, r1
    694a:	f3bf 8f6f 	isb	sy
    694e:	4659      	mov	r1, fp
    6950:	4650      	mov	r0, sl
    6952:	f01c fc4d 	bl	231f0 <k_work_submit_to_queue>
    6956:	e7bc      	b.n	68d2 <hci_num_completed_packets+0x62>
	parent->next = child;
    6958:	6013      	str	r3, [r2, #0]
	list->tail = node;
    695a:	6263      	str	r3, [r4, #36]	; 0x24
}
    695c:	e7f3      	b.n	6946 <hci_num_completed_packets+0xd6>
    695e:	bf00      	nop
    6960:	00023a14 	.word	0x00023a14
    6964:	0002393c 	.word	0x0002393c
    6968:	00025fd8 	.word	0x00025fd8
    696c:	00025ff4 	.word	0x00025ff4
    6970:	20001390 	.word	0x20001390

00006974 <hci_tx_thread>:
{
    6974:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6978:	4d51      	ldr	r5, [pc, #324]	; (6ac0 <hci_tx_thread+0x14c>)
    697a:	4b52      	ldr	r3, [pc, #328]	; (6ac4 <hci_tx_thread+0x150>)
		events[0].state = K_POLL_STATE_NOT_READY;
    697c:	f8df 914c 	ldr.w	r9, [pc, #332]	; 6acc <hci_tx_thread+0x158>
		BT_ASSERT(err == 0);
    6980:	f8df a174 	ldr.w	sl, [pc, #372]	; 6af8 <hci_tx_thread+0x184>
    6984:	1aed      	subs	r5, r5, r3
    6986:	08ed      	lsrs	r5, r5, #3
		events[0].state = K_POLL_STATE_NOT_READY;
    6988:	f8d9 300c 	ldr.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    698c:	484e      	ldr	r0, [pc, #312]	; (6ac8 <hci_tx_thread+0x154>)
		events[0].state = K_POLL_STATE_NOT_READY;
    698e:	f36f 3310 	bfc	r3, #12, #5
    6992:	f8c9 300c 	str.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    6996:	f002 f981 	bl	8c9c <bt_conn_prepare_events>
    699a:	1c47      	adds	r7, r0, #1
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    699c:	484b      	ldr	r0, [pc, #300]	; (6acc <hci_tx_thread+0x158>)
    699e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    69a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    69a6:	4639      	mov	r1, r7
    69a8:	f017 fb70 	bl	1e08c <z_impl_k_poll>
		BT_ASSERT(err == 0);
    69ac:	b160      	cbz	r0, 69c8 <hci_tx_thread+0x54>
    69ae:	4948      	ldr	r1, [pc, #288]	; (6ad0 <hci_tx_thread+0x15c>)
    69b0:	4848      	ldr	r0, [pc, #288]	; (6ad4 <hci_tx_thread+0x160>)
    69b2:	f640 1328 	movw	r3, #2344	; 0x928
    69b6:	4652      	mov	r2, sl
    69b8:	f017 fce4 	bl	1e384 <printk>
    69bc:	4040      	eors	r0, r0
    69be:	f380 8811 	msr	BASEPRI, r0
    69c2:	f04f 0003 	mov.w	r0, #3
    69c6:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    69c8:	4e43      	ldr	r6, [pc, #268]	; (6ad8 <hci_tx_thread+0x164>)
{
    69ca:	f8df 8100 	ldr.w	r8, [pc, #256]	; 6acc <hci_tx_thread+0x158>
    69ce:	f106 0bf0 	add.w	fp, r6, #240	; 0xf0
	for (; count; ev++, count--) {
    69d2:	b917      	cbnz	r7, 69da <hci_tx_thread+0x66>
	z_impl_k_yield();
    69d4:	f016 fdb4 	bl	1d540 <z_impl_k_yield>
	while (1) {
    69d8:	e7d6      	b.n	6988 <hci_tx_thread+0x14>
		switch (ev->state) {
    69da:	f8d8 100c 	ldr.w	r1, [r8, #12]
    69de:	f3c1 3104 	ubfx	r1, r1, #12, #5
    69e2:	2901      	cmp	r1, #1
    69e4:	d959      	bls.n	6a9a <hci_tx_thread+0x126>
    69e6:	2904      	cmp	r1, #4
    69e8:	d163      	bne.n	6ab2 <hci_tx_thread+0x13e>
			if (ev->tag == BT_EVENT_CMD_TX) {
    69ea:	f898 300c 	ldrb.w	r3, [r8, #12]
    69ee:	2b00      	cmp	r3, #0
    69f0:	d157      	bne.n	6aa2 <hci_tx_thread+0x12e>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    69f2:	483a      	ldr	r0, [pc, #232]	; (6adc <hci_tx_thread+0x168>)
    69f4:	2200      	movs	r2, #0
    69f6:	2300      	movs	r3, #0
    69f8:	f01b fdca 	bl	22590 <net_buf_get>
	BT_ASSERT(buf);
    69fc:	4604      	mov	r4, r0
    69fe:	b960      	cbnz	r0, 6a1a <hci_tx_thread+0xa6>
    6a00:	4937      	ldr	r1, [pc, #220]	; (6ae0 <hci_tx_thread+0x16c>)
    6a02:	4834      	ldr	r0, [pc, #208]	; (6ad4 <hci_tx_thread+0x160>)
    6a04:	f640 03c5 	movw	r3, #2245	; 0x8c5
    6a08:	4652      	mov	r2, sl
    6a0a:	f017 fcbb 	bl	1e384 <printk>
    6a0e:	4040      	eors	r0, r0
    6a10:	f380 8811 	msr	BASEPRI, r0
    6a14:	f04f 0003 	mov.w	r0, #3
    6a18:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    6a1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6a1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6a22:	4658      	mov	r0, fp
    6a24:	f016 fea0 	bl	1d768 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    6a28:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
    6a2c:	b163      	cbz	r3, 6a48 <hci_tx_thread+0xd4>
		BT_ERR("Uncleared pending sent_cmd");
    6a2e:	01a9      	lsls	r1, r5, #6
    6a30:	482c      	ldr	r0, [pc, #176]	; (6ae4 <hci_tx_thread+0x170>)
    6a32:	f041 0101 	orr.w	r1, r1, #1
    6a36:	f018 f87f 	bl	1eb38 <log_0>
		net_buf_unref(bt_dev.sent_cmd);
    6a3a:	f8d6 0108 	ldr.w	r0, [r6, #264]	; 0x108
    6a3e:	f013 fb95 	bl	1a16c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    6a42:	2300      	movs	r3, #0
    6a44:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
	bt_dev.sent_cmd = net_buf_ref(buf);
    6a48:	4620      	mov	r0, r4
    6a4a:	f01b fdcc 	bl	225e6 <net_buf_ref>
    6a4e:	f8c6 0108 	str.w	r0, [r6, #264]	; 0x108
	BT_DBG("buf %p len %u type %u", buf, buf->len, bt_buf_get_type(buf));

	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
    6a52:	4620      	mov	r0, r4
    6a54:	f7ff fb56 	bl	6104 <bt_hci_ecc_send>
	if (err) {
    6a58:	4601      	mov	r1, r0
    6a5a:	b1f0      	cbz	r0, 6a9a <hci_tx_thread+0x126>
		BT_ERR("Unable to send to driver (err %d)", err);
    6a5c:	01aa      	lsls	r2, r5, #6
    6a5e:	4822      	ldr	r0, [pc, #136]	; (6ae8 <hci_tx_thread+0x174>)
    6a60:	f042 0201 	orr.w	r2, r2, #1
    6a64:	f018 f875 	bl	1eb52 <log_1>
	z_impl_k_sem_give(sem);
    6a68:	4820      	ldr	r0, [pc, #128]	; (6aec <hci_tx_thread+0x178>)
    6a6a:	f016 fe57 	bl	1d71c <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    6a6e:	4620      	mov	r0, r4
    6a70:	f013 fac8 	bl	1a004 <net_buf_id>
    6a74:	4b1e      	ldr	r3, [pc, #120]	; (6af0 <hci_tx_thread+0x17c>)
    6a76:	220c      	movs	r2, #12
    6a78:	fb02 3000 	mla	r0, r2, r0, r3
    6a7c:	211f      	movs	r1, #31
    6a7e:	8840      	ldrh	r0, [r0, #2]
    6a80:	4622      	mov	r2, r4
    6a82:	f7ff fded 	bl	6660 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    6a86:	f8d6 0108 	ldr.w	r0, [r6, #264]	; 0x108
    6a8a:	f013 fb6f 	bl	1a16c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    6a8e:	2300      	movs	r3, #0
		net_buf_unref(buf);
    6a90:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
    6a92:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
		net_buf_unref(buf);
    6a96:	f013 fb69 	bl	1a16c <net_buf_unref>
	for (; count; ev++, count--) {
    6a9a:	f108 0814 	add.w	r8, r8, #20
    6a9e:	3f01      	subs	r7, #1
    6aa0:	e797      	b.n	69d2 <hci_tx_thread+0x5e>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    6aa2:	2b01      	cmp	r3, #1
    6aa4:	d1f9      	bne.n	6a9a <hci_tx_thread+0x126>
					conn = CONTAINER_OF(ev->fifo,
    6aa6:	f8d8 0010 	ldr.w	r0, [r8, #16]
					bt_conn_process_tx(conn);
    6aaa:	3838      	subs	r0, #56	; 0x38
    6aac:	f002 fba6 	bl	91fc <bt_conn_process_tx>
    6ab0:	e7f3      	b.n	6a9a <hci_tx_thread+0x126>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    6ab2:	01aa      	lsls	r2, r5, #6
    6ab4:	480f      	ldr	r0, [pc, #60]	; (6af4 <hci_tx_thread+0x180>)
    6ab6:	f042 0202 	orr.w	r2, r2, #2
    6aba:	f018 f84a 	bl	1eb52 <log_1>
    6abe:	e7ec      	b.n	6a9a <hci_tx_thread+0x126>
    6ac0:	00023a14 	.word	0x00023a14
    6ac4:	0002393c 	.word	0x0002393c
    6ac8:	200001ec 	.word	0x200001ec
    6acc:	200001d8 	.word	0x200001d8
    6ad0:	0002603f 	.word	0x0002603f
    6ad4:	00026048 	.word	0x00026048
    6ad8:	20000000 	.word	0x20000000
    6adc:	2000010c 	.word	0x2000010c
    6ae0:	00025d57 	.word	0x00025d57
    6ae4:	00026065 	.word	0x00026065
    6ae8:	00026080 	.word	0x00026080
    6aec:	200000f0 	.word	0x200000f0
    6af0:	200015ec 	.word	0x200015ec
    6af4:	000260a2 	.word	0x000260a2
    6af8:	0002600b 	.word	0x0002600b

00006afc <le_conn_update_complete>:
{
    6afc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    6afe:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    6b00:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    6b04:	4630      	mov	r0, r6
    6b06:	f002 f935 	bl	8d74 <bt_conn_lookup_handle>
	if (!conn) {
    6b0a:	4604      	mov	r4, r0
    6b0c:	b960      	cbnz	r0, 6b28 <le_conn_update_complete+0x2c>
    6b0e:	4a22      	ldr	r2, [pc, #136]	; (6b98 <le_conn_update_complete+0x9c>)
    6b10:	4b22      	ldr	r3, [pc, #136]	; (6b9c <le_conn_update_complete+0xa0>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    6b12:	4823      	ldr	r0, [pc, #140]	; (6ba0 <le_conn_update_complete+0xa4>)
    6b14:	1ad2      	subs	r2, r2, r3
    6b16:	08d2      	lsrs	r2, r2, #3
    6b18:	0192      	lsls	r2, r2, #6
    6b1a:	f042 0201 	orr.w	r2, r2, #1
    6b1e:	4631      	mov	r1, r6
    6b20:	f018 f817 	bl	1eb52 <log_1>
}
    6b24:	b002      	add	sp, #8
    6b26:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
    6b28:	782b      	ldrb	r3, [r5, #0]
    6b2a:	b9bb      	cbnz	r3, 6b5c <le_conn_update_complete+0x60>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    6b2c:	792a      	ldrb	r2, [r5, #4]
    6b2e:	78eb      	ldrb	r3, [r5, #3]
    6b30:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    6b34:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    6b38:	79aa      	ldrb	r2, [r5, #6]
    6b3a:	796b      	ldrb	r3, [r5, #5]
    6b3c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    6b40:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    6b44:	79eb      	ldrb	r3, [r5, #7]
    6b46:	7a2a      	ldrb	r2, [r5, #8]
    6b48:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    6b4c:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
    6b50:	f001 fefc 	bl	894c <notify_le_param_updated>
	bt_conn_unref(conn);
    6b54:	4620      	mov	r0, r4
    6b56:	f01a f9e9 	bl	20f2c <bt_conn_unref>
    6b5a:	e7e3      	b.n	6b24 <le_conn_update_complete+0x28>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    6b5c:	2b1a      	cmp	r3, #26
    6b5e:	d1f9      	bne.n	6b54 <le_conn_update_complete+0x58>
    6b60:	78c3      	ldrb	r3, [r0, #3]
    6b62:	2b01      	cmp	r3, #1
    6b64:	d1f6      	bne.n	6b54 <le_conn_update_complete+0x58>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6b66:	f3bf 8f5b 	dmb	ish
    6b6a:	1d03      	adds	r3, r0, #4
    6b6c:	e853 2f00 	ldrex	r2, [r3]
    6b70:	f442 6180 	orr.w	r1, r2, #1024	; 0x400
    6b74:	e843 1500 	strex	r5, r1, [r3]
    6b78:	2d00      	cmp	r5, #0
    6b7a:	d1f7      	bne.n	6b6c <le_conn_update_complete+0x70>
    6b7c:	f3bf 8f5b 	dmb	ish
		   conn->role == BT_HCI_ROLE_SLAVE &&
    6b80:	0553      	lsls	r3, r2, #21
    6b82:	d4e7      	bmi.n	6b54 <le_conn_update_complete+0x58>
		param.interval_min = conn->le.interval_min;
    6b84:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    6b88:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
    6b8a:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
    6b8c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
    6b90:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
    6b92:	f002 fd51 	bl	9638 <bt_l2cap_update_conn_param>
    6b96:	e7dd      	b.n	6b54 <le_conn_update_complete+0x58>
    6b98:	00023a14 	.word	0x00023a14
    6b9c:	0002393c 	.word	0x0002393c
    6ba0:	00025e76 	.word	0x00025e76

00006ba4 <hci_cmd_status>:
{
    6ba4:	b538      	push	{r3, r4, r5, lr}
    6ba6:	2104      	movs	r1, #4
    6ba8:	4604      	mov	r4, r0
    6baa:	3008      	adds	r0, #8
    6bac:	f01b fd69 	bl	22682 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    6bb0:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    6bb2:	7801      	ldrb	r1, [r0, #0]
    6bb4:	8840      	ldrh	r0, [r0, #2]
    6bb6:	4622      	mov	r2, r4
    6bb8:	f7ff fd52 	bl	6660 <hci_cmd_done>
	if (ncmd) {
    6bbc:	b125      	cbz	r5, 6bc8 <hci_cmd_status+0x24>
    6bbe:	4803      	ldr	r0, [pc, #12]	; (6bcc <hci_cmd_status+0x28>)
}
    6bc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6bc4:	f016 bdaa 	b.w	1d71c <z_impl_k_sem_give>
    6bc8:	bd38      	pop	{r3, r4, r5, pc}
    6bca:	bf00      	nop
    6bcc:	200000f0 	.word	0x200000f0

00006bd0 <hci_cmd_complete>:
{
    6bd0:	b538      	push	{r3, r4, r5, lr}
    6bd2:	2103      	movs	r1, #3
    6bd4:	4604      	mov	r4, r0
    6bd6:	3008      	adds	r0, #8
    6bd8:	f01b fd53 	bl	22682 <net_buf_simple_pull_mem>
	status = buf->data[0];
    6bdc:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    6bde:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    6be0:	7819      	ldrb	r1, [r3, #0]
    6be2:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    6be6:	4622      	mov	r2, r4
    6be8:	f7ff fd3a 	bl	6660 <hci_cmd_done>
	if (ncmd) {
    6bec:	b125      	cbz	r5, 6bf8 <hci_cmd_complete+0x28>
    6bee:	4803      	ldr	r0, [pc, #12]	; (6bfc <hci_cmd_complete+0x2c>)
}
    6bf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6bf4:	f016 bd92 	b.w	1d71c <z_impl_k_sem_give>
    6bf8:	bd38      	pop	{r3, r4, r5, pc}
    6bfa:	bf00      	nop
    6bfc:	200000f0 	.word	0x200000f0

00006c00 <bt_hci_cmd_state_set_init>:
{
    6c00:	b510      	push	{r4, lr}
	state->bit = bit;
    6c02:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
    6c06:	f89d 3008 	ldrb.w	r3, [sp, #8]
    6c0a:	720b      	strb	r3, [r1, #8]
{
    6c0c:	460c      	mov	r4, r1
	cmd(buf)->state = state;
    6c0e:	f013 f9f9 	bl	1a004 <net_buf_id>
    6c12:	4b03      	ldr	r3, [pc, #12]	; (6c20 <bt_hci_cmd_state_set_init+0x20>)
    6c14:	220c      	movs	r2, #12
    6c16:	fb02 3000 	mla	r0, r2, r0, r3
    6c1a:	6044      	str	r4, [r0, #4]
}
    6c1c:	bd10      	pop	{r4, pc}
    6c1e:	bf00      	nop
    6c20:	200015ec 	.word	0x200015ec

00006c24 <bt_hci_cmd_create>:
{
    6c24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return net_buf_alloc_fixed(pool, timeout);
    6c28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6c2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6c30:	4605      	mov	r5, r0
    6c32:	4816      	ldr	r0, [pc, #88]	; (6c8c <bt_hci_cmd_create+0x68>)
	cmd(buf)->opcode = opcode;
    6c34:	f8df 8058 	ldr.w	r8, [pc, #88]	; 6c90 <bt_hci_cmd_create+0x6c>
{
    6c38:	460e      	mov	r6, r1
    6c3a:	f01b fca4 	bl	22586 <net_buf_alloc_fixed>
    6c3e:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
    6c40:	f100 0b08 	add.w	fp, r0, #8
    6c44:	2100      	movs	r1, #0
    6c46:	2700      	movs	r7, #0
    6c48:	4658      	mov	r0, fp
    6c4a:	f01b fcbb 	bl	225c4 <net_buf_simple_reserve>
    6c4e:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
    6c50:	4620      	mov	r0, r4
    6c52:	f013 f9d7 	bl	1a004 <net_buf_id>
    6c56:	f04f 0a0c 	mov.w	sl, #12
    6c5a:	fb0a 8000 	mla	r0, sl, r0, r8
    6c5e:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
    6c60:	4620      	mov	r0, r4
    6c62:	f013 f9cf 	bl	1a004 <net_buf_id>
    6c66:	fb0a 8000 	mla	r0, sl, r0, r8
    6c6a:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
    6c6c:	4620      	mov	r0, r4
    6c6e:	f013 f9c9 	bl	1a004 <net_buf_id>
    6c72:	fb0a 8000 	mla	r0, sl, r0, r8
	return net_buf_simple_add(&buf->b, len);
    6c76:	2103      	movs	r1, #3
    6c78:	6047      	str	r7, [r0, #4]
    6c7a:	4658      	mov	r0, fp
    6c7c:	f01b fcd9 	bl	22632 <net_buf_simple_add>
	hdr->param_len = param_len;
    6c80:	7086      	strb	r6, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    6c82:	8005      	strh	r5, [r0, #0]
}
    6c84:	4620      	mov	r0, r4
    6c86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6c8a:	bf00      	nop
    6c8c:	20000958 	.word	0x20000958
    6c90:	200015ec 	.word	0x200015ec

00006c94 <bt_hci_cmd_send>:
{
    6c94:	b538      	push	{r3, r4, r5, lr}
    6c96:	4605      	mov	r5, r0
	if (!buf) {
    6c98:	460c      	mov	r4, r1
    6c9a:	b919      	cbnz	r1, 6ca4 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    6c9c:	f7ff ffc2 	bl	6c24 <bt_hci_cmd_create>
		if (!buf) {
    6ca0:	4604      	mov	r4, r0
    6ca2:	b1f0      	cbz	r0, 6ce2 <bt_hci_cmd_send+0x4e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    6ca4:	f640 4335 	movw	r3, #3125	; 0xc35
    6ca8:	429d      	cmp	r5, r3
    6caa:	d114      	bne.n	6cd6 <bt_hci_cmd_send+0x42>
		return bt_hci_ecc_send(buf);
    6cac:	4620      	mov	r0, r4
    6cae:	f7ff fa29 	bl	6104 <bt_hci_ecc_send>
		if (err) {
    6cb2:	4605      	mov	r5, r0
    6cb4:	b168      	cbz	r0, 6cd2 <bt_hci_cmd_send+0x3e>
    6cb6:	4b0c      	ldr	r3, [pc, #48]	; (6ce8 <bt_hci_cmd_send+0x54>)
    6cb8:	4a0c      	ldr	r2, [pc, #48]	; (6cec <bt_hci_cmd_send+0x58>)
    6cba:	1ad2      	subs	r2, r2, r3
    6cbc:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Unable to send to driver (err %d)", err);
    6cbe:	0192      	lsls	r2, r2, #6
    6cc0:	4601      	mov	r1, r0
    6cc2:	f042 0201 	orr.w	r2, r2, #1
    6cc6:	480a      	ldr	r0, [pc, #40]	; (6cf0 <bt_hci_cmd_send+0x5c>)
    6cc8:	f017 ff43 	bl	1eb52 <log_1>
			net_buf_unref(buf);
    6ccc:	4620      	mov	r0, r4
    6cce:	f013 fa4d 	bl	1a16c <net_buf_unref>
}
    6cd2:	4628      	mov	r0, r5
    6cd4:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    6cd6:	4807      	ldr	r0, [pc, #28]	; (6cf4 <bt_hci_cmd_send+0x60>)
    6cd8:	4621      	mov	r1, r4
    6cda:	f01b fc77 	bl	225cc <net_buf_put>
	return 0;
    6cde:	2500      	movs	r5, #0
    6ce0:	e7f7      	b.n	6cd2 <bt_hci_cmd_send+0x3e>
			return -ENOBUFS;
    6ce2:	f06f 0568 	mvn.w	r5, #104	; 0x68
    6ce6:	e7f4      	b.n	6cd2 <bt_hci_cmd_send+0x3e>
    6ce8:	0002393c 	.word	0x0002393c
    6cec:	00023a14 	.word	0x00023a14
    6cf0:	00026080 	.word	0x00026080
    6cf4:	2000010c 	.word	0x2000010c

00006cf8 <le_ltk_request>:
{
    6cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
    6cfa:	6886      	ldr	r6, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    6cfc:	8837      	ldrh	r7, [r6, #0]
    6cfe:	b2bd      	uxth	r5, r7
{
    6d00:	b087      	sub	sp, #28
	conn = bt_conn_lookup_handle(handle);
    6d02:	4628      	mov	r0, r5
    6d04:	f002 f836 	bl	8d74 <bt_conn_lookup_handle>
	if (!conn) {
    6d08:	4604      	mov	r4, r0
    6d0a:	b960      	cbnz	r0, 6d26 <le_ltk_request+0x2e>
    6d0c:	4a2a      	ldr	r2, [pc, #168]	; (6db8 <le_ltk_request+0xc0>)
    6d0e:	4b2b      	ldr	r3, [pc, #172]	; (6dbc <le_ltk_request+0xc4>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    6d10:	482b      	ldr	r0, [pc, #172]	; (6dc0 <le_ltk_request+0xc8>)
    6d12:	1ad2      	subs	r2, r2, r3
    6d14:	08d2      	lsrs	r2, r2, #3
    6d16:	0192      	lsls	r2, r2, #6
    6d18:	f042 0201 	orr.w	r2, r2, #1
    6d1c:	4629      	mov	r1, r5
    6d1e:	f017 ff18 	bl	1eb52 <log_1>
}
    6d22:	b007      	add	sp, #28
    6d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
    6d26:	ad02      	add	r5, sp, #8
    6d28:	f8d6 2002 	ldr.w	r2, [r6, #2]
    6d2c:	f8d6 3006 	ldr.w	r3, [r6, #6]
    6d30:	9501      	str	r5, [sp, #4]
    6d32:	8971      	ldrh	r1, [r6, #10]
    6d34:	9100      	str	r1, [sp, #0]
    6d36:	f01b fa93 	bl	22260 <bt_smp_request_ltk>
    6d3a:	b360      	cbz	r0, 6d96 <le_ltk_request+0x9e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    6d3c:	2112      	movs	r1, #18
    6d3e:	f242 001a 	movw	r0, #8218	; 0x201a
    6d42:	f7ff ff6f 	bl	6c24 <bt_hci_cmd_create>
	if (!buf) {
    6d46:	4606      	mov	r6, r0
    6d48:	b968      	cbnz	r0, 6d66 <le_ltk_request+0x6e>
    6d4a:	491b      	ldr	r1, [pc, #108]	; (6db8 <le_ltk_request+0xc0>)
    6d4c:	4b1b      	ldr	r3, [pc, #108]	; (6dbc <le_ltk_request+0xc4>)
		BT_ERR("Out of command buffers");
    6d4e:	481d      	ldr	r0, [pc, #116]	; (6dc4 <le_ltk_request+0xcc>)
    6d50:	1ac9      	subs	r1, r1, r3
    6d52:	08c9      	lsrs	r1, r1, #3
    6d54:	0189      	lsls	r1, r1, #6
    6d56:	f041 0101 	orr.w	r1, r1, #1
    6d5a:	f017 feed 	bl	1eb38 <log_0>
	bt_conn_unref(conn);
    6d5e:	4620      	mov	r0, r4
    6d60:	f01a f8e4 	bl	20f2c <bt_conn_unref>
    6d64:	e7dd      	b.n	6d22 <le_ltk_request+0x2a>
    6d66:	2112      	movs	r1, #18
    6d68:	3008      	adds	r0, #8
    6d6a:	f01b fc62 	bl	22632 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
    6d6e:	4603      	mov	r3, r0
    6d70:	462a      	mov	r2, r5
    6d72:	f823 7b02 	strh.w	r7, [r3], #2
    6d76:	af06      	add	r7, sp, #24
    6d78:	4615      	mov	r5, r2
    6d7a:	cd03      	ldmia	r5!, {r0, r1}
    6d7c:	42bd      	cmp	r5, r7
    6d7e:	6018      	str	r0, [r3, #0]
    6d80:	6059      	str	r1, [r3, #4]
    6d82:	462a      	mov	r2, r5
    6d84:	f103 0308 	add.w	r3, r3, #8
    6d88:	d1f6      	bne.n	6d78 <le_ltk_request+0x80>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    6d8a:	4631      	mov	r1, r6
    6d8c:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    6d90:	f7ff ff80 	bl	6c94 <bt_hci_cmd_send>
    6d94:	e7e3      	b.n	6d5e <le_ltk_request+0x66>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    6d96:	2102      	movs	r1, #2
    6d98:	f242 001b 	movw	r0, #8219	; 0x201b
    6d9c:	f7ff ff42 	bl	6c24 <bt_hci_cmd_create>
	if (!buf) {
    6da0:	4605      	mov	r5, r0
    6da2:	2800      	cmp	r0, #0
    6da4:	d0d1      	beq.n	6d4a <le_ltk_request+0x52>
    6da6:	2102      	movs	r1, #2
    6da8:	3008      	adds	r0, #8
    6daa:	f01b fc42 	bl	22632 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    6dae:	4629      	mov	r1, r5
	cp->handle = sys_cpu_to_le16(handle);
    6db0:	8007      	strh	r7, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    6db2:	f242 001b 	movw	r0, #8219	; 0x201b
    6db6:	e7eb      	b.n	6d90 <le_ltk_request+0x98>
    6db8:	00023a14 	.word	0x00023a14
    6dbc:	0002393c 	.word	0x0002393c
    6dc0:	00025e76 	.word	0x00025e76
    6dc4:	000260c3 	.word	0x000260c3

00006dc8 <le_conn_param_neg_reply>:
{
    6dc8:	b570      	push	{r4, r5, r6, lr}
    6dca:	4606      	mov	r6, r0
    6dcc:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    6dce:	f242 0021 	movw	r0, #8225	; 0x2021
    6dd2:	2103      	movs	r1, #3
    6dd4:	f7ff ff26 	bl	6c24 <bt_hci_cmd_create>
	if (!buf) {
    6dd8:	4604      	mov	r4, r0
    6dda:	b958      	cbnz	r0, 6df4 <le_conn_param_neg_reply+0x2c>
    6ddc:	490c      	ldr	r1, [pc, #48]	; (6e10 <le_conn_param_neg_reply+0x48>)
    6dde:	4b0d      	ldr	r3, [pc, #52]	; (6e14 <le_conn_param_neg_reply+0x4c>)
		BT_ERR("Unable to allocate buffer");
    6de0:	480d      	ldr	r0, [pc, #52]	; (6e18 <le_conn_param_neg_reply+0x50>)
    6de2:	1ac9      	subs	r1, r1, r3
    6de4:	08c9      	lsrs	r1, r1, #3
    6de6:	0189      	lsls	r1, r1, #6
}
    6de8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
    6dec:	f041 0101 	orr.w	r1, r1, #1
    6df0:	f017 bea2 	b.w	1eb38 <log_0>
    6df4:	2103      	movs	r1, #3
    6df6:	3008      	adds	r0, #8
    6df8:	f01b fc1b 	bl	22632 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    6dfc:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    6dfe:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    6e00:	4621      	mov	r1, r4
    6e02:	f242 0021 	movw	r0, #8225	; 0x2021
}
    6e06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    6e0a:	f7ff bf43 	b.w	6c94 <bt_hci_cmd_send>
    6e0e:	bf00      	nop
    6e10:	00023a14 	.word	0x00023a14
    6e14:	0002393c 	.word	0x0002393c
    6e18:	000260da 	.word	0x000260da

00006e1c <le_conn_param_req>:
{
    6e1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    6e1e:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    6e20:	78d9      	ldrb	r1, [r3, #3]
    6e22:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    6e24:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    6e26:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    6e2a:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    6e2e:	7959      	ldrb	r1, [r3, #5]
    6e30:	791a      	ldrb	r2, [r3, #4]
    6e32:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    6e36:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    6e3a:	799a      	ldrb	r2, [r3, #6]
    6e3c:	79d9      	ldrb	r1, [r3, #7]
    6e3e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    6e42:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    6e46:	7a1a      	ldrb	r2, [r3, #8]
    6e48:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    6e4a:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
    6e4c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    6e50:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
    6e52:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    6e56:	f001 ff8d 	bl	8d74 <bt_conn_lookup_handle>
	if (!conn) {
    6e5a:	4606      	mov	r6, r0
    6e5c:	b980      	cbnz	r0, 6e80 <le_conn_param_req+0x64>
    6e5e:	4b20      	ldr	r3, [pc, #128]	; (6ee0 <le_conn_param_req+0xc4>)
    6e60:	4a20      	ldr	r2, [pc, #128]	; (6ee4 <le_conn_param_req+0xc8>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    6e62:	4821      	ldr	r0, [pc, #132]	; (6ee8 <le_conn_param_req+0xcc>)
    6e64:	1ad2      	subs	r2, r2, r3
    6e66:	08d2      	lsrs	r2, r2, #3
    6e68:	0192      	lsls	r2, r2, #6
    6e6a:	4621      	mov	r1, r4
    6e6c:	f042 0201 	orr.w	r2, r2, #1
    6e70:	f017 fe6f 	bl	1eb52 <log_1>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    6e74:	2102      	movs	r1, #2
    6e76:	4620      	mov	r0, r4
    6e78:	f7ff ffa6 	bl	6dc8 <le_conn_param_neg_reply>
}
    6e7c:	b003      	add	sp, #12
    6e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
    6e80:	4669      	mov	r1, sp
    6e82:	f001 fd9b 	bl	89bc <le_param_req>
    6e86:	b938      	cbnz	r0, 6e98 <le_conn_param_req+0x7c>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    6e88:	211e      	movs	r1, #30
    6e8a:	4620      	mov	r0, r4
    6e8c:	f7ff ff9c 	bl	6dc8 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    6e90:	4630      	mov	r0, r6
    6e92:	f01a f84b 	bl	20f2c <bt_conn_unref>
    6e96:	e7f1      	b.n	6e7c <le_conn_param_req+0x60>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    6e98:	210e      	movs	r1, #14
    6e9a:	f242 0020 	movw	r0, #8224	; 0x2020
    6e9e:	f7ff fec1 	bl	6c24 <bt_hci_cmd_create>
	if (!buf) {
    6ea2:	4605      	mov	r5, r0
    6ea4:	2800      	cmp	r0, #0
    6ea6:	d0f3      	beq.n	6e90 <le_conn_param_req+0x74>
    6ea8:	210e      	movs	r1, #14
    6eaa:	3008      	adds	r0, #8
    6eac:	f01b fbc1 	bl	22632 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
    6eb0:	220e      	movs	r2, #14
    6eb2:	4604      	mov	r4, r0
    6eb4:	2100      	movs	r1, #0
    6eb6:	f01c fbe2 	bl	2367e <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    6eba:	f8bd 3000 	ldrh.w	r3, [sp]
    6ebe:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    6ec0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    6ec4:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    6ec6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    6eca:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    6ecc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
    6ed0:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    6ed2:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    6ed4:	4629      	mov	r1, r5
    6ed6:	f242 0020 	movw	r0, #8224	; 0x2020
    6eda:	f7ff fedb 	bl	6c94 <bt_hci_cmd_send>
    6ede:	e7d7      	b.n	6e90 <le_conn_param_req+0x74>
    6ee0:	0002393c 	.word	0x0002393c
    6ee4:	00023a14 	.word	0x00023a14
    6ee8:	00025e76 	.word	0x00025e76

00006eec <bt_hci_cmd_send_sync>:
{
    6eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6ef0:	4607      	mov	r7, r0
    6ef2:	b086      	sub	sp, #24
    6ef4:	4615      	mov	r5, r2
	if (!buf) {
    6ef6:	460c      	mov	r4, r1
    6ef8:	b921      	cbnz	r1, 6f04 <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
    6efa:	f7ff fe93 	bl	6c24 <bt_hci_cmd_create>
		if (!buf) {
    6efe:	4604      	mov	r4, r0
    6f00:	2800      	cmp	r0, #0
    6f02:	d055      	beq.n	6fb0 <bt_hci_cmd_send_sync+0xc4>
	return z_impl_k_sem_init(sem, initial_count, limit);
    6f04:	2201      	movs	r2, #1
    6f06:	2100      	movs	r1, #0
    6f08:	4668      	mov	r0, sp
    6f0a:	f01c f8e0 	bl	230ce <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    6f0e:	4620      	mov	r0, r4
    6f10:	f013 f878 	bl	1a004 <net_buf_id>
    6f14:	4e28      	ldr	r6, [pc, #160]	; (6fb8 <bt_hci_cmd_send_sync+0xcc>)
    6f16:	230c      	movs	r3, #12
    6f18:	fb03 6000 	mla	r0, r3, r0, r6
    6f1c:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
    6f20:	4620      	mov	r0, r4
    6f22:	f01b fb60 	bl	225e6 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    6f26:	4825      	ldr	r0, [pc, #148]	; (6fbc <bt_hci_cmd_send_sync+0xd0>)
    6f28:	4621      	mov	r1, r4
    6f2a:	f01b fb4f 	bl	225cc <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    6f2e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    6f32:	2300      	movs	r3, #0
    6f34:	4668      	mov	r0, sp
    6f36:	f016 fc17 	bl	1d768 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    6f3a:	4680      	mov	r8, r0
    6f3c:	b180      	cbz	r0, 6f60 <bt_hci_cmd_send_sync+0x74>
    6f3e:	4a20      	ldr	r2, [pc, #128]	; (6fc0 <bt_hci_cmd_send_sync+0xd4>)
    6f40:	4920      	ldr	r1, [pc, #128]	; (6fc4 <bt_hci_cmd_send_sync+0xd8>)
    6f42:	4821      	ldr	r0, [pc, #132]	; (6fc8 <bt_hci_cmd_send_sync+0xdc>)
    6f44:	f240 1337 	movw	r3, #311	; 0x137
    6f48:	f017 fa1c 	bl	1e384 <printk>
    6f4c:	481f      	ldr	r0, [pc, #124]	; (6fcc <bt_hci_cmd_send_sync+0xe0>)
    6f4e:	4641      	mov	r1, r8
    6f50:	f017 fa18 	bl	1e384 <printk>
    6f54:	4040      	eors	r0, r0
    6f56:	f380 8811 	msr	BASEPRI, r0
    6f5a:	f04f 0003 	mov.w	r0, #3
    6f5e:	df02      	svc	2
	status = cmd(buf)->status;
    6f60:	4620      	mov	r0, r4
    6f62:	f013 f84f 	bl	1a004 <net_buf_id>
    6f66:	230c      	movs	r3, #12
    6f68:	4343      	muls	r3, r0
    6f6a:	5cf6      	ldrb	r6, [r6, r3]
	if (status) {
    6f6c:	b1be      	cbz	r6, 6f9e <bt_hci_cmd_send_sync+0xb2>
    6f6e:	4a18      	ldr	r2, [pc, #96]	; (6fd0 <bt_hci_cmd_send_sync+0xe4>)
    6f70:	4b18      	ldr	r3, [pc, #96]	; (6fd4 <bt_hci_cmd_send_sync+0xe8>)
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
    6f72:	4819      	ldr	r0, [pc, #100]	; (6fd8 <bt_hci_cmd_send_sync+0xec>)
    6f74:	1a9b      	subs	r3, r3, r2
    6f76:	08db      	lsrs	r3, r3, #3
    6f78:	019b      	lsls	r3, r3, #6
    6f7a:	f043 0302 	orr.w	r3, r3, #2
    6f7e:	4632      	mov	r2, r6
    6f80:	4639      	mov	r1, r7
    6f82:	f017 fdfa 	bl	1eb7a <log_2>
		net_buf_unref(buf);
    6f86:	4620      	mov	r0, r4
    6f88:	f013 f8f0 	bl	1a16c <net_buf_unref>
			return -EIO;
    6f8c:	2e09      	cmp	r6, #9
    6f8e:	bf0c      	ite	eq
    6f90:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
    6f94:	f06f 0004 	mvnne.w	r0, #4
}
    6f98:	b006      	add	sp, #24
    6f9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
    6f9e:	b115      	cbz	r5, 6fa6 <bt_hci_cmd_send_sync+0xba>
		*rsp = buf;
    6fa0:	602c      	str	r4, [r5, #0]
	return 0;
    6fa2:	4630      	mov	r0, r6
    6fa4:	e7f8      	b.n	6f98 <bt_hci_cmd_send_sync+0xac>
		net_buf_unref(buf);
    6fa6:	4620      	mov	r0, r4
    6fa8:	f013 f8e0 	bl	1a16c <net_buf_unref>
	return 0;
    6fac:	4628      	mov	r0, r5
    6fae:	e7f3      	b.n	6f98 <bt_hci_cmd_send_sync+0xac>
			return -ENOBUFS;
    6fb0:	f06f 0068 	mvn.w	r0, #104	; 0x68
    6fb4:	e7f0      	b.n	6f98 <bt_hci_cmd_send_sync+0xac>
    6fb6:	bf00      	nop
    6fb8:	200015ec 	.word	0x200015ec
    6fbc:	2000010c 	.word	0x2000010c
    6fc0:	0002600b 	.word	0x0002600b
    6fc4:	0002603f 	.word	0x0002603f
    6fc8:	00026048 	.word	0x00026048
    6fcc:	000260f4 	.word	0x000260f4
    6fd0:	0002393c 	.word	0x0002393c
    6fd4:	00023a14 	.word	0x00023a14
    6fd8:	00026114 	.word	0x00026114

00006fdc <hci_le_read_max_data_len>:
{
    6fdc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    6fde:	4606      	mov	r6, r0
    6fe0:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    6fe2:	aa01      	add	r2, sp, #4
    6fe4:	2100      	movs	r1, #0
    6fe6:	f242 002f 	movw	r0, #8239	; 0x202f
    6fea:	f7ff ff7f 	bl	6eec <bt_hci_cmd_send_sync>
	if (err) {
    6fee:	4604      	mov	r4, r0
    6ff0:	b160      	cbz	r0, 700c <hci_le_read_max_data_len+0x30>
    6ff2:	490c      	ldr	r1, [pc, #48]	; (7024 <hci_le_read_max_data_len+0x48>)
    6ff4:	4b0c      	ldr	r3, [pc, #48]	; (7028 <hci_le_read_max_data_len+0x4c>)
		BT_ERR("Failed to read DLE max data len");
    6ff6:	480d      	ldr	r0, [pc, #52]	; (702c <hci_le_read_max_data_len+0x50>)
    6ff8:	1ac9      	subs	r1, r1, r3
    6ffa:	08c9      	lsrs	r1, r1, #3
    6ffc:	0189      	lsls	r1, r1, #6
    6ffe:	f041 0101 	orr.w	r1, r1, #1
    7002:	f017 fd99 	bl	1eb38 <log_0>
}
    7006:	4620      	mov	r0, r4
    7008:	b002      	add	sp, #8
    700a:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    700c:	9801      	ldr	r0, [sp, #4]
    700e:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    7010:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    7014:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
    7016:	f8b3 3003 	ldrh.w	r3, [r3, #3]
    701a:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
    701c:	f013 f8a6 	bl	1a16c <net_buf_unref>
	return 0;
    7020:	e7f1      	b.n	7006 <hci_le_read_max_data_len+0x2a>
    7022:	bf00      	nop
    7024:	00023a14 	.word	0x00023a14
    7028:	0002393c 	.word	0x0002393c
    702c:	00026130 	.word	0x00026130

00007030 <conn_auto_initiate>:
{
    7030:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    7032:	7b43      	ldrb	r3, [r0, #13]
    7034:	2b07      	cmp	r3, #7
{
    7036:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    7038:	d121      	bne.n	707e <conn_auto_initiate+0x4e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    703a:	f3bf 8f5b 	dmb	ish
    703e:	6843      	ldr	r3, [r0, #4]
    7040:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    7044:	049b      	lsls	r3, r3, #18
    7046:	f100 0604 	add.w	r6, r0, #4
    704a:	d41a      	bmi.n	7082 <conn_auto_initiate+0x52>
    704c:	78c3      	ldrb	r3, [r0, #3]
    704e:	b123      	cbz	r3, 705a <conn_auto_initiate+0x2a>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
    7050:	4b35      	ldr	r3, [pc, #212]	; (7128 <conn_auto_initiate+0xf8>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
    7052:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
    7056:	071d      	lsls	r5, r3, #28
    7058:	d513      	bpl.n	7082 <conn_auto_initiate+0x52>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    705a:	2102      	movs	r1, #2
    705c:	f242 0016 	movw	r0, #8214	; 0x2016
    7060:	f7ff fde0 	bl	6c24 <bt_hci_cmd_create>
	if (!buf) {
    7064:	4605      	mov	r5, r0
    7066:	b160      	cbz	r0, 7082 <conn_auto_initiate+0x52>
    7068:	2102      	movs	r1, #2
    706a:	3008      	adds	r0, #8
    706c:	f01b fae1 	bl	22632 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    7070:	8823      	ldrh	r3, [r4, #0]
    7072:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    7074:	4629      	mov	r1, r5
    7076:	f242 0016 	movw	r0, #8214	; 0x2016
    707a:	f7ff fe0b 	bl	6c94 <bt_hci_cmd_send>
}
    707e:	b004      	add	sp, #16
    7080:	bd70      	pop	{r4, r5, r6, pc}
    7082:	f3bf 8f5b 	dmb	ish
    7086:	6863      	ldr	r3, [r4, #4]
    7088:	4d27      	ldr	r5, [pc, #156]	; (7128 <conn_auto_initiate+0xf8>)
    708a:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    708e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    7092:	f3c3 3100 	ubfx	r1, r3, #12, #1
    7096:	d122      	bne.n	70de <conn_auto_initiate+0xae>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
    7098:	f895 30a1 	ldrb.w	r3, [r5, #161]	; 0xa1
    709c:	07d8      	lsls	r0, r3, #31
    709e:	d51e      	bpl.n	70de <conn_auto_initiate+0xae>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
    70a0:	2302      	movs	r3, #2
    70a2:	9100      	str	r1, [sp, #0]
    70a4:	461a      	mov	r2, r3
    70a6:	4620      	mov	r0, r4
    70a8:	f019 fc1f 	bl	208ea <bt_le_set_phy>
		if (!err) {
    70ac:	4601      	mov	r1, r0
    70ae:	b960      	cbnz	r0, 70ca <conn_auto_initiate+0x9a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    70b0:	f3bf 8f5b 	dmb	ish
    70b4:	e856 3f00 	ldrex	r3, [r6]
    70b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    70bc:	e846 3200 	strex	r2, r3, [r6]
    70c0:	2a00      	cmp	r2, #0
    70c2:	d1f7      	bne.n	70b4 <conn_auto_initiate+0x84>
    70c4:	f3bf 8f5b 	dmb	ish
			return;
    70c8:	e7d9      	b.n	707e <conn_auto_initiate+0x4e>
    70ca:	4a18      	ldr	r2, [pc, #96]	; (712c <conn_auto_initiate+0xfc>)
    70cc:	4b18      	ldr	r3, [pc, #96]	; (7130 <conn_auto_initiate+0x100>)
		BT_ERR("Failed to set LE PHY (%d)", err);
    70ce:	4819      	ldr	r0, [pc, #100]	; (7134 <conn_auto_initiate+0x104>)
    70d0:	1ad2      	subs	r2, r2, r3
    70d2:	08d2      	lsrs	r2, r2, #3
    70d4:	0192      	lsls	r2, r2, #6
    70d6:	f042 0201 	orr.w	r2, r2, #1
    70da:	f017 fd3a 	bl	1eb52 <log_1>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    70de:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
    70e2:	069a      	lsls	r2, r3, #26
    70e4:	d5cb      	bpl.n	707e <conn_auto_initiate+0x4e>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
    70e6:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    70ea:	689b      	ldr	r3, [r3, #8]
    70ec:	079b      	lsls	r3, r3, #30
    70ee:	d5c6      	bpl.n	707e <conn_auto_initiate+0x4e>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    70f0:	f10d 010e 	add.w	r1, sp, #14
    70f4:	a803      	add	r0, sp, #12
    70f6:	f7ff ff71 	bl	6fdc <hci_le_read_max_data_len>
			if (!err) {
    70fa:	2800      	cmp	r0, #0
    70fc:	d1bf      	bne.n	707e <conn_auto_initiate+0x4e>
				err = bt_le_set_data_len(conn,
    70fe:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    7102:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7106:	4620      	mov	r0, r4
    7108:	f019 fbd2 	bl	208b0 <bt_le_set_data_len>
				if (err) {
    710c:	4601      	mov	r1, r0
    710e:	2800      	cmp	r0, #0
    7110:	d0b5      	beq.n	707e <conn_auto_initiate+0x4e>
    7112:	4b07      	ldr	r3, [pc, #28]	; (7130 <conn_auto_initiate+0x100>)
    7114:	4a05      	ldr	r2, [pc, #20]	; (712c <conn_auto_initiate+0xfc>)
					BT_ERR("Failed to set data len (%d)", err);
    7116:	4808      	ldr	r0, [pc, #32]	; (7138 <conn_auto_initiate+0x108>)
    7118:	1ad2      	subs	r2, r2, r3
    711a:	08d2      	lsrs	r2, r2, #3
    711c:	0192      	lsls	r2, r2, #6
    711e:	f042 0201 	orr.w	r2, r2, #1
    7122:	f017 fd16 	bl	1eb52 <log_1>
		}
    7126:	e7aa      	b.n	707e <conn_auto_initiate+0x4e>
    7128:	20000000 	.word	0x20000000
    712c:	00023a14 	.word	0x00023a14
    7130:	0002393c 	.word	0x0002393c
    7134:	00026248 	.word	0x00026248
    7138:	00026262 	.word	0x00026262

0000713c <le_phy_update_complete>:
{
    713c:	b538      	push	{r3, r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    713e:	6883      	ldr	r3, [r0, #8]
    7140:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    7144:	4628      	mov	r0, r5
    7146:	f001 fe15 	bl	8d74 <bt_conn_lookup_handle>
	if (!conn) {
    714a:	4604      	mov	r4, r0
    714c:	b960      	cbnz	r0, 7168 <le_phy_update_complete+0x2c>
    714e:	4b17      	ldr	r3, [pc, #92]	; (71ac <le_phy_update_complete+0x70>)
    7150:	4a17      	ldr	r2, [pc, #92]	; (71b0 <le_phy_update_complete+0x74>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    7152:	4818      	ldr	r0, [pc, #96]	; (71b4 <le_phy_update_complete+0x78>)
    7154:	1ad2      	subs	r2, r2, r3
    7156:	08d2      	lsrs	r2, r2, #3
    7158:	0192      	lsls	r2, r2, #6
    715a:	4629      	mov	r1, r5
    715c:	f042 0201 	orr.w	r2, r2, #1
}
    7160:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    7164:	f017 bcf5 	b.w	1eb52 <log_1>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    7168:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    716a:	f3bf 8f5b 	dmb	ish
    716e:	e853 2f00 	ldrex	r2, [r3]
    7172:	f022 0180 	bic.w	r1, r2, #128	; 0x80
    7176:	e843 1500 	strex	r5, r1, [r3]
    717a:	2d00      	cmp	r5, #0
    717c:	d1f7      	bne.n	716e <le_phy_update_complete+0x32>
    717e:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    7182:	0612      	lsls	r2, r2, #24
    7184:	d50d      	bpl.n	71a2 <le_phy_update_complete+0x66>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7186:	f3bf 8f5b 	dmb	ish
    718a:	e853 2f00 	ldrex	r2, [r3]
    718e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    7192:	e843 2100 	strex	r1, r2, [r3]
    7196:	2900      	cmp	r1, #0
    7198:	d1f7      	bne.n	718a <le_phy_update_complete+0x4e>
    719a:	f3bf 8f5b 	dmb	ish
		conn_auto_initiate(conn);
    719e:	f7ff ff47 	bl	7030 <conn_auto_initiate>
	bt_conn_unref(conn);
    71a2:	4620      	mov	r0, r4
}
    71a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    71a8:	f019 bec0 	b.w	20f2c <bt_conn_unref>
    71ac:	0002393c 	.word	0x0002393c
    71b0:	00023a14 	.word	0x00023a14
    71b4:	00025e76 	.word	0x00025e76

000071b8 <le_remote_feat_complete>:
{
    71b8:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    71ba:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    71bc:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    71c0:	4630      	mov	r0, r6
    71c2:	f001 fdd7 	bl	8d74 <bt_conn_lookup_handle>
	if (!conn) {
    71c6:	4604      	mov	r4, r0
    71c8:	b960      	cbnz	r0, 71e4 <le_remote_feat_complete+0x2c>
    71ca:	4a15      	ldr	r2, [pc, #84]	; (7220 <le_remote_feat_complete+0x68>)
    71cc:	4b15      	ldr	r3, [pc, #84]	; (7224 <le_remote_feat_complete+0x6c>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    71ce:	4816      	ldr	r0, [pc, #88]	; (7228 <le_remote_feat_complete+0x70>)
    71d0:	1ad2      	subs	r2, r2, r3
    71d2:	08d2      	lsrs	r2, r2, #3
    71d4:	0192      	lsls	r2, r2, #6
    71d6:	4631      	mov	r1, r6
    71d8:	f042 0201 	orr.w	r2, r2, #1
}
    71dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    71e0:	f017 bcb7 	b.w	1eb52 <log_1>
	if (!evt->status) {
    71e4:	782b      	ldrb	r3, [r5, #0]
    71e6:	b933      	cbnz	r3, 71f6 <le_remote_feat_complete+0x3e>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    71e8:	f855 3f03 	ldr.w	r3, [r5, #3]!
    71ec:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
    71f0:	686b      	ldr	r3, [r5, #4]
    71f2:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
    71f6:	1d23      	adds	r3, r4, #4
    71f8:	f3bf 8f5b 	dmb	ish
    71fc:	e853 2f00 	ldrex	r2, [r3]
    7200:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    7204:	e843 2100 	strex	r1, r2, [r3]
    7208:	2900      	cmp	r1, #0
    720a:	d1f7      	bne.n	71fc <le_remote_feat_complete+0x44>
    720c:	f3bf 8f5b 	dmb	ish
	conn_auto_initiate(conn);
    7210:	4620      	mov	r0, r4
    7212:	f7ff ff0d 	bl	7030 <conn_auto_initiate>
	bt_conn_unref(conn);
    7216:	4620      	mov	r0, r4
}
    7218:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    721c:	f019 be86 	b.w	20f2c <bt_conn_unref>
    7220:	00023a14 	.word	0x00023a14
    7224:	0002393c 	.word	0x0002393c
    7228:	00025e76 	.word	0x00025e76

0000722c <enh_conn_complete>:
{
    722c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    7230:	4604      	mov	r4, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    7232:	f8b0 8001 	ldrh.w	r8, [r0, #1]
	bt_id_pending_keys_update();
    7236:	f000 fb97 	bl	7968 <bt_id_pending_keys_update>
	if (evt->status) {
    723a:	7825      	ldrb	r5, [r4, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    723c:	fa1f f788 	uxth.w	r7, r8
	if (evt->status) {
    7240:	b3b5      	cbz	r5, 72b0 <enh_conn_complete+0x84>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    7242:	2d3c      	cmp	r5, #60	; 0x3c
    7244:	d128      	bne.n	7298 <enh_conn_complete+0x6c>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    7246:	f000 ffe9 	bl	821c <bt_le_adv_lookup_legacy>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    724a:	f3bf 8f5b 	dmb	ish
    724e:	3010      	adds	r0, #16
    7250:	e850 3f00 	ldrex	r3, [r0]
    7254:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    7258:	e840 3200 	strex	r2, r3, [r0]
    725c:	2a00      	cmp	r2, #0
    725e:	d1f7      	bne.n	7250 <enh_conn_complete+0x24>
    7260:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    7264:	2000      	movs	r0, #0
    7266:	f7ff fae5 	bl	6834 <find_pending_connect.part.0>
		if (!conn) {
    726a:	4604      	mov	r4, r0
    726c:	b960      	cbnz	r0, 7288 <enh_conn_complete+0x5c>
    726e:	495e      	ldr	r1, [pc, #376]	; (73e8 <enh_conn_complete+0x1bc>)
    7270:	4b5e      	ldr	r3, [pc, #376]	; (73ec <enh_conn_complete+0x1c0>)
			BT_ERR("No pending slave connection");
    7272:	485f      	ldr	r0, [pc, #380]	; (73f0 <enh_conn_complete+0x1c4>)
    7274:	1ac9      	subs	r1, r1, r3
    7276:	08c9      	lsrs	r1, r1, #3
    7278:	0189      	lsls	r1, r1, #6
    727a:	f041 0101 	orr.w	r1, r1, #1
    727e:	f017 fc5b 	bl	1eb38 <log_0>
}
    7282:	b004      	add	sp, #16
    7284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
    7288:	7305      	strb	r5, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    728a:	2100      	movs	r1, #0
    728c:	f001 fd7e 	bl	8d8c <bt_conn_set_state>
		bt_conn_unref(conn);
    7290:	4620      	mov	r0, r4
	bt_conn_unref(conn);
    7292:	f019 fe4b 	bl	20f2c <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    7296:	e7f4      	b.n	7282 <enh_conn_complete+0x56>
    7298:	4b54      	ldr	r3, [pc, #336]	; (73ec <enh_conn_complete+0x1c0>)
    729a:	4a53      	ldr	r2, [pc, #332]	; (73e8 <enh_conn_complete+0x1bc>)
		BT_WARN("Unexpected status 0x%02x", evt->status);
    729c:	4855      	ldr	r0, [pc, #340]	; (73f4 <enh_conn_complete+0x1c8>)
    729e:	1ad2      	subs	r2, r2, r3
    72a0:	08d2      	lsrs	r2, r2, #3
    72a2:	0192      	lsls	r2, r2, #6
    72a4:	f042 0202 	orr.w	r2, r2, #2
    72a8:	4629      	mov	r1, r5
    72aa:	f017 fc52 	bl	1eb52 <log_1>
		return;
    72ae:	e7e8      	b.n	7282 <enh_conn_complete+0x56>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    72b0:	7923      	ldrb	r3, [r4, #4]
    72b2:	3b02      	subs	r3, #2
    72b4:	2b01      	cmp	r3, #1
    72b6:	f104 0604 	add.w	r6, r4, #4
    72ba:	d841      	bhi.n	7340 <enh_conn_complete+0x114>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    72bc:	4631      	mov	r1, r6
    72be:	a802      	add	r0, sp, #8
    72c0:	f019 fac4 	bl	2084c <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    72c4:	f89d 3008 	ldrb.w	r3, [sp, #8]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    72c8:	f104 0111 	add.w	r1, r4, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    72cc:	3b02      	subs	r3, #2
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    72ce:	f10d 0001 	add.w	r0, sp, #1
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    72d2:	f88d 3008 	strb.w	r3, [sp, #8]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    72d6:	f019 fab4 	bl	20842 <bt_addr_copy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    72da:	2301      	movs	r3, #1
    72dc:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    72e0:	78e3      	ldrb	r3, [r4, #3]
    72e2:	2b01      	cmp	r3, #1
    72e4:	d116      	bne.n	7314 <enh_conn_complete+0xe8>
    72e6:	a802      	add	r0, sp, #8
    72e8:	f7ff faa4 	bl	6834 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    72ec:	78e3      	ldrb	r3, [r4, #3]
    72ee:	2b01      	cmp	r3, #1
    72f0:	4605      	mov	r5, r0
    72f2:	d10e      	bne.n	7312 <enh_conn_complete+0xe6>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    72f4:	f000 ff92 	bl	821c <bt_le_adv_lookup_legacy>
    72f8:	f3bf 8f5b 	dmb	ish
    72fc:	3010      	adds	r0, #16
    72fe:	e850 3f00 	ldrex	r3, [r0]
    7302:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    7306:	e840 3200 	strex	r2, r3, [r0]
    730a:	2a00      	cmp	r2, #0
    730c:	d1f7      	bne.n	72fe <enh_conn_complete+0xd2>
    730e:	f3bf 8f5b 	dmb	ish
	if (!conn) {
    7312:	bb45      	cbnz	r5, 7366 <enh_conn_complete+0x13a>
    7314:	4a35      	ldr	r2, [pc, #212]	; (73ec <enh_conn_complete+0x1c0>)
    7316:	4c34      	ldr	r4, [pc, #208]	; (73e8 <enh_conn_complete+0x1bc>)
		BT_ERR("No pending conn for peer %s",
    7318:	4630      	mov	r0, r6
    731a:	1aa4      	subs	r4, r4, r2
    731c:	f7fe fd7a 	bl	5e14 <bt_addr_le_str_real>
    7320:	f7fc fce4 	bl	3cec <log_strdup>
    7324:	08e4      	lsrs	r4, r4, #3
    7326:	01a4      	lsls	r4, r4, #6
    7328:	f044 0401 	orr.w	r4, r4, #1
    732c:	4601      	mov	r1, r0
    732e:	4622      	mov	r2, r4
    7330:	4831      	ldr	r0, [pc, #196]	; (73f8 <enh_conn_complete+0x1cc>)
    7332:	f017 fc0e 	bl	1eb52 <log_1>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
    7336:	211f      	movs	r1, #31
    7338:	4638      	mov	r0, r7
    733a:	f019 fa9e 	bl	2087a <bt_hci_disconnect>
		return;
    733e:	e7a0      	b.n	7282 <enh_conn_complete+0x56>
		uint8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
    7340:	78e3      	ldrb	r3, [r4, #3]
    7342:	2b01      	cmp	r3, #1
    7344:	bf04      	itt	eq
    7346:	4b2d      	ldreq	r3, [pc, #180]	; (73fc <enh_conn_complete+0x1d0>)
    7348:	f893 5033 	ldrbeq.w	r5, [r3, #51]	; 0x33
		bt_addr_le_copy(&id_addr,
    734c:	4631      	mov	r1, r6
    734e:	4628      	mov	r0, r5
    7350:	f019 fc15 	bl	20b7e <bt_lookup_id_addr>
    7354:	4601      	mov	r1, r0
    7356:	a802      	add	r0, sp, #8
    7358:	f019 fa78 	bl	2084c <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    735c:	4631      	mov	r1, r6
    735e:	4668      	mov	r0, sp
    7360:	f019 fa74 	bl	2084c <bt_addr_le_copy>
    7364:	e7bc      	b.n	72e0 <enh_conn_complete+0xb4>
	conn->handle = handle;
    7366:	4628      	mov	r0, r5
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    7368:	a902      	add	r1, sp, #8
	conn->handle = handle;
    736a:	f820 8b88 	strh.w	r8, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    736e:	f019 fa6d 	bl	2084c <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    7372:	7e22      	ldrb	r2, [r4, #24]
    7374:	7de3      	ldrb	r3, [r4, #23]
    7376:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    737a:	f8a5 309e 	strh.w	r3, [r5, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    737e:	7ea2      	ldrb	r2, [r4, #26]
    7380:	7e63      	ldrb	r3, [r4, #25]
    7382:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    7386:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    738a:	7ee3      	ldrb	r3, [r4, #27]
    738c:	7f22      	ldrb	r2, [r4, #28]
    738e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    7392:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
	conn->role = evt->role;
    7396:	78e3      	ldrb	r3, [r4, #3]
    7398:	70eb      	strb	r3, [r5, #3]
	conn->err = 0U;
    739a:	2400      	movs	r4, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    739c:	2b01      	cmp	r3, #1
	conn->err = 0U;
    739e:	732c      	strb	r4, [r5, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    73a0:	d118      	bne.n	73d4 <enh_conn_complete+0x1a8>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    73a2:	4669      	mov	r1, sp
    73a4:	f105 008f 	add.w	r0, r5, #143	; 0x8f
    73a8:	f019 fa50 	bl	2084c <bt_addr_le_copy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    73ac:	f000 ff36 	bl	821c <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
    73b0:	7a29      	ldrb	r1, [r5, #8]
    73b2:	4a12      	ldr	r2, [pc, #72]	; (73fc <enh_conn_complete+0x1d0>)
    73b4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
    73b8:	4411      	add	r1, r2
    73ba:	f105 0096 	add.w	r0, r5, #150	; 0x96
    73be:	f019 fa45 	bl	2084c <bt_addr_le_copy>
		if (BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    73c2:	f8d2 10ac 	ldr.w	r1, [r2, #172]	; 0xac
    73c6:	4622      	mov	r2, r4
    73c8:	f001 0340 	and.w	r3, r1, #64	; 0x40
    73cc:	4313      	orrs	r3, r2
    73ce:	d001      	beq.n	73d4 <enh_conn_complete+0x1a8>
			bt_le_adv_resume();
    73d0:	f001 f856 	bl	8480 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    73d4:	2107      	movs	r1, #7
    73d6:	4628      	mov	r0, r5
    73d8:	f001 fcd8 	bl	8d8c <bt_conn_set_state>
	conn_auto_initiate(conn);
    73dc:	4628      	mov	r0, r5
    73de:	f7ff fe27 	bl	7030 <conn_auto_initiate>
	bt_conn_unref(conn);
    73e2:	4628      	mov	r0, r5
    73e4:	e755      	b.n	7292 <enh_conn_complete+0x66>
    73e6:	bf00      	nop
    73e8:	00023a14 	.word	0x00023a14
    73ec:	0002393c 	.word	0x0002393c
    73f0:	0002627e 	.word	0x0002627e
    73f4:	0002629a 	.word	0x0002629a
    73f8:	000262b3 	.word	0x000262b3
    73fc:	20000000 	.word	0x20000000

00007400 <bt_security_err_get>:
	switch (hci_err) {
    7400:	2829      	cmp	r0, #41	; 0x29
    7402:	bf9a      	itte	ls
    7404:	4b01      	ldrls	r3, [pc, #4]	; (740c <bt_security_err_get+0xc>)
    7406:	5c18      	ldrbls	r0, [r3, r0]
{
    7408:	2008      	movhi	r0, #8
}
    740a:	4770      	bx	lr
    740c:	00026481 	.word	0x00026481

00007410 <hci_event_prio>:

#endif /* CONFIG_BT_CONN */
};

void hci_event_prio(struct net_buf *buf)
{
    7410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7414:	4604      	mov	r4, r0
	struct net_buf_simple_state state;
	struct bt_hci_evt_hdr *hdr;
	uint8_t evt_flags;

	net_buf_simple_save(&buf->b, &state);
    7416:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
    741a:	4630      	mov	r0, r6
    741c:	f01b f941 	bl	226a2 <net_buf_simple_headroom>
	state->len = buf->len;
    7420:	f8b4 800c 	ldrh.w	r8, [r4, #12]

	BT_ASSERT(buf->len >= sizeof(*hdr));
    7424:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
    7428:	4605      	mov	r5, r0
    742a:	d80c      	bhi.n	7446 <hci_event_prio+0x36>
    742c:	4a1c      	ldr	r2, [pc, #112]	; (74a0 <hci_event_prio+0x90>)
    742e:	491d      	ldr	r1, [pc, #116]	; (74a4 <hci_event_prio+0x94>)
    7430:	481d      	ldr	r0, [pc, #116]	; (74a8 <hci_event_prio+0x98>)
    7432:	f640 438f 	movw	r3, #3215	; 0xc8f
    7436:	f016 ffa5 	bl	1e384 <printk>
    743a:	4040      	eors	r0, r0
    743c:	f380 8811 	msr	BASEPRI, r0
    7440:	f04f 0003 	mov.w	r0, #3
    7444:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    7446:	2102      	movs	r1, #2
    7448:	4630      	mov	r0, r6
    744a:	f01b f91a 	bl	22682 <net_buf_simple_pull_mem>
    744e:	4607      	mov	r7, r0

	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    7450:	7800      	ldrb	r0, [r0, #0]
    7452:	f019 f9cc 	bl	207ee <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    7456:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    7458:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    745a:	d40c      	bmi.n	7476 <hci_event_prio+0x66>
    745c:	4a10      	ldr	r2, [pc, #64]	; (74a0 <hci_event_prio+0x90>)
    745e:	4913      	ldr	r1, [pc, #76]	; (74ac <hci_event_prio+0x9c>)
    7460:	4811      	ldr	r0, [pc, #68]	; (74a8 <hci_event_prio+0x98>)
    7462:	f640 4393 	movw	r3, #3219	; 0xc93
    7466:	f016 ff8d 	bl	1e384 <printk>
    746a:	4040      	eors	r0, r0
    746c:	f380 8811 	msr	BASEPRI, r0
    7470:	f04f 0003 	mov.w	r0, #3
    7474:	df02      	svc	2

	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    7476:	2305      	movs	r3, #5
    7478:	4a0d      	ldr	r2, [pc, #52]	; (74b0 <hci_event_prio+0xa0>)
    747a:	7838      	ldrb	r0, [r7, #0]
    747c:	4621      	mov	r1, r4
    747e:	f7ff f987 	bl	6790 <handle_event>

	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    7482:	07b3      	lsls	r3, r6, #30
    7484:	d507      	bpl.n	7496 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
    7486:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    7488:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    748c:	fa10 f585 	uxtah	r5, r0, r5
    7490:	60a5      	str	r5, [r4, #8]
		net_buf_simple_restore(&buf->b, &state);
	} else {
		net_buf_unref(buf);
	}
}
    7492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    7496:	4620      	mov	r0, r4
}
    7498:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    749c:	f012 be66 	b.w	1a16c <net_buf_unref>
    74a0:	0002600b 	.word	0x0002600b
    74a4:	000262cf 	.word	0x000262cf
    74a8:	00026048 	.word	0x00026048
    74ac:	000262e8 	.word	0x000262e8
    74b0:	00024018 	.word	0x00024018

000074b4 <bt_recv>:

int bt_recv(struct net_buf *buf)
{
    74b4:	b570      	push	{r4, r5, r6, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    74b6:	7d01      	ldrb	r1, [r0, #20]
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_DBG("buf %p len %u", buf, buf->len);

	switch (bt_buf_get_type(buf)) {
    74b8:	2901      	cmp	r1, #1
{
    74ba:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    74bc:	d04b      	beq.n	7556 <bt_recv+0xa2>
    74be:	2903      	cmp	r1, #3
    74c0:	d178      	bne.n	75b4 <bt_recv+0x100>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    74c2:	8983      	ldrh	r3, [r0, #12]
    74c4:	2b03      	cmp	r3, #3
    74c6:	d80c      	bhi.n	74e2 <bt_recv+0x2e>
    74c8:	4a42      	ldr	r2, [pc, #264]	; (75d4 <bt_recv+0x120>)
    74ca:	4943      	ldr	r1, [pc, #268]	; (75d8 <bt_recv+0x124>)
    74cc:	4843      	ldr	r0, [pc, #268]	; (75dc <bt_recv+0x128>)
    74ce:	f240 137d 	movw	r3, #381	; 0x17d
    74d2:	f016 ff57 	bl	1e384 <printk>
    74d6:	4040      	eors	r0, r0
    74d8:	f380 8811 	msr	BASEPRI, r0
    74dc:	f04f 0003 	mov.w	r0, #3
    74e0:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    74e2:	2104      	movs	r1, #4
    74e4:	f104 0008 	add.w	r0, r4, #8
    74e8:	f01b f8cb 	bl	22682 <net_buf_simple_pull_mem>
	if (buf->len != len) {
    74ec:	89a1      	ldrh	r1, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
    74ee:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    74f0:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    74f2:	23ff      	movs	r3, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
    74f4:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    74f8:	428a      	cmp	r2, r1
	acl(buf)->handle = bt_acl_handle(handle);
    74fa:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    74fc:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
    74fe:	d00d      	beq.n	751c <bt_recv+0x68>
    7500:	4837      	ldr	r0, [pc, #220]	; (75e0 <bt_recv+0x12c>)
    7502:	4b38      	ldr	r3, [pc, #224]	; (75e4 <bt_recv+0x130>)
    7504:	1a1b      	subs	r3, r3, r0
    7506:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    7508:	019b      	lsls	r3, r3, #6
    750a:	4837      	ldr	r0, [pc, #220]	; (75e8 <bt_recv+0x134>)
    750c:	f043 0301 	orr.w	r3, r3, #1
    7510:	f017 fb33 	bl	1eb7a <log_2>
	net_buf_unref(buf);
    7514:	4620      	mov	r0, r4
    7516:	f012 fe29 	bl	1a16c <net_buf_unref>
    751a:	e01a      	b.n	7552 <bt_recv+0x9e>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    751c:	f001 fc2a 	bl	8d74 <bt_conn_lookup_handle>
	if (!conn) {
    7520:	4605      	mov	r5, r0
    7522:	b958      	cbnz	r0, 753c <bt_recv+0x88>
    7524:	4b2e      	ldr	r3, [pc, #184]	; (75e0 <bt_recv+0x12c>)
    7526:	4a2f      	ldr	r2, [pc, #188]	; (75e4 <bt_recv+0x130>)
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    7528:	8ae1      	ldrh	r1, [r4, #22]
    752a:	4830      	ldr	r0, [pc, #192]	; (75ec <bt_recv+0x138>)
    752c:	1ad2      	subs	r2, r2, r3
    752e:	08d2      	lsrs	r2, r2, #3
    7530:	0192      	lsls	r2, r2, #6
    7532:	f042 0201 	orr.w	r2, r2, #1
    7536:	f017 fb0c 	bl	1eb52 <log_1>
		net_buf_unref(buf);
    753a:	e7eb      	b.n	7514 <bt_recv+0x60>
	acl(buf)->index = bt_conn_index(conn);
    753c:	f001 fee2 	bl	9304 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    7540:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
    7542:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    7544:	4621      	mov	r1, r4
    7546:	4628      	mov	r0, r5
    7548:	f001 fab2 	bl	8ab0 <bt_conn_recv>
	bt_conn_unref(conn);
    754c:	4628      	mov	r0, r5
    754e:	f019 fced 	bl	20f2c <bt_conn_unref>

		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
			net_buf_put(&bt_dev.rx_queue, buf);
		}
#endif
		return 0;
    7552:	2000      	movs	r0, #0
	default:
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
		return -EINVAL;
	}
}
    7554:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    7556:	8983      	ldrh	r3, [r0, #12]
    7558:	2b01      	cmp	r3, #1
    755a:	d80c      	bhi.n	7576 <bt_recv+0xc2>
    755c:	4a1d      	ldr	r2, [pc, #116]	; (75d4 <bt_recv+0x120>)
    755e:	491e      	ldr	r1, [pc, #120]	; (75d8 <bt_recv+0x124>)
    7560:	481e      	ldr	r0, [pc, #120]	; (75dc <bt_recv+0x128>)
    7562:	f640 03b2 	movw	r3, #2226	; 0x8b2
    7566:	f016 ff0d 	bl	1e384 <printk>
    756a:	4040      	eors	r0, r0
    756c:	f380 8811 	msr	BASEPRI, r0
    7570:	f04f 0003 	mov.w	r0, #3
    7574:	df02      	svc	2
    7576:	2102      	movs	r1, #2
    7578:	f104 0008 	add.w	r0, r4, #8
    757c:	f01b f881 	bl	22682 <net_buf_simple_pull_mem>
    7580:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    7582:	7800      	ldrb	r0, [r0, #0]
    7584:	f019 f933 	bl	207ee <bt_hci_evt_get_flags>
    7588:	0783      	lsls	r3, r0, #30
    758a:	d40c      	bmi.n	75a6 <bt_recv+0xf2>
    758c:	4a11      	ldr	r2, [pc, #68]	; (75d4 <bt_recv+0x120>)
    758e:	4918      	ldr	r1, [pc, #96]	; (75f0 <bt_recv+0x13c>)
    7590:	4812      	ldr	r0, [pc, #72]	; (75dc <bt_recv+0x128>)
    7592:	f640 03b6 	movw	r3, #2230	; 0x8b6
    7596:	f016 fef5 	bl	1e384 <printk>
    759a:	4040      	eors	r0, r0
    759c:	f380 8811 	msr	BASEPRI, r0
    75a0:	f04f 0003 	mov.w	r0, #3
    75a4:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    75a6:	4a13      	ldr	r2, [pc, #76]	; (75f4 <bt_recv+0x140>)
    75a8:	7828      	ldrb	r0, [r5, #0]
    75aa:	2306      	movs	r3, #6
    75ac:	4621      	mov	r1, r4
    75ae:	f7ff f8ef 	bl	6790 <handle_event>
    75b2:	e7af      	b.n	7514 <bt_recv+0x60>
    75b4:	4b0a      	ldr	r3, [pc, #40]	; (75e0 <bt_recv+0x12c>)
    75b6:	4a0b      	ldr	r2, [pc, #44]	; (75e4 <bt_recv+0x130>)
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    75b8:	480f      	ldr	r0, [pc, #60]	; (75f8 <bt_recv+0x144>)
    75ba:	1ad2      	subs	r2, r2, r3
    75bc:	08d2      	lsrs	r2, r2, #3
    75be:	0192      	lsls	r2, r2, #6
    75c0:	f042 0201 	orr.w	r2, r2, #1
    75c4:	f017 fac5 	bl	1eb52 <log_1>
		net_buf_unref(buf);
    75c8:	4620      	mov	r0, r4
    75ca:	f012 fdcf 	bl	1a16c <net_buf_unref>
		return -EINVAL;
    75ce:	f06f 0015 	mvn.w	r0, #21
    75d2:	e7bf      	b.n	7554 <bt_recv+0xa0>
    75d4:	0002600b 	.word	0x0002600b
    75d8:	000262cf 	.word	0x000262cf
    75dc:	00026048 	.word	0x00026048
    75e0:	0002393c 	.word	0x0002393c
    75e4:	00023a14 	.word	0x00023a14
    75e8:	00026301 	.word	0x00026301
    75ec:	00026325 	.word	0x00026325
    75f0:	00026347 	.word	0x00026347
    75f4:	00023fd8 	.word	0x00023fd8
    75f8:	00026375 	.word	0x00026375

000075fc <bt_recv_prio>:

#if defined(CONFIG_BT_RECV_IS_RX_THREAD)
int bt_recv_prio(struct net_buf *buf)
{
    75fc:	b510      	push	{r4, lr}
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    75fe:	7d03      	ldrb	r3, [r0, #20]
    7600:	2b01      	cmp	r3, #1
{
    7602:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    7604:	d00c      	beq.n	7620 <bt_recv_prio+0x24>
    7606:	4a09      	ldr	r2, [pc, #36]	; (762c <bt_recv_prio+0x30>)
    7608:	4909      	ldr	r1, [pc, #36]	; (7630 <bt_recv_prio+0x34>)
    760a:	480a      	ldr	r0, [pc, #40]	; (7634 <bt_recv_prio+0x38>)
    760c:	f640 43d6 	movw	r3, #3286	; 0xcd6
    7610:	f016 feb8 	bl	1e384 <printk>
    7614:	4040      	eors	r0, r0
    7616:	f380 8811 	msr	BASEPRI, r0
    761a:	f04f 0003 	mov.w	r0, #3
    761e:	df02      	svc	2

	hci_event_prio(buf);
    7620:	4620      	mov	r0, r4
    7622:	f7ff fef5 	bl	7410 <hci_event_prio>

	return 0;
}
    7626:	2000      	movs	r0, #0
    7628:	bd10      	pop	{r4, pc}
    762a:	bf00      	nop
    762c:	0002600b 	.word	0x0002600b
    7630:	00026389 	.word	0x00026389
    7634:	00026048 	.word	0x00026048

00007638 <bt_hci_driver_register>:
#endif /* defined(CONFIG_BT_RECV_IS_RX_THREAD) */

int bt_hci_driver_register(const struct bt_hci_driver *drv)
{
	if (bt_dev.drv) {
    7638:	4a08      	ldr	r2, [pc, #32]	; (765c <bt_hci_driver_register+0x24>)
{
    763a:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    763c:	f8d2 0124 	ldr.w	r0, [r2, #292]	; 0x124
    7640:	b930      	cbnz	r0, 7650 <bt_hci_driver_register+0x18>
		return -EALREADY;
	}

	if (!drv->open || !drv->send) {
    7642:	68d9      	ldr	r1, [r3, #12]
    7644:	b139      	cbz	r1, 7656 <bt_hci_driver_register+0x1e>
    7646:	6919      	ldr	r1, [r3, #16]
    7648:	b129      	cbz	r1, 7656 <bt_hci_driver_register+0x1e>
		return -EINVAL;
	}

	bt_dev.drv = drv;
    764a:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
	BT_DBG("Registered %s", drv->name ? drv->name : "");

	bt_monitor_new_index(BT_MONITOR_TYPE_PRIMARY, drv->bus,
			     BT_ADDR_ANY, drv->name ? drv->name : "bt0");

	return 0;
    764e:	4770      	bx	lr
		return -EALREADY;
    7650:	f06f 0077 	mvn.w	r0, #119	; 0x77
    7654:	4770      	bx	lr
		return -EINVAL;
    7656:	f06f 0015 	mvn.w	r0, #21
}
    765a:	4770      	bx	lr
    765c:	20000000 	.word	0x20000000

00007660 <bt_finalize_init>:

void bt_finalize_init(void)
{
    7660:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7664:	4c30      	ldr	r4, [pc, #192]	; (7728 <bt_finalize_init+0xc8>)
    7666:	f3bf 8f5b 	dmb	ish
    766a:	b087      	sub	sp, #28
    766c:	f104 0398 	add.w	r3, r4, #152	; 0x98
    7670:	e853 2f00 	ldrex	r2, [r3]
    7674:	f042 0202 	orr.w	r2, r2, #2
    7678:	e843 2100 	strex	r1, r2, [r3]
    767c:	2900      	cmp	r1, #0
    767e:	d1f7      	bne.n	7670 <bt_finalize_init+0x10>
    7680:	f3bf 8f5b 	dmb	ish
    7684:	4b29      	ldr	r3, [pc, #164]	; (772c <bt_finalize_init+0xcc>)
    7686:	4d2a      	ldr	r5, [pc, #168]	; (7730 <bt_finalize_init+0xd0>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    7688:	492a      	ldr	r1, [pc, #168]	; (7734 <bt_finalize_init+0xd4>)
    768a:	4e2b      	ldr	r6, [pc, #172]	; (7738 <bt_finalize_init+0xd8>)
		BT_INFO("Identity[%d]: %s",
    768c:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 7748 <bt_finalize_init+0xe8>
    7690:	1aed      	subs	r5, r5, r3
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    7692:	79e3      	ldrb	r3, [r4, #7]
    7694:	4620      	mov	r0, r4
    7696:	2b01      	cmp	r3, #1
    7698:	bf88      	it	hi
    769a:	460e      	movhi	r6, r1
    769c:	f7fe fbba 	bl	5e14 <bt_addr_le_str_real>
    76a0:	f7fc fb24 	bl	3cec <log_strdup>
    76a4:	08ed      	lsrs	r5, r5, #3
    76a6:	01ad      	lsls	r5, r5, #6
    76a8:	f045 0703 	orr.w	r7, r5, #3
    76ac:	4602      	mov	r2, r0
    76ae:	4631      	mov	r1, r6
    76b0:	4822      	ldr	r0, [pc, #136]	; (773c <bt_finalize_init+0xdc>)
    76b2:	463b      	mov	r3, r7
    76b4:	f017 fa61 	bl	1eb7a <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
    76b8:	46a0      	mov	r8, r4
    76ba:	2601      	movs	r6, #1
    76bc:	79e3      	ldrb	r3, [r4, #7]
    76be:	429e      	cmp	r6, r3
    76c0:	f108 0807 	add.w	r8, r8, #7
    76c4:	db22      	blt.n	770c <bt_finalize_init+0xac>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    76c6:	f894 6034 	ldrb.w	r6, [r4, #52]	; 0x34
    76ca:	4630      	mov	r0, r6
    76cc:	f7fe fe50 	bl	6370 <ver_str>
    76d0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    76d2:	9304      	str	r3, [sp, #16]
    76d4:	f045 0503 	orr.w	r5, r5, #3
    76d8:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
    76da:	9305      	str	r3, [sp, #20]
    76dc:	e9cd 0602 	strd	r0, r6, [sp, #8]
    76e0:	462b      	mov	r3, r5
    76e2:	a902      	add	r1, sp, #8
    76e4:	2204      	movs	r2, #4
    76e6:	4816      	ldr	r0, [pc, #88]	; (7740 <bt_finalize_init+0xe0>)
    76e8:	f017 fa7c 	bl	1ebe4 <log_n>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    76ec:	f894 6035 	ldrb.w	r6, [r4, #53]	; 0x35
    76f0:	4630      	mov	r0, r6
    76f2:	f7fe fe3d 	bl	6370 <ver_str>
    76f6:	8f23      	ldrh	r3, [r4, #56]	; 0x38
    76f8:	f8ad 5000 	strh.w	r5, [sp]
    76fc:	4601      	mov	r1, r0
    76fe:	4632      	mov	r2, r6
    7700:	4810      	ldr	r0, [pc, #64]	; (7744 <bt_finalize_init+0xe4>)
    7702:	f017 fa53 	bl	1ebac <log_3>
	if (IS_ENABLED(CONFIG_BT_OBSERVER)) {
		bt_le_scan_update(false);
	}

	bt_dev_show_info();
}
    7706:	b007      	add	sp, #28
    7708:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_INFO("Identity[%d]: %s",
    770c:	4640      	mov	r0, r8
    770e:	f7fe fb81 	bl	5e14 <bt_addr_le_str_real>
    7712:	f7fc faeb 	bl	3cec <log_strdup>
    7716:	4631      	mov	r1, r6
    7718:	4602      	mov	r2, r0
    771a:	463b      	mov	r3, r7
    771c:	4648      	mov	r0, r9
    771e:	f017 fa2c 	bl	1eb7a <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
    7722:	3601      	adds	r6, #1
    7724:	e7ca      	b.n	76bc <bt_finalize_init+0x5c>
    7726:	bf00      	nop
    7728:	20000000 	.word	0x20000000
    772c:	0002393c 	.word	0x0002393c
    7730:	00023a14 	.word	0x00023a14
    7734:	000263ac 	.word	0x000263ac
    7738:	0002561a 	.word	0x0002561a
    773c:	000263b0 	.word	0x000263b0
    7740:	000263d0 	.word	0x000263d0
    7744:	0002640e 	.word	0x0002640e
    7748:	000263bf 	.word	0x000263bf

0000774c <init_work>:
	bt_finalize_init();
	return 0;
}

static void init_work(struct k_work *work)
{
    774c:	b510      	push	{r4, lr}
	err = hci_init();
    774e:	f7f9 fb03 	bl	d58 <hci_init>
	if (err) {
    7752:	4604      	mov	r4, r0
    7754:	b928      	cbnz	r0, 7762 <init_work+0x16>
		err = bt_conn_init();
    7756:	f001 fde1 	bl	931c <bt_conn_init>
		if (err) {
    775a:	4604      	mov	r4, r0
    775c:	b908      	cbnz	r0, 7762 <init_work+0x16>
	bt_finalize_init();
    775e:	f7ff ff7f 	bl	7660 <bt_finalize_init>
	int err;

	err = bt_init();
	if (ready_cb) {
    7762:	4b04      	ldr	r3, [pc, #16]	; (7774 <init_work+0x28>)
    7764:	681b      	ldr	r3, [r3, #0]
    7766:	b11b      	cbz	r3, 7770 <init_work+0x24>
		ready_cb(err);
    7768:	4620      	mov	r0, r4
	}
}
    776a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    776e:	4718      	bx	r3
}
    7770:	bd10      	pop	{r4, pc}
    7772:	bf00      	nop
    7774:	20001604 	.word	0x20001604

00007778 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
    7778:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
    777a:	4d34      	ldr	r5, [pc, #208]	; (784c <bt_enable+0xd4>)
    777c:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
{
    7780:	b088      	sub	sp, #32
    7782:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    7784:	b973      	cbnz	r3, 77a4 <bt_enable+0x2c>
    7786:	4b32      	ldr	r3, [pc, #200]	; (7850 <bt_enable+0xd8>)
    7788:	4932      	ldr	r1, [pc, #200]	; (7854 <bt_enable+0xdc>)
		BT_ERR("No HCI driver registered");
    778a:	4833      	ldr	r0, [pc, #204]	; (7858 <bt_enable+0xe0>)
    778c:	1ac9      	subs	r1, r1, r3
    778e:	08c9      	lsrs	r1, r1, #3
    7790:	0189      	lsls	r1, r1, #6
    7792:	f041 0101 	orr.w	r1, r1, #1
    7796:	f017 f9cf 	bl	1eb38 <log_0>
		return -ENODEV;
    779a:	f06f 0412 	mvn.w	r4, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    779e:	4620      	mov	r0, r4
    77a0:	b008      	add	sp, #32
    77a2:	bd70      	pop	{r4, r5, r6, pc}
    77a4:	f105 0298 	add.w	r2, r5, #152	; 0x98
    77a8:	f3bf 8f5b 	dmb	ish
    77ac:	e852 3f00 	ldrex	r3, [r2]
    77b0:	f043 0101 	orr.w	r1, r3, #1
    77b4:	e842 1000 	strex	r0, r1, [r2]
    77b8:	2800      	cmp	r0, #0
    77ba:	d1f7      	bne.n	77ac <bt_enable+0x34>
    77bc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    77c0:	f013 0301 	ands.w	r3, r3, #1
    77c4:	d13f      	bne.n	7846 <bt_enable+0xce>
	ready_cb = cb;
    77c6:	4a25      	ldr	r2, [pc, #148]	; (785c <bt_enable+0xe4>)
    77c8:	6016      	str	r6, [r2, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    77ca:	2000      	movs	r0, #0
    77cc:	2100      	movs	r1, #0
    77ce:	f06f 0208 	mvn.w	r2, #8
    77d2:	e9cd 0106 	strd	r0, r1, [sp, #24]
    77d6:	e9cd 3202 	strd	r3, r2, [sp, #8]
    77da:	e9cd 3300 	strd	r3, r3, [sp]
    77de:	9304      	str	r3, [sp, #16]
    77e0:	491f      	ldr	r1, [pc, #124]	; (7860 <bt_enable+0xe8>)
    77e2:	4b20      	ldr	r3, [pc, #128]	; (7864 <bt_enable+0xec>)
    77e4:	4820      	ldr	r0, [pc, #128]	; (7868 <bt_enable+0xf0>)
    77e6:	f44f 7220 	mov.w	r2, #640	; 0x280
    77ea:	f016 f831 	bl	1d850 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    77ee:	491f      	ldr	r1, [pc, #124]	; (786c <bt_enable+0xf4>)
    77f0:	481d      	ldr	r0, [pc, #116]	; (7868 <bt_enable+0xf0>)
    77f2:	f01b fc86 	bl	23102 <z_impl_k_thread_name_set>
		bt_hci_ecc_init();
    77f6:	f7fe fcf3 	bl	61e0 <bt_hci_ecc_init>
	err = bt_dev.drv->open();
    77fa:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    77fe:	68db      	ldr	r3, [r3, #12]
    7800:	4798      	blx	r3
	if (err) {
    7802:	4604      	mov	r4, r0
    7804:	b158      	cbz	r0, 781e <bt_enable+0xa6>
    7806:	4b12      	ldr	r3, [pc, #72]	; (7850 <bt_enable+0xd8>)
    7808:	4a12      	ldr	r2, [pc, #72]	; (7854 <bt_enable+0xdc>)
    780a:	1ad2      	subs	r2, r2, r3
    780c:	08d2      	lsrs	r2, r2, #3
		BT_ERR("HCI driver open failed (%d)", err);
    780e:	0192      	lsls	r2, r2, #6
    7810:	4601      	mov	r1, r0
    7812:	f042 0201 	orr.w	r2, r2, #1
    7816:	4816      	ldr	r0, [pc, #88]	; (7870 <bt_enable+0xf8>)
    7818:	f017 f99b 	bl	1eb52 <log_1>
		return err;
    781c:	e7bf      	b.n	779e <bt_enable+0x26>
	if (!cb) {
    781e:	b966      	cbnz	r6, 783a <bt_enable+0xc2>
	err = hci_init();
    7820:	f7f9 fa9a 	bl	d58 <hci_init>
	if (err) {
    7824:	4604      	mov	r4, r0
    7826:	2800      	cmp	r0, #0
    7828:	d1b9      	bne.n	779e <bt_enable+0x26>
		err = bt_conn_init();
    782a:	f001 fd77 	bl	931c <bt_conn_init>
		if (err) {
    782e:	4604      	mov	r4, r0
    7830:	2800      	cmp	r0, #0
    7832:	d1b4      	bne.n	779e <bt_enable+0x26>
	bt_finalize_init();
    7834:	f7ff ff14 	bl	7660 <bt_finalize_init>
	return 0;
    7838:	e7b1      	b.n	779e <bt_enable+0x26>
    783a:	f105 0188 	add.w	r1, r5, #136	; 0x88
    783e:	480d      	ldr	r0, [pc, #52]	; (7874 <bt_enable+0xfc>)
    7840:	f01b fcd6 	bl	231f0 <k_work_submit_to_queue>
    7844:	e7ab      	b.n	779e <bt_enable+0x26>
		return -EALREADY;
    7846:	f06f 0477 	mvn.w	r4, #119	; 0x77
    784a:	e7a8      	b.n	779e <bt_enable+0x26>
    784c:	20000000 	.word	0x20000000
    7850:	0002393c 	.word	0x0002393c
    7854:	00023a14 	.word	0x00023a14
    7858:	00026435 	.word	0x00026435
    785c:	20001604 	.word	0x20001604
    7860:	20003a18 	.word	0x20003a18
    7864:	00006975 	.word	0x00006975
    7868:	20000b08 	.word	0x20000b08
    786c:	0002644e 	.word	0x0002644e
    7870:	00026454 	.word	0x00026454
    7874:	20001390 	.word	0x20001390

00007878 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
    7878:	4800      	ldr	r0, [pc, #0]	; (787c <bt_get_name+0x4>)
    787a:	4770      	bx	lr
    787c:	00026470 	.word	0x00026470

00007880 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
    7880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    7882:	4f0b      	ldr	r7, [pc, #44]	; (78b0 <id_find+0x30>)
{
    7884:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    7886:	2500      	movs	r5, #0
    7888:	79fb      	ldrb	r3, [r7, #7]
    788a:	b2ec      	uxtb	r4, r5
    788c:	42a3      	cmp	r3, r4
    788e:	d802      	bhi.n	7896 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    7890:	f06f 0401 	mvn.w	r4, #1
    7894:	e009      	b.n	78aa <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    7896:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
    789a:	2207      	movs	r2, #7
    789c:	4439      	add	r1, r7
    789e:	4630      	mov	r0, r6
    78a0:	f01b fed1 	bl	23646 <memcmp>
    78a4:	3501      	adds	r5, #1
    78a6:	2800      	cmp	r0, #0
    78a8:	d1ee      	bne.n	7888 <id_find+0x8>
}
    78aa:	4620      	mov	r0, r4
    78ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    78ae:	bf00      	nop
    78b0:	20000000 	.word	0x20000000

000078b4 <set_random_address>:
{
    78b4:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
    78b6:	2206      	movs	r2, #6
    78b8:	4913      	ldr	r1, [pc, #76]	; (7908 <set_random_address+0x54>)
    78ba:	4605      	mov	r5, r0
    78bc:	f01b fec3 	bl	23646 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    78c0:	4602      	mov	r2, r0
    78c2:	b1d8      	cbz	r0, 78fc <set_random_address+0x48>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    78c4:	2106      	movs	r1, #6
    78c6:	f242 0005 	movw	r0, #8197	; 0x2005
    78ca:	f7ff f9ab 	bl	6c24 <bt_hci_cmd_create>
	if (!buf) {
    78ce:	4604      	mov	r4, r0
    78d0:	b1b0      	cbz	r0, 7900 <set_random_address+0x4c>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    78d2:	2206      	movs	r2, #6
    78d4:	4629      	mov	r1, r5
    78d6:	3008      	adds	r0, #8
    78d8:	f01a feb1 	bl	2263e <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    78dc:	2200      	movs	r2, #0
    78de:	4621      	mov	r1, r4
    78e0:	f242 0005 	movw	r0, #8197	; 0x2005
    78e4:	f7ff fb02 	bl	6eec <bt_hci_cmd_send_sync>
	if (err) {
    78e8:	4602      	mov	r2, r0
    78ea:	b938      	cbnz	r0, 78fc <set_random_address+0x48>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
    78ec:	4629      	mov	r1, r5
    78ee:	4806      	ldr	r0, [pc, #24]	; (7908 <set_random_address+0x54>)
    78f0:	f019 f8ea 	bl	20ac8 <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    78f4:	4b05      	ldr	r3, [pc, #20]	; (790c <set_random_address+0x58>)
    78f6:	2101      	movs	r1, #1
    78f8:	f883 102c 	strb.w	r1, [r3, #44]	; 0x2c
}
    78fc:	4610      	mov	r0, r2
    78fe:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    7900:	f06f 0268 	mvn.w	r2, #104	; 0x68
    7904:	e7fa      	b.n	78fc <set_random_address+0x48>
    7906:	bf00      	nop
    7908:	2000002d 	.word	0x2000002d
    790c:	20000000 	.word	0x20000000

00007910 <id_create.isra.0>:

static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    7910:	b530      	push	{r4, r5, lr}
    7912:	4c14      	ldr	r4, [pc, #80]	; (7964 <id_create.isra.0+0x54>)
    7914:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    7918:	b085      	sub	sp, #20
    791a:	4404      	add	r4, r0
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    791c:	460d      	mov	r5, r1
    791e:	b179      	cbz	r1, 7940 <id_create.isra.0+0x30>
    7920:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    7922:	2207      	movs	r2, #7
    7924:	4669      	mov	r1, sp
    7926:	4628      	mov	r0, r5
    7928:	9300      	str	r3, [sp, #0]
    792a:	f8cd 3003 	str.w	r3, [sp, #3]
    792e:	f01b fe8a 	bl	23646 <memcmp>
    7932:	b128      	cbz	r0, 7940 <id_create.isra.0+0x30>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    7934:	4629      	mov	r1, r5
    7936:	4620      	mov	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    7938:	f019 f8cb 	bl	20ad2 <bt_addr_le_copy>
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}
}
    793c:	b005      	add	sp, #20
    793e:	bd30      	pop	{r4, r5, pc}
			bt_addr_le_create_static(&new_addr);
    7940:	a802      	add	r0, sp, #8
    7942:	f018 ff46 	bl	207d2 <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    7946:	a802      	add	r0, sp, #8
    7948:	f7ff ff9a 	bl	7880 <id_find>
    794c:	2800      	cmp	r0, #0
    794e:	daf7      	bge.n	7940 <id_create.isra.0+0x30>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    7950:	a902      	add	r1, sp, #8
    7952:	4620      	mov	r0, r4
    7954:	f019 f8bd 	bl	20ad2 <bt_addr_le_copy>
		if (addr) {
    7958:	2d00      	cmp	r5, #0
    795a:	d0ef      	beq.n	793c <id_create.isra.0+0x2c>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    795c:	4621      	mov	r1, r4
    795e:	4628      	mov	r0, r5
    7960:	e7ea      	b.n	7938 <id_create.isra.0+0x28>
    7962:	bf00      	nop
    7964:	20000000 	.word	0x20000000

00007968 <bt_id_pending_keys_update>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7968:	4b0a      	ldr	r3, [pc, #40]	; (7994 <bt_id_pending_keys_update+0x2c>)
    796a:	f3bf 8f5b 	dmb	ish
    796e:	e853 2f00 	ldrex	r2, [r3]
    7972:	f422 4180 	bic.w	r1, r2, #16384	; 0x4000
    7976:	e843 1000 	strex	r0, r1, [r3]
    797a:	2800      	cmp	r0, #0
    797c:	d1f7      	bne.n	796e <bt_id_pending_keys_update+0x6>
    797e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    7982:	0453      	lsls	r3, r2, #17
    7984:	d504      	bpl.n	7990 <bt_id_pending_keys_update+0x28>
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
    7986:	4904      	ldr	r1, [pc, #16]	; (7998 <bt_id_pending_keys_update+0x30>)
    7988:	2200      	movs	r2, #0
    798a:	2002      	movs	r0, #2
    798c:	f005 b8d0 	b.w	cb30 <bt_keys_foreach>
}
    7990:	4770      	bx	lr
    7992:	bf00      	nop
    7994:	20000098 	.word	0x20000098
    7998:	00020bb7 	.word	0x00020bb7

0000799c <bt_id_add>:
{
    799c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    799e:	4e5e      	ldr	r6, [pc, #376]	; (7b18 <bt_id_add+0x17c>)
    79a0:	f896 20e8 	ldrb.w	r2, [r6, #232]	; 0xe8
    79a4:	f896 30e9 	ldrb.w	r3, [r6, #233]	; 0xe9
{
    79a8:	4604      	mov	r4, r0
    79aa:	4635      	mov	r5, r6
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    79ac:	b10a      	cbz	r2, 79b2 <bt_id_add+0x16>
    79ae:	429a      	cmp	r2, r3
    79b0:	d208      	bcs.n	79c4 <bt_id_add+0x28>
		bt_dev.le.rl_entries++;
    79b2:	3301      	adds	r3, #1
    79b4:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
		keys->state |= BT_KEYS_ID_ADDED;
    79b8:	7a23      	ldrb	r3, [r4, #8]
    79ba:	f043 0304 	orr.w	r3, r3, #4
    79be:	7223      	strb	r3, [r4, #8]
}
    79c0:	b003      	add	sp, #12
    79c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    79c4:	2100      	movs	r1, #0
    79c6:	2206      	movs	r2, #6
    79c8:	4608      	mov	r0, r1
    79ca:	f001 fb15 	bl	8ff8 <bt_conn_lookup_state_le>
	if (conn) {
    79ce:	4607      	mov	r7, r0
    79d0:	b198      	cbz	r0, 79fa <bt_id_add+0x5e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    79d2:	f3bf 8f5b 	dmb	ish
    79d6:	3698      	adds	r6, #152	; 0x98
    79d8:	e856 3f00 	ldrex	r3, [r6]
    79dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    79e0:	e846 3200 	strex	r2, r3, [r6]
    79e4:	2a00      	cmp	r2, #0
    79e6:	d1f7      	bne.n	79d8 <bt_id_add+0x3c>
    79e8:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
    79ec:	7a23      	ldrb	r3, [r4, #8]
    79ee:	f043 0301 	orr.w	r3, r3, #1
    79f2:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
    79f4:	f019 fa9a 	bl	20f2c <bt_conn_unref>
		return;
    79f8:	e7e2      	b.n	79c0 <bt_id_add+0x24>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
    79fa:	4601      	mov	r1, r0
    79fc:	4847      	ldr	r0, [pc, #284]	; (7b1c <bt_id_add+0x180>)
    79fe:	f000 fc07 	bl	8210 <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries) {
    7a02:	f896 30e9 	ldrb.w	r3, [r6, #233]	; 0xe9
    7a06:	b173      	cbz	r3, 7a26 <bt_id_add+0x8a>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    7a08:	4638      	mov	r0, r7
    7a0a:	f019 f845 	bl	20a98 <addr_res_enable>
		if (err) {
    7a0e:	b150      	cbz	r0, 7a26 <bt_id_add+0x8a>
    7a10:	4943      	ldr	r1, [pc, #268]	; (7b20 <bt_id_add+0x184>)
    7a12:	4b44      	ldr	r3, [pc, #272]	; (7b24 <bt_id_add+0x188>)
			BT_WARN("Failed to disable address resolution");
    7a14:	4844      	ldr	r0, [pc, #272]	; (7b28 <bt_id_add+0x18c>)
    7a16:	1ac9      	subs	r1, r1, r3
    7a18:	08c9      	lsrs	r1, r1, #3
    7a1a:	0189      	lsls	r1, r1, #6
    7a1c:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("Set privacy mode command is not supported");
    7a20:	f017 f88a 	bl	1eb38 <log_0>
	if (err) {
    7a24:	e023      	b.n	7a6e <bt_id_add+0xd2>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
    7a26:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
    7a2a:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
    7a2e:	429a      	cmp	r2, r3
    7a30:	d125      	bne.n	7a7e <bt_id_add+0xe2>
    7a32:	4b3c      	ldr	r3, [pc, #240]	; (7b24 <bt_id_add+0x188>)
    7a34:	4e3a      	ldr	r6, [pc, #232]	; (7b20 <bt_id_add+0x184>)
		BT_WARN("Resolving list size exceeded. Switching to host.");
    7a36:	483d      	ldr	r0, [pc, #244]	; (7b2c <bt_id_add+0x190>)
    7a38:	1af6      	subs	r6, r6, r3
    7a3a:	08f6      	lsrs	r6, r6, #3
    7a3c:	01b6      	lsls	r6, r6, #6
    7a3e:	f046 0102 	orr.w	r1, r6, #2
    7a42:	f017 f879 	bl	1eb38 <log_0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
    7a46:	2200      	movs	r2, #0
    7a48:	4611      	mov	r1, r2
    7a4a:	f242 0029 	movw	r0, #8233	; 0x2029
    7a4e:	f7ff fa4d 	bl	6eec <bt_hci_cmd_send_sync>
		if (err) {
    7a52:	b118      	cbz	r0, 7a5c <bt_id_add+0xc0>
			BT_ERR("Failed to clear resolution list");
    7a54:	4836      	ldr	r0, [pc, #216]	; (7b30 <bt_id_add+0x194>)
    7a56:	f046 0101 	orr.w	r1, r6, #1
    7a5a:	e7e1      	b.n	7a20 <bt_id_add+0x84>
		bt_dev.le.rl_entries++;
    7a5c:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
    7a60:	3301      	adds	r3, #1
    7a62:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
		keys->state |= BT_KEYS_ID_ADDED;
    7a66:	7a23      	ldrb	r3, [r4, #8]
    7a68:	f043 0304 	orr.w	r3, r3, #4
    7a6c:	7223      	strb	r3, [r4, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    7a6e:	2001      	movs	r0, #1
    7a70:	f019 f812 	bl	20a98 <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
    7a74:	482f      	ldr	r0, [pc, #188]	; (7b34 <bt_id_add+0x198>)
    7a76:	2100      	movs	r1, #0
    7a78:	f000 fbca 	bl	8210 <bt_le_ext_adv_foreach>
    7a7c:	e7a0      	b.n	79c0 <bt_id_add+0x24>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
    7a7e:	1c67      	adds	r7, r4, #1
    7a80:	f104 012a 	add.w	r1, r4, #42	; 0x2a
    7a84:	4638      	mov	r0, r7
    7a86:	f019 f82b 	bl	20ae0 <hci_id_add.isra.0>
	if (err) {
    7a8a:	4606      	mov	r6, r0
    7a8c:	b140      	cbz	r0, 7aa0 <bt_id_add+0x104>
    7a8e:	4924      	ldr	r1, [pc, #144]	; (7b20 <bt_id_add+0x184>)
    7a90:	4b24      	ldr	r3, [pc, #144]	; (7b24 <bt_id_add+0x188>)
		BT_ERR("Failed to add IRK to controller");
    7a92:	4829      	ldr	r0, [pc, #164]	; (7b38 <bt_id_add+0x19c>)
    7a94:	1ac9      	subs	r1, r1, r3
    7a96:	08c9      	lsrs	r1, r1, #3
    7a98:	0189      	lsls	r1, r1, #6
    7a9a:	f041 0101 	orr.w	r1, r1, #1
    7a9e:	e7bf      	b.n	7a20 <bt_id_add+0x84>
	bt_dev.le.rl_entries++;
    7aa0:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
    7aa4:	3301      	adds	r3, #1
    7aa6:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
	keys->state |= BT_KEYS_ID_ADDED;
    7aaa:	7a23      	ldrb	r3, [r4, #8]
    7aac:	f043 0304 	orr.w	r3, r3, #4
    7ab0:	7223      	strb	r3, [r4, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
    7ab2:	f895 306b 	ldrb.w	r3, [r5, #107]	; 0x6b
    7ab6:	075b      	lsls	r3, r3, #29
    7ab8:	d408      	bmi.n	7acc <bt_id_add+0x130>
    7aba:	4919      	ldr	r1, [pc, #100]	; (7b20 <bt_id_add+0x184>)
    7abc:	4b19      	ldr	r3, [pc, #100]	; (7b24 <bt_id_add+0x188>)
		BT_WARN("Set privacy mode command is not supported");
    7abe:	481f      	ldr	r0, [pc, #124]	; (7b3c <bt_id_add+0x1a0>)
    7ac0:	1ac9      	subs	r1, r1, r3
    7ac2:	08c9      	lsrs	r1, r1, #3
    7ac4:	0189      	lsls	r1, r1, #6
    7ac6:	f041 0102 	orr.w	r1, r1, #2
    7aca:	e7a9      	b.n	7a20 <bt_id_add+0x84>
	bt_addr_le_copy(&cp.id_addr, addr);
    7acc:	4639      	mov	r1, r7
    7ace:	4668      	mov	r0, sp
    7ad0:	f018 ffff 	bl	20ad2 <bt_addr_le_copy>
	cp.mode = mode;
    7ad4:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    7ad6:	2108      	movs	r1, #8
    7ad8:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
    7adc:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    7ae0:	f7ff f8a0 	bl	6c24 <bt_hci_cmd_create>
	if (!buf) {
    7ae4:	4604      	mov	r4, r0
    7ae6:	b940      	cbnz	r0, 7afa <bt_id_add+0x15e>
    7ae8:	490d      	ldr	r1, [pc, #52]	; (7b20 <bt_id_add+0x184>)
    7aea:	4b0e      	ldr	r3, [pc, #56]	; (7b24 <bt_id_add+0x188>)
		BT_ERR("Failed to set privacy mode");
    7aec:	4814      	ldr	r0, [pc, #80]	; (7b40 <bt_id_add+0x1a4>)
    7aee:	1ac9      	subs	r1, r1, r3
    7af0:	08c9      	lsrs	r1, r1, #3
    7af2:	0189      	lsls	r1, r1, #6
    7af4:	f041 0101 	orr.w	r1, r1, #1
    7af8:	e792      	b.n	7a20 <bt_id_add+0x84>
    7afa:	2208      	movs	r2, #8
    7afc:	4669      	mov	r1, sp
    7afe:	4410      	add	r0, r2
    7b00:	f01a fd9d 	bl	2263e <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
    7b04:	4632      	mov	r2, r6
    7b06:	4621      	mov	r1, r4
    7b08:	f242 004e 	movw	r0, #8270	; 0x204e
    7b0c:	f7ff f9ee 	bl	6eec <bt_hci_cmd_send_sync>
	if (err) {
    7b10:	2800      	cmp	r0, #0
    7b12:	d0ac      	beq.n	7a6e <bt_id_add+0xd2>
    7b14:	e7e8      	b.n	7ae8 <bt_id_add+0x14c>
    7b16:	bf00      	nop
    7b18:	20000000 	.word	0x20000000
    7b1c:	00020b4d 	.word	0x00020b4d
    7b20:	00023a24 	.word	0x00023a24
    7b24:	0002393c 	.word	0x0002393c
    7b28:	000264ab 	.word	0x000264ab
    7b2c:	000264d0 	.word	0x000264d0
    7b30:	00026501 	.word	0x00026501
    7b34:	00020a6f 	.word	0x00020a6f
    7b38:	00026521 	.word	0x00026521
    7b3c:	00026541 	.word	0x00026541
    7b40:	0002656b 	.word	0x0002656b

00007b44 <bt_id_del>:
{
    7b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size ||
    7b48:	4e47      	ldr	r6, [pc, #284]	; (7c68 <bt_id_del+0x124>)
    7b4a:	f896 20e8 	ldrb.w	r2, [r6, #232]	; 0xe8
    7b4e:	f896 30e9 	ldrb.w	r3, [r6, #233]	; 0xe9
{
    7b52:	4604      	mov	r4, r0
    7b54:	4635      	mov	r5, r6
	if (!bt_dev.le.rl_size ||
    7b56:	b112      	cbz	r2, 7b5e <bt_id_del+0x1a>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    7b58:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
    7b5a:	4293      	cmp	r3, r2
    7b5c:	dd08      	ble.n	7b70 <bt_id_del+0x2c>
		bt_dev.le.rl_entries--;
    7b5e:	3b01      	subs	r3, #1
    7b60:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
		keys->state &= ~BT_KEYS_ID_ADDED;
    7b64:	7a23      	ldrb	r3, [r4, #8]
    7b66:	f023 0304 	bic.w	r3, r3, #4
    7b6a:	7223      	strb	r3, [r4, #8]
}
    7b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    7b70:	2100      	movs	r1, #0
    7b72:	2206      	movs	r2, #6
    7b74:	4608      	mov	r0, r1
    7b76:	f001 fa3f 	bl	8ff8 <bt_conn_lookup_state_le>
	if (conn) {
    7b7a:	4607      	mov	r7, r0
    7b7c:	b1a0      	cbz	r0, 7ba8 <bt_id_del+0x64>
    7b7e:	f3bf 8f5b 	dmb	ish
    7b82:	3698      	adds	r6, #152	; 0x98
    7b84:	e856 3f00 	ldrex	r3, [r6]
    7b88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    7b8c:	e846 3200 	strex	r2, r3, [r6]
    7b90:	2a00      	cmp	r2, #0
    7b92:	d1f7      	bne.n	7b84 <bt_id_del+0x40>
    7b94:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
    7b98:	7a23      	ldrb	r3, [r4, #8]
    7b9a:	f043 0302 	orr.w	r3, r3, #2
    7b9e:	7223      	strb	r3, [r4, #8]
}
    7ba0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
    7ba4:	f019 b9c2 	b.w	20f2c <bt_conn_unref>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
    7ba8:	4601      	mov	r1, r0
    7baa:	4830      	ldr	r0, [pc, #192]	; (7c6c <bt_id_del+0x128>)
    7bac:	f000 fb30 	bl	8210 <bt_le_ext_adv_foreach>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    7bb0:	4638      	mov	r0, r7
    7bb2:	f018 ff71 	bl	20a98 <addr_res_enable>
	if (err) {
    7bb6:	4606      	mov	r6, r0
    7bb8:	b1b0      	cbz	r0, 7be8 <bt_id_del+0xa4>
    7bba:	4a2d      	ldr	r2, [pc, #180]	; (7c70 <bt_id_del+0x12c>)
    7bbc:	4b2d      	ldr	r3, [pc, #180]	; (7c74 <bt_id_del+0x130>)
    7bbe:	1ad2      	subs	r2, r2, r3
    7bc0:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Disabling address resolution failed (err %d)", err);
    7bc2:	0192      	lsls	r2, r2, #6
    7bc4:	4601      	mov	r1, r0
    7bc6:	f042 0201 	orr.w	r2, r2, #1
    7bca:	482b      	ldr	r0, [pc, #172]	; (7c78 <bt_id_del+0x134>)
    7bcc:	f016 ffc1 	bl	1eb52 <log_1>
	if (bt_dev.le.rl_entries) {
    7bd0:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
    7bd4:	b113      	cbz	r3, 7bdc <bt_id_del+0x98>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    7bd6:	2001      	movs	r0, #1
    7bd8:	f018 ff5e 	bl	20a98 <addr_res_enable>
}
    7bdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
    7be0:	4826      	ldr	r0, [pc, #152]	; (7c7c <bt_id_del+0x138>)
    7be2:	2100      	movs	r1, #0
    7be4:	f000 bb14 	b.w	8210 <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    7be8:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
    7bec:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
    7bf0:	429a      	cmp	r2, r3
    7bf2:	d20c      	bcs.n	7c0e <bt_id_del+0xca>
		bt_dev.le.rl_entries--;
    7bf4:	3b01      	subs	r3, #1
    7bf6:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
		keys->state &= ~BT_KEYS_ID_ADDED;
    7bfa:	7a23      	ldrb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    7bfc:	4920      	ldr	r1, [pc, #128]	; (7c80 <bt_id_del+0x13c>)
		keys->state &= ~BT_KEYS_ID_ADDED;
    7bfe:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    7c02:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
    7c04:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    7c06:	2002      	movs	r0, #2
    7c08:	f004 ff92 	bl	cb30 <bt_keys_foreach>
		goto done;
    7c0c:	e7e0      	b.n	7bd0 <bt_id_del+0x8c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
    7c0e:	2107      	movs	r1, #7
    7c10:	f242 0028 	movw	r0, #8232	; 0x2028
    7c14:	f7ff f806 	bl	6c24 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
    7c18:	f104 0801 	add.w	r8, r4, #1
	if (!buf) {
    7c1c:	4607      	mov	r7, r0
    7c1e:	b950      	cbnz	r0, 7c36 <bt_id_del+0xf2>
    7c20:	4b14      	ldr	r3, [pc, #80]	; (7c74 <bt_id_del+0x130>)
    7c22:	4913      	ldr	r1, [pc, #76]	; (7c70 <bt_id_del+0x12c>)
		BT_ERR("Failed to remove IRK from controller");
    7c24:	4817      	ldr	r0, [pc, #92]	; (7c84 <bt_id_del+0x140>)
    7c26:	1ac9      	subs	r1, r1, r3
    7c28:	08c9      	lsrs	r1, r1, #3
    7c2a:	0189      	lsls	r1, r1, #6
    7c2c:	f041 0101 	orr.w	r1, r1, #1
    7c30:	f016 ff82 	bl	1eb38 <log_0>
		goto done;
    7c34:	e7cc      	b.n	7bd0 <bt_id_del+0x8c>
	return net_buf_simple_add(&buf->b, len);
    7c36:	2107      	movs	r1, #7
    7c38:	3008      	adds	r0, #8
    7c3a:	f01a fcfa 	bl	22632 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    7c3e:	4641      	mov	r1, r8
    7c40:	f018 ff47 	bl	20ad2 <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
    7c44:	4632      	mov	r2, r6
    7c46:	4639      	mov	r1, r7
    7c48:	f242 0028 	movw	r0, #8232	; 0x2028
    7c4c:	f7ff f94e 	bl	6eec <bt_hci_cmd_send_sync>
	if (err) {
    7c50:	2800      	cmp	r0, #0
    7c52:	d1e5      	bne.n	7c20 <bt_id_del+0xdc>
	bt_dev.le.rl_entries--;
    7c54:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
    7c58:	3b01      	subs	r3, #1
    7c5a:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
	keys->state &= ~BT_KEYS_ID_ADDED;
    7c5e:	7a23      	ldrb	r3, [r4, #8]
    7c60:	f023 0304 	bic.w	r3, r3, #4
    7c64:	7223      	strb	r3, [r4, #8]
    7c66:	e7b3      	b.n	7bd0 <bt_id_del+0x8c>
    7c68:	20000000 	.word	0x20000000
    7c6c:	00020b4d 	.word	0x00020b4d
    7c70:	00023a24 	.word	0x00023a24
    7c74:	0002393c 	.word	0x0002393c
    7c78:	00026586 	.word	0x00026586
    7c7c:	00020a6f 	.word	0x00020a6f
    7c80:	00020b3b 	.word	0x00020b3b
    7c84:	000265b3 	.word	0x000265b3

00007c88 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
    7c88:	b573      	push	{r0, r1, r4, r5, r6, lr}
    7c8a:	460c      	mov	r4, r1
	int new_id;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    7c8c:	4605      	mov	r5, r0
    7c8e:	b918      	cbnz	r0, 7c98 <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    7c90:	b34c      	cbz	r4, 7ce6 <bt_id_create+0x5e>
		return -EINVAL;
    7c92:	f06f 0415 	mvn.w	r4, #21
    7c96:	e023      	b.n	7ce0 <bt_id_create+0x58>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    7c98:	2300      	movs	r3, #0
    7c9a:	2207      	movs	r2, #7
    7c9c:	4669      	mov	r1, sp
    7c9e:	9300      	str	r3, [sp, #0]
    7ca0:	f8cd 3003 	str.w	r3, [sp, #3]
    7ca4:	f01b fccf 	bl	23646 <memcmp>
    7ca8:	2800      	cmp	r0, #0
    7caa:	d0f1      	beq.n	7c90 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    7cac:	782b      	ldrb	r3, [r5, #0]
    7cae:	2b01      	cmp	r3, #1
    7cb0:	d104      	bne.n	7cbc <bt_id_create+0x34>
    7cb2:	79ab      	ldrb	r3, [r5, #6]
    7cb4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    7cb8:	2bc0      	cmp	r3, #192	; 0xc0
    7cba:	d00a      	beq.n	7cd2 <bt_id_create+0x4a>
    7cbc:	4b1b      	ldr	r3, [pc, #108]	; (7d2c <bt_id_create+0xa4>)
    7cbe:	491c      	ldr	r1, [pc, #112]	; (7d30 <bt_id_create+0xa8>)
			BT_ERR("Only static random identity address supported");
    7cc0:	481c      	ldr	r0, [pc, #112]	; (7d34 <bt_id_create+0xac>)
    7cc2:	1ac9      	subs	r1, r1, r3
    7cc4:	08c9      	lsrs	r1, r1, #3
    7cc6:	0189      	lsls	r1, r1, #6
    7cc8:	f041 0101 	orr.w	r1, r1, #1
    7ccc:	f016 ff34 	bl	1eb38 <log_0>
			return -EINVAL;
    7cd0:	e7df      	b.n	7c92 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
    7cd2:	4628      	mov	r0, r5
    7cd4:	f7ff fdd4 	bl	7880 <id_find>
    7cd8:	2800      	cmp	r0, #0
    7cda:	dbd9      	blt.n	7c90 <bt_id_create+0x8>
			return -EALREADY;
    7cdc:	f06f 0477 	mvn.w	r4, #119	; 0x77

	new_id = bt_dev.id_count++;
	id_create(new_id, addr, irk);

	return new_id;
}
    7ce0:	4620      	mov	r0, r4
    7ce2:	b002      	add	sp, #8
    7ce4:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    7ce6:	4e14      	ldr	r6, [pc, #80]	; (7d38 <bt_id_create+0xb0>)
    7ce8:	79f3      	ldrb	r3, [r6, #7]
    7cea:	2b01      	cmp	r3, #1
    7cec:	d01b      	beq.n	7d26 <bt_id_create+0x9e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7cee:	f3bf 8f5b 	dmb	ish
    7cf2:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
    7cf6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    7cfa:	07db      	lsls	r3, r3, #31
    7cfc:	d40b      	bmi.n	7d16 <bt_id_create+0x8e>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
    7cfe:	2d00      	cmp	r5, #0
    7d00:	d0c7      	beq.n	7c92 <bt_id_create+0xa>
    7d02:	2207      	movs	r2, #7
    7d04:	4669      	mov	r1, sp
    7d06:	4628      	mov	r0, r5
    7d08:	9400      	str	r4, [sp, #0]
    7d0a:	f8cd 4003 	str.w	r4, [sp, #3]
    7d0e:	f01b fc9a 	bl	23646 <memcmp>
    7d12:	2800      	cmp	r0, #0
    7d14:	d0bd      	beq.n	7c92 <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
    7d16:	79f4      	ldrb	r4, [r6, #7]
	id_create(new_id, addr, irk);
    7d18:	4629      	mov	r1, r5
	new_id = bt_dev.id_count++;
    7d1a:	1c63      	adds	r3, r4, #1
	id_create(new_id, addr, irk);
    7d1c:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
    7d1e:	71f3      	strb	r3, [r6, #7]
	id_create(new_id, addr, irk);
    7d20:	f7ff fdf6 	bl	7910 <id_create.isra.0>
	return new_id;
    7d24:	e7dc      	b.n	7ce0 <bt_id_create+0x58>
		return -ENOMEM;
    7d26:	f06f 040b 	mvn.w	r4, #11
    7d2a:	e7d9      	b.n	7ce0 <bt_id_create+0x58>
    7d2c:	0002393c 	.word	0x0002393c
    7d30:	00023a24 	.word	0x00023a24
    7d34:	000265d8 	.word	0x000265d8
    7d38:	20000000 	.word	0x20000000

00007d3c <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
    7d3c:	b570      	push	{r4, r5, r6, lr}
    7d3e:	b086      	sub	sp, #24
    7d40:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    7d42:	aa01      	add	r2, sp, #4
    7d44:	2100      	movs	r1, #0
    7d46:	f241 0009 	movw	r0, #4105	; 0x1009
    7d4a:	f7ff f8cf 	bl	6eec <bt_hci_cmd_send_sync>
	if (err) {
    7d4e:	4604      	mov	r4, r0
    7d50:	b160      	cbz	r0, 7d6c <bt_id_read_public_addr+0x30>
    7d52:	4919      	ldr	r1, [pc, #100]	; (7db8 <bt_id_read_public_addr+0x7c>)
    7d54:	4b19      	ldr	r3, [pc, #100]	; (7dbc <bt_id_read_public_addr+0x80>)
		BT_WARN("Failed to read public address");
    7d56:	481a      	ldr	r0, [pc, #104]	; (7dc0 <bt_id_read_public_addr+0x84>)
    7d58:	1ac9      	subs	r1, r1, r3
    7d5a:	08c9      	lsrs	r1, r1, #3
    7d5c:	0189      	lsls	r1, r1, #6
    7d5e:	f041 0102 	orr.w	r1, r1, #2
    7d62:	f016 fee9 	bl	1eb38 <log_0>

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
		return 0U;
    7d66:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
    7d68:	b006      	add	sp, #24
    7d6a:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    7d6c:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    7d6e:	9002      	str	r0, [sp, #8]
    7d70:	689d      	ldr	r5, [r3, #8]
    7d72:	f8ad 000c 	strh.w	r0, [sp, #12]
    7d76:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
    7d78:	2206      	movs	r2, #6
    7d7a:	a902      	add	r1, sp, #8
    7d7c:	4628      	mov	r0, r5
    7d7e:	f01b fc62 	bl	23646 <memcmp>
    7d82:	b918      	cbnz	r0, 7d8c <bt_id_read_public_addr+0x50>
		net_buf_unref(rsp);
    7d84:	9801      	ldr	r0, [sp, #4]
    7d86:	f012 f9f1 	bl	1a16c <net_buf_unref>
    7d8a:	e7ec      	b.n	7d66 <bt_id_read_public_addr+0x2a>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    7d8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7d90:	2206      	movs	r2, #6
    7d92:	a904      	add	r1, sp, #16
    7d94:	4628      	mov	r0, r5
    7d96:	9304      	str	r3, [sp, #16]
    7d98:	f8ad 3014 	strh.w	r3, [sp, #20]
    7d9c:	f01b fc53 	bl	23646 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    7da0:	2800      	cmp	r0, #0
    7da2:	d0ef      	beq.n	7d84 <bt_id_read_public_addr+0x48>
	bt_addr_copy(&addr->a, &rp->bdaddr);
    7da4:	4629      	mov	r1, r5
    7da6:	1c70      	adds	r0, r6, #1
    7da8:	f018 fe8e 	bl	20ac8 <bt_addr_copy>
	net_buf_unref(rsp);
    7dac:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    7dae:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
    7db0:	f012 f9dc 	bl	1a16c <net_buf_unref>
	return 1U;
    7db4:	2001      	movs	r0, #1
    7db6:	e7d7      	b.n	7d68 <bt_id_read_public_addr+0x2c>
    7db8:	00023a24 	.word	0x00023a24
    7dbc:	0002393c 	.word	0x0002393c
    7dc0:	00026606 	.word	0x00026606

00007dc4 <bt_setup_public_id_addr>:

void bt_setup_public_id_addr(void)
{
    7dc4:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
    7dc6:	4668      	mov	r0, sp
    7dc8:	f7ff ffb8 	bl	7d3c <bt_id_read_public_addr>
    7dcc:	4b04      	ldr	r3, [pc, #16]	; (7de0 <bt_setup_public_id_addr+0x1c>)
    7dce:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
    7dd0:	b118      	cbz	r0, 7dda <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	id_create(BT_ID_DEFAULT, &addr, irk);
    7dd2:	4669      	mov	r1, sp
    7dd4:	2000      	movs	r0, #0
    7dd6:	f7ff fd9b 	bl	7910 <id_create.isra.0>
}
    7dda:	b003      	add	sp, #12
    7ddc:	f85d fb04 	ldr.w	pc, [sp], #4
    7de0:	20000000 	.word	0x20000000

00007de4 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
    7de4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    7de6:	4b27      	ldr	r3, [pc, #156]	; (7e84 <bt_read_static_addr+0xa0>)
    7de8:	f893 4086 	ldrb.w	r4, [r3, #134]	; 0x86
    7dec:	f014 0401 	ands.w	r4, r4, #1
{
    7df0:	4605      	mov	r5, r0
    7df2:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    7df4:	d10a      	bne.n	7e0c <bt_read_static_addr+0x28>
    7df6:	4924      	ldr	r1, [pc, #144]	; (7e88 <bt_read_static_addr+0xa4>)
    7df8:	4b24      	ldr	r3, [pc, #144]	; (7e8c <bt_read_static_addr+0xa8>)
		BT_WARN("Read Static Addresses command not available");
    7dfa:	4825      	ldr	r0, [pc, #148]	; (7e90 <bt_read_static_addr+0xac>)
    7dfc:	1ac9      	subs	r1, r1, r3
    7dfe:	08c9      	lsrs	r1, r1, #3
    7e00:	0189      	lsls	r1, r1, #6
    7e02:	f041 0102 	orr.w	r1, r1, #2
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
	}

	net_buf_unref(rsp);
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
    7e06:	f016 fe97 	bl	1eb38 <log_0>
    7e0a:	e012      	b.n	7e32 <bt_read_static_addr+0x4e>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    7e0c:	aa01      	add	r2, sp, #4
    7e0e:	2100      	movs	r1, #0
    7e10:	f64f 4009 	movw	r0, #64521	; 0xfc09
    7e14:	f7ff f86a 	bl	6eec <bt_hci_cmd_send_sync>
	if (err) {
    7e18:	4603      	mov	r3, r0
    7e1a:	b168      	cbz	r0, 7e38 <bt_read_static_addr+0x54>
    7e1c:	4b1b      	ldr	r3, [pc, #108]	; (7e8c <bt_read_static_addr+0xa8>)
    7e1e:	491a      	ldr	r1, [pc, #104]	; (7e88 <bt_read_static_addr+0xa4>)
		BT_WARN("Failed to read static addresses");
    7e20:	481c      	ldr	r0, [pc, #112]	; (7e94 <bt_read_static_addr+0xb0>)
    7e22:	1ac9      	subs	r1, r1, r3
    7e24:	08c9      	lsrs	r1, r1, #3
    7e26:	0189      	lsls	r1, r1, #6
    7e28:	f041 0102 	orr.w	r1, r1, #2
    7e2c:	f016 fe84 	bl	1eb38 <log_0>
		return 0;
    7e30:	2400      	movs	r4, #0
	}

	return cnt;
}
    7e32:	4620      	mov	r0, r4
    7e34:	b003      	add	sp, #12
    7e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = (void *)rsp->data;
    7e38:	9801      	ldr	r0, [sp, #4]
    7e3a:	6882      	ldr	r2, [r0, #8]
	cnt = MIN(rp->num_addrs, size);
    7e3c:	7854      	ldrb	r4, [r2, #1]
    7e3e:	f04f 0c16 	mov.w	ip, #22
    7e42:	42b4      	cmp	r4, r6
    7e44:	bf28      	it	cs
    7e46:	4634      	movcs	r4, r6
    7e48:	eb02 070c 	add.w	r7, r2, ip
	for (i = 0; i < cnt; i++) {
    7e4c:	42a3      	cmp	r3, r4
    7e4e:	db0c      	blt.n	7e6a <bt_read_static_addr+0x86>
	net_buf_unref(rsp);
    7e50:	f012 f98c 	bl	1a16c <net_buf_unref>
	if (!cnt) {
    7e54:	2c00      	cmp	r4, #0
    7e56:	d1ec      	bne.n	7e32 <bt_read_static_addr+0x4e>
    7e58:	490b      	ldr	r1, [pc, #44]	; (7e88 <bt_read_static_addr+0xa4>)
    7e5a:	4b0c      	ldr	r3, [pc, #48]	; (7e8c <bt_read_static_addr+0xa8>)
		BT_WARN("No static addresses stored in controller");
    7e5c:	480e      	ldr	r0, [pc, #56]	; (7e98 <bt_read_static_addr+0xb4>)
    7e5e:	1ac9      	subs	r1, r1, r3
    7e60:	08c9      	lsrs	r1, r1, #3
    7e62:	0189      	lsls	r1, r1, #6
    7e64:	f041 0102 	orr.w	r1, r1, #2
    7e68:	e7cd      	b.n	7e06 <bt_read_static_addr+0x22>
    7e6a:	1c96      	adds	r6, r2, #2
    7e6c:	fb0c 5103 	mla	r1, ip, r3, r5
    7e70:	f856 eb04 	ldr.w	lr, [r6], #4
    7e74:	f841 eb04 	str.w	lr, [r1], #4
    7e78:	42be      	cmp	r6, r7
    7e7a:	d1f9      	bne.n	7e70 <bt_read_static_addr+0x8c>
    7e7c:	883e      	ldrh	r6, [r7, #0]
    7e7e:	800e      	strh	r6, [r1, #0]
	for (i = 0; i < cnt; i++) {
    7e80:	3301      	adds	r3, #1
    7e82:	e7e3      	b.n	7e4c <bt_read_static_addr+0x68>
    7e84:	20000000 	.word	0x20000000
    7e88:	00023a24 	.word	0x00023a24
    7e8c:	0002393c 	.word	0x0002393c
    7e90:	00026624 	.word	0x00026624
    7e94:	00026650 	.word	0x00026650
    7e98:	00026670 	.word	0x00026670

00007e9c <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
    7e9c:	b570      	push	{r4, r5, r6, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
    7e9e:	4d13      	ldr	r5, [pc, #76]	; (7eec <bt_setup_random_id_addr+0x50>)
    7ea0:	79ec      	ldrb	r4, [r5, #7]
{
    7ea2:	b088      	sub	sp, #32
	if (!bt_dev.id_count) {
    7ea4:	b9ec      	cbnz	r4, 7ee2 <bt_setup_random_id_addr+0x46>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    7ea6:	2101      	movs	r1, #1
    7ea8:	a802      	add	r0, sp, #8
    7eaa:	f7ff ff9b 	bl	7de4 <bt_read_static_addr>
    7eae:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
    7eb0:	b1b8      	cbz	r0, 7ee2 <bt_setup_random_id_addr+0x46>
					atomic_set_bit(bt_dev.flags,
						       BT_DEV_STORE_ID);
				}
#endif /* CONFIG_BT_PRIVACY */

				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    7eb2:	2616      	movs	r6, #22
    7eb4:	e00e      	b.n	7ed4 <bt_setup_random_id_addr+0x38>
    7eb6:	ab02      	add	r3, sp, #8
    7eb8:	fb06 3102 	mla	r1, r6, r2, r3
    7ebc:	f10d 0001 	add.w	r0, sp, #1
    7ec0:	f018 fe02 	bl	20ac8 <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
    7ec4:	2301      	movs	r3, #1

				id_create(i, &addr, irk);
    7ec6:	4669      	mov	r1, sp
    7ec8:	4610      	mov	r0, r2
				addr.type = BT_ADDR_LE_RANDOM;
    7eca:	f88d 3000 	strb.w	r3, [sp]
				id_create(i, &addr, irk);
    7ece:	f7ff fd1f 	bl	7910 <id_create.isra.0>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    7ed2:	3401      	adds	r4, #1
    7ed4:	79eb      	ldrb	r3, [r5, #7]
    7ed6:	b2e2      	uxtb	r2, r4
    7ed8:	4293      	cmp	r3, r2
    7eda:	d8ec      	bhi.n	7eb6 <bt_setup_random_id_addr+0x1a>
			}

			return 0;
    7edc:	2000      	movs	r0, #0
	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
}
    7ede:	b008      	add	sp, #32
    7ee0:	bd70      	pop	{r4, r5, r6, pc}
	return bt_id_create(NULL, NULL);
    7ee2:	2100      	movs	r1, #0
    7ee4:	4608      	mov	r0, r1
    7ee6:	f7ff fecf 	bl	7c88 <bt_id_create>
    7eea:	e7f8      	b.n	7ede <bt_setup_random_id_addr+0x42>
    7eec:	20000000 	.word	0x20000000

00007ef0 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
    7ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    7ef4:	f011 0401 	ands.w	r4, r1, #1
	id_addr = &bt_dev.id_addr[adv->id];
    7ef8:	7805      	ldrb	r5, [r0, #0]
{
    7efa:	460e      	mov	r6, r1
    7efc:	4690      	mov	r8, r2
    7efe:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    7f00:	d026      	beq.n	7f50 <bt_id_set_adv_own_addr+0x60>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    7f02:	4c22      	ldr	r4, [pc, #136]	; (7f8c <bt_id_set_adv_own_addr+0x9c>)
    7f04:	b12a      	cbz	r2, 7f12 <bt_id_set_adv_own_addr+0x22>
    7f06:	0688      	lsls	r0, r1, #26
    7f08:	d503      	bpl.n	7f12 <bt_id_set_adv_own_addr+0x22>
    7f0a:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
    7f0e:	0659      	lsls	r1, r3, #25
    7f10:	d539      	bpl.n	7f86 <bt_id_set_adv_own_addr+0x96>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    7f12:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    7f16:	ea4f 09c5 	mov.w	r9, r5, lsl #3
    7f1a:	5ce3      	ldrb	r3, [r4, r3]
    7f1c:	2b01      	cmp	r3, #1
    7f1e:	d008      	beq.n	7f32 <bt_id_set_adv_own_addr+0x42>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
    7f20:	eba9 0505 	sub.w	r5, r9, r5
    7f24:	5d63      	ldrb	r3, [r4, r5]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    7f26:	f1b8 0f00 	cmp.w	r8, #0
    7f2a:	d10c      	bne.n	7f46 <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    7f2c:	703b      	strb	r3, [r7, #0]
		if (err) {
			return err;
		}
	}

	return 0;
    7f2e:	2000      	movs	r0, #0
    7f30:	e007      	b.n	7f42 <bt_id_set_adv_own_addr+0x52>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    7f32:	2007      	movs	r0, #7
    7f34:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    7f38:	4420      	add	r0, r4
    7f3a:	f7ff fcbb 	bl	78b4 <set_random_address>
				if (err) {
    7f3e:	2800      	cmp	r0, #0
    7f40:	d0ee      	beq.n	7f20 <bt_id_set_adv_own_addr+0x30>
}
    7f42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    7f46:	06b2      	lsls	r2, r6, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    7f48:	bf48      	it	mi
    7f4a:	f043 0302 	orrmi.w	r3, r3, #2
    7f4e:	e7ed      	b.n	7f2c <bt_id_set_adv_own_addr+0x3c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    7f50:	074b      	lsls	r3, r1, #29
    7f52:	d514      	bpl.n	7f7e <bt_id_set_adv_own_addr+0x8e>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    7f54:	4e0d      	ldr	r6, [pc, #52]	; (7f8c <bt_id_set_adv_own_addr+0x9c>)
    7f56:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    7f5a:	ea4f 08c5 	mov.w	r8, r5, lsl #3
    7f5e:	5cf3      	ldrb	r3, [r6, r3]
    7f60:	2b01      	cmp	r3, #1
    7f62:	d10a      	bne.n	7f7a <bt_id_set_adv_own_addr+0x8a>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    7f64:	2007      	movs	r0, #7
    7f66:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    7f6a:	4430      	add	r0, r6
    7f6c:	f7ff fca2 	bl	78b4 <set_random_address>
			*own_addr_type = id_addr->type;
    7f70:	eba8 0505 	sub.w	r5, r8, r5
    7f74:	5d73      	ldrb	r3, [r6, r5]
			*own_addr_type = BT_ADDR_LE_RANDOM;
    7f76:	703b      	strb	r3, [r7, #0]
		if (err) {
    7f78:	e7e3      	b.n	7f42 <bt_id_set_adv_own_addr+0x52>
	int err = 0;
    7f7a:	4620      	mov	r0, r4
    7f7c:	e7f8      	b.n	7f70 <bt_id_set_adv_own_addr+0x80>
			err = bt_id_set_adv_private_addr(adv);
    7f7e:	f018 fe06 	bl	20b8e <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    7f82:	2301      	movs	r3, #1
    7f84:	e7f7      	b.n	7f76 <bt_id_set_adv_own_addr+0x86>
			return -ENOTSUP;
    7f86:	f06f 0085 	mvn.w	r0, #133	; 0x85
    7f8a:	e7da      	b.n	7f42 <bt_id_set_adv_own_addr+0x52>
    7f8c:	20000000 	.word	0x20000000

00007f90 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
    7f90:	b538      	push	{r3, r4, r5, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    7f92:	4d14      	ldr	r5, [pc, #80]	; (7fe4 <bt_id_init+0x54>)
    7f94:	79eb      	ldrb	r3, [r5, #7]
    7f96:	b113      	cbz	r3, 7f9e <bt_id_init+0xe>

#if defined(CONFIG_BT_PRIVACY)
	k_delayed_work_init(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
    7f98:	2400      	movs	r4, #0
}
    7f9a:	4620      	mov	r0, r4
    7f9c:	bd38      	pop	{r3, r4, r5, pc}
		bt_setup_public_id_addr();
    7f9e:	f7ff ff11 	bl	7dc4 <bt_setup_public_id_addr>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    7fa2:	79eb      	ldrb	r3, [r5, #7]
    7fa4:	2b00      	cmp	r3, #0
    7fa6:	d1f7      	bne.n	7f98 <bt_id_init+0x8>
		err = bt_setup_random_id_addr();
    7fa8:	f7ff ff78 	bl	7e9c <bt_setup_random_id_addr>
		if (err) {
    7fac:	4604      	mov	r4, r0
    7fae:	b150      	cbz	r0, 7fc6 <bt_id_init+0x36>
    7fb0:	490d      	ldr	r1, [pc, #52]	; (7fe8 <bt_id_init+0x58>)
    7fb2:	4b0e      	ldr	r3, [pc, #56]	; (7fec <bt_id_init+0x5c>)
			BT_ERR("Unable to set identity address");
    7fb4:	480e      	ldr	r0, [pc, #56]	; (7ff0 <bt_id_init+0x60>)
    7fb6:	1ac9      	subs	r1, r1, r3
    7fb8:	08c9      	lsrs	r1, r1, #3
    7fba:	0189      	lsls	r1, r1, #6
    7fbc:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Unable to set random address");
    7fc0:	f016 fdba 	bl	1eb38 <log_0>
			return err;
    7fc4:	e7e9      	b.n	7f9a <bt_id_init+0xa>
		err = set_random_address(&bt_dev.id_addr[0].a);
    7fc6:	1c68      	adds	r0, r5, #1
    7fc8:	f7ff fc74 	bl	78b4 <set_random_address>
		if (err) {
    7fcc:	4604      	mov	r4, r0
    7fce:	2800      	cmp	r0, #0
    7fd0:	d0e3      	beq.n	7f9a <bt_id_init+0xa>
    7fd2:	4905      	ldr	r1, [pc, #20]	; (7fe8 <bt_id_init+0x58>)
    7fd4:	4b05      	ldr	r3, [pc, #20]	; (7fec <bt_id_init+0x5c>)
			BT_ERR("Unable to set random address");
    7fd6:	4807      	ldr	r0, [pc, #28]	; (7ff4 <bt_id_init+0x64>)
    7fd8:	1ac9      	subs	r1, r1, r3
    7fda:	08c9      	lsrs	r1, r1, #3
    7fdc:	0189      	lsls	r1, r1, #6
    7fde:	f041 0101 	orr.w	r1, r1, #1
    7fe2:	e7ed      	b.n	7fc0 <bt_id_init+0x30>
    7fe4:	20000000 	.word	0x20000000
    7fe8:	00023a24 	.word	0x00023a24
    7fec:	0002393c 	.word	0x0002393c
    7ff0:	00026699 	.word	0x00026699
    7ff4:	000266b8 	.word	0x000266b8

00007ff8 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    7ff8:	6843      	ldr	r3, [r0, #4]
{
    7ffa:	b537      	push	{r0, r1, r2, r4, r5, lr}
    7ffc:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    7ffe:	0558      	lsls	r0, r3, #21
    8000:	d502      	bpl.n	8008 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8>
		return false;
    8002:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
    8004:	b003      	add	sp, #12
    8006:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    8008:	6922      	ldr	r2, [r4, #16]
    800a:	b10a      	cbz	r2, 8010 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x10>
    800c:	07d9      	lsls	r1, r3, #31
    800e:	d5f8      	bpl.n	8002 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2>
	if (param->id >= bt_dev.id_count ||
    8010:	4d1a      	ldr	r5, [pc, #104]	; (807c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7c>)
    8012:	7820      	ldrb	r0, [r4, #0]
    8014:	79eb      	ldrb	r3, [r5, #7]
    8016:	4283      	cmp	r3, r0
    8018:	d9f3      	bls.n	8002 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    801a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    801e:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    8020:	2207      	movs	r2, #7
    8022:	4669      	mov	r1, sp
    8024:	4428      	add	r0, r5
    8026:	9300      	str	r3, [sp, #0]
    8028:	f8cd 3003 	str.w	r3, [sp, #3]
    802c:	f01b fb0b 	bl	23646 <memcmp>
	if (param->id >= bt_dev.id_count ||
    8030:	2800      	cmp	r0, #0
    8032:	d0e6      	beq.n	8002 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    8034:	6860      	ldr	r0, [r4, #4]
    8036:	07c2      	lsls	r2, r0, #31
    8038:	d406      	bmi.n	8048 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x48>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    803a:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    803e:	2b08      	cmp	r3, #8
    8040:	d802      	bhi.n	8048 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x48>
    8042:	68a3      	ldr	r3, [r4, #8]
    8044:	2b9f      	cmp	r3, #159	; 0x9f
    8046:	d9dc      	bls.n	8002 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
    8048:	f010 0f30 	tst.w	r0, #48	; 0x30
    804c:	d002      	beq.n	8054 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x54>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
    804e:	6923      	ldr	r3, [r4, #16]
    8050:	2b00      	cmp	r3, #0
    8052:	d0d6      	beq.n	8002 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    8054:	06c3      	lsls	r3, r0, #27
    8056:	d401      	bmi.n	805c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5c>
    8058:	6923      	ldr	r3, [r4, #16]
    805a:	b943      	cbnz	r3, 806e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6e>
		if (param->interval_min > param->interval_max ||
    805c:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    8060:	429a      	cmp	r2, r3
    8062:	d8ce      	bhi.n	8002 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2>
    8064:	2a1f      	cmp	r2, #31
    8066:	d9cc      	bls.n	8002 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2>
		    param->interval_min < 0x0020 ||
    8068:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    806c:	d8c9      	bhi.n	8002 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    806e:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    8072:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
    8076:	bf18      	it	ne
    8078:	2001      	movne	r0, #1
    807a:	e7c3      	b.n	8004 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4>
    807c:	20000000 	.word	0x20000000

00008080 <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
    8080:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8084:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    8086:	2120      	movs	r1, #32
{
    8088:	4682      	mov	sl, r0
    808a:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    808c:	f7fe fdca 	bl	6c24 <bt_hci_cmd_create>
	if (!buf) {
    8090:	4606      	mov	r6, r0
    8092:	2800      	cmp	r0, #0
    8094:	d05c      	beq.n	8150 <hci_set_ad+0xd0>
    8096:	2120      	movs	r1, #32
    8098:	3008      	adds	r0, #8
    809a:	f01a faca 	bl	22632 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
    809e:	2220      	movs	r2, #32
    80a0:	2100      	movs	r1, #0
    80a2:	4681      	mov	r9, r0
    80a4:	f01b faeb 	bl	2367e <memset>
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));

	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    80a8:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
    80ac:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
    80b0:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
    80b2:	2500      	movs	r5, #0
		for (size_t j = 0; j < ad[i].len; j++) {
    80b4:	f8d4 8000 	ldr.w	r8, [r4]
    80b8:	2300      	movs	r3, #0
    80ba:	6862      	ldr	r2, [r4, #4]
    80bc:	4293      	cmp	r3, r2
    80be:	d30d      	bcc.n	80dc <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
    80c0:	9b00      	ldr	r3, [sp, #0]
    80c2:	3408      	adds	r4, #8
    80c4:	429c      	cmp	r4, r3
    80c6:	d1f5      	bne.n	80b4 <hci_set_ad+0x34>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    80c8:	2200      	movs	r2, #0
    80ca:	4631      	mov	r1, r6
    80cc:	4650      	mov	r0, sl
	*data_len = set_data_len;
    80ce:	f889 5000 	strb.w	r5, [r9]
}
    80d2:	b003      	add	sp, #12
    80d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    80d8:	f7fe bf08 	b.w	6eec <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
    80dc:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
    80e0:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
    80e4:	1ca8      	adds	r0, r5, #2
    80e6:	1811      	adds	r1, r2, r0
    80e8:	291f      	cmp	r1, #31
    80ea:	d91a      	bls.n	8122 <hci_set_ad+0xa2>
				if (!(type == BT_DATA_NAME_COMPLETE &&
    80ec:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
    80f0:	f1c5 021d 	rsb	r2, r5, #29
				if (!(type == BT_DATA_NAME_COMPLETE &&
    80f4:	d101      	bne.n	80fa <hci_set_ad+0x7a>
    80f6:	2a00      	cmp	r2, #0
    80f8:	dc11      	bgt.n	811e <hci_set_ad+0x9e>
    80fa:	4b17      	ldr	r3, [pc, #92]	; (8158 <hci_set_ad+0xd8>)
    80fc:	4917      	ldr	r1, [pc, #92]	; (815c <hci_set_ad+0xdc>)
					BT_ERR("Too big advertising data");
    80fe:	4818      	ldr	r0, [pc, #96]	; (8160 <hci_set_ad+0xe0>)
    8100:	1ac9      	subs	r1, r1, r3
    8102:	08c9      	lsrs	r1, r1, #3
    8104:	0189      	lsls	r1, r1, #6
    8106:	f041 0101 	orr.w	r1, r1, #1
    810a:	f016 fd15 	bl	1eb38 <log_0>
		net_buf_unref(buf);
    810e:	4630      	mov	r0, r6
    8110:	f012 f82c 	bl	1a16c <net_buf_unref>
					return -EINVAL;
    8114:	f06f 0015 	mvn.w	r0, #21
}
    8118:	b003      	add	sp, #12
    811a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
    811e:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
    8122:	b2d7      	uxtb	r7, r2
    8124:	1c79      	adds	r1, r7, #1
    8126:	f80b 1005 	strb.w	r1, [fp, r5]
    812a:	1c69      	adds	r1, r5, #1
			set_data[set_data_len++] = type;
    812c:	b2c9      	uxtb	r1, r1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    812e:	fa5b f080 	uxtab	r0, fp, r0
    8132:	f80b c001 	strb.w	ip, [fp, r1]
    8136:	f8d8 1004 	ldr.w	r1, [r8, #4]
    813a:	9301      	str	r3, [sp, #4]
			set_data_len += len;
    813c:	3702      	adds	r7, #2
    813e:	f01b fa90 	bl	23662 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
    8142:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
    8144:	443d      	add	r5, r7
    8146:	b2ed      	uxtb	r5, r5
		for (size_t j = 0; j < ad[i].len; j++) {
    8148:	3301      	adds	r3, #1
    814a:	f108 0808 	add.w	r8, r8, #8
    814e:	e7b4      	b.n	80ba <hci_set_ad+0x3a>
		return -ENOBUFS;
    8150:	f06f 0068 	mvn.w	r0, #104	; 0x68
    8154:	e7e0      	b.n	8118 <hci_set_ad+0x98>
    8156:	bf00      	nop
    8158:	0002393c 	.word	0x0002393c
    815c:	0002393c 	.word	0x0002393c
    8160:	000266db 	.word	0x000266db

00008164 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
    8164:	b5f0      	push	{r4, r5, r6, r7, lr}
    8166:	4605      	mov	r5, r0
	struct bt_adv_id_check_data check_data = {
		.id = adv->id,
    8168:	7802      	ldrb	r2, [r0, #0]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    816a:	4827      	ldr	r0, [pc, #156]	; (8208 <le_adv_start_add_conn+0xa4>)
{
    816c:	b085      	sub	sp, #20
    816e:	460f      	mov	r7, r1
    8170:	f018 fd40 	bl	20bf4 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
    8174:	f010 0f40 	tst.w	r0, #64	; 0x40
    8178:	4b24      	ldr	r3, [pc, #144]	; (820c <le_adv_start_add_conn+0xa8>)
    817a:	d008      	beq.n	818e <le_adv_start_add_conn+0x2a>
    817c:	f103 0028 	add.w	r0, r3, #40	; 0x28
    8180:	f018 fd38 	bl	20bf4 <atomic_get>
    8184:	05c1      	lsls	r1, r0, #23
    8186:	d502      	bpl.n	818e <le_adv_start_add_conn+0x2a>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE) &&
    8188:	7e19      	ldrb	r1, [r3, #24]
    818a:	4291      	cmp	r1, r2
    818c:	d132      	bne.n	81f4 <le_adv_start_add_conn+0x90>
	bt_le_ext_adv_foreach(adv_id_check_connectable_func, &check_data);
	if (check_data.adv_enabled) {
		return -ENOTSUP;
	}

	bt_dev.adv_conn_id = adv->id;
    818e:	462e      	mov	r6, r5
    8190:	4669      	mov	r1, sp
    8192:	f816 2b09 	ldrb.w	r2, [r6], #9
    8196:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    819a:	4630      	mov	r0, r6

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    819c:	2300      	movs	r3, #0
    819e:	2207      	movs	r2, #7
    81a0:	9300      	str	r3, [sp, #0]
    81a2:	f8cd 3003 	str.w	r3, [sp, #3]
    81a6:	f01b fa4e 	bl	23646 <memcmp>
    81aa:	4604      	mov	r4, r0
    81ac:	7828      	ldrb	r0, [r5, #0]
    81ae:	b164      	cbz	r4, 81ca <le_adv_start_add_conn+0x66>
		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
		*out_conn = conn;
		return 0;
	}

	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    81b0:	4631      	mov	r1, r6
    81b2:	f000 fefb 	bl	8fac <bt_conn_exists_le>
    81b6:	4604      	mov	r4, r0
    81b8:	b9f8      	cbnz	r0, 81fa <le_adv_start_add_conn+0x96>
		return -EINVAL;
	}

	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    81ba:	7828      	ldrb	r0, [r5, #0]
    81bc:	4631      	mov	r1, r6
    81be:	f000 fdab 	bl	8d18 <bt_conn_add_le>
	if (!conn) {
    81c2:	4605      	mov	r5, r0
    81c4:	b1e0      	cbz	r0, 8200 <le_adv_start_add_conn+0x9c>
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    81c6:	2105      	movs	r1, #5
    81c8:	e00e      	b.n	81e8 <le_adv_start_add_conn+0x84>
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    81ca:	f06f 03ff 	mvn.w	r3, #255	; 0xff
    81ce:	9302      	str	r3, [sp, #8]
    81d0:	a902      	add	r1, sp, #8
    81d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    81d6:	f8ad 300c 	strh.w	r3, [sp, #12]
    81da:	f88d 300e 	strb.w	r3, [sp, #14]
    81de:	f000 fd9b 	bl	8d18 <bt_conn_add_le>
		if (!conn) {
    81e2:	4605      	mov	r5, r0
    81e4:	b160      	cbz	r0, 8200 <le_adv_start_add_conn+0x9c>
		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
    81e6:	2104      	movs	r1, #4
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    81e8:	f000 fdd0 	bl	8d8c <bt_conn_set_state>
	*out_conn = conn;
    81ec:	603d      	str	r5, [r7, #0]
	return 0;
}
    81ee:	4620      	mov	r0, r4
    81f0:	b005      	add	sp, #20
    81f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOTSUP;
    81f4:	f06f 0485 	mvn.w	r4, #133	; 0x85
    81f8:	e7f9      	b.n	81ee <le_adv_start_add_conn+0x8a>
		return -EINVAL;
    81fa:	f06f 0415 	mvn.w	r4, #21
    81fe:	e7f6      	b.n	81ee <le_adv_start_add_conn+0x8a>
		return -ENOMEM;
    8200:	f06f 040b 	mvn.w	r4, #11
    8204:	e7f3      	b.n	81ee <le_adv_start_add_conn+0x8a>
    8206:	bf00      	nop
    8208:	20000028 	.word	0x20000028
    820c:	20000000 	.word	0x20000000

00008210 <bt_le_ext_adv_foreach>:
{
    8210:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
    8212:	4801      	ldr	r0, [pc, #4]	; (8218 <bt_le_ext_adv_foreach+0x8>)
    8214:	4718      	bx	r3
    8216:	bf00      	nop
    8218:	20000018 	.word	0x20000018

0000821c <bt_le_adv_lookup_legacy>:
}
    821c:	4800      	ldr	r0, [pc, #0]	; (8220 <bt_le_adv_lookup_legacy+0x4>)
    821e:	4770      	bx	lr
    8220:	20000018 	.word	0x20000018

00008224 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
    8224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable;
    8228:	690e      	ldr	r6, [r1, #16]
{
    822a:	b08d      	sub	sp, #52	; 0x34
    822c:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
    822e:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable;
    8230:	ebb6 0b03 	subs.w	fp, r6, r3
{
    8234:	4605      	mov	r5, r0
    8236:	4886      	ldr	r0, [pc, #536]	; (8450 <bt_le_adv_start_legacy+0x22c>)
	struct bt_conn *conn = NULL;
    8238:	9305      	str	r3, [sp, #20]
	bool dir_adv = (param->peer != NULL), scannable;
    823a:	bf18      	it	ne
    823c:	f04f 0b01 	movne.w	fp, #1
{
    8240:	460c      	mov	r4, r1
    8242:	4691      	mov	r9, r2
    8244:	f018 fcd6 	bl	20bf4 <atomic_get>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    8248:	0787      	lsls	r7, r0, #30
    824a:	f140 80f5 	bpl.w	8438 <bt_le_adv_start_legacy+0x214>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
    824e:	4608      	mov	r0, r1
    8250:	f7ff fed2 	bl	7ff8 <valid_adv_param>
    8254:	b928      	cbnz	r0, 8262 <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
    8256:	f06f 0b15 	mvn.w	fp, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
    825a:	4658      	mov	r0, fp
    825c:	b00d      	add	sp, #52	; 0x34
    825e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
    8262:	4620      	mov	r0, r4
    8264:	f018 fca5 	bl	20bb2 <bt_id_adv_random_addr_check>
    8268:	4607      	mov	r7, r0
    826a:	2800      	cmp	r0, #0
    826c:	d0f3      	beq.n	8256 <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    826e:	f105 0810 	add.w	r8, r5, #16
    8272:	4640      	mov	r0, r8
    8274:	f018 fcbe 	bl	20bf4 <atomic_get>
    8278:	f3c0 1380 	ubfx	r3, r0, #6, #1
    827c:	0640      	lsls	r0, r0, #25
    827e:	f100 80de 	bmi.w	843e <bt_le_adv_start_legacy+0x21a>
	(void)memset(&set_param, 0, sizeof(set_param));
    8282:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    8286:	f8cd 302b 	str.w	r3, [sp, #43]	; 0x2b
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    828a:	68a3      	ldr	r3, [r4, #8]
    828c:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.channel_map  = get_adv_channel_map(param->options);
    8290:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    8292:	68e3      	ldr	r3, [r4, #12]
    8294:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
    8298:	f018 fc9d 	bl	20bd6 <get_adv_channel_map>
	if (adv->id != param->id) {
    829c:	782a      	ldrb	r2, [r5, #0]
    829e:	7823      	ldrb	r3, [r4, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
    82a0:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	if (adv->id != param->id) {
    82a4:	429a      	cmp	r2, r3
    82a6:	d004      	beq.n	82b2 <bt_le_adv_start_legacy+0x8e>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    82a8:	4869      	ldr	r0, [pc, #420]	; (8450 <bt_le_adv_start_legacy+0x22c>)
    82aa:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    82ae:	f018 fca7 	bl	20c00 <atomic_and>
	bt_dev.adv_conn_id = adv->id;
    82b2:	4a68      	ldr	r2, [pc, #416]	; (8454 <bt_le_adv_start_legacy+0x230>)
	adv->id = param->id;
    82b4:	7823      	ldrb	r3, [r4, #0]
    82b6:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
    82b8:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
    82bc:	6861      	ldr	r1, [r4, #4]
    82be:	465a      	mov	r2, fp
    82c0:	f10d 0325 	add.w	r3, sp, #37	; 0x25
    82c4:	4628      	mov	r0, r5
    82c6:	f7ff fe13 	bl	7ef0 <bt_id_set_adv_own_addr>
	if (err) {
    82ca:	4683      	mov	fp, r0
    82cc:	2800      	cmp	r0, #0
    82ce:	d1c4      	bne.n	825a <bt_le_adv_start_legacy+0x36>
	if (dir_adv) {
    82d0:	f105 0009 	add.w	r0, r5, #9
    82d4:	2e00      	cmp	r6, #0
    82d6:	d04a      	beq.n	836e <bt_le_adv_start_legacy+0x14a>
		bt_addr_le_copy(&adv->target_addr, param->peer);
    82d8:	6921      	ldr	r1, [r4, #16]
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    82da:	f018 fca0 	bl	20c1e <bt_addr_le_copy>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    82de:	6860      	ldr	r0, [r4, #4]
    82e0:	07c1      	lsls	r1, r0, #31
    82e2:	d54c      	bpl.n	837e <bt_le_adv_start_legacy+0x15a>
		if (dir_adv) {
    82e4:	2e00      	cmp	r6, #0
    82e6:	d047      	beq.n	8378 <bt_le_adv_start_legacy+0x154>
				set_param.type = BT_HCI_ADV_DIRECT_IND;
    82e8:	f010 0f10 	tst.w	r0, #16
    82ec:	bf14      	ite	ne
    82ee:	2304      	movne	r3, #4
    82f0:	2301      	moveq	r3, #1
			bt_addr_le_copy(&set_param.direct_addr, param->peer);
    82f2:	6921      	ldr	r1, [r4, #16]
    82f4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    82f8:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    82fc:	f018 fc8f 	bl	20c1e <bt_addr_le_copy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    8300:	210f      	movs	r1, #15
    8302:	f242 0006 	movw	r0, #8198	; 0x2006
    8306:	f7fe fc8d 	bl	6c24 <bt_hci_cmd_create>
	if (!buf) {
    830a:	4683      	mov	fp, r0
    830c:	2800      	cmp	r0, #0
    830e:	f000 8099 	beq.w	8444 <bt_le_adv_start_legacy+0x220>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    8312:	220f      	movs	r2, #15
    8314:	a908      	add	r1, sp, #32
    8316:	3008      	adds	r0, #8
    8318:	f01a f991 	bl	2263e <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    831c:	2200      	movs	r2, #0
    831e:	4659      	mov	r1, fp
    8320:	f242 0006 	movw	r0, #8198	; 0x2006
    8324:	f7fe fde2 	bl	6eec <bt_hci_cmd_send_sync>
	if (err) {
    8328:	2800      	cmp	r0, #0
    832a:	f040 808e 	bne.w	844a <bt_le_adv_start_legacy+0x226>
	if (!dir_adv) {
    832e:	b38e      	cbz	r6, 8394 <bt_le_adv_start_legacy+0x170>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    8330:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    8332:	07da      	lsls	r2, r3, #31
    8334:	d43f      	bmi.n	83b6 <bt_le_adv_start_legacy+0x192>
	return bt_le_adv_set_enable_legacy(adv, enable);
    8336:	2101      	movs	r1, #1
    8338:	4628      	mov	r0, r5
    833a:	f018 fd0a 	bl	20d52 <bt_le_adv_set_enable_legacy>
	if (err) {
    833e:	4683      	mov	fp, r0
    8340:	2800      	cmp	r0, #0
    8342:	d072      	beq.n	842a <bt_le_adv_start_legacy+0x206>
    8344:	4b44      	ldr	r3, [pc, #272]	; (8458 <bt_le_adv_start_legacy+0x234>)
    8346:	4945      	ldr	r1, [pc, #276]	; (845c <bt_le_adv_start_legacy+0x238>)
		BT_ERR("Failed to start advertiser");
    8348:	4845      	ldr	r0, [pc, #276]	; (8460 <bt_le_adv_start_legacy+0x23c>)
    834a:	1ac9      	subs	r1, r1, r3
    834c:	08c9      	lsrs	r1, r1, #3
    834e:	0189      	lsls	r1, r1, #6
    8350:	f041 0101 	orr.w	r1, r1, #1
    8354:	f016 fbf0 	bl	1eb38 <log_0>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    8358:	9805      	ldr	r0, [sp, #20]
    835a:	2800      	cmp	r0, #0
    835c:	f43f af7d 	beq.w	825a <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    8360:	2100      	movs	r1, #0
    8362:	f000 fd13 	bl	8d8c <bt_conn_set_state>
			bt_conn_unref(conn);
    8366:	9805      	ldr	r0, [sp, #20]
    8368:	f018 fde0 	bl	20f2c <bt_conn_unref>
    836c:	e775      	b.n	825a <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    836e:	9606      	str	r6, [sp, #24]
    8370:	a906      	add	r1, sp, #24
    8372:	f8cd 601b 	str.w	r6, [sp, #27]
    8376:	e7b0      	b.n	82da <bt_le_adv_start_legacy+0xb6>
			set_param.type = BT_HCI_ADV_IND;
    8378:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
    837c:	e7c0      	b.n	8300 <bt_le_adv_start_legacy+0xdc>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
    837e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    8380:	b933      	cbnz	r3, 8390 <bt_le_adv_start_legacy+0x16c>
    8382:	f3c0 07c0 	ubfx	r7, r0, #3, #1
		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
    8386:	f1c7 0303 	rsb	r3, r7, #3
    838a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    838e:	e7b7      	b.n	8300 <bt_le_adv_start_legacy+0xdc>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
    8390:	2701      	movs	r7, #1
    8392:	e7f8      	b.n	8386 <bt_le_adv_start_legacy+0x162>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
    8394:	6863      	ldr	r3, [r4, #4]
    8396:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    839a:	e9cd 7301 	strd	r7, r3, [sp, #4]
    839e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    83a0:	9300      	str	r3, [sp, #0]
    83a2:	4652      	mov	r2, sl
    83a4:	9b16      	ldr	r3, [sp, #88]	; 0x58
    83a6:	4649      	mov	r1, r9
    83a8:	4628      	mov	r0, r5
    83aa:	f018 fc56 	bl	20c5a <le_adv_update.constprop.0>
		if (err) {
    83ae:	4683      	mov	fp, r0
    83b0:	2800      	cmp	r0, #0
    83b2:	d0bd      	beq.n	8330 <bt_le_adv_start_legacy+0x10c>
    83b4:	e751      	b.n	825a <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
    83b6:	a905      	add	r1, sp, #20
    83b8:	4628      	mov	r0, r5
    83ba:	f7ff fed3 	bl	8164 <le_adv_start_add_conn>
		if (err) {
    83be:	4683      	mov	fp, r0
    83c0:	2800      	cmp	r0, #0
    83c2:	d0b8      	beq.n	8336 <bt_le_adv_start_legacy+0x112>
			if (err == -ENOMEM && !dir_adv &&
    83c4:	f110 0f0c 	cmn.w	r0, #12
    83c8:	f47f af47 	bne.w	825a <bt_le_adv_start_legacy+0x36>
    83cc:	2e00      	cmp	r6, #0
    83ce:	f47f af44 	bne.w	825a <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    83d2:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
    83d4:	079b      	lsls	r3, r3, #30
    83d6:	f53f af40 	bmi.w	825a <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    83da:	6860      	ldr	r0, [r4, #4]
    83dc:	f080 0002 	eor.w	r0, r0, #2
    83e0:	f3c0 0b40 	ubfx	fp, r0, #1, #1
    83e4:	f00b 0201 	and.w	r2, fp, #1
    83e8:	210c      	movs	r1, #12
    83ea:	4640      	mov	r0, r8
    83ec:	f018 fc1e 	bl	20c2c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME,
    83f0:	6862      	ldr	r2, [r4, #4]
    83f2:	2107      	movs	r1, #7
    83f4:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    83f8:	4640      	mov	r0, r8
    83fa:	f018 fc17 	bl	20c2c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
    83fe:	6862      	ldr	r2, [r4, #4]
    8400:	2108      	movs	r1, #8
    8402:	f002 0201 	and.w	r2, r2, #1
    8406:	4640      	mov	r0, r8
    8408:	f018 fc10 	bl	20c2c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
    840c:	463a      	mov	r2, r7
    840e:	2109      	movs	r1, #9
    8410:	4640      	mov	r0, r8
    8412:	f018 fc0b 	bl	20c2c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
    8416:	6862      	ldr	r2, [r4, #4]
    8418:	210b      	movs	r1, #11
    841a:	f3c2 0280 	ubfx	r2, r2, #2, #1
    841e:	4640      	mov	r0, r8
    8420:	f018 fc04 	bl	20c2c <atomic_set_bit_to>
	return 0;
    8424:	f04f 0b00 	mov.w	fp, #0
    8428:	e717      	b.n	825a <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    842a:	9805      	ldr	r0, [sp, #20]
    842c:	b108      	cbz	r0, 8432 <bt_le_adv_start_legacy+0x20e>
		bt_conn_unref(conn);
    842e:	f018 fd7d 	bl	20f2c <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    8432:	2e00      	cmp	r6, #0
    8434:	d1d6      	bne.n	83e4 <bt_le_adv_start_legacy+0x1c0>
    8436:	e7d0      	b.n	83da <bt_le_adv_start_legacy+0x1b6>
		return -EAGAIN;
    8438:	f06f 0b0a 	mvn.w	fp, #10
    843c:	e70d      	b.n	825a <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
    843e:	f06f 0b77 	mvn.w	fp, #119	; 0x77
    8442:	e70a      	b.n	825a <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
    8444:	f06f 0b68 	mvn.w	fp, #104	; 0x68
    8448:	e707      	b.n	825a <bt_le_adv_start_legacy+0x36>
    844a:	4683      	mov	fp, r0
    844c:	e705      	b.n	825a <bt_le_adv_start_legacy+0x36>
    844e:	bf00      	nop
    8450:	20000098 	.word	0x20000098
    8454:	20000000 	.word	0x20000000
    8458:	0002393c 	.word	0x0002393c
    845c:	0002393c 	.word	0x0002393c
    8460:	000266f4 	.word	0x000266f4

00008464 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    8464:	b513      	push	{r0, r1, r4, lr}

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    8466:	9c04      	ldr	r4, [sp, #16]
    8468:	e9cd 3400 	strd	r3, r4, [sp]
    846c:	4613      	mov	r3, r2
    846e:	460a      	mov	r2, r1
    8470:	4601      	mov	r1, r0
    8472:	4802      	ldr	r0, [pc, #8]	; (847c <bt_le_adv_start+0x18>)
    8474:	f7ff fed6 	bl	8224 <bt_le_adv_start_legacy>
	if (err) {
		bt_le_adv_delete_legacy();
	}

	return err;
}
    8478:	b002      	add	sp, #8
    847a:	bd10      	pop	{r4, pc}
    847c:	20000018 	.word	0x20000018

00008480 <bt_le_adv_resume>:
	return 0;
}

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
    8480:	b537      	push	{r0, r1, r2, r4, r5, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    8482:	481e      	ldr	r0, [pc, #120]	; (84fc <bt_le_adv_resume+0x7c>)
    8484:	4c1d      	ldr	r4, [pc, #116]	; (84fc <bt_le_adv_resume+0x7c>)
    8486:	f018 fbb5 	bl	20bf4 <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
    848a:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    848e:	d032      	beq.n	84f6 <bt_le_adv_resume+0x76>
    8490:	4620      	mov	r0, r4
    8492:	f018 fbaf 	bl	20bf4 <atomic_get>
    8496:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    8498:	f3c0 1580 	ubfx	r5, r0, #6, #1
    849c:	d42b      	bmi.n	84f6 <bt_le_adv_resume+0x76>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    849e:	4620      	mov	r0, r4
    84a0:	f018 fba8 	bl	20bf4 <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    84a4:	05c3      	lsls	r3, r0, #23
    84a6:	d526      	bpl.n	84f6 <bt_le_adv_resume+0x76>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
    84a8:	a901      	add	r1, sp, #4
    84aa:	f1a4 0010 	sub.w	r0, r4, #16
    84ae:	f7ff fe59 	bl	8164 <le_adv_start_add_conn>
	if (err) {
    84b2:	bb00      	cbnz	r0, 84f6 <bt_le_adv_resume+0x76>
	return bt_le_adv_set_enable_legacy(adv, enable);
    84b4:	2101      	movs	r1, #1
    84b6:	f1a4 0010 	sub.w	r0, r4, #16
    84ba:	f018 fc4a 	bl	20d52 <bt_le_adv_set_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		bt_id_set_adv_private_addr(adv);
	}

	err = bt_le_adv_set_enable(adv, true);
	if (err) {
    84be:	b150      	cbz	r0, 84d6 <bt_le_adv_resume+0x56>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    84c0:	4629      	mov	r1, r5
    84c2:	9801      	ldr	r0, [sp, #4]
    84c4:	f000 fc62 	bl	8d8c <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    84c8:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    84cc:	4620      	mov	r0, r4
    84ce:	f018 fb97 	bl	20c00 <atomic_and>
	return (old & mask) != 0;
    84d2:	f3c0 3500 	ubfx	r5, r0, #12, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
    84d6:	9801      	ldr	r0, [sp, #4]
    84d8:	f018 fd28 	bl	20f2c <bt_conn_unref>
	if (persist_paused) {
    84dc:	b15d      	cbz	r5, 84f6 <bt_le_adv_resume+0x76>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    84de:	f3bf 8f5b 	dmb	ish
    84e2:	e854 3f00 	ldrex	r3, [r4]
    84e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    84ea:	e844 3200 	strex	r2, r3, [r4]
    84ee:	2a00      	cmp	r2, #0
    84f0:	d1f7      	bne.n	84e2 <bt_le_adv_resume+0x62>
    84f2:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
    84f6:	b003      	add	sp, #12
    84f8:	bd30      	pop	{r4, r5, pc}
    84fa:	bf00      	nop
    84fc:	20000028 	.word	0x20000028

00008500 <bt_pub_key_is_debug>:
	0x5c, 0x15, 0x52, 0x5a, 0xbf, 0x9a, 0x32, 0x63,
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
    8500:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, 64) == 0;
    8502:	4904      	ldr	r1, [pc, #16]	; (8514 <bt_pub_key_is_debug+0x14>)
    8504:	2240      	movs	r2, #64	; 0x40
    8506:	f01b f89e 	bl	23646 <memcmp>
}
    850a:	fab0 f080 	clz	r0, r0
    850e:	0940      	lsrs	r0, r0, #5
    8510:	bd08      	pop	{r3, pc}
    8512:	bf00      	nop
    8514:	000267a4 	.word	0x000267a4

00008518 <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    8518:	b570      	push	{r4, r5, r6, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
    851a:	4b44      	ldr	r3, [pc, #272]	; (862c <bt_pub_key_gen+0x114>)
    851c:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
    8520:	f003 0306 	and.w	r3, r3, #6
    8524:	2b06      	cmp	r3, #6
    8526:	d00d      	beq.n	8544 <bt_pub_key_gen+0x2c>
    8528:	4b41      	ldr	r3, [pc, #260]	; (8630 <bt_pub_key_gen+0x118>)
    852a:	4942      	ldr	r1, [pc, #264]	; (8634 <bt_pub_key_gen+0x11c>)
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
    852c:	4842      	ldr	r0, [pc, #264]	; (8638 <bt_pub_key_gen+0x120>)
    852e:	1ac9      	subs	r1, r1, r3
    8530:	08c9      	lsrs	r1, r1, #3
    8532:	0189      	lsls	r1, r1, #6
    8534:	f041 0102 	orr.w	r1, r1, #2
    8538:	f016 fafe 	bl	1eb38 <log_0>
		return -ENOTSUP;
    853c:	f06f 0685 	mvn.w	r6, #133	; 0x85
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
    8540:	4630      	mov	r0, r6
    8542:	bd70      	pop	{r4, r5, r6, pc}
	if (!new_cb) {
    8544:	2800      	cmp	r0, #0
    8546:	d06d      	beq.n	8624 <bt_pub_key_gen+0x10c>
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    8548:	4d3c      	ldr	r5, [pc, #240]	; (863c <bt_pub_key_gen+0x124>)
    854a:	682a      	ldr	r2, [r5, #0]
    854c:	b10a      	cbz	r2, 8552 <bt_pub_key_gen+0x3a>
    854e:	1f13      	subs	r3, r2, #4
    8550:	b9bb      	cbnz	r3, 8582 <bt_pub_key_gen+0x6a>
	parent->next = child;
    8552:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
    8554:	686a      	ldr	r2, [r5, #4]
	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
    8556:	1d03      	adds	r3, r0, #4
	list->head = node;
    8558:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
    855a:	b902      	cbnz	r2, 855e <bt_pub_key_gen+0x46>
	list->tail = node;
    855c:	606b      	str	r3, [r5, #4]
    855e:	4c38      	ldr	r4, [pc, #224]	; (8640 <bt_pub_key_gen+0x128>)
    8560:	f3bf 8f5b 	dmb	ish
    8564:	e854 2f00 	ldrex	r2, [r4]
    8568:	f042 0310 	orr.w	r3, r2, #16
    856c:	e844 3100 	strex	r1, r3, [r4]
    8570:	2900      	cmp	r1, #0
    8572:	d1f7      	bne.n	8564 <bt_pub_key_gen+0x4c>
    8574:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    8578:	f012 0210 	ands.w	r2, r2, #16
    857c:	d017      	beq.n	85ae <bt_pub_key_gen+0x96>
		return 0;
    857e:	2600      	movs	r6, #0
    8580:	e7de      	b.n	8540 <bt_pub_key_gen+0x28>
		if (cb == new_cb) {
    8582:	4283      	cmp	r3, r0
    8584:	d10c      	bne.n	85a0 <bt_pub_key_gen+0x88>
    8586:	4b2a      	ldr	r3, [pc, #168]	; (8630 <bt_pub_key_gen+0x118>)
    8588:	492a      	ldr	r1, [pc, #168]	; (8634 <bt_pub_key_gen+0x11c>)
			BT_WARN("Callback already registered");
    858a:	482e      	ldr	r0, [pc, #184]	; (8644 <bt_pub_key_gen+0x12c>)
    858c:	1ac9      	subs	r1, r1, r3
    858e:	08c9      	lsrs	r1, r1, #3
    8590:	0189      	lsls	r1, r1, #6
    8592:	f041 0102 	orr.w	r1, r1, #2
    8596:	f016 facf 	bl	1eb38 <log_0>
			return -EALREADY;
    859a:	f06f 0677 	mvn.w	r6, #119	; 0x77
    859e:	e7cf      	b.n	8540 <bt_pub_key_gen+0x28>
Z_GENLIST_PEEK_NEXT(slist, snode)
    85a0:	1d19      	adds	r1, r3, #4
    85a2:	d0d6      	beq.n	8552 <bt_pub_key_gen+0x3a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    85a4:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    85a6:	2b00      	cmp	r3, #0
    85a8:	d0d3      	beq.n	8552 <bt_pub_key_gen+0x3a>
    85aa:	3b04      	subs	r3, #4
    85ac:	e7d0      	b.n	8550 <bt_pub_key_gen+0x38>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    85ae:	f3bf 8f5b 	dmb	ish
    85b2:	e854 3f00 	ldrex	r3, [r4]
    85b6:	f023 0308 	bic.w	r3, r3, #8
    85ba:	e844 3100 	strex	r1, r3, [r4]
    85be:	2900      	cmp	r1, #0
    85c0:	d1f7      	bne.n	85b2 <bt_pub_key_gen+0x9a>
    85c2:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    85c6:	4611      	mov	r1, r2
    85c8:	f242 0025 	movw	r0, #8229	; 0x2025
    85cc:	f7fe fc8e 	bl	6eec <bt_hci_cmd_send_sync>
	if (err) {
    85d0:	4606      	mov	r6, r0
    85d2:	2800      	cmp	r0, #0
    85d4:	d0d3      	beq.n	857e <bt_pub_key_gen+0x66>
    85d6:	4b16      	ldr	r3, [pc, #88]	; (8630 <bt_pub_key_gen+0x118>)
    85d8:	4916      	ldr	r1, [pc, #88]	; (8634 <bt_pub_key_gen+0x11c>)
		BT_ERR("Sending LE P256 Public Key command failed");
    85da:	481b      	ldr	r0, [pc, #108]	; (8648 <bt_pub_key_gen+0x130>)
    85dc:	1ac9      	subs	r1, r1, r3
    85de:	08c9      	lsrs	r1, r1, #3
    85e0:	0189      	lsls	r1, r1, #6
    85e2:	f041 0101 	orr.w	r1, r1, #1
    85e6:	f016 faa7 	bl	1eb38 <log_0>
    85ea:	f3bf 8f5b 	dmb	ish
    85ee:	e854 3f00 	ldrex	r3, [r4]
    85f2:	f023 0310 	bic.w	r3, r3, #16
    85f6:	e844 3200 	strex	r2, r3, [r4]
    85fa:	2a00      	cmp	r2, #0
    85fc:	d1f7      	bne.n	85ee <bt_pub_key_gen+0xd6>
    85fe:	f3bf 8f5b 	dmb	ish
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    8602:	682c      	ldr	r4, [r5, #0]
    8604:	b91c      	cbnz	r4, 860e <bt_pub_key_gen+0xf6>
	list->head = NULL;
    8606:	2300      	movs	r3, #0
	list->tail = NULL;
    8608:	e9c5 3300 	strd	r3, r3, [r5]
		return err;
    860c:	e798      	b.n	8540 <bt_pub_key_gen+0x28>
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    860e:	3c04      	subs	r4, #4
    8610:	2c00      	cmp	r4, #0
    8612:	d0f8      	beq.n	8606 <bt_pub_key_gen+0xee>
			if (cb->func) {
    8614:	6823      	ldr	r3, [r4, #0]
    8616:	b10b      	cbz	r3, 861c <bt_pub_key_gen+0x104>
				cb->func(NULL);
    8618:	2000      	movs	r0, #0
    861a:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    861c:	1d23      	adds	r3, r4, #4
    861e:	d0f2      	beq.n	8606 <bt_pub_key_gen+0xee>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    8620:	6864      	ldr	r4, [r4, #4]
	return node->next;
    8622:	e7ef      	b.n	8604 <bt_pub_key_gen+0xec>
		return -EINVAL;
    8624:	f06f 0615 	mvn.w	r6, #21
    8628:	e78a      	b.n	8540 <bt_pub_key_gen+0x28>
    862a:	bf00      	nop
    862c:	20000000 	.word	0x20000000
    8630:	0002393c 	.word	0x0002393c
    8634:	00023a04 	.word	0x00023a04
    8638:	00026716 	.word	0x00026716
    863c:	2000160c 	.word	0x2000160c
    8640:	20000098 	.word	0x20000098
    8644:	00026735 	.word	0x00026735
    8648:	00026751 	.word	0x00026751

0000864c <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    864c:	4b05      	ldr	r3, [pc, #20]	; (8664 <bt_pub_key_get+0x18>)
    864e:	f3bf 8f5b 	dmb	ish
    8652:	681b      	ldr	r3, [r3, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
}
    8654:	4804      	ldr	r0, [pc, #16]	; (8668 <bt_pub_key_get+0x1c>)
    8656:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    865a:	f013 0f08 	tst.w	r3, #8
}
    865e:	bf08      	it	eq
    8660:	2000      	moveq	r0, #0
    8662:	4770      	bx	lr
    8664:	20000098 	.word	0x20000098
    8668:	20003167 	.word	0x20003167

0000866c <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[64], bt_dh_key_cb_t cb)
{
    866c:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (dh_key_cb == cb) {
    866e:	4d27      	ldr	r5, [pc, #156]	; (870c <bt_dh_key_gen+0xa0>)
    8670:	682b      	ldr	r3, [r5, #0]
    8672:	428b      	cmp	r3, r1
{
    8674:	4604      	mov	r4, r0
	if (dh_key_cb == cb) {
    8676:	d042      	beq.n	86fe <bt_dh_key_gen+0x92>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    8678:	b11b      	cbz	r3, 8682 <bt_dh_key_gen+0x16>
		return -EBUSY;
    867a:	f06f 040f 	mvn.w	r4, #15
		BT_WARN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
    867e:	4620      	mov	r0, r4
    8680:	bd70      	pop	{r4, r5, r6, pc}
    8682:	4b23      	ldr	r3, [pc, #140]	; (8710 <bt_dh_key_gen+0xa4>)
    8684:	f3bf 8f5b 	dmb	ish
    8688:	681a      	ldr	r2, [r3, #0]
    868a:	f3bf 8f5b 	dmb	ish
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    868e:	06d2      	lsls	r2, r2, #27
    8690:	d4f3      	bmi.n	867a <bt_dh_key_gen+0xe>
    8692:	f3bf 8f5b 	dmb	ish
    8696:	681b      	ldr	r3, [r3, #0]
    8698:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    869c:	071b      	lsls	r3, r3, #28
    869e:	d531      	bpl.n	8704 <bt_dh_key_gen+0x98>
	dh_key_cb = cb;
    86a0:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    86a2:	f242 0026 	movw	r0, #8230	; 0x2026
    86a6:	2140      	movs	r1, #64	; 0x40
    86a8:	f7fe fabc 	bl	6c24 <bt_hci_cmd_create>
	if (!buf) {
    86ac:	4606      	mov	r6, r0
    86ae:	b318      	cbz	r0, 86f8 <bt_dh_key_gen+0x8c>
	return net_buf_simple_add(&buf->b, len);
    86b0:	2140      	movs	r1, #64	; 0x40
    86b2:	3008      	adds	r0, #8
    86b4:	f019 ffbd 	bl	22632 <net_buf_simple_add>
    86b8:	4623      	mov	r3, r4
    86ba:	f104 0240 	add.w	r2, r4, #64	; 0x40
    86be:	f853 1b04 	ldr.w	r1, [r3], #4
    86c2:	f840 1b04 	str.w	r1, [r0], #4
    86c6:	4293      	cmp	r3, r2
    86c8:	d1f9      	bne.n	86be <bt_dh_key_gen+0x52>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    86ca:	2200      	movs	r2, #0
    86cc:	4631      	mov	r1, r6
    86ce:	f242 0026 	movw	r0, #8230	; 0x2026
    86d2:	f7fe fc0b 	bl	6eec <bt_hci_cmd_send_sync>
	if (err) {
    86d6:	4604      	mov	r4, r0
    86d8:	2800      	cmp	r0, #0
    86da:	d0d0      	beq.n	867e <bt_dh_key_gen+0x12>
		dh_key_cb = NULL;
    86dc:	2300      	movs	r3, #0
    86de:	602b      	str	r3, [r5, #0]
    86e0:	4a0c      	ldr	r2, [pc, #48]	; (8714 <bt_dh_key_gen+0xa8>)
    86e2:	4b0d      	ldr	r3, [pc, #52]	; (8718 <bt_dh_key_gen+0xac>)
		BT_WARN("Failed to generate DHKey (err %d)", err);
    86e4:	480d      	ldr	r0, [pc, #52]	; (871c <bt_dh_key_gen+0xb0>)
    86e6:	1ad2      	subs	r2, r2, r3
    86e8:	08d2      	lsrs	r2, r2, #3
    86ea:	0192      	lsls	r2, r2, #6
    86ec:	f042 0202 	orr.w	r2, r2, #2
    86f0:	4621      	mov	r1, r4
    86f2:	f016 fa2e 	bl	1eb52 <log_1>
		return err;
    86f6:	e7c2      	b.n	867e <bt_dh_key_gen+0x12>
		return -ENOBUFS;
    86f8:	f06f 0468 	mvn.w	r4, #104	; 0x68
    86fc:	e7ee      	b.n	86dc <bt_dh_key_gen+0x70>
		return -EALREADY;
    86fe:	f06f 0477 	mvn.w	r4, #119	; 0x77
    8702:	e7bc      	b.n	867e <bt_dh_key_gen+0x12>
		return -EADDRNOTAVAIL;
    8704:	f06f 047c 	mvn.w	r4, #124	; 0x7c
    8708:	e7b9      	b.n	867e <bt_dh_key_gen+0x12>
    870a:	bf00      	nop
    870c:	20001608 	.word	0x20001608
    8710:	20000098 	.word	0x20000098
    8714:	00023a04 	.word	0x00023a04
    8718:	0002393c 	.word	0x0002393c
    871c:	0002677b 	.word	0x0002677b

00008720 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
    8720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8722:	4b20      	ldr	r3, [pc, #128]	; (87a4 <bt_hci_evt_le_pkey_complete+0x84>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
    8724:	6886      	ldr	r6, [r0, #8]
    8726:	f3bf 8f5b 	dmb	ish
    872a:	e853 2f00 	ldrex	r2, [r3]
    872e:	f022 0210 	bic.w	r2, r2, #16
    8732:	e843 2100 	strex	r1, r2, [r3]
    8736:	2900      	cmp	r1, #0
    8738:	d1f7      	bne.n	872a <bt_hci_evt_le_pkey_complete+0xa>
    873a:	f3bf 8f5b 	dmb	ish

	BT_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
    873e:	7832      	ldrb	r2, [r6, #0]
    8740:	b9aa      	cbnz	r2, 876e <bt_hci_evt_le_pkey_complete+0x4e>
		memcpy(pub_key, evt->key, 64);
    8742:	4919      	ldr	r1, [pc, #100]	; (87a8 <bt_hci_evt_le_pkey_complete+0x88>)
    8744:	1c72      	adds	r2, r6, #1
    8746:	f106 0041 	add.w	r0, r6, #65	; 0x41
    874a:	f852 4b04 	ldr.w	r4, [r2], #4
    874e:	f841 4b04 	str.w	r4, [r1], #4
    8752:	4282      	cmp	r2, r0
    8754:	d1f9      	bne.n	874a <bt_hci_evt_le_pkey_complete+0x2a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    8756:	f3bf 8f5b 	dmb	ish
    875a:	e853 2f00 	ldrex	r2, [r3]
    875e:	f042 0208 	orr.w	r2, r2, #8
    8762:	e843 2100 	strex	r1, r2, [r3]
    8766:	2900      	cmp	r1, #0
    8768:	d1f7      	bne.n	875a <bt_hci_evt_le_pkey_complete+0x3a>
    876a:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    876e:	4d0f      	ldr	r5, [pc, #60]	; (87ac <bt_hci_evt_le_pkey_complete+0x8c>)
    8770:	682c      	ldr	r4, [r5, #0]
    8772:	b91c      	cbnz	r4, 877c <bt_hci_evt_le_pkey_complete+0x5c>
	list->head = NULL;
    8774:	2300      	movs	r3, #0
	list->tail = NULL;
    8776:	e9c5 3300 	strd	r3, r3, [r5]
			cb->func(evt->status ? NULL : pub_key);
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
    877a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			cb->func(evt->status ? NULL : pub_key);
    877c:	4f0a      	ldr	r7, [pc, #40]	; (87a8 <bt_hci_evt_le_pkey_complete+0x88>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    877e:	3c04      	subs	r4, #4
    8780:	2c00      	cmp	r4, #0
    8782:	d0f7      	beq.n	8774 <bt_hci_evt_le_pkey_complete+0x54>
		if (cb->func) {
    8784:	6823      	ldr	r3, [r4, #0]
    8786:	b12b      	cbz	r3, 8794 <bt_hci_evt_le_pkey_complete+0x74>
			cb->func(evt->status ? NULL : pub_key);
    8788:	7832      	ldrb	r2, [r6, #0]
    878a:	2a00      	cmp	r2, #0
    878c:	bf0c      	ite	eq
    878e:	4638      	moveq	r0, r7
    8790:	2000      	movne	r0, #0
    8792:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    8794:	1d23      	adds	r3, r4, #4
    8796:	d0ed      	beq.n	8774 <bt_hci_evt_le_pkey_complete+0x54>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    8798:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    879a:	2c00      	cmp	r4, #0
    879c:	d0ea      	beq.n	8774 <bt_hci_evt_le_pkey_complete+0x54>
    879e:	3c04      	subs	r4, #4
    87a0:	e7ee      	b.n	8780 <bt_hci_evt_le_pkey_complete+0x60>
    87a2:	bf00      	nop
    87a4:	20000098 	.word	0x20000098
    87a8:	20003167 	.word	0x20003167
    87ac:	2000160c 	.word	0x2000160c

000087b0 <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
    87b0:	4905      	ldr	r1, [pc, #20]	; (87c8 <bt_hci_evt_le_dhkey_complete+0x18>)
    87b2:	680b      	ldr	r3, [r1, #0]
    87b4:	b133      	cbz	r3, 87c4 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
    87b6:	6882      	ldr	r2, [r0, #8]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
    87b8:	2000      	movs	r0, #0
    87ba:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
    87bc:	7811      	ldrb	r1, [r2, #0]
    87be:	b901      	cbnz	r1, 87c2 <bt_hci_evt_le_dhkey_complete+0x12>
    87c0:	1c50      	adds	r0, r2, #1
    87c2:	4718      	bx	r3
	}
}
    87c4:	4770      	bx	lr
    87c6:	bf00      	nop
    87c8:	20001608 	.word	0x20001608

000087cc <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    87cc:	2300      	movs	r3, #0
	tx->user_data = NULL;
    87ce:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
    87d2:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
    87d4:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
    87d6:	4801      	ldr	r0, [pc, #4]	; (87dc <tx_free+0x10>)
    87d8:	f01a bb10 	b.w	22dfc <k_queue_append>
    87dc:	200008b0 	.word	0x200008b0

000087e0 <notify_connected>:
{
    87e0:	b538      	push	{r3, r4, r5, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    87e2:	4b09      	ldr	r3, [pc, #36]	; (8808 <notify_connected+0x28>)
    87e4:	681d      	ldr	r5, [r3, #0]
{
    87e6:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    87e8:	7b21      	ldrb	r1, [r4, #12]
    87ea:	b92d      	cbnz	r5, 87f8 <notify_connected+0x18>
	if (!conn->err) {
    87ec:	b951      	cbnz	r1, 8804 <notify_connected+0x24>
		bt_gatt_connected(conn);
    87ee:	4620      	mov	r0, r4
}
    87f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
    87f4:	f002 bcb8 	b.w	b168 <bt_gatt_connected>
		if (cb->connected) {
    87f8:	682b      	ldr	r3, [r5, #0]
    87fa:	b10b      	cbz	r3, 8800 <notify_connected+0x20>
			cb->connected(conn, conn->err);
    87fc:	4620      	mov	r0, r4
    87fe:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    8800:	69ad      	ldr	r5, [r5, #24]
    8802:	e7f1      	b.n	87e8 <notify_connected+0x8>
}
    8804:	bd38      	pop	{r3, r4, r5, pc}
    8806:	bf00      	nop
    8808:	20001618 	.word	0x20001618

0000880c <send_frag>:
	return bt_send(buf);
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, uint8_t flags,
		      bool always_consume)
{
    880c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
    8810:	694d      	ldr	r5, [r1, #20]
{
    8812:	4604      	mov	r4, r0
    8814:	460e      	mov	r6, r1
    8816:	4691      	mov	r9, r2
    8818:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
    881a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    881e:	4845      	ldr	r0, [pc, #276]	; (8934 <send_frag+0x128>)
    8820:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8824:	f014 ffa0 	bl	1d768 <z_impl_k_sem_take>

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    8828:	7b63      	ldrb	r3, [r4, #13]
    882a:	2b07      	cmp	r3, #7
    882c:	d151      	bne.n	88d2 <send_frag+0xc6>
	__asm__ volatile(
    882e:	f04f 0320 	mov.w	r3, #32
    8832:	f3ef 8211 	mrs	r2, BASEPRI
    8836:	f383 8811 	msr	BASEPRI, r3
    883a:	f3bf 8f6f 	isb	sy
		goto fail;
	}

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
    883e:	2d00      	cmp	r5, #0
    8840:	d059      	beq.n	88f6 <send_frag+0xea>
	parent->next = child;
    8842:	2300      	movs	r3, #0
    8844:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
    8846:	69a3      	ldr	r3, [r4, #24]
    8848:	2b00      	cmp	r3, #0
    884a:	d151      	bne.n	88f0 <send_frag+0xe4>
	list->head = node;
    884c:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
    8850:	f382 8811 	msr	BASEPRI, r2
    8854:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
    8858:	2104      	movs	r1, #4
    885a:	f106 0008 	add.w	r0, r6, #8
    885e:	f019 ff00 	bl	22662 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    8862:	8823      	ldrh	r3, [r4, #0]
    8864:	f009 09fd 	and.w	r9, r9, #253	; 0xfd
    8868:	ea43 3909 	orr.w	r9, r3, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    886c:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    886e:	f8a0 9000 	strh.w	r9, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    8872:	3b04      	subs	r3, #4
    8874:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    8876:	2302      	movs	r3, #2
    8878:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
    887a:	4630      	mov	r0, r6
    887c:	f018 f8b5 	bl	209ea <bt_send>
		err = send_iso(conn, buf, flags);
	} else {
		err = send_acl(conn, buf, flags);
	}

	if (err) {
    8880:	4601      	mov	r1, r0
    8882:	2800      	cmp	r0, #0
    8884:	d053      	beq.n	892e <send_frag+0x122>
    8886:	4b2c      	ldr	r3, [pc, #176]	; (8938 <send_frag+0x12c>)
    8888:	4a2c      	ldr	r2, [pc, #176]	; (893c <send_frag+0x130>)
		BT_ERR("Unable to send to driver (err %d)", err);
    888a:	482d      	ldr	r0, [pc, #180]	; (8940 <send_frag+0x134>)
    888c:	1ad2      	subs	r2, r2, r3
    888e:	08d2      	lsrs	r2, r2, #3
    8890:	0192      	lsls	r2, r2, #6
    8892:	f042 0201 	orr.w	r2, r2, #1
    8896:	f016 f95c 	bl	1eb52 <log_1>
	__asm__ volatile(
    889a:	f04f 0320 	mov.w	r3, #32
    889e:	f3ef 8111 	mrs	r1, BASEPRI
    88a2:	f383 8811 	msr	BASEPRI, r3
    88a6:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		/* Roll back the pending TX info */
		if (tx) {
    88aa:	2d00      	cmp	r5, #0
    88ac:	d039      	beq.n	8922 <send_frag+0x116>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    88ae:	6963      	ldr	r3, [r4, #20]
    88b0:	2200      	movs	r2, #0
    88b2:	b153      	cbz	r3, 88ca <send_frag+0xbe>
    88b4:	429d      	cmp	r5, r3
    88b6:	d131      	bne.n	891c <send_frag+0x110>
Z_GENLIST_REMOVE(slist, snode)
    88b8:	682b      	ldr	r3, [r5, #0]
    88ba:	bb4a      	cbnz	r2, 8910 <send_frag+0x104>
    88bc:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
    88be:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
    88c0:	4295      	cmp	r5, r2
    88c2:	d100      	bne.n	88c6 <send_frag+0xba>
	list->tail = node;
    88c4:	61a3      	str	r3, [r4, #24]
	parent->next = child;
    88c6:	2300      	movs	r3, #0
    88c8:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
    88ca:	f381 8811 	msr	BASEPRI, r1
    88ce:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    88d2:	4818      	ldr	r0, [pc, #96]	; (8934 <send_frag+0x128>)
    88d4:	f014 ff22 	bl	1d71c <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (tx) {
    88d8:	b115      	cbz	r5, 88e0 <send_frag+0xd4>
		tx_free(tx);
    88da:	4628      	mov	r0, r5
    88dc:	f7ff ff76 	bl	87cc <tx_free>
	}

	if (always_consume) {
    88e0:	b11f      	cbz	r7, 88ea <send_frag+0xde>
		net_buf_unref(buf);
    88e2:	4630      	mov	r0, r6
    88e4:	f011 fc42 	bl	1a16c <net_buf_unref>
	}
	return false;
    88e8:	2700      	movs	r7, #0
}
    88ea:	4638      	mov	r0, r7
    88ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    88f0:	601d      	str	r5, [r3, #0]
	list->tail = node;
    88f2:	61a5      	str	r5, [r4, #24]
}
    88f4:	e7ac      	b.n	8850 <send_frag+0x44>
		tail_tx = (void *)sys_slist_peek_tail(&conn->tx_pending);
    88f6:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
    88f8:	b133      	cbz	r3, 8908 <send_frag+0xfc>
			pending_no_cb = &tail_tx->pending_no_cb;
    88fa:	f103 080c 	add.w	r8, r3, #12
    88fe:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
    8900:	3301      	adds	r3, #1
    8902:	f8c8 3000 	str.w	r3, [r8]
    8906:	e7a3      	b.n	8850 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
    8908:	69e3      	ldr	r3, [r4, #28]
    890a:	f104 081c 	add.w	r8, r4, #28
    890e:	e7f7      	b.n	8900 <send_frag+0xf4>
	parent->next = child;
    8910:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    8912:	69a3      	ldr	r3, [r4, #24]
    8914:	429d      	cmp	r5, r3
	list->tail = node;
    8916:	bf08      	it	eq
    8918:	61a2      	streq	r2, [r4, #24]
}
    891a:	e7d4      	b.n	88c6 <send_frag+0xba>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    891c:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    891e:	681b      	ldr	r3, [r3, #0]
    8920:	e7c7      	b.n	88b2 <send_frag+0xa6>
			(*pending_no_cb)--;
    8922:	f8d8 3000 	ldr.w	r3, [r8]
    8926:	3b01      	subs	r3, #1
    8928:	f8c8 3000 	str.w	r3, [r8]
    892c:	e7cd      	b.n	88ca <send_frag+0xbe>
	return true;
    892e:	2701      	movs	r7, #1
    8930:	e7db      	b.n	88ea <send_frag+0xde>
    8932:	bf00      	nop
    8934:	200000d0 	.word	0x200000d0
    8938:	0002393c 	.word	0x0002393c
    893c:	00023954 	.word	0x00023954
    8940:	00026080 	.word	0x00026080

00008944 <bt_conn_get_pkts>:
}
    8944:	4800      	ldr	r0, [pc, #0]	; (8948 <bt_conn_get_pkts+0x4>)
    8946:	4770      	bx	lr
    8948:	200000d0 	.word	0x200000d0

0000894c <notify_le_param_updated>:
{
    894c:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    894e:	f3bf 8f5b 	dmb	ish
    8952:	6842      	ldr	r2, [r0, #4]
    8954:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    8958:	0592      	lsls	r2, r2, #22
{
    895a:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    895c:	f100 0304 	add.w	r3, r0, #4
    8960:	d519      	bpl.n	8996 <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
    8962:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    8966:	f8b0 10a0 	ldrh.w	r1, [r0, #160]	; 0xa0
    896a:	4291      	cmp	r1, r2
    896c:	d813      	bhi.n	8996 <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
    896e:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
    8972:	4291      	cmp	r1, r2
    8974:	d30f      	bcc.n	8996 <notify_le_param_updated+0x4a>
	    conn->le.latency == conn->le.pending_latency &&
    8976:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
    897a:	4291      	cmp	r1, r2
    897c:	d10b      	bne.n	8996 <notify_le_param_updated+0x4a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    897e:	f3bf 8f5b 	dmb	ish
    8982:	e853 2f00 	ldrex	r2, [r3]
    8986:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    898a:	e843 2100 	strex	r1, r2, [r3]
    898e:	2900      	cmp	r1, #0
    8990:	d1f7      	bne.n	8982 <notify_le_param_updated+0x36>
    8992:	f3bf 8f5b 	dmb	ish
	for (cb = callback_list; cb; cb = cb->_next) {
    8996:	4b08      	ldr	r3, [pc, #32]	; (89b8 <notify_le_param_updated+0x6c>)
    8998:	681d      	ldr	r5, [r3, #0]
    899a:	b905      	cbnz	r5, 899e <notify_le_param_updated+0x52>
}
    899c:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    899e:	68ee      	ldr	r6, [r5, #12]
    89a0:	b13e      	cbz	r6, 89b2 <notify_le_param_updated+0x66>
			cb->le_param_updated(conn, conn->le.interval,
    89a2:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    89a6:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    89aa:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    89ae:	4620      	mov	r0, r4
    89b0:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    89b2:	69ad      	ldr	r5, [r5, #24]
    89b4:	e7f1      	b.n	899a <notify_le_param_updated+0x4e>
    89b6:	bf00      	nop
    89b8:	20001618 	.word	0x20001618

000089bc <le_param_req>:
{
    89bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    89be:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    89c0:	4608      	mov	r0, r1
{
    89c2:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    89c4:	f017 fff1 	bl	209aa <bt_le_conn_params_valid>
    89c8:	4604      	mov	r4, r0
    89ca:	b910      	cbnz	r0, 89d2 <le_param_req+0x16>
		return false;
    89cc:	2400      	movs	r4, #0
}
    89ce:	4620      	mov	r0, r4
    89d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    89d2:	4b09      	ldr	r3, [pc, #36]	; (89f8 <le_param_req+0x3c>)
    89d4:	681e      	ldr	r6, [r3, #0]
    89d6:	2e00      	cmp	r6, #0
    89d8:	d0f9      	beq.n	89ce <le_param_req+0x12>
		if (!cb->le_param_req) {
    89da:	68b3      	ldr	r3, [r6, #8]
    89dc:	b90b      	cbnz	r3, 89e2 <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    89de:	69b6      	ldr	r6, [r6, #24]
    89e0:	e7f9      	b.n	89d6 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    89e2:	4629      	mov	r1, r5
    89e4:	4638      	mov	r0, r7
    89e6:	4798      	blx	r3
    89e8:	2800      	cmp	r0, #0
    89ea:	d0ef      	beq.n	89cc <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    89ec:	4628      	mov	r0, r5
    89ee:	f017 ffdc 	bl	209aa <bt_le_conn_params_valid>
    89f2:	2800      	cmp	r0, #0
    89f4:	d1f3      	bne.n	89de <le_param_req+0x22>
    89f6:	e7e9      	b.n	89cc <le_param_req+0x10>
    89f8:	20001618 	.word	0x20001618

000089fc <bt_conn_identity_resolved>:
{
    89fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->role == BT_HCI_ROLE_MASTER) {
    89fe:	78c3      	ldrb	r3, [r0, #3]
{
    8a00:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_MASTER) {
    8a02:	b93b      	cbnz	r3, 8a14 <bt_conn_identity_resolved+0x18>
		rpa = &conn->le.resp_addr;
    8a04:	f100 0696 	add.w	r6, r0, #150	; 0x96
	for (cb = callback_list; cb; cb = cb->_next) {
    8a08:	4b08      	ldr	r3, [pc, #32]	; (8a2c <bt_conn_identity_resolved+0x30>)
    8a0a:	681d      	ldr	r5, [r3, #0]
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    8a0c:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
    8a10:	b91d      	cbnz	r5, 8a1a <bt_conn_identity_resolved+0x1e>
}
    8a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rpa = &conn->le.init_addr;
    8a14:	f100 068f 	add.w	r6, r0, #143	; 0x8f
    8a18:	e7f6      	b.n	8a08 <bt_conn_identity_resolved+0xc>
		if (cb->identity_resolved) {
    8a1a:	692b      	ldr	r3, [r5, #16]
    8a1c:	b11b      	cbz	r3, 8a26 <bt_conn_identity_resolved+0x2a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    8a1e:	463a      	mov	r2, r7
    8a20:	4631      	mov	r1, r6
    8a22:	4620      	mov	r0, r4
    8a24:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    8a26:	69ad      	ldr	r5, [r5, #24]
    8a28:	e7f2      	b.n	8a10 <bt_conn_identity_resolved+0x14>
    8a2a:	bf00      	nop
    8a2c:	20001618 	.word	0x20001618

00008a30 <bt_conn_security_changed>:
{
    8a30:	b570      	push	{r4, r5, r6, lr}
	conn->required_sec_level = conn->sec_level;
    8a32:	7a43      	ldrb	r3, [r0, #9]
    8a34:	7283      	strb	r3, [r0, #10]
{
    8a36:	4604      	mov	r4, r0
    8a38:	4616      	mov	r6, r2
	bt_l2cap_security_changed(conn, hci_err);
    8a3a:	f018 fb4d 	bl	210d8 <bt_l2cap_security_changed>
	for (cb = callback_list; cb; cb = cb->_next) {
    8a3e:	4b06      	ldr	r3, [pc, #24]	; (8a58 <bt_conn_security_changed+0x28>)
    8a40:	681d      	ldr	r5, [r3, #0]
    8a42:	b905      	cbnz	r5, 8a46 <bt_conn_security_changed+0x16>
}
    8a44:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->security_changed) {
    8a46:	696b      	ldr	r3, [r5, #20]
    8a48:	b11b      	cbz	r3, 8a52 <bt_conn_security_changed+0x22>
			cb->security_changed(conn, conn->sec_level, err);
    8a4a:	7a61      	ldrb	r1, [r4, #9]
    8a4c:	4632      	mov	r2, r6
    8a4e:	4620      	mov	r0, r4
    8a50:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    8a52:	69ad      	ldr	r5, [r5, #24]
    8a54:	e7f5      	b.n	8a42 <bt_conn_security_changed+0x12>
    8a56:	bf00      	nop
    8a58:	20001618 	.word	0x20001618

00008a5c <bt_conn_cb_register>:
	cb->_next = callback_list;
    8a5c:	4b02      	ldr	r3, [pc, #8]	; (8a68 <bt_conn_cb_register+0xc>)
    8a5e:	681a      	ldr	r2, [r3, #0]
    8a60:	6182      	str	r2, [r0, #24]
	callback_list = cb;
    8a62:	6018      	str	r0, [r3, #0]
}
    8a64:	4770      	bx	lr
    8a66:	bf00      	nop
    8a68:	20001618 	.word	0x20001618

00008a6c <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
    8a6c:	b570      	push	{r4, r5, r6, lr}
    8a6e:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    8a70:	f100 0638 	add.w	r6, r0, #56	; 0x38
    8a74:	2200      	movs	r2, #0
    8a76:	2300      	movs	r3, #0
    8a78:	4630      	mov	r0, r6
    8a7a:	f019 fd89 	bl	22590 <net_buf_get>
    8a7e:	4605      	mov	r5, r0
    8a80:	b958      	cbnz	r0, 8a9a <conn_cleanup+0x2e>
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);

	bt_conn_reset_rx_state(conn);
    8a82:	4620      	mov	r0, r4
    8a84:	f018 fa0e 	bl	20ea4 <bt_conn_reset_rx_state>
	return k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
    8a88:	f104 0158 	add.w	r1, r4, #88	; 0x58
    8a8c:	4807      	ldr	r0, [pc, #28]	; (8aac <conn_cleanup+0x40>)

	k_delayed_work_submit(&conn->deferred_work, K_NO_WAIT);
}
    8a8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8a92:	2200      	movs	r2, #0
    8a94:	2300      	movs	r3, #0
    8a96:	f015 b8b7 	b.w	1dc08 <k_work_reschedule_for_queue>
		if (tx_data(buf)->tx) {
    8a9a:	6968      	ldr	r0, [r5, #20]
    8a9c:	b108      	cbz	r0, 8aa2 <conn_cleanup+0x36>
			tx_free(tx_data(buf)->tx);
    8a9e:	f7ff fe95 	bl	87cc <tx_free>
		net_buf_unref(buf);
    8aa2:	4628      	mov	r0, r5
    8aa4:	f011 fb62 	bl	1a16c <net_buf_unref>
    8aa8:	e7e4      	b.n	8a74 <conn_cleanup+0x8>
    8aaa:	bf00      	nop
    8aac:	20001390 	.word	0x20001390

00008ab0 <bt_conn_recv>:
{
    8ab0:	b570      	push	{r4, r5, r6, lr}
    8ab2:	4616      	mov	r6, r2
    8ab4:	4604      	mov	r4, r0
    8ab6:	460d      	mov	r5, r1
	tx_notify(conn);
    8ab8:	f018 f972 	bl	20da0 <tx_notify>
	switch (flags) {
    8abc:	2e01      	cmp	r6, #1
    8abe:	d02e      	beq.n	8b1e <bt_conn_recv+0x6e>
    8ac0:	2e02      	cmp	r6, #2
    8ac2:	d15b      	bne.n	8b7c <bt_conn_recv+0xcc>
		if (conn->rx) {
    8ac4:	6923      	ldr	r3, [r4, #16]
    8ac6:	b163      	cbz	r3, 8ae2 <bt_conn_recv+0x32>
    8ac8:	4b37      	ldr	r3, [pc, #220]	; (8ba8 <bt_conn_recv+0xf8>)
    8aca:	4938      	ldr	r1, [pc, #224]	; (8bac <bt_conn_recv+0xfc>)
			BT_ERR("Unexpected first L2CAP frame");
    8acc:	4838      	ldr	r0, [pc, #224]	; (8bb0 <bt_conn_recv+0x100>)
    8ace:	1ac9      	subs	r1, r1, r3
    8ad0:	08c9      	lsrs	r1, r1, #3
    8ad2:	0189      	lsls	r1, r1, #6
    8ad4:	f041 0101 	orr.w	r1, r1, #1
    8ad8:	f016 f82e 	bl	1eb38 <log_0>
			bt_conn_reset_rx_state(conn);
    8adc:	4620      	mov	r0, r4
    8ade:	f018 f9e1 	bl	20ea4 <bt_conn_reset_rx_state>
		conn->rx = buf;
    8ae2:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
    8ae4:	6923      	ldr	r3, [r4, #16]
    8ae6:	8999      	ldrh	r1, [r3, #12]
    8ae8:	2901      	cmp	r1, #1
    8aea:	d95b      	bls.n	8ba4 <bt_conn_recv+0xf4>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
    8aec:	6898      	ldr	r0, [r3, #8]
	return ((uint16_t)src[1] << 8) | src[0];
    8aee:	7845      	ldrb	r5, [r0, #1]
    8af0:	7802      	ldrb	r2, [r0, #0]
    8af2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    8af6:	3204      	adds	r2, #4
    8af8:	b292      	uxth	r2, r2
	if (conn->rx->len < acl_total_len) {
    8afa:	428a      	cmp	r2, r1
    8afc:	d852      	bhi.n	8ba4 <bt_conn_recv+0xf4>
	if (conn->rx->len > acl_total_len) {
    8afe:	d249      	bcs.n	8b94 <bt_conn_recv+0xe4>
    8b00:	4829      	ldr	r0, [pc, #164]	; (8ba8 <bt_conn_recv+0xf8>)
    8b02:	4b2a      	ldr	r3, [pc, #168]	; (8bac <bt_conn_recv+0xfc>)
    8b04:	1a1b      	subs	r3, r3, r0
    8b06:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL len mismatch (%u > %u)",
    8b08:	019b      	lsls	r3, r3, #6
    8b0a:	482a      	ldr	r0, [pc, #168]	; (8bb4 <bt_conn_recv+0x104>)
    8b0c:	f043 0301 	orr.w	r3, r3, #1
    8b10:	f016 f833 	bl	1eb7a <log_2>
		bt_conn_reset_rx_state(conn);
    8b14:	4620      	mov	r0, r4
}
    8b16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
    8b1a:	f018 b9c3 	b.w	20ea4 <bt_conn_reset_rx_state>
		if (!conn->rx) {
    8b1e:	6920      	ldr	r0, [r4, #16]
    8b20:	b968      	cbnz	r0, 8b3e <bt_conn_recv+0x8e>
    8b22:	4922      	ldr	r1, [pc, #136]	; (8bac <bt_conn_recv+0xfc>)
    8b24:	4b20      	ldr	r3, [pc, #128]	; (8ba8 <bt_conn_recv+0xf8>)
			BT_ERR("Unexpected L2CAP continuation");
    8b26:	4824      	ldr	r0, [pc, #144]	; (8bb8 <bt_conn_recv+0x108>)
    8b28:	1ac9      	subs	r1, r1, r3
    8b2a:	08c9      	lsrs	r1, r1, #3
    8b2c:	0189      	lsls	r1, r1, #6
    8b2e:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Not enough buffer space for L2CAP data");
    8b32:	f016 f801 	bl	1eb38 <log_0>
			bt_conn_reset_rx_state(conn);
    8b36:	4620      	mov	r0, r4
    8b38:	f018 f9b4 	bl	20ea4 <bt_conn_reset_rx_state>
    8b3c:	e001      	b.n	8b42 <bt_conn_recv+0x92>
		if (!buf->len) {
    8b3e:	89ae      	ldrh	r6, [r5, #12]
    8b40:	b926      	cbnz	r6, 8b4c <bt_conn_recv+0x9c>
			net_buf_unref(buf);
    8b42:	4628      	mov	r0, r5
}
    8b44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
    8b48:	f011 bb10 	b.w	1a16c <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
    8b4c:	3008      	adds	r0, #8
    8b4e:	f019 fdac 	bl	226aa <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    8b52:	4286      	cmp	r6, r0
    8b54:	d908      	bls.n	8b68 <bt_conn_recv+0xb8>
    8b56:	4915      	ldr	r1, [pc, #84]	; (8bac <bt_conn_recv+0xfc>)
    8b58:	4b13      	ldr	r3, [pc, #76]	; (8ba8 <bt_conn_recv+0xf8>)
			BT_ERR("Not enough buffer space for L2CAP data");
    8b5a:	4818      	ldr	r0, [pc, #96]	; (8bbc <bt_conn_recv+0x10c>)
    8b5c:	1ac9      	subs	r1, r1, r3
    8b5e:	08c9      	lsrs	r1, r1, #3
    8b60:	0189      	lsls	r1, r1, #6
    8b62:	f041 0101 	orr.w	r1, r1, #1
    8b66:	e7e4      	b.n	8b32 <bt_conn_recv+0x82>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    8b68:	6920      	ldr	r0, [r4, #16]
    8b6a:	89aa      	ldrh	r2, [r5, #12]
    8b6c:	68a9      	ldr	r1, [r5, #8]
    8b6e:	3008      	adds	r0, #8
    8b70:	f019 fd65 	bl	2263e <net_buf_simple_add_mem>
		net_buf_unref(buf);
    8b74:	4628      	mov	r0, r5
    8b76:	f011 faf9 	bl	1a16c <net_buf_unref>
		break;
    8b7a:	e7b3      	b.n	8ae4 <bt_conn_recv+0x34>
    8b7c:	4a0a      	ldr	r2, [pc, #40]	; (8ba8 <bt_conn_recv+0xf8>)
    8b7e:	4b0b      	ldr	r3, [pc, #44]	; (8bac <bt_conn_recv+0xfc>)
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    8b80:	480f      	ldr	r0, [pc, #60]	; (8bc0 <bt_conn_recv+0x110>)
    8b82:	1a9b      	subs	r3, r3, r2
    8b84:	08db      	lsrs	r3, r3, #3
    8b86:	019b      	lsls	r3, r3, #6
    8b88:	f043 0201 	orr.w	r2, r3, #1
    8b8c:	4631      	mov	r1, r6
    8b8e:	f015 ffe0 	bl	1eb52 <log_1>
		bt_conn_reset_rx_state(conn);
    8b92:	e7d0      	b.n	8b36 <bt_conn_recv+0x86>
	conn->rx = NULL;
    8b94:	2200      	movs	r2, #0
    8b96:	6122      	str	r2, [r4, #16]
	bt_l2cap_recv(conn, buf);
    8b98:	4620      	mov	r0, r4
    8b9a:	4619      	mov	r1, r3
}
    8b9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
    8ba0:	f000 bd12 	b.w	95c8 <bt_l2cap_recv>
}
    8ba4:	bd70      	pop	{r4, r5, r6, pc}
    8ba6:	bf00      	nop
    8ba8:	0002393c 	.word	0x0002393c
    8bac:	00023954 	.word	0x00023954
    8bb0:	000267e4 	.word	0x000267e4
    8bb4:	00026864 	.word	0x00026864
    8bb8:	00026801 	.word	0x00026801
    8bbc:	0002681f 	.word	0x0002681f
    8bc0:	00026846 	.word	0x00026846

00008bc4 <bt_conn_send_cb>:
{
    8bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8bc8:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
    8bca:	7b43      	ldrb	r3, [r0, #13]
    8bcc:	2b07      	cmp	r3, #7
{
    8bce:	4606      	mov	r6, r0
    8bd0:	460d      	mov	r5, r1
    8bd2:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
    8bd4:	d00f      	beq.n	8bf6 <bt_conn_send_cb+0x32>
    8bd6:	4b2a      	ldr	r3, [pc, #168]	; (8c80 <bt_conn_send_cb+0xbc>)
    8bd8:	492a      	ldr	r1, [pc, #168]	; (8c84 <bt_conn_send_cb+0xc0>)
		BT_ERR("not connected!");
    8bda:	482b      	ldr	r0, [pc, #172]	; (8c88 <bt_conn_send_cb+0xc4>)
    8bdc:	1ac9      	subs	r1, r1, r3
    8bde:	08c9      	lsrs	r1, r1, #3
    8be0:	0189      	lsls	r1, r1, #6
    8be2:	f041 0101 	orr.w	r1, r1, #1
    8be6:	f015 ffa7 	bl	1eb38 <log_0>
		net_buf_unref(buf);
    8bea:	4628      	mov	r0, r5
    8bec:	f011 fabe 	bl	1a16c <net_buf_unref>
			return -ENOTCONN;
    8bf0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    8bf4:	e020      	b.n	8c38 <bt_conn_send_cb+0x74>
	if (cb) {
    8bf6:	2a00      	cmp	r2, #0
    8bf8:	d040      	beq.n	8c7c <bt_conn_send_cb+0xb8>
	return z_impl_k_current_get();
    8bfa:	f014 fd15 	bl	1d628 <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    8bfe:	4b23      	ldr	r3, [pc, #140]	; (8c8c <bt_conn_send_cb+0xc8>)
    8c00:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    8c02:	4823      	ldr	r0, [pc, #140]	; (8c90 <bt_conn_send_cb+0xcc>)
    8c04:	bf07      	ittee	eq
    8c06:	2200      	moveq	r2, #0
    8c08:	2300      	moveq	r3, #0
    8c0a:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
    8c0e:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
    8c12:	f014 f9cd 	bl	1cfb0 <z_impl_k_queue_get>
    8c16:	4604      	mov	r4, r0
		if (!tx) {
    8c18:	b980      	cbnz	r0, 8c3c <bt_conn_send_cb+0x78>
    8c1a:	4b19      	ldr	r3, [pc, #100]	; (8c80 <bt_conn_send_cb+0xbc>)
    8c1c:	4919      	ldr	r1, [pc, #100]	; (8c84 <bt_conn_send_cb+0xc0>)
			BT_ERR("Unable to allocate TX context");
    8c1e:	481d      	ldr	r0, [pc, #116]	; (8c94 <bt_conn_send_cb+0xd0>)
    8c20:	1ac9      	subs	r1, r1, r3
    8c22:	08c9      	lsrs	r1, r1, #3
    8c24:	0189      	lsls	r1, r1, #6
    8c26:	f041 0101 	orr.w	r1, r1, #1
    8c2a:	f015 ff85 	bl	1eb38 <log_0>
			net_buf_unref(buf);
    8c2e:	4628      	mov	r0, r5
    8c30:	f011 fa9c 	bl	1a16c <net_buf_unref>
			return -ENOBUFS;
    8c34:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    8c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
    8c3c:	7b73      	ldrb	r3, [r6, #13]
    8c3e:	2b07      	cmp	r3, #7
    8c40:	d010      	beq.n	8c64 <bt_conn_send_cb+0xa0>
    8c42:	4b0f      	ldr	r3, [pc, #60]	; (8c80 <bt_conn_send_cb+0xbc>)
    8c44:	490f      	ldr	r1, [pc, #60]	; (8c84 <bt_conn_send_cb+0xc0>)
			BT_WARN("Disconnected while allocating context");
    8c46:	4814      	ldr	r0, [pc, #80]	; (8c98 <bt_conn_send_cb+0xd4>)
    8c48:	1ac9      	subs	r1, r1, r3
    8c4a:	08c9      	lsrs	r1, r1, #3
    8c4c:	0189      	lsls	r1, r1, #6
    8c4e:	f041 0102 	orr.w	r1, r1, #2
    8c52:	f015 ff71 	bl	1eb38 <log_0>
			net_buf_unref(buf);
    8c56:	4628      	mov	r0, r5
    8c58:	f011 fa88 	bl	1a16c <net_buf_unref>
			tx_free(tx);
    8c5c:	4620      	mov	r0, r4
    8c5e:	f7ff fdb5 	bl	87cc <tx_free>
    8c62:	e7c5      	b.n	8bf0 <bt_conn_send_cb+0x2c>
		tx->pending_no_cb = 0U;
    8c64:	2300      	movs	r3, #0
		tx->user_data = user_data;
    8c66:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
    8c6a:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
    8c6c:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
    8c6e:	f106 0038 	add.w	r0, r6, #56	; 0x38
    8c72:	4629      	mov	r1, r5
    8c74:	f019 fcaa 	bl	225cc <net_buf_put>
	return 0;
    8c78:	2000      	movs	r0, #0
    8c7a:	e7dd      	b.n	8c38 <bt_conn_send_cb+0x74>
		tx_data(buf)->tx = NULL;
    8c7c:	614a      	str	r2, [r1, #20]
    8c7e:	e7f6      	b.n	8c6e <bt_conn_send_cb+0xaa>
    8c80:	0002393c 	.word	0x0002393c
    8c84:	00023954 	.word	0x00023954
    8c88:	0002687f 	.word	0x0002687f
    8c8c:	20001390 	.word	0x20001390
    8c90:	200008b0 	.word	0x200008b0
    8c94:	0002688e 	.word	0x0002688e
    8c98:	000268ac 	.word	0x000268ac

00008c9c <bt_conn_prepare_events>:

	return 0;
}

int bt_conn_prepare_events(struct k_poll_event events[])
{
    8c9c:	b538      	push	{r3, r4, r5, lr}
	int i, ev_count = 0;
	struct bt_conn *conn;

	BT_DBG("");

	conn_change.signaled = 0U;
    8c9e:	4b1b      	ldr	r3, [pc, #108]	; (8d0c <bt_conn_prepare_events+0x70>)
    8ca0:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    8ca2:	2101      	movs	r1, #1
	conn_change.signaled = 0U;
    8ca4:	609a      	str	r2, [r3, #8]
{
    8ca6:	4604      	mov	r4, r0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    8ca8:	f01a fca8 	bl	235fc <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8cac:	f3bf 8f5b 	dmb	ish
    8cb0:	4b17      	ldr	r3, [pc, #92]	; (8d10 <bt_conn_prepare_events+0x74>)
    8cb2:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
    8cb6:	f3bf 8f5b 	dmb	ish
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		conn = &acl_conns[i];

		if (!conn_prepare_events(conn, &events[ev_count])) {
    8cba:	f104 0014 	add.w	r0, r4, #20
    8cbe:	4619      	mov	r1, r3
	if (!atomic_get(&conn->ref)) {
    8cc0:	b90a      	cbnz	r2, 8cc6 <bt_conn_prepare_events+0x2a>
		conn_cleanup(conn);
    8cc2:	2001      	movs	r0, #1
		}
	}
#endif

	return ev_count;
}
    8cc4:	bd38      	pop	{r3, r4, r5, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
    8cc6:	7b5a      	ldrb	r2, [r3, #13]
    8cc8:	b99a      	cbnz	r2, 8cf2 <bt_conn_prepare_events+0x56>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8cca:	f3bf 8f5b 	dmb	ish
    8cce:	1d1a      	adds	r2, r3, #4
    8cd0:	e852 5f00 	ldrex	r5, [r2]
    8cd4:	f025 0c40 	bic.w	ip, r5, #64	; 0x40
    8cd8:	e842 ce00 	strex	lr, ip, [r2]
    8cdc:	f1be 0f00 	cmp.w	lr, #0
    8ce0:	d1f6      	bne.n	8cd0 <bt_conn_prepare_events+0x34>
    8ce2:	f3bf 8f5b 	dmb	ish
    8ce6:	066a      	lsls	r2, r5, #25
    8ce8:	d503      	bpl.n	8cf2 <bt_conn_prepare_events+0x56>
		conn_cleanup(conn);
    8cea:	4618      	mov	r0, r3
    8cec:	f7ff febe 	bl	8a6c <conn_cleanup>
    8cf0:	e7e7      	b.n	8cc2 <bt_conn_prepare_events+0x26>
	if (conn->state != BT_CONN_CONNECTED) {
    8cf2:	7b4b      	ldrb	r3, [r1, #13]
    8cf4:	2b07      	cmp	r3, #7
    8cf6:	d1e4      	bne.n	8cc2 <bt_conn_prepare_events+0x26>
	k_poll_event_init(&events[0],
    8cf8:	4b06      	ldr	r3, [pc, #24]	; (8d14 <bt_conn_prepare_events+0x78>)
    8cfa:	2200      	movs	r2, #0
    8cfc:	2104      	movs	r1, #4
    8cfe:	f01a fc7d 	bl	235fc <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
    8d02:	2301      	movs	r3, #1
    8d04:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
    8d08:	2002      	movs	r0, #2
	return ev_count;
    8d0a:	e7db      	b.n	8cc4 <bt_conn_prepare_events+0x28>
    8d0c:	20000214 	.word	0x20000214
    8d10:	20000b88 	.word	0x20000b88
    8d14:	20000bc0 	.word	0x20000bc0

00008d18 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
    8d18:	b570      	push	{r4, r5, r6, lr}
    8d1a:	4606      	mov	r6, r0
    8d1c:	460d      	mov	r5, r1
	conn = bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
    8d1e:	4811      	ldr	r0, [pc, #68]	; (8d64 <bt_conn_add_le+0x4c>)
    8d20:	2101      	movs	r1, #1
    8d22:	f018 f863 	bl	20dec <bt_conn_new>
	if (!conn) {
    8d26:	4604      	mov	r4, r0
    8d28:	b1c8      	cbz	r0, 8d5e <bt_conn_add_le+0x46>
	k_work_init_delayable(&work->work, handler);
    8d2a:	490f      	ldr	r1, [pc, #60]	; (8d68 <bt_conn_add_le+0x50>)
    8d2c:	3058      	adds	r0, #88	; 0x58
    8d2e:	f01a fa7c 	bl	2322a <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
    8d32:	490e      	ldr	r1, [pc, #56]	; (8d6c <bt_conn_add_le+0x54>)
    8d34:	f104 0028 	add.w	r0, r4, #40	; 0x28
    8d38:	f01a fa51 	bl	231de <k_work_init>

	if (!conn) {
		return NULL;
	}

	conn->id = id;
    8d3c:	7226      	strb	r6, [r4, #8]
    8d3e:	682b      	ldr	r3, [r5, #0]
    8d40:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    8d44:	88ab      	ldrh	r3, [r5, #4]
    8d46:	f8a4 308c 	strh.w	r3, [r4, #140]	; 0x8c
    8d4a:	79ab      	ldrb	r3, [r5, #6]
    8d4c:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
    8d50:	2301      	movs	r3, #1
    8d52:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
    8d54:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
    8d56:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    8d58:	4b05      	ldr	r3, [pc, #20]	; (8d70 <bt_conn_add_le+0x58>)
    8d5a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
    8d5e:	4620      	mov	r0, r4
    8d60:	bd70      	pop	{r4, r5, r6, pc}
    8d62:	bf00      	nop
    8d64:	20000b88 	.word	0x20000b88
    8d68:	000090a1 	.word	0x000090a1
    8d6c:	00020de7 	.word	0x00020de7
    8d70:	00280018 	.word	0x00280018

00008d74 <bt_conn_lookup_handle>:
		break;
	}
}

struct bt_conn *bt_conn_lookup_handle(uint16_t handle)
{
    8d74:	4602      	mov	r2, r0
    8d76:	b508      	push	{r3, lr}
	struct bt_conn *conn;

	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
    8d78:	2101      	movs	r1, #1
    8d7a:	4803      	ldr	r0, [pc, #12]	; (8d88 <bt_conn_lookup_handle+0x14>)
    8d7c:	f018 f8ed 	bl	20f5a <conn_lookup_handle>
		return conn;
	}
#endif

	return NULL;
}
    8d80:	2800      	cmp	r0, #0
    8d82:	bf38      	it	cc
    8d84:	2000      	movcc	r0, #0
    8d86:	bd08      	pop	{r3, pc}
    8d88:	20000b88 	.word	0x20000b88

00008d8c <bt_conn_set_state>:
{
    8d8c:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
    8d8e:	7b46      	ldrb	r6, [r0, #13]
    8d90:	428e      	cmp	r6, r1
{
    8d92:	4604      	mov	r4, r0
    8d94:	460d      	mov	r5, r1
	if (conn->state == state) {
    8d96:	d112      	bne.n	8dbe <bt_conn_set_state+0x32>
    8d98:	4b6b      	ldr	r3, [pc, #428]	; (8f48 <bt_conn_set_state+0x1bc>)
    8d9a:	4a6c      	ldr	r2, [pc, #432]	; (8f4c <bt_conn_set_state+0x1c0>)
		BT_WARN("no transition %s", state2str(state));
    8d9c:	486c      	ldr	r0, [pc, #432]	; (8f50 <bt_conn_set_state+0x1c4>)
    8d9e:	2e08      	cmp	r6, #8
    8da0:	eba2 0203 	sub.w	r2, r2, r3
    8da4:	bf96      	itet	ls
    8da6:	4b6b      	ldrls	r3, [pc, #428]	; (8f54 <bt_conn_set_state+0x1c8>)
    8da8:	496b      	ldrhi	r1, [pc, #428]	; (8f58 <bt_conn_set_state+0x1cc>)
    8daa:	f853 1026 	ldrls.w	r1, [r3, r6, lsl #2]
    8dae:	08d2      	lsrs	r2, r2, #3
    8db0:	0192      	lsls	r2, r2, #6
    8db2:	f042 0202 	orr.w	r2, r2, #2
}
    8db6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
    8dba:	f015 beca 	b.w	1eb52 <log_1>
	conn->state = state;
    8dbe:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
    8dc0:	b90e      	cbnz	r6, 8dc6 <bt_conn_set_state+0x3a>
		bt_conn_ref(conn);
    8dc2:	f018 f898 	bl	20ef6 <bt_conn_ref>
	switch (conn->state) {
    8dc6:	7b63      	ldrb	r3, [r4, #13]
    8dc8:	2b08      	cmp	r3, #8
    8dca:	f200 80b2 	bhi.w	8f32 <bt_conn_set_state+0x1a6>
    8dce:	e8df f003 	tbb	[pc, r3]
    8dd2:	053f      	.short	0x053f
    8dd4:	babababa 	.word	0xbabababa
    8dd8:	1cba      	.short	0x1cba
    8dda:	ba          	.byte	0xba
    8ddb:	00          	.byte	0x00
	z_impl_k_sem_give(sem);
    8ddc:	4d5f      	ldr	r5, [pc, #380]	; (8f5c <bt_conn_set_state+0x1d0>)
		tx->pending_no_cb = 0U;
    8dde:	2600      	movs	r6, #0
	__asm__ volatile(
    8de0:	f04f 0320 	mov.w	r3, #32
    8de4:	f3ef 8211 	mrs	r2, BASEPRI
    8de8:	f383 8811 	msr	BASEPRI, r3
    8dec:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    8df0:	69e3      	ldr	r3, [r4, #28]
    8df2:	2b00      	cmp	r3, #0
    8df4:	d07e      	beq.n	8ef4 <bt_conn_set_state+0x168>
			conn->pending_no_cb--;
    8df6:	3b01      	subs	r3, #1
    8df8:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    8dfa:	f382 8811 	msr	BASEPRI, r2
    8dfe:	f3bf 8f6f 	isb	sy
    8e02:	4628      	mov	r0, r5
    8e04:	f014 fc8a 	bl	1d71c <z_impl_k_sem_give>
}
    8e08:	e7ea      	b.n	8de0 <bt_conn_set_state+0x54>
		if (conn->type == BT_CONN_TYPE_SCO) {
    8e0a:	78a3      	ldrb	r3, [r4, #2]
    8e0c:	2b04      	cmp	r3, #4
    8e0e:	f000 809a 	beq.w	8f46 <bt_conn_set_state+0x1ba>
	z_impl_k_queue_init(queue);
    8e12:	f104 0038 	add.w	r0, r4, #56	; 0x38
    8e16:	f019 ffe5 	bl	22de4 <z_impl_k_queue_init>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    8e1a:	2100      	movs	r1, #0
    8e1c:	4850      	ldr	r0, [pc, #320]	; (8f60 <bt_conn_set_state+0x1d4>)
    8e1e:	f015 f991 	bl	1e144 <z_impl_k_poll_signal_raise>
	list->head = NULL;
    8e22:	2300      	movs	r3, #0
	list->tail = NULL;
    8e24:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		bt_l2cap_connected(conn);
    8e28:	4620      	mov	r0, r4
    8e2a:	f000 faff 	bl	942c <bt_l2cap_connected>
		notify_connected(conn);
    8e2e:	4620      	mov	r0, r4
    8e30:	f7ff fcd6 	bl	87e0 <notify_connected>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    8e34:	78e3      	ldrb	r3, [r4, #3]
    8e36:	2b01      	cmp	r3, #1
    8e38:	f040 8085 	bne.w	8f46 <bt_conn_set_state+0x1ba>
	return k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
    8e3c:	f104 0158 	add.w	r1, r4, #88	; 0x58
    8e40:	4848      	ldr	r0, [pc, #288]	; (8f64 <bt_conn_set_state+0x1d8>)
}
    8e42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8e46:	f44f 3220 	mov.w	r2, #163840	; 0x28000
    8e4a:	2300      	movs	r3, #0
    8e4c:	f014 bedc 	b.w	1dc08 <k_work_reschedule_for_queue>
		if (conn->type == BT_CONN_TYPE_SCO) {
    8e50:	78a3      	ldrb	r3, [r4, #2]
    8e52:	2b04      	cmp	r3, #4
    8e54:	d104      	bne.n	8e60 <bt_conn_set_state+0xd4>
			bt_conn_unref(conn);
    8e56:	4620      	mov	r0, r4
}
    8e58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
    8e5c:	f018 b866 	b.w	20f2c <bt_conn_unref>
		switch (old_state) {
    8e60:	2e08      	cmp	r6, #8
    8e62:	d870      	bhi.n	8f46 <bt_conn_set_state+0x1ba>
    8e64:	a301      	add	r3, pc, #4	; (adr r3, 8e6c <bt_conn_set_state+0xe0>)
    8e66:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
    8e6a:	bf00      	nop
    8e6c:	00008ee1 	.word	0x00008ee1
    8e70:	00008e91 	.word	0x00008e91
    8e74:	00008ed3 	.word	0x00008ed3
    8e78:	00008e57 	.word	0x00008e57
    8e7c:	00008e57 	.word	0x00008e57
    8e80:	00008ed3 	.word	0x00008ed3
    8e84:	00008ed3 	.word	0x00008ed3
    8e88:	00008ee1 	.word	0x00008ee1
    8e8c:	00008ee1 	.word	0x00008ee1
			tx_notify(conn);
    8e90:	4620      	mov	r0, r4
    8e92:	f017 ff85 	bl	20da0 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
    8e96:	78a3      	ldrb	r3, [r4, #2]
    8e98:	2b01      	cmp	r3, #1
    8e9a:	d107      	bne.n	8eac <bt_conn_set_state+0x120>
	bool pending = k_work_delayable_is_pending(&work->work);
    8e9c:	f104 0558 	add.w	r5, r4, #88	; 0x58
	return k_work_delayable_busy_get(dwork) != 0;
    8ea0:	4628      	mov	r0, r5
    8ea2:	f01a f9ce 	bl	23242 <k_work_delayable_busy_get>
	int rc = k_work_cancel_delayable(&work->work);
    8ea6:	4628      	mov	r0, r5
    8ea8:	f01a f9df 	bl	2326a <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    8eac:	f3bf 8f5b 	dmb	ish
    8eb0:	3404      	adds	r4, #4
    8eb2:	e854 3f00 	ldrex	r3, [r4]
    8eb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8eba:	e844 3200 	strex	r2, r3, [r4]
    8ebe:	2a00      	cmp	r2, #0
    8ec0:	d1f7      	bne.n	8eb2 <bt_conn_set_state+0x126>
    8ec2:	f3bf 8f5b 	dmb	ish
    8ec6:	4826      	ldr	r0, [pc, #152]	; (8f60 <bt_conn_set_state+0x1d4>)
}
    8ec8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8ecc:	2100      	movs	r1, #0
    8ece:	f015 b939 	b.w	1e144 <z_impl_k_poll_signal_raise>
			if (conn->err) {
    8ed2:	7b23      	ldrb	r3, [r4, #12]
    8ed4:	2b00      	cmp	r3, #0
    8ed6:	d0be      	beq.n	8e56 <bt_conn_set_state+0xca>
				notify_connected(conn);
    8ed8:	4620      	mov	r0, r4
    8eda:	f7ff fc81 	bl	87e0 <notify_connected>
    8ede:	e7ba      	b.n	8e56 <bt_conn_set_state+0xca>
    8ee0:	4a1a      	ldr	r2, [pc, #104]	; (8f4c <bt_conn_set_state+0x1c0>)
    8ee2:	4b19      	ldr	r3, [pc, #100]	; (8f48 <bt_conn_set_state+0x1bc>)
			BT_WARN("Invalid (%u) old state", state);
    8ee4:	4820      	ldr	r0, [pc, #128]	; (8f68 <bt_conn_set_state+0x1dc>)
    8ee6:	1ad2      	subs	r2, r2, r3
    8ee8:	08d2      	lsrs	r2, r2, #3
    8eea:	0192      	lsls	r2, r2, #6
    8eec:	f042 0202 	orr.w	r2, r2, #2
    8ef0:	4629      	mov	r1, r5
    8ef2:	e760      	b.n	8db6 <bt_conn_set_state+0x2a>
Z_GENLIST_IS_EMPTY(slist)
    8ef4:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
    8ef6:	b128      	cbz	r0, 8f04 <bt_conn_set_state+0x178>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    8ef8:	69a1      	ldr	r1, [r4, #24]
    8efa:	6803      	ldr	r3, [r0, #0]
	list->head = node;
    8efc:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    8efe:	4288      	cmp	r0, r1
	list->tail = node;
    8f00:	bf08      	it	eq
    8f02:	61a3      	streq	r3, [r4, #24]
    8f04:	f382 8811 	msr	BASEPRI, r2
    8f08:	f3bf 8f6f 	isb	sy
		if (!node) {
    8f0c:	b1d8      	cbz	r0, 8f46 <bt_conn_set_state+0x1ba>
	__asm__ volatile(
    8f0e:	f04f 0220 	mov.w	r2, #32
    8f12:	f3ef 8311 	mrs	r3, BASEPRI
    8f16:	f382 8811 	msr	BASEPRI, r2
    8f1a:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    8f1e:	68c2      	ldr	r2, [r0, #12]
    8f20:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    8f22:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
    8f24:	f383 8811 	msr	BASEPRI, r3
    8f28:	f3bf 8f6f 	isb	sy
		tx_free(tx);
    8f2c:	f7ff fc4e 	bl	87cc <tx_free>
    8f30:	e767      	b.n	8e02 <bt_conn_set_state+0x76>
    8f32:	4a06      	ldr	r2, [pc, #24]	; (8f4c <bt_conn_set_state+0x1c0>)
    8f34:	4b04      	ldr	r3, [pc, #16]	; (8f48 <bt_conn_set_state+0x1bc>)
		BT_WARN("no valid (%u) state was set", state);
    8f36:	480d      	ldr	r0, [pc, #52]	; (8f6c <bt_conn_set_state+0x1e0>)
    8f38:	1ad2      	subs	r2, r2, r3
    8f3a:	08d2      	lsrs	r2, r2, #3
    8f3c:	0192      	lsls	r2, r2, #6
    8f3e:	f042 0202 	orr.w	r2, r2, #2
    8f42:	4629      	mov	r1, r5
    8f44:	e737      	b.n	8db6 <bt_conn_set_state+0x2a>
}
    8f46:	bd70      	pop	{r4, r5, r6, pc}
    8f48:	0002393c 	.word	0x0002393c
    8f4c:	00023954 	.word	0x00023954
    8f50:	000268dc 	.word	0x000268dc
    8f54:	00024050 	.word	0x00024050
    8f58:	000268d2 	.word	0x000268d2
    8f5c:	200000d0 	.word	0x200000d0
    8f60:	20000214 	.word	0x20000214
    8f64:	20001390 	.word	0x20001390
    8f68:	000268ed 	.word	0x000268ed
    8f6c:	00026904 	.word	0x00026904

00008f70 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
    8f70:	b570      	push	{r4, r5, r6, lr}
    8f72:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    8f74:	480c      	ldr	r0, [pc, #48]	; (8fa8 <bt_conn_lookup_addr_le+0x38>)
{
    8f76:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    8f78:	f017 ffbd 	bl	20ef6 <bt_conn_ref>

		if (!conn) {
    8f7c:	4604      	mov	r4, r0
    8f7e:	b128      	cbz	r0, 8f8c <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    8f80:	7883      	ldrb	r3, [r0, #2]
    8f82:	2b01      	cmp	r3, #1
    8f84:	d004      	beq.n	8f90 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
    8f86:	f017 ffd1 	bl	20f2c <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
    8f8a:	2400      	movs	r4, #0
}
    8f8c:	4620      	mov	r0, r4
    8f8e:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
    8f90:	4629      	mov	r1, r5
    8f92:	4632      	mov	r2, r6
    8f94:	f017 ff8f 	bl	20eb6 <bt_conn_is_peer_addr_le>
    8f98:	4605      	mov	r5, r0
    8f9a:	2800      	cmp	r0, #0
    8f9c:	d1f6      	bne.n	8f8c <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
    8f9e:	4620      	mov	r0, r4
    8fa0:	f017 ffc4 	bl	20f2c <bt_conn_unref>
	return NULL;
    8fa4:	462c      	mov	r4, r5
			continue;
    8fa6:	e7f1      	b.n	8f8c <bt_conn_lookup_addr_le+0x1c>
    8fa8:	20000b88 	.word	0x20000b88

00008fac <bt_conn_exists_le>:
{
    8fac:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
    8fae:	f7ff ffdf 	bl	8f70 <bt_conn_lookup_addr_le>
	if (conn) {
    8fb2:	4604      	mov	r4, r0
    8fb4:	b1a0      	cbz	r0, 8fe0 <bt_conn_exists_le+0x34>
    8fb6:	4b0b      	ldr	r3, [pc, #44]	; (8fe4 <bt_conn_exists_le+0x38>)
    8fb8:	4a0b      	ldr	r2, [pc, #44]	; (8fe8 <bt_conn_exists_le+0x3c>)
    8fba:	1ad2      	subs	r2, r2, r3
		BT_WARN("Found valid connection in %s state",
    8fbc:	7b43      	ldrb	r3, [r0, #13]
    8fbe:	480b      	ldr	r0, [pc, #44]	; (8fec <bt_conn_exists_le+0x40>)
    8fc0:	2b08      	cmp	r3, #8
    8fc2:	bf96      	itet	ls
    8fc4:	490a      	ldrls	r1, [pc, #40]	; (8ff0 <bt_conn_exists_le+0x44>)
    8fc6:	490b      	ldrhi	r1, [pc, #44]	; (8ff4 <bt_conn_exists_le+0x48>)
    8fc8:	f851 1023 	ldrls.w	r1, [r1, r3, lsl #2]
    8fcc:	08d2      	lsrs	r2, r2, #3
    8fce:	0192      	lsls	r2, r2, #6
    8fd0:	f042 0202 	orr.w	r2, r2, #2
    8fd4:	f015 fdbd 	bl	1eb52 <log_1>
		bt_conn_unref(conn);
    8fd8:	4620      	mov	r0, r4
    8fda:	f017 ffa7 	bl	20f2c <bt_conn_unref>
		return true;
    8fde:	2001      	movs	r0, #1
}
    8fe0:	bd10      	pop	{r4, pc}
    8fe2:	bf00      	nop
    8fe4:	0002393c 	.word	0x0002393c
    8fe8:	00023954 	.word	0x00023954
    8fec:	00026920 	.word	0x00026920
    8ff0:	00024050 	.word	0x00024050
    8ff4:	000268d2 	.word	0x000268d2

00008ff8 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
    8ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8ffa:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    8ffc:	480f      	ldr	r0, [pc, #60]	; (903c <bt_conn_lookup_state_le+0x44>)
{
    8ffe:	460e      	mov	r6, r1
    9000:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    9002:	f017 ff78 	bl	20ef6 <bt_conn_ref>

		if (!conn) {
    9006:	4604      	mov	r4, r0
    9008:	b1b0      	cbz	r0, 9038 <bt_conn_lookup_state_le+0x40>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    900a:	7883      	ldrb	r3, [r0, #2]
    900c:	2b01      	cmp	r3, #1
    900e:	d003      	beq.n	9018 <bt_conn_lookup_state_le+0x20>
			bt_conn_ref(conn);
    9010:	f017 ff71 	bl	20ef6 <bt_conn_ref>
		}

		return conn;
	}

	return NULL;
    9014:	2400      	movs	r4, #0
			continue;
    9016:	e00f      	b.n	9038 <bt_conn_lookup_state_le+0x40>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
    9018:	b146      	cbz	r6, 902c <bt_conn_lookup_state_le+0x34>
    901a:	4632      	mov	r2, r6
    901c:	4629      	mov	r1, r5
    901e:	f017 ff4a 	bl	20eb6 <bt_conn_is_peer_addr_le>
    9022:	b918      	cbnz	r0, 902c <bt_conn_lookup_state_le+0x34>
			bt_conn_unref(conn);
    9024:	4620      	mov	r0, r4
    9026:	f017 ff81 	bl	20f2c <bt_conn_unref>
    902a:	e7f3      	b.n	9014 <bt_conn_lookup_state_le+0x1c>
		if (!(conn->state == state && conn->id == id)) {
    902c:	7b63      	ldrb	r3, [r4, #13]
    902e:	42bb      	cmp	r3, r7
    9030:	d1f8      	bne.n	9024 <bt_conn_lookup_state_le+0x2c>
    9032:	7a23      	ldrb	r3, [r4, #8]
    9034:	42ab      	cmp	r3, r5
    9036:	d1f5      	bne.n	9024 <bt_conn_lookup_state_le+0x2c>
}
    9038:	4620      	mov	r0, r4
    903a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    903c:	20000b88 	.word	0x20000b88

00009040 <send_conn_le_param_update>:
{
    9040:	b538      	push	{r3, r4, r5, lr}
    9042:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
    9044:	4608      	mov	r0, r1
{
    9046:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    9048:	f017 fcaf 	bl	209aa <bt_le_conn_params_valid>
    904c:	b318      	cbz	r0, 9096 <send_conn_le_param_update+0x56>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    904e:	4b13      	ldr	r3, [pc, #76]	; (909c <send_conn_le_param_update+0x5c>)
    9050:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
    9054:	0799      	lsls	r1, r3, #30
    9056:	d407      	bmi.n	9068 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
    9058:	78e3      	ldrb	r3, [r4, #3]
    905a:	b183      	cbz	r3, 907e <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
    905c:	4629      	mov	r1, r5
    905e:	4620      	mov	r0, r4
}
    9060:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    9064:	f000 bae8 	b.w	9638 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    9068:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
    906c:	079a      	lsls	r2, r3, #30
    906e:	d5f3      	bpl.n	9058 <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9070:	f3bf 8f5b 	dmb	ish
    9074:	6863      	ldr	r3, [r4, #4]
    9076:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
    907a:	055b      	lsls	r3, r3, #21
    907c:	d4ec      	bmi.n	9058 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
    907e:	4629      	mov	r1, r5
    9080:	4620      	mov	r0, r4
    9082:	f017 ffb2 	bl	20fea <bt_conn_le_conn_update>
		if (rc == 0) {
    9086:	b928      	cbnz	r0, 9094 <send_conn_le_param_update+0x54>
			conn->le.pending_latency = param->latency;
    9088:	88ab      	ldrh	r3, [r5, #4]
    908a:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
    908e:	88eb      	ldrh	r3, [r5, #6]
    9090:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
    9094:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    9096:	f06f 0015 	mvn.w	r0, #21
    909a:	e7fb      	b.n	9094 <send_conn_le_param_update+0x54>
    909c:	20000000 	.word	0x20000000

000090a0 <deferred_work>:
{
    90a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
    90a2:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
    90a6:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
    90a8:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
    90ac:	b993      	cbnz	r3, 90d4 <deferred_work+0x34>
		bt_l2cap_disconnected(conn);
    90ae:	4630      	mov	r0, r6
    90b0:	f017 fffc 	bl	210ac <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    90b4:	4b1f      	ldr	r3, [pc, #124]	; (9134 <deferred_work+0x94>)
    90b6:	681d      	ldr	r5, [r3, #0]
    90b8:	b925      	cbnz	r5, 90c4 <deferred_work+0x24>
		bt_conn_unref(conn);
    90ba:	4630      	mov	r0, r6
    90bc:	f017 ff36 	bl	20f2c <bt_conn_unref>
}
    90c0:	b002      	add	sp, #8
    90c2:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->disconnected) {
    90c4:	686b      	ldr	r3, [r5, #4]
    90c6:	b11b      	cbz	r3, 90d0 <deferred_work+0x30>
			cb->disconnected(conn, conn->err);
    90c8:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
    90cc:	4630      	mov	r0, r6
    90ce:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    90d0:	69ad      	ldr	r5, [r5, #24]
    90d2:	e7f1      	b.n	90b8 <deferred_work+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
    90d4:	f810 3c56 	ldrb.w	r3, [r0, #-86]
    90d8:	2b01      	cmp	r3, #1
    90da:	d1f1      	bne.n	90c0 <deferred_work+0x20>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    90dc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(conn->flags,
    90e0:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
    90e4:	e855 3f00 	ldrex	r3, [r5]
    90e8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
    90ec:	e845 2100 	strex	r1, r2, [r5]
    90f0:	2900      	cmp	r1, #0
    90f2:	d1f7      	bne.n	90e4 <deferred_work+0x44>
    90f4:	f3bf 8f5b 	dmb	ish
    90f8:	059b      	lsls	r3, r3, #22
    90fa:	d514      	bpl.n	9126 <deferred_work+0x86>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    90fc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    90fe:	9300      	str	r3, [sp, #0]
    9100:	6d23      	ldr	r3, [r4, #80]	; 0x50
    9102:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
    9104:	4669      	mov	r1, sp
    9106:	4630      	mov	r0, r6
    9108:	f7ff ff9a 	bl	9040 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    910c:	f3bf 8f5b 	dmb	ish
    9110:	e855 3f00 	ldrex	r3, [r5]
    9114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    9118:	e845 3200 	strex	r2, r3, [r5]
    911c:	2a00      	cmp	r2, #0
    911e:	d1f7      	bne.n	9110 <deferred_work+0x70>
    9120:	f3bf 8f5b 	dmb	ish
    9124:	e7cc      	b.n	90c0 <deferred_work+0x20>
		param = BT_LE_CONN_PARAM(
    9126:	4a04      	ldr	r2, [pc, #16]	; (9138 <deferred_work+0x98>)
    9128:	6810      	ldr	r0, [r2, #0]
    912a:	6851      	ldr	r1, [r2, #4]
    912c:	466b      	mov	r3, sp
    912e:	c303      	stmia	r3!, {r0, r1}
    9130:	e7e8      	b.n	9104 <deferred_work+0x64>
    9132:	bf00      	nop
    9134:	20001618 	.word	0x20001618
    9138:	00023bae 	.word	0x00023bae

0000913c <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
    913c:	b538      	push	{r3, r4, r5, lr}
    913e:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
    9140:	490c      	ldr	r1, [pc, #48]	; (9174 <bt_conn_create_pdu_timeout+0x38>)
    9142:	2800      	cmp	r0, #0
    9144:	bf08      	it	eq
    9146:	4608      	moveq	r0, r1
    9148:	f019 fa1d 	bl	22586 <net_buf_alloc_fixed>
#else
		buf = net_buf_alloc(pool, timeout);
#endif
	}

	if (!buf) {
    914c:	4604      	mov	r4, r0
    914e:	b958      	cbnz	r0, 9168 <bt_conn_create_pdu_timeout+0x2c>
    9150:	4909      	ldr	r1, [pc, #36]	; (9178 <bt_conn_create_pdu_timeout+0x3c>)
    9152:	4b0a      	ldr	r3, [pc, #40]	; (917c <bt_conn_create_pdu_timeout+0x40>)
		BT_WARN("Unable to allocate buffer within timeout");
    9154:	480a      	ldr	r0, [pc, #40]	; (9180 <bt_conn_create_pdu_timeout+0x44>)
    9156:	1ac9      	subs	r1, r1, r3
    9158:	08c9      	lsrs	r1, r1, #3
    915a:	0189      	lsls	r1, r1, #6
    915c:	f041 0102 	orr.w	r1, r1, #2
    9160:	f015 fcea 	bl	1eb38 <log_0>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
    9164:	4620      	mov	r0, r4
    9166:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_simple_reserve(&buf->b, reserve);
    9168:	1d29      	adds	r1, r5, #4
    916a:	3008      	adds	r0, #8
    916c:	f019 fa2a 	bl	225c4 <net_buf_simple_reserve>
	return buf;
    9170:	e7f8      	b.n	9164 <bt_conn_create_pdu_timeout+0x28>
    9172:	bf00      	nop
    9174:	200008e0 	.word	0x200008e0
    9178:	00023954 	.word	0x00023954
    917c:	0002393c 	.word	0x0002393c
    9180:	00026943 	.word	0x00026943

00009184 <bt_conn_create_frag_timeout>:
{
    9184:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
    9186:	4801      	ldr	r0, [pc, #4]	; (918c <bt_conn_create_frag_timeout+0x8>)
    9188:	f7ff bfd8 	b.w	913c <bt_conn_create_pdu_timeout>
    918c:	20000930 	.word	0x20000930

00009190 <create_frag.isra.0>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    9190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9194:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
    9196:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    919a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    919e:	2000      	movs	r0, #0
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    91a0:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
    91a2:	f7ff ffef 	bl	9184 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
    91a6:	7833      	ldrb	r3, [r6, #0]
    91a8:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
    91aa:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    91ac:	f04f 0600 	mov.w	r6, #0
    91b0:	d005      	beq.n	91be <create_frag.isra.0+0x2e>
		net_buf_unref(frag);
    91b2:	f010 ffdb 	bl	1a16c <net_buf_unref>
		return NULL;
    91b6:	4635      	mov	r5, r6
}
    91b8:	4628      	mov	r0, r5
    91ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
    91be:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
    91c0:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
    91c4:	4e0c      	ldr	r6, [pc, #48]	; (91f8 <create_frag.isra.0+0x68>)
    91c6:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    91c8:	f8b6 80cc 	ldrh.w	r8, [r6, #204]	; 0xcc
    91cc:	f019 fa6d 	bl	226aa <net_buf_simple_tailroom>
    91d0:	4580      	cmp	r8, r0
    91d2:	d20c      	bcs.n	91ee <create_frag.isra.0+0x5e>
	return bt_dev.le.acl_mtu;
    91d4:	f8b6 60cc 	ldrh.w	r6, [r6, #204]	; 0xcc
	return net_buf_simple_add_mem(&buf->b, mem, len);
    91d8:	f854 1f08 	ldr.w	r1, [r4, #8]!
    91dc:	4632      	mov	r2, r6
    91de:	4638      	mov	r0, r7
    91e0:	f019 fa2d 	bl	2263e <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
    91e4:	4631      	mov	r1, r6
    91e6:	4620      	mov	r0, r4
    91e8:	f019 fa43 	bl	22672 <net_buf_simple_pull>
    91ec:	e7e4      	b.n	91b8 <create_frag.isra.0+0x28>
	return net_buf_simple_tailroom(&buf->b);
    91ee:	4638      	mov	r0, r7
    91f0:	f019 fa5b 	bl	226aa <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    91f4:	b286      	uxth	r6, r0
    91f6:	e7ef      	b.n	91d8 <create_frag.isra.0+0x48>
    91f8:	20000000 	.word	0x20000000

000091fc <bt_conn_process_tx>:
{
    91fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    91fe:	7b43      	ldrb	r3, [r0, #13]
{
    9200:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    9202:	b993      	cbnz	r3, 922a <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9204:	f3bf 8f5b 	dmb	ish
    9208:	1d03      	adds	r3, r0, #4
    920a:	e853 2f00 	ldrex	r2, [r3]
    920e:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    9212:	e843 1400 	strex	r4, r1, [r3]
    9216:	2c00      	cmp	r4, #0
    9218:	d1f7      	bne.n	920a <bt_conn_process_tx+0xe>
    921a:	f3bf 8f5b 	dmb	ish
    921e:	0653      	lsls	r3, r2, #25
    9220:	d503      	bpl.n	922a <bt_conn_process_tx+0x2e>
}
    9222:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
    9226:	f7ff bc21 	b.w	8a6c <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    922a:	2200      	movs	r2, #0
    922c:	2300      	movs	r3, #0
    922e:	f105 0038 	add.w	r0, r5, #56	; 0x38
    9232:	f019 f9ad 	bl	22590 <net_buf_get>
	BT_ASSERT(buf);
    9236:	4604      	mov	r4, r0
    9238:	b960      	cbnz	r0, 9254 <bt_conn_process_tx+0x58>
    923a:	4a20      	ldr	r2, [pc, #128]	; (92bc <bt_conn_process_tx+0xc0>)
    923c:	4920      	ldr	r1, [pc, #128]	; (92c0 <bt_conn_process_tx+0xc4>)
    923e:	4821      	ldr	r0, [pc, #132]	; (92c4 <bt_conn_process_tx+0xc8>)
    9240:	f240 5361 	movw	r3, #1377	; 0x561
    9244:	f015 f89e 	bl	1e384 <printk>
    9248:	4040      	eors	r0, r0
    924a:	f380 8811 	msr	BASEPRI, r0
    924e:	f04f 0003 	mov.w	r0, #3
    9252:	df02      	svc	2
	return bt_dev.le.acl_mtu;
    9254:	4f1c      	ldr	r7, [pc, #112]	; (92c8 <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
    9256:	89a1      	ldrh	r1, [r4, #12]
    9258:	f8b7 20cc 	ldrh.w	r2, [r7, #204]	; 0xcc
    925c:	4291      	cmp	r1, r2
    925e:	d807      	bhi.n	9270 <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, FRAG_SINGLE, false);
    9260:	2300      	movs	r3, #0
    9262:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
    9264:	4621      	mov	r1, r4
    9266:	4628      	mov	r0, r5
    9268:	f7ff fad0 	bl	880c <send_frag>
	if (!send_buf(conn, buf)) {
    926c:	b140      	cbz	r0, 9280 <bt_conn_process_tx+0x84>
}
    926e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
    9270:	f105 060d 	add.w	r6, r5, #13
    9274:	4621      	mov	r1, r4
    9276:	4630      	mov	r0, r6
    9278:	f7ff ff8a 	bl	9190 <create_frag.isra.0>
	if (!frag) {
    927c:	4601      	mov	r1, r0
    927e:	b920      	cbnz	r0, 928a <bt_conn_process_tx+0x8e>
		net_buf_unref(buf);
    9280:	4620      	mov	r0, r4
}
    9282:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    9286:	f010 bf71 	b.w	1a16c <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
    928a:	2301      	movs	r3, #1
    928c:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    928e:	4628      	mov	r0, r5
    9290:	f7ff fabc 	bl	880c <send_frag>
    9294:	2800      	cmp	r0, #0
    9296:	d0f3      	beq.n	9280 <bt_conn_process_tx+0x84>
	while (buf->len > conn_mtu(conn)) {
    9298:	89a2      	ldrh	r2, [r4, #12]
    929a:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
    929e:	429a      	cmp	r2, r3
    92a0:	d802      	bhi.n	92a8 <bt_conn_process_tx+0xac>
	return send_frag(conn, buf, FRAG_END, false);
    92a2:	2300      	movs	r3, #0
    92a4:	2203      	movs	r2, #3
    92a6:	e7dd      	b.n	9264 <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
    92a8:	4621      	mov	r1, r4
    92aa:	4630      	mov	r0, r6
    92ac:	f7ff ff70 	bl	9190 <create_frag.isra.0>
		if (!frag) {
    92b0:	4601      	mov	r1, r0
    92b2:	2800      	cmp	r0, #0
    92b4:	d0e4      	beq.n	9280 <bt_conn_process_tx+0x84>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    92b6:	2301      	movs	r3, #1
    92b8:	461a      	mov	r2, r3
    92ba:	e7e8      	b.n	928e <bt_conn_process_tx+0x92>
    92bc:	0002696c 	.word	0x0002696c
    92c0:	00025d57 	.word	0x00025d57
    92c4:	00026048 	.word	0x00026048
    92c8:	20000000 	.word	0x20000000

000092cc <bt_conn_auth_cb_register>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
    92cc:	4b0c      	ldr	r3, [pc, #48]	; (9300 <bt_conn_auth_cb_register+0x34>)
    92ce:	b908      	cbnz	r0, 92d4 <bt_conn_auth_cb_register+0x8>
		bt_auth = NULL;
    92d0:	6018      	str	r0, [r3, #0]
		return 0;
    92d2:	4770      	bx	lr
	}

	if (bt_auth) {
    92d4:	681a      	ldr	r2, [r3, #0]
    92d6:	b962      	cbnz	r2, 92f2 <bt_conn_auth_cb_register+0x26>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
    92d8:	6902      	ldr	r2, [r0, #16]
    92da:	b93a      	cbnz	r2, 92ec <bt_conn_auth_cb_register+0x20>
    92dc:	6802      	ldr	r2, [r0, #0]
    92de:	b95a      	cbnz	r2, 92f8 <bt_conn_auth_cb_register+0x2c>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
    92e0:	6842      	ldr	r2, [r0, #4]
    92e2:	b94a      	cbnz	r2, 92f8 <bt_conn_auth_cb_register+0x2c>
    92e4:	6882      	ldr	r2, [r0, #8]
    92e6:	b93a      	cbnz	r2, 92f8 <bt_conn_auth_cb_register+0x2c>
    92e8:	6942      	ldr	r2, [r0, #20]
    92ea:	b92a      	cbnz	r2, 92f8 <bt_conn_auth_cb_register+0x2c>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
    92ec:	6018      	str	r0, [r3, #0]
	return 0;
    92ee:	2000      	movs	r0, #0
    92f0:	4770      	bx	lr
		return -EALREADY;
    92f2:	f06f 0077 	mvn.w	r0, #119	; 0x77
    92f6:	4770      	bx	lr
		return -EINVAL;
    92f8:	f06f 0015 	mvn.w	r0, #21
}
    92fc:	4770      	bx	lr
    92fe:	bf00      	nop
    9300:	20001614 	.word	0x20001614

00009304 <bt_conn_index>:
		__ASSERT(0 <= index && index < ARRAY_SIZE(sco_conns),
			"Invalid bt_conn pointer");
		break;
#endif
	default:
		index = conn - acl_conns;
    9304:	4b03      	ldr	r3, [pc, #12]	; (9314 <bt_conn_index+0x10>)
    9306:	1ac0      	subs	r0, r0, r3
    9308:	4b03      	ldr	r3, [pc, #12]	; (9318 <bt_conn_index+0x14>)
    930a:	1180      	asrs	r0, r0, #6
    930c:	4358      	muls	r0, r3
			 "Invalid bt_conn pointer");
		break;
	}

	return (uint8_t)index;
}
    930e:	b2c0      	uxtb	r0, r0
    9310:	4770      	bx	lr
    9312:	bf00      	nop
    9314:	20000b88 	.word	0x20000b88
    9318:	aaaaaaab 	.word	0xaaaaaaab

0000931c <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
    931c:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
    931e:	490b      	ldr	r1, [pc, #44]	; (934c <bt_conn_init+0x30>)
    9320:	480b      	ldr	r0, [pc, #44]	; (9350 <bt_conn_init+0x34>)
    9322:	f019 fd6b 	bl	22dfc <k_queue_append>
    9326:	490b      	ldr	r1, [pc, #44]	; (9354 <bt_conn_init+0x38>)
    9328:	4809      	ldr	r0, [pc, #36]	; (9350 <bt_conn_init+0x34>)
    932a:	f019 fd67 	bl	22dfc <k_queue_append>
    932e:	490a      	ldr	r1, [pc, #40]	; (9358 <bt_conn_init+0x3c>)
    9330:	4807      	ldr	r0, [pc, #28]	; (9350 <bt_conn_init+0x34>)
    9332:	f019 fd63 	bl	22dfc <k_queue_append>
	}

	bt_att_init();
    9336:	f018 fa2c 	bl	21792 <bt_att_init>

	err = bt_smp_init();
    933a:	f003 fbbb 	bl	cab4 <bt_smp_init>
	if (err) {
    933e:	4604      	mov	r4, r0
    9340:	b908      	cbnz	r0, 9346 <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
    9342:	f017 ff1f 	bl	21184 <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
    9346:	4620      	mov	r0, r4
    9348:	bd10      	pop	{r4, pc}
    934a:	bf00      	nop
    934c:	2000161c 	.word	0x2000161c
    9350:	200008b0 	.word	0x200008b0
    9354:	2000162c 	.word	0x2000162c
    9358:	2000163c 	.word	0x2000163c

0000935c <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    935c:	4a0b      	ldr	r2, [pc, #44]	; (938c <l2cap_accept+0x30>)
{
    935e:	b508      	push	{r3, lr}
    9360:	4603      	mov	r3, r0
		if (l2cap->chan.chan.conn) {
    9362:	6810      	ldr	r0, [r2, #0]
    9364:	b918      	cbnz	r0, 936e <l2cap_accept+0x12>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    9366:	4b0a      	ldr	r3, [pc, #40]	; (9390 <l2cap_accept+0x34>)
    9368:	6053      	str	r3, [r2, #4]
		*chan = &l2cap->chan.chan;
    936a:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
    936c:	bd08      	pop	{r3, pc}
    936e:	4909      	ldr	r1, [pc, #36]	; (9394 <l2cap_accept+0x38>)
    9370:	4a09      	ldr	r2, [pc, #36]	; (9398 <l2cap_accept+0x3c>)
	BT_ERR("No available L2CAP context for conn %p", conn);
    9372:	480a      	ldr	r0, [pc, #40]	; (939c <l2cap_accept+0x40>)
    9374:	1a52      	subs	r2, r2, r1
    9376:	08d2      	lsrs	r2, r2, #3
    9378:	0192      	lsls	r2, r2, #6
    937a:	f042 0201 	orr.w	r2, r2, #1
    937e:	4619      	mov	r1, r3
    9380:	f015 fbe7 	bl	1eb52 <log_1>
	return -ENOMEM;
    9384:	f06f 000b 	mvn.w	r0, #11
    9388:	e7f0      	b.n	936c <l2cap_accept+0x10>
    938a:	bf00      	nop
    938c:	20000c48 	.word	0x20000c48
    9390:	00024094 	.word	0x00024094
    9394:	0002393c 	.word	0x0002393c
    9398:	00023a34 	.word	0x00023a34
    939c:	000269f9 	.word	0x000269f9

000093a0 <l2cap_create_le_sig_pdu.isra.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    93a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    93a2:	4605      	mov	r5, r0
    93a4:	460f      	mov	r7, r1
    93a6:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
    93a8:	2300      	movs	r3, #0
    93aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    93ae:	2104      	movs	r1, #4
    93b0:	2000      	movs	r0, #0
    93b2:	f7ff fec3 	bl	913c <bt_conn_create_pdu_timeout>
	if (!buf) {
    93b6:	4604      	mov	r4, r0
    93b8:	b960      	cbnz	r0, 93d4 <l2cap_create_le_sig_pdu.isra.0+0x34>
    93ba:	4a0a      	ldr	r2, [pc, #40]	; (93e4 <l2cap_create_le_sig_pdu.isra.0+0x44>)
    93bc:	4b0a      	ldr	r3, [pc, #40]	; (93e8 <l2cap_create_le_sig_pdu.isra.0+0x48>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
    93be:	480b      	ldr	r0, [pc, #44]	; (93ec <l2cap_create_le_sig_pdu.isra.0+0x4c>)
    93c0:	1ad2      	subs	r2, r2, r3
    93c2:	08d2      	lsrs	r2, r2, #3
    93c4:	0192      	lsls	r2, r2, #6
    93c6:	f042 0201 	orr.w	r2, r2, #1
    93ca:	4629      	mov	r1, r5
    93cc:	f015 fbc1 	bl	1eb52 <log_1>
}
    93d0:	4620      	mov	r0, r4
    93d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
    93d4:	2104      	movs	r1, #4
    93d6:	3008      	adds	r0, #8
    93d8:	f019 f92b 	bl	22632 <net_buf_simple_add>
	hdr->code = code;
    93dc:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
    93de:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    93e0:	8046      	strh	r6, [r0, #2]
	return buf;
    93e2:	e7f5      	b.n	93d0 <l2cap_create_le_sig_pdu.isra.0+0x30>
    93e4:	00023a34 	.word	0x00023a34
    93e8:	0002393c 	.word	0x0002393c
    93ec:	00026a20 	.word	0x00026a20

000093f0 <l2cap_rtx_timeout>:
{
    93f0:	b538      	push	{r3, r4, r5, lr}
    93f2:	4a0b      	ldr	r2, [pc, #44]	; (9420 <l2cap_rtx_timeout+0x30>)
    93f4:	4b0b      	ldr	r3, [pc, #44]	; (9424 <l2cap_rtx_timeout+0x34>)
	struct bt_conn *conn = chan->chan.conn;
    93f6:	4604      	mov	r4, r0
    93f8:	1ad2      	subs	r2, r2, r3
    93fa:	f854 5d10 	ldr.w	r5, [r4, #-16]!
	BT_ERR("chan %p timeout", chan);
    93fe:	480a      	ldr	r0, [pc, #40]	; (9428 <l2cap_rtx_timeout+0x38>)
    9400:	08d2      	lsrs	r2, r2, #3
    9402:	0192      	lsls	r2, r2, #6
    9404:	4621      	mov	r1, r4
    9406:	f042 0201 	orr.w	r2, r2, #1
    940a:	f015 fba2 	bl	1eb52 <log_1>
	bt_l2cap_chan_remove(conn, &chan->chan);
    940e:	4628      	mov	r0, r5
    9410:	4621      	mov	r1, r4
    9412:	f017 fe14 	bl	2103e <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    9416:	4620      	mov	r0, r4
}
    9418:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
    941c:	f017 be31 	b.w	21082 <bt_l2cap_chan_del>
    9420:	00023a34 	.word	0x00023a34
    9424:	0002393c 	.word	0x0002393c
    9428:	00026a48 	.word	0x00026a48

0000942c <bt_l2cap_connected>:
{
    942c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    9430:	4e29      	ldr	r6, [pc, #164]	; (94d8 <bt_l2cap_connected+0xac>)
    9432:	4f2a      	ldr	r7, [pc, #168]	; (94dc <bt_l2cap_connected+0xb0>)
	k_work_init_delayable(&work->work, handler);
    9434:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 94e0 <bt_l2cap_connected+0xb4>
{
    9438:	4604      	mov	r4, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    943a:	42be      	cmp	r6, r7
    943c:	d302      	bcc.n	9444 <bt_l2cap_connected+0x18>
}
    943e:	b003      	add	sp, #12
    9440:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
    9444:	6873      	ldr	r3, [r6, #4]
    9446:	a901      	add	r1, sp, #4
    9448:	4620      	mov	r0, r4
    944a:	4798      	blx	r3
    944c:	2800      	cmp	r0, #0
    944e:	db3d      	blt.n	94cc <bt_l2cap_connected+0xa0>
		ch = BT_L2CAP_LE_CHAN(chan);
    9450:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
    9452:	8833      	ldrh	r3, [r6, #0]
    9454:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
		ch->tx.cid = fchan->cid;
    9458:	f8a5 3054 	strh.w	r3, [r5, #84]	; 0x54
    945c:	4641      	mov	r1, r8
    945e:	f105 0010 	add.w	r0, r5, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    9462:	f8d6 9008 	ldr.w	r9, [r6, #8]
    9466:	f019 fee0 	bl	2322a <k_work_init_delayable>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    946a:	f3bf 8f5b 	dmb	ish
    946e:	f105 0340 	add.w	r3, r5, #64	; 0x40
    9472:	2200      	movs	r2, #0
    9474:	e853 1f00 	ldrex	r1, [r3]
    9478:	e843 2000 	strex	r0, r2, [r3]
    947c:	2800      	cmp	r0, #0
    947e:	d1f9      	bne.n	9474 <bt_l2cap_connected+0x48>
    9480:	f3bf 8f5b 	dmb	ish
	parent->next = child;
    9484:	60aa      	str	r2, [r5, #8]
Z_GENLIST_APPEND(slist, snode)
    9486:	6d62      	ldr	r2, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
    9488:	f105 0308 	add.w	r3, r5, #8
    948c:	bb02      	cbnz	r2, 94d0 <bt_l2cap_connected+0xa4>
	list->head = node;
    948e:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (chan->ops->connected) {
    9492:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    9494:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
    9496:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    9498:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
    949c:	681b      	ldr	r3, [r3, #0]
    949e:	b103      	cbz	r3, 94a2 <bt_l2cap_connected+0x76>
			chan->ops->connected(chan);
    94a0:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    94a2:	9b01      	ldr	r3, [sp, #4]
    94a4:	f3bf 8f5b 	dmb	ish
    94a8:	3340      	adds	r3, #64	; 0x40
    94aa:	e853 2f00 	ldrex	r2, [r3]
    94ae:	f042 0201 	orr.w	r2, r2, #1
    94b2:	e843 2100 	strex	r1, r2, [r3]
    94b6:	2900      	cmp	r1, #0
    94b8:	d1f7      	bne.n	94aa <bt_l2cap_connected+0x7e>
    94ba:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
    94be:	9801      	ldr	r0, [sp, #4]
    94c0:	6843      	ldr	r3, [r0, #4]
    94c2:	699b      	ldr	r3, [r3, #24]
    94c4:	b113      	cbz	r3, 94cc <bt_l2cap_connected+0xa0>
			chan->ops->status(chan, chan->status);
    94c6:	f100 0140 	add.w	r1, r0, #64	; 0x40
    94ca:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    94cc:	360c      	adds	r6, #12
    94ce:	e7b4      	b.n	943a <bt_l2cap_connected+0xe>
	parent->next = child;
    94d0:	6013      	str	r3, [r2, #0]
	list->tail = node;
    94d2:	6563      	str	r3, [r4, #84]	; 0x54
}
    94d4:	e7dd      	b.n	9492 <bt_l2cap_connected+0x66>
    94d6:	bf00      	nop
    94d8:	000238f8 	.word	0x000238f8
    94dc:	0002391c 	.word	0x0002391c
    94e0:	000093f1 	.word	0x000093f1

000094e4 <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
    94e4:	898b      	ldrh	r3, [r1, #12]
    94e6:	2b03      	cmp	r3, #3
{
    94e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    94ea:	4606      	mov	r6, r0
    94ec:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    94ee:	d80a      	bhi.n	9506 <l2cap_recv+0x22>
    94f0:	492e      	ldr	r1, [pc, #184]	; (95ac <l2cap_recv+0xc8>)
    94f2:	4b2f      	ldr	r3, [pc, #188]	; (95b0 <l2cap_recv+0xcc>)
		BT_ERR("Too small L2CAP signaling PDU");
    94f4:	482f      	ldr	r0, [pc, #188]	; (95b4 <l2cap_recv+0xd0>)
    94f6:	1ac9      	subs	r1, r1, r3
    94f8:	08c9      	lsrs	r1, r1, #3
    94fa:	0189      	lsls	r1, r1, #6
    94fc:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Invalid ident value in L2CAP PDU");
    9500:	f015 fb1a 	bl	1eb38 <log_0>
		return 0;
    9504:	e013      	b.n	952e <l2cap_recv+0x4a>
	return net_buf_simple_pull_mem(&buf->b, len);
    9506:	2104      	movs	r1, #4
    9508:	f105 0008 	add.w	r0, r5, #8
    950c:	f019 f8b9 	bl	22682 <net_buf_simple_pull_mem>
	if (buf->len != len) {
    9510:	89a9      	ldrh	r1, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
    9512:	8842      	ldrh	r2, [r0, #2]
	if (buf->len != len) {
    9514:	428a      	cmp	r2, r1
    9516:	4604      	mov	r4, r0
    9518:	d00c      	beq.n	9534 <l2cap_recv+0x50>
    951a:	4825      	ldr	r0, [pc, #148]	; (95b0 <l2cap_recv+0xcc>)
    951c:	4b23      	ldr	r3, [pc, #140]	; (95ac <l2cap_recv+0xc8>)
    951e:	1a1b      	subs	r3, r3, r0
    9520:	08db      	lsrs	r3, r3, #3
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    9522:	019b      	lsls	r3, r3, #6
    9524:	4824      	ldr	r0, [pc, #144]	; (95b8 <l2cap_recv+0xd4>)
    9526:	f043 0301 	orr.w	r3, r3, #1
    952a:	f015 fb26 	bl	1eb7a <log_2>
}
    952e:	2000      	movs	r0, #0
    9530:	b002      	add	sp, #8
    9532:	bd70      	pop	{r4, r5, r6, pc}
	if (!hdr->ident) {
    9534:	7843      	ldrb	r3, [r0, #1]
    9536:	b943      	cbnz	r3, 954a <l2cap_recv+0x66>
    9538:	491c      	ldr	r1, [pc, #112]	; (95ac <l2cap_recv+0xc8>)
    953a:	4b1d      	ldr	r3, [pc, #116]	; (95b0 <l2cap_recv+0xcc>)
		BT_ERR("Invalid ident value in L2CAP PDU");
    953c:	481f      	ldr	r0, [pc, #124]	; (95bc <l2cap_recv+0xd8>)
    953e:	1ac9      	subs	r1, r1, r3
    9540:	08c9      	lsrs	r1, r1, #3
    9542:	0189      	lsls	r1, r1, #6
    9544:	f041 0101 	orr.w	r1, r1, #1
    9548:	e7da      	b.n	9500 <l2cap_recv+0x1c>
	switch (hdr->code) {
    954a:	7801      	ldrb	r1, [r0, #0]
    954c:	2901      	cmp	r1, #1
    954e:	d0ee      	beq.n	952e <l2cap_recv+0x4a>
    9550:	2913      	cmp	r1, #19
    9552:	d10a      	bne.n	956a <l2cap_recv+0x86>
	if (buf->len < sizeof(*rsp)) {
    9554:	2a01      	cmp	r2, #1
    9556:	d8ea      	bhi.n	952e <l2cap_recv+0x4a>
    9558:	4914      	ldr	r1, [pc, #80]	; (95ac <l2cap_recv+0xc8>)
    955a:	4b15      	ldr	r3, [pc, #84]	; (95b0 <l2cap_recv+0xcc>)
		BT_ERR("Too small LE conn param rsp");
    955c:	4818      	ldr	r0, [pc, #96]	; (95c0 <l2cap_recv+0xdc>)
    955e:	1ac9      	subs	r1, r1, r3
    9560:	08c9      	lsrs	r1, r1, #3
    9562:	0189      	lsls	r1, r1, #6
    9564:	f041 0101 	orr.w	r1, r1, #1
    9568:	e7ca      	b.n	9500 <l2cap_recv+0x1c>
    956a:	4b11      	ldr	r3, [pc, #68]	; (95b0 <l2cap_recv+0xcc>)
    956c:	4a0f      	ldr	r2, [pc, #60]	; (95ac <l2cap_recv+0xc8>)
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    956e:	4815      	ldr	r0, [pc, #84]	; (95c4 <l2cap_recv+0xe0>)
    9570:	1ad2      	subs	r2, r2, r3
    9572:	08d2      	lsrs	r2, r2, #3
    9574:	0192      	lsls	r2, r2, #6
    9576:	f042 0202 	orr.w	r2, r2, #2
    957a:	f015 faea 	bl	1eb52 <log_1>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    957e:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
    9580:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    9582:	2202      	movs	r2, #2
    9584:	2001      	movs	r0, #1
    9586:	f7ff ff0b 	bl	93a0 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
    958a:	4604      	mov	r4, r0
    958c:	2800      	cmp	r0, #0
    958e:	d0ce      	beq.n	952e <l2cap_recv+0x4a>
	return net_buf_simple_add(&buf->b, len);
    9590:	2102      	movs	r1, #2
    9592:	3008      	adds	r0, #8
    9594:	f019 f84d 	bl	22632 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    9598:	2300      	movs	r3, #0
    959a:	7003      	strb	r3, [r0, #0]
    959c:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline void bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    959e:	4622      	mov	r2, r4
    95a0:	9300      	str	r3, [sp, #0]
    95a2:	2105      	movs	r1, #5
    95a4:	4628      	mov	r0, r5
    95a6:	f017 fdb4 	bl	21112 <bt_l2cap_send_cb>
}
    95aa:	e7c0      	b.n	952e <l2cap_recv+0x4a>
    95ac:	00023a34 	.word	0x00023a34
    95b0:	0002393c 	.word	0x0002393c
    95b4:	00026a58 	.word	0x00026a58
    95b8:	00026a76 	.word	0x00026a76
    95bc:	00026a97 	.word	0x00026a97
    95c0:	00026ab8 	.word	0x00026ab8
    95c4:	00026ad4 	.word	0x00026ad4

000095c8 <bt_l2cap_recv>:
{
    95c8:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
    95ca:	898b      	ldrh	r3, [r1, #12]
    95cc:	2b03      	cmp	r3, #3
{
    95ce:	4605      	mov	r5, r0
    95d0:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    95d2:	d80e      	bhi.n	95f2 <bt_l2cap_recv+0x2a>
    95d4:	4914      	ldr	r1, [pc, #80]	; (9628 <bt_l2cap_recv+0x60>)
    95d6:	4b15      	ldr	r3, [pc, #84]	; (962c <bt_l2cap_recv+0x64>)
		BT_ERR("Too small L2CAP PDU received");
    95d8:	4815      	ldr	r0, [pc, #84]	; (9630 <bt_l2cap_recv+0x68>)
    95da:	1ac9      	subs	r1, r1, r3
    95dc:	08c9      	lsrs	r1, r1, #3
    95de:	0189      	lsls	r1, r1, #6
    95e0:	f041 0101 	orr.w	r1, r1, #1
    95e4:	f015 faa8 	bl	1eb38 <log_0>
	net_buf_unref(buf);
    95e8:	4620      	mov	r0, r4
}
    95ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
    95ee:	f010 bdbd 	b.w	1a16c <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
    95f2:	2104      	movs	r1, #4
    95f4:	f104 0008 	add.w	r0, r4, #8
    95f8:	f019 f843 	bl	22682 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
    95fc:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    95fe:	4628      	mov	r0, r5
    9600:	f017 fdb0 	bl	21164 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    9604:	b950      	cbnz	r0, 961c <bt_l2cap_recv+0x54>
    9606:	4b09      	ldr	r3, [pc, #36]	; (962c <bt_l2cap_recv+0x64>)
    9608:	4a07      	ldr	r2, [pc, #28]	; (9628 <bt_l2cap_recv+0x60>)
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
    960a:	480a      	ldr	r0, [pc, #40]	; (9634 <bt_l2cap_recv+0x6c>)
    960c:	1ad2      	subs	r2, r2, r3
    960e:	08d2      	lsrs	r2, r2, #3
    9610:	0192      	lsls	r2, r2, #6
    9612:	f042 0202 	orr.w	r2, r2, #2
    9616:	f015 fa9c 	bl	1eb52 <log_1>
		net_buf_unref(buf);
    961a:	e7e5      	b.n	95e8 <bt_l2cap_recv+0x20>
	chan->ops->recv(chan, buf);
    961c:	6843      	ldr	r3, [r0, #4]
    961e:	4621      	mov	r1, r4
    9620:	691b      	ldr	r3, [r3, #16]
    9622:	4798      	blx	r3
    9624:	e7e0      	b.n	95e8 <bt_l2cap_recv+0x20>
    9626:	bf00      	nop
    9628:	00023a34 	.word	0x00023a34
    962c:	0002393c 	.word	0x0002393c
    9630:	00026af2 	.word	0x00026af2
    9634:	00026b0f 	.word	0x00026b0f

00009638 <bt_l2cap_update_conn_param>:
{
    9638:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
    963a:	4b15      	ldr	r3, [pc, #84]	; (9690 <bt_l2cap_update_conn_param+0x58>)
    963c:	781a      	ldrb	r2, [r3, #0]
    963e:	3201      	adds	r2, #1
	if (!ident) {
    9640:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    9644:	bf08      	it	eq
    9646:	2201      	moveq	r2, #1
    9648:	701a      	strb	r2, [r3, #0]
{
    964a:	4605      	mov	r5, r0
    964c:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    964e:	2208      	movs	r2, #8
    9650:	7819      	ldrb	r1, [r3, #0]
    9652:	2012      	movs	r0, #18
    9654:	f7ff fea4 	bl	93a0 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
    9658:	4606      	mov	r6, r0
    965a:	b1b0      	cbz	r0, 968a <bt_l2cap_update_conn_param+0x52>
	return net_buf_simple_add(&buf->b, len);
    965c:	2108      	movs	r1, #8
    965e:	4408      	add	r0, r1
    9660:	f018 ffe7 	bl	22632 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    9664:	8822      	ldrh	r2, [r4, #0]
    9666:	8002      	strh	r2, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    9668:	8862      	ldrh	r2, [r4, #2]
    966a:	8042      	strh	r2, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    966c:	88a2      	ldrh	r2, [r4, #4]
    966e:	8082      	strh	r2, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    9670:	88e2      	ldrh	r2, [r4, #6]
    9672:	80c2      	strh	r2, [r0, #6]
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    9674:	2400      	movs	r4, #0
    9676:	9400      	str	r4, [sp, #0]
    9678:	4623      	mov	r3, r4
    967a:	4632      	mov	r2, r6
    967c:	2105      	movs	r1, #5
    967e:	4628      	mov	r0, r5
    9680:	f017 fd47 	bl	21112 <bt_l2cap_send_cb>
	return 0;
    9684:	4620      	mov	r0, r4
}
    9686:	b002      	add	sp, #8
    9688:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    968a:	f06f 000b 	mvn.w	r0, #11
    968e:	e7fa      	b.n	9686 <bt_l2cap_update_conn_param+0x4e>
    9690:	200031a7 	.word	0x200031a7

00009694 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
    9694:	4b02      	ldr	r3, [pc, #8]	; (96a0 <att_cfm_sent+0xc>)
    9696:	f8c1 3110 	str.w	r3, [r1, #272]	; 0x110

	att_sent(conn, user_data);
    969a:	f017 bda1 	b.w	211e0 <att_sent>
    969e:	bf00      	nop
    96a0:	000214df 	.word	0x000214df

000096a4 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
    96a4:	4b02      	ldr	r3, [pc, #8]	; (96b0 <att_rsp_sent+0xc>)
    96a6:	f8c1 3110 	str.w	r3, [r1, #272]	; 0x110

	att_sent(conn, user_data);
    96aa:	f017 bd99 	b.w	211e0 <att_sent>
    96ae:	bf00      	nop
    96b0:	000214c3 	.word	0x000214c3

000096b4 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
    96b4:	4b02      	ldr	r3, [pc, #8]	; (96c0 <att_req_sent+0xc>)
    96b6:	f8c1 3110 	str.w	r3, [r1, #272]	; 0x110

	att_sent(conn, user_data);
    96ba:	f017 bd91 	b.w	211e0 <att_sent>
    96be:	bf00      	nop
    96c0:	00009b21 	.word	0x00009b21

000096c4 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
    96c4:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
    96c6:	3808      	subs	r0, #8
    96c8:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
    96ca:	a901      	add	r1, sp, #4
    96cc:	4802      	ldr	r0, [pc, #8]	; (96d8 <bt_att_released+0x14>)
    96ce:	f013 fb87 	bl	1cde0 <k_mem_slab_free>
}
    96d2:	b003      	add	sp, #12
    96d4:	f85d fb04 	ldr.w	pc, [sp], #4
    96d8:	20000804 	.word	0x20000804

000096dc <read_group_cb>:
{
    96dc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    96e0:	4606      	mov	r6, r0
    96e2:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    96e4:	f04f 0800 	mov.w	r8, #0
    96e8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    96ec:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
    96ee:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    96f0:	f88d 8008 	strb.w	r8, [sp, #8]
    96f4:	a902      	add	r1, sp, #8
{
    96f6:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    96f8:	f8ad 300a 	strh.w	r3, [sp, #10]
    96fc:	f017 f812 	bl	20724 <bt_uuid_cmp>
    9700:	b1a0      	cbz	r0, 972c <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    9702:	f642 0301 	movw	r3, #10241	; 0x2801
    9706:	6830      	ldr	r0, [r6, #0]
    9708:	f88d 800c 	strb.w	r8, [sp, #12]
    970c:	a903      	add	r1, sp, #12
    970e:	f8ad 300e 	strh.w	r3, [sp, #14]
    9712:	f017 f807 	bl	20724 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    9716:	b148      	cbz	r0, 972c <read_group_cb+0x50>
		if (data->group &&
    9718:	6923      	ldr	r3, [r4, #16]
    971a:	b11b      	cbz	r3, 9724 <read_group_cb+0x48>
    971c:	885a      	ldrh	r2, [r3, #2]
    971e:	42aa      	cmp	r2, r5
    9720:	d200      	bcs.n	9724 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
    9722:	805d      	strh	r5, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    9724:	2001      	movs	r0, #1
}
    9726:	b004      	add	sp, #16
    9728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    972c:	6861      	ldr	r1, [r4, #4]
    972e:	6830      	ldr	r0, [r6, #0]
    9730:	f016 fff8 	bl	20724 <bt_uuid_cmp>
    9734:	b110      	cbz	r0, 973c <read_group_cb+0x60>
		data->group = NULL;
    9736:	2300      	movs	r3, #0
    9738:	6123      	str	r3, [r4, #16]
    973a:	e7f3      	b.n	9724 <read_group_cb+0x48>
	if (data->rsp->len &&
    973c:	68e3      	ldr	r3, [r4, #12]
    973e:	68a0      	ldr	r0, [r4, #8]
    9740:	781a      	ldrb	r2, [r3, #0]
    9742:	b13a      	cbz	r2, 9754 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    9744:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
    9748:	8981      	ldrh	r1, [r0, #12]
    974a:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    974c:	4293      	cmp	r3, r2
    974e:	da01      	bge.n	9754 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
    9750:	2000      	movs	r0, #0
    9752:	e7e8      	b.n	9726 <read_group_cb+0x4a>
    9754:	2104      	movs	r1, #4
    9756:	3008      	adds	r0, #8
    9758:	f018 ff6b 	bl	22632 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    975c:	4b09      	ldr	r3, [pc, #36]	; (9784 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    975e:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    9760:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    9762:	8005      	strh	r5, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    9764:	8045      	strh	r5, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    9766:	4631      	mov	r1, r6
    9768:	9300      	str	r3, [sp, #0]
    976a:	9401      	str	r4, [sp, #4]
    976c:	2300      	movs	r3, #0
    976e:	4638      	mov	r0, r7
    9770:	f017 fd86 	bl	21280 <att_chan_read>
	if (read < 0) {
    9774:	2800      	cmp	r0, #0
    9776:	dbeb      	blt.n	9750 <read_group_cb+0x74>
	if (!data->group) {
    9778:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    977a:	3800      	subs	r0, #0
    977c:	bf18      	it	ne
    977e:	2001      	movne	r0, #1
    9780:	e7d1      	b.n	9726 <read_group_cb+0x4a>
    9782:	bf00      	nop
    9784:	00021397 	.word	0x00021397

00009788 <read_type_cb>:
{
    9788:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
    978c:	f8d2 8000 	ldr.w	r8, [r2]
{
    9790:	4606      	mov	r6, r0
    9792:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    9794:	6800      	ldr	r0, [r0, #0]
    9796:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
    9798:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
    979c:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    979e:	f016 ffc1 	bl	20724 <bt_uuid_cmp>
    97a2:	4607      	mov	r7, r0
    97a4:	2800      	cmp	r0, #0
    97a6:	d13e      	bne.n	9826 <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    97a8:	4628      	mov	r0, r5
    97aa:	2215      	movs	r2, #21
    97ac:	4631      	mov	r1, r6
    97ae:	f018 fa82 	bl	21cb6 <bt_gatt_check_perm>
    97b2:	4605      	mov	r5, r0
    97b4:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    97b6:	b148      	cbz	r0, 97cc <read_type_cb+0x44>
		if (data->rsp->len) {
    97b8:	68e3      	ldr	r3, [r4, #12]
    97ba:	781b      	ldrb	r3, [r3, #0]
    97bc:	b923      	cbnz	r3, 97c8 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
    97be:	2500      	movs	r5, #0
}
    97c0:	4628      	mov	r0, r5
    97c2:	b003      	add	sp, #12
    97c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
    97c8:	7527      	strb	r7, [r4, #20]
    97ca:	e7f8      	b.n	97be <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    97cc:	68a0      	ldr	r0, [r4, #8]
    97ce:	f018 ff0e 	bl	225ee <net_buf_frag_last>
    97d2:	2102      	movs	r1, #2
    97d4:	3008      	adds	r0, #8
    97d6:	f018 ff2c 	bl	22632 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    97da:	4b14      	ldr	r3, [pc, #80]	; (982c <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    97dc:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    97de:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
    97e0:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    97e4:	4631      	mov	r1, r6
    97e6:	9300      	str	r3, [sp, #0]
    97e8:	9401      	str	r4, [sp, #4]
    97ea:	462b      	mov	r3, r5
    97ec:	4640      	mov	r0, r8
    97ee:	f017 fd47 	bl	21280 <att_chan_read>
	if (read < 0) {
    97f2:	2800      	cmp	r0, #0
    97f4:	da07      	bge.n	9806 <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
    97f6:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    97fa:	bf26      	itte	cs
    97fc:	4240      	negcs	r0, r0
    97fe:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    9800:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
    9802:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    9804:	e7dc      	b.n	97c0 <read_type_cb+0x38>
	if (!data->item) {
    9806:	6923      	ldr	r3, [r4, #16]
    9808:	2b00      	cmp	r3, #0
    980a:	d0d8      	beq.n	97be <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    980c:	68a0      	ldr	r0, [r4, #8]
    980e:	f017 fcdf 	bl	211d0 <net_buf_frags_len>
    9812:	f8b8 505e 	ldrh.w	r5, [r8, #94]	; 0x5e
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    9816:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    9818:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    981a:	7818      	ldrb	r0, [r3, #0]
    981c:	4285      	cmp	r5, r0
    981e:	bf94      	ite	ls
    9820:	2500      	movls	r5, #0
    9822:	2501      	movhi	r5, #1
    9824:	e7cc      	b.n	97c0 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
    9826:	2501      	movs	r5, #1
    9828:	e7ca      	b.n	97c0 <read_type_cb+0x38>
    982a:	bf00      	nop
    982c:	000211ed 	.word	0x000211ed

00009830 <find_type_cb>:
{
    9830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
    9834:	f8d2 9000 	ldr.w	r9, [r2]
{
    9838:	b091      	sub	sp, #68	; 0x44
    983a:	4607      	mov	r7, r0
    983c:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    983e:	2500      	movs	r5, #0
    9840:	f642 0301 	movw	r3, #10241	; 0x2801
    9844:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
    9846:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    984a:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
    984e:	a90b      	add	r1, sp, #44	; 0x2c
{
    9850:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    9852:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    9856:	f016 ff65 	bl	20724 <bt_uuid_cmp>
    985a:	2800      	cmp	r0, #0
    985c:	d066      	beq.n	992c <find_type_cb+0xfc>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    985e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    9862:	6838      	ldr	r0, [r7, #0]
    9864:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
    9868:	a90b      	add	r1, sp, #44	; 0x2c
    986a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    986e:	f016 ff59 	bl	20724 <bt_uuid_cmp>
    9872:	b138      	cbz	r0, 9884 <find_type_cb+0x54>
		if (data->group &&
    9874:	68a3      	ldr	r3, [r4, #8]
    9876:	b11b      	cbz	r3, 9880 <find_type_cb+0x50>
    9878:	885a      	ldrh	r2, [r3, #2]
    987a:	42b2      	cmp	r2, r6
    987c:	d200      	bcs.n	9880 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
    987e:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
    9880:	2001      	movs	r0, #1
    9882:	e009      	b.n	9898 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
    9884:	6861      	ldr	r1, [r4, #4]
    9886:	4608      	mov	r0, r1
    9888:	f017 fca2 	bl	211d0 <net_buf_frags_len>
    988c:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
    9890:	1a1b      	subs	r3, r3, r0
    9892:	2b03      	cmp	r3, #3
    9894:	d803      	bhi.n	989e <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
    9896:	2000      	movs	r0, #0
}
    9898:	b011      	add	sp, #68	; 0x44
    989a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
    989e:	4608      	mov	r0, r1
    98a0:	f018 fea5 	bl	225ee <net_buf_frag_last>
    98a4:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
    98a6:	6860      	ldr	r0, [r4, #4]
    98a8:	f017 fc92 	bl	211d0 <net_buf_frags_len>
    98ac:	f8b9 a05e 	ldrh.w	sl, [r9, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
    98b0:	f105 0b08 	add.w	fp, r5, #8
    98b4:	ebaa 0a00 	sub.w	sl, sl, r0
    98b8:	4658      	mov	r0, fp
    98ba:	f018 fef6 	bl	226aa <net_buf_simple_tailroom>
    98be:	4582      	cmp	sl, r0
    98c0:	d237      	bcs.n	9932 <find_type_cb+0x102>
    98c2:	6860      	ldr	r0, [r4, #4]
    98c4:	f017 fc84 	bl	211d0 <net_buf_frags_len>
    98c8:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
    98cc:	1a18      	subs	r0, r3, r0
	if (!len) {
    98ce:	b970      	cbnz	r0, 98ee <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
    98d0:	6863      	ldr	r3, [r4, #4]
    98d2:	7998      	ldrb	r0, [r3, #6]
    98d4:	f010 fb8e 	bl	19ff4 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
    98d8:	2200      	movs	r2, #0
    98da:	2300      	movs	r3, #0
    98dc:	f018 fe53 	bl	22586 <net_buf_alloc_fixed>
		if (!frag) {
    98e0:	4605      	mov	r5, r0
    98e2:	2800      	cmp	r0, #0
    98e4:	d0d7      	beq.n	9896 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
    98e6:	4601      	mov	r1, r0
    98e8:	6860      	ldr	r0, [r4, #4]
    98ea:	f018 fe91 	bl	22610 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    98ee:	2300      	movs	r3, #0
    98f0:	9300      	str	r3, [sp, #0]
    98f2:	f8d7 9004 	ldr.w	r9, [r7, #4]
    98f6:	4639      	mov	r1, r7
    98f8:	2310      	movs	r3, #16
    98fa:	aa02      	add	r2, sp, #8
    98fc:	4640      	mov	r0, r8
    98fe:	47c8      	blx	r9
	if (read < 0) {
    9900:	1e07      	subs	r7, r0, #0
    9902:	db13      	blt.n	992c <find_type_cb+0xfc>
	if (read != data->value_len) {
    9904:	7c22      	ldrb	r2, [r4, #16]
    9906:	68e0      	ldr	r0, [r4, #12]
    9908:	42ba      	cmp	r2, r7
    990a:	d037      	beq.n	997c <find_type_cb+0x14c>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    990c:	4601      	mov	r1, r0
    990e:	a80b      	add	r0, sp, #44	; 0x2c
    9910:	f016 ff32 	bl	20778 <bt_uuid_create>
    9914:	b988      	cbnz	r0, 993a <find_type_cb+0x10a>
    9916:	4a1b      	ldr	r2, [pc, #108]	; (9984 <find_type_cb+0x154>)
    9918:	4b1b      	ldr	r3, [pc, #108]	; (9988 <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %u", data->value_len);
    991a:	7c21      	ldrb	r1, [r4, #16]
    991c:	481b      	ldr	r0, [pc, #108]	; (998c <find_type_cb+0x15c>)
    991e:	1ad2      	subs	r2, r2, r3
    9920:	08d2      	lsrs	r2, r2, #3
    9922:	0192      	lsls	r2, r2, #6
    9924:	f042 0202 	orr.w	r2, r2, #2
			BT_WARN("Unable to create UUID: size %d", read);
    9928:	f015 f913 	bl	1eb52 <log_1>
	data->group = NULL;
    992c:	2300      	movs	r3, #0
    992e:	60a3      	str	r3, [r4, #8]
    9930:	e7a6      	b.n	9880 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
    9932:	4658      	mov	r0, fp
    9934:	f018 feb9 	bl	226aa <net_buf_simple_tailroom>
    9938:	e7c9      	b.n	98ce <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
    993a:	b2fa      	uxtb	r2, r7
    993c:	a902      	add	r1, sp, #8
    993e:	a806      	add	r0, sp, #24
    9940:	f016 ff1a 	bl	20778 <bt_uuid_create>
    9944:	b948      	cbnz	r0, 995a <find_type_cb+0x12a>
    9946:	4a0f      	ldr	r2, [pc, #60]	; (9984 <find_type_cb+0x154>)
    9948:	4b0f      	ldr	r3, [pc, #60]	; (9988 <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %d", read);
    994a:	4811      	ldr	r0, [pc, #68]	; (9990 <find_type_cb+0x160>)
    994c:	1ad2      	subs	r2, r2, r3
    994e:	08d2      	lsrs	r2, r2, #3
    9950:	0192      	lsls	r2, r2, #6
    9952:	f042 0202 	orr.w	r2, r2, #2
    9956:	4639      	mov	r1, r7
    9958:	e7e6      	b.n	9928 <find_type_cb+0xf8>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
    995a:	a906      	add	r1, sp, #24
    995c:	a80b      	add	r0, sp, #44	; 0x2c
    995e:	f016 fee1 	bl	20724 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
    9962:	2800      	cmp	r0, #0
    9964:	d1e2      	bne.n	992c <find_type_cb+0xfc>
	data->err = 0x00;
    9966:	2300      	movs	r3, #0
    9968:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
    996a:	2104      	movs	r1, #4
    996c:	f105 0008 	add.w	r0, r5, #8
    9970:	f018 fe5f 	bl	22632 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
    9974:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    9976:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    9978:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
    997a:	e781      	b.n	9880 <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
    997c:	a902      	add	r1, sp, #8
    997e:	f019 fe62 	bl	23646 <memcmp>
    9982:	e7ee      	b.n	9962 <find_type_cb+0x132>
    9984:	00023944 	.word	0x00023944
    9988:	0002393c 	.word	0x0002393c
    998c:	00026b44 	.word	0x00026b44
    9990:	00026b63 	.word	0x00026b63

00009994 <chan_send>:
{
    9994:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    9998:	688b      	ldr	r3, [r1, #8]
    999a:	781b      	ldrb	r3, [r3, #0]
    999c:	2bd2      	cmp	r3, #210	; 0xd2
{
    999e:	4605      	mov	r5, r0
    99a0:	460c      	mov	r4, r1
    99a2:	4691      	mov	r9, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    99a4:	d113      	bne.n	99ce <chan_send+0x3a>
		err = bt_smp_sign(chan->att->conn, buf);
    99a6:	6803      	ldr	r3, [r0, #0]
    99a8:	6818      	ldr	r0, [r3, #0]
    99aa:	f018 fcfb 	bl	223a4 <bt_smp_sign>
		if (err) {
    99ae:	4606      	mov	r6, r0
    99b0:	b168      	cbz	r0, 99ce <chan_send+0x3a>
    99b2:	4927      	ldr	r1, [pc, #156]	; (9a50 <chan_send+0xbc>)
    99b4:	4b27      	ldr	r3, [pc, #156]	; (9a54 <chan_send+0xc0>)
			BT_ERR("Error signing data");
    99b6:	4828      	ldr	r0, [pc, #160]	; (9a58 <chan_send+0xc4>)
    99b8:	1ac9      	subs	r1, r1, r3
    99ba:	08c9      	lsrs	r1, r1, #3
    99bc:	0189      	lsls	r1, r1, #6
    99be:	f041 0101 	orr.w	r1, r1, #1
    99c2:	f015 f8b9 	bl	1eb38 <log_0>
		net_buf_unref(buf);
    99c6:	4620      	mov	r0, r4
    99c8:	f010 fbd0 	bl	1a16c <net_buf_unref>
    99cc:	e038      	b.n	9a40 <chan_send+0xac>
	state->offset = net_buf_simple_headroom(buf);
    99ce:	f104 0008 	add.w	r0, r4, #8
    99d2:	f018 fe66 	bl	226a2 <net_buf_simple_headroom>
	state->len = buf->len;
    99d6:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    99da:	4607      	mov	r7, r0
	chan->sent = cb ? cb : chan_cb(buf);
    99dc:	f1b9 0f00 	cmp.w	r9, #0
    99e0:	d10a      	bne.n	99f8 <chan_send+0x64>
	switch (att_op_get_type(buf->data[0])) {
    99e2:	68a3      	ldr	r3, [r4, #8]
    99e4:	7818      	ldrb	r0, [r3, #0]
    99e6:	f017 fc13 	bl	21210 <att_op_get_type>
    99ea:	1e43      	subs	r3, r0, #1
    99ec:	b2db      	uxtb	r3, r3
    99ee:	2b04      	cmp	r3, #4
    99f0:	bf9c      	itt	ls
    99f2:	4a1a      	ldrls	r2, [pc, #104]	; (9a5c <chan_send+0xc8>)
    99f4:	f852 9023 	ldrls.w	r9, [r2, r3, lsl #2]
	chan->sent = cb ? cb : chan_cb(buf);
    99f8:	f8c5 9118 	str.w	r9, [r5, #280]	; 0x118
	net_buf_ref(buf);
    99fc:	4620      	mov	r0, r4
    99fe:	f018 fdf2 	bl	225e6 <net_buf_ref>
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    9a02:	682b      	ldr	r3, [r5, #0]
    9a04:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
    9a08:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
    9a0a:	4b15      	ldr	r3, [pc, #84]	; (9a60 <chan_send+0xcc>)
    9a0c:	429a      	cmp	r2, r3
    9a0e:	d01b      	beq.n	9a48 <chan_send+0xb4>
	} else if (cb == chan_cfm_sent) {
    9a10:	4b14      	ldr	r3, [pc, #80]	; (9a64 <chan_send+0xd0>)
    9a12:	429a      	cmp	r2, r3
    9a14:	d01a      	beq.n	9a4c <chan_send+0xb8>
		return att_sent;
    9a16:	4e14      	ldr	r6, [pc, #80]	; (9a68 <chan_send+0xd4>)
    9a18:	4b14      	ldr	r3, [pc, #80]	; (9a6c <chan_send+0xd8>)
    9a1a:	4915      	ldr	r1, [pc, #84]	; (9a70 <chan_send+0xdc>)
    9a1c:	42b2      	cmp	r2, r6
    9a1e:	bf18      	it	ne
    9a20:	460b      	movne	r3, r1
			       &chan->chan.chan);
    9a22:	3508      	adds	r5, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    9a24:	9500      	str	r5, [sp, #0]
    9a26:	4622      	mov	r2, r4
    9a28:	2104      	movs	r1, #4
    9a2a:	f017 fb72 	bl	21112 <bt_l2cap_send_cb>
	if (err) {
    9a2e:	4606      	mov	r6, r0
    9a30:	2800      	cmp	r0, #0
    9a32:	d0c8      	beq.n	99c6 <chan_send+0x32>
	buf->data = buf->__buf + state->offset;
    9a34:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    9a36:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    9a3a:	fa10 f787 	uxtah	r7, r0, r7
    9a3e:	60a7      	str	r7, [r4, #8]
}
    9a40:	4630      	mov	r0, r6
    9a42:	b003      	add	sp, #12
    9a44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return att_rsp_sent;
    9a48:	4b0a      	ldr	r3, [pc, #40]	; (9a74 <chan_send+0xe0>)
    9a4a:	e7ea      	b.n	9a22 <chan_send+0x8e>
		return att_cfm_sent;
    9a4c:	4b0a      	ldr	r3, [pc, #40]	; (9a78 <chan_send+0xe4>)
    9a4e:	e7e8      	b.n	9a22 <chan_send+0x8e>
    9a50:	00023944 	.word	0x00023944
    9a54:	0002393c 	.word	0x0002393c
    9a58:	00026b82 	.word	0x00026b82
    9a5c:	000240b4 	.word	0x000240b4
    9a60:	000214c3 	.word	0x000214c3
    9a64:	000214df 	.word	0x000214df
    9a68:	00009b21 	.word	0x00009b21
    9a6c:	000096b5 	.word	0x000096b5
    9a70:	000211e1 	.word	0x000211e1
    9a74:	000096a5 	.word	0x000096a5
    9a78:	00009695 	.word	0x00009695

00009a7c <att_get>:
{
    9a7c:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    9a7e:	7b43      	ldrb	r3, [r0, #13]
    9a80:	2b07      	cmp	r3, #7
    9a82:	d00b      	beq.n	9a9c <att_get+0x20>
    9a84:	4918      	ldr	r1, [pc, #96]	; (9ae8 <att_get+0x6c>)
    9a86:	4b19      	ldr	r3, [pc, #100]	; (9aec <att_get+0x70>)
		BT_WARN("Not connected");
    9a88:	4819      	ldr	r0, [pc, #100]	; (9af0 <att_get+0x74>)
    9a8a:	1ac9      	subs	r1, r1, r3
    9a8c:	08c9      	lsrs	r1, r1, #3
    9a8e:	0189      	lsls	r1, r1, #6
    9a90:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("ATT channel flagged as disconnected");
    9a94:	f015 f850 	bl	1eb38 <log_0>
		return NULL;
    9a98:	2400      	movs	r4, #0
    9a9a:	e00e      	b.n	9aba <att_get+0x3e>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    9a9c:	2104      	movs	r1, #4
    9a9e:	f017 fb61 	bl	21164 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    9aa2:	4604      	mov	r4, r0
    9aa4:	b958      	cbnz	r0, 9abe <att_get+0x42>
    9aa6:	4910      	ldr	r1, [pc, #64]	; (9ae8 <att_get+0x6c>)
    9aa8:	4b10      	ldr	r3, [pc, #64]	; (9aec <att_get+0x70>)
		BT_ERR("Unable to find ATT channel");
    9aaa:	4812      	ldr	r0, [pc, #72]	; (9af4 <att_get+0x78>)
    9aac:	1ac9      	subs	r1, r1, r3
    9aae:	08c9      	lsrs	r1, r1, #3
    9ab0:	0189      	lsls	r1, r1, #6
    9ab2:	f041 0101 	orr.w	r1, r1, #1
    9ab6:	f015 f83f 	bl	1eb38 <log_0>
}
    9aba:	4620      	mov	r0, r4
    9abc:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9abe:	f3bf 8f5b 	dmb	ish
    9ac2:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
    9ac6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
    9aca:	075b      	lsls	r3, r3, #29
    9acc:	d508      	bpl.n	9ae0 <att_get+0x64>
    9ace:	4906      	ldr	r1, [pc, #24]	; (9ae8 <att_get+0x6c>)
    9ad0:	4b06      	ldr	r3, [pc, #24]	; (9aec <att_get+0x70>)
		BT_WARN("ATT channel flagged as disconnected");
    9ad2:	4809      	ldr	r0, [pc, #36]	; (9af8 <att_get+0x7c>)
    9ad4:	1ac9      	subs	r1, r1, r3
    9ad6:	08c9      	lsrs	r1, r1, #3
    9ad8:	0189      	lsls	r1, r1, #6
    9ada:	f041 0102 	orr.w	r1, r1, #2
    9ade:	e7d9      	b.n	9a94 <att_get+0x18>
	return att_chan->att;
    9ae0:	f850 4c08 	ldr.w	r4, [r0, #-8]
    9ae4:	e7e9      	b.n	9aba <att_get+0x3e>
    9ae6:	bf00      	nop
    9ae8:	00023944 	.word	0x00023944
    9aec:	0002393c 	.word	0x0002393c
    9af0:	00026b95 	.word	0x00026b95
    9af4:	00026ba3 	.word	0x00026ba3
    9af8:	00026bbe 	.word	0x00026bbe

00009afc <bt_att_chan_send_rsp.constprop.0>:
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
    9afc:	b538      	push	{r3, r4, r5, lr}
	return chan_send(chan, buf, cb);
    9afe:	4a07      	ldr	r2, [pc, #28]	; (9b1c <bt_att_chan_send_rsp.constprop.0+0x20>)
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
    9b00:	4604      	mov	r4, r0
    9b02:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
    9b04:	f7ff ff46 	bl	9994 <chan_send>
	if (err) {
    9b08:	b130      	cbz	r0, 9b18 <bt_att_chan_send_rsp.constprop.0+0x1c>
		net_buf_put(&chan->tx_queue, buf);
    9b0a:	4629      	mov	r1, r5
    9b0c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
}
    9b10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
    9b14:	f018 bd5a 	b.w	225cc <net_buf_put>
}
    9b18:	bd38      	pop	{r3, r4, r5, pc}
    9b1a:	bf00      	nop
    9b1c:	000214c3 	.word	0x000214c3

00009b20 <chan_req_sent>:
	if (chan->req) {
    9b20:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
    9b24:	b13b      	cbz	r3, 9b36 <chan_req_sent+0x16>
	return k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
    9b26:	f100 01e8 	add.w	r1, r0, #232	; 0xe8
    9b2a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    9b2e:	4802      	ldr	r0, [pc, #8]	; (9b38 <chan_req_sent+0x18>)
    9b30:	2300      	movs	r3, #0
    9b32:	f014 b869 	b.w	1dc08 <k_work_reschedule_for_queue>
}
    9b36:	4770      	bx	lr
    9b38:	20001390 	.word	0x20001390

00009b3c <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
    9b3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    9b3e:	2300      	movs	r3, #0
{
    9b40:	4606      	mov	r6, r0
    9b42:	460f      	mov	r7, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    9b44:	4828      	ldr	r0, [pc, #160]	; (9be8 <bt_att_accept+0xac>)
    9b46:	2200      	movs	r2, #0
    9b48:	4669      	mov	r1, sp
    9b4a:	f013 f917 	bl	1cd7c <k_mem_slab_alloc>
    9b4e:	4604      	mov	r4, r0
    9b50:	b178      	cbz	r0, 9b72 <bt_att_accept+0x36>
    9b52:	4a26      	ldr	r2, [pc, #152]	; (9bec <bt_att_accept+0xb0>)
    9b54:	4b26      	ldr	r3, [pc, #152]	; (9bf0 <bt_att_accept+0xb4>)
		BT_ERR("No available ATT context for conn %p", conn);
    9b56:	4827      	ldr	r0, [pc, #156]	; (9bf4 <bt_att_accept+0xb8>)
    9b58:	1ad2      	subs	r2, r2, r3
    9b5a:	08d2      	lsrs	r2, r2, #3
    9b5c:	0192      	lsls	r2, r2, #6
    9b5e:	f042 0201 	orr.w	r2, r2, #1
    9b62:	4631      	mov	r1, r6
		BT_ERR("No available ATT channel for conn %p", att->conn);
    9b64:	f014 fff5 	bl	1eb52 <log_1>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
    9b68:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
    9b6c:	4620      	mov	r0, r4
    9b6e:	b003      	add	sp, #12
    9b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
__ssp_bos_icheck3(memset, void *, int)
    9b72:	4601      	mov	r1, r0
    9b74:	222c      	movs	r2, #44	; 0x2c
    9b76:	9800      	ldr	r0, [sp, #0]
    9b78:	f019 fd81 	bl	2367e <memset>
	att->conn = conn;
    9b7c:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    9b7e:	481e      	ldr	r0, [pc, #120]	; (9bf8 <bt_att_accept+0xbc>)
	list->tail = NULL;
    9b80:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
    9b82:	e9c5 6400 	strd	r6, r4, [r5]
	list->tail = NULL;
    9b86:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
    9b8a:	2200      	movs	r2, #0
    9b8c:	2300      	movs	r3, #0
    9b8e:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
    9b90:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    9b92:	f013 f8f3 	bl	1cd7c <k_mem_slab_alloc>
    9b96:	4604      	mov	r4, r0
    9b98:	b148      	cbz	r0, 9bae <bt_att_accept+0x72>
    9b9a:	4a14      	ldr	r2, [pc, #80]	; (9bec <bt_att_accept+0xb0>)
    9b9c:	4b14      	ldr	r3, [pc, #80]	; (9bf0 <bt_att_accept+0xb4>)
		BT_ERR("No available ATT channel for conn %p", att->conn);
    9b9e:	6829      	ldr	r1, [r5, #0]
    9ba0:	4816      	ldr	r0, [pc, #88]	; (9bfc <bt_att_accept+0xc0>)
    9ba2:	1ad2      	subs	r2, r2, r3
    9ba4:	08d2      	lsrs	r2, r2, #3
    9ba6:	0192      	lsls	r2, r2, #6
    9ba8:	f042 0201 	orr.w	r2, r2, #1
    9bac:	e7da      	b.n	9b64 <bt_att_accept+0x28>
    9bae:	4601      	mov	r1, r0
    9bb0:	f44f 7290 	mov.w	r2, #288	; 0x120
    9bb4:	9801      	ldr	r0, [sp, #4]
    9bb6:	f019 fd62 	bl	2367e <memset>
	chan->chan.chan.ops = &ops;
    9bba:	9801      	ldr	r0, [sp, #4]
    9bbc:	4b10      	ldr	r3, [pc, #64]	; (9c00 <bt_att_accept+0xc4>)
    9bbe:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
    9bc0:	30d0      	adds	r0, #208	; 0xd0
    9bc2:	f019 f90f 	bl	22de4 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    9bc6:	9b01      	ldr	r3, [sp, #4]
    9bc8:	f3bf 8f5b 	dmb	ish
    9bcc:	33c8      	adds	r3, #200	; 0xc8
    9bce:	e853 2f00 	ldrex	r2, [r3]
    9bd2:	e843 4100 	strex	r1, r4, [r3]
    9bd6:	2900      	cmp	r1, #0
    9bd8:	d1f9      	bne.n	9bce <bt_att_accept+0x92>
    9bda:	f3bf 8f5b 	dmb	ish
	chan->att = att;
    9bde:	9b01      	ldr	r3, [sp, #4]
    9be0:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
    9be4:	603b      	str	r3, [r7, #0]
	return 0;
    9be6:	e7c1      	b.n	9b6c <bt_att_accept+0x30>
    9be8:	200007e8 	.word	0x200007e8
    9bec:	00023944 	.word	0x00023944
    9bf0:	0002393c 	.word	0x0002393c
    9bf4:	00026be2 	.word	0x00026be2
    9bf8:	20000804 	.word	0x20000804
    9bfc:	00026c07 	.word	0x00026c07
    9c00:	20000224 	.word	0x20000224

00009c04 <bt_att_connected>:
{
    9c04:	b538      	push	{r3, r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    9c06:	2104      	movs	r1, #4
{
    9c08:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    9c0a:	6800      	ldr	r0, [r0, #0]
    9c0c:	f017 fa9a 	bl	21144 <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
    9c10:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
    9c14:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    9c16:	b91b      	cbnz	r3, 9c20 <bt_att_connected+0x1c>
    9c18:	f105 000c 	add.w	r0, r5, #12
    9c1c:	f019 f8e2 	bl	22de4 <z_impl_k_queue_init>
Z_GENLIST_PREPEND(slist, snode)
    9c20:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	parent->next = child;
    9c22:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
Z_GENLIST_PREPEND(slist, snode)
    9c26:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
    9c28:	f504 738a 	add.w	r3, r4, #276	; 0x114
	list->head = node;
    9c2c:	626b      	str	r3, [r5, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
    9c2e:	b902      	cbnz	r2, 9c32 <bt_att_connected+0x2e>
	list->tail = node;
    9c30:	62ab      	str	r3, [r5, #40]	; 0x28
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9c32:	f3bf 8f5b 	dmb	ish
    9c36:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
	k_work_init_delayable(&work->work, handler);
    9c3a:	4908      	ldr	r1, [pc, #32]	; (9c5c <bt_att_connected+0x58>)
    9c3c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
    9c40:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    9c42:	bf5e      	ittt	pl
    9c44:	2317      	movpl	r3, #23
    9c46:	f8a4 3056 	strhpl.w	r3, [r4, #86]	; 0x56
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    9c4a:	f8a4 304a 	strhpl.w	r3, [r4, #74]	; 0x4a
    9c4e:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
}
    9c52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    9c56:	f019 bae8 	b.w	2322a <k_work_init_delayable>
    9c5a:	bf00      	nop
    9c5c:	0000a595 	.word	0x0000a595

00009c60 <att_write_cmd>:
{
    9c60:	b5f0      	push	{r4, r5, r6, r7, lr}
    9c62:	4604      	mov	r4, r0
    9c64:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
    9c66:	f101 0008 	add.w	r0, r1, #8
    9c6a:	460d      	mov	r5, r1
    9c6c:	f018 fd11 	bl	22692 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    9c70:	6823      	ldr	r3, [r4, #0]
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
    9c72:	68af      	ldr	r7, [r5, #8]
    9c74:	89ad      	ldrh	r5, [r5, #12]
    9c76:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    9c78:	2100      	movs	r1, #0
    9c7a:	6818      	ldr	r0, [r3, #0]
    9c7c:	f018 f846 	bl	21d0c <bt_gatt_change_aware>
    9c80:	b1f8      	cbz	r0, 9cc2 <att_write_cmd+0x62>
	if (!handle) {
    9c82:	b306      	cbz	r6, 9cc6 <att_write_cmd+0x66>
	(void)memset(&data, 0, sizeof(data));
    9c84:	2214      	movs	r2, #20
    9c86:	2100      	movs	r1, #0
    9c88:	a801      	add	r0, sp, #4
    9c8a:	f019 fcf8 	bl	2367e <memset>
	data.conn = chan->att->conn;
    9c8e:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    9c90:	4a0e      	ldr	r2, [pc, #56]	; (9ccc <att_write_cmd+0x6c>)
	data.conn = chan->att->conn;
    9c92:	681b      	ldr	r3, [r3, #0]
    9c94:	9300      	str	r3, [sp, #0]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    9c96:	2301      	movs	r3, #1
    9c98:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    9c9c:	4631      	mov	r1, r6
    9c9e:	466b      	mov	r3, sp
    9ca0:	4630      	mov	r0, r6
	data.value = value;
    9ca2:	9703      	str	r7, [sp, #12]
	data.len = len;
    9ca4:	f8ad 5010 	strh.w	r5, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    9ca8:	f017 fadf 	bl	2126a <bt_gatt_foreach_attr>
	if (data.err) {
    9cac:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9cb0:	b923      	cbnz	r3, 9cbc <att_write_cmd+0x5c>
	if (data.buf) {
    9cb2:	9901      	ldr	r1, [sp, #4]
    9cb4:	b111      	cbz	r1, 9cbc <att_write_cmd+0x5c>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    9cb6:	4620      	mov	r0, r4
    9cb8:	f7ff ff20 	bl	9afc <bt_att_chan_send_rsp.constprop.0>
    9cbc:	2000      	movs	r0, #0
}
    9cbe:	b007      	add	sp, #28
    9cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    9cc2:	2012      	movs	r0, #18
    9cc4:	e7fb      	b.n	9cbe <att_write_cmd+0x5e>
		return BT_ATT_ERR_INVALID_HANDLE;
    9cc6:	2001      	movs	r0, #1
    9cc8:	e7f9      	b.n	9cbe <att_write_cmd+0x5e>
    9cca:	bf00      	nop
    9ccc:	0002159b 	.word	0x0002159b

00009cd0 <bt_att_chan_create_pdu>:
{
    9cd0:	b538      	push	{r3, r4, r5, lr}
    9cd2:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
    9cd4:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
    9cd8:	3201      	adds	r2, #1
    9cda:	428a      	cmp	r2, r1
    9cdc:	d90c      	bls.n	9cf8 <bt_att_chan_create_pdu+0x28>
    9cde:	481a      	ldr	r0, [pc, #104]	; (9d48 <bt_att_chan_create_pdu+0x78>)
    9ce0:	4b1a      	ldr	r3, [pc, #104]	; (9d4c <bt_att_chan_create_pdu+0x7c>)
    9ce2:	1a1b      	subs	r3, r3, r0
    9ce4:	08db      	lsrs	r3, r3, #3
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    9ce6:	019b      	lsls	r3, r3, #6
    9ce8:	4819      	ldr	r0, [pc, #100]	; (9d50 <bt_att_chan_create_pdu+0x80>)
    9cea:	f043 0302 	orr.w	r3, r3, #2
    9cee:	f014 ff44 	bl	1eb7a <log_2>
		return NULL;
    9cf2:	2400      	movs	r4, #0
}
    9cf4:	4620      	mov	r0, r4
    9cf6:	bd38      	pop	{r3, r4, r5, pc}
	switch (att_op_get_type(op)) {
    9cf8:	4628      	mov	r0, r5
    9cfa:	f017 fa89 	bl	21210 <att_op_get_type>
    9cfe:	2802      	cmp	r0, #2
    9d00:	d001      	beq.n	9d06 <bt_att_chan_create_pdu+0x36>
    9d02:	2804      	cmp	r0, #4
    9d04:	d114      	bne.n	9d30 <bt_att_chan_create_pdu+0x60>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
    9d06:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    9d0a:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
    9d0c:	2100      	movs	r1, #0
    9d0e:	4608      	mov	r0, r1
    9d10:	f017 f9fc 	bl	2110c <bt_l2cap_create_pdu_timeout>
    9d14:	4604      	mov	r4, r0
	if (!buf) {
    9d16:	b980      	cbnz	r0, 9d3a <bt_att_chan_create_pdu+0x6a>
    9d18:	4b0b      	ldr	r3, [pc, #44]	; (9d48 <bt_att_chan_create_pdu+0x78>)
    9d1a:	4a0c      	ldr	r2, [pc, #48]	; (9d4c <bt_att_chan_create_pdu+0x7c>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
    9d1c:	480d      	ldr	r0, [pc, #52]	; (9d54 <bt_att_chan_create_pdu+0x84>)
    9d1e:	1ad2      	subs	r2, r2, r3
    9d20:	08d2      	lsrs	r2, r2, #3
    9d22:	0192      	lsls	r2, r2, #6
    9d24:	f042 0201 	orr.w	r2, r2, #1
    9d28:	4629      	mov	r1, r5
    9d2a:	f014 ff12 	bl	1eb52 <log_1>
		return NULL;
    9d2e:	e7e1      	b.n	9cf4 <bt_att_chan_create_pdu+0x24>
		buf = bt_l2cap_create_pdu(NULL, 0);
    9d30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9d34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9d38:	e7e8      	b.n	9d0c <bt_att_chan_create_pdu+0x3c>
	return net_buf_simple_add(&buf->b, len);
    9d3a:	2101      	movs	r1, #1
    9d3c:	3008      	adds	r0, #8
    9d3e:	f018 fc78 	bl	22632 <net_buf_simple_add>
	hdr->code = op;
    9d42:	7005      	strb	r5, [r0, #0]
	return buf;
    9d44:	e7d6      	b.n	9cf4 <bt_att_chan_create_pdu+0x24>
    9d46:	bf00      	nop
    9d48:	0002393c 	.word	0x0002393c
    9d4c:	00023944 	.word	0x00023944
    9d50:	00026c2c 	.word	0x00026c2c
    9d54:	00026a20 	.word	0x00026a20

00009d58 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
    9d58:	898b      	ldrh	r3, [r1, #12]
{
    9d5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9d5e:	4604      	mov	r4, r0
    9d60:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
    9d62:	b963      	cbnz	r3, 9d7e <bt_att_recv+0x26>
    9d64:	494c      	ldr	r1, [pc, #304]	; (9e98 <bt_att_recv+0x140>)
    9d66:	4b4d      	ldr	r3, [pc, #308]	; (9e9c <bt_att_recv+0x144>)
		BT_ERR("Too small ATT PDU received");
    9d68:	484d      	ldr	r0, [pc, #308]	; (9ea0 <bt_att_recv+0x148>)
    9d6a:	1ac9      	subs	r1, r1, r3
    9d6c:	08c9      	lsrs	r1, r1, #3
    9d6e:	0189      	lsls	r1, r1, #6
    9d70:	f041 0101 	orr.w	r1, r1, #1
			BT_WARN("Ignoring unexpected indication");
    9d74:	f014 fee0 	bl	1eb38 <log_0>
}
    9d78:	2000      	movs	r0, #0
    9d7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
    9d7e:	2101      	movs	r1, #1
    9d80:	f108 0008 	add.w	r0, r8, #8
    9d84:	f018 fc7d 	bl	22682 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
    9d88:	f854 3c08 	ldr.w	r3, [r4, #-8]
    9d8c:	4605      	mov	r5, r0
    9d8e:	2b00      	cmp	r3, #0
    9d90:	d0f2      	beq.n	9d78 <bt_att_recv+0x20>
		if (hdr->code == handlers[i].op) {
    9d92:	4a44      	ldr	r2, [pc, #272]	; (9ea4 <bt_att_recv+0x14c>)
    9d94:	7801      	ldrb	r1, [r0, #0]
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
    9d96:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    9d9a:	2300      	movs	r3, #0
    9d9c:	4694      	mov	ip, r2
		if (hdr->code == handlers[i].op) {
    9d9e:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
    9da2:	4288      	cmp	r0, r1
    9da4:	d11d      	bne.n	9de2 <bt_att_recv+0x8a>
		if (handler->type == ATT_REQUEST &&
    9da6:	00d8      	lsls	r0, r3, #3
    9da8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    9dac:	789f      	ldrb	r7, [r3, #2]
    9dae:	2f01      	cmp	r7, #1
    9db0:	d132      	bne.n	9e18 <bt_att_recv+0xc0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9db2:	f3bf 8f5b 	dmb	ish
    9db6:	34c0      	adds	r4, #192	; 0xc0
    9db8:	e854 3f00 	ldrex	r3, [r4]
    9dbc:	f043 0201 	orr.w	r2, r3, #1
    9dc0:	e844 2100 	strex	r1, r2, [r4]
    9dc4:	2900      	cmp	r1, #0
    9dc6:	d1f7      	bne.n	9db8 <bt_att_recv+0x60>
    9dc8:	f3bf 8f5b 	dmb	ish
    9dcc:	07da      	lsls	r2, r3, #31
    9dce:	d53d      	bpl.n	9e4c <bt_att_recv+0xf4>
    9dd0:	4931      	ldr	r1, [pc, #196]	; (9e98 <bt_att_recv+0x140>)
    9dd2:	4b32      	ldr	r3, [pc, #200]	; (9e9c <bt_att_recv+0x144>)
			BT_WARN("Ignoring unexpected request");
    9dd4:	4834      	ldr	r0, [pc, #208]	; (9ea8 <bt_att_recv+0x150>)
    9dd6:	1ac9      	subs	r1, r1, r3
    9dd8:	08c9      	lsrs	r1, r1, #3
    9dda:	0189      	lsls	r1, r1, #6
    9ddc:	f041 0102 	orr.w	r1, r1, #2
    9de0:	e7c8      	b.n	9d74 <bt_att_recv+0x1c>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    9de2:	3301      	adds	r3, #1
    9de4:	2b0d      	cmp	r3, #13
    9de6:	d1da      	bne.n	9d9e <bt_att_recv+0x46>
    9de8:	4b2c      	ldr	r3, [pc, #176]	; (9e9c <bt_att_recv+0x144>)
    9dea:	4a2b      	ldr	r2, [pc, #172]	; (9e98 <bt_att_recv+0x140>)
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
    9dec:	482f      	ldr	r0, [pc, #188]	; (9eac <bt_att_recv+0x154>)
    9dee:	1ad2      	subs	r2, r2, r3
    9df0:	08d2      	lsrs	r2, r2, #3
    9df2:	0192      	lsls	r2, r2, #6
    9df4:	f042 0202 	orr.w	r2, r2, #2
    9df8:	f014 feab 	bl	1eb52 <log_1>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    9dfc:	7829      	ldrb	r1, [r5, #0]
    9dfe:	4608      	mov	r0, r1
    9e00:	f017 fa06 	bl	21210 <att_op_get_type>
    9e04:	2800      	cmp	r0, #0
    9e06:	d0b7      	beq.n	9d78 <bt_att_recv+0x20>
	if (!req) {
    9e08:	2900      	cmp	r1, #0
    9e0a:	d0b5      	beq.n	9d78 <bt_att_recv+0x20>
    9e0c:	2306      	movs	r3, #6
    9e0e:	2200      	movs	r2, #0
    9e10:	4630      	mov	r0, r6
    9e12:	f017 fc57 	bl	216c4 <send_err_rsp.part.0>
    9e16:	e7af      	b.n	9d78 <bt_att_recv+0x20>
		} else if (handler->type == ATT_INDICATION &&
    9e18:	2f05      	cmp	r7, #5
    9e1a:	d117      	bne.n	9e4c <bt_att_recv+0xf4>
    9e1c:	f3bf 8f5b 	dmb	ish
    9e20:	34c0      	adds	r4, #192	; 0xc0
    9e22:	e854 3f00 	ldrex	r3, [r4]
    9e26:	f043 0202 	orr.w	r2, r3, #2
    9e2a:	e844 2100 	strex	r1, r2, [r4]
    9e2e:	2900      	cmp	r1, #0
    9e30:	d1f7      	bne.n	9e22 <bt_att_recv+0xca>
    9e32:	f3bf 8f5b 	dmb	ish
    9e36:	079b      	lsls	r3, r3, #30
    9e38:	d508      	bpl.n	9e4c <bt_att_recv+0xf4>
    9e3a:	4917      	ldr	r1, [pc, #92]	; (9e98 <bt_att_recv+0x140>)
    9e3c:	4b17      	ldr	r3, [pc, #92]	; (9e9c <bt_att_recv+0x144>)
			BT_WARN("Ignoring unexpected indication");
    9e3e:	481c      	ldr	r0, [pc, #112]	; (9eb0 <bt_att_recv+0x158>)
    9e40:	1ac9      	subs	r1, r1, r3
    9e42:	08c9      	lsrs	r1, r1, #3
    9e44:	0189      	lsls	r1, r1, #6
    9e46:	f041 0102 	orr.w	r1, r1, #2
    9e4a:	e793      	b.n	9d74 <bt_att_recv+0x1c>
	if (buf->len < handler->expect_len) {
    9e4c:	eb0c 0300 	add.w	r3, ip, r0
    9e50:	f8b8 100c 	ldrh.w	r1, [r8, #12]
    9e54:	785a      	ldrb	r2, [r3, #1]
    9e56:	428a      	cmp	r2, r1
    9e58:	d90e      	bls.n	9e78 <bt_att_recv+0x120>
    9e5a:	4a10      	ldr	r2, [pc, #64]	; (9e9c <bt_att_recv+0x144>)
    9e5c:	4b0e      	ldr	r3, [pc, #56]	; (9e98 <bt_att_recv+0x140>)
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    9e5e:	4815      	ldr	r0, [pc, #84]	; (9eb4 <bt_att_recv+0x15c>)
    9e60:	1a9b      	subs	r3, r3, r2
    9e62:	08db      	lsrs	r3, r3, #3
    9e64:	019b      	lsls	r3, r3, #6
    9e66:	782a      	ldrb	r2, [r5, #0]
    9e68:	f043 0301 	orr.w	r3, r3, #1
    9e6c:	f014 fe85 	bl	1eb7a <log_2>
	if (handler->type == ATT_REQUEST && err) {
    9e70:	2f01      	cmp	r7, #1
    9e72:	d181      	bne.n	9d78 <bt_att_recv+0x20>
		err = BT_ATT_ERR_INVALID_PDU;
    9e74:	2304      	movs	r3, #4
    9e76:	e00a      	b.n	9e8e <bt_att_recv+0x136>
		err = handler->func(att_chan, buf);
    9e78:	685b      	ldr	r3, [r3, #4]
    9e7a:	4641      	mov	r1, r8
    9e7c:	4630      	mov	r0, r6
    9e7e:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    9e80:	2f01      	cmp	r7, #1
		err = handler->func(att_chan, buf);
    9e82:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    9e84:	f47f af78 	bne.w	9d78 <bt_att_recv+0x20>
    9e88:	2800      	cmp	r0, #0
    9e8a:	f43f af75 	beq.w	9d78 <bt_att_recv+0x20>
		send_err_rsp(att_chan, hdr->code, 0, err);
    9e8e:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    9e90:	2900      	cmp	r1, #0
    9e92:	f43f af71 	beq.w	9d78 <bt_att_recv+0x20>
    9e96:	e7ba      	b.n	9e0e <bt_att_recv+0xb6>
    9e98:	00023944 	.word	0x00023944
    9e9c:	0002393c 	.word	0x0002393c
    9ea0:	00026c51 	.word	0x00026c51
    9ea4:	000240c8 	.word	0x000240c8
    9ea8:	00026c6c 	.word	0x00026c6c
    9eac:	00026cc6 	.word	0x00026cc6
    9eb0:	00026c88 	.word	0x00026c88
    9eb4:	00026ca7 	.word	0x00026ca7

00009eb8 <att_write_req>:
{
    9eb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9ebc:	4604      	mov	r4, r0
    9ebe:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
    9ec0:	f101 0008 	add.w	r0, r1, #8
    9ec4:	460d      	mov	r5, r1
    9ec6:	f018 fbe4 	bl	22692 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    9eca:	6823      	ldr	r3, [r4, #0]
			     handle, 0, buf->data, buf->len);
    9ecc:	f8d5 9008 	ldr.w	r9, [r5, #8]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
    9ed0:	89ad      	ldrh	r5, [r5, #12]
    9ed2:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    9ed4:	2101      	movs	r1, #1
    9ed6:	6818      	ldr	r0, [r3, #0]
    9ed8:	f017 ff18 	bl	21d0c <bt_gatt_change_aware>
    9edc:	2800      	cmp	r0, #0
    9ede:	d03f      	beq.n	9f60 <att_write_req+0xa8>
	if (!handle) {
    9ee0:	2e00      	cmp	r6, #0
    9ee2:	d03f      	beq.n	9f64 <att_write_req+0xac>
	(void)memset(&data, 0, sizeof(data));
    9ee4:	2218      	movs	r2, #24
    9ee6:	2100      	movs	r1, #0
    9ee8:	4668      	mov	r0, sp
    9eea:	f019 fbc8 	bl	2367e <memset>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
    9eee:	2200      	movs	r2, #0
    9ef0:	2113      	movs	r1, #19
    9ef2:	4620      	mov	r0, r4
    9ef4:	f7ff feec 	bl	9cd0 <bt_att_chan_create_pdu>
    9ef8:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    9efa:	b378      	cbz	r0, 9f5c <att_write_req+0xa4>
	data.conn = chan->att->conn;
    9efc:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    9efe:	4a1a      	ldr	r2, [pc, #104]	; (9f68 <att_write_req+0xb0>)
	data.conn = chan->att->conn;
    9f00:	681b      	ldr	r3, [r3, #0]
    9f02:	9300      	str	r3, [sp, #0]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    9f04:	2301      	movs	r3, #1
    9f06:	f88d 3014 	strb.w	r3, [sp, #20]
	data.req = req;
    9f0a:	f04f 0812 	mov.w	r8, #18
	data.offset = offset;
    9f0e:	2700      	movs	r7, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    9f10:	466b      	mov	r3, sp
    9f12:	4631      	mov	r1, r6
    9f14:	4630      	mov	r0, r6
	data.len = len;
    9f16:	f8ad 5010 	strh.w	r5, [sp, #16]
	data.req = req;
    9f1a:	f88d 8008 	strb.w	r8, [sp, #8]
	data.offset = offset;
    9f1e:	f8ad 7012 	strh.w	r7, [sp, #18]
	data.value = value;
    9f22:	f8cd 900c 	str.w	r9, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    9f26:	f017 f9a0 	bl	2126a <bt_gatt_foreach_attr>
	if (data.err) {
    9f2a:	f89d 5014 	ldrb.w	r5, [sp, #20]
    9f2e:	b175      	cbz	r5, 9f4e <att_write_req+0x96>
			net_buf_unref(data.buf);
    9f30:	9801      	ldr	r0, [sp, #4]
    9f32:	f010 f91b 	bl	1a16c <net_buf_unref>
	if (!req) {
    9f36:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9f3a:	4632      	mov	r2, r6
    9f3c:	4641      	mov	r1, r8
    9f3e:	4620      	mov	r0, r4
    9f40:	f017 fbc0 	bl	216c4 <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    9f44:	463d      	mov	r5, r7
}
    9f46:	4628      	mov	r0, r5
    9f48:	b007      	add	sp, #28
    9f4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (data.buf) {
    9f4e:	9901      	ldr	r1, [sp, #4]
    9f50:	2900      	cmp	r1, #0
    9f52:	d0f8      	beq.n	9f46 <att_write_req+0x8e>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    9f54:	4620      	mov	r0, r4
    9f56:	f7ff fdd1 	bl	9afc <bt_att_chan_send_rsp.constprop.0>
    9f5a:	e7f4      	b.n	9f46 <att_write_req+0x8e>
			return BT_ATT_ERR_UNLIKELY;
    9f5c:	250e      	movs	r5, #14
    9f5e:	e7f2      	b.n	9f46 <att_write_req+0x8e>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    9f60:	2512      	movs	r5, #18
    9f62:	e7f0      	b.n	9f46 <att_write_req+0x8e>
		return BT_ATT_ERR_INVALID_HANDLE;
    9f64:	2501      	movs	r5, #1
    9f66:	e7ee      	b.n	9f46 <att_write_req+0x8e>
    9f68:	0002159b 	.word	0x0002159b

00009f6c <bt_att_create_pdu>:
{
    9f6c:	b570      	push	{r4, r5, r6, lr}
    9f6e:	460e      	mov	r6, r1
    9f70:	4615      	mov	r5, r2
	att = att_get(conn);
    9f72:	f7ff fd83 	bl	9a7c <att_get>
	if (!att) {
    9f76:	b1c0      	cbz	r0, 9faa <bt_att_create_pdu+0x3e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    9f78:	6a43      	ldr	r3, [r0, #36]	; 0x24
	return list->head;
    9f7a:	1c69      	adds	r1, r5, #1
    9f7c:	b15b      	cbz	r3, 9f96 <bt_att_create_pdu+0x2a>
    9f7e:	f5b3 708e 	subs.w	r0, r3, #284	; 0x11c
    9f82:	d008      	beq.n	9f96 <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    9f84:	681b      	ldr	r3, [r3, #0]
    9f86:	b10b      	cbz	r3, 9f8c <bt_att_create_pdu+0x20>
    9f88:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
		if (len + sizeof(op) > chan->chan.tx.mtu) {
    9f8c:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    9f90:	4291      	cmp	r1, r2
    9f92:	d90c      	bls.n	9fae <bt_att_create_pdu+0x42>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    9f94:	b98b      	cbnz	r3, 9fba <bt_att_create_pdu+0x4e>
    9f96:	4a0e      	ldr	r2, [pc, #56]	; (9fd0 <bt_att_create_pdu+0x64>)
    9f98:	4b0e      	ldr	r3, [pc, #56]	; (9fd4 <bt_att_create_pdu+0x68>)
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
    9f9a:	480f      	ldr	r0, [pc, #60]	; (9fd8 <bt_att_create_pdu+0x6c>)
    9f9c:	1ad2      	subs	r2, r2, r3
    9f9e:	08d2      	lsrs	r2, r2, #3
    9fa0:	0192      	lsls	r2, r2, #6
    9fa2:	f042 0202 	orr.w	r2, r2, #2
    9fa6:	f014 fdd4 	bl	1eb52 <log_1>
}
    9faa:	2000      	movs	r0, #0
    9fac:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
    9fae:	462a      	mov	r2, r5
    9fb0:	4631      	mov	r1, r6
}
    9fb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
    9fb6:	f7ff be8b 	b.w	9cd0 <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
    9fba:	f513 748e 	adds.w	r4, r3, #284	; 0x11c
    9fbe:	d004      	beq.n	9fca <bt_att_create_pdu+0x5e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    9fc0:	f8d3 411c 	ldr.w	r4, [r3, #284]	; 0x11c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    9fc4:	b10c      	cbz	r4, 9fca <bt_att_create_pdu+0x5e>
    9fc6:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
{
    9fca:	4618      	mov	r0, r3
    9fcc:	4623      	mov	r3, r4
    9fce:	e7dd      	b.n	9f8c <bt_att_create_pdu+0x20>
    9fd0:	00023944 	.word	0x00023944
    9fd4:	0002393c 	.word	0x0002393c
    9fd8:	00026ce0 	.word	0x00026ce0

00009fdc <att_read_group_req>:
{
    9fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    9fe0:	7b0c      	ldrb	r4, [r1, #12]
    9fe2:	3c04      	subs	r4, #4
    9fe4:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    9fe6:	2c02      	cmp	r4, #2
{
    9fe8:	4605      	mov	r5, r0
    9fea:	b08c      	sub	sp, #48	; 0x30
    9fec:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    9fee:	d001      	beq.n	9ff4 <att_read_group_req+0x18>
    9ff0:	2c10      	cmp	r4, #16
    9ff2:	d16e      	bne.n	a0d2 <att_read_group_req+0xf6>
	return net_buf_simple_pull_mem(&buf->b, len);
    9ff4:	2104      	movs	r1, #4
    9ff6:	3008      	adds	r0, #8
    9ff8:	f018 fb43 	bl	22682 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    9ffc:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
    a000:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    a002:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    a004:	1d01      	adds	r1, r0, #4
    a006:	4622      	mov	r2, r4
    a008:	4640      	mov	r0, r8
    a00a:	f016 fbb5 	bl	20778 <bt_uuid_create>
    a00e:	2800      	cmp	r0, #0
    a010:	d061      	beq.n	a0d6 <att_read_group_req+0xfa>
	if (!start || !end) {
    a012:	2e00      	cmp	r6, #0
    a014:	d03a      	beq.n	a08c <att_read_group_req+0xb0>
    a016:	2400      	movs	r4, #0
    a018:	2f00      	cmp	r7, #0
    a01a:	d036      	beq.n	a08a <att_read_group_req+0xae>
	if (start > end) {
    a01c:	42be      	cmp	r6, r7
    a01e:	d835      	bhi.n	a08c <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    a020:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    a024:	a901      	add	r1, sp, #4
    a026:	4640      	mov	r0, r8
    a028:	f88d 4004 	strb.w	r4, [sp, #4]
    a02c:	f8ad 3006 	strh.w	r3, [sp, #6]
    a030:	f016 fb78 	bl	20724 <bt_uuid_cmp>
    a034:	2800      	cmp	r0, #0
    a036:	d134      	bne.n	a0a2 <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
    a038:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    a03a:	2214      	movs	r2, #20
    a03c:	2100      	movs	r1, #0
    a03e:	a807      	add	r0, sp, #28
    a040:	f019 fb1d 	bl	2367e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    a044:	2201      	movs	r2, #1
    a046:	2111      	movs	r1, #17
    a048:	4620      	mov	r0, r4
    a04a:	f7ff ff8f 	bl	9f6c <bt_att_create_pdu>
    a04e:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    a050:	2800      	cmp	r0, #0
    a052:	d040      	beq.n	a0d6 <att_read_group_req+0xfa>
	return net_buf_simple_add(&buf->b, len);
    a054:	2101      	movs	r1, #1
    a056:	3008      	adds	r0, #8
	data.uuid = uuid;
    a058:	e9cd 5807 	strd	r5, r8, [sp, #28]
    a05c:	f018 fae9 	bl	22632 <net_buf_simple_add>
	data.rsp->len = 0U;
    a060:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    a064:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    a066:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
    a068:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    a06c:	4a1b      	ldr	r2, [pc, #108]	; (a0dc <att_read_group_req+0x100>)
	data.group = NULL;
    a06e:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    a072:	4639      	mov	r1, r7
    a074:	4630      	mov	r0, r6
    a076:	f017 f8f8 	bl	2126a <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    a07a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a07c:	781c      	ldrb	r4, [r3, #0]
    a07e:	bb1c      	cbnz	r4, a0c8 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
    a080:	9809      	ldr	r0, [sp, #36]	; 0x24
    a082:	f010 f873 	bl	1a16c <net_buf_unref>
	if (!req) {
    a086:	230a      	movs	r3, #10
    a088:	e018      	b.n	a0bc <att_read_group_req+0xe0>
			*err = 0U;
    a08a:	463e      	mov	r6, r7
	if (!req) {
    a08c:	2301      	movs	r3, #1
    a08e:	4632      	mov	r2, r6
    a090:	2110      	movs	r1, #16
    a092:	4628      	mov	r0, r5
    a094:	f017 fb16 	bl	216c4 <send_err_rsp.part.0>
		return 0;
    a098:	2400      	movs	r4, #0
}
    a09a:	4620      	mov	r0, r4
    a09c:	b00c      	add	sp, #48	; 0x30
    a09e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    a0a2:	f642 0301 	movw	r3, #10241	; 0x2801
    a0a6:	a907      	add	r1, sp, #28
    a0a8:	4640      	mov	r0, r8
    a0aa:	f88d 401c 	strb.w	r4, [sp, #28]
    a0ae:	f8ad 301e 	strh.w	r3, [sp, #30]
    a0b2:	f016 fb37 	bl	20724 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    a0b6:	2800      	cmp	r0, #0
    a0b8:	d0be      	beq.n	a038 <att_read_group_req+0x5c>
	if (!req) {
    a0ba:	2310      	movs	r3, #16
    a0bc:	4632      	mov	r2, r6
    a0be:	2110      	movs	r1, #16
    a0c0:	4628      	mov	r0, r5
    a0c2:	f017 faff 	bl	216c4 <send_err_rsp.part.0>
		return 0;
    a0c6:	e7e8      	b.n	a09a <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    a0c8:	9909      	ldr	r1, [sp, #36]	; 0x24
    a0ca:	4628      	mov	r0, r5
    a0cc:	f7ff fd16 	bl	9afc <bt_att_chan_send_rsp.constprop.0>
	return 0;
    a0d0:	e7e2      	b.n	a098 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
    a0d2:	2404      	movs	r4, #4
    a0d4:	e7e1      	b.n	a09a <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
    a0d6:	240e      	movs	r4, #14
    a0d8:	e7df      	b.n	a09a <att_read_group_req+0xbe>
    a0da:	bf00      	nop
    a0dc:	000096dd 	.word	0x000096dd

0000a0e0 <att_read_mult_req>:
{
    a0e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    a0e4:	6886      	ldr	r6, [r0, #8]
{
    a0e6:	b085      	sub	sp, #20
	(void)memset(&data, 0, sizeof(data));
    a0e8:	2210      	movs	r2, #16
{
    a0ea:	4604      	mov	r4, r0
    a0ec:	460d      	mov	r5, r1
	(void)memset(&data, 0, sizeof(data));
    a0ee:	4668      	mov	r0, sp
    a0f0:	2100      	movs	r1, #0
    a0f2:	f019 fac4 	bl	2367e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    a0f6:	2200      	movs	r2, #0
    a0f8:	210f      	movs	r1, #15
    a0fa:	4630      	mov	r0, r6
    a0fc:	f7ff ff36 	bl	9f6c <bt_att_create_pdu>
    a100:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    a102:	b358      	cbz	r0, a15c <att_read_mult_req+0x7c>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    a104:	f8df 9058 	ldr.w	r9, [pc, #88]	; a160 <att_read_mult_req+0x80>
	data.chan = chan;
    a108:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
    a10a:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    a10e:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
    a112:	89ab      	ldrh	r3, [r5, #12]
    a114:	2b01      	cmp	r3, #1
    a116:	d804      	bhi.n	a122 <att_read_mult_req+0x42>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    a118:	9902      	ldr	r1, [sp, #8]
    a11a:	4620      	mov	r0, r4
    a11c:	f7ff fcee 	bl	9afc <bt_att_chan_send_rsp.constprop.0>
    a120:	e018      	b.n	a154 <att_read_mult_req+0x74>
    a122:	4638      	mov	r0, r7
    a124:	f018 fab5 	bl	22692 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    a128:	466b      	mov	r3, sp
    a12a:	464a      	mov	r2, r9
    a12c:	4601      	mov	r1, r0
    a12e:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    a130:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    a134:	f017 f899 	bl	2126a <bt_gatt_foreach_attr>
		if (data.err) {
    a138:	f89d 300c 	ldrb.w	r3, [sp, #12]
    a13c:	2b00      	cmp	r3, #0
    a13e:	d0e8      	beq.n	a112 <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    a140:	9802      	ldr	r0, [sp, #8]
    a142:	f010 f813 	bl	1a16c <net_buf_unref>
	if (!req) {
    a146:	f89d 300c 	ldrb.w	r3, [sp, #12]
    a14a:	4632      	mov	r2, r6
    a14c:	210e      	movs	r1, #14
    a14e:	4620      	mov	r0, r4
    a150:	f017 fab8 	bl	216c4 <send_err_rsp.part.0>
	return 0;
    a154:	2000      	movs	r0, #0
}
    a156:	b005      	add	sp, #20
    a158:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    a15c:	200e      	movs	r0, #14
    a15e:	e7fa      	b.n	a156 <att_read_mult_req+0x76>
    a160:	00021671 	.word	0x00021671

0000a164 <att_read_rsp>:
{
    a164:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    a168:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
    a16c:	4605      	mov	r5, r0
    a16e:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
    a170:	4640      	mov	r0, r8
    a172:	2101      	movs	r1, #1
{
    a174:	4614      	mov	r4, r2
    a176:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
    a178:	f017 fdc8 	bl	21d0c <bt_gatt_change_aware>
    a17c:	b388      	cbz	r0, a1e2 <att_read_rsp+0x7e>
	if (!handle) {
    a17e:	b396      	cbz	r6, a1e6 <att_read_rsp+0x82>
	(void)memset(&data, 0, sizeof(data));
    a180:	2210      	movs	r2, #16
    a182:	2100      	movs	r1, #0
    a184:	4668      	mov	r0, sp
    a186:	f019 fa7a 	bl	2367e <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    a18a:	2200      	movs	r2, #0
    a18c:	4621      	mov	r1, r4
    a18e:	4640      	mov	r0, r8
    a190:	f7ff feec 	bl	9f6c <bt_att_create_pdu>
    a194:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    a196:	b340      	cbz	r0, a1ea <att_read_rsp+0x86>
	data.offset = offset;
    a198:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    a19c:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    a1a0:	2301      	movs	r3, #1
    a1a2:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    a1a6:	4a12      	ldr	r2, [pc, #72]	; (a1f0 <att_read_rsp+0x8c>)
	data.chan = chan;
    a1a8:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    a1aa:	466b      	mov	r3, sp
    a1ac:	4631      	mov	r1, r6
    a1ae:	4630      	mov	r0, r6
    a1b0:	f017 f85b 	bl	2126a <bt_gatt_foreach_attr>
	if (data.err) {
    a1b4:	f89d 400c 	ldrb.w	r4, [sp, #12]
    a1b8:	b174      	cbz	r4, a1d8 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
    a1ba:	9802      	ldr	r0, [sp, #8]
    a1bc:	f00f ffd6 	bl	1a16c <net_buf_unref>
	if (!req) {
    a1c0:	f89d 300c 	ldrb.w	r3, [sp, #12]
    a1c4:	4632      	mov	r2, r6
    a1c6:	4639      	mov	r1, r7
    a1c8:	4628      	mov	r0, r5
    a1ca:	f017 fa7b 	bl	216c4 <send_err_rsp.part.0>
		return 0;
    a1ce:	2400      	movs	r4, #0
}
    a1d0:	4620      	mov	r0, r4
    a1d2:	b004      	add	sp, #16
    a1d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    a1d8:	9902      	ldr	r1, [sp, #8]
    a1da:	4628      	mov	r0, r5
    a1dc:	f7ff fc8e 	bl	9afc <bt_att_chan_send_rsp.constprop.0>
	return 0;
    a1e0:	e7f6      	b.n	a1d0 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    a1e2:	2412      	movs	r4, #18
    a1e4:	e7f4      	b.n	a1d0 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
    a1e6:	2401      	movs	r4, #1
    a1e8:	e7f2      	b.n	a1d0 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    a1ea:	240e      	movs	r4, #14
    a1ec:	e7f0      	b.n	a1d0 <att_read_rsp+0x6c>
    a1ee:	bf00      	nop
    a1f0:	00021671 	.word	0x00021671

0000a1f4 <att_read_type_req>:
{
    a1f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    a1f8:	7b0c      	ldrb	r4, [r1, #12]
    a1fa:	3c04      	subs	r4, #4
    a1fc:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    a1fe:	2c02      	cmp	r4, #2
{
    a200:	4605      	mov	r5, r0
    a202:	b08c      	sub	sp, #48	; 0x30
    a204:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    a206:	d001      	beq.n	a20c <att_read_type_req+0x18>
    a208:	2c10      	cmp	r4, #16
    a20a:	d14f      	bne.n	a2ac <att_read_type_req+0xb8>
	return net_buf_simple_pull_mem(&buf->b, len);
    a20c:	2104      	movs	r1, #4
    a20e:	3008      	adds	r0, #8
    a210:	f018 fa37 	bl	22682 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    a214:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
    a218:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    a21a:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    a21c:	1d01      	adds	r1, r0, #4
    a21e:	4622      	mov	r2, r4
    a220:	4640      	mov	r0, r8
    a222:	f016 faa9 	bl	20778 <bt_uuid_create>
    a226:	b188      	cbz	r0, a24c <att_read_type_req+0x58>
	if (!start || !end) {
    a228:	b19e      	cbz	r6, a252 <att_read_type_req+0x5e>
    a22a:	b18f      	cbz	r7, a250 <att_read_type_req+0x5c>
	if (start > end) {
    a22c:	42b7      	cmp	r7, r6
    a22e:	d310      	bcc.n	a252 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
    a230:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
    a232:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    a234:	2100      	movs	r1, #0
    a236:	eb0d 0002 	add.w	r0, sp, r2
    a23a:	f019 fa20 	bl	2367e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    a23e:	2201      	movs	r2, #1
    a240:	2109      	movs	r1, #9
    a242:	4620      	mov	r0, r4
    a244:	f7ff fe92 	bl	9f6c <bt_att_create_pdu>
    a248:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    a24a:	b968      	cbnz	r0, a268 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
    a24c:	240e      	movs	r4, #14
    a24e:	e007      	b.n	a260 <att_read_type_req+0x6c>
			*err = 0U;
    a250:	463e      	mov	r6, r7
	if (!req) {
    a252:	2301      	movs	r3, #1
    a254:	4632      	mov	r2, r6
    a256:	2108      	movs	r1, #8
    a258:	4628      	mov	r0, r5
    a25a:	f017 fa33 	bl	216c4 <send_err_rsp.part.0>
		return 0;
    a25e:	2400      	movs	r4, #0
}
    a260:	4620      	mov	r0, r4
    a262:	b00c      	add	sp, #48	; 0x30
    a264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
    a268:	2101      	movs	r1, #1
    a26a:	3008      	adds	r0, #8
	data.uuid = uuid;
    a26c:	e9cd 5806 	strd	r5, r8, [sp, #24]
    a270:	f018 f9df 	bl	22632 <net_buf_simple_add>
	data.rsp->len = 0U;
    a274:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    a278:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    a27a:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    a27c:	4a0c      	ldr	r2, [pc, #48]	; (a2b0 <att_read_type_req+0xbc>)
	data.rsp->len = 0U;
    a27e:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    a282:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    a284:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    a288:	4630      	mov	r0, r6
    a28a:	ab06      	add	r3, sp, #24
    a28c:	f016 ffed 	bl	2126a <bt_gatt_foreach_attr>
	if (data.err) {
    a290:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    a294:	b12c      	cbz	r4, a2a2 <att_read_type_req+0xae>
		net_buf_unref(data.buf);
    a296:	9808      	ldr	r0, [sp, #32]
    a298:	f00f ff68 	bl	1a16c <net_buf_unref>
	if (!req) {
    a29c:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    a2a0:	e7d8      	b.n	a254 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    a2a2:	9908      	ldr	r1, [sp, #32]
    a2a4:	4628      	mov	r0, r5
    a2a6:	f7ff fc29 	bl	9afc <bt_att_chan_send_rsp.constprop.0>
	return 0;
    a2aa:	e7d9      	b.n	a260 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
    a2ac:	2404      	movs	r4, #4
    a2ae:	e7d7      	b.n	a260 <att_read_type_req+0x6c>
    a2b0:	00009789 	.word	0x00009789

0000a2b4 <att_find_type_req>:
{
    a2b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a2b8:	4688      	mov	r8, r1
    a2ba:	b086      	sub	sp, #24
    a2bc:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
    a2be:	2106      	movs	r1, #6
    a2c0:	f108 0008 	add.w	r0, r8, #8
    a2c4:	f018 f9dd 	bl	22682 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
    a2c8:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
    a2ca:	b317      	cbz	r7, a312 <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
    a2cc:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
    a2d0:	f1b9 0f00 	cmp.w	r9, #0
    a2d4:	d01c      	beq.n	a310 <att_find_type_req+0x5c>
	if (start > end) {
    a2d6:	454f      	cmp	r7, r9
    a2d8:	d81b      	bhi.n	a312 <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
    a2da:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    a2dc:	f8ad 3002 	strh.w	r3, [sp, #2]
    a2e0:	2400      	movs	r4, #0
    a2e2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    a2e6:	a901      	add	r1, sp, #4
    a2e8:	4668      	mov	r0, sp
	value = buf->data;
    a2ea:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    a2ee:	f88d 4000 	strb.w	r4, [sp]
    a2f2:	f88d 4004 	strb.w	r4, [sp, #4]
    a2f6:	f8ad 3006 	strh.w	r3, [sp, #6]
    a2fa:	f016 fa13 	bl	20724 <bt_uuid_cmp>
    a2fe:	4606      	mov	r6, r0
    a300:	b190      	cbz	r0, a328 <att_find_type_req+0x74>
	if (!req) {
    a302:	230a      	movs	r3, #10
    a304:	463a      	mov	r2, r7
    a306:	2106      	movs	r1, #6
    a308:	4628      	mov	r0, r5
    a30a:	f017 f9db 	bl	216c4 <send_err_rsp.part.0>
		return 0;
    a30e:	e007      	b.n	a320 <att_find_type_req+0x6c>
			*err = 0U;
    a310:	464f      	mov	r7, r9
	if (!req) {
    a312:	2301      	movs	r3, #1
    a314:	463a      	mov	r2, r7
    a316:	2106      	movs	r1, #6
    a318:	4628      	mov	r0, r5
    a31a:	f017 f9d3 	bl	216c4 <send_err_rsp.part.0>
		return 0;
    a31e:	2400      	movs	r4, #0
}
    a320:	4620      	mov	r0, r4
    a322:	b006      	add	sp, #24
    a324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    a328:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
    a32c:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    a330:	4601      	mov	r1, r0
    a332:	2214      	movs	r2, #20
    a334:	a801      	add	r0, sp, #4
    a336:	f019 f9a2 	bl	2367e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    a33a:	4632      	mov	r2, r6
    a33c:	2107      	movs	r1, #7
    a33e:	4640      	mov	r0, r8
    a340:	f7ff fe14 	bl	9f6c <bt_att_create_pdu>
    a344:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    a346:	b1d8      	cbz	r0, a380 <att_find_type_req+0xcc>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    a348:	230a      	movs	r3, #10
    a34a:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    a34e:	4a0d      	ldr	r2, [pc, #52]	; (a384 <att_find_type_req+0xd0>)
	data.value_len = value_len;
    a350:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    a354:	ab01      	add	r3, sp, #4
    a356:	4649      	mov	r1, r9
    a358:	4638      	mov	r0, r7
	data.value = value;
    a35a:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
    a35e:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    a360:	f016 ff83 	bl	2126a <bt_gatt_foreach_attr>
	if (data.err) {
    a364:	f89d 4015 	ldrb.w	r4, [sp, #21]
    a368:	b12c      	cbz	r4, a376 <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    a36a:	9802      	ldr	r0, [sp, #8]
    a36c:	f00f fefe 	bl	1a16c <net_buf_unref>
	if (!req) {
    a370:	f89d 3015 	ldrb.w	r3, [sp, #21]
    a374:	e7ce      	b.n	a314 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    a376:	9902      	ldr	r1, [sp, #8]
    a378:	4628      	mov	r0, r5
    a37a:	f7ff fbbf 	bl	9afc <bt_att_chan_send_rsp.constprop.0>
	return 0;
    a37e:	e7cf      	b.n	a320 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    a380:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    a382:	e7cd      	b.n	a320 <att_find_type_req+0x6c>
    a384:	00009831 	.word	0x00009831

0000a388 <att_find_info_req>:
{
    a388:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    a38a:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    a38c:	881e      	ldrh	r6, [r3, #0]
{
    a38e:	b085      	sub	sp, #20
    a390:	4605      	mov	r5, r0
	if (!start || !end) {
    a392:	b19e      	cbz	r6, a3bc <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
    a394:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    a396:	b184      	cbz	r4, a3ba <att_find_info_req+0x32>
	if (start > end) {
    a398:	42b4      	cmp	r4, r6
    a39a:	d30f      	bcc.n	a3bc <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
    a39c:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
    a39e:	2210      	movs	r2, #16
    a3a0:	2100      	movs	r1, #0
    a3a2:	4668      	mov	r0, sp
    a3a4:	f019 f96b 	bl	2367e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    a3a8:	2200      	movs	r2, #0
    a3aa:	2105      	movs	r1, #5
    a3ac:	4638      	mov	r0, r7
    a3ae:	f7ff fddd 	bl	9f6c <bt_att_create_pdu>
    a3b2:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    a3b4:	b958      	cbnz	r0, a3ce <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    a3b6:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
    a3b8:	e007      	b.n	a3ca <att_find_info_req+0x42>
			*err = 0U;
    a3ba:	4626      	mov	r6, r4
	if (!req) {
    a3bc:	2301      	movs	r3, #1
    a3be:	4632      	mov	r2, r6
    a3c0:	2104      	movs	r1, #4
    a3c2:	4628      	mov	r0, r5
    a3c4:	f017 f97e 	bl	216c4 <send_err_rsp.part.0>
	return 0;
    a3c8:	2000      	movs	r0, #0
}
    a3ca:	b005      	add	sp, #20
    a3cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    a3ce:	4621      	mov	r1, r4
    a3d0:	4a08      	ldr	r2, [pc, #32]	; (a3f4 <att_find_info_req+0x6c>)
	data.chan = chan;
    a3d2:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    a3d4:	466b      	mov	r3, sp
    a3d6:	4630      	mov	r0, r6
    a3d8:	f016 ff47 	bl	2126a <bt_gatt_foreach_attr>
	if (!data.rsp) {
    a3dc:	9c02      	ldr	r4, [sp, #8]
    a3de:	b924      	cbnz	r4, a3ea <att_find_info_req+0x62>
		net_buf_unref(data.buf);
    a3e0:	9801      	ldr	r0, [sp, #4]
    a3e2:	f00f fec3 	bl	1a16c <net_buf_unref>
	if (!req) {
    a3e6:	230a      	movs	r3, #10
    a3e8:	e7e9      	b.n	a3be <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    a3ea:	9901      	ldr	r1, [sp, #4]
    a3ec:	4628      	mov	r0, r5
    a3ee:	f7ff fb85 	bl	9afc <bt_att_chan_send_rsp.constprop.0>
    a3f2:	e7e9      	b.n	a3c8 <att_find_info_req+0x40>
    a3f4:	0002141d 	.word	0x0002141d

0000a3f8 <bt_att_req_alloc>:

	return mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
    a3f8:	b513      	push	{r0, r1, r4, lr}
    a3fa:	4602      	mov	r2, r0
    a3fc:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    a3fe:	4808      	ldr	r0, [pc, #32]	; (a420 <bt_att_req_alloc+0x28>)
    a400:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
    a402:	2400      	movs	r4, #0
    a404:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    a406:	f012 fcb9 	bl	1cd7c <k_mem_slab_alloc>
    a40a:	4601      	mov	r1, r0
    a40c:	b930      	cbnz	r0, a41c <bt_att_req_alloc+0x24>
    a40e:	9801      	ldr	r0, [sp, #4]
    a410:	221c      	movs	r2, #28
    a412:	f019 f934 	bl	2367e <memset>

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));

	return req;
    a416:	9801      	ldr	r0, [sp, #4]
}
    a418:	b002      	add	sp, #8
    a41a:	bd10      	pop	{r4, pc}
		return NULL;
    a41c:	4620      	mov	r0, r4
    a41e:	e7fb      	b.n	a418 <bt_att_req_alloc+0x20>
    a420:	20000820 	.word	0x20000820

0000a424 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
    a424:	b507      	push	{r0, r1, r2, lr}
    a426:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
    a428:	6880      	ldr	r0, [r0, #8]
    a42a:	b120      	cbz	r0, a436 <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
    a42c:	f00f fe9e 	bl	1a16c <net_buf_unref>
		req->buf = NULL;
    a430:	9b01      	ldr	r3, [sp, #4]
    a432:	2200      	movs	r2, #0
    a434:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
    a436:	4803      	ldr	r0, [pc, #12]	; (a444 <bt_att_req_free+0x20>)
    a438:	a901      	add	r1, sp, #4
    a43a:	f012 fcd1 	bl	1cde0 <k_mem_slab_free>
}
    a43e:	b003      	add	sp, #12
    a440:	f85d fb04 	ldr.w	pc, [sp], #4
    a444:	20000820 	.word	0x20000820

0000a448 <att_handle_rsp>:
{
    a448:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	bool pending = k_work_delayable_is_pending(&work->work);
    a44c:	f100 05e8 	add.w	r5, r0, #232	; 0xe8
    a450:	4604      	mov	r4, r0
	return k_work_delayable_busy_get(dwork) != 0;
    a452:	4628      	mov	r0, r5
    a454:	460f      	mov	r7, r1
    a456:	4690      	mov	r8, r2
    a458:	461e      	mov	r6, r3
    a45a:	f018 fef2 	bl	23242 <k_work_delayable_busy_get>
	int rc = k_work_cancel_delayable(&work->work);
    a45e:	4628      	mov	r0, r5
    a460:	f018 ff03 	bl	2326a <k_work_cancel_delayable>
	if (!chan->req) {
    a464:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
    a468:	b9e5      	cbnz	r5, a4a4 <att_handle_rsp+0x5c>
    a46a:	4919      	ldr	r1, [pc, #100]	; (a4d0 <att_handle_rsp+0x88>)
    a46c:	4819      	ldr	r0, [pc, #100]	; (a4d4 <att_handle_rsp+0x8c>)
    a46e:	1a40      	subs	r0, r0, r1
    a470:	08c0      	lsrs	r0, r0, #3
		BT_WARN("No pending ATT request");
    a472:	0180      	lsls	r0, r0, #6
    a474:	f040 0102 	orr.w	r1, r0, #2
    a478:	4817      	ldr	r0, [pc, #92]	; (a4d8 <att_handle_rsp+0x90>)
    a47a:	f014 fb5d 	bl	1eb38 <log_0>
	bt_att_func_t func = NULL;
    a47e:	46aa      	mov	sl, r5
	att_req_send_process(chan->att);
    a480:	6820      	ldr	r0, [r4, #0]
    a482:	f017 f85e 	bl	21542 <att_req_send_process>
	if (func) {
    a486:	f1ba 0f00 	cmp.w	sl, #0
    a48a:	d007      	beq.n	a49c <att_handle_rsp+0x54>
		func(chan->att->conn, err, pdu, len, params);
    a48c:	6820      	ldr	r0, [r4, #0]
    a48e:	f8cd 9000 	str.w	r9, [sp]
    a492:	6800      	ldr	r0, [r0, #0]
    a494:	4643      	mov	r3, r8
    a496:	463a      	mov	r2, r7
    a498:	4631      	mov	r1, r6
    a49a:	47d0      	blx	sl
}
    a49c:	2000      	movs	r0, #0
    a49e:	b003      	add	sp, #12
    a4a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (chan->req == &cancel) {
    a4a4:	4b0d      	ldr	r3, [pc, #52]	; (a4dc <att_handle_rsp+0x94>)
    a4a6:	429d      	cmp	r5, r3
    a4a8:	f04f 0b00 	mov.w	fp, #0
    a4ac:	d103      	bne.n	a4b6 <att_handle_rsp+0x6e>
		chan->req = NULL;
    a4ae:	f8c4 b0cc 	str.w	fp, [r4, #204]	; 0xcc
	bt_att_func_t func = NULL;
    a4b2:	46da      	mov	sl, fp
		goto process;
    a4b4:	e7e4      	b.n	a480 <att_handle_rsp+0x38>
	func = chan->req->func;
    a4b6:	f8d5 a004 	ldr.w	sl, [r5, #4]
	chan->req->func = NULL;
    a4ba:	f8c5 b004 	str.w	fp, [r5, #4]
	bt_att_req_free(chan->req);
    a4be:	4628      	mov	r0, r5
	params = chan->req->user_data;
    a4c0:	f8d5 9018 	ldr.w	r9, [r5, #24]
	bt_att_req_free(chan->req);
    a4c4:	f7ff ffae 	bl	a424 <bt_att_req_free>
	chan->req = NULL;
    a4c8:	f8c4 b0cc 	str.w	fp, [r4, #204]	; 0xcc
    a4cc:	e7d8      	b.n	a480 <att_handle_rsp+0x38>
    a4ce:	bf00      	nop
    a4d0:	0002393c 	.word	0x0002393c
    a4d4:	00023944 	.word	0x00023944
    a4d8:	00026cfb 	.word	0x00026cfb
    a4dc:	2000164c 	.word	0x2000164c

0000a4e0 <bt_att_disconnected>:
{
    a4e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
    a4e2:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
    a4e6:	b085      	sub	sp, #20
    a4e8:	4604      	mov	r4, r0
	if (!att_chan->att) {
    a4ea:	b385      	cbz	r5, a54e <bt_att_disconnected+0x6e>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
    a4ec:	f500 718a 	add.w	r1, r0, #276	; 0x114
    a4f0:	f105 0024 	add.w	r0, r5, #36	; 0x24
    a4f4:	f016 fe51 	bl	2119a <sys_slist_find_and_remove>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
    a4f8:	f1a4 0608 	sub.w	r6, r4, #8
    a4fc:	f104 07c8 	add.w	r7, r4, #200	; 0xc8
    a500:	2200      	movs	r2, #0
    a502:	2300      	movs	r3, #0
    a504:	4638      	mov	r0, r7
    a506:	f018 f843 	bl	22590 <net_buf_get>
    a50a:	4602      	mov	r2, r0
    a50c:	bb08      	cbnz	r0, a552 <bt_att_disconnected+0x72>
	if (chan->req) {
    a50e:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
    a512:	b123      	cbz	r3, a51e <bt_att_disconnected+0x3e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
    a514:	4601      	mov	r1, r0
    a516:	230e      	movs	r3, #14
    a518:	4630      	mov	r0, r6
    a51a:	f7ff ff95 	bl	a448 <att_handle_rsp>
	chan->att = NULL;
    a51e:	2300      	movs	r3, #0
    a520:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
    a524:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    a526:	b993      	cbnz	r3, a54e <bt_att_disconnected+0x6e>
	att_reset(att);
    a528:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
    a52a:	9803      	ldr	r0, [sp, #12]
    a52c:	2200      	movs	r2, #0
    a52e:	2300      	movs	r3, #0
    a530:	300c      	adds	r0, #12
    a532:	f018 f82d 	bl	22590 <net_buf_get>
    a536:	b978      	cbnz	r0, a558 <bt_att_disconnected+0x78>
	att->conn = NULL;
    a538:	9a03      	ldr	r2, [sp, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    a53a:	6856      	ldr	r6, [r2, #4]
	att->conn = NULL;
    a53c:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    a53e:	b976      	cbnz	r6, a55e <bt_att_disconnected+0x7e>
	k_mem_slab_free(&att_slab, (void **)&att);
    a540:	4813      	ldr	r0, [pc, #76]	; (a590 <bt_att_disconnected+0xb0>)
    a542:	a903      	add	r1, sp, #12
    a544:	f012 fc4c 	bl	1cde0 <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
    a548:	6820      	ldr	r0, [r4, #0]
    a54a:	f000 fe5b 	bl	b204 <bt_gatt_disconnected>
}
    a54e:	b005      	add	sp, #20
    a550:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(buf);
    a552:	f00f fe0b 	bl	1a16c <net_buf_unref>
    a556:	e7d3      	b.n	a500 <bt_att_disconnected+0x20>
		net_buf_unref(buf);
    a558:	f00f fe08 	bl	1a16c <net_buf_unref>
    a55c:	e7e5      	b.n	a52a <bt_att_disconnected+0x4a>
	return node->next;
    a55e:	6835      	ldr	r5, [r6, #0]
    a560:	2d00      	cmp	r5, #0
    a562:	bf38      	it	cc
    a564:	2500      	movcc	r5, #0
		if (req->func) {
    a566:	6877      	ldr	r7, [r6, #4]
    a568:	b137      	cbz	r7, a578 <bt_att_disconnected+0x98>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
    a56a:	69b3      	ldr	r3, [r6, #24]
    a56c:	9300      	str	r3, [sp, #0]
    a56e:	2300      	movs	r3, #0
    a570:	461a      	mov	r2, r3
    a572:	210e      	movs	r1, #14
    a574:	4618      	mov	r0, r3
    a576:	47b8      	blx	r7
		bt_att_req_free(req);
    a578:	4630      	mov	r0, r6
    a57a:	f7ff ff53 	bl	a424 <bt_att_req_free>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    a57e:	2d00      	cmp	r5, #0
    a580:	d0de      	beq.n	a540 <bt_att_disconnected+0x60>
    a582:	682b      	ldr	r3, [r5, #0]
    a584:	2b00      	cmp	r3, #0
    a586:	bf38      	it	cc
    a588:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    a58a:	462e      	mov	r6, r5
    a58c:	461d      	mov	r5, r3
    a58e:	e7ea      	b.n	a566 <bt_att_disconnected+0x86>
    a590:	200007e8 	.word	0x200007e8

0000a594 <att_timeout>:
    a594:	4b08      	ldr	r3, [pc, #32]	; (a5b8 <att_timeout+0x24>)
    a596:	4909      	ldr	r1, [pc, #36]	; (a5bc <att_timeout+0x28>)
{
    a598:	b510      	push	{r4, lr}
    a59a:	1ac9      	subs	r1, r1, r3
    a59c:	08c9      	lsrs	r1, r1, #3
	BT_ERR("ATT Timeout");
    a59e:	0189      	lsls	r1, r1, #6
{
    a5a0:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
    a5a2:	f041 0101 	orr.w	r1, r1, #1
    a5a6:	4806      	ldr	r0, [pc, #24]	; (a5c0 <att_timeout+0x2c>)
    a5a8:	f014 fac6 	bl	1eb38 <log_0>
	bt_att_disconnected(&chan->chan.chan);
    a5ac:	f1a4 00e0 	sub.w	r0, r4, #224	; 0xe0
}
    a5b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
    a5b4:	f7ff bf94 	b.w	a4e0 <bt_att_disconnected>
    a5b8:	0002393c 	.word	0x0002393c
    a5bc:	00023944 	.word	0x00023944
    a5c0:	00026d12 	.word	0x00026d12

0000a5c4 <gatt_indicate>:
}
#endif

static int gatt_indicate(struct bt_conn *conn, uint16_t handle,
			 struct bt_gatt_indicate_params *params)
{
    a5c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a5c8:	4680      	mov	r8, r0
    a5ca:	4689      	mov	r9, r1
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    a5cc:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
    a5d0:	2100      	movs	r1, #0
	    params->func == sc_restore_rsp)) &&
	    !bt_gatt_change_aware(conn, false)) {
		return -EAGAIN;
	}
#endif
	len = sizeof(*ind) + params->len;
    a5d2:	8a96      	ldrh	r6, [r2, #20]
{
    a5d4:	4615      	mov	r5, r2
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    a5d6:	f7ff ff0f 	bl	a3f8 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
    a5da:	3602      	adds	r6, #2
	if (!req) {
    a5dc:	4604      	mov	r4, r0
    a5de:	b920      	cbnz	r0, a5ea <gatt_indicate+0x26>

	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
	if (!buf) {
		BT_WARN("No buffer available to send indication");
		bt_att_req_free(req);
		return -ENOMEM;
    a5e0:	f06f 050b 	mvn.w	r5, #11
	if (err) {
		bt_att_req_free(req);
	}

	return err;
}
    a5e4:	4628      	mov	r0, r5
    a5e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req->encode = encode;
    a5ea:	2300      	movs	r3, #0
    a5ec:	60c3      	str	r3, [r0, #12]
	req->att_op = op;
    a5ee:	211d      	movs	r1, #29
	req->func = func;
    a5f0:	4b1b      	ldr	r3, [pc, #108]	; (a660 <gatt_indicate+0x9c>)
	req->len = len;
    a5f2:	6146      	str	r6, [r0, #20]
	req->att_op = op;
    a5f4:	7441      	strb	r1, [r0, #17]
	req->func = func;
    a5f6:	6043      	str	r3, [r0, #4]
	req->user_data = params;
    a5f8:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
    a5fa:	4632      	mov	r2, r6
    a5fc:	4640      	mov	r0, r8
    a5fe:	f7ff fcb5 	bl	9f6c <bt_att_create_pdu>
	if (!buf) {
    a602:	4606      	mov	r6, r0
    a604:	b968      	cbnz	r0, a622 <gatt_indicate+0x5e>
    a606:	4b17      	ldr	r3, [pc, #92]	; (a664 <gatt_indicate+0xa0>)
    a608:	4917      	ldr	r1, [pc, #92]	; (a668 <gatt_indicate+0xa4>)
		BT_WARN("No buffer available to send indication");
    a60a:	4818      	ldr	r0, [pc, #96]	; (a66c <gatt_indicate+0xa8>)
    a60c:	1ac9      	subs	r1, r1, r3
    a60e:	08c9      	lsrs	r1, r1, #3
    a610:	0189      	lsls	r1, r1, #6
    a612:	f041 0102 	orr.w	r1, r1, #2
    a616:	f014 fa8f 	bl	1eb38 <log_0>
		bt_att_req_free(req);
    a61a:	4620      	mov	r0, r4
    a61c:	f7ff ff02 	bl	a424 <bt_att_req_free>
    a620:	e7de      	b.n	a5e0 <gatt_indicate+0x1c>
	return net_buf_simple_add(&buf->b, len);
    a622:	f100 0a08 	add.w	sl, r0, #8
    a626:	2102      	movs	r1, #2
    a628:	4650      	mov	r0, sl
    a62a:	f018 f802 	bl	22632 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
    a62e:	4607      	mov	r7, r0
    a630:	8aa9      	ldrh	r1, [r5, #20]
    a632:	f827 9b02 	strh.w	r9, [r7], #2
    a636:	4650      	mov	r0, sl
    a638:	f017 fffb 	bl	22632 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    a63c:	8aaa      	ldrh	r2, [r5, #20]
    a63e:	6929      	ldr	r1, [r5, #16]
    a640:	4638      	mov	r0, r7
    a642:	f019 f80e 	bl	23662 <memcpy>
	req->buf = buf;
    a646:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
    a648:	4621      	mov	r1, r4
    a64a:	4640      	mov	r0, r8
    a64c:	f017 f934 	bl	218b8 <bt_att_req_send>
	if (err) {
    a650:	4605      	mov	r5, r0
    a652:	2800      	cmp	r0, #0
    a654:	d0c6      	beq.n	a5e4 <gatt_indicate+0x20>
		bt_att_req_free(req);
    a656:	4620      	mov	r0, r4
    a658:	f7ff fee4 	bl	a424 <bt_att_req_free>
    a65c:	e7c2      	b.n	a5e4 <gatt_indicate+0x20>
    a65e:	bf00      	nop
    a660:	000218ff 	.word	0x000218ff
    a664:	0002393c 	.word	0x0002393c
    a668:	00023a0c 	.word	0x00023a0c
    a66c:	00026d25 	.word	0x00026d25

0000a670 <read_ppcp>:
{
    a670:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    a672:	4610      	mov	r0, r2
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
    a674:	4a07      	ldr	r2, [pc, #28]	; (a694 <read_ppcp+0x24>)
{
    a676:	4619      	mov	r1, r3
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
    a678:	f44f 1328 	mov.w	r3, #2752512	; 0x2a0000
    a67c:	e9cd 2302 	strd	r2, r3, [sp, #8]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
    a680:	2308      	movs	r3, #8
    a682:	9300      	str	r3, [sp, #0]
    a684:	f8bd 2018 	ldrh.w	r2, [sp, #24]
    a688:	446b      	add	r3, sp
    a68a:	f017 f9bf 	bl	21a0c <bt_gatt_attr_read.constprop.0>
}
    a68e:	b005      	add	sp, #20
    a690:	f85d fb04 	ldr.w	pc, [sp], #4
    a694:	00280018 	.word	0x00280018

0000a698 <find_sc_cfg>:
{
    a698:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
    a69a:	4c0e      	ldr	r4, [pc, #56]	; (a6d4 <find_sc_cfg+0x3c>)
    a69c:	7823      	ldrb	r3, [r4, #0]
    a69e:	4283      	cmp	r3, r0
{
    a6a0:	4605      	mov	r5, r0
    a6a2:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
    a6a4:	d00a      	beq.n	a6bc <find_sc_cfg+0x24>
    a6a6:	7b23      	ldrb	r3, [r4, #12]
    a6a8:	42ab      	cmp	r3, r5
    a6aa:	d111      	bne.n	a6d0 <find_sc_cfg+0x38>
    a6ac:	480a      	ldr	r0, [pc, #40]	; (a6d8 <find_sc_cfg+0x40>)
    a6ae:	2207      	movs	r2, #7
    a6b0:	4631      	mov	r1, r6
    a6b2:	f018 ffc8 	bl	23646 <memcmp>
    a6b6:	b958      	cbnz	r0, a6d0 <find_sc_cfg+0x38>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    a6b8:	2001      	movs	r0, #1
    a6ba:	e005      	b.n	a6c8 <find_sc_cfg+0x30>
    a6bc:	2207      	movs	r2, #7
    a6be:	1c60      	adds	r0, r4, #1
    a6c0:	f018 ffc1 	bl	23646 <memcmp>
		if (id == sc_cfg[i].id &&
    a6c4:	2800      	cmp	r0, #0
    a6c6:	d1ee      	bne.n	a6a6 <find_sc_cfg+0xe>
			return &sc_cfg[i];
    a6c8:	230c      	movs	r3, #12
    a6ca:	fb03 4000 	mla	r0, r3, r0, r4
    a6ce:	e000      	b.n	a6d2 <find_sc_cfg+0x3a>
	return NULL;
    a6d0:	2000      	movs	r0, #0
}
    a6d2:	bd70      	pop	{r4, r5, r6, pc}
    a6d4:	20002c1e 	.word	0x20002c1e
    a6d8:	20002c2b 	.word	0x20002c2b

0000a6dc <sc_save>:
{
    a6dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    a6e0:	4680      	mov	r8, r0
    a6e2:	460f      	mov	r7, r1
    a6e4:	4616      	mov	r6, r2
    a6e6:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
    a6e8:	f7ff ffd6 	bl	a698 <find_sc_cfg>
	if (!cfg) {
    a6ec:	4604      	mov	r4, r0
    a6ee:	b9c8      	cbnz	r0, a724 <sc_save+0x48>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    a6f0:	4669      	mov	r1, sp
    a6f2:	9000      	str	r0, [sp, #0]
    a6f4:	f8cd 0003 	str.w	r0, [sp, #3]
    a6f8:	f7ff ffce 	bl	a698 <find_sc_cfg>
		if (!cfg) {
    a6fc:	4604      	mov	r4, r0
    a6fe:	b960      	cbnz	r0, a71a <sc_save+0x3e>
    a700:	490f      	ldr	r1, [pc, #60]	; (a740 <sc_save+0x64>)
    a702:	4b10      	ldr	r3, [pc, #64]	; (a744 <sc_save+0x68>)
			BT_ERR("unable to save SC: no cfg left");
    a704:	4810      	ldr	r0, [pc, #64]	; (a748 <sc_save+0x6c>)
    a706:	1ac9      	subs	r1, r1, r3
    a708:	08c9      	lsrs	r1, r1, #3
    a70a:	0189      	lsls	r1, r1, #6
    a70c:	f041 0101 	orr.w	r1, r1, #1
    a710:	f014 fa12 	bl	1eb38 <log_0>
}
    a714:	b002      	add	sp, #8
    a716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
    a71a:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
    a71e:	4639      	mov	r1, r7
    a720:	f017 f968 	bl	219f4 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
    a724:	8922      	ldrh	r2, [r4, #8]
    a726:	8963      	ldrh	r3, [r4, #10]
    a728:	b91a      	cbnz	r2, a732 <sc_save+0x56>
    a72a:	b923      	cbnz	r3, a736 <sc_save+0x5a>
		cfg->data.start = start;
    a72c:	8126      	strh	r6, [r4, #8]
		*end = new_end;
    a72e:	8165      	strh	r5, [r4, #10]
    a730:	e7f0      	b.n	a714 <sc_save+0x38>
	if (new_start >= *start && new_end <= *end) {
    a732:	4296      	cmp	r6, r2
    a734:	d302      	bcc.n	a73c <sc_save+0x60>
    a736:	429d      	cmp	r5, r3
    a738:	d9ec      	bls.n	a714 <sc_save+0x38>
    a73a:	e7f8      	b.n	a72e <sc_save+0x52>
		*start = new_start;
    a73c:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
    a73e:	e7fa      	b.n	a736 <sc_save+0x5a>
    a740:	00023a0c 	.word	0x00023a0c
    a744:	0002393c 	.word	0x0002393c
    a748:	00026d4c 	.word	0x00026d4c

0000a74c <find_cf_cfg>:
{
    a74c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    a74e:	4c16      	ldr	r4, [pc, #88]	; (a7a8 <find_cf_cfg+0x5c>)
		if (!conn) {
    a750:	4605      	mov	r5, r0
    a752:	b140      	cbz	r0, a766 <find_cf_cfg+0x1a>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    a754:	4622      	mov	r2, r4
    a756:	f812 1b01 	ldrb.w	r1, [r2], #1
    a75a:	f016 fbac 	bl	20eb6 <bt_conn_is_peer_addr_le>
    a75e:	b1c0      	cbz	r0, a792 <find_cf_cfg+0x46>
}
    a760:	4620      	mov	r0, r4
    a762:	b003      	add	sp, #12
    a764:	bd30      	pop	{r4, r5, pc}
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    a766:	9000      	str	r0, [sp, #0]
    a768:	2207      	movs	r2, #7
    a76a:	f8cd 0003 	str.w	r0, [sp, #3]
    a76e:	4669      	mov	r1, sp
    a770:	1c60      	adds	r0, r4, #1
    a772:	f018 ff68 	bl	23646 <memcmp>
    a776:	2800      	cmp	r0, #0
    a778:	d0f2      	beq.n	a760 <find_cf_cfg+0x14>
    a77a:	2207      	movs	r2, #7
    a77c:	4669      	mov	r1, sp
    a77e:	f104 0011 	add.w	r0, r4, #17
    a782:	9500      	str	r5, [sp, #0]
    a784:	f8cd 5003 	str.w	r5, [sp, #3]
    a788:	f018 ff5d 	bl	23646 <memcmp>
    a78c:	b948      	cbnz	r0, a7a2 <find_cf_cfg+0x56>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
    a78e:	3410      	adds	r4, #16
    a790:	e7e6      	b.n	a760 <find_cf_cfg+0x14>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    a792:	7c21      	ldrb	r1, [r4, #16]
    a794:	f104 0211 	add.w	r2, r4, #17
    a798:	4628      	mov	r0, r5
    a79a:	f016 fb8c 	bl	20eb6 <bt_conn_is_peer_addr_le>
    a79e:	2800      	cmp	r0, #0
    a7a0:	d1f5      	bne.n	a78e <find_cf_cfg+0x42>
	return NULL;
    a7a2:	2400      	movs	r4, #0
    a7a4:	e7dc      	b.n	a760 <find_cf_cfg+0x14>
    a7a6:	bf00      	nop
    a7a8:	20001668 	.word	0x20001668

0000a7ac <cf_write>:
{
    a7ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a7b0:	4698      	mov	r8, r3
    a7b2:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
    a7b6:	2b01      	cmp	r3, #1
{
    a7b8:	4606      	mov	r6, r0
    a7ba:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
    a7bc:	d83d      	bhi.n	a83a <cf_write+0x8e>
	if (offset + len > sizeof(cfg->data)) {
    a7be:	4443      	add	r3, r8
    a7c0:	2b01      	cmp	r3, #1
    a7c2:	4645      	mov	r5, r8
    a7c4:	dc3c      	bgt.n	a840 <cf_write+0x94>
	cfg = find_cf_cfg(conn);
    a7c6:	f7ff ffc1 	bl	a74c <find_cf_cfg>
	if (!cfg) {
    a7ca:	4604      	mov	r4, r0
    a7cc:	b990      	cbnz	r0, a7f4 <cf_write+0x48>
		cfg = find_cf_cfg(NULL);
    a7ce:	f7ff ffbd 	bl	a74c <find_cf_cfg>
	if (!cfg) {
    a7d2:	4604      	mov	r4, r0
    a7d4:	b970      	cbnz	r0, a7f4 <cf_write+0x48>
    a7d6:	4b1d      	ldr	r3, [pc, #116]	; (a84c <cf_write+0xa0>)
    a7d8:	491d      	ldr	r1, [pc, #116]	; (a850 <cf_write+0xa4>)
		BT_WARN("No space to store Client Supported Features");
    a7da:	481e      	ldr	r0, [pc, #120]	; (a854 <cf_write+0xa8>)
    a7dc:	1ac9      	subs	r1, r1, r3
    a7de:	08c9      	lsrs	r1, r1, #3
    a7e0:	0189      	lsls	r1, r1, #6
    a7e2:	f041 0102 	orr.w	r1, r1, #2
    a7e6:	f014 f9a7 	bl	1eb38 <log_0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    a7ea:	f06f 0510 	mvn.w	r5, #16
}
    a7ee:	4628      	mov	r0, r5
    a7f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
    a7f4:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
    a7f6:	f1b8 0f00 	cmp.w	r8, #0
    a7fa:	d10c      	bne.n	a816 <cf_write+0x6a>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    a7fc:	f106 0188 	add.w	r1, r6, #136	; 0x88
    a800:	1c60      	adds	r0, r4, #1
    a802:	f017 f8f7 	bl	219f4 <bt_addr_le_copy>
	cfg->id = conn->id;
    a806:	4620      	mov	r0, r4
    a808:	7a33      	ldrb	r3, [r6, #8]
    a80a:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    a80e:	2100      	movs	r1, #0
    a810:	f017 f8e2 	bl	219d8 <atomic_set_bit>
	return len;
    a814:	e7eb      	b.n	a7ee <cf_write+0x42>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
    a816:	7a20      	ldrb	r0, [r4, #8]
    a818:	fa20 f301 	lsr.w	r3, r0, r1
    a81c:	07da      	lsls	r2, r3, #31
    a81e:	d503      	bpl.n	a828 <cf_write+0x7c>
		    !(value[i / 8] & BIT(i % 8))) {
    a820:	783b      	ldrb	r3, [r7, #0]
    a822:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
    a824:	07db      	lsls	r3, r3, #31
    a826:	d50e      	bpl.n	a846 <cf_write+0x9a>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
    a828:	3101      	adds	r1, #1
    a82a:	2903      	cmp	r1, #3
    a82c:	d1e3      	bne.n	a7f6 <cf_write+0x4a>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
    a82e:	783b      	ldrb	r3, [r7, #0]
    a830:	f003 0307 	and.w	r3, r3, #7
    a834:	4318      	orrs	r0, r3
    a836:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
    a838:	e7e0      	b.n	a7fc <cf_write+0x50>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    a83a:	f06f 0506 	mvn.w	r5, #6
    a83e:	e7d6      	b.n	a7ee <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    a840:	f06f 050c 	mvn.w	r5, #12
    a844:	e7d3      	b.n	a7ee <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
    a846:	f06f 0512 	mvn.w	r5, #18
    a84a:	e7d0      	b.n	a7ee <cf_write+0x42>
    a84c:	0002393c 	.word	0x0002393c
    a850:	00023a0c 	.word	0x00023a0c
    a854:	00026d6b 	.word	0x00026d6b

0000a858 <sc_indicate_rsp>:
{
    a858:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a85a:	4915      	ldr	r1, [pc, #84]	; (a8b0 <sc_indicate_rsp+0x58>)
    a85c:	f3bf 8f5b 	dmb	ish
    a860:	4604      	mov	r4, r0
    a862:	f101 0350 	add.w	r3, r1, #80	; 0x50
    a866:	e853 2f00 	ldrex	r2, [r3]
    a86a:	f022 0202 	bic.w	r2, r2, #2
    a86e:	e843 2000 	strex	r0, r2, [r3]
    a872:	2800      	cmp	r0, #0
    a874:	d1f7      	bne.n	a866 <sc_indicate_rsp+0xe>
    a876:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    a87a:	f3bf 8f5b 	dmb	ish
    a87e:	6d0b      	ldr	r3, [r1, #80]	; 0x50
    a880:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    a884:	07da      	lsls	r2, r3, #31
    a886:	d505      	bpl.n	a894 <sc_indicate_rsp+0x3c>
	return k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
    a888:	480a      	ldr	r0, [pc, #40]	; (a8b4 <sc_indicate_rsp+0x5c>)
    a88a:	2200      	movs	r2, #0
    a88c:	2300      	movs	r3, #0
    a88e:	3120      	adds	r1, #32
    a890:	f013 f9ba 	bl	1dc08 <k_work_reschedule_for_queue>
	cfg = find_cf_cfg(conn);
    a894:	4620      	mov	r0, r4
    a896:	f7ff ff59 	bl	a74c <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
    a89a:	b140      	cbz	r0, a8ae <sc_indicate_rsp+0x56>
    a89c:	7a03      	ldrb	r3, [r0, #8]
    a89e:	07db      	lsls	r3, r3, #31
    a8a0:	d505      	bpl.n	a8ae <sc_indicate_rsp+0x56>
}
    a8a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    a8a6:	2100      	movs	r1, #0
    a8a8:	300c      	adds	r0, #12
    a8aa:	f017 b895 	b.w	219d8 <atomic_set_bit>
}
    a8ae:	bd10      	pop	{r4, pc}
    a8b0:	20000d38 	.word	0x20000d38
    a8b4:	20001390 	.word	0x20001390

0000a8b8 <bt_gatt_attr_write_ccc>:
{
    a8b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    a8bc:	461f      	mov	r7, r3
    a8be:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	struct _bt_gatt_ccc *ccc = attr->user_data;
    a8c2:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
    a8c6:	4606      	mov	r6, r0
    a8c8:	4688      	mov	r8, r1
	if (offset) {
    a8ca:	2b00      	cmp	r3, #0
    a8cc:	d151      	bne.n	a972 <bt_gatt_attr_write_ccc+0xba>
	if (!len || len > sizeof(uint16_t)) {
    a8ce:	1e7b      	subs	r3, r7, #1
    a8d0:	2b01      	cmp	r3, #1
    a8d2:	d851      	bhi.n	a978 <bt_gatt_attr_write_ccc+0xc0>
	if (len < sizeof(uint16_t)) {
    a8d4:	2f01      	cmp	r7, #1
		value = *(uint8_t *)buf;
    a8d6:	7815      	ldrb	r5, [r2, #0]
    a8d8:	bf18      	it	ne
    a8da:	7852      	ldrbne	r2, [r2, #1]
	cfg = find_ccc_cfg(conn, ccc);
    a8dc:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
    a8de:	bf0c      	ite	eq
    a8e0:	b2ad      	uxtheq	r5, r5
    a8e2:	ea45 2502 	orrne.w	r5, r5, r2, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
    a8e6:	f017 f944 	bl	21b72 <find_ccc_cfg>
	if (!cfg) {
    a8ea:	4604      	mov	r4, r0
    a8ec:	b9e8      	cbnz	r0, a92a <bt_gatt_attr_write_ccc+0x72>
		if (!value) {
    a8ee:	b91d      	cbnz	r5, a8f8 <bt_gatt_attr_write_ccc+0x40>
			return len;
    a8f0:	4638      	mov	r0, r7
}
    a8f2:	b003      	add	sp, #12
    a8f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
    a8f8:	4649      	mov	r1, r9
    a8fa:	f017 f93a 	bl	21b72 <find_ccc_cfg>
		if (!cfg) {
    a8fe:	4604      	mov	r4, r0
    a900:	b960      	cbnz	r0, a91c <bt_gatt_attr_write_ccc+0x64>
    a902:	4b1f      	ldr	r3, [pc, #124]	; (a980 <bt_gatt_attr_write_ccc+0xc8>)
    a904:	491f      	ldr	r1, [pc, #124]	; (a984 <bt_gatt_attr_write_ccc+0xcc>)
			BT_WARN("No space to store CCC cfg");
    a906:	4820      	ldr	r0, [pc, #128]	; (a988 <bt_gatt_attr_write_ccc+0xd0>)
    a908:	1ac9      	subs	r1, r1, r3
    a90a:	08c9      	lsrs	r1, r1, #3
    a90c:	0189      	lsls	r1, r1, #6
    a90e:	f041 0102 	orr.w	r1, r1, #2
    a912:	f014 f911 	bl	1eb38 <log_0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    a916:	f06f 0010 	mvn.w	r0, #16
    a91a:	e7ea      	b.n	a8f2 <bt_gatt_attr_write_ccc+0x3a>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    a91c:	f106 0188 	add.w	r1, r6, #136	; 0x88
    a920:	3001      	adds	r0, #1
    a922:	f017 f867 	bl	219f4 <bt_addr_le_copy>
		cfg->id = conn->id;
    a926:	7a33      	ldrb	r3, [r6, #8]
    a928:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
    a92a:	f8d9 301c 	ldr.w	r3, [r9, #28]
    a92e:	b9a3      	cbnz	r3, a95a <bt_gatt_attr_write_ccc+0xa2>
	if (cfg->value != ccc->value) {
    a930:	f8b9 3014 	ldrh.w	r3, [r9, #20]
	cfg->value = value;
    a934:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
    a936:	42ab      	cmp	r3, r5
    a938:	d003      	beq.n	a942 <bt_gatt_attr_write_ccc+0x8a>
		gatt_ccc_changed(attr, ccc);
    a93a:	4649      	mov	r1, r9
    a93c:	4640      	mov	r0, r8
    a93e:	f016 ffd0 	bl	218e2 <gatt_ccc_changed>
	if (!value) {
    a942:	2d00      	cmp	r5, #0
    a944:	d1d4      	bne.n	a8f0 <bt_gatt_attr_write_ccc+0x38>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    a946:	4669      	mov	r1, sp
    a948:	1c60      	adds	r0, r4, #1
    a94a:	9500      	str	r5, [sp, #0]
    a94c:	f8cd 5003 	str.w	r5, [sp, #3]
    a950:	f017 f850 	bl	219f4 <bt_addr_le_copy>
	cfg->id = 0U;
    a954:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
    a956:	8125      	strh	r5, [r4, #8]
}
    a958:	e7ca      	b.n	a8f0 <bt_gatt_attr_write_ccc+0x38>
		ssize_t write = ccc->cfg_write(conn, attr, value);
    a95a:	462a      	mov	r2, r5
    a95c:	4641      	mov	r1, r8
    a95e:	4630      	mov	r0, r6
    a960:	4798      	blx	r3
		if (write < 0) {
    a962:	2800      	cmp	r0, #0
    a964:	dbc5      	blt.n	a8f2 <bt_gatt_attr_write_ccc+0x3a>
		if (write != sizeof(value) && write != 1) {
    a966:	3801      	subs	r0, #1
    a968:	2801      	cmp	r0, #1
    a96a:	d9e1      	bls.n	a930 <bt_gatt_attr_write_ccc+0x78>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
    a96c:	f06f 000d 	mvn.w	r0, #13
    a970:	e7bf      	b.n	a8f2 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    a972:	f06f 0006 	mvn.w	r0, #6
    a976:	e7bc      	b.n	a8f2 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    a978:	f06f 000c 	mvn.w	r0, #12
    a97c:	e7b9      	b.n	a8f2 <bt_gatt_attr_write_ccc+0x3a>
    a97e:	bf00      	nop
    a980:	0002393c 	.word	0x0002393c
    a984:	00023a0c 	.word	0x00023a0c
    a988:	00026d97 	.word	0x00026d97

0000a98c <gatt_notify>:
{
    a98c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a990:	4614      	mov	r4, r2
				sizeof(*nfy) + params->len);
    a992:	8992      	ldrh	r2, [r2, #12]
{
    a994:	4688      	mov	r8, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    a996:	3202      	adds	r2, #2
    a998:	211b      	movs	r1, #27
{
    a99a:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    a99c:	f7ff fae6 	bl	9f6c <bt_att_create_pdu>
	if (!buf) {
    a9a0:	4605      	mov	r5, r0
    a9a2:	b1c8      	cbz	r0, a9d8 <gatt_notify+0x4c>
    a9a4:	f100 0908 	add.w	r9, r0, #8
    a9a8:	2102      	movs	r1, #2
    a9aa:	4648      	mov	r0, r9
    a9ac:	f017 fe41 	bl	22632 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    a9b0:	4606      	mov	r6, r0
    a9b2:	89a1      	ldrh	r1, [r4, #12]
    a9b4:	f826 8b02 	strh.w	r8, [r6], #2
    a9b8:	4648      	mov	r0, r9
    a9ba:	f017 fe3a 	bl	22632 <net_buf_simple_add>
    a9be:	89a2      	ldrh	r2, [r4, #12]
    a9c0:	68a1      	ldr	r1, [r4, #8]
    a9c2:	4630      	mov	r0, r6
    a9c4:	f018 fe4d 	bl	23662 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
    a9c8:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    a9cc:	4629      	mov	r1, r5
    a9ce:	4638      	mov	r0, r7
}
    a9d0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
    a9d4:	f016 bf25 	b.w	21822 <bt_att_send>
    a9d8:	4b06      	ldr	r3, [pc, #24]	; (a9f4 <gatt_notify+0x68>)
    a9da:	4907      	ldr	r1, [pc, #28]	; (a9f8 <gatt_notify+0x6c>)
		BT_WARN("No buffer available to send notification");
    a9dc:	4807      	ldr	r0, [pc, #28]	; (a9fc <gatt_notify+0x70>)
    a9de:	1ac9      	subs	r1, r1, r3
    a9e0:	08c9      	lsrs	r1, r1, #3
    a9e2:	0189      	lsls	r1, r1, #6
    a9e4:	f041 0102 	orr.w	r1, r1, #2
    a9e8:	f014 f8a6 	bl	1eb38 <log_0>
}
    a9ec:	f06f 000b 	mvn.w	r0, #11
    a9f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a9f4:	0002393c 	.word	0x0002393c
    a9f8:	00023a0c 	.word	0x00023a0c
    a9fc:	00026db1 	.word	0x00026db1

0000aa00 <notify_cb>:

static uint8_t notify_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			 void *user_data)
{
    aa00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct notify_data *data = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    aa04:	4b38      	ldr	r3, [pc, #224]	; (aae8 <notify_cb+0xe8>)
{
    aa06:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    aa08:	6882      	ldr	r2, [r0, #8]
    aa0a:	429a      	cmp	r2, r3
{
    aa0c:	4680      	mov	r8, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    aa0e:	d003      	beq.n	aa18 <notify_cb+0x18>
		return BT_GATT_ITER_CONTINUE;
    aa10:	2001      	movs	r0, #1

		data->err = 0;
	}

	return BT_GATT_ITER_CONTINUE;
}
    aa12:	b003      	add	sp, #12
    aa14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ccc = attr->user_data;
    aa18:	f8d0 900c 	ldr.w	r9, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
    aa1c:	4b33      	ldr	r3, [pc, #204]	; (aaec <notify_cb+0xec>)
    aa1e:	4599      	cmp	r9, r3
    aa20:	d01a      	beq.n	aa58 <notify_cb+0x58>
    aa22:	f109 0701 	add.w	r7, r9, #1
    aa26:	f109 0a15 	add.w	sl, r9, #21
    aa2a:	f04f 0b00 	mov.w	fp, #0
		if (cfg->value != data->type) {
    aa2e:	f8b7 2007 	ldrh.w	r2, [r7, #7]
    aa32:	89a3      	ldrh	r3, [r4, #12]
    aa34:	429a      	cmp	r2, r3
    aa36:	d10b      	bne.n	aa50 <notify_cb+0x50>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    aa38:	f817 0c01 	ldrb.w	r0, [r7, #-1]
    aa3c:	4639      	mov	r1, r7
    aa3e:	f7fe fa97 	bl	8f70 <bt_conn_lookup_addr_le>
		if (!conn) {
    aa42:	4605      	mov	r5, r0
    aa44:	b120      	cbz	r0, aa50 <notify_cb+0x50>
		if (conn->state != BT_CONN_CONNECTED) {
    aa46:	7b43      	ldrb	r3, [r0, #13]
    aa48:	2b07      	cmp	r3, #7
    aa4a:	d029      	beq.n	aaa0 <notify_cb+0xa0>
			bt_conn_unref(conn);
    aa4c:	f016 fa6e 	bl	20f2c <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    aa50:	370a      	adds	r7, #10
    aa52:	4557      	cmp	r7, sl
    aa54:	d0dc      	beq.n	aa10 <notify_cb+0x10>
    aa56:	e7ea      	b.n	aa2e <notify_cb+0x2e>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    aa58:	2600      	movs	r6, #0
    aa5a:	4d25      	ldr	r5, [pc, #148]	; (aaf0 <notify_cb+0xf0>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    aa5c:	4637      	mov	r7, r6
    aa5e:	2207      	movs	r2, #7
    aa60:	4669      	mov	r1, sp
    aa62:	4628      	mov	r0, r5
    aa64:	9700      	str	r7, [sp, #0]
    aa66:	f8cd 7003 	str.w	r7, [sp, #3]
    aa6a:	f018 fdec 	bl	23646 <memcmp>
    aa6e:	b178      	cbz	r0, aa90 <notify_cb+0x90>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
    aa70:	f815 0c01 	ldrb.w	r0, [r5, #-1]
    aa74:	2207      	movs	r2, #7
    aa76:	4629      	mov	r1, r5
    aa78:	f7fe fabe 	bl	8ff8 <bt_conn_lookup_state_le>
			if (!conn) {
    aa7c:	b968      	cbnz	r0, aa9a <notify_cb+0x9a>
				sc = (struct sc_data *)data->ind_params->data;
    aa7e:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
    aa80:	f815 0c01 	ldrb.w	r0, [r5, #-1]
				sc = (struct sc_data *)data->ind_params->data;
    aa84:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
    aa86:	4629      	mov	r1, r5
    aa88:	8853      	ldrh	r3, [r2, #2]
    aa8a:	8812      	ldrh	r2, [r2, #0]
    aa8c:	f7ff fe26 	bl	a6dc <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    aa90:	350c      	adds	r5, #12
    aa92:	2e00      	cmp	r6, #0
    aa94:	d1c5      	bne.n	aa22 <notify_cb+0x22>
    aa96:	2601      	movs	r6, #1
    aa98:	e7e1      	b.n	aa5e <notify_cb+0x5e>
			bt_conn_unref(conn);
    aa9a:	f016 fa47 	bl	20f2c <bt_conn_unref>
    aa9e:	e7f7      	b.n	aa90 <notify_cb+0x90>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    aaa0:	f8d9 3020 	ldr.w	r3, [r9, #32]
    aaa4:	b123      	cbz	r3, aab0 <notify_cb+0xb0>
    aaa6:	4641      	mov	r1, r8
    aaa8:	4798      	blx	r3
    aaaa:	b908      	cbnz	r0, aab0 <notify_cb+0xb0>
			bt_conn_unref(conn);
    aaac:	4628      	mov	r0, r5
    aaae:	e7cd      	b.n	aa4c <notify_cb+0x4c>
		if (data->type == BT_GATT_CCC_INDICATE) {
    aab0:	89a3      	ldrh	r3, [r4, #12]
    aab2:	88a1      	ldrh	r1, [r4, #4]
    aab4:	6922      	ldr	r2, [r4, #16]
    aab6:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
    aab8:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
    aaba:	d10f      	bne.n	aadc <notify_cb+0xdc>
			err = gatt_indicate(conn, data->handle,
    aabc:	f7ff fd82 	bl	a5c4 <gatt_indicate>
			if (err == 0) {
    aac0:	4606      	mov	r6, r0
    aac2:	b918      	cbnz	r0, aacc <notify_cb+0xcc>
				data->ind_params->_ref++;
    aac4:	6922      	ldr	r2, [r4, #16]
    aac6:	7d93      	ldrb	r3, [r2, #22]
    aac8:	3301      	adds	r3, #1
    aaca:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
    aacc:	4628      	mov	r0, r5
    aace:	f016 fa2d 	bl	20f2c <bt_conn_unref>
		if (err < 0) {
    aad2:	2e00      	cmp	r6, #0
    aad4:	db06      	blt.n	aae4 <notify_cb+0xe4>
		data->err = 0;
    aad6:	f8c4 b008 	str.w	fp, [r4, #8]
    aada:	e7b9      	b.n	aa50 <notify_cb+0x50>
			err = gatt_notify(conn, data->handle, data->nfy_params);
    aadc:	f7ff ff56 	bl	a98c <gatt_notify>
    aae0:	4606      	mov	r6, r0
    aae2:	e7f3      	b.n	aacc <notify_cb+0xcc>
			return BT_GATT_ITER_STOP;
    aae4:	2000      	movs	r0, #0
    aae6:	e794      	b.n	aa12 <notify_cb+0x12>
    aae8:	0000a8b9 	.word	0x0000a8b9
    aaec:	20000274 	.word	0x20000274
    aaf0:	20002c1f 	.word	0x20002c1f

0000aaf4 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
    aaf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    aaf8:	4b2a      	ldr	r3, [pc, #168]	; (aba4 <disconnected_cb+0xb0>)
{
    aafa:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    aafc:	6882      	ldr	r2, [r0, #8]
    aafe:	429a      	cmp	r2, r3
{
    ab00:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    ab02:	d12f      	bne.n	ab64 <disconnected_cb+0x70>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    ab04:	68c5      	ldr	r5, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
    ab06:	8aab      	ldrh	r3, [r5, #20]
    ab08:	b363      	cbz	r3, ab64 <disconnected_cb+0x70>
				bt_conn_unref(tmp);
			}
		} else {
			/* Clear value if not paired */
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
				if (ccc == &sc_ccc) {
    ab0a:	f8df b09c 	ldr.w	fp, [pc, #156]	; aba8 <disconnected_cb+0xb4>
    ab0e:	1c6c      	adds	r4, r5, #1
    ab10:	f105 0a15 	add.w	sl, r5, #21
	value_used = false;
    ab14:	f04f 0800 	mov.w	r8, #0
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    ab18:	f106 0988 	add.w	r9, r6, #136	; 0x88
		if (!cfg->value) {
    ab1c:	f8b4 3007 	ldrh.w	r3, [r4, #7]
    ab20:	b19b      	cbz	r3, ab4a <disconnected_cb+0x56>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    ab22:	f814 1c01 	ldrb.w	r1, [r4, #-1]
    ab26:	4622      	mov	r2, r4
    ab28:	4630      	mov	r0, r6
    ab2a:	f016 f9c4 	bl	20eb6 <bt_conn_is_peer_addr_le>
    ab2e:	b9e8      	cbnz	r0, ab6c <disconnected_cb+0x78>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    ab30:	f814 0c01 	ldrb.w	r0, [r4, #-1]
    ab34:	4621      	mov	r1, r4
    ab36:	f7fe fa1b 	bl	8f70 <bt_conn_lookup_addr_le>
			if (tmp) {
    ab3a:	b130      	cbz	r0, ab4a <disconnected_cb+0x56>
				if (tmp->state == BT_CONN_CONNECTED) {
    ab3c:	7b43      	ldrb	r3, [r0, #13]
					value_used = true;
    ab3e:	2b07      	cmp	r3, #7
    ab40:	bf08      	it	eq
    ab42:	f04f 0801 	moveq.w	r8, #1
				bt_conn_unref(tmp);
    ab46:	f016 f9f1 	bl	20f2c <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    ab4a:	340a      	adds	r4, #10
    ab4c:	4554      	cmp	r4, sl
    ab4e:	d1e5      	bne.n	ab1c <disconnected_cb+0x28>
			}
		}
	}

	/* If all values are now disabled, reset value while disconnected */
	if (!value_used) {
    ab50:	f1b8 0f00 	cmp.w	r8, #0
    ab54:	d106      	bne.n	ab64 <disconnected_cb+0x70>
		ccc->value = 0U;
		if (ccc->cfg_changed) {
    ab56:	69ab      	ldr	r3, [r5, #24]
		ccc->value = 0U;
    ab58:	f8a5 8014 	strh.w	r8, [r5, #20]
		if (ccc->cfg_changed) {
    ab5c:	b113      	cbz	r3, ab64 <disconnected_cb+0x70>
			ccc->cfg_changed(attr, ccc->value);
    ab5e:	4641      	mov	r1, r8
    ab60:	4638      	mov	r0, r7
    ab62:	4798      	blx	r3

		BT_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
    ab64:	2001      	movs	r0, #1
    ab66:	b003      	add	sp, #12
    ab68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    ab6c:	7a30      	ldrb	r0, [r6, #8]
    ab6e:	4649      	mov	r1, r9
    ab70:	f015 ff3d 	bl	209ee <bt_addr_le_is_bonded>
    ab74:	b988      	cbnz	r0, ab9a <disconnected_cb+0xa6>
				if (ccc == &sc_ccc) {
    ab76:	455d      	cmp	r5, fp
    ab78:	d102      	bne.n	ab80 <disconnected_cb+0x8c>
					sc_clear(conn);
    ab7a:	4630      	mov	r0, r6
    ab7c:	f016 ffb2 	bl	21ae4 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    ab80:	2200      	movs	r2, #0
    ab82:	4669      	mov	r1, sp
    ab84:	4620      	mov	r0, r4
    ab86:	9200      	str	r2, [sp, #0]
    ab88:	f8cd 2003 	str.w	r2, [sp, #3]
    ab8c:	f016 ff32 	bl	219f4 <bt_addr_le_copy>
	cfg->id = 0U;
    ab90:	f804 2c01 	strb.w	r2, [r4, #-1]
	cfg->value = 0U;
    ab94:	f8a4 2007 	strh.w	r2, [r4, #7]
}
    ab98:	e7d7      	b.n	ab4a <disconnected_cb+0x56>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    ab9a:	4649      	mov	r1, r9
    ab9c:	4620      	mov	r0, r4
    ab9e:	f016 ff29 	bl	219f4 <bt_addr_le_copy>
    aba2:	e7d2      	b.n	ab4a <disconnected_cb+0x56>
    aba4:	0000a8b9 	.word	0x0000a8b9
    aba8:	20000274 	.word	0x20000274

0000abac <bt_gatt_init>:
{
    abac:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    abae:	4b1f      	ldr	r3, [pc, #124]	; (ac2c <bt_gatt_init+0x80>)
    abb0:	f3bf 8f5b 	dmb	ish
    abb4:	2201      	movs	r2, #1
    abb6:	e853 1f00 	ldrex	r1, [r3]
    abba:	2900      	cmp	r1, #0
    abbc:	d103      	bne.n	abc6 <bt_gatt_init+0x1a>
    abbe:	e843 2000 	strex	r0, r2, [r3]
    abc2:	2800      	cmp	r0, #0
    abc4:	d1f7      	bne.n	abb6 <bt_gatt_init+0xa>
    abc6:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
    abca:	d12d      	bne.n	ac28 <bt_gatt_init+0x7c>
    abcc:	f3bf 8f5b 	dmb	ish
    abd0:	4b17      	ldr	r3, [pc, #92]	; (ac30 <bt_gatt_init+0x84>)
    abd2:	e853 1f00 	ldrex	r1, [r3]
    abd6:	2900      	cmp	r1, #0
    abd8:	d103      	bne.n	abe2 <bt_gatt_init+0x36>
    abda:	e843 2000 	strex	r0, r2, [r3]
    abde:	2800      	cmp	r0, #0
    abe0:	d1f7      	bne.n	abd2 <bt_gatt_init+0x26>
    abe2:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
    abe6:	d108      	bne.n	abfa <bt_gatt_init+0x4e>
    abe8:	4a12      	ldr	r2, [pc, #72]	; (ac34 <bt_gatt_init+0x88>)
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    abea:	4913      	ldr	r1, [pc, #76]	; (ac38 <bt_gatt_init+0x8c>)
    abec:	8813      	ldrh	r3, [r2, #0]
    abee:	4c13      	ldr	r4, [pc, #76]	; (ac3c <bt_gatt_init+0x90>)
	if (!atomic_cas(&service_init, 0, 1)) {
    abf0:	2000      	movs	r0, #0
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    abf2:	42a1      	cmp	r1, r4
    abf4:	d312      	bcc.n	ac1c <bt_gatt_init+0x70>
    abf6:	b100      	cbz	r0, abfa <bt_gatt_init+0x4e>
    abf8:	8013      	strh	r3, [r2, #0]
	k_work_init_delayable(&work->work, handler);
    abfa:	4911      	ldr	r1, [pc, #68]	; (ac40 <bt_gatt_init+0x94>)
    abfc:	4811      	ldr	r0, [pc, #68]	; (ac44 <bt_gatt_init+0x98>)
    abfe:	f018 fb14 	bl	2322a <k_work_init_delayable>
	return k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
    ac02:	4910      	ldr	r1, [pc, #64]	; (ac44 <bt_gatt_init+0x98>)
    ac04:	4810      	ldr	r0, [pc, #64]	; (ac48 <bt_gatt_init+0x9c>)
    ac06:	f44f 72a4 	mov.w	r2, #328	; 0x148
    ac0a:	2300      	movs	r3, #0
    ac0c:	f012 fffc 	bl	1dc08 <k_work_reschedule_for_queue>
}
    ac10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&work->work, handler);
    ac14:	490d      	ldr	r1, [pc, #52]	; (ac4c <bt_gatt_init+0xa0>)
    ac16:	480e      	ldr	r0, [pc, #56]	; (ac50 <bt_gatt_init+0xa4>)
    ac18:	f018 bb07 	b.w	2322a <k_work_init_delayable>
		last_static_handle += svc->attr_count;
    ac1c:	6848      	ldr	r0, [r1, #4]
    ac1e:	4403      	add	r3, r0
    ac20:	b29b      	uxth	r3, r3
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    ac22:	3108      	adds	r1, #8
    ac24:	2001      	movs	r0, #1
    ac26:	e7e4      	b.n	abf2 <bt_gatt_init+0x46>
}
    ac28:	bd10      	pop	{r4, pc}
    ac2a:	bf00      	nop
    ac2c:	20001688 	.word	0x20001688
    ac30:	200016a4 	.word	0x200016a4
    ac34:	20002c1c 	.word	0x20002c1c
    ac38:	0002391c 	.word	0x0002391c
    ac3c:	0002393c 	.word	0x0002393c
    ac40:	00021cb3 	.word	0x00021cb3
    ac44:	20000d08 	.word	0x20000d08
    ac48:	20001390 	.word	0x20001390
    ac4c:	0000afd9 	.word	0x0000afd9
    ac50:	20000d58 	.word	0x20000d58

0000ac54 <bt_gatt_attr_get_handle>:
{
    ac54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
    ac58:	4603      	mov	r3, r0
    ac5a:	b148      	cbz	r0, ac70 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
    ac5c:	8a00      	ldrh	r0, [r0, #16]
    ac5e:	b938      	cbnz	r0, ac70 <bt_gatt_attr_get_handle+0x1c>
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    ac60:	4912      	ldr	r1, [pc, #72]	; (acac <bt_gatt_attr_get_handle+0x58>)
    ac62:	f8df e04c 	ldr.w	lr, [pc, #76]	; acb0 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
    ac66:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    ac68:	f04f 0c14 	mov.w	ip, #20
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    ac6c:	4571      	cmp	r1, lr
    ac6e:	d301      	bcc.n	ac74 <bt_gatt_attr_get_handle+0x20>
}
    ac70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((attr < &static_svc->attrs[0]) ||
    ac74:	e9d1 7600 	ldrd	r7, r6, [r1]
    ac78:	42bb      	cmp	r3, r7
    ac7a:	d304      	bcc.n	ac86 <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    ac7c:	fb0c 7206 	mla	r2, ip, r6, r7
    ac80:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
    ac82:	4293      	cmp	r3, r2
    ac84:	d90e      	bls.n	aca4 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
    ac86:	19a2      	adds	r2, r4, r6
    ac88:	b292      	uxth	r2, r2
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    ac8a:	3108      	adds	r1, #8
    ac8c:	4614      	mov	r4, r2
    ac8e:	e7ed      	b.n	ac6c <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
    ac90:	fb0c 7805 	mla	r8, ip, r5, r7
    ac94:	4543      	cmp	r3, r8
    ac96:	d007      	beq.n	aca8 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    ac98:	3501      	adds	r5, #1
    ac9a:	1962      	adds	r2, r4, r5
    ac9c:	42b5      	cmp	r5, r6
    ac9e:	b292      	uxth	r2, r2
    aca0:	d1f6      	bne.n	ac90 <bt_gatt_attr_get_handle+0x3c>
    aca2:	e7f2      	b.n	ac8a <bt_gatt_attr_get_handle+0x36>
    aca4:	2500      	movs	r5, #0
    aca6:	e7f8      	b.n	ac9a <bt_gatt_attr_get_handle+0x46>
    aca8:	4610      	mov	r0, r2
    acaa:	e7e1      	b.n	ac70 <bt_gatt_attr_get_handle+0x1c>
    acac:	0002391c 	.word	0x0002391c
    acb0:	0002393c 	.word	0x0002393c

0000acb4 <bt_gatt_foreach_attr_type>:
{
    acb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    acb8:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
    acbc:	9100      	str	r1, [sp, #0]
    acbe:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
    acc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    acc4:	2d00      	cmp	r5, #0
    acc6:	bf08      	it	eq
    acc8:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
    acca:	4b24      	ldr	r3, [pc, #144]	; (ad5c <bt_gatt_foreach_attr_type+0xa8>)
    accc:	881b      	ldrh	r3, [r3, #0]
    acce:	4283      	cmp	r3, r0
{
    acd0:	4607      	mov	r7, r0
    acd2:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
    acd4:	d23c      	bcs.n	ad50 <bt_gatt_foreach_attr_type+0x9c>
}
    acd6:	b003      	add	sp, #12
    acd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
    acdc:	6873      	ldr	r3, [r6, #4]
    acde:	4423      	add	r3, r4
    ace0:	42bb      	cmp	r3, r7
    ace2:	d232      	bcs.n	ad4a <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
    ace4:	b29c      	uxth	r4, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    ace6:	3608      	adds	r6, #8
    ace8:	4b1d      	ldr	r3, [pc, #116]	; (ad60 <bt_gatt_foreach_attr_type+0xac>)
    acea:	429e      	cmp	r6, r3
    acec:	d3f6      	bcc.n	acdc <bt_gatt_foreach_attr_type+0x28>
    acee:	e7f2      	b.n	acd6 <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    acf0:	5889      	ldr	r1, [r1, r2]
    acf2:	9301      	str	r3, [sp, #4]
    acf4:	4640      	mov	r0, r8
    acf6:	f015 fd15 	bl	20724 <bt_uuid_cmp>
    acfa:	9b01      	ldr	r3, [sp, #4]
    acfc:	b190      	cbz	r0, ad24 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    acfe:	3401      	adds	r4, #1
    ad00:	f10a 0a01 	add.w	sl, sl, #1
    ad04:	b2a4      	uxth	r4, r4
    ad06:	6873      	ldr	r3, [r6, #4]
    ad08:	4553      	cmp	r3, sl
    ad0a:	d9ec      	bls.n	ace6 <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
    ad0c:	9b00      	ldr	r3, [sp, #0]
    ad0e:	429c      	cmp	r4, r3
    ad10:	d8e1      	bhi.n	acd6 <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
    ad12:	42bc      	cmp	r4, r7
    ad14:	d3f3      	bcc.n	acfe <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    ad16:	6831      	ldr	r1, [r6, #0]
    ad18:	fb0b f20a 	mul.w	r2, fp, sl
    ad1c:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    ad1e:	f1b8 0f00 	cmp.w	r8, #0
    ad22:	d1e5      	bne.n	acf0 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
    ad24:	f1b9 0f00 	cmp.w	r9, #0
    ad28:	d10b      	bne.n	ad42 <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
    ad2a:	3d01      	subs	r5, #1
    ad2c:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
    ad2e:	4618      	mov	r0, r3
    ad30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    ad32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ad34:	4621      	mov	r1, r4
    ad36:	4798      	blx	r3
	if (!*num_matches) {
    ad38:	2d00      	cmp	r5, #0
    ad3a:	d0cc      	beq.n	acd6 <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    ad3c:	2800      	cmp	r0, #0
    ad3e:	d1de      	bne.n	acfe <bt_gatt_foreach_attr_type+0x4a>
    ad40:	e7c9      	b.n	acd6 <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
    ad42:	68da      	ldr	r2, [r3, #12]
    ad44:	4591      	cmp	r9, r2
    ad46:	d1da      	bne.n	acfe <bt_gatt_foreach_attr_type+0x4a>
    ad48:	e7ef      	b.n	ad2a <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    ad4a:	f04f 0a00 	mov.w	sl, #0
    ad4e:	e7da      	b.n	ad06 <bt_gatt_foreach_attr_type+0x52>
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    ad50:	4e04      	ldr	r6, [pc, #16]	; (ad64 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
    ad52:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
    ad54:	f04f 0b14 	mov.w	fp, #20
    ad58:	e7c6      	b.n	ace8 <bt_gatt_foreach_attr_type+0x34>
    ad5a:	bf00      	nop
    ad5c:	20002c1c 	.word	0x20002c1c
    ad60:	0002393c 	.word	0x0002393c
    ad64:	0002391c 	.word	0x0002391c

0000ad68 <db_hash_gen.isra.0>:
static void db_hash_gen(bool store)
    ad68:	b510      	push	{r4, lr}
    ad6a:	b0c8      	sub	sp, #288	; 0x120
	uint8_t key[16] = {};
    ad6c:	2300      	movs	r3, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    ad6e:	aa1c      	add	r2, sp, #112	; 0x70
    ad70:	4669      	mov	r1, sp
    ad72:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
    ad74:	e9cd 3300 	strd	r3, r3, [sp]
    ad78:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    ad7c:	f015 fb4a 	bl	20414 <tc_cmac_setup>
    ad80:	b958      	cbnz	r0, ad9a <db_hash_gen.isra.0+0x32>
    ad82:	4917      	ldr	r1, [pc, #92]	; (ade0 <db_hash_gen.isra.0+0x78>)
    ad84:	4b17      	ldr	r3, [pc, #92]	; (ade4 <db_hash_gen.isra.0+0x7c>)
		BT_ERR("Unable to setup AES CMAC");
    ad86:	4818      	ldr	r0, [pc, #96]	; (ade8 <db_hash_gen.isra.0+0x80>)
    ad88:	1ac9      	subs	r1, r1, r3
    ad8a:	08c9      	lsrs	r1, r1, #3
    ad8c:	0189      	lsls	r1, r1, #6
    ad8e:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Unable to calculate hash");
    ad92:	f013 fed1 	bl	1eb38 <log_0>
}
    ad96:	b048      	add	sp, #288	; 0x120
    ad98:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
    ad9a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ad9e:	2001      	movs	r0, #1
    ada0:	4a12      	ldr	r2, [pc, #72]	; (adec <db_hash_gen.isra.0+0x84>)
    ada2:	ab04      	add	r3, sp, #16
    ada4:	f016 ff7a 	bl	21c9c <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
    ada8:	4811      	ldr	r0, [pc, #68]	; (adf0 <db_hash_gen.isra.0+0x88>)
    adaa:	a904      	add	r1, sp, #16
    adac:	f015 fbc9 	bl	20542 <tc_cmac_final>
    adb0:	b940      	cbnz	r0, adc4 <db_hash_gen.isra.0+0x5c>
    adb2:	490b      	ldr	r1, [pc, #44]	; (ade0 <db_hash_gen.isra.0+0x78>)
    adb4:	4b0b      	ldr	r3, [pc, #44]	; (ade4 <db_hash_gen.isra.0+0x7c>)
		BT_ERR("Unable to calculate hash");
    adb6:	480f      	ldr	r0, [pc, #60]	; (adf4 <db_hash_gen.isra.0+0x8c>)
    adb8:	1ac9      	subs	r1, r1, r3
    adba:	08c9      	lsrs	r1, r1, #3
    adbc:	0189      	lsls	r1, r1, #6
    adbe:	f041 0101 	orr.w	r1, r1, #1
    adc2:	e7e6      	b.n	ad92 <db_hash_gen.isra.0+0x2a>
    adc4:	4b0a      	ldr	r3, [pc, #40]	; (adf0 <db_hash_gen.isra.0+0x88>)
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
    adc6:	2208      	movs	r2, #8
    adc8:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
    adcc:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
    adce:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    add2:	f803 4b01 	strb.w	r4, [r3], #1
	for (i = 0; i < (length/2); i++) {
    add6:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
    add8:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
    adda:	d1f7      	bne.n	adcc <db_hash_gen.isra.0+0x64>
    addc:	e7db      	b.n	ad96 <db_hash_gen.isra.0+0x2e>
    adde:	bf00      	nop
    ade0:	00023a0c 	.word	0x00023a0c
    ade4:	0002393c 	.word	0x0002393c
    ade8:	00026dda 	.word	0x00026dda
    adec:	0002192d 	.word	0x0002192d
    adf0:	200031a8 	.word	0x200031a8
    adf4:	00026df3 	.word	0x00026df3

0000adf8 <bt_gatt_notify_cb>:
{
    adf8:	b530      	push	{r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    adfa:	4b37      	ldr	r3, [pc, #220]	; (aed8 <bt_gatt_notify_cb+0xe0>)
    adfc:	f3bf 8f5b 	dmb	ish
    ae00:	681b      	ldr	r3, [r3, #0]
    ae02:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    ae06:	079a      	lsls	r2, r3, #30
{
    ae08:	b08b      	sub	sp, #44	; 0x2c
    ae0a:	4604      	mov	r4, r0
    ae0c:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    ae0e:	d55d      	bpl.n	aecc <bt_gatt_notify_cb+0xd4>
	data.attr = params->attr;
    ae10:	6848      	ldr	r0, [r1, #4]
    ae12:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
    ae14:	b114      	cbz	r4, ae1c <bt_gatt_notify_cb+0x24>
    ae16:	7b63      	ldrb	r3, [r4, #13]
    ae18:	2b07      	cmp	r3, #7
    ae1a:	d15a      	bne.n	aed2 <bt_gatt_notify_cb+0xda>
	data.handle = bt_gatt_attr_get_handle(data.attr);
    ae1c:	f7ff ff1a 	bl	ac54 <bt_gatt_attr_get_handle>
    ae20:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
    ae24:	b918      	cbnz	r0, ae2e <bt_gatt_notify_cb+0x36>
		return -ENOENT;
    ae26:	f06f 0001 	mvn.w	r0, #1
}
    ae2a:	b00b      	add	sp, #44	; 0x2c
    ae2c:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
    ae2e:	682a      	ldr	r2, [r5, #0]
    ae30:	b9aa      	cbnz	r2, ae5e <bt_gatt_notify_cb+0x66>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    ae32:	9b05      	ldr	r3, [sp, #20]
    ae34:	6818      	ldr	r0, [r3, #0]
    ae36:	2300      	movs	r3, #0
    ae38:	f88d 3010 	strb.w	r3, [sp, #16]
    ae3c:	a904      	add	r1, sp, #16
    ae3e:	f642 0303 	movw	r3, #10243	; 0x2803
    ae42:	f8ad 3012 	strh.w	r3, [sp, #18]
    ae46:	f015 fc6d 	bl	20724 <bt_uuid_cmp>
    ae4a:	b1c0      	cbz	r0, ae7e <bt_gatt_notify_cb+0x86>
	if (conn) {
    ae4c:	f8bd 0018 	ldrh.w	r0, [sp, #24]
    ae50:	b314      	cbz	r4, ae98 <bt_gatt_notify_cb+0xa0>
		return gatt_notify(conn, data.handle, params);
    ae52:	4601      	mov	r1, r0
    ae54:	462a      	mov	r2, r5
    ae56:	4620      	mov	r0, r4
    ae58:	f7ff fd98 	bl	a98c <gatt_notify>
    ae5c:	e7e5      	b.n	ae2a <bt_gatt_notify_cb+0x32>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    ae5e:	a905      	add	r1, sp, #20
    ae60:	9102      	str	r1, [sp, #8]
    ae62:	491e      	ldr	r1, [pc, #120]	; (aedc <bt_gatt_notify_cb+0xe4>)
    ae64:	9101      	str	r1, [sp, #4]
    ae66:	2101      	movs	r1, #1
	found->attr = NULL;
    ae68:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    ae6a:	9100      	str	r1, [sp, #0]
    ae6c:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    ae70:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    ae72:	f7ff ff1f 	bl	acb4 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    ae76:	9b05      	ldr	r3, [sp, #20]
    ae78:	2b00      	cmp	r3, #0
    ae7a:	d1da      	bne.n	ae32 <bt_gatt_notify_cb+0x3a>
    ae7c:	e7d3      	b.n	ae26 <bt_gatt_notify_cb+0x2e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    ae7e:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
    ae80:	68c3      	ldr	r3, [r0, #12]
    ae82:	799b      	ldrb	r3, [r3, #6]
    ae84:	06db      	lsls	r3, r3, #27
    ae86:	d402      	bmi.n	ae8e <bt_gatt_notify_cb+0x96>
			return -EINVAL;
    ae88:	f06f 0015 	mvn.w	r0, #21
    ae8c:	e7cd      	b.n	ae2a <bt_gatt_notify_cb+0x32>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    ae8e:	f016 febe 	bl	21c0e <bt_gatt_attr_value_handle>
    ae92:	f8ad 0018 	strh.w	r0, [sp, #24]
    ae96:	e7d9      	b.n	ae4c <bt_gatt_notify_cb+0x54>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    ae98:	f642 1202 	movw	r2, #10498	; 0x2902
    ae9c:	f8ad 2012 	strh.w	r2, [sp, #18]
    aea0:	aa05      	add	r2, sp, #20
	data.err = -ENOTCONN;
    aea2:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    aea6:	9202      	str	r2, [sp, #8]
    aea8:	4a0d      	ldr	r2, [pc, #52]	; (aee0 <bt_gatt_notify_cb+0xe8>)
	data.err = -ENOTCONN;
    aeaa:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
    aeac:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    aeae:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
    aeb2:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    aeb6:	aa04      	add	r2, sp, #16
    aeb8:	4623      	mov	r3, r4
    aeba:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
    aebe:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    aec0:	f88d 4010 	strb.w	r4, [sp, #16]
    aec4:	f7ff fef6 	bl	acb4 <bt_gatt_foreach_attr_type>
	return data.err;
    aec8:	9807      	ldr	r0, [sp, #28]
    aeca:	e7ae      	b.n	ae2a <bt_gatt_notify_cb+0x32>
		return -EAGAIN;
    aecc:	f06f 000a 	mvn.w	r0, #10
    aed0:	e7ab      	b.n	ae2a <bt_gatt_notify_cb+0x32>
		return -ENOTCONN;
    aed2:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    aed6:	e7a8      	b.n	ae2a <bt_gatt_notify_cb+0x32>
    aed8:	20000098 	.word	0x20000098
    aedc:	00021925 	.word	0x00021925
    aee0:	0000aa01 	.word	0x0000aa01

0000aee4 <bt_gatt_indicate>:
{
    aee4:	b530      	push	{r4, r5, lr}
    aee6:	4b39      	ldr	r3, [pc, #228]	; (afcc <bt_gatt_indicate+0xe8>)
    aee8:	f3bf 8f5b 	dmb	ish
    aeec:	681b      	ldr	r3, [r3, #0]
    aeee:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    aef2:	079a      	lsls	r2, r3, #30
{
    aef4:	b08b      	sub	sp, #44	; 0x2c
    aef6:	4604      	mov	r4, r0
    aef8:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    aefa:	d561      	bpl.n	afc0 <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
    aefc:	6848      	ldr	r0, [r1, #4]
    aefe:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
    af00:	b114      	cbz	r4, af08 <bt_gatt_indicate+0x24>
    af02:	7b63      	ldrb	r3, [r4, #13]
    af04:	2b07      	cmp	r3, #7
    af06:	d15e      	bne.n	afc6 <bt_gatt_indicate+0xe2>
	data.handle = bt_gatt_attr_get_handle(data.attr);
    af08:	f7ff fea4 	bl	ac54 <bt_gatt_attr_get_handle>
    af0c:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
    af10:	b918      	cbnz	r0, af1a <bt_gatt_indicate+0x36>
		return -ENOENT;
    af12:	f06f 0001 	mvn.w	r0, #1
}
    af16:	b00b      	add	sp, #44	; 0x2c
    af18:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
    af1a:	682a      	ldr	r2, [r5, #0]
    af1c:	b9ba      	cbnz	r2, af4e <bt_gatt_indicate+0x6a>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    af1e:	9b05      	ldr	r3, [sp, #20]
    af20:	6818      	ldr	r0, [r3, #0]
    af22:	2300      	movs	r3, #0
    af24:	f88d 3010 	strb.w	r3, [sp, #16]
    af28:	a904      	add	r1, sp, #16
    af2a:	f642 0303 	movw	r3, #10243	; 0x2803
    af2e:	f8ad 3012 	strh.w	r3, [sp, #18]
    af32:	f015 fbf7 	bl	20724 <bt_uuid_cmp>
    af36:	b1d0      	cbz	r0, af6e <bt_gatt_indicate+0x8a>
	if (conn) {
    af38:	f8bd 0018 	ldrh.w	r0, [sp, #24]
    af3c:	b324      	cbz	r4, af88 <bt_gatt_indicate+0xa4>
		params->_ref = 1;
    af3e:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
    af40:	4601      	mov	r1, r0
		params->_ref = 1;
    af42:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
    af44:	462a      	mov	r2, r5
    af46:	4620      	mov	r0, r4
    af48:	f7ff fb3c 	bl	a5c4 <gatt_indicate>
    af4c:	e7e3      	b.n	af16 <bt_gatt_indicate+0x32>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    af4e:	a905      	add	r1, sp, #20
    af50:	9102      	str	r1, [sp, #8]
    af52:	491f      	ldr	r1, [pc, #124]	; (afd0 <bt_gatt_indicate+0xec>)
    af54:	9101      	str	r1, [sp, #4]
    af56:	2101      	movs	r1, #1
	found->attr = NULL;
    af58:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    af5a:	9100      	str	r1, [sp, #0]
    af5c:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    af60:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    af62:	f7ff fea7 	bl	acb4 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    af66:	9b05      	ldr	r3, [sp, #20]
    af68:	2b00      	cmp	r3, #0
    af6a:	d1d8      	bne.n	af1e <bt_gatt_indicate+0x3a>
    af6c:	e7d1      	b.n	af12 <bt_gatt_indicate+0x2e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    af6e:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    af70:	68c3      	ldr	r3, [r0, #12]
    af72:	799b      	ldrb	r3, [r3, #6]
    af74:	069b      	lsls	r3, r3, #26
    af76:	d402      	bmi.n	af7e <bt_gatt_indicate+0x9a>
			return -EINVAL;
    af78:	f06f 0015 	mvn.w	r0, #21
    af7c:	e7cb      	b.n	af16 <bt_gatt_indicate+0x32>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    af7e:	f016 fe46 	bl	21c0e <bt_gatt_attr_value_handle>
    af82:	f8ad 0018 	strh.w	r0, [sp, #24]
    af86:	e7d7      	b.n	af38 <bt_gatt_indicate+0x54>
	data.err = -ENOTCONN;
    af88:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    af8c:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
    af8e:	2302      	movs	r3, #2
    af90:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    af94:	f642 1302 	movw	r3, #10498	; 0x2902
    af98:	f8ad 3012 	strh.w	r3, [sp, #18]
    af9c:	ab05      	add	r3, sp, #20
    af9e:	9302      	str	r3, [sp, #8]
    afa0:	4b0c      	ldr	r3, [pc, #48]	; (afd4 <bt_gatt_indicate+0xf0>)
    afa2:	9301      	str	r3, [sp, #4]
    afa4:	2301      	movs	r3, #1
    afa6:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
    afa8:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    afaa:	4623      	mov	r3, r4
    afac:	aa04      	add	r2, sp, #16
    afae:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
    afb2:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    afb4:	f88d 4010 	strb.w	r4, [sp, #16]
    afb8:	f7ff fe7c 	bl	acb4 <bt_gatt_foreach_attr_type>
	return data.err;
    afbc:	9807      	ldr	r0, [sp, #28]
    afbe:	e7aa      	b.n	af16 <bt_gatt_indicate+0x32>
		return -EAGAIN;
    afc0:	f06f 000a 	mvn.w	r0, #10
    afc4:	e7a7      	b.n	af16 <bt_gatt_indicate+0x32>
		return -ENOTCONN;
    afc6:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    afca:	e7a4      	b.n	af16 <bt_gatt_indicate+0x32>
    afcc:	20000098 	.word	0x20000098
    afd0:	00021925 	.word	0x00021925
    afd4:	0000aa01 	.word	0x0000aa01

0000afd8 <sc_process>:
{
    afd8:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    afda:	f850 2c08 	ldr.w	r2, [r0, #-8]
    afde:	9201      	str	r2, [sp, #4]
{
    afe0:	4603      	mov	r3, r0
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    afe2:	f1a0 0120 	sub.w	r1, r0, #32
    afe6:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    afea:	f3bf 8f5b 	dmb	ish
    afee:	e854 2f00 	ldrex	r2, [r4]
    aff2:	f022 0201 	bic.w	r2, r2, #1
    aff6:	e844 2000 	strex	r0, r2, [r4]
    affa:	2800      	cmp	r0, #0
    affc:	d1f7      	bne.n	afee <sc_process+0x16>
    affe:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
    b002:	4a0d      	ldr	r2, [pc, #52]	; (b038 <sc_process+0x60>)
    b004:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
    b008:	4a0c      	ldr	r2, [pc, #48]	; (b03c <sc_process+0x64>)
    b00a:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
    b00e:	aa01      	add	r2, sp, #4
	sc->start = 0U;
    b010:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
    b012:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
    b016:	2204      	movs	r2, #4
	sc->start = 0U;
    b018:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
    b01c:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.len = sizeof(sc_range);
    b020:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    b024:	f7ff ff5e 	bl	aee4 <bt_gatt_indicate>
    b028:	b918      	cbnz	r0, b032 <sc_process+0x5a>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
    b02a:	2101      	movs	r1, #1
    b02c:	4620      	mov	r0, r4
    b02e:	f016 fcd3 	bl	219d8 <atomic_set_bit>
}
    b032:	b002      	add	sp, #8
    b034:	bd10      	pop	{r4, pc}
    b036:	bf00      	nop
    b038:	00024158 	.word	0x00024158
    b03c:	0000a859 	.word	0x0000a859

0000b040 <update_ccc>:
{
    b040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    b044:	6881      	ldr	r1, [r0, #8]
{
    b046:	4617      	mov	r7, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    b048:	4a3e      	ldr	r2, [pc, #248]	; (b144 <update_ccc+0x104>)
    b04a:	4291      	cmp	r1, r2
{
    b04c:	b085      	sub	sp, #20
    b04e:	4682      	mov	sl, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    b050:	d174      	bne.n	b13c <update_ccc+0xfc>
    b052:	4c3d      	ldr	r4, [pc, #244]	; (b148 <update_ccc+0x108>)
    b054:	493d      	ldr	r1, [pc, #244]	; (b14c <update_ccc+0x10c>)
	ccc = attr->user_data;
    b056:	f8d0 800c 	ldr.w	r8, [r0, #12]
	struct bt_conn *conn = data->conn;
    b05a:	683d      	ldr	r5, [r7, #0]
				BT_WARN("CCC %p not writable", attr);
    b05c:	f8df b104 	ldr.w	fp, [pc, #260]	; b164 <update_ccc+0x124>
    b060:	1a64      	subs	r4, r4, r1
    b062:	08e4      	lsrs	r4, r4, #3
    b064:	f108 0315 	add.w	r3, r8, #21
    b068:	ea4f 1984 	mov.w	r9, r4, lsl #6
    b06c:	f108 0601 	add.w	r6, r8, #1
    b070:	9300      	str	r3, [sp, #0]
    b072:	f049 0902 	orr.w	r9, r9, #2
		if (!cfg->value ||
    b076:	f8b6 2007 	ldrh.w	r2, [r6, #7]
    b07a:	b19a      	cbz	r2, b0a4 <update_ccc+0x64>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    b07c:	f816 1c01 	ldrb.w	r1, [r6, #-1]
    b080:	4632      	mov	r2, r6
    b082:	4628      	mov	r0, r5
    b084:	f015 ff17 	bl	20eb6 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
    b088:	b160      	cbz	r0, b0a4 <update_ccc+0x64>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
    b08a:	222a      	movs	r2, #42	; 0x2a
    b08c:	4651      	mov	r1, sl
    b08e:	4628      	mov	r0, r5
    b090:	f016 fe11 	bl	21cb6 <bt_gatt_check_perm>
		if (err) {
    b094:	b1d8      	cbz	r0, b0ce <update_ccc+0x8e>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
    b096:	2803      	cmp	r0, #3
    b098:	d109      	bne.n	b0ae <update_ccc+0x6e>
				BT_WARN("CCC %p not writable", attr);
    b09a:	464a      	mov	r2, r9
    b09c:	4651      	mov	r1, sl
    b09e:	4658      	mov	r0, fp
    b0a0:	f013 fd57 	bl	1eb52 <log_1>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    b0a4:	9b00      	ldr	r3, [sp, #0]
    b0a6:	360a      	adds	r6, #10
    b0a8:	429e      	cmp	r6, r3
    b0aa:	d047      	beq.n	b13c <update_ccc+0xfc>
    b0ac:	e7e3      	b.n	b076 <update_ccc+0x36>
				sec = BT_SECURITY_L3;
    b0ae:	2805      	cmp	r0, #5
    b0b0:	bf14      	ite	ne
    b0b2:	2202      	movne	r2, #2
    b0b4:	2203      	moveq	r2, #3
			    bt_conn_get_security(conn) < sec) {
    b0b6:	4628      	mov	r0, r5
				sec = BT_SECURITY_L3;
    b0b8:	9201      	str	r2, [sp, #4]
			    bt_conn_get_security(conn) < sec) {
    b0ba:	f015 fef1 	bl	20ea0 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
    b0be:	9a01      	ldr	r2, [sp, #4]
    b0c0:	4282      	cmp	r2, r0
    b0c2:	d904      	bls.n	b0ce <update_ccc+0x8e>
				if (data->sec < sec) {
    b0c4:	7939      	ldrb	r1, [r7, #4]
    b0c6:	4291      	cmp	r1, r2
    b0c8:	d2ec      	bcs.n	b0a4 <update_ccc+0x64>
					data->sec = sec;
    b0ca:	713a      	strb	r2, [r7, #4]
    b0cc:	e7ea      	b.n	b0a4 <update_ccc+0x64>
		gatt_ccc_changed(attr, ccc);
    b0ce:	4641      	mov	r1, r8
    b0d0:	4650      	mov	r0, sl
    b0d2:	f016 fc06 	bl	218e2 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
    b0d6:	4b1e      	ldr	r3, [pc, #120]	; (b150 <update_ccc+0x110>)
    b0d8:	4598      	cmp	r8, r3
    b0da:	d12f      	bne.n	b13c <update_ccc+0xfc>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
    b0dc:	7a28      	ldrb	r0, [r5, #8]
    b0de:	f105 0188 	add.w	r1, r5, #136	; 0x88
    b0e2:	f7ff fad9 	bl	a698 <find_sc_cfg>
	if (!cfg) {
    b0e6:	4606      	mov	r6, r0
    b0e8:	b340      	cbz	r0, b13c <update_ccc+0xfc>
	if (!(cfg->data.start || cfg->data.end)) {
    b0ea:	8902      	ldrh	r2, [r0, #8]
    b0ec:	8943      	ldrh	r3, [r0, #10]
    b0ee:	ea52 0103 	orrs.w	r1, r2, r3
    b0f2:	d023      	beq.n	b13c <update_ccc+0xfc>
	index = bt_conn_index(conn);
    b0f4:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
    b0f6:	f8ad 200c 	strh.w	r2, [sp, #12]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
    b0fa:	f8ad 300e 	strh.w	r3, [sp, #14]
	index = bt_conn_index(conn);
    b0fe:	f7fe f901 	bl	9304 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    b102:	4914      	ldr	r1, [pc, #80]	; (b154 <update_ccc+0x114>)
    b104:	4a14      	ldr	r2, [pc, #80]	; (b158 <update_ccc+0x118>)
    b106:	2318      	movs	r3, #24
    b108:	fb03 1300 	mla	r3, r3, r0, r1
    b10c:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
    b10e:	4a13      	ldr	r2, [pc, #76]	; (b15c <update_ccc+0x11c>)
    b110:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
    b112:	aa03      	add	r2, sp, #12
    b114:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
    b116:	2204      	movs	r2, #4
    b118:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    b11a:	b203      	sxth	r3, r0
    b11c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    b120:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    b124:	4628      	mov	r0, r5
    b126:	f7ff fedd 	bl	aee4 <bt_gatt_indicate>
    b12a:	b128      	cbz	r0, b138 <update_ccc+0xf8>
		BT_ERR("SC restore indication failed");
    b12c:	01a1      	lsls	r1, r4, #6
    b12e:	480c      	ldr	r0, [pc, #48]	; (b160 <update_ccc+0x120>)
    b130:	f041 0101 	orr.w	r1, r1, #1
    b134:	f013 fd00 	bl	1eb38 <log_0>
__ssp_bos_icheck3(memset, void *, int)
    b138:	2300      	movs	r3, #0
    b13a:	60b3      	str	r3, [r6, #8]
}
    b13c:	2001      	movs	r0, #1
    b13e:	b005      	add	sp, #20
    b140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b144:	0000a8b9 	.word	0x0000a8b9
    b148:	00023a0c 	.word	0x00023a0c
    b14c:	0002393c 	.word	0x0002393c
    b150:	20000274 	.word	0x20000274
    b154:	2000168c 	.word	0x2000168c
    b158:	00024158 	.word	0x00024158
    b15c:	00021b27 	.word	0x00021b27
    b160:	00026e20 	.word	0x00026e20
    b164:	00026e0c 	.word	0x00026e0c

0000b168 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
    b168:	b513      	push	{r0, r1, r4, lr}
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    b16a:	4a0b      	ldr	r2, [pc, #44]	; (b198 <bt_gatt_connected+0x30>)
	data.conn = conn;
    b16c:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    b16e:	f64f 71ff 	movw	r1, #65535	; 0xffff
{
    b172:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    b174:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
    b176:	2001      	movs	r0, #1
    b178:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    b17c:	f016 fd8e 	bl	21c9c <bt_gatt_foreach_attr>
	 * client prior to sending an indication or notification. If the client
	 * does not have an LTK indicating that the client has lost the bond,
	 * enabling encryption will fail.
	 */
	if (IS_ENABLED(CONFIG_BT_SMP) &&
	    bt_conn_get_security(conn) < data.sec) {
    b180:	4620      	mov	r0, r4
    b182:	f015 fe8d 	bl	20ea0 <bt_conn_get_security>
    b186:	f89d 1004 	ldrb.w	r1, [sp, #4]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    b18a:	4288      	cmp	r0, r1
    b18c:	d202      	bcs.n	b194 <bt_gatt_connected+0x2c>
		bt_conn_set_security(conn, data.sec);
    b18e:	4620      	mov	r0, r4
    b190:	f015 fe53 	bl	20e3a <bt_conn_set_security>
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	add_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}
    b194:	b002      	add	sp, #8
    b196:	bd10      	pop	{r4, pc}
    b198:	0000b041 	.word	0x0000b041

0000b19c <bt_gatt_encrypt_change>:

void bt_gatt_encrypt_change(struct bt_conn *conn)
{
    b19c:	b507      	push	{r0, r1, r2, lr}
	BT_DBG("conn %p", conn);

	data.conn = conn;
	data.sec = BT_SECURITY_L1;

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    b19e:	4a06      	ldr	r2, [pc, #24]	; (b1b8 <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
    b1a0:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    b1a2:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
    b1a4:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    b1a6:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
    b1aa:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    b1ae:	f016 fd75 	bl	21c9c <bt_gatt_foreach_attr>
}
    b1b2:	b003      	add	sp, #12
    b1b4:	f85d fb04 	ldr.w	pc, [sp], #4
    b1b8:	0000b041 	.word	0x0000b041

0000b1bc <db_hash_read>:
{
    b1bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b1c0:	4606      	mov	r6, r0
	return k_work_delayable_busy_get(dwork) != 0;
    b1c2:	480e      	ldr	r0, [pc, #56]	; (b1fc <db_hash_read+0x40>)
    b1c4:	f8bd 8018 	ldrh.w	r8, [sp, #24]
    b1c8:	4614      	mov	r4, r2
    b1ca:	461d      	mov	r5, r3
    b1cc:	f018 f839 	bl	23242 <k_work_delayable_busy_get>
    b1d0:	4607      	mov	r7, r0
	int rc = k_work_cancel_delayable(&work->work);
    b1d2:	480a      	ldr	r0, [pc, #40]	; (b1fc <db_hash_read+0x40>)
    b1d4:	f018 f849 	bl	2326a <k_work_cancel_delayable>
	if (pending) {
    b1d8:	b117      	cbz	r7, b1e0 <db_hash_read+0x24>
		return (rc == 0) ? 0 : -EINVAL;
    b1da:	b908      	cbnz	r0, b1e0 <db_hash_read+0x24>
		db_hash_gen(true);
    b1dc:	f7ff fdc4 	bl	ad68 <db_hash_gen.isra.0>
	bt_gatt_change_aware(conn, true);
    b1e0:	2101      	movs	r1, #1
    b1e2:	4630      	mov	r0, r6
    b1e4:	f016 fd92 	bl	21d0c <bt_gatt_change_aware>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
    b1e8:	2310      	movs	r3, #16
    b1ea:	9306      	str	r3, [sp, #24]
    b1ec:	4642      	mov	r2, r8
    b1ee:	4629      	mov	r1, r5
    b1f0:	4620      	mov	r0, r4
    b1f2:	4b03      	ldr	r3, [pc, #12]	; (b200 <db_hash_read+0x44>)
}
    b1f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
    b1f8:	f016 bc08 	b.w	21a0c <bt_gatt_attr_read.constprop.0>
    b1fc:	20000d08 	.word	0x20000d08
    b200:	200031a8 	.word	0x200031a8

0000b204 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
    b204:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    b206:	4603      	mov	r3, r0
    b208:	4a14      	ldr	r2, [pc, #80]	; (b25c <bt_gatt_disconnected+0x58>)
{
    b20a:	4605      	mov	r5, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    b20c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b210:	2001      	movs	r0, #1
    b212:	f016 fd43 	bl	21c9c <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
    b216:	4628      	mov	r0, r5
    b218:	f7ff fa98 	bl	a74c <find_cf_cfg>
	if (!cfg) {
    b21c:	4604      	mov	r4, r0
    b21e:	b1e0      	cbz	r0, b25a <bt_gatt_disconnected+0x56>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    b220:	f105 0688 	add.w	r6, r5, #136	; 0x88
    b224:	7a28      	ldrb	r0, [r5, #8]
    b226:	4631      	mov	r1, r6
    b228:	f015 fbe1 	bl	209ee <bt_addr_le_is_bonded>
    b22c:	b920      	cbnz	r0, b238 <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
    b22e:	4620      	mov	r0, r4
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
    b230:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
    b234:	f016 bc3e 	b.w	21ab4 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    b238:	1c60      	adds	r0, r4, #1
    b23a:	4631      	mov	r1, r6
    b23c:	340c      	adds	r4, #12
    b23e:	f016 fbd9 	bl	219f4 <bt_addr_le_copy>
    b242:	f3bf 8f5b 	dmb	ish
    b246:	e854 3f00 	ldrex	r3, [r4]
    b24a:	f023 0302 	bic.w	r3, r3, #2
    b24e:	e844 3200 	strex	r2, r3, [r4]
    b252:	2a00      	cmp	r2, #0
    b254:	d1f7      	bne.n	b246 <bt_gatt_disconnected+0x42>
    b256:	f3bf 8f5b 	dmb	ish
}
    b25a:	bd70      	pop	{r4, r5, r6, pc}
    b25c:	0000aaf5 	.word	0x0000aaf5

0000b260 <get_io_capa>:
	       BT_CMD_TEST(bt_dev.supported_commands, 34, 2);
}

static uint8_t get_io_capa(void)
{
	if (!bt_auth) {
    b260:	4b10      	ldr	r3, [pc, #64]	; (b2a4 <get_io_capa+0x44>)
    b262:	681b      	ldr	r3, [r3, #0]
    b264:	b1bb      	cbz	r3, b296 <get_io_capa+0x36>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    b266:	681a      	ldr	r2, [r3, #0]
    b268:	b142      	cbz	r2, b27c <get_io_capa+0x1c>
    b26a:	6859      	ldr	r1, [r3, #4]
    b26c:	b131      	cbz	r1, b27c <get_io_capa+0x1c>
    b26e:	6899      	ldr	r1, [r3, #8]
    b270:	b911      	cbnz	r1, b278 <get_io_capa+0x18>
	    (bt_auth->passkey_confirm || !sc_supported)) {
    b272:	490d      	ldr	r1, [pc, #52]	; (b2a8 <get_io_capa+0x48>)
    b274:	7809      	ldrb	r1, [r1, #0]
    b276:	b939      	cbnz	r1, b288 <get_io_capa+0x28>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    b278:	2004      	movs	r0, #4
    b27a:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
    b27c:	490a      	ldr	r1, [pc, #40]	; (b2a8 <get_io_capa+0x48>)
    b27e:	7809      	ldrb	r1, [r1, #0]
    b280:	b111      	cbz	r1, b288 <get_io_capa+0x28>
    b282:	b10a      	cbz	r2, b288 <get_io_capa+0x28>
    b284:	6899      	ldr	r1, [r3, #8]
    b286:	b941      	cbnz	r1, b29a <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
    b288:	685b      	ldr	r3, [r3, #4]
    b28a:	b943      	cbnz	r3, b29e <get_io_capa+0x3e>
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
    b28c:	2a00      	cmp	r2, #0
    b28e:	bf0c      	ite	eq
    b290:	2003      	moveq	r0, #3
    b292:	2000      	movne	r0, #0
    b294:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
    b296:	2003      	movs	r0, #3
    b298:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
    b29a:	2001      	movs	r0, #1
    b29c:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
    b29e:	2002      	movs	r0, #2
	}
}
    b2a0:	4770      	bx	lr
    b2a2:	bf00      	nop
    b2a4:	20001614 	.word	0x20001614
    b2a8:	200031b9 	.word	0x200031b9

0000b2ac <smp_dhkey_generate>:
}
#endif /* CONFIG_BT_PERIPHERAL */

static void bt_smp_dhkey_ready(const uint8_t *dhkey);
static uint8_t smp_dhkey_generate(struct bt_smp *smp)
{
    b2ac:	b538      	push	{r3, r4, r5, lr}
	int err;

	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
    b2ae:	f100 05c4 	add.w	r5, r0, #196	; 0xc4
{
    b2b2:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
    b2b4:	2108      	movs	r1, #8
    b2b6:	4628      	mov	r0, r5
    b2b8:	f016 fd66 	bl	21d88 <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
    b2bc:	490a      	ldr	r1, [pc, #40]	; (b2e8 <smp_dhkey_generate+0x3c>)
    b2be:	f204 1017 	addw	r0, r4, #279	; 0x117
    b2c2:	f7fd f9d3 	bl	866c <bt_dh_key_gen>
	if (err) {
    b2c6:	b170      	cbz	r0, b2e6 <smp_dhkey_generate+0x3a>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
    b2c8:	2108      	movs	r1, #8
    b2ca:	4628      	mov	r0, r5
    b2cc:	f016 fd82 	bl	21dd4 <atomic_clear_bit>
    b2d0:	4b06      	ldr	r3, [pc, #24]	; (b2ec <smp_dhkey_generate+0x40>)
    b2d2:	4907      	ldr	r1, [pc, #28]	; (b2f0 <smp_dhkey_generate+0x44>)

		BT_ERR("Failed to generate DHKey");
    b2d4:	4807      	ldr	r0, [pc, #28]	; (b2f4 <smp_dhkey_generate+0x48>)
    b2d6:	1ac9      	subs	r1, r1, r3
    b2d8:	08c9      	lsrs	r1, r1, #3
    b2da:	0189      	lsls	r1, r1, #6
    b2dc:	f041 0101 	orr.w	r1, r1, #1
    b2e0:	f013 fc2a 	bl	1eb38 <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
    b2e4:	2008      	movs	r0, #8
	}

	return 0;
}
    b2e6:	bd38      	pop	{r3, r4, r5, pc}
    b2e8:	00022413 	.word	0x00022413
    b2ec:	0002393c 	.word	0x0002393c
    b2f0:	00023a44 	.word	0x00023a44
    b2f4:	00026e4c 	.word	0x00026e4c

0000b2f8 <get_auth.isra.0>:
	if (sc_supported) {
    b2f8:	4b0c      	ldr	r3, [pc, #48]	; (b32c <get_auth.isra.0+0x34>)
    b2fa:	781b      	ldrb	r3, [r3, #0]
static uint8_t get_auth(struct bt_conn *conn, uint8_t auth)
    b2fc:	b510      	push	{r4, lr}
	if (sc_supported) {
    b2fe:	b17b      	cbz	r3, b320 <get_auth.isra.0+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
    b300:	f000 040f 	and.w	r4, r0, #15
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
    b304:	f7ff ffac 	bl	b260 <get_io_capa>
	if (bondable) {
    b308:	4b09      	ldr	r3, [pc, #36]	; (b330 <get_auth.isra.0+0x38>)
    b30a:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
    b30c:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
    b30e:	bf0c      	ite	eq
    b310:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
    b314:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
    b318:	b12b      	cbz	r3, b326 <get_auth.isra.0+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
    b31a:	f044 0001 	orr.w	r0, r4, #1
}
    b31e:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
    b320:	f000 0407 	and.w	r4, r0, #7
    b324:	e7ee      	b.n	b304 <get_auth.isra.0+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
    b326:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
    b32a:	e7f8      	b.n	b31e <get_auth.isra.0+0x26>
    b32c:	200031b9 	.word	0x200031b9
    b330:	200006ef 	.word	0x200006ef

0000b334 <smp_chan_get>:
{
    b334:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
    b336:	2106      	movs	r1, #6
    b338:	f015 ff14 	bl	21164 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    b33c:	4604      	mov	r4, r0
    b33e:	b948      	cbnz	r0, b354 <smp_chan_get+0x20>
    b340:	4905      	ldr	r1, [pc, #20]	; (b358 <smp_chan_get+0x24>)
    b342:	4b06      	ldr	r3, [pc, #24]	; (b35c <smp_chan_get+0x28>)
		BT_ERR("Unable to find SMP channel");
    b344:	4806      	ldr	r0, [pc, #24]	; (b360 <smp_chan_get+0x2c>)
    b346:	1ac9      	subs	r1, r1, r3
    b348:	08c9      	lsrs	r1, r1, #3
    b34a:	0189      	lsls	r1, r1, #6
    b34c:	f041 0101 	orr.w	r1, r1, #1
    b350:	f013 fbf2 	bl	1eb38 <log_0>
}
    b354:	4620      	mov	r0, r4
    b356:	bd10      	pop	{r4, pc}
    b358:	00023a44 	.word	0x00023a44
    b35c:	0002393c 	.word	0x0002393c
    b360:	00026e65 	.word	0x00026e65

0000b364 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
    b364:	4a0b      	ldr	r2, [pc, #44]	; (b394 <bt_smp_accept+0x30>)
{
    b366:	b508      	push	{r3, lr}
    b368:	4603      	mov	r3, r0
		if (smp->chan.chan.conn) {
    b36a:	6810      	ldr	r0, [r2, #0]
    b36c:	b918      	cbnz	r0, b376 <bt_smp_accept+0x12>
			continue;
		}

		smp->chan.chan.ops = &ops;
    b36e:	4b0a      	ldr	r3, [pc, #40]	; (b398 <bt_smp_accept+0x34>)
    b370:	6053      	str	r3, [r2, #4]

		*chan = &smp->chan.chan;
    b372:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
    b374:	bd08      	pop	{r3, pc}
    b376:	4909      	ldr	r1, [pc, #36]	; (b39c <bt_smp_accept+0x38>)
    b378:	4a09      	ldr	r2, [pc, #36]	; (b3a0 <bt_smp_accept+0x3c>)
	BT_ERR("No available SMP context for conn %p", conn);
    b37a:	480a      	ldr	r0, [pc, #40]	; (b3a4 <bt_smp_accept+0x40>)
    b37c:	1a52      	subs	r2, r2, r1
    b37e:	08d2      	lsrs	r2, r2, #3
    b380:	0192      	lsls	r2, r2, #6
    b382:	f042 0201 	orr.w	r2, r2, #1
    b386:	4619      	mov	r1, r3
    b388:	f013 fbe3 	bl	1eb52 <log_1>
	return -ENOMEM;
    b38c:	f06f 000b 	mvn.w	r0, #11
    b390:	e7f0      	b.n	b374 <bt_smp_accept+0x10>
    b392:	bf00      	nop
    b394:	20000d90 	.word	0x20000d90
    b398:	000242d4 	.word	0x000242d4
    b39c:	0002393c 	.word	0x0002393c
    b3a0:	00023a44 	.word	0x00023a44
    b3a4:	00026e80 	.word	0x00026e80

0000b3a8 <smp_init>:
{
    b3a8:	b538      	push	{r3, r4, r5, lr}
	(void)memset((uint8_t *)smp + sizeof(smp->chan), 0,
    b3aa:	f100 05c0 	add.w	r5, r0, #192	; 0xc0
{
    b3ae:	4604      	mov	r4, r0
    b3b0:	22f0      	movs	r2, #240	; 0xf0
    b3b2:	2100      	movs	r1, #0
    b3b4:	4628      	mov	r0, r5
    b3b6:	f018 f962 	bl	2367e <memset>
	if (bt_rand(smp->prnd, 16)) {
    b3ba:	f104 00e7 	add.w	r0, r4, #231	; 0xe7
    b3be:	2110      	movs	r1, #16
    b3c0:	f004 fb12 	bl	f9e8 <bt_rand>
    b3c4:	4604      	mov	r4, r0
    b3c6:	b948      	cbnz	r0, b3dc <smp_init+0x34>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    b3c8:	2105      	movs	r1, #5
    b3ca:	4628      	mov	r0, r5
    b3cc:	f016 fcdc 	bl	21d88 <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
    b3d0:	f7fd f93c 	bl	864c <bt_pub_key_get>
    b3d4:	4b02      	ldr	r3, [pc, #8]	; (b3e0 <smp_init+0x38>)
    b3d6:	6018      	str	r0, [r3, #0]
}
    b3d8:	4620      	mov	r0, r4
    b3da:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    b3dc:	2408      	movs	r4, #8
    b3de:	e7fb      	b.n	b3d8 <smp_init+0x30>
    b3e0:	200016a8 	.word	0x200016a8

0000b3e4 <smp_send.isra.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
    b3e4:	b513      	push	{r0, r1, r4, lr}
    b3e6:	4613      	mov	r3, r2
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
    b3e8:	2200      	movs	r2, #0
    b3ea:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
    b3ec:	4604      	mov	r4, r0
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
    b3ee:	460a      	mov	r2, r1
    b3f0:	6800      	ldr	r0, [r0, #0]
    b3f2:	2106      	movs	r1, #6
    b3f4:	f015 fe8d 	bl	21112 <bt_l2cap_send_cb>
	return k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
    b3f8:	4805      	ldr	r0, [pc, #20]	; (b410 <smp_send.isra.0+0x2c>)
    b3fa:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    b3fe:	2300      	movs	r3, #0
    b400:	f504 71d8 	add.w	r1, r4, #432	; 0x1b0
}
    b404:	b002      	add	sp, #8
    b406:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b40a:	f012 bbfd 	b.w	1dc08 <k_work_reschedule_for_queue>
    b40e:	bf00      	nop
    b410:	20001390 	.word	0x20001390

0000b414 <smp_find>:
{
    b414:	4601      	mov	r1, r0
    b416:	b508      	push	{r3, lr}
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
    b418:	4803      	ldr	r0, [pc, #12]	; (b428 <smp_find+0x14>)
    b41a:	f016 fd92 	bl	21f42 <atomic_test_bit>
    b41e:	2800      	cmp	r0, #0
}
    b420:	4802      	ldr	r0, [pc, #8]	; (b42c <smp_find+0x18>)
    b422:	bf08      	it	eq
    b424:	2000      	moveq	r0, #0
    b426:	bd08      	pop	{r3, pc}
    b428:	20000e54 	.word	0x20000e54
    b42c:	20000d90 	.word	0x20000d90

0000b430 <compute_and_check_and_send_slave_dhcheck>:
{
    b430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	(void)memset(r, 0, sizeof(r));
    b434:	2210      	movs	r2, #16
{
    b436:	b0a2      	sub	sp, #136	; 0x88
    b438:	4604      	mov	r4, r0
	(void)memset(r, 0, sizeof(r));
    b43a:	2100      	movs	r1, #0
    b43c:	eb0d 0002 	add.w	r0, sp, r2
    b440:	f018 f91d 	bl	2367e <memset>
	switch (smp->method) {
    b444:	f894 10c8 	ldrb.w	r1, [r4, #200]	; 0xc8
    b448:	2905      	cmp	r1, #5
    b44a:	f200 809d 	bhi.w	b588 <compute_and_check_and_send_slave_dhcheck+0x158>
    b44e:	e8df f001 	tbb	[pc, r1]
    b452:	0306      	.short	0x0306
    b454:	8a9b0603 	.word	0x8a9b0603
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    b458:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
    b45c:	9304      	str	r3, [sp, #16]
	uint8_t m[53] = { 0x00, /* counter */
    b45e:	4b85      	ldr	r3, [pc, #532]	; (b674 <compute_and_check_and_send_slave_dhcheck+0x244>)
		   &smp->chan.chan.conn->le.init_addr,
    b460:	f8d4 a000 	ldr.w	sl, [r4]
	uint8_t m[53] = { 0x00, /* counter */
    b464:	aa14      	add	r2, sp, #80	; 0x50
    b466:	f103 0730 	add.w	r7, r3, #48	; 0x30
    b46a:	4615      	mov	r5, r2
    b46c:	6818      	ldr	r0, [r3, #0]
    b46e:	6859      	ldr	r1, [r3, #4]
    b470:	4616      	mov	r6, r2
    b472:	c603      	stmia	r6!, {r0, r1}
    b474:	3308      	adds	r3, #8
    b476:	42bb      	cmp	r3, r7
    b478:	4632      	mov	r2, r6
    b47a:	d1f7      	bne.n	b46c <compute_and_check_and_send_slave_dhcheck+0x3c>
    b47c:	6818      	ldr	r0, [r3, #0]
    b47e:	791b      	ldrb	r3, [r3, #4]
    b480:	6030      	str	r0, [r6, #0]
    b482:	7133      	strb	r3, [r6, #4]
	sys_memcpy_swap(ws, w, 32);
    b484:	ae0c      	add	r6, sp, #48	; 0x30
    b486:	2220      	movs	r2, #32
    b488:	f204 1157 	addw	r1, r4, #343	; 0x157
    b48c:	4630      	mov	r0, r6
    b48e:	f016 fc6f 	bl	21d70 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
    b492:	4879      	ldr	r0, [pc, #484]	; (b678 <compute_and_check_and_send_slave_dhcheck+0x248>)
    b494:	ab08      	add	r3, sp, #32
    b496:	2220      	movs	r2, #32
    b498:	4631      	mov	r1, r6
    b49a:	f016 fcb1 	bl	21e00 <bt_smp_aes_cmac>
	if (err) {
    b49e:	2800      	cmp	r0, #0
    b4a0:	f040 80df 	bne.w	b662 <compute_and_check_and_send_slave_dhcheck+0x232>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    b4a4:	f104 08f7 	add.w	r8, r4, #247	; 0xf7
	sys_memcpy_swap(m + 5, n1, 16);
    b4a8:	2210      	movs	r2, #16
    b4aa:	4641      	mov	r1, r8
    b4ac:	f10d 0055 	add.w	r0, sp, #85	; 0x55
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    b4b0:	f104 09e7 	add.w	r9, r4, #231	; 0xe7
	sys_memcpy_swap(m + 5, n1, 16);
    b4b4:	f016 fc5c 	bl	21d70 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
    b4b8:	2210      	movs	r2, #16
    b4ba:	4649      	mov	r1, r9
    b4bc:	f10d 0065 	add.w	r0, sp, #101	; 0x65
    b4c0:	f016 fc56 	bl	21d70 <sys_memcpy_swap>
	m[37] = a1->type;
    b4c4:	f89a 308f 	ldrb.w	r3, [sl, #143]	; 0x8f
    b4c8:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
	sys_memcpy_swap(m + 38, a1->a.val, 6);
    b4cc:	2206      	movs	r2, #6
    b4ce:	f10a 0190 	add.w	r1, sl, #144	; 0x90
    b4d2:	f10d 0076 	add.w	r0, sp, #118	; 0x76
    b4d6:	f016 fc4b 	bl	21d70 <sys_memcpy_swap>
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    b4da:	f204 1787 	addw	r7, r4, #391	; 0x187
	m[44] = a2->type;
    b4de:	f89a 3096 	ldrb.w	r3, [sl, #150]	; 0x96
    b4e2:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
    b4e6:	2206      	movs	r2, #6
    b4e8:	f10a 0197 	add.w	r1, sl, #151	; 0x97
    b4ec:	f10d 007d 	add.w	r0, sp, #125	; 0x7d
    b4f0:	f016 fc3e 	bl	21d70 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
    b4f4:	463b      	mov	r3, r7
    b4f6:	2235      	movs	r2, #53	; 0x35
    b4f8:	4629      	mov	r1, r5
    b4fa:	a808      	add	r0, sp, #32
    b4fc:	f016 fc80 	bl	21e00 <bt_smp_aes_cmac>
	if (err) {
    b500:	2800      	cmp	r0, #0
    b502:	f040 80ae 	bne.w	b662 <compute_and_check_and_send_slave_dhcheck+0x232>
	sys_mem_swap(mackey, 16);
    b506:	4638      	mov	r0, r7
    b508:	f016 fc98 	bl	21e3c <sys_mem_swap.constprop.0>
		   smp->tk)) {
    b50c:	f204 1a07 	addw	sl, r4, #263	; 0x107
	m[0] = 0x01;
    b510:	2301      	movs	r3, #1
    b512:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    b516:	2235      	movs	r2, #53	; 0x35
    b518:	4653      	mov	r3, sl
    b51a:	4629      	mov	r1, r5
    b51c:	a808      	add	r0, sp, #32
    b51e:	f016 fc6f 	bl	21e00 <bt_smp_aes_cmac>
	if (err) {
    b522:	2800      	cmp	r0, #0
    b524:	f040 809d 	bne.w	b662 <compute_and_check_and_send_slave_dhcheck+0x232>
	sys_mem_swap(ltk, 16);
    b528:	4650      	mov	r0, sl
    b52a:	f016 fc87 	bl	21e3c <sys_mem_swap.constprop.0>
		   &smp->chan.chan.conn->le.resp_addr,
    b52e:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    b530:	4638      	mov	r0, r7
		   &smp->chan.chan.conn->le.resp_addr,
    b532:	f852 3bd1 	ldr.w	r3, [r2], #209
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    b536:	9503      	str	r5, [sp, #12]
		   &smp->chan.chan.conn->le.init_addr, e)) {
    b538:	f103 018f 	add.w	r1, r3, #143	; 0x8f
		   &smp->chan.chan.conn->le.resp_addr,
    b53c:	3396      	adds	r3, #150	; 0x96
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    b53e:	e9cd 2300 	strd	r2, r3, [sp]
    b542:	9102      	str	r1, [sp, #8]
    b544:	ab04      	add	r3, sp, #16
    b546:	4642      	mov	r2, r8
    b548:	4649      	mov	r1, r9
    b54a:	f016 fc85 	bl	21e58 <smp_f6>
    b54e:	b338      	cbz	r0, b5a0 <compute_and_check_and_send_slave_dhcheck+0x170>
    b550:	494a      	ldr	r1, [pc, #296]	; (b67c <compute_and_check_and_send_slave_dhcheck+0x24c>)
    b552:	4b4b      	ldr	r3, [pc, #300]	; (b680 <compute_and_check_and_send_slave_dhcheck+0x250>)
		BT_ERR("Calculate local DHKey check failed");
    b554:	484b      	ldr	r0, [pc, #300]	; (b684 <compute_and_check_and_send_slave_dhcheck+0x254>)
    b556:	1ac9      	subs	r1, r1, r3
    b558:	08c9      	lsrs	r1, r1, #3
    b55a:	0189      	lsls	r1, r1, #6
    b55c:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Calculate LTK failed");
    b560:	f013 faea 	bl	1eb38 <log_0>
    b564:	e01a      	b.n	b59c <compute_and_check_and_send_slave_dhcheck+0x16c>
		if (smp->oobd_remote) {
    b566:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    b56a:	2b00      	cmp	r3, #0
    b56c:	f43f af77 	beq.w	b45e <compute_and_check_and_send_slave_dhcheck+0x2e>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
    b570:	ad04      	add	r5, sp, #16
    b572:	f103 0610 	add.w	r6, r3, #16
    b576:	6818      	ldr	r0, [r3, #0]
    b578:	6859      	ldr	r1, [r3, #4]
    b57a:	462a      	mov	r2, r5
    b57c:	c203      	stmia	r2!, {r0, r1}
    b57e:	3308      	adds	r3, #8
    b580:	42b3      	cmp	r3, r6
    b582:	4615      	mov	r5, r2
    b584:	d1f7      	bne.n	b576 <compute_and_check_and_send_slave_dhcheck+0x146>
    b586:	e76a      	b.n	b45e <compute_and_check_and_send_slave_dhcheck+0x2e>
    b588:	4a3c      	ldr	r2, [pc, #240]	; (b67c <compute_and_check_and_send_slave_dhcheck+0x24c>)
    b58a:	4b3d      	ldr	r3, [pc, #244]	; (b680 <compute_and_check_and_send_slave_dhcheck+0x250>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    b58c:	483e      	ldr	r0, [pc, #248]	; (b688 <compute_and_check_and_send_slave_dhcheck+0x258>)
    b58e:	1ad2      	subs	r2, r2, r3
    b590:	08d2      	lsrs	r2, r2, #3
    b592:	0192      	lsls	r2, r2, #6
    b594:	f042 0201 	orr.w	r2, r2, #1
    b598:	f013 fadb 	bl	1eb52 <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
    b59c:	2008      	movs	r0, #8
    b59e:	e05b      	b.n	b658 <compute_and_check_and_send_slave_dhcheck+0x228>
	if (smp->method == LE_SC_OOB) {
    b5a0:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    b5a4:	2b05      	cmp	r3, #5
    b5a6:	d10f      	bne.n	b5c8 <compute_and_check_and_send_slave_dhcheck+0x198>
		if (smp->oobd_local) {
    b5a8:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
    b5ac:	b331      	cbz	r1, b5fc <compute_and_check_and_send_slave_dhcheck+0x1cc>
			memcpy(r, smp->oobd_local->r, sizeof(r));
    b5ae:	460b      	mov	r3, r1
    b5b0:	f10d 0c10 	add.w	ip, sp, #16
    b5b4:	f101 0e10 	add.w	lr, r1, #16
    b5b8:	6818      	ldr	r0, [r3, #0]
    b5ba:	6859      	ldr	r1, [r3, #4]
    b5bc:	4662      	mov	r2, ip
    b5be:	c203      	stmia	r2!, {r0, r1}
    b5c0:	3308      	adds	r3, #8
    b5c2:	4573      	cmp	r3, lr
    b5c4:	4694      	mov	ip, r2
    b5c6:	d1f7      	bne.n	b5b8 <compute_and_check_and_send_slave_dhcheck+0x188>
		   &smp->chan.chan.conn->le.init_addr,
    b5c8:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    b5ca:	4638      	mov	r0, r7
		   &smp->chan.chan.conn->le.init_addr,
    b5cc:	f852 3bca 	ldr.w	r3, [r2], #202
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    b5d0:	9603      	str	r6, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, re)) {
    b5d2:	f103 0196 	add.w	r1, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
    b5d6:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    b5d8:	e9cd 2300 	strd	r2, r3, [sp]
    b5dc:	9102      	str	r1, [sp, #8]
    b5de:	ab04      	add	r3, sp, #16
    b5e0:	464a      	mov	r2, r9
    b5e2:	4641      	mov	r1, r8
    b5e4:	f016 fc38 	bl	21e58 <smp_f6>
    b5e8:	b170      	cbz	r0, b608 <compute_and_check_and_send_slave_dhcheck+0x1d8>
    b5ea:	4924      	ldr	r1, [pc, #144]	; (b67c <compute_and_check_and_send_slave_dhcheck+0x24c>)
    b5ec:	4b24      	ldr	r3, [pc, #144]	; (b680 <compute_and_check_and_send_slave_dhcheck+0x250>)
		BT_ERR("Calculate remote DHKey check failed");
    b5ee:	4827      	ldr	r0, [pc, #156]	; (b68c <compute_and_check_and_send_slave_dhcheck+0x25c>)
    b5f0:	1ac9      	subs	r1, r1, r3
    b5f2:	08c9      	lsrs	r1, r1, #3
    b5f4:	0189      	lsls	r1, r1, #6
    b5f6:	f041 0101 	orr.w	r1, r1, #1
    b5fa:	e7b1      	b.n	b560 <compute_and_check_and_send_slave_dhcheck+0x130>
			memset(r, 0, sizeof(r));
    b5fc:	2210      	movs	r2, #16
    b5fe:	eb0d 0002 	add.w	r0, sp, r2
    b602:	f018 f83c 	bl	2367e <memset>
    b606:	e7df      	b.n	b5c8 <compute_and_check_and_send_slave_dhcheck+0x198>
	if (memcmp(smp->e, re, 16)) {
    b608:	2210      	movs	r2, #16
    b60a:	4631      	mov	r1, r6
    b60c:	f204 1077 	addw	r0, r4, #375	; 0x177
    b610:	f018 f819 	bl	23646 <memcmp>
    b614:	bb18      	cbnz	r0, b65e <compute_and_check_and_send_slave_dhcheck+0x22e>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
    b616:	210d      	movs	r1, #13
    b618:	4620      	mov	r0, r4
    b61a:	f016 fcc0 	bl	21f9e <smp_create_pdu.isra.0>
	if (!buf) {
    b61e:	4606      	mov	r6, r0
    b620:	2800      	cmp	r0, #0
    b622:	d0bb      	beq.n	b59c <compute_and_check_and_send_slave_dhcheck+0x16c>
    b624:	2110      	movs	r1, #16
    b626:	3008      	adds	r0, #8
    b628:	f017 f803 	bl	22632 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    b62c:	af18      	add	r7, sp, #96	; 0x60
    b62e:	4603      	mov	r3, r0
    b630:	462a      	mov	r2, r5
    b632:	ca03      	ldmia	r2!, {r0, r1}
    b634:	42ba      	cmp	r2, r7
    b636:	6018      	str	r0, [r3, #0]
    b638:	6059      	str	r1, [r3, #4]
    b63a:	4615      	mov	r5, r2
    b63c:	f103 0308 	add.w	r3, r3, #8
    b640:	d1f6      	bne.n	b630 <compute_and_check_and_send_slave_dhcheck+0x200>
	smp_send(smp, buf, NULL, NULL);
    b642:	2200      	movs	r2, #0
    b644:	4631      	mov	r1, r6
    b646:	4620      	mov	r0, r4
    b648:	f7ff fecc 	bl	b3e4 <smp_send.isra.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    b64c:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    b650:	2101      	movs	r1, #1
    b652:	f016 fb99 	bl	21d88 <atomic_set_bit>
	return 0;
    b656:	2000      	movs	r0, #0
}
    b658:	b022      	add	sp, #136	; 0x88
    b65a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    b65e:	200b      	movs	r0, #11
    b660:	e7fa      	b.n	b658 <compute_and_check_and_send_slave_dhcheck+0x228>
    b662:	4906      	ldr	r1, [pc, #24]	; (b67c <compute_and_check_and_send_slave_dhcheck+0x24c>)
    b664:	4b06      	ldr	r3, [pc, #24]	; (b680 <compute_and_check_and_send_slave_dhcheck+0x250>)
		BT_ERR("Calculate LTK failed");
    b666:	480a      	ldr	r0, [pc, #40]	; (b690 <compute_and_check_and_send_slave_dhcheck+0x260>)
    b668:	1ac9      	subs	r1, r1, r3
    b66a:	08c9      	lsrs	r1, r1, #3
    b66c:	0189      	lsls	r1, r1, #6
    b66e:	f041 0101 	orr.w	r1, r1, #1
    b672:	e775      	b.n	b560 <compute_and_check_and_send_slave_dhcheck+0x130>
    b674:	00023bb6 	.word	0x00023bb6
    b678:	00027195 	.word	0x00027195
    b67c:	00023a44 	.word	0x00023a44
    b680:	0002393c 	.word	0x0002393c
    b684:	00026ec1 	.word	0x00026ec1
    b688:	00026ea5 	.word	0x00026ea5
    b68c:	00026ee4 	.word	0x00026ee4
    b690:	00026f08 	.word	0x00026f08

0000b694 <smp_send_pairing_confirm>:
{
    b694:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
    b696:	f890 40c8 	ldrb.w	r4, [r0, #200]	; 0xc8
    b69a:	2c02      	cmp	r4, #2
{
    b69c:	4605      	mov	r5, r0
	switch (smp->method) {
    b69e:	d824      	bhi.n	b6ea <smp_send_pairing_confirm+0x56>
    b6a0:	b14c      	cbz	r4, b6b6 <smp_send_pairing_confirm+0x22>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    b6a2:	f890 319c 	ldrb.w	r3, [r0, #412]	; 0x19c
    b6a6:	f8d0 4198 	ldr.w	r4, [r0, #408]	; 0x198
    b6aa:	40dc      	lsrs	r4, r3
    b6ac:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
    b6b0:	f064 047f 	orn	r4, r4, #127	; 0x7f
    b6b4:	b2e4      	uxtb	r4, r4
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    b6b6:	2103      	movs	r1, #3
    b6b8:	4628      	mov	r0, r5
    b6ba:	f016 fc70 	bl	21f9e <smp_create_pdu.isra.0>
	if (!buf) {
    b6be:	4606      	mov	r6, r0
    b6c0:	b300      	cbz	r0, b704 <smp_send_pairing_confirm+0x70>
    b6c2:	2110      	movs	r1, #16
    b6c4:	3008      	adds	r0, #8
    b6c6:	f016 ffb4 	bl	22632 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
    b6ca:	9000      	str	r0, [sp, #0]
    b6cc:	4816      	ldr	r0, [pc, #88]	; (b728 <smp_send_pairing_confirm+0x94>)
    b6ce:	4623      	mov	r3, r4
    b6d0:	6800      	ldr	r0, [r0, #0]
    b6d2:	f105 02e7 	add.w	r2, r5, #231	; 0xe7
    b6d6:	f205 1117 	addw	r1, r5, #279	; 0x117
    b6da:	f016 fc0b 	bl	21ef4 <smp_f4>
    b6de:	4604      	mov	r4, r0
    b6e0:	b1a0      	cbz	r0, b70c <smp_send_pairing_confirm+0x78>
		net_buf_unref(buf);
    b6e2:	4630      	mov	r0, r6
    b6e4:	f00e fd42 	bl	1a16c <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    b6e8:	e00c      	b.n	b704 <smp_send_pairing_confirm+0x70>
	switch (smp->method) {
    b6ea:	2c03      	cmp	r4, #3
    b6ec:	d00c      	beq.n	b708 <smp_send_pairing_confirm+0x74>
    b6ee:	4a0f      	ldr	r2, [pc, #60]	; (b72c <smp_send_pairing_confirm+0x98>)
    b6f0:	4b0f      	ldr	r3, [pc, #60]	; (b730 <smp_send_pairing_confirm+0x9c>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    b6f2:	4810      	ldr	r0, [pc, #64]	; (b734 <smp_send_pairing_confirm+0xa0>)
    b6f4:	1ad2      	subs	r2, r2, r3
    b6f6:	08d2      	lsrs	r2, r2, #3
    b6f8:	0192      	lsls	r2, r2, #6
    b6fa:	f042 0201 	orr.w	r2, r2, #1
    b6fe:	4621      	mov	r1, r4
    b700:	f013 fa27 	bl	1eb52 <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
    b704:	2008      	movs	r0, #8
    b706:	e00c      	b.n	b722 <smp_send_pairing_confirm+0x8e>
	switch (smp->method) {
    b708:	2400      	movs	r4, #0
    b70a:	e7d4      	b.n	b6b6 <smp_send_pairing_confirm+0x22>
	smp_send(smp, buf, NULL, NULL);
    b70c:	4602      	mov	r2, r0
    b70e:	4631      	mov	r1, r6
    b710:	4628      	mov	r0, r5
    b712:	f7ff fe67 	bl	b3e4 <smp_send.isra.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    b716:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
    b71a:	4621      	mov	r1, r4
    b71c:	f016 fb5a 	bl	21dd4 <atomic_clear_bit>
	return 0;
    b720:	4620      	mov	r0, r4
}
    b722:	b002      	add	sp, #8
    b724:	bd70      	pop	{r4, r5, r6, pc}
    b726:	bf00      	nop
    b728:	200016a8 	.word	0x200016a8
    b72c:	00023a44 	.word	0x00023a44
    b730:	0002393c 	.word	0x0002393c
    b734:	00026ea5 	.word	0x00026ea5

0000b738 <smp_public_key_slave>:
{
    b738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
    b73a:	f100 05c4 	add.w	r5, r0, #196	; 0xc4
{
    b73e:	4604      	mov	r4, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
    b740:	210e      	movs	r1, #14
    b742:	4628      	mov	r0, r5
    b744:	f016 fbfd 	bl	21f42 <atomic_test_bit>
    b748:	b998      	cbnz	r0, b772 <smp_public_key_slave+0x3a>
	    memcmp(smp->pkey, sc_public_key, 64) == 0) {
    b74a:	4b4f      	ldr	r3, [pc, #316]	; (b888 <smp_public_key_slave+0x150>)
    b74c:	2240      	movs	r2, #64	; 0x40
    b74e:	6819      	ldr	r1, [r3, #0]
    b750:	f204 1017 	addw	r0, r4, #279	; 0x117
    b754:	f017 ff77 	bl	23646 <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
    b758:	b958      	cbnz	r0, b772 <smp_public_key_slave+0x3a>
    b75a:	494c      	ldr	r1, [pc, #304]	; (b88c <smp_public_key_slave+0x154>)
    b75c:	4b4c      	ldr	r3, [pc, #304]	; (b890 <smp_public_key_slave+0x158>)
		BT_WARN("Remote is using identical public key");
    b75e:	484d      	ldr	r0, [pc, #308]	; (b894 <smp_public_key_slave+0x15c>)
    b760:	1ac9      	subs	r1, r1, r3
    b762:	08c9      	lsrs	r1, r1, #3
    b764:	0189      	lsls	r1, r1, #6
    b766:	f041 0102 	orr.w	r1, r1, #2
    b76a:	f013 f9e5 	bl	1eb38 <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
    b76e:	2008      	movs	r0, #8
    b770:	e037      	b.n	b7e2 <smp_public_key_slave+0xaa>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
    b772:	210c      	movs	r1, #12
    b774:	4620      	mov	r0, r4
    b776:	f016 fc12 	bl	21f9e <smp_create_pdu.isra.0>
	if (!req_buf) {
    b77a:	4606      	mov	r6, r0
    b77c:	2800      	cmp	r0, #0
    b77e:	d0f6      	beq.n	b76e <smp_public_key_slave+0x36>
    b780:	2140      	movs	r1, #64	; 0x40
    b782:	3008      	adds	r0, #8
    b784:	f016 ff55 	bl	22632 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
    b788:	4b3f      	ldr	r3, [pc, #252]	; (b888 <smp_public_key_slave+0x150>)
    b78a:	681b      	ldr	r3, [r3, #0]
    b78c:	4602      	mov	r2, r0
    b78e:	f103 0120 	add.w	r1, r3, #32
    b792:	f853 7b04 	ldr.w	r7, [r3], #4
    b796:	f842 7b04 	str.w	r7, [r2], #4
    b79a:	428b      	cmp	r3, r1
    b79c:	d1f9      	bne.n	b792 <smp_public_key_slave+0x5a>
    b79e:	f100 0220 	add.w	r2, r0, #32
    b7a2:	f103 0120 	add.w	r1, r3, #32
    b7a6:	f853 0b04 	ldr.w	r0, [r3], #4
    b7aa:	f842 0b04 	str.w	r0, [r2], #4
    b7ae:	428b      	cmp	r3, r1
    b7b0:	d1f9      	bne.n	b7a6 <smp_public_key_slave+0x6e>
	smp_send(smp, req_buf, NULL, NULL);
    b7b2:	4631      	mov	r1, r6
    b7b4:	2200      	movs	r2, #0
    b7b6:	4620      	mov	r0, r4
    b7b8:	f7ff fe14 	bl	b3e4 <smp_send.isra.0>
	switch (smp->method) {
    b7bc:	f894 10c8 	ldrb.w	r1, [r4, #200]	; 0xc8
    b7c0:	2905      	cmp	r1, #5
    b7c2:	d853      	bhi.n	b86c <smp_public_key_slave+0x134>
    b7c4:	e8df f001 	tbb	[pc, r1]
    b7c8:	030e3503 	.word	0x030e3503
    b7cc:	5052      	.short	0x5052
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    b7ce:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    b7d2:	2104      	movs	r1, #4
    b7d4:	f016 fad8 	bl	21d88 <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
    b7d8:	4620      	mov	r0, r4
    b7da:	f7ff ff5b 	bl	b694 <smp_send_pairing_confirm>
		if (err) {
    b7de:	2800      	cmp	r0, #0
    b7e0:	d035      	beq.n	b84e <smp_public_key_slave+0x116>
}
    b7e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    b7e4:	2104      	movs	r1, #4
    b7e6:	f504 70cc 	add.w	r0, r4, #408	; 0x198
    b7ea:	f004 f8fd 	bl	f9e8 <bt_rand>
    b7ee:	2800      	cmp	r0, #0
    b7f0:	d1bd      	bne.n	b76e <smp_public_key_slave+0x36>
		smp->passkey %= 1000000;
    b7f2:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
    b7f6:	4a28      	ldr	r2, [pc, #160]	; (b898 <smp_public_key_slave+0x160>)
	if (bt_auth && bt_auth->passkey_display) {
    b7f8:	4e28      	ldr	r6, [pc, #160]	; (b89c <smp_public_key_slave+0x164>)
		smp->passkey %= 1000000;
    b7fa:	fbb1 f3f2 	udiv	r3, r1, r2
    b7fe:	fb02 1313 	mls	r3, r2, r3, r1
    b802:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
	if (bt_auth && bt_auth->passkey_display) {
    b806:	6833      	ldr	r3, [r6, #0]
	smp->passkey_round = 0U;
    b808:	f884 019c 	strb.w	r0, [r4, #412]	; 0x19c
	if (bt_auth && bt_auth->passkey_display) {
    b80c:	b15b      	cbz	r3, b826 <smp_public_key_slave+0xee>
    b80e:	681b      	ldr	r3, [r3, #0]
    b810:	b14b      	cbz	r3, b826 <smp_public_key_slave+0xee>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    b812:	210b      	movs	r1, #11
    b814:	4628      	mov	r0, r5
    b816:	f016 fab7 	bl	21d88 <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    b81a:	6833      	ldr	r3, [r6, #0]
    b81c:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
    b820:	681b      	ldr	r3, [r3, #0]
    b822:	6820      	ldr	r0, [r4, #0]
    b824:	4798      	blx	r3
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    b826:	2103      	movs	r1, #3
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    b828:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    b82c:	f016 faac 	bl	21d88 <atomic_set_bit>
		break;
    b830:	e00d      	b.n	b84e <smp_public_key_slave+0x116>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    b832:	2103      	movs	r1, #3
    b834:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    b838:	f016 faa6 	bl	21d88 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    b83c:	4628      	mov	r0, r5
    b83e:	210a      	movs	r1, #10
    b840:	f016 faa2 	bl	21d88 <atomic_set_bit>
		bt_auth->passkey_entry(smp->chan.chan.conn);
    b844:	4b15      	ldr	r3, [pc, #84]	; (b89c <smp_public_key_slave+0x164>)
    b846:	6820      	ldr	r0, [r4, #0]
    b848:	681b      	ldr	r3, [r3, #0]
    b84a:	685b      	ldr	r3, [r3, #4]
    b84c:	4798      	blx	r3
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
    b84e:	4628      	mov	r0, r5
    b850:	2107      	movs	r1, #7
    b852:	f016 fa99 	bl	21d88 <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
    b856:	2008      	movs	r0, #8
    b858:	f7ff fddc 	bl	b414 <smp_find>
    b85c:	b988      	cbnz	r0, b882 <smp_public_key_slave+0x14a>
		return smp_dhkey_generate(smp);
    b85e:	4620      	mov	r0, r4
}
    b860:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return smp_dhkey_generate(smp);
    b864:	f7ff bd22 	b.w	b2ac <smp_dhkey_generate>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    b868:	2104      	movs	r1, #4
    b86a:	e7dd      	b.n	b828 <smp_public_key_slave+0xf0>
    b86c:	4b08      	ldr	r3, [pc, #32]	; (b890 <smp_public_key_slave+0x158>)
    b86e:	4a07      	ldr	r2, [pc, #28]	; (b88c <smp_public_key_slave+0x154>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    b870:	480b      	ldr	r0, [pc, #44]	; (b8a0 <smp_public_key_slave+0x168>)
    b872:	1ad2      	subs	r2, r2, r3
    b874:	08d2      	lsrs	r2, r2, #3
    b876:	0192      	lsls	r2, r2, #6
    b878:	f042 0201 	orr.w	r2, r2, #1
    b87c:	f013 f969 	bl	1eb52 <log_1>
    b880:	e775      	b.n	b76e <smp_public_key_slave+0x36>
	return 0;
    b882:	2000      	movs	r0, #0
    b884:	e7ad      	b.n	b7e2 <smp_public_key_slave+0xaa>
    b886:	bf00      	nop
    b888:	200016a8 	.word	0x200016a8
    b88c:	00023a44 	.word	0x00023a44
    b890:	0002393c 	.word	0x0002393c
    b894:	00026f1d 	.word	0x00026f1d
    b898:	000f4240 	.word	0x000f4240
    b89c:	20001614 	.word	0x20001614
    b8a0:	00026ea5 	.word	0x00026ea5

0000b8a4 <smp_public_key>:
{
    b8a4:	b538      	push	{r3, r4, r5, lr}
    b8a6:	688b      	ldr	r3, [r1, #8]
    b8a8:	4604      	mov	r4, r0
	memcpy(smp->pkey, req->x, 32);
    b8aa:	f200 1017 	addw	r0, r0, #279	; 0x117
    b8ae:	4602      	mov	r2, r0
    b8b0:	f103 0120 	add.w	r1, r3, #32
    b8b4:	f853 5b04 	ldr.w	r5, [r3], #4
    b8b8:	f842 5b04 	str.w	r5, [r2], #4
    b8bc:	428b      	cmp	r3, r1
    b8be:	d1f9      	bne.n	b8b4 <smp_public_key+0x10>
    b8c0:	f204 1237 	addw	r2, r4, #311	; 0x137
    b8c4:	f103 0120 	add.w	r1, r3, #32
    b8c8:	f853 5b04 	ldr.w	r5, [r3], #4
    b8cc:	f842 5b04 	str.w	r5, [r2], #4
    b8d0:	428b      	cmp	r3, r1
    b8d2:	d1f9      	bne.n	b8c8 <smp_public_key+0x24>
	if (bt_pub_key_is_debug(smp->pkey)) {
    b8d4:	f7fc fe14 	bl	8500 <bt_pub_key_is_debug>
    b8d8:	b948      	cbnz	r0, b8ee <smp_public_key+0x4a>
	if (!sc_public_key) {
    b8da:	4b1b      	ldr	r3, [pc, #108]	; (b948 <smp_public_key+0xa4>)
    b8dc:	681d      	ldr	r5, [r3, #0]
    b8de:	bb75      	cbnz	r5, b93e <smp_public_key+0x9a>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    b8e0:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    b8e4:	2106      	movs	r1, #6
    b8e6:	f016 fa4f 	bl	21d88 <atomic_set_bit>
		return 0;
    b8ea:	4628      	mov	r0, r5
    b8ec:	e026      	b.n	b93c <smp_public_key+0x98>
    b8ee:	4b17      	ldr	r3, [pc, #92]	; (b94c <smp_public_key+0xa8>)
    b8f0:	4917      	ldr	r1, [pc, #92]	; (b950 <smp_public_key+0xac>)
		BT_INFO("Remote is using Debug Public key");
    b8f2:	4818      	ldr	r0, [pc, #96]	; (b954 <smp_public_key+0xb0>)
    b8f4:	1ac9      	subs	r1, r1, r3
    b8f6:	08c9      	lsrs	r1, r1, #3
    b8f8:	0189      	lsls	r1, r1, #6
    b8fa:	f041 0103 	orr.w	r1, r1, #3
    b8fe:	f013 f91b 	bl	1eb38 <log_0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
    b902:	210e      	movs	r1, #14
    b904:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    b908:	f016 fa3e 	bl	21d88 <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
    b90c:	6825      	ldr	r5, [r4, #0]
	if (!conn->le.keys) {
    b90e:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    b912:	b933      	cbnz	r3, b922 <smp_public_key+0x7e>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    b914:	7a28      	ldrb	r0, [r5, #8]
    b916:	f105 0188 	add.w	r1, r5, #136	; 0x88
    b91a:	f001 f8e1 	bl	cae0 <bt_keys_get_addr>
    b91e:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
    b922:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    b926:	2b00      	cmp	r3, #0
    b928:	d0d7      	beq.n	b8da <smp_public_key+0x36>
    b92a:	89da      	ldrh	r2, [r3, #14]
    b92c:	f002 0224 	and.w	r2, r2, #36	; 0x24
    b930:	2a00      	cmp	r2, #0
    b932:	d0d2      	beq.n	b8da <smp_public_key+0x36>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
    b934:	7b5b      	ldrb	r3, [r3, #13]
    b936:	079b      	lsls	r3, r3, #30
    b938:	d4cf      	bmi.n	b8da <smp_public_key+0x36>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
    b93a:	2003      	movs	r0, #3
}
    b93c:	bd38      	pop	{r3, r4, r5, pc}
	err = smp_public_key_slave(smp);
    b93e:	4620      	mov	r0, r4
}
    b940:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	err = smp_public_key_slave(smp);
    b944:	f7ff bef8 	b.w	b738 <smp_public_key_slave>
    b948:	200016a8 	.word	0x200016a8
    b94c:	0002393c 	.word	0x0002393c
    b950:	00023a44 	.word	0x00023a44
    b954:	00026f42 	.word	0x00026f42

0000b958 <smp_pairing_req>:
{
    b958:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
    b95c:	688d      	ldr	r5, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    b95e:	78eb      	ldrb	r3, [r5, #3]
    b960:	3b07      	subs	r3, #7
    b962:	2b09      	cmp	r3, #9
{
    b964:	4604      	mov	r4, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    b966:	d904      	bls.n	b972 <smp_pairing_req+0x1a>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    b968:	2506      	movs	r5, #6
}
    b96a:	4628      	mov	r0, r5
    b96c:	b002      	add	sp, #8
    b96e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct bt_conn *conn = smp->chan.chan.conn;
    b972:	6807      	ldr	r7, [r0, #0]
	if (!conn->le.keys) {
    b974:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
    b978:	b163      	cbz	r3, b994 <smp_pairing_req+0x3c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
    b97a:	f104 06c4 	add.w	r6, r4, #196	; 0xc4
    b97e:	210f      	movs	r1, #15
    b980:	4630      	mov	r0, r6
    b982:	f016 fade 	bl	21f42 <atomic_test_bit>
    b986:	b980      	cbnz	r0, b9aa <smp_pairing_req+0x52>
		int ret = smp_init(smp);
    b988:	4620      	mov	r0, r4
    b98a:	f7ff fd0d 	bl	b3a8 <smp_init>
		if (ret) {
    b98e:	b160      	cbz	r0, b9aa <smp_pairing_req+0x52>
			return ret;
    b990:	b2c5      	uxtb	r5, r0
    b992:	e7ea      	b.n	b96a <smp_pairing_req+0x12>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    b994:	7a38      	ldrb	r0, [r7, #8]
    b996:	f107 0188 	add.w	r1, r7, #136	; 0x88
    b99a:	f001 f8a1 	bl	cae0 <bt_keys_get_addr>
    b99e:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
		if (!conn->le.keys) {
    b9a2:	2800      	cmp	r0, #0
    b9a4:	d1e9      	bne.n	b97a <smp_pairing_req+0x22>
	switch (sec) {
    b9a6:	2508      	movs	r5, #8
    b9a8:	e7df      	b.n	b96a <smp_pairing_req+0x12>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    b9aa:	2301      	movs	r3, #1
    b9ac:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
    b9b0:	682b      	ldr	r3, [r5, #0]
    b9b2:	f8c4 30ca 	str.w	r3, [r4, #202]	; 0xca
    b9b6:	88ab      	ldrh	r3, [r5, #4]
    b9b8:	f8a4 30ce 	strh.w	r3, [r4, #206]	; 0xce
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    b9bc:	2302      	movs	r3, #2
    b9be:	f884 30d0 	strb.w	r3, [r4, #208]	; 0xd0
	rsp->auth_req = get_auth(conn, req->auth_req);
    b9c2:	78a8      	ldrb	r0, [r5, #2]
    b9c4:	f7ff fc98 	bl	b2f8 <get_auth.isra.0>
    b9c8:	f884 00d3 	strb.w	r0, [r4, #211]	; 0xd3
    b9cc:	4680      	mov	r8, r0
	rsp->io_capability = get_io_capa();
    b9ce:	f7ff fc47 	bl	b260 <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    b9d2:	4bae      	ldr	r3, [pc, #696]	; (bc8c <smp_pairing_req+0x334>)
	rsp->io_capability = get_io_capa();
    b9d4:	f884 00d1 	strb.w	r0, [r4, #209]	; 0xd1
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    b9d8:	781b      	ldrb	r3, [r3, #0]
    b9da:	f884 30d2 	strb.w	r3, [r4, #210]	; 0xd2
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    b9de:	2310      	movs	r3, #16
    b9e0:	f884 30d4 	strb.w	r3, [r4, #212]	; 0xd4
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
    b9e4:	792b      	ldrb	r3, [r5, #4]
    b9e6:	f003 0303 	and.w	r3, r3, #3
    b9ea:	f884 30d5 	strb.w	r3, [r4, #213]	; 0xd5
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    b9ee:	796b      	ldrb	r3, [r5, #5]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    b9f0:	f018 0f08 	tst.w	r8, #8
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    b9f4:	f003 0301 	and.w	r3, r3, #1
    b9f8:	f884 30d6 	strb.w	r3, [r4, #214]	; 0xd6
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    b9fc:	d00f      	beq.n	ba1e <smp_pairing_req+0xc6>
    b9fe:	78ab      	ldrb	r3, [r5, #2]
    ba00:	0719      	lsls	r1, r3, #28
    ba02:	d50c      	bpl.n	ba1e <smp_pairing_req+0xc6>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    ba04:	2105      	movs	r1, #5
    ba06:	4630      	mov	r0, r6
    ba08:	f016 f9be 	bl	21d88 <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
    ba0c:	f894 30d5 	ldrb.w	r3, [r4, #213]	; 0xd5
    ba10:	f003 0302 	and.w	r3, r3, #2
    ba14:	f884 30d5 	strb.w	r3, [r4, #213]	; 0xd5
		rsp->resp_key_dist &= SEND_KEYS_SC;
    ba18:	2300      	movs	r3, #0
    ba1a:	f884 30d6 	strb.w	r3, [r4, #214]	; 0xd6
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    ba1e:	f894 30d3 	ldrb.w	r3, [r4, #211]	; 0xd3
    ba22:	069a      	lsls	r2, r3, #26
    ba24:	d506      	bpl.n	ba34 <smp_pairing_req+0xdc>
    ba26:	78ab      	ldrb	r3, [r5, #2]
    ba28:	069b      	lsls	r3, r3, #26
    ba2a:	d503      	bpl.n	ba34 <smp_pairing_req+0xdc>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    ba2c:	2114      	movs	r1, #20
    ba2e:	4630      	mov	r0, r6
    ba30:	f016 f9aa 	bl	21d88 <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
    ba34:	f894 30d6 	ldrb.w	r3, [r4, #214]	; 0xd6
    ba38:	f884 31a8 	strb.w	r3, [r4, #424]	; 0x1a8
	smp->remote_dist = rsp->init_key_dist;
    ba3c:	f894 30d5 	ldrb.w	r3, [r4, #213]	; 0xd5
    ba40:	f884 31a9 	strb.w	r3, [r4, #425]	; 0x1a9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    ba44:	f894 30d3 	ldrb.w	r3, [r4, #211]	; 0xd3
    ba48:	07d8      	lsls	r0, r3, #31
    ba4a:	d506      	bpl.n	ba5a <smp_pairing_req+0x102>
    ba4c:	78ab      	ldrb	r3, [r5, #2]
    ba4e:	07d9      	lsls	r1, r3, #31
    ba50:	d503      	bpl.n	ba5a <smp_pairing_req+0x102>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    ba52:	210d      	movs	r1, #13
    ba54:	4630      	mov	r0, r6
    ba56:	f016 f997 	bl	21d88 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
    ba5a:	2103      	movs	r1, #3
    ba5c:	4630      	mov	r0, r6
    ba5e:	f016 f993 	bl	21d88 <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    ba62:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
    ba64:	782d      	ldrb	r5, [r5, #0]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    ba66:	f016 fa6c 	bl	21f42 <atomic_test_bit>
    ba6a:	bb48      	cbnz	r0, bac0 <smp_pairing_req+0x168>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
    ba6c:	2d04      	cmp	r5, #4
    ba6e:	d81d      	bhi.n	baac <smp_pairing_req+0x154>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
    ba70:	f894 20d2 	ldrb.w	r2, [r4, #210]	; 0xd2
    ba74:	f894 30cb 	ldrb.w	r3, [r4, #203]	; 0xcb
    ba78:	4013      	ands	r3, r2
    ba7a:	07da      	lsls	r2, r3, #31
    ba7c:	d43d      	bmi.n	bafa <smp_pairing_req+0x1a2>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    ba7e:	f894 00cc 	ldrb.w	r0, [r4, #204]	; 0xcc
    ba82:	f894 30d3 	ldrb.w	r3, [r4, #211]	; 0xd3
    ba86:	4318      	orrs	r0, r3
    ba88:	f010 0004 	ands.w	r0, r0, #4
    ba8c:	d00e      	beq.n	baac <smp_pairing_req+0x154>
	method = gen_method_legacy[remote_io][get_io_capa()];
    ba8e:	f7ff fbe7 	bl	b260 <get_io_capa>
    ba92:	4b7f      	ldr	r3, [pc, #508]	; (bc90 <smp_pairing_req+0x338>)
    ba94:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    ba98:	441d      	add	r5, r3
    ba9a:	5c28      	ldrb	r0, [r5, r0]
	if (method == PASSKEY_ROLE) {
    ba9c:	2804      	cmp	r0, #4
    ba9e:	d105      	bne.n	baac <smp_pairing_req+0x154>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    baa0:	6823      	ldr	r3, [r4, #0]
    baa2:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_INPUT;
    baa4:	2b00      	cmp	r3, #0
    baa6:	bf0c      	ite	eq
    baa8:	2002      	moveq	r0, #2
    baaa:	2001      	movne	r0, #1
	smp->method = get_pair_method(smp, req->io_capability);
    baac:	f884 00c8 	strb.w	r0, [r4, #200]	; 0xc8
	if (!update_keys_check(smp, conn->le.keys)) {
    bab0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
    bab4:	4620      	mov	r0, r4
    bab6:	f016 fa4d 	bl	21f54 <update_keys_check>
    baba:	bb20      	cbnz	r0, bb06 <smp_pairing_req+0x1ae>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
    babc:	2503      	movs	r5, #3
    babe:	e754      	b.n	b96a <smp_pairing_req+0x12>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
    bac0:	f894 00cc 	ldrb.w	r0, [r4, #204]	; 0xcc
    bac4:	f894 20d3 	ldrb.w	r2, [r4, #211]	; 0xd3
    bac8:	ea00 0302 	and.w	r3, r0, r2
    bacc:	071b      	lsls	r3, r3, #28
    bace:	d506      	bpl.n	bade <smp_pairing_req+0x186>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
    bad0:	f894 10d2 	ldrb.w	r1, [r4, #210]	; 0xd2
    bad4:	f894 30cb 	ldrb.w	r3, [r4, #203]	; 0xcb
    bad8:	430b      	orrs	r3, r1
    bada:	07d9      	lsls	r1, r3, #31
    badc:	d40f      	bmi.n	bafe <smp_pairing_req+0x1a6>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
    bade:	2d04      	cmp	r5, #4
    bae0:	d80f      	bhi.n	bb02 <smp_pairing_req+0x1aa>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    bae2:	4310      	orrs	r0, r2
    bae4:	f010 0004 	ands.w	r0, r0, #4
    bae8:	d0e0      	beq.n	baac <smp_pairing_req+0x154>
	return gen_method_sc[remote_io][get_io_capa()];
    baea:	f7ff fbb9 	bl	b260 <get_io_capa>
    baee:	4b69      	ldr	r3, [pc, #420]	; (bc94 <smp_pairing_req+0x33c>)
    baf0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    baf4:	441d      	add	r5, r3
    baf6:	5c28      	ldrb	r0, [r5, r0]
    baf8:	e7d8      	b.n	baac <smp_pairing_req+0x154>
		return LEGACY_OOB;
    bafa:	2006      	movs	r0, #6
    bafc:	e7d6      	b.n	baac <smp_pairing_req+0x154>
			return LE_SC_OOB;
    bafe:	2005      	movs	r0, #5
    bb00:	e7d4      	b.n	baac <smp_pairing_req+0x154>
		return JUST_WORKS;
    bb02:	2000      	movs	r0, #0
    bb04:	e7d2      	b.n	baac <smp_pairing_req+0x154>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
    bb06:	6823      	ldr	r3, [r4, #0]
    bb08:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
    bb0a:	2b03      	cmp	r3, #3
    bb0c:	d036      	beq.n	bb7c <smp_pairing_req+0x224>
    bb0e:	d822      	bhi.n	bb56 <smp_pairing_req+0x1fe>
    bb10:	3b01      	subs	r3, #1
    bb12:	2b01      	cmp	r3, #1
    bb14:	f63f af47 	bhi.w	b9a6 <smp_pairing_req+0x4e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    bb18:	2105      	movs	r1, #5
    bb1a:	4630      	mov	r0, r6
    bb1c:	f016 fa11 	bl	21f42 <atomic_test_bit>
    bb20:	2800      	cmp	r0, #0
    bb22:	f040 80c5 	bne.w	bcb0 <smp_pairing_req+0x358>
	struct bt_conn *conn = smp->chan.chan.conn;
    bb26:	6825      	ldr	r5, [r4, #0]
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
    bb28:	f105 0188 	add.w	r1, r5, #136	; 0x88
    bb2c:	7a28      	ldrb	r0, [r5, #8]
    bb2e:	f001 f85d 	bl	cbec <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
    bb32:	f894 10c8 	ldrb.w	r1, [r4, #200]	; 0xc8
    bb36:	b330      	cbz	r0, bb86 <smp_pairing_req+0x22e>
    bb38:	7b43      	ldrb	r3, [r0, #13]
    bb3a:	07db      	lsls	r3, r3, #31
    bb3c:	d523      	bpl.n	bb86 <smp_pairing_req+0x22e>
    bb3e:	bb11      	cbnz	r1, bb86 <smp_pairing_req+0x22e>
    bb40:	4b55      	ldr	r3, [pc, #340]	; (bc98 <smp_pairing_req+0x340>)
    bb42:	4956      	ldr	r1, [pc, #344]	; (bc9c <smp_pairing_req+0x344>)
		BT_ERR("JustWorks failed, authenticated keys present");
    bb44:	4856      	ldr	r0, [pc, #344]	; (bca0 <smp_pairing_req+0x348>)
    bb46:	1ac9      	subs	r1, r1, r3
    bb48:	08c9      	lsrs	r1, r1, #3
    bb4a:	0189      	lsls	r1, r1, #6
    bb4c:	f041 0101 	orr.w	r1, r1, #1
    bb50:	f012 fff2 	bl	1eb38 <log_0>
	if (ret) {
    bb54:	e727      	b.n	b9a6 <smp_pairing_req+0x4e>
	switch (sec) {
    bb56:	2b04      	cmp	r3, #4
    bb58:	f47f af25 	bne.w	b9a6 <smp_pairing_req+0x4e>
	return MIN(req->max_key_size, rsp->max_key_size);
    bb5c:	f894 30d4 	ldrb.w	r3, [r4, #212]	; 0xd4
    bb60:	f894 20cd 	ldrb.w	r2, [r4, #205]	; 0xcd
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
    bb64:	4293      	cmp	r3, r2
    bb66:	bf28      	it	cs
    bb68:	4613      	movcs	r3, r2
    bb6a:	2b10      	cmp	r3, #16
    bb6c:	f47f aefc 	bne.w	b968 <smp_pairing_req+0x10>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    bb70:	2105      	movs	r1, #5
    bb72:	4630      	mov	r0, r6
    bb74:	f016 f9e5 	bl	21f42 <atomic_test_bit>
    bb78:	2800      	cmp	r0, #0
    bb7a:	d09f      	beq.n	babc <smp_pairing_req+0x164>
		if (smp->method == JUST_WORKS) {
    bb7c:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    bb80:	2b00      	cmp	r3, #0
    bb82:	d1c9      	bne.n	bb18 <smp_pairing_req+0x1c0>
    bb84:	e79a      	b.n	babc <smp_pairing_req+0x164>
	switch (smp->method) {
    bb86:	2906      	cmp	r1, #6
    bb88:	d868      	bhi.n	bc5c <smp_pairing_req+0x304>
    bb8a:	e8df f001 	tbb	[pc, r1]
    bb8e:	5d1b      	.short	0x5d1b
    bb90:	67676732 	.word	0x67676732
    bb94:	04          	.byte	0x04
    bb95:	00          	.byte	0x00
		if (bt_auth && bt_auth->oob_data_request) {
    bb96:	4d43      	ldr	r5, [pc, #268]	; (bca4 <smp_pairing_req+0x34c>)
    bb98:	682b      	ldr	r3, [r5, #0]
    bb9a:	2b00      	cmp	r3, #0
    bb9c:	d069      	beq.n	bc72 <smp_pairing_req+0x31a>
    bb9e:	68db      	ldr	r3, [r3, #12]
    bba0:	2b00      	cmp	r3, #0
    bba2:	d066      	beq.n	bc72 <smp_pairing_req+0x31a>
			struct bt_conn_oob_info info = {
    bba4:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    bba6:	210a      	movs	r1, #10
    bba8:	4630      	mov	r0, r6
			struct bt_conn_oob_info info = {
    bbaa:	f8ad 3004 	strh.w	r3, [sp, #4]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    bbae:	f016 f8eb 	bl	21d88 <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
    bbb2:	682b      	ldr	r3, [r5, #0]
    bbb4:	6820      	ldr	r0, [r4, #0]
    bbb6:	68db      	ldr	r3, [r3, #12]
    bbb8:	a901      	add	r1, sp, #4
    bbba:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    bbbc:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    bbc0:	2b00      	cmp	r3, #0
    bbc2:	d158      	bne.n	bc76 <smp_pairing_req+0x31e>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    bbc4:	210f      	movs	r1, #15
    bbc6:	4630      	mov	r0, r6
    bbc8:	f016 f9bb 	bl	21f42 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    bbcc:	4605      	mov	r5, r0
    bbce:	2800      	cmp	r0, #0
    bbd0:	d151      	bne.n	bc76 <smp_pairing_req+0x31e>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    bbd2:	4f34      	ldr	r7, [pc, #208]	; (bca4 <smp_pairing_req+0x34c>)
    bbd4:	683b      	ldr	r3, [r7, #0]
    bbd6:	2b00      	cmp	r3, #0
    bbd8:	d04d      	beq.n	bc76 <smp_pairing_req+0x31e>
	    bt_auth && bt_auth->pairing_confirm) {
    bbda:	695b      	ldr	r3, [r3, #20]
    bbdc:	2b00      	cmp	r3, #0
    bbde:	d04a      	beq.n	bc76 <smp_pairing_req+0x31e>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    bbe0:	4630      	mov	r0, r6
    bbe2:	210a      	movs	r1, #10
    bbe4:	f016 f8d0 	bl	21d88 <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    bbe8:	683b      	ldr	r3, [r7, #0]
    bbea:	6820      	ldr	r0, [r4, #0]
    bbec:	695b      	ldr	r3, [r3, #20]
		bt_auth->pairing_confirm(conn);
    bbee:	4798      	blx	r3
		return 0;
    bbf0:	e6bb      	b.n	b96a <smp_pairing_req+0x12>
			if (bt_rand(&passkey, sizeof(passkey))) {
    bbf2:	2104      	movs	r1, #4
    bbf4:	eb0d 0001 	add.w	r0, sp, r1
    bbf8:	f003 fef6 	bl	f9e8 <bt_rand>
    bbfc:	2800      	cmp	r0, #0
    bbfe:	f47f aed2 	bne.w	b9a6 <smp_pairing_req+0x4e>
			passkey %= 1000000;
    bc02:	9901      	ldr	r1, [sp, #4]
    bc04:	4a28      	ldr	r2, [pc, #160]	; (bca8 <smp_pairing_req+0x350>)
		if (bt_auth && bt_auth->passkey_display) {
    bc06:	4f27      	ldr	r7, [pc, #156]	; (bca4 <smp_pairing_req+0x34c>)
			passkey %= 1000000;
    bc08:	fbb1 f3f2 	udiv	r3, r1, r2
    bc0c:	fb02 1313 	mls	r3, r2, r3, r1
    bc10:	9301      	str	r3, [sp, #4]
		if (bt_auth && bt_auth->passkey_display) {
    bc12:	683b      	ldr	r3, [r7, #0]
    bc14:	b153      	cbz	r3, bc2c <smp_pairing_req+0x2d4>
    bc16:	681b      	ldr	r3, [r3, #0]
    bc18:	b143      	cbz	r3, bc2c <smp_pairing_req+0x2d4>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    bc1a:	210b      	movs	r1, #11
    bc1c:	4630      	mov	r0, r6
    bc1e:	f016 f8b3 	bl	21d88 <atomic_set_bit>
			bt_auth->passkey_display(conn, passkey);
    bc22:	683b      	ldr	r3, [r7, #0]
    bc24:	9901      	ldr	r1, [sp, #4]
    bc26:	681b      	ldr	r3, [r3, #0]
    bc28:	4628      	mov	r0, r5
    bc2a:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
    bc2c:	9b01      	ldr	r3, [sp, #4]
	dst[0] = val;
    bc2e:	f884 3107 	strb.w	r3, [r4, #263]	; 0x107
	dst[1] = val >> 8;
    bc32:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
    bc36:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    bc38:	f884 3109 	strb.w	r3, [r4, #265]	; 0x109
	dst[1] = val >> 8;
    bc3c:	0a1b      	lsrs	r3, r3, #8
    bc3e:	f884 2108 	strb.w	r2, [r4, #264]	; 0x108
    bc42:	f884 310a 	strb.w	r3, [r4, #266]	; 0x10a
	if (ret) {
    bc46:	e7b9      	b.n	bbbc <smp_pairing_req+0x264>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    bc48:	4630      	mov	r0, r6
    bc4a:	210a      	movs	r1, #10
    bc4c:	f016 f89c 	bl	21d88 <atomic_set_bit>
		bt_auth->passkey_entry(conn);
    bc50:	4b14      	ldr	r3, [pc, #80]	; (bca4 <smp_pairing_req+0x34c>)
    bc52:	681b      	ldr	r3, [r3, #0]
    bc54:	4628      	mov	r0, r5
    bc56:	685b      	ldr	r3, [r3, #4]
    bc58:	4798      	blx	r3
	if (ret) {
    bc5a:	e7af      	b.n	bbbc <smp_pairing_req+0x264>
    bc5c:	4b0e      	ldr	r3, [pc, #56]	; (bc98 <smp_pairing_req+0x340>)
    bc5e:	4a0f      	ldr	r2, [pc, #60]	; (bc9c <smp_pairing_req+0x344>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    bc60:	4812      	ldr	r0, [pc, #72]	; (bcac <smp_pairing_req+0x354>)
    bc62:	1ad2      	subs	r2, r2, r3
    bc64:	08d2      	lsrs	r2, r2, #3
    bc66:	0192      	lsls	r2, r2, #6
    bc68:	f042 0201 	orr.w	r2, r2, #1
    bc6c:	f012 ff71 	bl	1eb52 <log_1>
	if (ret) {
    bc70:	e699      	b.n	b9a6 <smp_pairing_req+0x4e>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
    bc72:	2502      	movs	r5, #2
    bc74:	e679      	b.n	b96a <smp_pairing_req+0x12>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    bc76:	2103      	movs	r1, #3
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    bc78:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    bc7c:	f016 f884 	bl	21d88 <atomic_set_bit>
	return send_pairing_rsp(smp);
    bc80:	4620      	mov	r0, r4
    bc82:	f016 f9ca 	bl	2201a <send_pairing_rsp>
    bc86:	4605      	mov	r5, r0
    bc88:	e66f      	b.n	b96a <smp_pairing_req+0x12>
    bc8a:	bf00      	nop
    bc8c:	200031b8 	.word	0x200031b8
    bc90:	00027163 	.word	0x00027163
    bc94:	0002717c 	.word	0x0002717c
    bc98:	0002393c 	.word	0x0002393c
    bc9c:	00023a44 	.word	0x00023a44
    bca0:	00026f63 	.word	0x00026f63
    bca4:	20001614 	.word	0x20001614
    bca8:	000f4240 	.word	0x000f4240
    bcac:	00026ea5 	.word	0x00026ea5
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    bcb0:	f894 50c8 	ldrb.w	r5, [r4, #200]	; 0xc8
    bcb4:	b9a5      	cbnz	r5, bce0 <smp_pairing_req+0x388>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    bcb6:	210f      	movs	r1, #15
    bcb8:	4630      	mov	r0, r6
    bcba:	f016 f942 	bl	21f42 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    bcbe:	b978      	cbnz	r0, bce0 <smp_pairing_req+0x388>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    bcc0:	f8df 8020 	ldr.w	r8, [pc, #32]	; bce4 <smp_pairing_req+0x38c>
    bcc4:	f8d8 3000 	ldr.w	r3, [r8]
    bcc8:	b153      	cbz	r3, bce0 <smp_pairing_req+0x388>
	    bt_auth && bt_auth->pairing_confirm) {
    bcca:	695b      	ldr	r3, [r3, #20]
    bccc:	b143      	cbz	r3, bce0 <smp_pairing_req+0x388>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    bcce:	4630      	mov	r0, r6
    bcd0:	210a      	movs	r1, #10
    bcd2:	f016 f859 	bl	21d88 <atomic_set_bit>
		bt_auth->pairing_confirm(conn);
    bcd6:	f8d8 3000 	ldr.w	r3, [r8]
    bcda:	4638      	mov	r0, r7
    bcdc:	695b      	ldr	r3, [r3, #20]
    bcde:	e786      	b.n	bbee <smp_pairing_req+0x296>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    bce0:	210c      	movs	r1, #12
    bce2:	e7c9      	b.n	bc78 <smp_pairing_req+0x320>
    bce4:	20001614 	.word	0x20001614

0000bce8 <smp_ident_info>:
{
    bce8:	b570      	push	{r4, r5, r6, lr}
    bcea:	460b      	mov	r3, r1
    bcec:	4605      	mov	r5, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    bcee:	210d      	movs	r1, #13
    bcf0:	30c4      	adds	r0, #196	; 0xc4
    bcf2:	f016 f926 	bl	21f42 <atomic_test_bit>
    bcf6:	b338      	cbz	r0, bd48 <smp_ident_info+0x60>
		struct bt_smp_ident_info *req = (void *)buf->data;
    bcf8:	689c      	ldr	r4, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    bcfa:	682b      	ldr	r3, [r5, #0]
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
    bcfc:	f103 0688 	add.w	r6, r3, #136	; 0x88
    bd00:	7a19      	ldrb	r1, [r3, #8]
    bd02:	4632      	mov	r2, r6
    bd04:	2002      	movs	r0, #2
    bd06:	f016 fc1b 	bl	22540 <bt_keys_get_type>
		if (!keys) {
    bd0a:	b990      	cbnz	r0, bd32 <smp_ident_info+0x4a>
    bd0c:	4a12      	ldr	r2, [pc, #72]	; (bd58 <smp_ident_info+0x70>)
    bd0e:	4c13      	ldr	r4, [pc, #76]	; (bd5c <smp_ident_info+0x74>)
			BT_ERR("Unable to get keys for %s",
    bd10:	4630      	mov	r0, r6
    bd12:	1aa4      	subs	r4, r4, r2
    bd14:	f7fa f87e 	bl	5e14 <bt_addr_le_str_real>
    bd18:	f7f7 ffe8 	bl	3cec <log_strdup>
    bd1c:	08e4      	lsrs	r4, r4, #3
    bd1e:	01a4      	lsls	r4, r4, #6
    bd20:	f044 0401 	orr.w	r4, r4, #1
    bd24:	4601      	mov	r1, r0
    bd26:	4622      	mov	r2, r4
    bd28:	480d      	ldr	r0, [pc, #52]	; (bd60 <smp_ident_info+0x78>)
    bd2a:	f012 ff12 	bl	1eb52 <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    bd2e:	2008      	movs	r0, #8
}
    bd30:	bd70      	pop	{r4, r5, r6, pc}
    bd32:	4622      	mov	r2, r4
    bd34:	f100 032a 	add.w	r3, r0, #42	; 0x2a
    bd38:	f104 0110 	add.w	r1, r4, #16
    bd3c:	f852 0b04 	ldr.w	r0, [r2], #4
    bd40:	f843 0b04 	str.w	r0, [r3], #4
    bd44:	428a      	cmp	r2, r1
    bd46:	d1f9      	bne.n	bd3c <smp_ident_info+0x54>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
    bd48:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
    bd4c:	2109      	movs	r1, #9
    bd4e:	f016 f81b 	bl	21d88 <atomic_set_bit>
	return 0;
    bd52:	2000      	movs	r0, #0
    bd54:	e7ec      	b.n	bd30 <smp_ident_info+0x48>
    bd56:	bf00      	nop
    bd58:	0002393c 	.word	0x0002393c
    bd5c:	00023a44 	.word	0x00023a44
    bd60:	00026f90 	.word	0x00026f90

0000bd64 <smp_encrypt_info>:
{
    bd64:	b570      	push	{r4, r5, r6, lr}
    bd66:	460b      	mov	r3, r1
    bd68:	4605      	mov	r5, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    bd6a:	210d      	movs	r1, #13
    bd6c:	30c4      	adds	r0, #196	; 0xc4
    bd6e:	f016 f8e8 	bl	21f42 <atomic_test_bit>
    bd72:	b338      	cbz	r0, bdc4 <smp_encrypt_info+0x60>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
    bd74:	689c      	ldr	r4, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    bd76:	682b      	ldr	r3, [r5, #0]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    bd78:	f103 0688 	add.w	r6, r3, #136	; 0x88
    bd7c:	7a19      	ldrb	r1, [r3, #8]
    bd7e:	4632      	mov	r2, r6
    bd80:	2004      	movs	r0, #4
    bd82:	f016 fbdd 	bl	22540 <bt_keys_get_type>
		if (!keys) {
    bd86:	b990      	cbnz	r0, bdae <smp_encrypt_info+0x4a>
    bd88:	4a12      	ldr	r2, [pc, #72]	; (bdd4 <smp_encrypt_info+0x70>)
    bd8a:	4c13      	ldr	r4, [pc, #76]	; (bdd8 <smp_encrypt_info+0x74>)
			BT_ERR("Unable to get keys for %s",
    bd8c:	4630      	mov	r0, r6
    bd8e:	1aa4      	subs	r4, r4, r2
    bd90:	f7fa f840 	bl	5e14 <bt_addr_le_str_real>
    bd94:	f7f7 ffaa 	bl	3cec <log_strdup>
    bd98:	08e4      	lsrs	r4, r4, #3
    bd9a:	01a4      	lsls	r4, r4, #6
    bd9c:	f044 0401 	orr.w	r4, r4, #1
    bda0:	4601      	mov	r1, r0
    bda2:	4622      	mov	r2, r4
    bda4:	480d      	ldr	r0, [pc, #52]	; (bddc <smp_encrypt_info+0x78>)
    bda6:	f012 fed4 	bl	1eb52 <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    bdaa:	2008      	movs	r0, #8
}
    bdac:	bd70      	pop	{r4, r5, r6, pc}
    bdae:	4622      	mov	r2, r4
    bdb0:	f100 031a 	add.w	r3, r0, #26
    bdb4:	f104 0110 	add.w	r1, r4, #16
    bdb8:	f852 0b04 	ldr.w	r0, [r2], #4
    bdbc:	f843 0b04 	str.w	r0, [r3], #4
    bdc0:	428a      	cmp	r2, r1
    bdc2:	d1f9      	bne.n	bdb8 <smp_encrypt_info+0x54>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_MASTER_IDENT);
    bdc4:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
    bdc8:	2107      	movs	r1, #7
    bdca:	f015 ffdd 	bl	21d88 <atomic_set_bit>
	return 0;
    bdce:	2000      	movs	r0, #0
    bdd0:	e7ec      	b.n	bdac <smp_encrypt_info+0x48>
    bdd2:	bf00      	nop
    bdd4:	0002393c 	.word	0x0002393c
    bdd8:	00023a44 	.word	0x00023a44
    bddc:	00026f90 	.word	0x00026f90

0000bde0 <bt_smp_connected>:
{
    bde0:	b510      	push	{r4, lr}
	k_work_init_delayable(&work->work, handler);
    bde2:	4905      	ldr	r1, [pc, #20]	; (bdf8 <bt_smp_connected+0x18>)
    bde4:	4604      	mov	r4, r0
    bde6:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
    bdea:	f017 fa1e 	bl	2322a <k_work_init_delayable>
	smp_reset(smp);
    bdee:	4620      	mov	r0, r4
}
    bdf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
    bdf4:	f016 b971 	b.w	220da <smp_reset>
    bdf8:	0000c95d 	.word	0x0000c95d

0000bdfc <smp_pairing_confirm>:
{
    bdfc:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
    bdfe:	688d      	ldr	r5, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
    be00:	f100 06c4 	add.w	r6, r0, #196	; 0xc4
{
    be04:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
    be06:	210b      	movs	r1, #11
    be08:	4630      	mov	r0, r6
    be0a:	f015 ffe3 	bl	21dd4 <atomic_clear_bit>
    be0e:	462b      	mov	r3, r5
    be10:	f104 02d7 	add.w	r2, r4, #215	; 0xd7
    be14:	f105 0110 	add.w	r1, r5, #16
    be18:	f853 0b04 	ldr.w	r0, [r3], #4
    be1c:	f842 0b04 	str.w	r0, [r2], #4
    be20:	428b      	cmp	r3, r1
    be22:	d1f9      	bne.n	be18 <smp_pairing_confirm+0x1c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    be24:	2105      	movs	r1, #5
    be26:	4630      	mov	r0, r6
    be28:	f016 f88b 	bl	21f42 <atomic_test_bit>
    be2c:	b920      	cbnz	r0, be38 <smp_pairing_confirm+0x3c>
		return legacy_pairing_confirm(smp);
    be2e:	4620      	mov	r0, r4
}
    be30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return legacy_pairing_confirm(smp);
    be34:	f016 b9d2 	b.w	221dc <legacy_pairing_confirm>
	switch (smp->method) {
    be38:	f894 10c8 	ldrb.w	r1, [r4, #200]	; 0xc8
    be3c:	2901      	cmp	r1, #1
    be3e:	d00b      	beq.n	be58 <smp_pairing_confirm+0x5c>
    be40:	2902      	cmp	r1, #2
    be42:	d115      	bne.n	be70 <smp_pairing_confirm+0x74>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    be44:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    be48:	2104      	movs	r1, #4
    be4a:	f015 ff9d 	bl	21d88 <atomic_set_bit>
		return smp_send_pairing_confirm(smp);
    be4e:	4620      	mov	r0, r4
}
    be50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
    be54:	f7ff bc1e 	b.w	b694 <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    be58:	210a      	movs	r1, #10
    be5a:	4630      	mov	r0, r6
    be5c:	f016 f871 	bl	21f42 <atomic_test_bit>
    be60:	2800      	cmp	r0, #0
    be62:	d0ef      	beq.n	be44 <smp_pairing_confirm+0x48>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    be64:	4630      	mov	r0, r6
    be66:	2100      	movs	r1, #0
    be68:	f015 ff8e 	bl	21d88 <atomic_set_bit>
			return 0;
    be6c:	2000      	movs	r0, #0
}
    be6e:	bd70      	pop	{r4, r5, r6, pc}
    be70:	4b05      	ldr	r3, [pc, #20]	; (be88 <smp_pairing_confirm+0x8c>)
    be72:	4a06      	ldr	r2, [pc, #24]	; (be8c <smp_pairing_confirm+0x90>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    be74:	4806      	ldr	r0, [pc, #24]	; (be90 <smp_pairing_confirm+0x94>)
    be76:	1ad2      	subs	r2, r2, r3
    be78:	08d2      	lsrs	r2, r2, #3
    be7a:	0192      	lsls	r2, r2, #6
    be7c:	f042 0201 	orr.w	r2, r2, #1
    be80:	f012 fe67 	bl	1eb52 <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
    be84:	2008      	movs	r0, #8
    be86:	e7f2      	b.n	be6e <smp_pairing_confirm+0x72>
    be88:	0002393c 	.word	0x0002393c
    be8c:	00023a44 	.word	0x00023a44
    be90:	00026ea5 	.word	0x00026ea5

0000be94 <smp_pairing_random>:
{
    be94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    be98:	688b      	ldr	r3, [r1, #8]
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    be9a:	f100 08f7 	add.w	r8, r0, #247	; 0xf7
{
    be9e:	b09c      	sub	sp, #112	; 0x70
    bea0:	4604      	mov	r4, r0
    bea2:	4642      	mov	r2, r8
    bea4:	f103 0110 	add.w	r1, r3, #16
    bea8:	f853 0b04 	ldr.w	r0, [r3], #4
    beac:	f842 0b04 	str.w	r0, [r2], #4
    beb0:	428b      	cmp	r3, r1
    beb2:	d1f9      	bne.n	bea8 <smp_pairing_random+0x14>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    beb4:	f104 06c4 	add.w	r6, r4, #196	; 0xc4
    beb8:	2105      	movs	r1, #5
    beba:	4630      	mov	r0, r6
    bebc:	f016 f841 	bl	21f42 <atomic_test_bit>
    bec0:	2800      	cmp	r0, #0
    bec2:	d14d      	bne.n	bf60 <smp_pairing_random+0xcc>
	struct bt_conn *conn = smp->chan.chan.conn;
    bec4:	6823      	ldr	r3, [r4, #0]
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    bec6:	f204 1707 	addw	r7, r4, #263	; 0x107
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    beca:	f103 0296 	add.w	r2, r3, #150	; 0x96
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    bece:	ad08      	add	r5, sp, #32
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    bed0:	338f      	adds	r3, #143	; 0x8f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    bed2:	9201      	str	r2, [sp, #4]
    bed4:	9300      	str	r3, [sp, #0]
    bed6:	9502      	str	r5, [sp, #8]
    bed8:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    bedc:	f104 02c9 	add.w	r2, r4, #201	; 0xc9
    bee0:	4641      	mov	r1, r8
    bee2:	4638      	mov	r0, r7
    bee4:	f016 f91e 	bl	22124 <smp_c1>
	if (err) {
    bee8:	bb20      	cbnz	r0, bf34 <smp_pairing_random+0xa0>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
    beea:	2210      	movs	r2, #16
    beec:	4629      	mov	r1, r5
    beee:	f104 00d7 	add.w	r0, r4, #215	; 0xd7
    bef2:	f017 fba8 	bl	23646 <memcmp>
    bef6:	2800      	cmp	r0, #0
    bef8:	f040 8098 	bne.w	c02c <smp_pairing_random+0x198>
	memcpy(out + 8, r1, 8);
    befc:	4622      	mov	r2, r4
	memcpy(out, r2, 8);
    befe:	f8d8 0000 	ldr.w	r0, [r8]
    bf02:	f8d8 1004 	ldr.w	r1, [r8, #4]
    bf06:	462b      	mov	r3, r5
    bf08:	c303      	stmia	r3!, {r0, r1}
	memcpy(out + 8, r1, 8);
    bf0a:	f852 0fe7 	ldr.w	r0, [r2, #231]!
    bf0e:	6851      	ldr	r1, [r2, #4]
    bf10:	ab0a      	add	r3, sp, #40	; 0x28
    bf12:	c303      	stmia	r3!, {r0, r1}
	return bt_encrypt_le(k, out, out);
    bf14:	462a      	mov	r2, r5
    bf16:	4629      	mov	r1, r5
    bf18:	4638      	mov	r0, r7
    bf1a:	f003 fd67 	bl	f9ec <bt_encrypt_le>
		if (err) {
    bf1e:	b158      	cbz	r0, bf38 <smp_pairing_random+0xa4>
    bf20:	4976      	ldr	r1, [pc, #472]	; (c0fc <smp_pairing_random+0x268>)
    bf22:	4b77      	ldr	r3, [pc, #476]	; (c100 <smp_pairing_random+0x26c>)
			BT_ERR("Calculate STK failed");
    bf24:	4877      	ldr	r0, [pc, #476]	; (c104 <smp_pairing_random+0x270>)
    bf26:	1ac9      	subs	r1, r1, r3
    bf28:	08c9      	lsrs	r1, r1, #3
    bf2a:	0189      	lsls	r1, r1, #6
    bf2c:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Calculate confirm failed");
    bf30:	f012 fe02 	bl	1eb38 <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
    bf34:	2508      	movs	r5, #8
    bf36:	e07a      	b.n	c02e <smp_pairing_random+0x19a>
    bf38:	463b      	mov	r3, r7
    bf3a:	af0c      	add	r7, sp, #48	; 0x30
    bf3c:	462a      	mov	r2, r5
    bf3e:	ca03      	ldmia	r2!, {r0, r1}
    bf40:	42ba      	cmp	r2, r7
    bf42:	6018      	str	r0, [r3, #0]
    bf44:	6059      	str	r1, [r3, #4]
    bf46:	4615      	mov	r5, r2
    bf48:	f103 0308 	add.w	r3, r3, #8
    bf4c:	d1f6      	bne.n	bf3c <smp_pairing_random+0xa8>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    bf4e:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    bf50:	4630      	mov	r0, r6
    bf52:	f015 ff19 	bl	21d88 <atomic_set_bit>
	return smp_send_pairing_random(smp);
    bf56:	4620      	mov	r0, r4
    bf58:	f016 f841 	bl	21fde <smp_send_pairing_random>
    bf5c:	4605      	mov	r5, r0
    bf5e:	e066      	b.n	c02e <smp_pairing_random+0x19a>
	switch (smp->method) {
    bf60:	f894 10c8 	ldrb.w	r1, [r4, #200]	; 0xc8
    bf64:	2905      	cmp	r1, #5
    bf66:	f200 80a9 	bhi.w	c0bc <smp_pairing_random+0x228>
    bf6a:	e8df f001 	tbb	[pc, r1]
    bf6e:	3c35      	.short	0x3c35
    bf70:	89a7033c 	.word	0x89a7033c
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
    bf74:	4b64      	ldr	r3, [pc, #400]	; (c108 <smp_pairing_random+0x274>)
	sys_memcpy_swap(m, u, 32);
    bf76:	2220      	movs	r2, #32
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
    bf78:	681d      	ldr	r5, [r3, #0]
	sys_memcpy_swap(m, u, 32);
    bf7a:	eb0d 0002 	add.w	r0, sp, r2
    bf7e:	f204 1117 	addw	r1, r4, #279	; 0x117
    bf82:	f015 fef5 	bl	21d70 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
    bf86:	2220      	movs	r2, #32
    bf88:	4629      	mov	r1, r5
    bf8a:	a810      	add	r0, sp, #64	; 0x40
    bf8c:	f015 fef0 	bl	21d70 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
    bf90:	2210      	movs	r2, #16
    bf92:	f104 01e7 	add.w	r1, r4, #231	; 0xe7
    bf96:	a818      	add	r0, sp, #96	; 0x60
    bf98:	f015 feea 	bl	21d70 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
    bf9c:	2210      	movs	r2, #16
    bf9e:	eb0d 0002 	add.w	r0, sp, r2
    bfa2:	4641      	mov	r1, r8
    bfa4:	f015 fee4 	bl	21d70 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
    bfa8:	ab04      	add	r3, sp, #16
    bfaa:	2250      	movs	r2, #80	; 0x50
    bfac:	a908      	add	r1, sp, #32
    bfae:	4618      	mov	r0, r3
    bfb0:	f015 ff26 	bl	21e00 <bt_smp_aes_cmac>
	if (err) {
    bfb4:	2800      	cmp	r0, #0
    bfb6:	d1bd      	bne.n	bf34 <smp_pairing_random+0xa0>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    bfb8:	210a      	movs	r1, #10
    bfba:	4630      	mov	r0, r6
    bfbc:	9d07      	ldr	r5, [sp, #28]
    bfbe:	f015 fee3 	bl	21d88 <atomic_set_bit>
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    bfc2:	4a52      	ldr	r2, [pc, #328]	; (c10c <smp_pairing_random+0x278>)
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    bfc4:	4b52      	ldr	r3, [pc, #328]	; (c110 <smp_pairing_random+0x27c>)
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    bfc6:	6812      	ldr	r2, [r2, #0]
    bfc8:	6820      	ldr	r0, [r4, #0]
    bfca:	6892      	ldr	r2, [r2, #8]
    bfcc:	ba2d      	rev	r5, r5
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    bfce:	fbb5 f1f3 	udiv	r1, r5, r3
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    bfd2:	fb03 5111 	mls	r1, r3, r1, r5
    bfd6:	4790      	blx	r2
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    bfd8:	210d      	movs	r1, #13
    bfda:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    bfde:	f015 fed3 	bl	21d88 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    bfe2:	2110      	movs	r1, #16
    bfe4:	e7b4      	b.n	bf50 <smp_pairing_random+0xbc>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    bfe6:	f894 219c 	ldrb.w	r2, [r4, #412]	; 0x19c
    bfea:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    bfee:	4946      	ldr	r1, [pc, #280]	; (c108 <smp_pairing_random+0x274>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    bff0:	40d3      	lsrs	r3, r2
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    bff2:	ad08      	add	r5, sp, #32
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    bff4:	f003 0301 	and.w	r3, r3, #1
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    bff8:	9500      	str	r5, [sp, #0]
    bffa:	6809      	ldr	r1, [r1, #0]
    bffc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c000:	4642      	mov	r2, r8
    c002:	f204 1017 	addw	r0, r4, #279	; 0x117
    c006:	f015 ff75 	bl	21ef4 <smp_f4>
    c00a:	b140      	cbz	r0, c01e <smp_pairing_random+0x18a>
    c00c:	493b      	ldr	r1, [pc, #236]	; (c0fc <smp_pairing_random+0x268>)
    c00e:	4b3c      	ldr	r3, [pc, #240]	; (c100 <smp_pairing_random+0x26c>)
		BT_ERR("Calculate confirm failed");
    c010:	4840      	ldr	r0, [pc, #256]	; (c114 <smp_pairing_random+0x280>)
    c012:	1ac9      	subs	r1, r1, r3
    c014:	08c9      	lsrs	r1, r1, #3
    c016:	0189      	lsls	r1, r1, #6
    c018:	f041 0101 	orr.w	r1, r1, #1
    c01c:	e788      	b.n	bf30 <smp_pairing_random+0x9c>
	if (memcmp(smp->pcnf, cfm, 16)) {
    c01e:	2210      	movs	r2, #16
    c020:	4629      	mov	r1, r5
    c022:	f104 00d7 	add.w	r0, r4, #215	; 0xd7
    c026:	f017 fb0e 	bl	23646 <memcmp>
    c02a:	b120      	cbz	r0, c036 <smp_pairing_random+0x1a2>
		return BT_SMP_ERR_CONFIRM_FAILED;
    c02c:	2504      	movs	r5, #4
}
    c02e:	4628      	mov	r0, r5
    c030:	b01c      	add	sp, #112	; 0x70
    c032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		atomic_set_bit(smp->allowed_cmds,
    c036:	f104 07c0 	add.w	r7, r4, #192	; 0xc0
    c03a:	2103      	movs	r1, #3
    c03c:	4638      	mov	r0, r7
    c03e:	f015 fea3 	bl	21d88 <atomic_set_bit>
		err = smp_send_pairing_random(smp);
    c042:	4620      	mov	r0, r4
    c044:	f015 ffcb 	bl	21fde <smp_send_pairing_random>
		if (err) {
    c048:	4605      	mov	r5, r0
    c04a:	2800      	cmp	r0, #0
    c04c:	d1ef      	bne.n	c02e <smp_pairing_random+0x19a>
		smp->passkey_round++;
    c04e:	f894 319c 	ldrb.w	r3, [r4, #412]	; 0x19c
    c052:	3301      	adds	r3, #1
    c054:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
    c056:	2b14      	cmp	r3, #20
		smp->passkey_round++;
    c058:	f884 319c 	strb.w	r3, [r4, #412]	; 0x19c
		if (smp->passkey_round == 20U) {
    c05c:	d108      	bne.n	c070 <smp_pairing_random+0x1dc>
			atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    c05e:	4638      	mov	r0, r7
    c060:	210d      	movs	r1, #13
    c062:	f015 fe91 	bl	21d88 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    c066:	2110      	movs	r1, #16
    c068:	4630      	mov	r0, r6
    c06a:	f015 fe8d 	bl	21d88 <atomic_set_bit>
			return 0;
    c06e:	e7de      	b.n	c02e <smp_pairing_random+0x19a>
		if (bt_rand(smp->prnd, 16)) {
    c070:	2110      	movs	r1, #16
    c072:	f104 00e7 	add.w	r0, r4, #231	; 0xe7
    c076:	f003 fcb7 	bl	f9e8 <bt_rand>
    c07a:	2800      	cmp	r0, #0
    c07c:	d0d7      	beq.n	c02e <smp_pairing_random+0x19a>
    c07e:	e759      	b.n	bf34 <smp_pairing_random+0xa0>
		if (bt_rand(smp->prnd, 16)) {
    c080:	2110      	movs	r1, #16
    c082:	f104 00e7 	add.w	r0, r4, #231	; 0xe7
    c086:	f003 fcaf 	bl	f9e8 <bt_rand>
    c08a:	2800      	cmp	r0, #0
    c08c:	f47f af52 	bne.w	bf34 <smp_pairing_random+0xa0>
		if (bt_auth && bt_auth->oob_data_request) {
    c090:	4f1e      	ldr	r7, [pc, #120]	; (c10c <smp_pairing_random+0x278>)
    c092:	683b      	ldr	r3, [r7, #0]
    c094:	b1eb      	cbz	r3, c0d2 <smp_pairing_random+0x23e>
    c096:	68db      	ldr	r3, [r3, #12]
    c098:	b1db      	cbz	r3, c0d2 <smp_pairing_random+0x23e>
			struct bt_conn_oob_info info = {
    c09a:	4b1f      	ldr	r3, [pc, #124]	; (c118 <smp_pairing_random+0x284>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    c09c:	f894 20cb 	ldrb.w	r2, [r4, #203]	; 0xcb
			struct bt_conn_oob_info info = {
    c0a0:	881b      	ldrh	r3, [r3, #0]
    c0a2:	f8ad 3020 	strh.w	r3, [sp, #32]
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    c0a6:	f894 30d2 	ldrb.w	r3, [r4, #210]	; 0xd2
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
    c0aa:	07d2      	lsls	r2, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    c0ac:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
    c0b0:	d411      	bmi.n	c0d6 <smp_pairing_random+0x242>
				     BT_CONN_OOB_BOTH_PEERS :
    c0b2:	2b00      	cmp	r3, #0
    c0b4:	bf0c      	ite	eq
    c0b6:	2003      	moveq	r0, #3
    c0b8:	2001      	movne	r0, #1
    c0ba:	e00f      	b.n	c0dc <smp_pairing_random+0x248>
    c0bc:	4b10      	ldr	r3, [pc, #64]	; (c100 <smp_pairing_random+0x26c>)
    c0be:	4a0f      	ldr	r2, [pc, #60]	; (c0fc <smp_pairing_random+0x268>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    c0c0:	4816      	ldr	r0, [pc, #88]	; (c11c <smp_pairing_random+0x288>)
    c0c2:	1ad2      	subs	r2, r2, r3
    c0c4:	08d2      	lsrs	r2, r2, #3
    c0c6:	0192      	lsls	r2, r2, #6
    c0c8:	f042 0201 	orr.w	r2, r2, #1
    c0cc:	f012 fd41 	bl	1eb52 <log_1>
    c0d0:	e730      	b.n	bf34 <smp_pairing_random+0xa0>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
    c0d2:	2502      	movs	r5, #2
    c0d4:	e7ab      	b.n	c02e <smp_pairing_random+0x19a>
				     BT_CONN_OOB_BOTH_PEERS :
    c0d6:	2b00      	cmp	r3, #0
    c0d8:	bf18      	it	ne
    c0da:	2002      	movne	r0, #2
			smp->oobd_local = NULL;
    c0dc:	2500      	movs	r5, #0
	info->lesc.oob_config = oob_config;
    c0de:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
			smp->oobd_remote = NULL;
    c0e2:	e9c4 5568 	strd	r5, r5, [r4, #416]	; 0x1a0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
    c0e6:	4630      	mov	r0, r6
    c0e8:	210c      	movs	r1, #12
    c0ea:	f015 fe4d 	bl	21d88 <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
    c0ee:	683b      	ldr	r3, [r7, #0]
    c0f0:	6820      	ldr	r0, [r4, #0]
    c0f2:	68db      	ldr	r3, [r3, #12]
    c0f4:	a908      	add	r1, sp, #32
    c0f6:	4798      	blx	r3
			return 0;
    c0f8:	e799      	b.n	c02e <smp_pairing_random+0x19a>
    c0fa:	bf00      	nop
    c0fc:	00023a44 	.word	0x00023a44
    c100:	0002393c 	.word	0x0002393c
    c104:	00026faa 	.word	0x00026faa
    c108:	200016a8 	.word	0x200016a8
    c10c:	20001614 	.word	0x20001614
    c110:	000f4240 	.word	0x000f4240
    c114:	00026fbf 	.word	0x00026fbf
    c118:	00023beb 	.word	0x00023beb
    c11c:	00026ea5 	.word	0x00026ea5

0000c120 <bt_smp_start_security>:
{
    c120:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
    c124:	78c4      	ldrb	r4, [r0, #3]
    c126:	2c01      	cmp	r4, #1
{
    c128:	4605      	mov	r5, r0
	switch (conn->role) {
    c12a:	d005      	beq.n	c138 <bt_smp_start_security+0x18>
		return -EINVAL;
    c12c:	f06f 0415 	mvn.w	r4, #21
}
    c130:	4620      	mov	r0, r4
    c132:	b003      	add	sp, #12
    c134:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
    c138:	f7ff f8fc 	bl	b334 <smp_chan_get>
	if (!smp) {
    c13c:	4606      	mov	r6, r0
    c13e:	2800      	cmp	r0, #0
    c140:	f000 80a1 	beq.w	c286 <bt_smp_start_security+0x166>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    c144:	f100 07c4 	add.w	r7, r0, #196	; 0xc4
    c148:	2104      	movs	r1, #4
    c14a:	4638      	mov	r0, r7
    c14c:	f015 fef9 	bl	21f42 <atomic_test_bit>
    c150:	2800      	cmp	r0, #0
    c152:	f040 809b 	bne.w	c28c <bt_smp_start_security+0x16c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    c156:	2103      	movs	r1, #3
    c158:	4638      	mov	r0, r7
    c15a:	f015 fef2 	bl	21f42 <atomic_test_bit>
    c15e:	b110      	cbz	r0, c166 <bt_smp_start_security+0x46>
		return -EBUSY;
    c160:	f06f 040f 	mvn.w	r4, #15
    c164:	e7e4      	b.n	c130 <bt_smp_start_security+0x10>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    c166:	4621      	mov	r1, r4
    c168:	4638      	mov	r0, r7
    c16a:	f015 feea 	bl	21f42 <atomic_test_bit>
    c16e:	2800      	cmp	r0, #0
    c170:	d1f6      	bne.n	c160 <bt_smp_start_security+0x40>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
    c172:	7aab      	ldrb	r3, [r5, #10]
	switch (conn->required_sec_level) {
    c174:	2b03      	cmp	r3, #3
    c176:	d03d      	beq.n	c1f4 <bt_smp_start_security+0xd4>
    c178:	d82c      	bhi.n	c1d4 <bt_smp_start_security+0xb4>
    c17a:	3b01      	subs	r3, #1
    c17c:	2b01      	cmp	r3, #1
    c17e:	d947      	bls.n	c210 <bt_smp_start_security+0xf0>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
    c180:	210b      	movs	r1, #11
    c182:	1d28      	adds	r0, r5, #4
    c184:	f015 fedd 	bl	21f42 <atomic_test_bit>
    c188:	2800      	cmp	r0, #0
    c18a:	d1cf      	bne.n	c12c <bt_smp_start_security+0xc>
	if (!conn->le.keys) {
    c18c:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    c190:	b983      	cbnz	r3, c1b4 <bt_smp_start_security+0x94>
						     conn->id, &conn->le.dst);
    c192:	f105 0488 	add.w	r4, r5, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
    c196:	7a29      	ldrb	r1, [r5, #8]
    c198:	4622      	mov	r2, r4
    c19a:	2020      	movs	r0, #32
    c19c:	f000 fcd6 	bl	cb4c <bt_keys_find>
    c1a0:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
    c1a4:	b930      	cbnz	r0, c1b4 <bt_smp_start_security+0x94>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
    c1a6:	7a29      	ldrb	r1, [r5, #8]
    c1a8:	4622      	mov	r2, r4
    c1aa:	2004      	movs	r0, #4
    c1ac:	f000 fcce 	bl	cb4c <bt_keys_find>
    c1b0:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
    c1b4:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    c1b8:	2b00      	cmp	r3, #0
    c1ba:	d0b7      	beq.n	c12c <bt_smp_start_security+0xc>
    c1bc:	89da      	ldrh	r2, [r3, #14]
    c1be:	f002 0224 	and.w	r2, r2, #36	; 0x24
    c1c2:	2a00      	cmp	r2, #0
    c1c4:	d0b2      	beq.n	c12c <bt_smp_start_security+0xc>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
    c1c6:	7aaa      	ldrb	r2, [r5, #10]
    c1c8:	2a02      	cmp	r2, #2
    c1ca:	d921      	bls.n	c210 <bt_smp_start_security+0xf0>
    c1cc:	7b5b      	ldrb	r3, [r3, #13]
    c1ce:	07db      	lsls	r3, r3, #31
    c1d0:	d5ac      	bpl.n	c12c <bt_smp_start_security+0xc>
    c1d2:	e01d      	b.n	c210 <bt_smp_start_security+0xf0>
	switch (conn->required_sec_level) {
    c1d4:	2b04      	cmp	r3, #4
    c1d6:	d1d3      	bne.n	c180 <bt_smp_start_security+0x60>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    c1d8:	f7ff f842 	bl	b260 <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    c1dc:	2803      	cmp	r0, #3
    c1de:	d104      	bne.n	c1ea <bt_smp_start_security+0xca>
    c1e0:	4b2c      	ldr	r3, [pc, #176]	; (c294 <bt_smp_start_security+0x174>)
    c1e2:	681b      	ldr	r3, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    c1e4:	b1fb      	cbz	r3, c226 <bt_smp_start_security+0x106>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    c1e6:	68dc      	ldr	r4, [r3, #12]
    c1e8:	b10c      	cbz	r4, c1ee <bt_smp_start_security+0xce>
    c1ea:	4b2b      	ldr	r3, [pc, #172]	; (c298 <bt_smp_start_security+0x178>)
    c1ec:	781c      	ldrb	r4, [r3, #0]
    c1ee:	f004 0401 	and.w	r4, r4, #1
    c1f2:	e00b      	b.n	c20c <bt_smp_start_security+0xec>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    c1f4:	f7ff f834 	bl	b260 <get_io_capa>
    c1f8:	2803      	cmp	r0, #3
    c1fa:	d107      	bne.n	c20c <bt_smp_start_security+0xec>
		       (bt_auth && bt_auth->oob_data_request);
    c1fc:	4b25      	ldr	r3, [pc, #148]	; (c294 <bt_smp_start_security+0x174>)
    c1fe:	681c      	ldr	r4, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    c200:	2c00      	cmp	r4, #0
    c202:	d0bd      	beq.n	c180 <bt_smp_start_security+0x60>
		       (bt_auth && bt_auth->oob_data_request);
    c204:	68e4      	ldr	r4, [r4, #12]
    c206:	3c00      	subs	r4, #0
    c208:	bf18      	it	ne
    c20a:	2401      	movne	r4, #1
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
    c20c:	2c00      	cmp	r4, #0
    c20e:	d0b7      	beq.n	c180 <bt_smp_start_security+0x60>
	if (!conn->le.keys) {
    c210:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    c214:	b14b      	cbz	r3, c22a <bt_smp_start_security+0x10a>
	if (smp_init(smp) != 0) {
    c216:	4630      	mov	r0, r6
    c218:	f7ff f8c6 	bl	b3a8 <smp_init>
    c21c:	4604      	mov	r4, r0
    c21e:	b180      	cbz	r0, c242 <bt_smp_start_security+0x122>
		return -ENOBUFS;
    c220:	f06f 0468 	mvn.w	r4, #104	; 0x68
    c224:	e784      	b.n	c130 <bt_smp_start_security+0x10>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    c226:	2400      	movs	r4, #0
    c228:	e7e1      	b.n	c1ee <bt_smp_start_security+0xce>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    c22a:	7a28      	ldrb	r0, [r5, #8]
    c22c:	f105 0188 	add.w	r1, r5, #136	; 0x88
    c230:	f000 fc56 	bl	cae0 <bt_keys_get_addr>
    c234:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
    c238:	2800      	cmp	r0, #0
    c23a:	d1ec      	bne.n	c216 <bt_smp_start_security+0xf6>
			return -ENOMEM;
    c23c:	f06f 040b 	mvn.w	r4, #11
    c240:	e776      	b.n	c130 <bt_smp_start_security+0x10>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
    c242:	210b      	movs	r1, #11
    c244:	4630      	mov	r0, r6
    c246:	f015 feaa 	bl	21f9e <smp_create_pdu.isra.0>
	if (!req_buf) {
    c24a:	4680      	mov	r8, r0
    c24c:	2800      	cmp	r0, #0
    c24e:	d0e7      	beq.n	c220 <bt_smp_start_security+0x100>
    c250:	2101      	movs	r1, #1
    c252:	3008      	adds	r0, #8
    c254:	f016 f9ed 	bl	22632 <net_buf_simple_add>
    c258:	4681      	mov	r9, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
    c25a:	2009      	movs	r0, #9
    c25c:	f7ff f84c 	bl	b2f8 <get_auth.isra.0>
    c260:	4623      	mov	r3, r4
    c262:	f889 0000 	strb.w	r0, [r9]
    c266:	4642      	mov	r2, r8
    c268:	9400      	str	r4, [sp, #0]
    c26a:	2106      	movs	r1, #6
    c26c:	4628      	mov	r0, r5
    c26e:	f014 ff50 	bl	21112 <bt_l2cap_send_cb>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    c272:	4638      	mov	r0, r7
    c274:	210f      	movs	r1, #15
    c276:	f015 fd87 	bl	21d88 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
    c27a:	2101      	movs	r1, #1
    c27c:	f106 00c0 	add.w	r0, r6, #192	; 0xc0
    c280:	f015 fd82 	bl	21d88 <atomic_set_bit>
	return 0;
    c284:	e754      	b.n	c130 <bt_smp_start_security+0x10>
		return -ENOTCONN;
    c286:	f06f 047f 	mvn.w	r4, #127	; 0x7f
    c28a:	e751      	b.n	c130 <bt_smp_start_security+0x10>
		return -EIO;
    c28c:	f06f 0404 	mvn.w	r4, #4
    c290:	e74e      	b.n	c130 <bt_smp_start_security+0x10>
    c292:	bf00      	nop
    c294:	20001614 	.word	0x20001614
    c298:	200031b9 	.word	0x200031b9

0000c29c <smp_pairing_complete>:
{
    c29c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    c2a0:	4606      	mov	r6, r0
    c2a2:	f8df 80ac 	ldr.w	r8, [pc, #172]	; c350 <smp_pairing_complete+0xb4>
    c2a6:	f856 4bc4 	ldr.w	r4, [r6], #196
{
    c2aa:	4607      	mov	r7, r0
	if (!status) {
    c2ac:	b9b9      	cbnz	r1, c2de <smp_pairing_complete+0x42>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
    c2ae:	210d      	movs	r1, #13
    c2b0:	4630      	mov	r0, r6
    c2b2:	f015 fe46 	bl	21f42 <atomic_test_bit>
		if (bt_auth && bt_auth->pairing_complete) {
    c2b6:	f8d8 3000 	ldr.w	r3, [r8]
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
    c2ba:	4601      	mov	r1, r0
		if (bt_auth && bt_auth->pairing_complete) {
    c2bc:	b11b      	cbz	r3, c2c6 <smp_pairing_complete+0x2a>
    c2be:	699b      	ldr	r3, [r3, #24]
    c2c0:	b10b      	cbz	r3, c2c6 <smp_pairing_complete+0x2a>
			bt_auth->pairing_failed(conn, security_err);
    c2c2:	4620      	mov	r0, r4
    c2c4:	4798      	blx	r3
	smp_reset(smp);
    c2c6:	4638      	mov	r0, r7
    c2c8:	f015 ff07 	bl	220da <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
    c2cc:	7a62      	ldrb	r2, [r4, #9]
    c2ce:	7aa3      	ldrb	r3, [r4, #10]
    c2d0:	429a      	cmp	r2, r3
    c2d2:	d036      	beq.n	c342 <smp_pairing_complete+0xa6>
		bt_smp_start_security(conn);
    c2d4:	4620      	mov	r0, r4
}
    c2d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_smp_start_security(conn);
    c2da:	f7ff bf21 	b.w	c120 <bt_smp_start_security>
	switch (smp_err) {
    c2de:	3901      	subs	r1, #1
    c2e0:	b2c9      	uxtb	r1, r1
    c2e2:	290d      	cmp	r1, #13
    c2e4:	bf9c      	itt	ls
    c2e6:	4b18      	ldrls	r3, [pc, #96]	; (c348 <smp_pairing_complete+0xac>)
    c2e8:	5c5d      	ldrbls	r5, [r3, r1]
		if (conn->le.keys &&
    c2ea:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
	if (!status) {
    c2ee:	bf88      	it	hi
    c2f0:	2508      	movhi	r5, #8
		if (conn->le.keys &&
    c2f2:	b143      	cbz	r3, c306 <smp_pairing_complete+0x6a>
    c2f4:	7b1b      	ldrb	r3, [r3, #12]
    c2f6:	b9eb      	cbnz	r3, c334 <smp_pairing_complete+0x98>
			bt_keys_clear(conn->le.keys);
    c2f8:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    c2fc:	f016 f934 	bl	22568 <bt_keys_clear>
			conn->le.keys = NULL;
    c300:	2300      	movs	r3, #0
    c302:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
    c306:	2102      	movs	r1, #2
    c308:	4630      	mov	r0, r6
    c30a:	f015 fe1a 	bl	21f42 <atomic_test_bit>
    c30e:	b940      	cbnz	r0, c322 <smp_pairing_complete+0x86>
	switch (err) {
    c310:	2d08      	cmp	r5, #8
    c312:	bf16      	itet	ne
    c314:	4b0d      	ldrne	r3, [pc, #52]	; (c34c <smp_pairing_complete+0xb0>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
    c316:	211f      	moveq	r1, #31
    c318:	5d59      	ldrbne	r1, [r3, r5]
			bt_conn_security_changed(conn,
    c31a:	462a      	mov	r2, r5
    c31c:	4620      	mov	r0, r4
    c31e:	f7fc fb87 	bl	8a30 <bt_conn_security_changed>
		if (bt_auth && bt_auth->pairing_failed) {
    c322:	f8d8 3000 	ldr.w	r3, [r8]
    c326:	2b00      	cmp	r3, #0
    c328:	d0cd      	beq.n	c2c6 <smp_pairing_complete+0x2a>
    c32a:	69db      	ldr	r3, [r3, #28]
    c32c:	2b00      	cmp	r3, #0
    c32e:	d0ca      	beq.n	c2c6 <smp_pairing_complete+0x2a>
			bt_auth->pairing_failed(conn, security_err);
    c330:	4629      	mov	r1, r5
    c332:	e7c6      	b.n	c2c2 <smp_pairing_complete+0x26>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
    c334:	2102      	movs	r1, #2
    c336:	4630      	mov	r0, r6
    c338:	f015 fe03 	bl	21f42 <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
    c33c:	2800      	cmp	r0, #0
    c33e:	d1db      	bne.n	c2f8 <smp_pairing_complete+0x5c>
    c340:	e7e1      	b.n	c306 <smp_pairing_complete+0x6a>
}
    c342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c346:	bf00      	nop
    c348:	00027145 	.word	0x00027145
    c34c:	0002715b 	.word	0x0002715b
    c350:	20001614 	.word	0x20001614

0000c354 <bt_smp_recv>:
{
    c354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    c356:	898b      	ldrh	r3, [r1, #12]
{
    c358:	4604      	mov	r4, r0
    c35a:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    c35c:	b95b      	cbnz	r3, c376 <bt_smp_recv+0x22>
    c35e:	493a      	ldr	r1, [pc, #232]	; (c448 <bt_smp_recv+0xf4>)
    c360:	4b3a      	ldr	r3, [pc, #232]	; (c44c <bt_smp_recv+0xf8>)
		BT_ERR("Too small SMP PDU received");
    c362:	483b      	ldr	r0, [pc, #236]	; (c450 <bt_smp_recv+0xfc>)
    c364:	1ac9      	subs	r1, r1, r3
    c366:	08c9      	lsrs	r1, r1, #3
    c368:	0189      	lsls	r1, r1, #6
    c36a:	f041 0101 	orr.w	r1, r1, #1
    c36e:	f012 fbe3 	bl	1eb38 <log_0>
}
    c372:	2000      	movs	r0, #0
    c374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
    c376:	2101      	movs	r1, #1
    c378:	f105 0008 	add.w	r0, r5, #8
    c37c:	f016 f981 	bl	22682 <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    c380:	2104      	movs	r1, #4
    c382:	4606      	mov	r6, r0
    c384:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    c388:	f015 fddb 	bl	21f42 <atomic_test_bit>
    c38c:	7831      	ldrb	r1, [r6, #0]
    c38e:	b150      	cbz	r0, c3a6 <bt_smp_recv+0x52>
    c390:	4a2d      	ldr	r2, [pc, #180]	; (c448 <bt_smp_recv+0xf4>)
    c392:	4b2e      	ldr	r3, [pc, #184]	; (c44c <bt_smp_recv+0xf8>)
		BT_WARN("SMP command (code 0x%02x) received after timeout",
    c394:	482f      	ldr	r0, [pc, #188]	; (c454 <bt_smp_recv+0x100>)
    c396:	1ad2      	subs	r2, r2, r3
    c398:	08d2      	lsrs	r2, r2, #3
    c39a:	0192      	lsls	r2, r2, #6
    c39c:	f042 0202 	orr.w	r2, r2, #2
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
    c3a0:	f012 fbd7 	bl	1eb52 <log_1>
		return 0;
    c3a4:	e7e5      	b.n	c372 <bt_smp_recv+0x1e>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
    c3a6:	290e      	cmp	r1, #14
    c3a8:	d908      	bls.n	c3bc <bt_smp_recv+0x68>
    c3aa:	4a27      	ldr	r2, [pc, #156]	; (c448 <bt_smp_recv+0xf4>)
    c3ac:	4b27      	ldr	r3, [pc, #156]	; (c44c <bt_smp_recv+0xf8>)
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
    c3ae:	482a      	ldr	r0, [pc, #168]	; (c458 <bt_smp_recv+0x104>)
    c3b0:	1ad2      	subs	r2, r2, r3
    c3b2:	08d2      	lsrs	r2, r2, #3
    c3b4:	0192      	lsls	r2, r2, #6
    c3b6:	f042 0202 	orr.w	r2, r2, #2
    c3ba:	e7f1      	b.n	c3a0 <bt_smp_recv+0x4c>
	if (!handlers[hdr->code].func) {
    c3bc:	4f27      	ldr	r7, [pc, #156]	; (c45c <bt_smp_recv+0x108>)
    c3be:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
    c3c2:	b973      	cbnz	r3, c3e2 <bt_smp_recv+0x8e>
    c3c4:	4b21      	ldr	r3, [pc, #132]	; (c44c <bt_smp_recv+0xf8>)
    c3c6:	4a20      	ldr	r2, [pc, #128]	; (c448 <bt_smp_recv+0xf4>)
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
    c3c8:	4825      	ldr	r0, [pc, #148]	; (c460 <bt_smp_recv+0x10c>)
    c3ca:	1ad2      	subs	r2, r2, r3
    c3cc:	08d2      	lsrs	r2, r2, #3
    c3ce:	0192      	lsls	r2, r2, #6
    c3d0:	f042 0202 	orr.w	r2, r2, #2
    c3d4:	f012 fbbd 	bl	1eb52 <log_1>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
    c3d8:	2107      	movs	r1, #7
		smp_error(smp, err);
    c3da:	4620      	mov	r0, r4
    c3dc:	f015 ffe5 	bl	223aa <smp_error>
    c3e0:	e7c7      	b.n	c372 <bt_smp_recv+0x1e>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
    c3e2:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    c3e6:	f015 fe60 	bl	220aa <atomic_test_and_clear_bit>
    c3ea:	7831      	ldrb	r1, [r6, #0]
    c3ec:	b970      	cbnz	r0, c40c <bt_smp_recv+0xb8>
    c3ee:	4b17      	ldr	r3, [pc, #92]	; (c44c <bt_smp_recv+0xf8>)
    c3f0:	4a15      	ldr	r2, [pc, #84]	; (c448 <bt_smp_recv+0xf4>)
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
    c3f2:	481c      	ldr	r0, [pc, #112]	; (c464 <bt_smp_recv+0x110>)
    c3f4:	1ad2      	subs	r2, r2, r3
    c3f6:	08d2      	lsrs	r2, r2, #3
    c3f8:	0192      	lsls	r2, r2, #6
    c3fa:	f042 0202 	orr.w	r2, r2, #2
    c3fe:	f012 fba8 	bl	1eb52 <log_1>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
    c402:	7833      	ldrb	r3, [r6, #0]
    c404:	2b05      	cmp	r3, #5
    c406:	d0b4      	beq.n	c372 <bt_smp_recv+0x1e>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    c408:	2108      	movs	r1, #8
    c40a:	e7e6      	b.n	c3da <bt_smp_recv+0x86>
	if (buf->len != handlers[hdr->code].expect_len) {
    c40c:	eb07 03c1 	add.w	r3, r7, r1, lsl #3
    c410:	89a8      	ldrh	r0, [r5, #12]
    c412:	791b      	ldrb	r3, [r3, #4]
    c414:	4283      	cmp	r3, r0
    c416:	d00d      	beq.n	c434 <bt_smp_recv+0xe0>
    c418:	4a0c      	ldr	r2, [pc, #48]	; (c44c <bt_smp_recv+0xf8>)
    c41a:	4b0b      	ldr	r3, [pc, #44]	; (c448 <bt_smp_recv+0xf4>)
    c41c:	1a9b      	subs	r3, r3, r2
    c41e:	08db      	lsrs	r3, r3, #3
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    c420:	019b      	lsls	r3, r3, #6
    c422:	460a      	mov	r2, r1
    c424:	f043 0301 	orr.w	r3, r3, #1
    c428:	4601      	mov	r1, r0
    c42a:	480f      	ldr	r0, [pc, #60]	; (c468 <bt_smp_recv+0x114>)
    c42c:	f012 fba5 	bl	1eb7a <log_2>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
    c430:	210a      	movs	r1, #10
    c432:	e7d2      	b.n	c3da <bt_smp_recv+0x86>
	err = handlers[hdr->code].func(smp, buf);
    c434:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
    c438:	4620      	mov	r0, r4
    c43a:	4629      	mov	r1, r5
    c43c:	4798      	blx	r3
	if (err) {
    c43e:	4601      	mov	r1, r0
    c440:	2800      	cmp	r0, #0
    c442:	d096      	beq.n	c372 <bt_smp_recv+0x1e>
    c444:	e7c9      	b.n	c3da <bt_smp_recv+0x86>
    c446:	bf00      	nop
    c448:	00023a44 	.word	0x00023a44
    c44c:	0002393c 	.word	0x0002393c
    c450:	00026fd8 	.word	0x00026fd8
    c454:	00026ff3 	.word	0x00026ff3
    c458:	00027024 	.word	0x00027024
    c45c:	0002425c 	.word	0x0002425c
    c460:	00027046 	.word	0x00027046
    c464:	00027060 	.word	0x00027060
    c468:	00026ca7 	.word	0x00026ca7

0000c46c <bt_smp_pkey_ready>:
	sc_public_key = pkey;
    c46c:	4b13      	ldr	r3, [pc, #76]	; (c4bc <bt_smp_pkey_ready+0x50>)
{
    c46e:	b510      	push	{r4, lr}
	sc_public_key = pkey;
    c470:	6018      	str	r0, [r3, #0]
	if (!pkey) {
    c472:	b958      	cbnz	r0, c48c <bt_smp_pkey_ready+0x20>
    c474:	4912      	ldr	r1, [pc, #72]	; (c4c0 <bt_smp_pkey_ready+0x54>)
    c476:	4b13      	ldr	r3, [pc, #76]	; (c4c4 <bt_smp_pkey_ready+0x58>)
		BT_WARN("Public key not available");
    c478:	4813      	ldr	r0, [pc, #76]	; (c4c8 <bt_smp_pkey_ready+0x5c>)
    c47a:	1ac9      	subs	r1, r1, r3
    c47c:	08c9      	lsrs	r1, r1, #3
    c47e:	0189      	lsls	r1, r1, #6
}
    c480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Public key not available");
    c484:	f041 0102 	orr.w	r1, r1, #2
    c488:	f012 bb56 	b.w	1eb38 <log_0>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c48c:	4c0f      	ldr	r4, [pc, #60]	; (c4cc <bt_smp_pkey_ready+0x60>)
	z_impl_k_sem_give(sem);
    c48e:	4810      	ldr	r0, [pc, #64]	; (c4d0 <bt_smp_pkey_ready+0x64>)
    c490:	f011 f944 	bl	1d71c <z_impl_k_sem_give>
    c494:	f3bf 8f5b 	dmb	ish
    c498:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
    c49c:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
    c4a0:	065b      	lsls	r3, r3, #25
    c4a2:	d509      	bpl.n	c4b8 <bt_smp_pkey_ready+0x4c>
		err = smp_public_key_slave(smp);
    c4a4:	4620      	mov	r0, r4
    c4a6:	f7ff f947 	bl	b738 <smp_public_key_slave>
		if (err) {
    c4aa:	4601      	mov	r1, r0
    c4ac:	b120      	cbz	r0, c4b8 <bt_smp_pkey_ready+0x4c>
			smp_error(smp, err);
    c4ae:	4620      	mov	r0, r4
}
    c4b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_error(smp, err);
    c4b4:	f015 bf79 	b.w	223aa <smp_error>
}
    c4b8:	bd10      	pop	{r4, pc}
    c4ba:	bf00      	nop
    c4bc:	200016a8 	.word	0x200016a8
    c4c0:	00023a44 	.word	0x00023a44
    c4c4:	0002393c 	.word	0x0002393c
    c4c8:	0002707b 	.word	0x0002707b
    c4cc:	20000d90 	.word	0x20000d90
    c4d0:	20000880 	.word	0x20000880

0000c4d4 <smp_ident_addr_info>:
{
    c4d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
    c4d8:	688d      	ldr	r5, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
    c4da:	6807      	ldr	r7, [r0, #0]
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    c4dc:	782b      	ldrb	r3, [r5, #0]
{
    c4de:	4604      	mov	r4, r0
    c4e0:	f107 0688 	add.w	r6, r7, #136	; 0x88
    c4e4:	b313      	cbz	r3, c52c <smp_ident_addr_info+0x58>
	if (!bt_addr_le_is_identity(&req->addr)) {
    c4e6:	79ab      	ldrb	r3, [r5, #6]
    c4e8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    c4ec:	2bc0      	cmp	r3, #192	; 0xc0
    c4ee:	d01d      	beq.n	c52c <smp_ident_addr_info+0x58>
    c4f0:	4b4b      	ldr	r3, [pc, #300]	; (c620 <smp_ident_addr_info+0x14c>)
    c4f2:	4c4c      	ldr	r4, [pc, #304]	; (c624 <smp_ident_addr_info+0x150>)
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
    c4f4:	4628      	mov	r0, r5
    c4f6:	1ae4      	subs	r4, r4, r3
    c4f8:	f7f9 fc8c 	bl	5e14 <bt_addr_le_str_real>
    c4fc:	f7f7 fbf6 	bl	3cec <log_strdup>
    c500:	08e4      	lsrs	r4, r4, #3
    c502:	01a4      	lsls	r4, r4, #6
    c504:	f044 0401 	orr.w	r4, r4, #1
    c508:	4601      	mov	r1, r0
    c50a:	4622      	mov	r2, r4
    c50c:	4846      	ldr	r0, [pc, #280]	; (c628 <smp_ident_addr_info+0x154>)
    c50e:	f012 fb20 	bl	1eb52 <log_1>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
    c512:	4630      	mov	r0, r6
    c514:	f7f9 fc7e 	bl	5e14 <bt_addr_le_str_real>
    c518:	f7f7 fbe8 	bl	3cec <log_strdup>
    c51c:	4622      	mov	r2, r4
    c51e:	4601      	mov	r1, r0
    c520:	4842      	ldr	r0, [pc, #264]	; (c62c <smp_ident_addr_info+0x158>)
    c522:	f012 fb16 	bl	1eb52 <log_1>
		return BT_SMP_ERR_INVALID_PARAMS;
    c526:	200a      	movs	r0, #10
}
    c528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return memcmp(a, b, sizeof(*a));
    c52c:	2207      	movs	r2, #7
    c52e:	4629      	mov	r1, r5
    c530:	4630      	mov	r0, r6
    c532:	f017 f888 	bl	23646 <memcmp>
	if (bt_addr_le_cmp(&conn->le.dst, &req->addr) != 0) {
    c536:	b168      	cbz	r0, c554 <smp_ident_addr_info+0x80>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
    c538:	7a38      	ldrb	r0, [r7, #8]
    c53a:	4629      	mov	r1, r5
    c53c:	f000 fb56 	bl	cbec <bt_keys_find_addr>
		if (keys) {
    c540:	4680      	mov	r8, r0
    c542:	b138      	cbz	r0, c554 <smp_ident_addr_info+0x80>
			if (!update_keys_check(smp, keys)) {
    c544:	4601      	mov	r1, r0
    c546:	4620      	mov	r0, r4
    c548:	f015 fd04 	bl	21f54 <update_keys_check>
    c54c:	b308      	cbz	r0, c592 <smp_ident_addr_info+0xbe>
			bt_keys_clear(keys);
    c54e:	4640      	mov	r0, r8
    c550:	f016 f80a 	bl	22568 <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    c554:	210d      	movs	r1, #13
    c556:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    c55a:	f015 fcf2 	bl	21f42 <atomic_test_bit>
    c55e:	2800      	cmp	r0, #0
    c560:	d044      	beq.n	c5ec <smp_ident_addr_info+0x118>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
    c562:	7a39      	ldrb	r1, [r7, #8]
    c564:	4632      	mov	r2, r6
    c566:	2002      	movs	r0, #2
    c568:	f015 ffea 	bl	22540 <bt_keys_get_type>
		if (!keys) {
    c56c:	4680      	mov	r8, r0
    c56e:	b990      	cbnz	r0, c596 <smp_ident_addr_info+0xc2>
    c570:	4a2b      	ldr	r2, [pc, #172]	; (c620 <smp_ident_addr_info+0x14c>)
    c572:	4c2c      	ldr	r4, [pc, #176]	; (c624 <smp_ident_addr_info+0x150>)
			BT_ERR("Unable to get keys for %s",
    c574:	4630      	mov	r0, r6
    c576:	1aa4      	subs	r4, r4, r2
    c578:	f7f9 fc4c 	bl	5e14 <bt_addr_le_str_real>
    c57c:	f7f7 fbb6 	bl	3cec <log_strdup>
    c580:	08e4      	lsrs	r4, r4, #3
    c582:	01a4      	lsls	r4, r4, #6
    c584:	f044 0401 	orr.w	r4, r4, #1
    c588:	4601      	mov	r1, r0
    c58a:	4622      	mov	r2, r4
    c58c:	4828      	ldr	r0, [pc, #160]	; (c630 <smp_ident_addr_info+0x15c>)
    c58e:	f012 fae0 	bl	1eb52 <log_1>
				return BT_SMP_ERR_UNSPECIFIED;
    c592:	2008      	movs	r0, #8
    c594:	e7c8      	b.n	c528 <smp_ident_addr_info+0x54>
		if (conn->role == BT_HCI_ROLE_MASTER) {
    c596:	78fb      	ldrb	r3, [r7, #3]
    c598:	2b00      	cmp	r3, #0
    c59a:	d13d      	bne.n	c618 <smp_ident_addr_info+0x144>
			dst = &conn->le.resp_addr;
    c59c:	f107 0396 	add.w	r3, r7, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
    c5a0:	781a      	ldrb	r2, [r3, #0]
    c5a2:	2a01      	cmp	r2, #1
    c5a4:	d11f      	bne.n	c5e6 <smp_ident_addr_info+0x112>
		if (bt_addr_le_is_rpa(dst)) {
    c5a6:	799a      	ldrb	r2, [r3, #6]
    c5a8:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    c5ac:	2a40      	cmp	r2, #64	; 0x40
    c5ae:	d11a      	bne.n	c5e6 <smp_ident_addr_info+0x112>
    c5b0:	f853 2f01 	ldr.w	r2, [r3, #1]!
    c5b4:	f8c8 203a 	str.w	r2, [r8, #58]	; 0x3a
    c5b8:	889b      	ldrh	r3, [r3, #4]
    c5ba:	f8a8 303e 	strh.w	r3, [r8, #62]	; 0x3e
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    c5be:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
    c5c2:	b183      	cbz	r3, c5e6 <smp_ident_addr_info+0x112>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
    c5c4:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
    c5c8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    c5cc:	2bc0      	cmp	r3, #192	; 0xc0
    c5ce:	d00a      	beq.n	c5e6 <smp_ident_addr_info+0x112>
				bt_addr_le_copy(&keys->addr, &req->addr);
    c5d0:	4629      	mov	r1, r5
    c5d2:	f108 0001 	add.w	r0, r8, #1
    c5d6:	f015 fc0c 	bl	21df2 <bt_addr_le_copy>
				bt_addr_le_copy(&conn->le.dst, &req->addr);
    c5da:	4630      	mov	r0, r6
    c5dc:	f015 fc09 	bl	21df2 <bt_addr_le_copy>
				bt_conn_identity_resolved(conn);
    c5e0:	4638      	mov	r0, r7
    c5e2:	f7fc fa0b 	bl	89fc <bt_conn_identity_resolved>
		bt_id_add(keys);
    c5e6:	4640      	mov	r0, r8
    c5e8:	f7fb f9d8 	bl	799c <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    c5ec:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
    c5f0:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    c5f4:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    c5f6:	f884 21a9 	strb.w	r2, [r4, #425]	; 0x1a9
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    c5fa:	d504      	bpl.n	c606 <smp_ident_addr_info+0x132>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    c5fc:	210a      	movs	r1, #10
    c5fe:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    c602:	f015 fbc1 	bl	21d88 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
    c606:	f8b4 51a8 	ldrh.w	r5, [r4, #424]	; 0x1a8
    c60a:	b91d      	cbnz	r5, c614 <smp_ident_addr_info+0x140>
		smp_pairing_complete(smp, 0);
    c60c:	4629      	mov	r1, r5
    c60e:	4620      	mov	r0, r4
    c610:	f7ff fe44 	bl	c29c <smp_pairing_complete>
	return 0;
    c614:	2000      	movs	r0, #0
    c616:	e787      	b.n	c528 <smp_ident_addr_info+0x54>
			dst = &conn->le.init_addr;
    c618:	f107 038f 	add.w	r3, r7, #143	; 0x8f
    c61c:	e7c0      	b.n	c5a0 <smp_ident_addr_info+0xcc>
    c61e:	bf00      	nop
    c620:	0002393c 	.word	0x0002393c
    c624:	00023a44 	.word	0x00023a44
    c628:	00027094 	.word	0x00027094
    c62c:	000270c1 	.word	0x000270c1
    c630:	00026f90 	.word	0x00026f90

0000c634 <smp_master_ident>:
{
    c634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c636:	4604      	mov	r4, r0
    c638:	460b      	mov	r3, r1
	struct bt_conn *conn = smp->chan.chan.conn;
    c63a:	f850 7bc4 	ldr.w	r7, [r0], #196
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    c63e:	210d      	movs	r1, #13
    c640:	f015 fc7f 	bl	21f42 <atomic_test_bit>
    c644:	b348      	cbz	r0, c69a <smp_master_ident+0x66>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    c646:	f107 0688 	add.w	r6, r7, #136	; 0x88
    c64a:	7a39      	ldrb	r1, [r7, #8]
		struct bt_smp_master_ident *req = (void *)buf->data;
    c64c:	689d      	ldr	r5, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    c64e:	4632      	mov	r2, r6
    c650:	2004      	movs	r0, #4
    c652:	f015 ff75 	bl	22540 <bt_keys_get_type>
		if (!keys) {
    c656:	b990      	cbnz	r0, c67e <smp_master_ident+0x4a>
    c658:	4a1b      	ldr	r2, [pc, #108]	; (c6c8 <smp_master_ident+0x94>)
    c65a:	4c1c      	ldr	r4, [pc, #112]	; (c6cc <smp_master_ident+0x98>)
			BT_ERR("Unable to get keys for %s",
    c65c:	4630      	mov	r0, r6
    c65e:	1aa4      	subs	r4, r4, r2
    c660:	f7f9 fbd8 	bl	5e14 <bt_addr_le_str_real>
    c664:	f7f7 fb42 	bl	3cec <log_strdup>
    c668:	08e4      	lsrs	r4, r4, #3
    c66a:	01a4      	lsls	r4, r4, #6
    c66c:	f044 0401 	orr.w	r4, r4, #1
    c670:	4601      	mov	r1, r0
    c672:	4622      	mov	r2, r4
    c674:	4816      	ldr	r0, [pc, #88]	; (c6d0 <smp_master_ident+0x9c>)
    c676:	f012 fa6c 	bl	1eb52 <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    c67a:	2008      	movs	r0, #8
}
    c67c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c67e:	882b      	ldrh	r3, [r5, #0]
    c680:	8303      	strh	r3, [r0, #24]
    c682:	462b      	mov	r3, r5
    c684:	f853 2f02 	ldr.w	r2, [r3, #2]!
    c688:	6102      	str	r2, [r0, #16]
    c68a:	685a      	ldr	r2, [r3, #4]
    c68c:	6142      	str	r2, [r0, #20]
		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
    c68e:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
    c692:	f023 0301 	bic.w	r3, r3, #1
    c696:	f884 31a9 	strb.w	r3, [r4, #425]	; 0x1a9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    c69a:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
    c69e:	079a      	lsls	r2, r3, #30
    c6a0:	d50d      	bpl.n	c6be <smp_master_ident+0x8a>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    c6a2:	2108      	movs	r1, #8
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    c6a4:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    c6a8:	f015 fb6e 	bl	21d88 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
    c6ac:	f8b4 51a8 	ldrh.w	r5, [r4, #424]	; 0x1a8
    c6b0:	b91d      	cbnz	r5, c6ba <smp_master_ident+0x86>
		smp_pairing_complete(smp, 0);
    c6b2:	4629      	mov	r1, r5
    c6b4:	4620      	mov	r0, r4
    c6b6:	f7ff fdf1 	bl	c29c <smp_pairing_complete>
	return 0;
    c6ba:	2000      	movs	r0, #0
    c6bc:	e7de      	b.n	c67c <smp_master_ident+0x48>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    c6be:	075b      	lsls	r3, r3, #29
    c6c0:	d5f4      	bpl.n	c6ac <smp_master_ident+0x78>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    c6c2:	210a      	movs	r1, #10
    c6c4:	e7ee      	b.n	c6a4 <smp_master_ident+0x70>
    c6c6:	bf00      	nop
    c6c8:	0002393c 	.word	0x0002393c
    c6cc:	00023a44 	.word	0x00023a44
    c6d0:	00026f90 	.word	0x00026f90

0000c6d4 <smp_pairing_failed>:
{
    c6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c6d6:	4a15      	ldr	r2, [pc, #84]	; (c72c <smp_pairing_failed+0x58>)
    c6d8:	4b15      	ldr	r3, [pc, #84]	; (c730 <smp_pairing_failed+0x5c>)
	struct bt_smp_pairing_fail *req = (void *)buf->data;
    c6da:	688e      	ldr	r6, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
    c6dc:	4605      	mov	r5, r0
    c6de:	1ad2      	subs	r2, r2, r3
    c6e0:	08d2      	lsrs	r2, r2, #3
    c6e2:	f855 7bc4 	ldr.w	r7, [r5], #196
	BT_ERR("reason 0x%x", req->reason);
    c6e6:	7831      	ldrb	r1, [r6, #0]
    c6e8:	0192      	lsls	r2, r2, #6
{
    c6ea:	4604      	mov	r4, r0
	BT_ERR("reason 0x%x", req->reason);
    c6ec:	f042 0201 	orr.w	r2, r2, #1
    c6f0:	4810      	ldr	r0, [pc, #64]	; (c734 <smp_pairing_failed+0x60>)
    c6f2:	f012 fa2e 	bl	1eb52 <log_1>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    c6f6:	210a      	movs	r1, #10
    c6f8:	4628      	mov	r0, r5
    c6fa:	f015 fcd6 	bl	220aa <atomic_test_and_clear_bit>
    c6fe:	b140      	cbz	r0, c712 <smp_pairing_failed+0x3e>
		if (bt_auth && bt_auth->cancel) {
    c700:	4b0d      	ldr	r3, [pc, #52]	; (c738 <smp_pairing_failed+0x64>)
    c702:	681b      	ldr	r3, [r3, #0]
    c704:	b963      	cbnz	r3, c720 <smp_pairing_failed+0x4c>
	smp_pairing_complete(smp, req->reason);
    c706:	4620      	mov	r0, r4
    c708:	7831      	ldrb	r1, [r6, #0]
    c70a:	f7ff fdc7 	bl	c29c <smp_pairing_complete>
}
    c70e:	2000      	movs	r0, #0
    c710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
    c712:	210b      	movs	r1, #11
    c714:	4628      	mov	r0, r5
    c716:	f015 fcc8 	bl	220aa <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    c71a:	2800      	cmp	r0, #0
    c71c:	d1f0      	bne.n	c700 <smp_pairing_failed+0x2c>
    c71e:	e7f2      	b.n	c706 <smp_pairing_failed+0x32>
		if (bt_auth && bt_auth->cancel) {
    c720:	691b      	ldr	r3, [r3, #16]
    c722:	2b00      	cmp	r3, #0
    c724:	d0ef      	beq.n	c706 <smp_pairing_failed+0x32>
			bt_auth->cancel(conn);
    c726:	4638      	mov	r0, r7
    c728:	4798      	blx	r3
    c72a:	e7ec      	b.n	c706 <smp_pairing_failed+0x32>
    c72c:	00023a44 	.word	0x00023a44
    c730:	0002393c 	.word	0x0002393c
    c734:	000270a8 	.word	0x000270a8
    c738:	20001614 	.word	0x20001614

0000c73c <bt_smp_encrypt_change>:
{
    c73c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->conn;
    c740:	4605      	mov	r5, r0
{
    c742:	b089      	sub	sp, #36	; 0x24
	struct bt_conn *conn = chan->conn;
    c744:	f855 7bc4 	ldr.w	r7, [r5], #196
{
    c748:	4604      	mov	r4, r0
    c74a:	460e      	mov	r6, r1
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    c74c:	4628      	mov	r0, r5
    c74e:	2101      	movs	r1, #1
    c750:	f015 fcab 	bl	220aa <atomic_test_and_clear_bit>
    c754:	b310      	cbz	r0, c79c <bt_smp_encrypt_change+0x60>
	if (hci_status) {
    c756:	b1be      	cbz	r6, c788 <bt_smp_encrypt_change+0x4c>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    c758:	2103      	movs	r1, #3
    c75a:	4628      	mov	r0, r5
    c75c:	f015 fbf1 	bl	21f42 <atomic_test_bit>
    c760:	b1e0      	cbz	r0, c79c <bt_smp_encrypt_change+0x60>
			uint8_t smp_err = smp_err_get(
    c762:	4630      	mov	r0, r6
    c764:	f7fa fe4c 	bl	7400 <bt_security_err_get>
	switch (auth_err) {
    c768:	3801      	subs	r0, #1
    c76a:	b2c0      	uxtb	r0, r0
    c76c:	2807      	cmp	r0, #7
    c76e:	bf9a      	itte	ls
    c770:	4b72      	ldrls	r3, [pc, #456]	; (c93c <bt_smp_encrypt_change+0x200>)
    c772:	5c1e      	ldrbls	r6, [r3, r0]
			uint8_t smp_err = smp_err_get(
    c774:	2600      	movhi	r6, #0
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
    c776:	2102      	movs	r1, #2
    c778:	4628      	mov	r0, r5
    c77a:	f015 fb05 	bl	21d88 <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
    c77e:	4631      	mov	r1, r6
		smp_pairing_complete(smp, 0);
    c780:	4620      	mov	r0, r4
    c782:	f7ff fd8b 	bl	c29c <smp_pairing_complete>
    c786:	e009      	b.n	c79c <bt_smp_encrypt_change+0x60>
	if (!conn->encrypt) {
    c788:	7afb      	ldrb	r3, [r7, #11]
    c78a:	b13b      	cbz	r3, c79c <bt_smp_encrypt_change+0x60>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    c78c:	2103      	movs	r1, #3
    c78e:	4628      	mov	r0, r5
    c790:	f015 fbd7 	bl	21f42 <atomic_test_bit>
    c794:	b928      	cbnz	r0, c7a2 <bt_smp_encrypt_change+0x66>
		smp_reset(smp);
    c796:	4620      	mov	r0, r4
    c798:	f015 fc9f 	bl	220da <smp_reset>
}
    c79c:	b009      	add	sp, #36	; 0x24
    c79e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    c7a2:	2105      	movs	r1, #5
    c7a4:	4628      	mov	r0, r5
    c7a6:	f015 fbcc 	bl	21f42 <atomic_test_bit>
    c7aa:	b198      	cbz	r0, c7d4 <bt_smp_encrypt_change+0x98>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
    c7ac:	f894 31a8 	ldrb.w	r3, [r4, #424]	; 0x1a8
    c7b0:	071f      	lsls	r7, r3, #28
    c7b2:	d507      	bpl.n	c7c4 <bt_smp_encrypt_change+0x88>
    c7b4:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
    c7b8:	071e      	lsls	r6, r3, #28
    c7ba:	d503      	bpl.n	c7c4 <bt_smp_encrypt_change+0x88>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
    c7bc:	2111      	movs	r1, #17
    c7be:	4628      	mov	r0, r5
    c7c0:	f015 fae2 	bl	21d88 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
    c7c4:	f8b4 31a8 	ldrh.w	r3, [r4, #424]	; 0x1a8
    c7c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    c7cc:	f023 0308 	bic.w	r3, r3, #8
    c7d0:	f8a4 31a8 	strh.w	r3, [r4, #424]	; 0x1a8
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
    c7d4:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
    c7d8:	07d8      	lsls	r0, r3, #31
    c7da:	d51e      	bpl.n	c81a <bt_smp_encrypt_change+0xde>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
    c7dc:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    c7de:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    c7e2:	f015 fad1 	bl	21d88 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
    c7e6:	4628      	mov	r0, r5
    c7e8:	2102      	movs	r1, #2
    c7ea:	f015 facd 	bl	21d88 <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
    c7ee:	6820      	ldr	r0, [r4, #0]
	if (!keys) {
    c7f0:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
    c7f4:	b9cb      	cbnz	r3, c82a <bt_smp_encrypt_change+0xee>
    c7f6:	4a52      	ldr	r2, [pc, #328]	; (c940 <bt_smp_encrypt_change+0x204>)
    c7f8:	4c52      	ldr	r4, [pc, #328]	; (c944 <bt_smp_encrypt_change+0x208>)
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
    c7fa:	3088      	adds	r0, #136	; 0x88
    c7fc:	1aa4      	subs	r4, r4, r2
    c7fe:	f7f9 fb09 	bl	5e14 <bt_addr_le_str_real>
    c802:	f7f7 fa73 	bl	3cec <log_strdup>
    c806:	08e4      	lsrs	r4, r4, #3
    c808:	01a4      	lsls	r4, r4, #6
    c80a:	f044 0401 	orr.w	r4, r4, #1
    c80e:	4601      	mov	r1, r0
    c810:	4622      	mov	r2, r4
    c812:	484d      	ldr	r0, [pc, #308]	; (c948 <bt_smp_encrypt_change+0x20c>)
    c814:	f012 f99d 	bl	1eb52 <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
    c818:	e7c0      	b.n	c79c <bt_smp_encrypt_change+0x60>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    c81a:	0799      	lsls	r1, r3, #30
    c81c:	d501      	bpl.n	c822 <bt_smp_encrypt_change+0xe6>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    c81e:	2108      	movs	r1, #8
    c820:	e7dd      	b.n	c7de <bt_smp_encrypt_change+0xa2>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    c822:	075a      	lsls	r2, r3, #29
    c824:	d5df      	bpl.n	c7e6 <bt_smp_encrypt_change+0xaa>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    c826:	210a      	movs	r1, #10
    c828:	e7d9      	b.n	c7de <bt_smp_encrypt_change+0xa2>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    c82a:	2105      	movs	r1, #5
    c82c:	4628      	mov	r0, r5
    c82e:	f015 fb88 	bl	21f42 <atomic_test_bit>
    c832:	b9b0      	cbnz	r0, c862 <bt_smp_encrypt_change+0x126>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
    c834:	f894 31a8 	ldrb.w	r3, [r4, #424]	; 0x1a8
    c838:	07db      	lsls	r3, r3, #31
    c83a:	d512      	bpl.n	c862 <bt_smp_encrypt_change+0x126>
	struct bt_keys *keys = conn->le.keys;
    c83c:	6823      	ldr	r3, [r4, #0]
		if (bt_rand((void *)&rand, sizeof(rand))) {
    c83e:	211a      	movs	r1, #26
    c840:	a801      	add	r0, sp, #4
	struct bt_keys *keys = conn->le.keys;
    c842:	f8d3 60b4 	ldr.w	r6, [r3, #180]	; 0xb4
		if (bt_rand((void *)&rand, sizeof(rand))) {
    c846:	f003 f8cf 	bl	f9e8 <bt_rand>
    c84a:	4680      	mov	r8, r0
    c84c:	b170      	cbz	r0, c86c <bt_smp_encrypt_change+0x130>
    c84e:	493d      	ldr	r1, [pc, #244]	; (c944 <bt_smp_encrypt_change+0x208>)
    c850:	4b3b      	ldr	r3, [pc, #236]	; (c940 <bt_smp_encrypt_change+0x204>)
			BT_ERR("Unable to get random bytes");
    c852:	483e      	ldr	r0, [pc, #248]	; (c94c <bt_smp_encrypt_change+0x210>)
    c854:	1ac9      	subs	r1, r1, r3
    c856:	08c9      	lsrs	r1, r1, #3
    c858:	0189      	lsls	r1, r1, #6
    c85a:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Unable to allocate Encrypt Info buffer");
    c85e:	f012 f96b 	bl	1eb38 <log_0>
	if (!smp->local_dist && !smp->remote_dist) {
    c862:	f8b4 11a8 	ldrh.w	r1, [r4, #424]	; 0x1a8
    c866:	2900      	cmp	r1, #0
    c868:	d198      	bne.n	c79c <bt_smp_encrypt_change+0x60>
    c86a:	e789      	b.n	c780 <bt_smp_encrypt_change+0x44>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
    c86c:	2106      	movs	r1, #6
    c86e:	4620      	mov	r0, r4
    c870:	f015 fb95 	bl	21f9e <smp_create_pdu.isra.0>
		if (!buf) {
    c874:	4607      	mov	r7, r0
    c876:	b940      	cbnz	r0, c88a <bt_smp_encrypt_change+0x14e>
    c878:	4932      	ldr	r1, [pc, #200]	; (c944 <bt_smp_encrypt_change+0x208>)
    c87a:	4b31      	ldr	r3, [pc, #196]	; (c940 <bt_smp_encrypt_change+0x204>)
			BT_ERR("Unable to allocate Encrypt Info buffer");
    c87c:	4834      	ldr	r0, [pc, #208]	; (c950 <bt_smp_encrypt_change+0x214>)
    c87e:	1ac9      	subs	r1, r1, r3
    c880:	08c9      	lsrs	r1, r1, #3
    c882:	0189      	lsls	r1, r1, #6
    c884:	f041 0101 	orr.w	r1, r1, #1
    c888:	e7e9      	b.n	c85e <bt_smp_encrypt_change+0x122>
	return net_buf_simple_add(&buf->b, len);
    c88a:	2110      	movs	r1, #16
    c88c:	3008      	adds	r0, #8
    c88e:	f015 fed0 	bl	22632 <net_buf_simple_add>
    c892:	7b32      	ldrb	r2, [r6, #12]
    c894:	a901      	add	r1, sp, #4
    c896:	4681      	mov	r9, r0
    c898:	f016 fee3 	bl	23662 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
    c89c:	7b30      	ldrb	r0, [r6, #12]
    c89e:	280f      	cmp	r0, #15
    c8a0:	d805      	bhi.n	c8ae <bt_smp_encrypt_change+0x172>
__ssp_bos_icheck3(memset, void *, int)
    c8a2:	f1c0 0210 	rsb	r2, r0, #16
    c8a6:	4641      	mov	r1, r8
    c8a8:	4448      	add	r0, r9
    c8aa:	f016 fee8 	bl	2367e <memset>
		smp_send(smp, buf, NULL, NULL);
    c8ae:	4639      	mov	r1, r7
    c8b0:	2200      	movs	r2, #0
    c8b2:	4620      	mov	r0, r4
    c8b4:	f7fe fd96 	bl	b3e4 <smp_send.isra.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_MASTER_IDENT,
    c8b8:	2107      	movs	r1, #7
    c8ba:	4620      	mov	r0, r4
    c8bc:	f015 fb6f 	bl	21f9e <smp_create_pdu.isra.0>
		if (!buf) {
    c8c0:	4607      	mov	r7, r0
    c8c2:	b940      	cbnz	r0, c8d6 <bt_smp_encrypt_change+0x19a>
    c8c4:	491f      	ldr	r1, [pc, #124]	; (c944 <bt_smp_encrypt_change+0x208>)
    c8c6:	4b1e      	ldr	r3, [pc, #120]	; (c940 <bt_smp_encrypt_change+0x204>)
			BT_ERR("Unable to allocate Master Ident buffer");
    c8c8:	4822      	ldr	r0, [pc, #136]	; (c954 <bt_smp_encrypt_change+0x218>)
    c8ca:	1ac9      	subs	r1, r1, r3
    c8cc:	08c9      	lsrs	r1, r1, #3
    c8ce:	0189      	lsls	r1, r1, #6
    c8d0:	f041 0101 	orr.w	r1, r1, #1
    c8d4:	e7c3      	b.n	c85e <bt_smp_encrypt_change+0x122>
    c8d6:	210a      	movs	r1, #10
    c8d8:	3008      	adds	r0, #8
    c8da:	f015 feaa 	bl	22632 <net_buf_simple_add>
    c8de:	aa05      	add	r2, sp, #20
    c8e0:	4603      	mov	r3, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    c8e2:	ca03      	ldmia	r2!, {r0, r1}
    c8e4:	f8c3 0002 	str.w	r0, [r3, #2]
    c8e8:	f8c3 1006 	str.w	r1, [r3, #6]
    c8ec:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    c8f0:	801a      	strh	r2, [r3, #0]
		smp_send(smp, buf, smp_ident_sent, NULL);
    c8f2:	4639      	mov	r1, r7
    c8f4:	4a18      	ldr	r2, [pc, #96]	; (c958 <bt_smp_encrypt_change+0x21c>)
    c8f6:	4620      	mov	r0, r4
    c8f8:	f7fe fd74 	bl	b3e4 <smp_send.isra.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    c8fc:	4628      	mov	r0, r5
    c8fe:	210d      	movs	r1, #13
    c900:	f015 fb1f 	bl	21f42 <atomic_test_bit>
    c904:	ad05      	add	r5, sp, #20
    c906:	2800      	cmp	r0, #0
    c908:	d0ab      	beq.n	c862 <bt_smp_encrypt_change+0x126>
			bt_keys_add_type(keys, BT_KEYS_SLAVE_LTK);
    c90a:	2101      	movs	r1, #1
    c90c:	4630      	mov	r0, r6
    c90e:	f015 fe27 	bl	22560 <bt_keys_add_type>
    c912:	f106 074a 	add.w	r7, r6, #74	; 0x4a
    c916:	ab01      	add	r3, sp, #4
    c918:	461a      	mov	r2, r3
    c91a:	ca03      	ldmia	r2!, {r0, r1}
    c91c:	42aa      	cmp	r2, r5
    c91e:	6038      	str	r0, [r7, #0]
    c920:	6079      	str	r1, [r7, #4]
    c922:	4613      	mov	r3, r2
    c924:	f107 0708 	add.w	r7, r7, #8
    c928:	d1f6      	bne.n	c918 <bt_smp_encrypt_change+0x1dc>
    c92a:	462b      	mov	r3, r5
    c92c:	cb03      	ldmia	r3!, {r0, r1}
    c92e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    c932:	6430      	str	r0, [r6, #64]	; 0x40
    c934:	6471      	str	r1, [r6, #68]	; 0x44
    c936:	f8a6 3048 	strh.w	r3, [r6, #72]	; 0x48
    c93a:	e792      	b.n	c862 <bt_smp_encrypt_change+0x126>
    c93c:	00027153 	.word	0x00027153
    c940:	0002393c 	.word	0x0002393c
    c944:	00023a44 	.word	0x00023a44
    c948:	000270b4 	.word	0x000270b4
    c94c:	000270c9 	.word	0x000270c9
    c950:	000270e4 	.word	0x000270e4
    c954:	0002710b 	.word	0x0002710b
    c958:	00022509 	.word	0x00022509

0000c95c <smp_timeout>:
    c95c:	4b0b      	ldr	r3, [pc, #44]	; (c98c <smp_timeout+0x30>)
    c95e:	490c      	ldr	r1, [pc, #48]	; (c990 <smp_timeout+0x34>)
{
    c960:	b510      	push	{r4, lr}
    c962:	1ac9      	subs	r1, r1, r3
    c964:	08c9      	lsrs	r1, r1, #3
	BT_ERR("SMP Timeout");
    c966:	0189      	lsls	r1, r1, #6
{
    c968:	4604      	mov	r4, r0
	BT_ERR("SMP Timeout");
    c96a:	f041 0101 	orr.w	r1, r1, #1
    c96e:	4809      	ldr	r0, [pc, #36]	; (c994 <smp_timeout+0x38>)
    c970:	f012 f8e2 	bl	1eb38 <log_0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
    c974:	f5a4 70d8 	sub.w	r0, r4, #432	; 0x1b0
    c978:	2108      	movs	r1, #8
    c97a:	f7ff fc8f 	bl	c29c <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    c97e:	f1a4 00ec 	sub.w	r0, r4, #236	; 0xec
    c982:	2104      	movs	r1, #4
}
    c984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    c988:	f015 b9fe 	b.w	21d88 <atomic_set_bit>
    c98c:	0002393c 	.word	0x0002393c
    c990:	00023a44 	.word	0x00023a44
    c994:	00027132 	.word	0x00027132

0000c998 <bt_smp_update_keys>:
{
    c998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c99a:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
    c99c:	f7fe fcca 	bl	b334 <smp_chan_get>
	if (!smp) {
    c9a0:	4605      	mov	r5, r0
    c9a2:	2800      	cmp	r0, #0
    c9a4:	d074      	beq.n	ca90 <bt_smp_update_keys+0xf8>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    c9a6:	f100 06c4 	add.w	r6, r0, #196	; 0xc4
    c9aa:	2103      	movs	r1, #3
    c9ac:	4630      	mov	r0, r6
    c9ae:	f015 fac8 	bl	21f42 <atomic_test_bit>
    c9b2:	2800      	cmp	r0, #0
    c9b4:	d06c      	beq.n	ca90 <bt_smp_update_keys+0xf8>
	if (conn->le.keys) {
    c9b6:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    c9ba:	b108      	cbz	r0, c9c0 <bt_smp_update_keys+0x28>
		bt_keys_clear(conn->le.keys);
    c9bc:	f015 fdd4 	bl	22568 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    c9c0:	f104 0788 	add.w	r7, r4, #136	; 0x88
    c9c4:	7a20      	ldrb	r0, [r4, #8]
    c9c6:	4639      	mov	r1, r7
    c9c8:	f000 f88a 	bl	cae0 <bt_keys_get_addr>
    c9cc:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
    c9d0:	b9b0      	cbnz	r0, ca00 <bt_smp_update_keys+0x68>
    c9d2:	4a35      	ldr	r2, [pc, #212]	; (caa8 <bt_smp_update_keys+0x110>)
    c9d4:	4c35      	ldr	r4, [pc, #212]	; (caac <bt_smp_update_keys+0x114>)
		BT_ERR("Unable to get keys for %s",
    c9d6:	4638      	mov	r0, r7
    c9d8:	1aa4      	subs	r4, r4, r2
    c9da:	f7f9 fa1b 	bl	5e14 <bt_addr_le_str_real>
    c9de:	f7f7 f985 	bl	3cec <log_strdup>
    c9e2:	08e4      	lsrs	r4, r4, #3
    c9e4:	01a4      	lsls	r4, r4, #6
    c9e6:	f044 0401 	orr.w	r4, r4, #1
    c9ea:	4601      	mov	r1, r0
    c9ec:	4622      	mov	r2, r4
    c9ee:	4830      	ldr	r0, [pc, #192]	; (cab0 <bt_smp_update_keys+0x118>)
    c9f0:	f012 f8af 	bl	1eb52 <log_1>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    c9f4:	4628      	mov	r0, r5
    c9f6:	2108      	movs	r1, #8
}
    c9f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    c9fc:	f015 bcd5 	b.w	223aa <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
    ca00:	210e      	movs	r1, #14
    ca02:	4630      	mov	r0, r6
    ca04:	f015 fa9d 	bl	21f42 <atomic_test_bit>
    ca08:	b128      	cbz	r0, ca16 <bt_smp_update_keys+0x7e>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
    ca0a:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
    ca0e:	7b53      	ldrb	r3, [r2, #13]
    ca10:	f043 0302 	orr.w	r3, r3, #2
    ca14:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
    ca16:	f895 20c8 	ldrb.w	r2, [r5, #200]	; 0xc8
    ca1a:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
    ca1e:	2a03      	cmp	r2, #3
    ca20:	7b4b      	ldrb	r3, [r1, #13]
    ca22:	d836      	bhi.n	ca92 <bt_smp_update_keys+0xfa>
    ca24:	b3c2      	cbz	r2, ca98 <bt_smp_update_keys+0x100>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
    ca26:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
    ca2a:	734b      	strb	r3, [r1, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
    ca2c:	f895 30d4 	ldrb.w	r3, [r5, #212]	; 0xd4
    ca30:	f895 20cd 	ldrb.w	r2, [r5, #205]	; 0xcd
    ca34:	4293      	cmp	r3, r2
    ca36:	bf28      	it	cs
    ca38:	4613      	movcs	r3, r2
	conn->le.keys->enc_size = get_encryption_key_size(smp);
    ca3a:	730b      	strb	r3, [r1, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    ca3c:	4630      	mov	r0, r6
    ca3e:	2105      	movs	r1, #5
    ca40:	f015 fa7f 	bl	21f42 <atomic_test_bit>
    ca44:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
		conn->le.keys->flags |= BT_KEYS_SC;
    ca48:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    ca4a:	b340      	cbz	r0, ca9e <bt_smp_update_keys+0x106>
		conn->le.keys->flags |= BT_KEYS_SC;
    ca4c:	f042 0210 	orr.w	r2, r2, #16
    ca50:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    ca52:	210d      	movs	r1, #13
    ca54:	4630      	mov	r0, r6
    ca56:	f015 fa74 	bl	21f42 <atomic_test_bit>
    ca5a:	b1c8      	cbz	r0, ca90 <bt_smp_update_keys+0xf8>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
    ca5c:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    ca60:	2120      	movs	r1, #32
    ca62:	f015 fd7d 	bl	22560 <bt_keys_add_type>
    ca66:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
    ca6a:	f205 1207 	addw	r2, r5, #263	; 0x107
    ca6e:	331a      	adds	r3, #26
    ca70:	f205 1517 	addw	r5, r5, #279	; 0x117
    ca74:	f852 1b04 	ldr.w	r1, [r2], #4
    ca78:	f843 1b04 	str.w	r1, [r3], #4
    ca7c:	42aa      	cmp	r2, r5
    ca7e:	d1f9      	bne.n	ca74 <bt_smp_update_keys+0xdc>
__ssp_bos_icheck3(memset, void *, int)
    ca80:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
    ca84:	2300      	movs	r3, #0
    ca86:	6113      	str	r3, [r2, #16]
    ca88:	6153      	str	r3, [r2, #20]
    ca8a:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
    ca8e:	8313      	strh	r3, [r2, #24]
}
    ca90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (smp->method) {
    ca92:	3a05      	subs	r2, #5
    ca94:	2a01      	cmp	r2, #1
    ca96:	d9c6      	bls.n	ca26 <bt_smp_update_keys+0x8e>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
    ca98:	f023 0301 	bic.w	r3, r3, #1
    ca9c:	e7c5      	b.n	ca2a <bt_smp_update_keys+0x92>
		conn->le.keys->flags &= ~BT_KEYS_SC;
    ca9e:	f022 0210 	bic.w	r2, r2, #16
    caa2:	735a      	strb	r2, [r3, #13]
    caa4:	e7f4      	b.n	ca90 <bt_smp_update_keys+0xf8>
    caa6:	bf00      	nop
    caa8:	0002393c 	.word	0x0002393c
    caac:	00023a44 	.word	0x00023a44
    cab0:	00026f90 	.word	0x00026f90

0000cab4 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
    cab4:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
    cab6:	4b07      	ldr	r3, [pc, #28]	; (cad4 <bt_smp_init+0x20>)
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
    cab8:	4807      	ldr	r0, [pc, #28]	; (cad8 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
    caba:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
    cabe:	f003 0306 	and.w	r3, r3, #6
    cac2:	1f9a      	subs	r2, r3, #6
    cac4:	4253      	negs	r3, r2
    cac6:	4153      	adcs	r3, r2
    cac8:	4a04      	ldr	r2, [pc, #16]	; (cadc <bt_smp_init+0x28>)
    caca:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
    cacc:	f7fb fd24 	bl	8518 <bt_pub_key_gen>
	}

	return smp_self_test();
}
    cad0:	2000      	movs	r0, #0
    cad2:	bd08      	pop	{r3, pc}
    cad4:	20000000 	.word	0x20000000
    cad8:	20000298 	.word	0x20000298
    cadc:	200031b9 	.word	0x200031b9

0000cae0 <bt_keys_get_addr>:
static uint32_t aging_counter_val;
static struct bt_keys *last_keys_updated;
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
    cae0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    cae2:	4c11      	ldr	r4, [pc, #68]	; (cb28 <bt_keys_get_addr+0x48>)
    cae4:	7823      	ldrb	r3, [r4, #0]
    cae6:	4283      	cmp	r3, r0
{
    cae8:	4605      	mov	r5, r0
    caea:	460e      	mov	r6, r1
    caec:	4627      	mov	r7, r4
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    caee:	d00b      	beq.n	cb08 <bt_keys_get_addr+0x28>
			return keys;
		}

		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
    caf0:	2400      	movs	r4, #0
	return memcmp(a, b, sizeof(*a));
    caf2:	480e      	ldr	r0, [pc, #56]	; (cb2c <bt_keys_get_addr+0x4c>)
    caf4:	9400      	str	r4, [sp, #0]
    caf6:	2207      	movs	r2, #7
    caf8:	4669      	mov	r1, sp
    cafa:	f8cd 4003 	str.w	r4, [sp, #3]
    cafe:	f016 fda2 	bl	23646 <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
    cb02:	b140      	cbz	r0, cb16 <bt_keys_get_addr+0x36>
		return keys;
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
    cb04:	4620      	mov	r0, r4
    cb06:	e00c      	b.n	cb22 <bt_keys_get_addr+0x42>
    cb08:	2207      	movs	r2, #7
    cb0a:	1c60      	adds	r0, r4, #1
    cb0c:	f016 fd9b 	bl	23646 <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    cb10:	2800      	cmp	r0, #0
    cb12:	d1ed      	bne.n	caf0 <bt_keys_get_addr+0x10>
    cb14:	e7f6      	b.n	cb04 <bt_keys_get_addr+0x24>
		bt_addr_le_copy(&keys->addr, addr);
    cb16:	4805      	ldr	r0, [pc, #20]	; (cb2c <bt_keys_get_addr+0x4c>)
		keys->id = id;
    cb18:	703d      	strb	r5, [r7, #0]
		bt_addr_le_copy(&keys->addr, addr);
    cb1a:	4631      	mov	r1, r6
    cb1c:	f015 fd09 	bl	22532 <bt_addr_le_copy>
		return keys;
    cb20:	4801      	ldr	r0, [pc, #4]	; (cb28 <bt_keys_get_addr+0x48>)
}
    cb22:	b003      	add	sp, #12
    cb24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cb26:	bf00      	nop
    cb28:	200016ac 	.word	0x200016ac
    cb2c:	200016ad 	.word	0x200016ad

0000cb30 <bt_keys_foreach>:
	}
}

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
    cb30:	460b      	mov	r3, r1
    cb32:	4611      	mov	r1, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
    cb34:	4a04      	ldr	r2, [pc, #16]	; (cb48 <bt_keys_foreach+0x18>)
{
    cb36:	b410      	push	{r4}
		if ((key_pool[i].keys & type)) {
    cb38:	89d4      	ldrh	r4, [r2, #14]
    cb3a:	4204      	tst	r4, r0
    cb3c:	d002      	beq.n	cb44 <bt_keys_foreach+0x14>
			func(&key_pool[i], data);
		}
	}
}
    cb3e:	bc10      	pop	{r4}
			func(&key_pool[i], data);
    cb40:	4610      	mov	r0, r2
    cb42:	4718      	bx	r3
}
    cb44:	bc10      	pop	{r4}
    cb46:	4770      	bx	lr
    cb48:	200016ac 	.word	0x200016ac

0000cb4c <bt_keys_find>:

struct bt_keys *bt_keys_find(int type, uint8_t id, const bt_addr_le_t *addr)
{
    cb4c:	b510      	push	{r4, lr}
	int i;

	BT_DBG("type %d %s", type, bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
    cb4e:	4c09      	ldr	r4, [pc, #36]	; (cb74 <bt_keys_find+0x28>)
{
    cb50:	460b      	mov	r3, r1
    cb52:	4611      	mov	r1, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
    cb54:	89e2      	ldrh	r2, [r4, #14]
    cb56:	4202      	tst	r2, r0
    cb58:	d007      	beq.n	cb6a <bt_keys_find+0x1e>
    cb5a:	7822      	ldrb	r2, [r4, #0]
    cb5c:	429a      	cmp	r2, r3
    cb5e:	d104      	bne.n	cb6a <bt_keys_find+0x1e>
    cb60:	2207      	movs	r2, #7
    cb62:	1c60      	adds	r0, r4, #1
    cb64:	f016 fd6f 	bl	23646 <memcmp>
    cb68:	b108      	cbz	r0, cb6e <bt_keys_find+0x22>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
    cb6a:	2000      	movs	r0, #0
}
    cb6c:	bd10      	pop	{r4, pc}
			return &key_pool[i];
    cb6e:	4620      	mov	r0, r4
    cb70:	e7fc      	b.n	cb6c <bt_keys_find+0x20>
    cb72:	bf00      	nop
    cb74:	200016ac 	.word	0x200016ac

0000cb78 <bt_keys_find_irk>:

	return keys;
}

struct bt_keys *bt_keys_find_irk(uint8_t id, const bt_addr_le_t *addr)
{
    cb78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
    cb7a:	780b      	ldrb	r3, [r1, #0]
    cb7c:	2b01      	cmp	r3, #1
    cb7e:	4607      	mov	r7, r0
    cb80:	460d      	mov	r5, r1
    cb82:	d001      	beq.n	cb88 <bt_keys_find_irk+0x10>
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	if (!bt_addr_le_is_rpa(addr)) {
		return NULL;
    cb84:	2000      	movs	r0, #0
	}

	BT_DBG("No IRK for %s", bt_addr_le_str(addr));

	return NULL;
}
    cb86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
    cb88:	798b      	ldrb	r3, [r1, #6]
    cb8a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    cb8e:	2b40      	cmp	r3, #64	; 0x40
    cb90:	d1f8      	bne.n	cb84 <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    cb92:	4c13      	ldr	r4, [pc, #76]	; (cbe0 <bt_keys_find_irk+0x68>)
    cb94:	89e3      	ldrh	r3, [r4, #14]
    cb96:	f013 0f02 	tst.w	r3, #2
    cb9a:	4626      	mov	r6, r4
    cb9c:	d0f2      	beq.n	cb84 <bt_keys_find_irk+0xc>
		if (key_pool[i].id == id &&
    cb9e:	7833      	ldrb	r3, [r6, #0]
    cba0:	42bb      	cmp	r3, r7
    cba2:	d10b      	bne.n	cbbc <bt_keys_find_irk+0x44>
	return memcmp(a, b, sizeof(*a));
    cba4:	2206      	movs	r2, #6
    cba6:	f106 013a 	add.w	r1, r6, #58	; 0x3a
    cbaa:	1c68      	adds	r0, r5, #1
    cbac:	f016 fd4b 	bl	23646 <memcmp>
    cbb0:	b908      	cbnz	r0, cbb6 <bt_keys_find_irk+0x3e>
			return &key_pool[i];
    cbb2:	4620      	mov	r0, r4
    cbb4:	e7e7      	b.n	cb86 <bt_keys_find_irk+0xe>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    cbb6:	89f3      	ldrh	r3, [r6, #14]
    cbb8:	079b      	lsls	r3, r3, #30
    cbba:	d5e3      	bpl.n	cb84 <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
    cbbc:	7833      	ldrb	r3, [r6, #0]
    cbbe:	42bb      	cmp	r3, r7
    cbc0:	d1e0      	bne.n	cb84 <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
    cbc2:	3501      	adds	r5, #1
    cbc4:	4807      	ldr	r0, [pc, #28]	; (cbe4 <bt_keys_find_irk+0x6c>)
    cbc6:	4629      	mov	r1, r5
    cbc8:	f013 fd40 	bl	2064c <bt_rpa_irk_matches>
    cbcc:	2800      	cmp	r0, #0
    cbce:	d0d9      	beq.n	cb84 <bt_keys_find_irk+0xc>
	memcpy(dst, src, sizeof(*dst));
    cbd0:	682b      	ldr	r3, [r5, #0]
    cbd2:	4805      	ldr	r0, [pc, #20]	; (cbe8 <bt_keys_find_irk+0x70>)
    cbd4:	f8c6 303a 	str.w	r3, [r6, #58]	; 0x3a
    cbd8:	88ab      	ldrh	r3, [r5, #4]
    cbda:	8083      	strh	r3, [r0, #4]
			return &key_pool[i];
    cbdc:	383a      	subs	r0, #58	; 0x3a
}
    cbde:	e7d2      	b.n	cb86 <bt_keys_find_irk+0xe>
    cbe0:	200016ac 	.word	0x200016ac
    cbe4:	200016d6 	.word	0x200016d6
    cbe8:	200016e6 	.word	0x200016e6

0000cbec <bt_keys_find_addr>:

struct bt_keys *bt_keys_find_addr(uint8_t id, const bt_addr_le_t *addr)
{
    cbec:	b510      	push	{r4, lr}
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if (key_pool[i].id == id &&
    cbee:	4c06      	ldr	r4, [pc, #24]	; (cc08 <bt_keys_find_addr+0x1c>)
    cbf0:	7823      	ldrb	r3, [r4, #0]
    cbf2:	4283      	cmp	r3, r0
    cbf4:	d104      	bne.n	cc00 <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
    cbf6:	2207      	movs	r2, #7
    cbf8:	1c60      	adds	r0, r4, #1
    cbfa:	f016 fd24 	bl	23646 <memcmp>
    cbfe:	b108      	cbz	r0, cc04 <bt_keys_find_addr+0x18>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
    cc00:	2000      	movs	r0, #0
}
    cc02:	bd10      	pop	{r4, pc}
			return &key_pool[i];
    cc04:	4620      	mov	r0, r4
    cc06:	e7fc      	b.n	cc02 <bt_keys_find_addr+0x16>
    cc08:	200016ac 	.word	0x200016ac

0000cc0c <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
    cc0c:	b470      	push	{r4, r5, r6}
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    cc0e:	1e54      	subs	r4, r2, #1
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    cc10:	1dc5      	adds	r5, r0, #7
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    cc12:	b2a4      	uxth	r4, r4
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    cc14:	f025 0503 	bic.w	r5, r5, #3
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    cc18:	fb01 f604 	mul.w	r6, r1, r4
	*mem_head = mem_pool;
    cc1c:	6018      	str	r0, [r3, #0]
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    cc1e:	802a      	strh	r2, [r5, #0]
		     sizeof(mem_pool));
	while (mem_count--) {
    cc20:	1e93      	subs	r3, r2, #2
    cc22:	2200      	movs	r2, #0
    cc24:	5182      	str	r2, [r0, r6]
    cc26:	b17c      	cbz	r4, cc48 <mem_init+0x3c>
    cc28:	b29b      	uxth	r3, r3
    cc2a:	fb03 1401 	mla	r4, r3, r1, r1
    cc2e:	fb03 f201 	mul.w	r2, r3, r1
    cc32:	4420      	add	r0, r4
    cc34:	1b12      	subs	r2, r2, r4
    cc36:	f64f 74ff 	movw	r4, #65535	; 0xffff
    cc3a:	3b01      	subs	r3, #1
    cc3c:	b29b      	uxth	r3, r3
    cc3e:	42a3      	cmp	r3, r4
    cc40:	5080      	str	r0, [r0, r2]
    cc42:	eba0 0001 	sub.w	r0, r0, r1
    cc46:	d1f8      	bne.n	cc3a <mem_init+0x2e>
		next = (uint32_t)((uint8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
    cc48:	bc70      	pop	{r4, r5, r6}
    cc4a:	4770      	bx	lr

0000cc4c <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    cc4c:	4603      	mov	r3, r0
	if (*mem_head) {
    cc4e:	6800      	ldr	r0, [r0, #0]
    cc50:	b180      	cbz	r0, cc74 <mem_acquire+0x28>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    cc52:	6802      	ldr	r2, [r0, #0]

		/* Store free mem_count after the list's next pointer */
		if (head) {
    cc54:	b162      	cbz	r2, cc70 <mem_acquire+0x24>
{
    cc56:	b410      	push	{r4}
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    cc58:	1dc4      	adds	r4, r0, #7
    cc5a:	f024 0403 	bic.w	r4, r4, #3
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
    cc5e:	1dd1      	adds	r1, r2, #7
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    cc60:	8824      	ldrh	r4, [r4, #0]
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
    cc62:	f021 0103 	bic.w	r1, r1, #3
		free_count--;
    cc66:	3c01      	subs	r4, #1
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
    cc68:	800c      	strh	r4, [r1, #0]
		*mem_head = head;
		return mem;
	}

	return NULL;
}
    cc6a:	bc10      	pop	{r4}
		*mem_head = head;
    cc6c:	601a      	str	r2, [r3, #0]
}
    cc6e:	4770      	bx	lr
		*mem_head = head;
    cc70:	601a      	str	r2, [r3, #0]
		return mem;
    cc72:	4770      	bx	lr
}
    cc74:	4770      	bx	lr
    cc76:	bf00      	nop

0000cc78 <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    cc78:	b410      	push	{r4}
	uint16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    cc7a:	680b      	ldr	r3, [r1, #0]
{
    cc7c:	b083      	sub	sp, #12
    cc7e:	4602      	mov	r2, r0
    cc80:	9001      	str	r0, [sp, #4]
	if (*mem_head) {
    cc82:	b183      	cbz	r3, cca6 <mem_release+0x2e>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    cc84:	3307      	adds	r3, #7
    cc86:	f023 0303 	bic.w	r3, r3, #3
    cc8a:	8818      	ldrh	r0, [r3, #0]
    cc8c:	3001      	adds	r0, #1
    cc8e:	b280      	uxth	r0, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    cc90:	4613      	mov	r3, r2
    cc92:	680c      	ldr	r4, [r1, #0]
    cc94:	f843 4b07 	str.w	r4, [r3], #7
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));

	/* Store free mem_count after the list's next pointer */
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
    cc98:	f023 0303 	bic.w	r3, r3, #3
    cc9c:	8018      	strh	r0, [r3, #0]

	*mem_head = mem;
    cc9e:	600a      	str	r2, [r1, #0]
}
    cca0:	b003      	add	sp, #12
    cca2:	bc10      	pop	{r4}
    cca4:	4770      	bx	lr
    cca6:	2001      	movs	r0, #1
    cca8:	e7f2      	b.n	cc90 <mem_release+0x18>
    ccaa:	bf00      	nop

0000ccac <mem_get>:
}

void *mem_get(void *mem_pool, uint16_t mem_size, uint16_t index)
{
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}
    ccac:	fb02 0001 	mla	r0, r2, r1, r0
    ccb0:	4770      	bx	lr
    ccb2:	bf00      	nop

0000ccb4 <mem_index_get>:

uint16_t mem_index_get(void *mem, void *mem_pool, uint16_t mem_size)
{
	return ((uint16_t)((uint8_t *)mem - (uint8_t *)mem_pool) / mem_size);
    ccb4:	1a40      	subs	r0, r0, r1
    ccb6:	b280      	uxth	r0, r0
}
    ccb8:	fbb0 f0f2 	udiv	r0, r0, r2
    ccbc:	4770      	bx	lr
    ccbe:	bf00      	nop

0000ccc0 <mem_rcopy>:
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
	src += len;
	while (len--) {
    ccc0:	1e53      	subs	r3, r2, #1
	src += len;
    ccc2:	4411      	add	r1, r2
	while (len--) {
    ccc4:	b29b      	uxth	r3, r3
    ccc6:	b142      	cbz	r2, ccda <mem_rcopy+0x1a>
    ccc8:	43db      	mvns	r3, r3
    ccca:	18ca      	adds	r2, r1, r3
    cccc:	3801      	subs	r0, #1
		*dst++ = *--src;
    ccce:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
    ccd2:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (len--) {
    ccd6:	4291      	cmp	r1, r2
    ccd8:	d1f9      	bne.n	ccce <mem_rcopy+0xe>
	}
}
    ccda:	4770      	bx	lr

0000ccdc <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
uint8_t mem_nz(uint8_t *src, uint16_t len)
{
	while (len--) {
    ccdc:	4401      	add	r1, r0
    ccde:	e002      	b.n	cce6 <mem_nz+0xa>
		if (*src++) {
    cce0:	f810 3b01 	ldrb.w	r3, [r0], #1
    cce4:	b91b      	cbnz	r3, ccee <mem_nz+0x12>
	while (len--) {
    cce6:	4288      	cmp	r0, r1
    cce8:	d1fa      	bne.n	cce0 <mem_nz+0x4>
			return 1;
		}
	}

	return 0;
    ccea:	2000      	movs	r0, #0
    ccec:	4770      	bx	lr
			return 1;
    ccee:	2001      	movs	r0, #1
}
    ccf0:	4770      	bx	lr
    ccf2:	bf00      	nop

0000ccf4 <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
    ccf4:	6010      	str	r0, [r2, #0]
    ccf6:	6008      	str	r0, [r1, #0]

	return link;
}
    ccf8:	4770      	bx	lr
    ccfa:	bf00      	nop

0000ccfc <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
    ccfc:	680a      	ldr	r2, [r1, #0]
{
    ccfe:	4603      	mov	r3, r0
	if (*head != *tail) {
    cd00:	6800      	ldr	r0, [r0, #0]
    cd02:	4290      	cmp	r0, r2
		return NULL;
	}

	old_head = *head;
	*head = *tail = NULL;
    cd04:	bf05      	ittet	eq
    cd06:	2200      	moveq	r2, #0
    cd08:	600a      	streq	r2, [r1, #0]
		return NULL;
    cd0a:	2000      	movne	r0, #0
	*head = *tail = NULL;
    cd0c:	601a      	streq	r2, [r3, #0]

	return old_head;
}
    cd0e:	4770      	bx	lr

0000cd10 <memq_enqueue>:
 * @param mem[in]      The memory payload to be enqueued. Pointed to by old tail
 * @param tail[in,out] Tail of queue. Will be updated to point to link
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
    cd10:	b410      	push	{r4}
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
    cd12:	6814      	ldr	r4, [r2, #0]
    cd14:	6020      	str	r0, [r4, #0]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
    cd16:	6814      	ldr	r4, [r2, #0]
    cd18:	6061      	str	r1, [r4, #4]
	 */
	cpu_dmb(); /* Ensure data accesses are synchronized */
	*tail = link; /* Commit: enqueue of memq node */

	return link;
}
    cd1a:	bc10      	pop	{r4}
	*tail = link; /* Commit: enqueue of memq node */
    cd1c:	6010      	str	r0, [r2, #0]
}
    cd1e:	4770      	bx	lr

0000cd20 <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
    cd20:	4288      	cmp	r0, r1
    cd22:	d003      	beq.n	cd2c <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
    cd24:	b11a      	cbz	r2, cd2e <memq_peek+0xe>
		*mem = head->mem;
    cd26:	6843      	ldr	r3, [r0, #4]
    cd28:	6013      	str	r3, [r2, #0]
    cd2a:	4770      	bx	lr
		return NULL;
    cd2c:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
    cd2e:	4770      	bx	lr

0000cd30 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
    cd30:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    cd32:	4283      	cmp	r3, r0
    cd34:	d009      	beq.n	cd4a <memq_dequeue+0x1a>
	if (mem) {
    cd36:	b12a      	cbz	r2, cd44 <memq_dequeue+0x14>
		*mem = head->mem;
    cd38:	6858      	ldr	r0, [r3, #4]
    cd3a:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
    cd3c:	681a      	ldr	r2, [r3, #0]
    cd3e:	600a      	str	r2, [r1, #0]

	return old_head;
}
    cd40:	4618      	mov	r0, r3
    cd42:	4770      	bx	lr
	if (old_head == NULL) {
    cd44:	2b00      	cmp	r3, #0
    cd46:	d1f9      	bne.n	cd3c <memq_dequeue+0xc>
    cd48:	e7fa      	b.n	cd40 <memq_dequeue+0x10>
		return NULL; /* queue is empty */
    cd4a:	2300      	movs	r3, #0
    cd4c:	e7f8      	b.n	cd40 <memq_dequeue+0x10>
    cd4e:	bf00      	nop

0000cd50 <mayfly_init>:
#if defined(MAYFLY_UT)
static uint8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
    cd50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cd54:	f8df 8034 	ldr.w	r8, [pc, #52]	; cd8c <mayfly_init+0x3c>
    cd58:	4e0b      	ldr	r6, [pc, #44]	; (cd88 <mayfly_init+0x38>)
    cd5a:	270c      	movs	r7, #12
	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
    cd5c:	f106 0430 	add.w	r4, r6, #48	; 0x30
{
    cd60:	4645      	mov	r5, r8
			memq_init(&mfl[callee_id][caller_id],
    cd62:	1d22      	adds	r2, r4, #4
    cd64:	4621      	mov	r1, r4
    cd66:	4628      	mov	r0, r5
    cd68:	3c0c      	subs	r4, #12
    cd6a:	f7ff ffc3 	bl	ccf4 <memq_init>
		while (caller_id--) {
    cd6e:	42b4      	cmp	r4, r6
    cd70:	f1a5 0508 	sub.w	r5, r5, #8
    cd74:	d1f5      	bne.n	cd62 <mayfly_init+0x12>
	while (callee_id--) {
    cd76:	3f04      	subs	r7, #4
    cd78:	1d3b      	adds	r3, r7, #4
    cd7a:	f1a8 0820 	sub.w	r8, r8, #32
    cd7e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
    cd82:	d1eb      	bne.n	cd5c <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
    cd84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cd88:	20001810 	.word	0x20001810
    cd8c:	20001780 	.word	0x20001780

0000cd90 <mayfly_enable>:

void mayfly_enable(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
    cd90:	b430      	push	{r4, r5}
    cd92:	4603      	mov	r3, r0
    cd94:	460c      	mov	r4, r1
	if (enable) {
    cd96:	b19a      	cbz	r2, cdc0 <mayfly_enable+0x30>
		if (mft[callee_id][caller_id].enable_req ==
    cd98:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    cd9c:	0108      	lsls	r0, r1, #4
    cd9e:	4d14      	ldr	r5, [pc, #80]	; (cdf0 <mayfly_enable+0x60>)
    cda0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    cda4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    cda8:	4429      	add	r1, r5
    cdaa:	7a48      	ldrb	r0, [r1, #9]
    cdac:	7a0d      	ldrb	r5, [r1, #8]
    cdae:	42a8      	cmp	r0, r5
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    cdb0:	bf04      	itt	eq
    cdb2:	3001      	addeq	r0, #1
    cdb4:	7208      	strbeq	r0, [r1, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    cdb6:	4621      	mov	r1, r4
    cdb8:	4618      	mov	r0, r3

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
    cdba:	bc30      	pop	{r4, r5}
		mayfly_enable_cb(caller_id, callee_id, enable);
    cdbc:	f00c bf38 	b.w	19c30 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    cdc0:	eb01 0241 	add.w	r2, r1, r1, lsl #1
    cdc4:	4d0a      	ldr	r5, [pc, #40]	; (cdf0 <mayfly_enable+0x60>)
    cdc6:	0112      	lsls	r2, r2, #4
    cdc8:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    cdcc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    cdd0:	442b      	add	r3, r5
    cdd2:	7a9d      	ldrb	r5, [r3, #10]
    cdd4:	7ada      	ldrb	r2, [r3, #11]
    cdd6:	42aa      	cmp	r2, r5
    cdd8:	d001      	beq.n	cdde <mayfly_enable+0x4e>
}
    cdda:	bc30      	pop	{r4, r5}
    cddc:	4770      	bx	lr
			mfp[callee_id] = 1U;
    cdde:	4d05      	ldr	r5, [pc, #20]	; (cdf4 <mayfly_enable+0x64>)
			mft[callee_id][caller_id].disable_req++;
    cde0:	3201      	adds	r2, #1
    cde2:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
    cde4:	2301      	movs	r3, #1
    cde6:	546b      	strb	r3, [r5, r1]
}
    cde8:	bc30      	pop	{r4, r5}
			mayfly_pend(caller_id, callee_id);
    cdea:	f00c bf77 	b.w	19cdc <mayfly_pend>
    cdee:	bf00      	nop
    cdf0:	2000178c 	.word	0x2000178c
    cdf4:	20001788 	.word	0x20001788

0000cdf8 <mayfly_enqueue>:

uint32_t mayfly_enqueue(uint8_t caller_id, uint8_t callee_id, uint8_t chain,
			struct mayfly *m)
{
    cdf8:	b570      	push	{r4, r5, r6, lr}
    cdfa:	461c      	mov	r4, r3
    cdfc:	4606      	mov	r6, r0
    cdfe:	460d      	mov	r5, r1
	uint8_t state;
	uint8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    ce00:	b322      	cbz	r2, ce4c <mayfly_enqueue+0x54>
    ce02:	7863      	ldrb	r3, [r4, #1]

	/* shadow the ack */
	ack = m->_ack;

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    ce04:	7822      	ldrb	r2, [r4, #0]
    ce06:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
    ce08:	f012 0203 	ands.w	r2, r2, #3
    ce0c:	d005      	beq.n	ce1a <mayfly_enqueue+0x22>
		if (chain) {
			if (state != 1U) {
    ce0e:	2a01      	cmp	r2, #1
    ce10:	d040      	beq.n	ce94 <mayfly_enqueue+0x9c>
				/* mark as ready in queue */
				m->_req = ack + 1;
    ce12:	3301      	adds	r3, #1
    ce14:	b2db      	uxtb	r3, r3
    ce16:	7023      	strb	r3, [r4, #0]

				goto mayfly_enqueue_pend;
    ce18:	e00f      	b.n	ce3a <mayfly_enqueue+0x42>
		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    ce1a:	2230      	movs	r2, #48	; 0x30
    ce1c:	2104      	movs	r1, #4
    ce1e:	fb12 1105 	smlabb	r1, r2, r5, r1
    ce22:	220c      	movs	r2, #12
    ce24:	fb12 1206 	smlabb	r2, r2, r6, r1
	m->_req = ack + 1;
    ce28:	3301      	adds	r3, #1
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    ce2a:	491b      	ldr	r1, [pc, #108]	; (ce98 <mayfly_enqueue+0xa0>)
    ce2c:	6860      	ldr	r0, [r4, #4]
	m->_req = ack + 1;
    ce2e:	b2db      	uxtb	r3, r3
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    ce30:	440a      	add	r2, r1
	m->_req = ack + 1;
    ce32:	7023      	strb	r3, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    ce34:	4621      	mov	r1, r4
    ce36:	f7ff ff6b 	bl	cd10 <memq_enqueue>

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
    ce3a:	4b18      	ldr	r3, [pc, #96]	; (ce9c <mayfly_enqueue+0xa4>)

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    ce3c:	4630      	mov	r0, r6
	mfp[callee_id] = 1U;
    ce3e:	2201      	movs	r2, #1
	mayfly_pend(caller_id, callee_id);
    ce40:	4629      	mov	r1, r5
	mfp[callee_id] = 1U;
    ce42:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
    ce44:	f00c ff4a 	bl	19cdc <mayfly_pend>

	return 0;
    ce48:	2000      	movs	r0, #0
}
    ce4a:	bd70      	pop	{r4, r5, r6, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    ce4c:	f00c ff30 	bl	19cb0 <mayfly_prio_is_equal>
    ce50:	2800      	cmp	r0, #0
    ce52:	d0d6      	beq.n	ce02 <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    ce54:	4629      	mov	r1, r5
    ce56:	4630      	mov	r0, r6
    ce58:	f00c ff0a 	bl	19c70 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    ce5c:	2800      	cmp	r0, #0
    ce5e:	d0d0      	beq.n	ce02 <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    ce60:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    ce64:	0111      	lsls	r1, r2, #4
    ce66:	480c      	ldr	r0, [pc, #48]	; (ce98 <mayfly_enqueue+0xa0>)
    ce68:	7863      	ldrb	r3, [r4, #1]
    ce6a:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    ce6e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    ce72:	4402      	add	r2, r0
		!mayfly_is_enabled(caller_id, callee_id) ||
    ce74:	7a91      	ldrb	r1, [r2, #10]
    ce76:	7ad2      	ldrb	r2, [r2, #11]
    ce78:	4291      	cmp	r1, r2
    ce7a:	d1c3      	bne.n	ce04 <mayfly_enqueue+0xc>
	state = (m->_req - ack) & 0x03;
    ce7c:	7822      	ldrb	r2, [r4, #0]
    ce7e:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
    ce80:	0792      	lsls	r2, r2, #30
    ce82:	d002      	beq.n	ce8a <mayfly_enqueue+0x92>
		m->_req = ack + 2;
    ce84:	3302      	adds	r3, #2
    ce86:	b2db      	uxtb	r3, r3
    ce88:	7023      	strb	r3, [r4, #0]
		m->fp(m->param);
    ce8a:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
    ce8e:	4798      	blx	r3
		return 0;
    ce90:	2000      	movs	r0, #0
}
    ce92:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
    ce94:	4610      	mov	r0, r2
}
    ce96:	bd70      	pop	{r4, r5, r6, pc}
    ce98:	2000178c 	.word	0x2000178c
    ce9c:	20001788 	.word	0x20001788

0000cea0 <mayfly_run>:
{
	uint8_t disable = 0U;
	uint8_t enable = 0U;
	uint8_t caller_id;

	if (!mfp[callee_id]) {
    cea0:	494e      	ldr	r1, [pc, #312]	; (cfdc <mayfly_run+0x13c>)
    cea2:	5c0b      	ldrb	r3, [r1, r0]
    cea4:	2b00      	cmp	r3, #0
    cea6:	f000 8098 	beq.w	cfda <mayfly_run+0x13a>
{
    ceaa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    ceae:	4b4c      	ldr	r3, [pc, #304]	; (cfe0 <mayfly_run+0x140>)
    ceb0:	f04f 0b3c 	mov.w	fp, #60	; 0x3c
{
    ceb4:	b087      	sub	sp, #28
		return;
	}
	mfp[callee_id] = 0U;
    ceb6:	2200      	movs	r2, #0
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    ceb8:	fb0b 3b00 	mla	fp, fp, r0, r3
	mfp[callee_id] = 0U;
    cebc:	540a      	strb	r2, [r1, r0]

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
    cebe:	eb00 0740 	add.w	r7, r0, r0, lsl #1
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    cec2:	f10b 0104 	add.w	r1, fp, #4
	uint8_t enable = 0U;
    cec6:	9203      	str	r2, [sp, #12]
    cec8:	eb03 1707 	add.w	r7, r3, r7, lsl #4
	uint8_t disable = 0U;
    cecc:	9201      	str	r2, [sp, #4]
	while (caller_id--) {
    cece:	f04f 0903 	mov.w	r9, #3
    ced2:	4688      	mov	r8, r1
    ced4:	9002      	str	r0, [sp, #8]
		memq_link_t *link;
		struct mayfly *m = 0;
    ced6:	2300      	movs	r3, #0

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    ced8:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
    cedc:	aa05      	add	r2, sp, #20
		struct mayfly *m = 0;
    cede:	9305      	str	r3, [sp, #20]
		link = memq_peek(mft[callee_id][caller_id].head,
    cee0:	f7ff ff1e 	bl	cd20 <memq_peek>
				 mft[callee_id][caller_id].tail,
				 (void **)&m);
		while (link) {
    cee4:	f107 0624 	add.w	r6, r7, #36	; 0x24
    cee8:	4683      	mov	fp, r0
    ceea:	2800      	cmp	r0, #0
    ceec:	d034      	beq.n	cf58 <mayfly_run+0xb8>
#if defined(MAYFLY_UT)
			_state = 0U;
#endif /* MAYFLY_UT */

			/* execute work if ready */
			state = (m->_req - m->_ack) & 0x03;
    ceee:	9c05      	ldr	r4, [sp, #20]
    cef0:	7825      	ldrb	r5, [r4, #0]
    cef2:	7863      	ldrb	r3, [r4, #1]
    cef4:	1aed      	subs	r5, r5, r3
    cef6:	f005 0503 	and.w	r5, r5, #3
			if (state == 1U) {
    cefa:	2d01      	cmp	r5, #1
    cefc:	d106      	bne.n	cf0c <mayfly_run+0x6c>
#if defined(MAYFLY_UT)
				_state = 1U;
#endif /* MAYFLY_UT */

				/* mark mayfly as ran */
				m->_ack--;
    cefe:	3b01      	subs	r3, #1
    cf00:	7063      	strb	r3, [r4, #1]

				/* call the mayfly function */
				m->fp(m->param);
    cf02:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
    cf06:	4798      	blx	r3
    cf08:	9c05      	ldr	r4, [sp, #20]
    cf0a:	7863      	ldrb	r3, [r4, #1]
	req = m->_req;
    cf0c:	f894 c000 	ldrb.w	ip, [r4]
    cf10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	if (((req - m->_ack) & 0x03) != 1U) {
    cf12:	ebac 0303 	sub.w	r3, ip, r3
    cf16:	f003 0303 	and.w	r3, r3, #3
    cf1a:	2b01      	cmp	r3, #1
		memq_dequeue(mft[callee_id][caller_id].tail,
    cf1c:	f04f 0200 	mov.w	r2, #0
    cf20:	4631      	mov	r1, r6
	req = m->_req;
    cf22:	fa5f fa8c 	uxtb.w	sl, ip
	if (((req - m->_ack) & 0x03) != 1U) {
    cf26:	d00d      	beq.n	cf44 <mayfly_run+0xa4>
		memq_dequeue(mft[callee_id][caller_id].tail,
    cf28:	f7ff ff02 	bl	cd30 <memq_dequeue>
		ack = m->_ack;
    cf2c:	7862      	ldrb	r2, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
    cf2e:	7823      	ldrb	r3, [r4, #0]
		m->_link = link;
    cf30:	f8c4 b004 	str.w	fp, [r4, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
    cf34:	1a9b      	subs	r3, r3, r2
    cf36:	f003 0303 	and.w	r3, r3, #3
    cf3a:	2b01      	cmp	r3, #1
		m->_ack = req;
    cf3c:	f884 a001 	strb.w	sl, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
    cf40:	d044      	beq.n	cfcc <mayfly_run+0x12c>
    cf42:	6ab8      	ldr	r0, [r7, #40]	; 0x28

			/* dequeue if not re-pended */
			dequeue(callee_id, caller_id, link, m);

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].head,
    cf44:	4601      	mov	r1, r0
    cf46:	aa05      	add	r2, sp, #20
    cf48:	6a78      	ldr	r0, [r7, #36]	; 0x24
    cf4a:	f7ff fee9 	bl	cd20 <memq_peek>
 */
#if defined(CONFIG_BT_MAYFLY_YIELD_AFTER_CALL)
			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1U) {
    cf4e:	2d01      	cmp	r5, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    cf50:	4683      	mov	fp, r0
			if (state == 1U) {
    cf52:	d029      	beq.n	cfa8 <mayfly_run+0x108>
		while (link) {
    cf54:	2800      	cmp	r0, #0
    cf56:	d1ca      	bne.n	ceee <mayfly_run+0x4e>
				}
			}
#endif
		}

		if (mft[callee_id][caller_id].disable_req !=
    cf58:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    cf5c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
    cf60:	429a      	cmp	r2, r3
    cf62:	d003      	beq.n	cf6c <mayfly_run+0xcc>
		    mft[callee_id][caller_id].disable_ack) {
			disable = 1U;

			mft[callee_id][caller_id].disable_ack =
    cf64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			disable = 1U;
    cf68:	2301      	movs	r3, #1
    cf6a:	9301      	str	r3, [sp, #4]
				mft[callee_id][caller_id].disable_req;
		}

		if (mft[callee_id][caller_id].enable_req !=
    cf6c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    cf70:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
    cf74:	429a      	cmp	r2, r3
    cf76:	d003      	beq.n	cf80 <mayfly_run+0xe0>
		    mft[callee_id][caller_id].enable_ack) {
			enable = 1U;

			mft[callee_id][caller_id].enable_ack =
    cf78:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			enable = 1U;
    cf7c:	2301      	movs	r3, #1
    cf7e:	9303      	str	r3, [sp, #12]
	while (caller_id--) {
    cf80:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    cf84:	fa5f f989 	uxtb.w	r9, r9
    cf88:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    cf8c:	f1a7 070c 	sub.w	r7, r7, #12
    cf90:	d1a1      	bne.n	ced6 <mayfly_run+0x36>
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    cf92:	e9dd 3a01 	ldrd	r3, sl, [sp, #4]
    cf96:	b1b3      	cbz	r3, cfc6 <mayfly_run+0x126>
    cf98:	9b03      	ldr	r3, [sp, #12]
    cf9a:	b9a3      	cbnz	r3, cfc6 <mayfly_run+0x126>
		mayfly_enable_cb(callee_id, callee_id, 0);
    cf9c:	461a      	mov	r2, r3
    cf9e:	4651      	mov	r1, sl
    cfa0:	4650      	mov	r0, sl
    cfa2:	f00c fe45 	bl	19c30 <mayfly_enable_cb>
    cfa6:	e00e      	b.n	cfc6 <mayfly_run+0x126>
				if (caller_id || link) {
    cfa8:	f1b9 0f00 	cmp.w	r9, #0
    cfac:	d101      	bne.n	cfb2 <mayfly_run+0x112>
    cfae:	2800      	cmp	r0, #0
    cfb0:	d0d2      	beq.n	cf58 <mayfly_run+0xb8>
    cfb2:	f8dd a008 	ldr.w	sl, [sp, #8]
					mfp[callee_id] = 1U;
    cfb6:	4a09      	ldr	r2, [pc, #36]	; (cfdc <mayfly_run+0x13c>)
    cfb8:	2301      	movs	r3, #1
					mayfly_pend(callee_id, callee_id);
    cfba:	4651      	mov	r1, sl
    cfbc:	4650      	mov	r0, sl
					mfp[callee_id] = 1U;
    cfbe:	f802 300a 	strb.w	r3, [r2, sl]
					mayfly_pend(callee_id, callee_id);
    cfc2:	f00c fe8b 	bl	19cdc <mayfly_pend>
	}
}
    cfc6:	b007      	add	sp, #28
    cfc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			m->_ack = ack;
    cfcc:	7062      	strb	r2, [r4, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    cfce:	4621      	mov	r1, r4
    cfd0:	4658      	mov	r0, fp
    cfd2:	4642      	mov	r2, r8
    cfd4:	f7ff fe9c 	bl	cd10 <memq_enqueue>
    cfd8:	e7b3      	b.n	cf42 <mayfly_run+0xa2>
    cfda:	4770      	bx	lr
    cfdc:	20001788 	.word	0x20001788
    cfe0:	2000178c 	.word	0x2000178c

0000cfe4 <util_ones_count_get>:
 */
uint8_t util_ones_count_get(uint8_t *octets, uint8_t octets_len)
{
	uint8_t one_count = 0U;

	while (octets_len--) {
    cfe4:	b1a1      	cbz	r1, d010 <util_ones_count_get+0x2c>
    cfe6:	1e4b      	subs	r3, r1, #1
    cfe8:	b2db      	uxtb	r3, r3
{
    cfea:	b410      	push	{r4}
    cfec:	1e41      	subs	r1, r0, #1
    cfee:	18c4      	adds	r4, r0, r3
	uint8_t one_count = 0U;
    cff0:	2000      	movs	r0, #0
		uint8_t bite;

		bite = *octets;
    cff2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		while (bite) {
    cff6:	b13b      	cbz	r3, d008 <util_ones_count_get+0x24>
			bite &= (bite - 1);
    cff8:	b25b      	sxtb	r3, r3
    cffa:	1e5a      	subs	r2, r3, #1
    cffc:	4013      	ands	r3, r2
			one_count++;
    cffe:	3001      	adds	r0, #1
		while (bite) {
    d000:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
			one_count++;
    d004:	b2c0      	uxtb	r0, r0
		while (bite) {
    d006:	d1f7      	bne.n	cff8 <util_ones_count_get+0x14>
	while (octets_len--) {
    d008:	42a1      	cmp	r1, r4
    d00a:	d1f2      	bne.n	cff2 <util_ones_count_get+0xe>
		}
		octets++;
	}

	return one_count;
}
    d00c:	bc10      	pop	{r4}
    d00e:	4770      	bx	lr
	uint8_t one_count = 0U;
    d010:	4608      	mov	r0, r1
}
    d012:	4770      	bx	lr

0000d014 <ticker_worker>:
 *
 * @param param Pointer to ticker instance
 *
 */
void ticker_worker(void *param)
{
    d014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t ticks_expired;
	uint8_t ticker_id_head;

	/* Defer worker if job running */
	instance->worker_trigger = 1U;
	if (instance->job_guard) {
    d018:	7f82      	ldrb	r2, [r0, #30]
{
    d01a:	b08f      	sub	sp, #60	; 0x3c
	instance->worker_trigger = 1U;
    d01c:	2301      	movs	r3, #1
	if (instance->job_guard) {
    d01e:	9206      	str	r2, [sp, #24]
	instance->worker_trigger = 1U;
    d020:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    d022:	2a00      	cmp	r2, #0
    d024:	d15b      	bne.n	d0de <ticker_worker+0xca>
		return;
	}

	/* If no tickers queued (active), do nothing */
	if (instance->ticker_id_head == TICKER_NULL) {
    d026:	7f43      	ldrb	r3, [r0, #29]
    d028:	2bff      	cmp	r3, #255	; 0xff
    d02a:	4681      	mov	r9, r0
    d02c:	d056      	beq.n	d0dc <ticker_worker+0xc8>
		instance->worker_trigger = 0U;
		return;
	}

	/* Get ticks elapsed since last job execution */
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    d02e:	f00c f967 	bl	19300 <cntr_cnt_get>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    d032:	f8d9 2014 	ldr.w	r2, [r9, #20]
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    d036:	f899 301c 	ldrb.w	r3, [r9, #28]
	ticker_id_head = instance->ticker_id_head;
    d03a:	f899 601d 	ldrb.w	r6, [r9, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    d03e:	1a80      	subs	r0, r0, r2
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    d040:	2bff      	cmp	r3, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    d042:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    d046:	f000 8140 	beq.w	d2ca <ticker_worker+0x2b6>
		if (instance->ticks_slot_previous > ticks_elapsed) {
    d04a:	f8d9 3018 	ldr.w	r3, [r9, #24]
	uint8_t slot_reserved = 0;
    d04e:	42bb      	cmp	r3, r7
    d050:	bf94      	ite	ls
    d052:	2300      	movls	r3, #0
    d054:	2301      	movhi	r3, #1
    d056:	9303      	str	r3, [sp, #12]
	while (ticker_id_head != TICKER_NULL) {
    d058:	2eff      	cmp	r6, #255	; 0xff
	node = &instance->nodes[0];
    d05a:	f8d9 b000 	ldr.w	fp, [r9]
	ticks_expired = 0U;
    d05e:	f04f 0800 	mov.w	r8, #0
	while (ticker_id_head != TICKER_NULL) {
    d062:	d046      	beq.n	d0f2 <ticker_worker+0xde>
			must_expire_skip = 1U;
    d064:	46c2      	mov	sl, r8
    d066:	f8cd 9010 	str.w	r9, [sp, #16]
		ticker = &node[ticker_id_head];
    d06a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    d06e:	eb0b 1406 	add.w	r4, fp, r6, lsl #4
    d072:	0136      	lsls	r6, r6, #4
		ticks_to_expire = ticker->ticks_to_expire;
    d074:	68a1      	ldr	r1, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    d076:	42b9      	cmp	r1, r7
    d078:	d838      	bhi.n	d0ec <ticker_worker+0xd8>
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
    d07a:	78a2      	ldrb	r2, [r4, #2]
    d07c:	7863      	ldrb	r3, [r4, #1]
		ticker_id_head = ticker->next;
    d07e:	f81b 6006 	ldrb.w	r6, [fp, r6]
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
    d082:	1a9b      	subs	r3, r3, r2
    d084:	b2db      	uxtb	r3, r3
    d086:	2b01      	cmp	r3, #1
		ticks_elapsed -= ticks_to_expire;
    d088:	eba7 0701 	sub.w	r7, r7, r1
		ticks_expired += ticks_to_expire;
    d08c:	448a      	add	sl, r1
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
    d08e:	d12b      	bne.n	d0e8 <ticker_worker+0xd4>
		if (ticker->ticks_slot != 0U &&
    d090:	69a5      	ldr	r5, [r4, #24]
    d092:	2d00      	cmp	r5, #0
    d094:	d055      	beq.n	d142 <ticker_worker+0x12e>
    d096:	9b03      	ldr	r3, [sp, #12]
    d098:	2b00      	cmp	r3, #0
    d09a:	f000 8092 	beq.w	d1c2 <ticker_worker+0x1ae>
    d09e:	8be3      	ldrh	r3, [r4, #30]
    d0a0:	9305      	str	r3, [sp, #20]
			struct ticker_ext *ext_data = ticker->ext_data;
    d0a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			if (ext_data &&
    d0a4:	b13b      	cbz	r3, d0b6 <ticker_worker+0xa2>
    d0a6:	6819      	ldr	r1, [r3, #0]
    d0a8:	b119      	cbz	r1, d0b2 <ticker_worker+0x9e>
			    ext_data->ticks_slot_window != 0U &&
    d0aa:	7a19      	ldrb	r1, [r3, #8]
    d0ac:	2900      	cmp	r1, #0
    d0ae:	f000 80fa 	beq.w	d2a6 <ticker_worker+0x292>
				ext_data->reschedule_state =
    d0b2:	2100      	movs	r1, #0
    d0b4:	7219      	strb	r1, [r3, #8]
			ticker->lazy_current++;
    d0b6:	9905      	ldr	r1, [sp, #20]
			if ((ticker->must_expire == 0U) ||
    d0b8:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
			ticker->lazy_current++;
    d0bc:	3101      	adds	r1, #1
    d0be:	b289      	uxth	r1, r1
    d0c0:	83e1      	strh	r1, [r4, #30]
			if ((ticker->must_expire == 0U) ||
    d0c2:	b178      	cbz	r0, d0e4 <ticker_worker+0xd0>
    d0c4:	8ba0      	ldrh	r0, [r4, #28]
    d0c6:	4288      	cmp	r0, r1
    d0c8:	d20c      	bcs.n	d0e4 <ticker_worker+0xd0>
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
    d0ca:	2b00      	cmp	r3, #0
    d0cc:	f000 8100 	beq.w	d2d0 <ticker_worker+0x2bc>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
    d0d0:	7a19      	ldrb	r1, [r3, #8]
    d0d2:	2901      	cmp	r1, #1
    d0d4:	d006      	beq.n	d0e4 <ticker_worker+0xd0>
			must_expire_skip = 1U;
    d0d6:	f04f 0e01 	mov.w	lr, #1
    d0da:	e036      	b.n	d14a <ticker_worker+0x136>
		instance->worker_trigger = 0U;
    d0dc:	77c2      	strb	r2, [r0, #31]
}
    d0de:	b00f      	add	sp, #60	; 0x3c
    d0e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ticker->ack--;
    d0e4:	3a01      	subs	r2, #1
    d0e6:	70a2      	strb	r2, [r4, #2]
	while (ticker_id_head != TICKER_NULL) {
    d0e8:	2eff      	cmp	r6, #255	; 0xff
    d0ea:	d1be      	bne.n	d06a <ticker_worker+0x56>
    d0ec:	f8dd 9010 	ldr.w	r9, [sp, #16]
    d0f0:	46d0      	mov	r8, sl
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    d0f2:	f899 300b 	ldrb.w	r3, [r9, #11]
    d0f6:	f899 200a 	ldrb.w	r2, [r9, #10]
    d0fa:	429a      	cmp	r2, r3
    d0fc:	d10a      	bne.n	d114 <ticker_worker+0x100>
	uint8_t idx = *ticks_elapsed_index + 1;
    d0fe:	3201      	adds	r2, #1
    d100:	b2d2      	uxtb	r2, r2
	if (idx == DOUBLE_BUFFER_SIZE) {
    d102:	2a02      	cmp	r2, #2
    d104:	bf1c      	itt	ne
    d106:	4613      	movne	r3, r2
    d108:	9306      	strne	r3, [sp, #24]
	*ticks_elapsed_index = idx;
    d10a:	9a06      	ldr	r2, [sp, #24]
    d10c:	f889 200b 	strb.w	r2, [r9, #11]
    d110:	bf08      	it	eq
    d112:	2300      	moveq	r3, #0
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    d114:	eb09 0383 	add.w	r3, r9, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    d118:	f8d9 4024 	ldr.w	r4, [r9, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    d11c:	f8c3 800c 	str.w	r8, [r3, #12]
	instance->worker_trigger = 0U;
    d120:	2200      	movs	r2, #0
    d122:	f889 201f 	strb.w	r2, [r9, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    d126:	464b      	mov	r3, r9
    d128:	2201      	movs	r2, #1
    d12a:	2104      	movs	r1, #4
    d12c:	2003      	movs	r0, #3
    d12e:	46a4      	mov	ip, r4
}
    d130:	b00f      	add	sp, #60	; 0x3c
    d132:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    d136:	4760      	bx	ip
    d138:	e9dd 7a0b 	ldrd	r7, sl, [sp, #44]	; 0x2c
    d13c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    d13e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    d140:	4644      	mov	r4, r8
		if (ticker->ext_data) {
    d142:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d144:	b1f3      	cbz	r3, d184 <ticker_worker+0x170>
    d146:	f04f 0e00 	mov.w	lr, #0
			ticker->ext_data->ticks_drift = 0U;
    d14a:	2100      	movs	r1, #0
			ticker->ext_data->reschedule_state =
    d14c:	7219      	strb	r1, [r3, #8]
		if (ticker->timeout_func) {
    d14e:	68e5      	ldr	r5, [r4, #12]
			ticker->ext_data->ticks_drift = 0U;
    d150:	6059      	str	r1, [r3, #4]
		ticker->ack--;
    d152:	3a01      	subs	r2, #1
    d154:	70a2      	strb	r2, [r4, #2]
		if (ticker->timeout_func) {
    d156:	2d00      	cmp	r5, #0
    d158:	d0c6      	beq.n	d0e8 <ticker_worker+0xd4>
					   ticks_expired -
    d15a:	9b04      	ldr	r3, [sp, #16]
    d15c:	6962      	ldr	r2, [r4, #20]
    d15e:	6958      	ldr	r0, [r3, #20]
			ticker->timeout_func(ticks_at_expire,
    d160:	6a61      	ldr	r1, [r4, #36]	; 0x24
    d162:	f894 c003 	ldrb.w	ip, [r4, #3]
    d166:	6923      	ldr	r3, [r4, #16]
					   ticks_expired -
    d168:	ebaa 0202 	sub.w	r2, sl, r2
    d16c:	4410      	add	r0, r2
			ticks_at_expire = (instance->ticks_current +
    d16e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
    d172:	f1be 0f00 	cmp.w	lr, #0
    d176:	d016      	beq.n	d1a6 <ticker_worker+0x192>
    d178:	9300      	str	r3, [sp, #0]
    d17a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d17e:	4663      	mov	r3, ip
    d180:	47a8      	blx	r5
			if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    d182:	e7b1      	b.n	d0e8 <ticker_worker+0xd4>
		if (ticker->timeout_func) {
    d184:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
    d186:	3a01      	subs	r2, #1
    d188:	70a2      	strb	r2, [r4, #2]
		if (ticker->timeout_func) {
    d18a:	2d00      	cmp	r5, #0
    d18c:	d0ac      	beq.n	d0e8 <ticker_worker+0xd4>
					   ticks_expired -
    d18e:	9b04      	ldr	r3, [sp, #16]
    d190:	6962      	ldr	r2, [r4, #20]
    d192:	6958      	ldr	r0, [r3, #20]
			ticker->timeout_func(ticks_at_expire,
    d194:	6a61      	ldr	r1, [r4, #36]	; 0x24
    d196:	f894 c003 	ldrb.w	ip, [r4, #3]
    d19a:	6923      	ldr	r3, [r4, #16]
					   ticks_expired -
    d19c:	ebaa 0202 	sub.w	r2, sl, r2
    d1a0:	4410      	add	r0, r2
			ticks_at_expire = (instance->ticks_current +
    d1a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
    d1a6:	8be2      	ldrh	r2, [r4, #30]
    d1a8:	9300      	str	r3, [sp, #0]
    d1aa:	4663      	mov	r3, ip
    d1ac:	47a8      	blx	r5
				if (ticker->ticks_slot != 0U) {
    d1ae:	69a2      	ldr	r2, [r4, #24]
				ticker->lazy_current = 0U;
    d1b0:	2300      	movs	r3, #0
					slot_reserved = 1U;
    d1b2:	429a      	cmp	r2, r3
    d1b4:	9a03      	ldr	r2, [sp, #12]
				ticker->lazy_current = 0U;
    d1b6:	83e3      	strh	r3, [r4, #30]
					slot_reserved = 1U;
    d1b8:	bf18      	it	ne
    d1ba:	2201      	movne	r2, #1
    d1bc:	9203      	str	r2, [sp, #12]
				ticker->force = 0U;
    d1be:	70e3      	strb	r3, [r4, #3]
				if (ticker->ticks_slot != 0U) {
    d1c0:	e792      	b.n	d0e8 <ticker_worker+0xd4>
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
    d1c2:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
    d1c6:	9307      	str	r3, [sp, #28]
    d1c8:	3380      	adds	r3, #128	; 0x80
    d1ca:	d0ba      	beq.n	d142 <ticker_worker+0x12e>
    d1cc:	2eff      	cmp	r6, #255	; 0xff
    d1ce:	d0b8      	beq.n	d142 <ticker_worker+0x12e>
		int32_t lazy_current = ticker->lazy_current;
    d1d0:	8be3      	ldrh	r3, [r4, #30]
		if (lazy_current >= ticker->lazy_periodic) {
    d1d2:	f8b4 c01c 	ldrh.w	ip, [r4, #28]
		uint32_t current_age = ticker->ticks_periodic +
    d1d6:	6861      	ldr	r1, [r4, #4]
				(lazy_current - ticker->priority);
    d1d8:	9807      	ldr	r0, [sp, #28]
		int32_t lazy_current = ticker->lazy_current;
    d1da:	9305      	str	r3, [sp, #20]
		if (lazy_current >= ticker->lazy_periodic) {
    d1dc:	4563      	cmp	r3, ip
			lazy_current -= ticker->lazy_periodic;
    d1de:	bf28      	it	cs
    d1e0:	eba3 030c 	subcs.w	r3, r3, ip
				(lazy_current - ticker->priority);
    d1e4:	1a18      	subs	r0, r3, r0
		uint32_t current_age = ticker->ticks_periodic +
    d1e6:	fb03 1301 	mla	r3, r3, r1, r1
    d1ea:	9308      	str	r3, [sp, #32]
		uint32_t acc_ticks_to_expire = 0U;
    d1ec:	e9cd 7a0b 	strd	r7, sl, [sp, #44]	; 0x2c
				(lazy_current - ticker->priority);
    d1f0:	9009      	str	r0, [sp, #36]	; 0x24
		uint32_t current_age = ticker->ticks_periodic +
    d1f2:	4633      	mov	r3, r6
		uint32_t acc_ticks_to_expire = 0U;
    d1f4:	f04f 0c00 	mov.w	ip, #0
    d1f8:	920a      	str	r2, [sp, #40]	; 0x28
    d1fa:	46a0      	mov	r8, r4
    d1fc:	960d      	str	r6, [sp, #52]	; 0x34
    d1fe:	9102      	str	r1, [sp, #8]
    d200:	e02c      	b.n	d25c <ticker_worker+0x248>
				(ticker->ticks_periodic == 0U) ||
    d202:	9c02      	ldr	r4, [sp, #8]
					  0U :
    d204:	eba9 0e0e 	sub.w	lr, r9, lr
				(ticker->ticks_periodic == 0U) ||
    d208:	2c00      	cmp	r4, #0
    d20a:	d047      	beq.n	d29c <ticker_worker+0x288>
    d20c:	9c08      	ldr	r4, [sp, #32]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
    d20e:	fb09 ee06 	mla	lr, r9, r6, lr
				(ticker->ticks_periodic == 0U) ||
    d212:	4574      	cmp	r4, lr
    d214:	bf8c      	ite	hi
    d216:	f04f 0e01 	movhi.w	lr, #1
    d21a:	f04f 0e00 	movls.w	lr, #0
					(ticker->ticks_periodic != 0U) &&
    d21e:	bf34      	ite	cc
    d220:	f04f 0901 	movcc.w	r9, #1
    d224:	f04f 0900 	movcs.w	r9, #0
			if (!lazy_next_periodic_skip &&
    d228:	4281      	cmp	r1, r0
			uint8_t next_force = (ticker_next->force > ticker->force);
    d22a:	f892 a003 	ldrb.w	sl, [r2, #3]
    d22e:	f898 2003 	ldrb.w	r2, [r8, #3]
			if (!lazy_next_periodic_skip &&
    d232:	d30e      	bcc.n	d252 <ticker_worker+0x23e>
    d234:	4592      	cmp	sl, r2
    d236:	d842      	bhi.n	d2be <ticker_worker+0x2aa>
			    (next_force ||
    d238:	f117 0f80 	cmn.w	r7, #128	; 0x80
    d23c:	d03f      	beq.n	d2be <ticker_worker+0x2aa>
			     next_is_critical ||
    d23e:	9a09      	ldr	r2, [sp, #36]	; 0x24
				(lazy_next - ticker_next->priority) >
    d240:	1bf6      	subs	r6, r6, r7
			     next_is_critical ||
    d242:	4296      	cmp	r6, r2
    d244:	dd02      	ble.n	d24c <ticker_worker+0x238>
			     (next_has_priority && !current_is_older) ||
    d246:	f1be 0f00 	cmp.w	lr, #0
    d24a:	d038      	beq.n	d2be <ticker_worker+0x2aa>
    d24c:	9a07      	ldr	r2, [sp, #28]
    d24e:	42ba      	cmp	r2, r7
    d250:	d032      	beq.n	d2b8 <ticker_worker+0x2a4>
			id_head = ticker_next->next;
    d252:	f81b 3003 	ldrb.w	r3, [fp, r3]
		while (id_head != TICKER_NULL) {
    d256:	2bff      	cmp	r3, #255	; 0xff
    d258:	f43f af6e 	beq.w	d138 <ticker_worker+0x124>
			struct ticker_node *ticker_next = &nodes[id_head];
    d25c:	b21b      	sxth	r3, r3
    d25e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    d262:	eb0b 1203 	add.w	r2, fp, r3, lsl #4
    d266:	011b      	lsls	r3, r3, #4
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
    d268:	f8d2 e008 	ldr.w	lr, [r2, #8]
    d26c:	44f4      	add	ip, lr
			if (acc_ticks_to_expire > ticker->ticks_slot) {
    d26e:	4565      	cmp	r5, ip
    d270:	f4ff af62 	bcc.w	d138 <ticker_worker+0x124>
			if (ticker_next->ticks_slot == 0U) {
    d274:	6991      	ldr	r1, [r2, #24]
    d276:	2900      	cmp	r1, #0
    d278:	d0eb      	beq.n	d252 <ticker_worker+0x23e>
			int32_t lazy_next = ticker_next->lazy_current;
    d27a:	8bd1      	ldrh	r1, [r2, #30]
				ticker_next->lazy_periodic > lazy_next;
    d27c:	8b90      	ldrh	r0, [r2, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
    d27e:	f8d2 9004 	ldr.w	r9, [r2, #4]
				ticker_next->priority;
    d282:	f992 702d 	ldrsb.w	r7, [r2, #45]	; 0x2d
			if (!lazy_next_periodic_skip) {
    d286:	4281      	cmp	r1, r0
			int32_t lazy_next = ticker_next->lazy_current;
    d288:	460e      	mov	r6, r1
				lazy_next -= ticker_next->lazy_periodic;
    d28a:	bf28      	it	cs
    d28c:	1a0e      	subcs	r6, r1, r0
					  0U :
    d28e:	f1b9 0f00 	cmp.w	r9, #0
    d292:	d1b6      	bne.n	d202 <ticker_worker+0x1ee>
				(ticker->ticks_periodic == 0U) ||
    d294:	9c02      	ldr	r4, [sp, #8]
					  0U :
    d296:	46ce      	mov	lr, r9
				(ticker->ticks_periodic == 0U) ||
    d298:	2c00      	cmp	r4, #0
    d29a:	d1b7      	bne.n	d20c <ticker_worker+0x1f8>
					(ticker->ticks_periodic != 0U) &&
    d29c:	f8dd 9008 	ldr.w	r9, [sp, #8]
				(ticker->ticks_periodic == 0U) ||
    d2a0:	f04f 0e01 	mov.w	lr, #1
    d2a4:	e7c0      	b.n	d228 <ticker_worker+0x214>
			    TICKER_RESCHEDULE_STATE_NONE &&
    d2a6:	8ba1      	ldrh	r1, [r4, #28]
    d2a8:	9805      	ldr	r0, [sp, #20]
    d2aa:	4281      	cmp	r1, r0
    d2ac:	f63f af01 	bhi.w	d0b2 <ticker_worker+0x9e>
				ext_data->reschedule_state =
    d2b0:	f04f 0101 	mov.w	r1, #1
    d2b4:	7219      	strb	r1, [r3, #8]
    d2b6:	e6fe      	b.n	d0b6 <ticker_worker+0xa2>
			     (equal_priority && next_is_older))) {
    d2b8:	f1b9 0f00 	cmp.w	r9, #0
    d2bc:	d0c9      	beq.n	d252 <ticker_worker+0x23e>
    d2be:	e9dd 7a0b 	ldrd	r7, sl, [sp, #44]	; 0x2c
    d2c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    d2c4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    d2c6:	4644      	mov	r4, r8
    d2c8:	e6eb      	b.n	d0a2 <ticker_worker+0x8e>
	uint8_t slot_reserved = 0;
    d2ca:	9b06      	ldr	r3, [sp, #24]
    d2cc:	9303      	str	r3, [sp, #12]
    d2ce:	e6c3      	b.n	d058 <ticker_worker+0x44>
		if (ticker->timeout_func) {
    d2d0:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
    d2d2:	3a01      	subs	r2, #1
    d2d4:	70a2      	strb	r2, [r4, #2]
		if (ticker->timeout_func) {
    d2d6:	2d00      	cmp	r5, #0
    d2d8:	f43f af06 	beq.w	d0e8 <ticker_worker+0xd4>
					   ticks_expired -
    d2dc:	9b04      	ldr	r3, [sp, #16]
    d2de:	6960      	ldr	r0, [r4, #20]
    d2e0:	695a      	ldr	r2, [r3, #20]
			ticker->timeout_func(ticks_at_expire,
    d2e2:	6a61      	ldr	r1, [r4, #36]	; 0x24
    d2e4:	f894 c003 	ldrb.w	ip, [r4, #3]
    d2e8:	6923      	ldr	r3, [r4, #16]
					   ticks_expired -
    d2ea:	ebaa 0000 	sub.w	r0, sl, r0
    d2ee:	4410      	add	r0, r2
			ticks_at_expire = (instance->ticks_current +
    d2f0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
    d2f4:	e740      	b.n	d178 <ticker_worker+0x164>
    d2f6:	bf00      	nop

0000d2f8 <ticker_job>:
	if (instance->worker_trigger) {
    d2f8:	7fc3      	ldrb	r3, [r0, #31]
    d2fa:	2b00      	cmp	r3, #0
    d2fc:	f040 86c9 	bne.w	e092 <ticker_job+0xd9a>
{
    d300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
    d304:	7f82      	ldrb	r2, [r0, #30]
{
    d306:	b08f      	sub	sp, #60	; 0x3c
    d308:	4683      	mov	fp, r0
	if (instance->job_guard) {
    d30a:	2a00      	cmp	r2, #0
    d30c:	f040 80a5 	bne.w	d45a <ticker_job+0x162>
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    d310:	7a82      	ldrb	r2, [r0, #10]
    d312:	7ac1      	ldrb	r1, [r0, #11]
	ticks_previous = instance->ticks_current;
    d314:	6940      	ldr	r0, [r0, #20]
    d316:	9007      	str	r0, [sp, #28]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    d318:	4291      	cmp	r1, r2
	instance->job_guard = 1U;
    d31a:	f04f 0001 	mov.w	r0, #1
    d31e:	f88b 001e 	strb.w	r0, [fp, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    d322:	f000 86e0 	beq.w	e0e6 <ticker_job+0xdee>
	uint8_t idx = *ticks_elapsed_index + 1;
    d326:	4402      	add	r2, r0
    d328:	b2d2      	uxtb	r2, r2
	if (idx == DOUBLE_BUFFER_SIZE) {
    d32a:	2a02      	cmp	r2, #2
    d32c:	bf12      	itee	ne
    d32e:	4611      	movne	r1, r2
    d330:	4619      	moveq	r1, r3
		idx = 0U;
    d332:	461a      	moveq	r2, r3
		ticks_elapsed =
    d334:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
	*ticks_elapsed_index = idx;
    d338:	f88b 200a 	strb.w	r2, [fp, #10]
		ticks_elapsed =
    d33c:	68ca      	ldr	r2, [r1, #12]
		instance->ticks_current += ticks_elapsed;
    d33e:	9907      	ldr	r1, [sp, #28]
		ticks_elapsed =
    d340:	9202      	str	r2, [sp, #8]
		instance->ticks_current += ticks_elapsed;
    d342:	188a      	adds	r2, r1, r2
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
    d344:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    d348:	f8cb 2014 	str.w	r2, [fp, #20]
		flag_elapsed = 1U;
    d34c:	2201      	movs	r2, #1
    d34e:	920d      	str	r2, [sp, #52]	; 0x34
	count_user = instance->count_user;
    d350:	f89b 2009 	ldrb.w	r2, [fp, #9]
	ticker_id_old_head = instance->ticker_id_head;
    d354:	f89b 101d 	ldrb.w	r1, [fp, #29]
    d358:	910a      	str	r1, [sp, #40]	; 0x28
	node = &instance->nodes[0];
    d35a:	f8db 1000 	ldr.w	r1, [fp]
	users = &instance->users[0];
    d35e:	f8db 0004 	ldr.w	r0, [fp, #4]
	count_user = instance->count_user;
    d362:	9206      	str	r2, [sp, #24]
	node = &instance->nodes[0];
    d364:	9104      	str	r1, [sp, #16]
	while (count_user--) {
    d366:	4611      	mov	r1, r2
    d368:	3a01      	subs	r2, #1
	users = &instance->users[0];
    d36a:	900b      	str	r0, [sp, #44]	; 0x2c
	while (count_user--) {
    d36c:	b2d2      	uxtb	r2, r2
    d36e:	2900      	cmp	r1, #0
    d370:	f000 8292 	beq.w	d898 <ticker_job+0x5a0>
	pending = 0U;
    d374:	2300      	movs	r3, #0
    d376:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
    d37a:	9309      	str	r3, [sp, #36]	; 0x24
	insert_head = TICKER_NULL;
    d37c:	23ff      	movs	r3, #255	; 0xff
    d37e:	9301      	str	r3, [sp, #4]
    d380:	4637      	mov	r7, r6
    d382:	46d9      	mov	r9, fp
		user_ops = &user->user_op[0];
    d384:	687b      	ldr	r3, [r7, #4]
    d386:	9305      	str	r3, [sp, #20]
		while (user->middle != user->last) {
    d388:	f897 c003 	ldrb.w	ip, [r7, #3]
    d38c:	78bb      	ldrb	r3, [r7, #2]
    d38e:	46ba      	mov	sl, r7
    d390:	9905      	ldr	r1, [sp, #20]
					ticks_used = 0;
    d392:	4698      	mov	r8, r3
			user_op = &user_ops[user->middle];
    d394:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    d398:	eb03 0282 	add.w	r2, r3, r2, lsl #2
			middle = user->middle + 1;
    d39c:	1c58      	adds	r0, r3, #1
		while (user->middle != user->last) {
    d39e:	4563      	cmp	r3, ip
			user_op = &user_ops[user->middle];
    d3a0:	eb01 0582 	add.w	r5, r1, r2, lsl #2
			middle = user->middle + 1;
    d3a4:	b2c3      	uxtb	r3, r0
		while (user->middle != user->last) {
    d3a6:	f000 815f 	beq.w	d668 <ticker_job+0x370>
			if (middle == user->count_user_op) {
    d3aa:	f89a 0000 	ldrb.w	r0, [sl]
				middle = 0U;
    d3ae:	4298      	cmp	r0, r3
    d3b0:	bf08      	it	eq
    d3b2:	2300      	moveq	r3, #0
			user->middle = middle;
    d3b4:	f88a 3002 	strb.w	r3, [sl, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    d3b8:	f811 2022 	ldrb.w	r2, [r1, r2, lsl #2]
    d3bc:	2a04      	cmp	r2, #4
    d3be:	f240 8151 	bls.w	d664 <ticker_job+0x36c>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
    d3c2:	2a07      	cmp	r2, #7
    d3c4:	f200 813f 	bhi.w	d646 <ticker_job+0x34e>
			ticker = &node[user_op->id];
    d3c8:	7869      	ldrb	r1, [r5, #1]
    d3ca:	9c04      	ldr	r4, [sp, #16]
    d3cc:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    d3d0:	eb04 1400 	add.w	r4, r4, r0, lsl #4
    d3d4:	0100      	lsls	r0, r0, #4
			state = (ticker->req - ticker->ack) & 0xff;
    d3d6:	78a7      	ldrb	r7, [r4, #2]
			ticker = &node[user_op->id];
    d3d8:	9006      	str	r0, [sp, #24]
			state = (ticker->req - ticker->ack) & 0xff;
    d3da:	7860      	ldrb	r0, [r4, #1]
    d3dc:	1bc0      	subs	r0, r0, r7
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
    d3de:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    d3e2:	f000 8130 	beq.w	d646 <ticker_job+0x34e>
			    (state == 0U) ||
    d3e6:	2a05      	cmp	r2, #5
    d3e8:	f000 8118 	beq.w	d61c <ticker_job+0x324>
			if (state == 1U) {
    d3ec:	2801      	cmp	r0, #1
    d3ee:	f040 814f 	bne.w	d690 <ticker_job+0x398>
	previous = instance->ticker_id_head;
    d3f2:	f899 c01d 	ldrb.w	ip, [r9, #29]
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    d3f6:	f8d9 6000 	ldr.w	r6, [r9]
	while (current != TICKER_NULL) {
    d3fa:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    d3fe:	d016      	beq.n	d42e <ticker_job+0x136>
		ticker_current = &node[current];
    d400:	eb0c 004c 	add.w	r0, ip, ip, lsl #1
		if (current == id) {
    d404:	4561      	cmp	r1, ip
		ticker_current = &node[current];
    d406:	eb06 1000 	add.w	r0, r6, r0, lsl #4
		if (current == id) {
    d40a:	d064      	beq.n	d4d6 <ticker_job+0x1de>
	total = 0U;
    d40c:	2300      	movs	r3, #0
    d40e:	e001      	b.n	d414 <ticker_job+0x11c>
		if (current == id) {
    d410:	4561      	cmp	r1, ip
    d412:	d045      	beq.n	d4a0 <ticker_job+0x1a8>
		total += ticker_current->ticks_to_expire;
    d414:	46e6      	mov	lr, ip
		current = ticker_current->next;
    d416:	f890 c000 	ldrb.w	ip, [r0]
		total += ticker_current->ticks_to_expire;
    d41a:	f8d0 8008 	ldr.w	r8, [r0, #8]
	while (current != TICKER_NULL) {
    d41e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
		ticker_current = &node[current];
    d422:	eb0c 004c 	add.w	r0, ip, ip, lsl #1
		total += ticker_current->ticks_to_expire;
    d426:	4443      	add	r3, r8
		ticker_current = &node[current];
    d428:	eb06 1000 	add.w	r0, r6, r0, lsl #4
	while (current != TICKER_NULL) {
    d42c:	d1f0      	bne.n	d410 <ticker_job+0x118>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    d42e:	2600      	movs	r6, #0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    d430:	2a05      	cmp	r2, #5
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    d432:	60a6      	str	r6, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    d434:	f000 80e0 	beq.w	d5f8 <ticker_job+0x300>
		ticker->req = ticker->ack;
    d438:	7067      	strb	r7, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    d43a:	f899 301c 	ldrb.w	r3, [r9, #28]
    d43e:	428b      	cmp	r3, r1
    d440:	d016      	beq.n	d470 <ticker_job+0x178>
	if (user_op->fp_op_func) {
    d442:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    d444:	2000      	movs	r0, #0
    d446:	7028      	strb	r0, [r5, #0]
	user_op->status = status;
    d448:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
    d44a:	b10b      	cbz	r3, d450 <ticker_job+0x158>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    d44c:	6b29      	ldr	r1, [r5, #48]	; 0x30
    d44e:	4798      	blx	r3
    d450:	f89a c003 	ldrb.w	ip, [sl, #3]
    d454:	f89a 3002 	ldrb.w	r3, [sl, #2]
    d458:	e79a      	b.n	d390 <ticker_job+0x98>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_JOB, 1,
    d45a:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    d45e:	2104      	movs	r1, #4
    d460:	4608      	mov	r0, r1
    d462:	465b      	mov	r3, fp
    d464:	2201      	movs	r2, #1
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    d466:	46a4      	mov	ip, r4
}
    d468:	b00f      	add	sp, #60	; 0x3c
    d46a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    d46e:	4760      	bx	ip
			instance->ticker_id_slot_previous = TICKER_NULL;
    d470:	23ff      	movs	r3, #255	; 0xff
			if (user_op->op == TICKER_USER_OP_TYPE_STOP_ABS) {
    d472:	2a07      	cmp	r2, #7
			instance->ticker_id_slot_previous = TICKER_NULL;
    d474:	f889 301c 	strb.w	r3, [r9, #28]
			if (user_op->op == TICKER_USER_OP_TYPE_STOP_ABS) {
    d478:	f040 8107 	bne.w	d68a <ticker_job+0x392>
				ticks_at_stop =
    d47c:	6868      	ldr	r0, [r5, #4]
			ticks_current = instance->ticks_current;
    d47e:	f8d9 2014 	ldr.w	r2, [r9, #20]
			if (!((ticks_at_stop - ticks_current) &
    d482:	1a83      	subs	r3, r0, r2
    d484:	021c      	lsls	r4, r3, #8
    d486:	f100 80f7 	bmi.w	d678 <ticker_job+0x380>
				ticks_used = ticks_elapsed +
    d48a:	9a02      	ldr	r2, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    d48c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
    d490:	4413      	add	r3, r2
			if (instance->ticks_slot_previous > ticks_used) {
    d492:	f8d9 2018 	ldr.w	r2, [r9, #24]
    d496:	429a      	cmp	r2, r3
				instance->ticks_slot_previous = ticks_used;
    d498:	bf88      	it	hi
    d49a:	f8c9 3018 	strhi.w	r3, [r9, #24]
    d49e:	e7d0      	b.n	d442 <ticker_job+0x14a>
	if (previous == current) {
    d4a0:	eb0e 074e 	add.w	r7, lr, lr, lsl #1
    d4a4:	4571      	cmp	r1, lr
    d4a6:	eb06 1707 	add.w	r7, r6, r7, lsl #4
    d4aa:	d016      	beq.n	d4da <ticker_job+0x1e2>
	node[previous].next = ticker_current->next;
    d4ac:	7801      	ldrb	r1, [r0, #0]
	timeout = ticker_current->ticks_to_expire;
    d4ae:	f8d0 c008 	ldr.w	ip, [r0, #8]
	node[previous].next = ticker_current->next;
    d4b2:	7039      	strb	r1, [r7, #0]
	if (ticker_current->next != TICKER_NULL) {
    d4b4:	29ff      	cmp	r1, #255	; 0xff
    d4b6:	d006      	beq.n	d4c6 <ticker_job+0x1ce>
		node[ticker_current->next].ticks_to_expire += timeout;
    d4b8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    d4bc:	eb06 1101 	add.w	r1, r6, r1, lsl #4
    d4c0:	6888      	ldr	r0, [r1, #8]
    d4c2:	4460      	add	r0, ip
    d4c4:	6088      	str	r0, [r1, #8]
	return (total + timeout);
    d4c6:	eb0c 0603 	add.w	r6, ip, r3
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    d4ca:	2a05      	cmp	r2, #5
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    d4cc:	60a6      	str	r6, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    d4ce:	d009      	beq.n	d4e4 <ticker_job+0x1ec>
    d4d0:	78a7      	ldrb	r7, [r4, #2]
    d4d2:	7869      	ldrb	r1, [r5, #1]
    d4d4:	e7b0      	b.n	d438 <ticker_job+0x140>
		if (current == id) {
    d4d6:	4607      	mov	r7, r0
	total = 0U;
    d4d8:	2300      	movs	r3, #0
		instance->ticker_id_head = ticker_current->next;
    d4da:	7802      	ldrb	r2, [r0, #0]
    d4dc:	f889 201d 	strb.w	r2, [r9, #29]
    d4e0:	782a      	ldrb	r2, [r5, #0]
    d4e2:	e7e3      	b.n	d4ac <ticker_job+0x1b4>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    d4e4:	f8d9 7014 	ldr.w	r7, [r9, #20]
    d4e8:	9703      	str	r7, [sp, #12]
	ticks_now = cntr_cnt_get();
    d4ea:	f00b ff09 	bl	19300 <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    d4ee:	9b02      	ldr	r3, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    d4f0:	eba0 0c07 	sub.w	ip, r0, r7
    d4f4:	f02c 477f 	bic.w	r7, ip, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    d4f8:	443b      	add	r3, r7
	if (ticks_to_expire > ticks_elapsed) {
    d4fa:	429e      	cmp	r6, r3
	ticks_now = cntr_cnt_get();
    d4fc:	4680      	mov	r8, r0
	if (ticks_to_expire > ticks_elapsed) {
    d4fe:	f240 8087 	bls.w	d610 <ticker_job+0x318>
		ticks_to_expire -= ticks_elapsed;
    d502:	6962      	ldr	r2, [r4, #20]
    d504:	1af3      	subs	r3, r6, r3
	if ((ticker->ticks_periodic != 0U) &&
    d506:	6866      	ldr	r6, [r4, #4]
    d508:	2e00      	cmp	r6, #0
    d50a:	d032      	beq.n	d572 <ticker_job+0x27a>
	    (user_op->params.update.lazy != 0U)) {
    d50c:	8aa8      	ldrh	r0, [r5, #20]
	if ((ticker->ticks_periodic != 0U) &&
    d50e:	b380      	cbz	r0, d572 <ticker_job+0x27a>
		user_op->params.update.lazy--;
    d510:	3801      	subs	r0, #1
    d512:	b280      	uxth	r0, r0
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    d514:	429e      	cmp	r6, r3
    d516:	f8b4 b01e 	ldrh.w	fp, [r4, #30]
		user_op->params.update.lazy--;
    d51a:	82a8      	strh	r0, [r5, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    d51c:	f080 8197 	bcs.w	d84e <ticker_job+0x556>
    d520:	1c71      	adds	r1, r6, #1
    d522:	9108      	str	r1, [sp, #32]
    d524:	920c      	str	r2, [sp, #48]	; 0x30
    d526:	4659      	mov	r1, fp
    d528:	e013      	b.n	d552 <ticker_job+0x25a>
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
    d52a:	f100 70e8 	add.w	r0, r0, #30408704	; 0x1d00000
    d52e:	f500 30d4 	add.w	r0, r0, #108544	; 0x1a800
    d532:	f8dd e020 	ldr.w	lr, [sp, #32]
    d536:	f500 70a5 	add.w	r0, r0, #330	; 0x14a
			ticker->lazy_current--;
    d53a:	3901      	subs	r1, #1
			ticks_to_expire -= ticker->ticks_periodic +
    d53c:	eba3 030e 	sub.w	r3, r3, lr
			ticker->lazy_current--;
    d540:	b289      	uxth	r1, r1
	ticker->remainder_current -= ticker->remainder_periodic;
    d542:	eba0 000b 	sub.w	r0, r0, fp
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    d546:	429e      	cmp	r6, r3
			ticker->lazy_current--;
    d548:	83e1      	strh	r1, [r4, #30]
	ticker->remainder_current -= ticker->remainder_periodic;
    d54a:	6260      	str	r0, [r4, #36]	; 0x24
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    d54c:	f080 817c 	bcs.w	d848 <ticker_job+0x550>
    d550:	8aa8      	ldrh	r0, [r5, #20]
    d552:	4288      	cmp	r0, r1
    d554:	f080 8329 	bcs.w	dbaa <ticker_job+0x8b2>
					   ticker_remainder_dec(ticker);
    d558:	e9d4 b008 	ldrd	fp, r0, [r4, #32]
	if ((ticker->remainder_current >= BIT(31)) ||
    d55c:	f8df e1dc 	ldr.w	lr, [pc, #476]	; d73c <ticker_job+0x444>
    d560:	4a75      	ldr	r2, [pc, #468]	; (d738 <ticker_job+0x440>)
    d562:	4486      	add	lr, r0
    d564:	4596      	cmp	lr, r2
    d566:	d8e0      	bhi.n	d52a <ticker_job+0x232>
    d568:	46b6      	mov	lr, r6
    d56a:	e7e6      	b.n	d53a <ticker_job+0x242>
    d56c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d56e:	83e1      	strh	r1, [r4, #30]
		ticker->lazy_periodic = user_op->params.update.lazy;
    d570:	83a0      	strh	r0, [r4, #28]
				user_op->params.update.ticks_drift_minus;
    d572:	e9d5 0e01 	ldrd	r0, lr, [r5, #4]
	struct ticker_ext *ext_data = ticker->ext_data;
    d576:	6aa6      	ldr	r6, [r4, #40]	; 0x28
	ticker->ticks_to_expire = ticks_to_expire +
    d578:	4403      	add	r3, r0
	ticker->ticks_to_expire_minus +=
    d57a:	4472      	add	r2, lr
	ticker->ticks_to_expire = ticks_to_expire +
    d57c:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus +=
    d57e:	6162      	str	r2, [r4, #20]
	if (ext_data && ext_data->ticks_slot_window != 0U) {
    d580:	b136      	cbz	r6, d590 <ticker_job+0x298>
    d582:	6831      	ldr	r1, [r6, #0]
    d584:	b121      	cbz	r1, d590 <ticker_job+0x298>
			user_op->params.update.ticks_drift_plus -
    d586:	eba0 000e 	sub.w	r0, r0, lr
		ext_data->ticks_drift =
    d58a:	6070      	str	r0, [r6, #4]
    d58c:	68a3      	ldr	r3, [r4, #8]
    d58e:	6962      	ldr	r2, [r4, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    d590:	f41c 0f00 	tst.w	ip, #8388608	; 0x800000
    d594:	d123      	bne.n	d5de <ticker_job+0x2e6>
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    d596:	443b      	add	r3, r7
	if (ticks_to_expire > ticks_to_expire_minus) {
    d598:	4293      	cmp	r3, r2
    d59a:	d92b      	bls.n	d5f4 <ticker_job+0x2fc>
		ticks_to_expire -= ticks_to_expire_minus;
    d59c:	1a9b      	subs	r3, r3, r2
		ticks_to_expire_minus = 0U;
    d59e:	2200      	movs	r2, #0
	ticker->ticks_to_expire = ticks_to_expire;
    d5a0:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    d5a2:	6162      	str	r2, [r4, #20]
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    d5a4:	68e9      	ldr	r1, [r5, #12]
    d5a6:	69a3      	ldr	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    d5a8:	692a      	ldr	r2, [r5, #16]
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    d5aa:	440b      	add	r3, r1
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    d5ac:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    d5ae:	bf88      	it	hi
    d5b0:	1a9b      	subhi	r3, r3, r2
	if (user_op->params.update.force != 0U) {
    d5b2:	7daa      	ldrb	r2, [r5, #22]
		ticker->ticks_slot = 0U;
    d5b4:	bf98      	it	ls
    d5b6:	2300      	movls	r3, #0
    d5b8:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0U) {
    d5ba:	b102      	cbz	r2, d5be <ticker_job+0x2c6>
		ticker->force = user_op->params.update.force;
    d5bc:	70e2      	strb	r2, [r4, #3]
	if (user_op->params.update.must_expire) {
    d5be:	7deb      	ldrb	r3, [r5, #23]
    d5c0:	b113      	cbz	r3, d5c8 <ticker_job+0x2d0>
		ticker->must_expire = (user_op->params.update.must_expire - 1);
    d5c2:	3b01      	subs	r3, #1
    d5c4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	ticker->next = *insert_head;
    d5c8:	9b04      	ldr	r3, [sp, #16]
    d5ca:	9a06      	ldr	r2, [sp, #24]
    d5cc:	4619      	mov	r1, r3
    d5ce:	9b01      	ldr	r3, [sp, #4]
    d5d0:	548b      	strb	r3, [r1, r2]
		ticker->req++;
    d5d2:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
    d5d4:	786a      	ldrb	r2, [r5, #1]
    d5d6:	9201      	str	r2, [sp, #4]
		ticker->req++;
    d5d8:	3301      	adds	r3, #1
    d5da:	7063      	strb	r3, [r4, #1]
    d5dc:	e731      	b.n	d442 <ticker_job+0x14a>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    d5de:	9903      	ldr	r1, [sp, #12]
    d5e0:	eba1 0708 	sub.w	r7, r1, r8
    d5e4:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    d5e8:	429f      	cmp	r7, r3
    d5ea:	f080 8129 	bcs.w	d840 <ticker_job+0x548>
			ticks_to_expire -= delta_current_start;
    d5ee:	1bdb      	subs	r3, r3, r7
	if (ticks_to_expire > ticks_to_expire_minus) {
    d5f0:	4293      	cmp	r3, r2
    d5f2:	d8d3      	bhi.n	d59c <ticker_job+0x2a4>
    d5f4:	1ad2      	subs	r2, r2, r3
    d5f6:	e125      	b.n	d844 <ticker_job+0x54c>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    d5f8:	f8d9 7014 	ldr.w	r7, [r9, #20]
    d5fc:	9703      	str	r7, [sp, #12]
	ticks_now = cntr_cnt_get();
    d5fe:	f00b fe7f 	bl	19300 <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    d602:	9b02      	ldr	r3, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    d604:	eba0 0c07 	sub.w	ip, r0, r7
    d608:	f02c 477f 	bic.w	r7, ip, #4278190080	; 0xff000000
	ticks_now = cntr_cnt_get();
    d60c:	4680      	mov	r8, r0
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    d60e:	443b      	add	r3, r7
		ticker->ticks_to_expire_minus += ticks_elapsed -
    d610:	6961      	ldr	r1, [r4, #20]
    d612:	440b      	add	r3, r1
    d614:	1b9a      	subs	r2, r3, r6
    d616:	6162      	str	r2, [r4, #20]
		ticks_to_expire = 0U;
    d618:	2300      	movs	r3, #0
    d61a:	e774      	b.n	d506 <ticker_job+0x20e>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
    d61c:	686e      	ldr	r6, [r5, #4]
    d61e:	2e00      	cmp	r6, #0
    d620:	f47f aee4 	bne.w	d3ec <ticker_job+0xf4>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
    d624:	68ae      	ldr	r6, [r5, #8]
    d626:	2e00      	cmp	r6, #0
    d628:	f47f aee0 	bne.w	d3ec <ticker_job+0xf4>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
    d62c:	68ee      	ldr	r6, [r5, #12]
    d62e:	2e00      	cmp	r6, #0
    d630:	f47f aedc 	bne.w	d3ec <ticker_job+0xf4>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
    d634:	692e      	ldr	r6, [r5, #16]
    d636:	2e00      	cmp	r6, #0
    d638:	f47f aed8 	bne.w	d3ec <ticker_job+0xf4>
			     (user_op->params.update.lazy == 0U) &&
    d63c:	696e      	ldr	r6, [r5, #20]
    d63e:	f036 467f 	bics.w	r6, r6, #4278190080	; 0xff000000
    d642:	f47f aed3 	bne.w	d3ec <ticker_job+0xf4>
	if (user_op->fp_op_func) {
    d646:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    d648:	2100      	movs	r1, #0
	user_op->status = status;
    d64a:	2001      	movs	r0, #1
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    d64c:	7029      	strb	r1, [r5, #0]
	user_op->status = status;
    d64e:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
    d650:	2a00      	cmp	r2, #0
    d652:	f43f ae9d 	beq.w	d390 <ticker_job+0x98>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    d656:	6b29      	ldr	r1, [r5, #48]	; 0x30
    d658:	4790      	blx	r2
    d65a:	f89a c003 	ldrb.w	ip, [sl, #3]
    d65e:	f89a 3002 	ldrb.w	r3, [sl, #2]
    d662:	e695      	b.n	d390 <ticker_job+0x98>
    d664:	4698      	mov	r8, r3
    d666:	e695      	b.n	d394 <ticker_job+0x9c>
	while (count_user--) {
    d668:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d66a:	4657      	mov	r7, sl
    d66c:	42ba      	cmp	r2, r7
    d66e:	f1a7 0308 	sub.w	r3, r7, #8
    d672:	d01e      	beq.n	d6b2 <ticker_job+0x3ba>
    d674:	461f      	mov	r7, r3
    d676:	e685      	b.n	d384 <ticker_job+0x8c>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    d678:	1a13      	subs	r3, r2, r0
				if (ticks_elapsed > ticks_used) {
    d67a:	9a02      	ldr	r2, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    d67c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
    d680:	429a      	cmp	r2, r3
					ticks_used = ticks_elapsed -
    d682:	bf8c      	ite	hi
    d684:	1ad3      	subhi	r3, r2, r3
					ticks_used = 0;
    d686:	2300      	movls	r3, #0
    d688:	e703      	b.n	d492 <ticker_job+0x19a>
				ticks_at_stop = cntr_cnt_get();
    d68a:	f00b fe39 	bl	19300 <cntr_cnt_get>
    d68e:	e6f6      	b.n	d47e <ticker_job+0x186>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    d690:	2104      	movs	r1, #4
    d692:	464b      	mov	r3, r9
    d694:	2201      	movs	r2, #1
    d696:	f8d9 4024 	ldr.w	r4, [r9, #36]	; 0x24
    d69a:	4608      	mov	r0, r1
    d69c:	47a0      	blx	r4
	while (count_user--) {
    d69e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
				user->middle = prev;
    d6a0:	f88a 8002 	strb.w	r8, [sl, #2]
    d6a4:	4657      	mov	r7, sl
				pending = 1U;
    d6a6:	2301      	movs	r3, #1
	while (count_user--) {
    d6a8:	42ba      	cmp	r2, r7
				pending = 1U;
    d6aa:	9309      	str	r3, [sp, #36]	; 0x24
    d6ac:	f1a7 0308 	sub.w	r3, r7, #8
	while (count_user--) {
    d6b0:	d1e0      	bne.n	d674 <ticker_job+0x37c>
    d6b2:	f899 c01d 	ldrb.w	ip, [r9, #29]
    d6b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d6b8:	ebb3 030c 	subs.w	r3, r3, ip
    d6bc:	bf18      	it	ne
    d6be:	2301      	movne	r3, #1
    d6c0:	9306      	str	r3, [sp, #24]
	if (flag_elapsed) {
    d6c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d6c4:	46cb      	mov	fp, r9
    d6c6:	2b00      	cmp	r3, #0
    d6c8:	f040 80ee 	bne.w	d8a8 <ticker_job+0x5b0>
	count_user = instance->count_user;
    d6cc:	f899 2009 	ldrb.w	r2, [r9, #9]
	node = &instance->nodes[0];
    d6d0:	f8d9 3000 	ldr.w	r3, [r9]
	users = &instance->users[0];
    d6d4:	f8d9 1004 	ldr.w	r1, [r9, #4]
	node = &instance->nodes[0];
    d6d8:	9304      	str	r3, [sp, #16]
	while (count_user--) {
    d6da:	1e53      	subs	r3, r2, #1
	users = &instance->users[0];
    d6dc:	9107      	str	r1, [sp, #28]
	while (count_user--) {
    d6de:	b2db      	uxtb	r3, r3
    d6e0:	2a00      	cmp	r2, #0
    d6e2:	f000 82e9 	beq.w	dcb8 <ticker_job+0x9c0>
    d6e6:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    d6ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d6ec:	9303      	str	r3, [sp, #12]
		user_ops = (void *)&user->user_op[0];
    d6ee:	f8d8 3004 	ldr.w	r3, [r8, #4]
		user_ops_first = user->first;
    d6f2:	f898 6001 	ldrb.w	r6, [r8, #1]
		user_ops = (void *)&user->user_op[0];
    d6f6:	9305      	str	r3, [sp, #20]
		while ((insert_head != TICKER_NULL) ||
    d6f8:	9b01      	ldr	r3, [sp, #4]
    d6fa:	2bff      	cmp	r3, #255	; 0xff
    d6fc:	d064      	beq.n	d7c8 <ticker_job+0x4d0>
				ticker = &node[id_insert];
    d6fe:	f8dd a004 	ldr.w	sl, [sp, #4]
    d702:	9b04      	ldr	r3, [sp, #16]
    d704:	fa0f f48a 	sxth.w	r4, sl
    d708:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    d70c:	ea4f 1c04 	mov.w	ip, r4, lsl #4
    d710:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				insert_head = ticker->next;
    d714:	f813 300c 	ldrb.w	r3, [r3, ip]
    d718:	9301      	str	r3, [sp, #4]
				user_op = NULL;
    d71a:	2500      	movs	r5, #0
	ticker->next = TICKER_NULL;
    d71c:	22ff      	movs	r2, #255	; 0xff
    d71e:	7022      	strb	r2, [r4, #0]
	(void)ticker_enqueue(instance, id_insert);
    d720:	f8db 7000 	ldr.w	r7, [fp]
	current = instance->ticker_id_head;
    d724:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticker_new = &node[id];
    d728:	eb07 000c 	add.w	r0, r7, ip
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    d72c:	4293      	cmp	r3, r2
	ticks_to_expire = ticker_new->ticks_to_expire;
    d72e:	6881      	ldr	r1, [r0, #8]
	previous = TICKER_NULL;
    d730:	bf18      	it	ne
    d732:	9202      	strne	r2, [sp, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    d734:	d116      	bne.n	d764 <ticker_job+0x46c>
    d736:	e3ec      	b.n	df12 <ticker_job+0xc1a>
    d738:	7f172b59 	.word	0x7f172b59
    d73c:	ff172b5a 	.word	0xff172b5a
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
    d740:	ebb1 010c 	subs.w	r1, r1, ip
    d744:	d106      	bne.n	d754 <ticker_job+0x45c>
    d746:	f8be e01e 	ldrh.w	lr, [lr, #30]
    d74a:	f8b0 901e 	ldrh.w	r9, [r0, #30]
    d74e:	45f1      	cmp	r9, lr
    d750:	f200 842d 	bhi.w	dfae <ticker_job+0xcb6>
		current = ticker_current->next;
    d754:	f817 c002 	ldrb.w	ip, [r7, r2]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    d758:	9302      	str	r3, [sp, #8]
    d75a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    d75e:	f000 83cc 	beq.w	defa <ticker_job+0xc02>
    d762:	4663      	mov	r3, ip
		(ticker_current = &node[current])->ticks_to_expire))) {
    d764:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
    d768:	eb07 1e0c 	add.w	lr, r7, ip, lsl #4
    d76c:	ea4f 120c 	mov.w	r2, ip, lsl #4
		(ticks_to_expire_current =
    d770:	f8de c008 	ldr.w	ip, [lr, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    d774:	4561      	cmp	r1, ip
    d776:	d2e3      	bcs.n	d740 <ticker_job+0x448>
    d778:	9a02      	ldr	r2, [sp, #8]
	ticker_new->ticks_to_expire = ticks_to_expire;
    d77a:	6081      	str	r1, [r0, #8]
	if (previous == TICKER_NULL) {
    d77c:	2aff      	cmp	r2, #255	; 0xff
	ticker_new->next = current;
    d77e:	7003      	strb	r3, [r0, #0]
	if (previous == TICKER_NULL) {
    d780:	f040 83c0 	bne.w	df04 <ticker_job+0xc0c>
		instance->ticker_id_head = id;
    d784:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
    d788:	2bff      	cmp	r3, #255	; 0xff
    d78a:	d006      	beq.n	d79a <ticker_job+0x4a2>
		node[current].ticks_to_expire -= ticks_to_expire;
    d78c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    d790:	eb07 1703 	add.w	r7, r7, r3, lsl #4
    d794:	68bb      	ldr	r3, [r7, #8]
    d796:	1a59      	subs	r1, r3, r1
    d798:	60b9      	str	r1, [r7, #8]
	ticker->req = ticker->ack + 1;
    d79a:	78a3      	ldrb	r3, [r4, #2]
    d79c:	3301      	adds	r3, #1
    d79e:	7063      	strb	r3, [r4, #1]
			if (user_op) {
    d7a0:	2d00      	cmp	r5, #0
    d7a2:	d0a9      	beq.n	d6f8 <ticker_job+0x400>
	if (user_op->fp_op_func) {
    d7a4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    d7a6:	9a03      	ldr	r2, [sp, #12]
    d7a8:	702a      	strb	r2, [r5, #0]
	user_op->status = status;
    d7aa:	62aa      	str	r2, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
    d7ac:	b113      	cbz	r3, d7b4 <ticker_job+0x4bc>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    d7ae:	6b29      	ldr	r1, [r5, #48]	; 0x30
    d7b0:	2000      	movs	r0, #0
    d7b2:	4798      	blx	r3
				if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    d7b4:	6863      	ldr	r3, [r4, #4]
    d7b6:	2b00      	cmp	r3, #0
    d7b8:	d19e      	bne.n	d6f8 <ticker_job+0x400>
					ticker->op_context =
    d7ba:	e9d5 230b 	ldrd	r2, r3, [r5, #44]	; 0x2c
    d7be:	e9c4 2308 	strd	r2, r3, [r4, #32]
		while ((insert_head != TICKER_NULL) ||
    d7c2:	9b01      	ldr	r3, [sp, #4]
    d7c4:	2bff      	cmp	r3, #255	; 0xff
    d7c6:	d19a      	bne.n	d6fe <ticker_job+0x406>
    d7c8:	f898 3002 	ldrb.w	r3, [r8, #2]
    d7cc:	42b3      	cmp	r3, r6
    d7ce:	d02f      	beq.n	d830 <ticker_job+0x538>
    d7d0:	9f05      	ldr	r7, [sp, #20]
				if (first == user->count_user_op) {
    d7d2:	f898 0000 	ldrb.w	r0, [r8]
				user_op = &user_ops[user_ops_first];
    d7d6:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    d7da:	eb06 0282 	add.w	r2, r6, r2, lsl #2
				first = user_ops_first + 1;
    d7de:	3601      	adds	r6, #1
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    d7e0:	f817 1022 	ldrb.w	r1, [r7, r2, lsl #2]
				first = user_ops_first + 1;
    d7e4:	b2f6      	uxtb	r6, r6
					first = 0U;
    d7e6:	42b0      	cmp	r0, r6
    d7e8:	bf08      	it	eq
    d7ea:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    d7ec:	2904      	cmp	r1, #4
				user_op = &user_ops[user_ops_first];
    d7ee:	eb07 0582 	add.w	r5, r7, r2, lsl #2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    d7f2:	d11b      	bne.n	d82c <ticker_job+0x534>
				id_insert = user_op->id;
    d7f4:	f895 a001 	ldrb.w	sl, [r5, #1]
				ticker = &node[id_insert];
    d7f8:	9b04      	ldr	r3, [sp, #16]
    d7fa:	eb0a 0c4a 	add.w	ip, sl, sl, lsl #1
    d7fe:	eb03 140c 	add.w	r4, r3, ip, lsl #4
    d802:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
				if (((ticker->req -
    d806:	7861      	ldrb	r1, [r4, #1]
				      ticker->ack) & 0xff) != 0U) {
    d808:	78a3      	ldrb	r3, [r4, #2]
				if (((ticker->req -
    d80a:	1ac9      	subs	r1, r1, r3
    d80c:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    d810:	f000 8384 	beq.w	df1c <ticker_job+0xc24>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    d814:	9b03      	ldr	r3, [sp, #12]
    d816:	f807 3022 	strb.w	r3, [r7, r2, lsl #2]
	if (user_op->fp_op_func) {
    d81a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->status = status;
    d81c:	2201      	movs	r2, #1
    d81e:	62aa      	str	r2, [r5, #40]	; 0x28
		user_op->fp_op_func(user_op->status, user_op->op_context);
    d820:	4610      	mov	r0, r2
	if (user_op->fp_op_func) {
    d822:	b10b      	cbz	r3, d828 <ticker_job+0x530>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    d824:	6b29      	ldr	r1, [r5, #48]	; 0x30
    d826:	4798      	blx	r3
		while ((insert_head != TICKER_NULL) ||
    d828:	f898 3002 	ldrb.w	r3, [r8, #2]
    d82c:	42b3      	cmp	r3, r6
    d82e:	d1d0      	bne.n	d7d2 <ticker_job+0x4da>
	while (count_user--) {
    d830:	9a07      	ldr	r2, [sp, #28]
    d832:	4542      	cmp	r2, r8
    d834:	f1a8 0308 	sub.w	r3, r8, #8
    d838:	f000 823c 	beq.w	dcb4 <ticker_job+0x9bc>
    d83c:	4698      	mov	r8, r3
    d83e:	e756      	b.n	d6ee <ticker_job+0x3f6>
			ticks_to_expire_minus +=
    d840:	443a      	add	r2, r7
    d842:	1ad2      	subs	r2, r2, r3
		ticks_to_expire = 0U;
    d844:	2300      	movs	r3, #0
    d846:	e6ab      	b.n	d5a0 <ticker_job+0x2a8>
    d848:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d84a:	8aa8      	ldrh	r0, [r5, #20]
    d84c:	468b      	mov	fp, r1
		while (ticker->lazy_current < user_op->params.update.lazy) {
    d84e:	4558      	cmp	r0, fp
    d850:	f67f ae8e 	bls.w	d570 <ticker_job+0x278>
					   ticker_remainder_inc(ticker);
    d854:	6a21      	ldr	r1, [r4, #32]
    d856:	9108      	str	r1, [sp, #32]
    d858:	f106 0e01 	add.w	lr, r6, #1
    d85c:	4659      	mov	r1, fp
    d85e:	920c      	str	r2, [sp, #48]	; 0x30
    d860:	e008      	b.n	d874 <ticker_job+0x57c>
	ticker->remainder_current += ticker->remainder_periodic;
    d862:	6260      	str	r0, [r4, #36]	; 0x24
    d864:	46b3      	mov	fp, r6
		while (ticker->lazy_current < user_op->params.update.lazy) {
    d866:	8aa8      	ldrh	r0, [r5, #20]
			ticker->lazy_current++;
    d868:	3101      	adds	r1, #1
    d86a:	b289      	uxth	r1, r1
		while (ticker->lazy_current < user_op->params.update.lazy) {
    d86c:	4281      	cmp	r1, r0
			ticks_to_expire += ticker->ticks_periodic +
    d86e:	445b      	add	r3, fp
		while (ticker->lazy_current < user_op->params.update.lazy) {
    d870:	f4bf ae7c 	bcs.w	d56c <ticker_job+0x274>
	ticker->remainder_current += ticker->remainder_periodic;
    d874:	9a08      	ldr	r2, [sp, #32]
    d876:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if ((ticker->remainder_current < BIT(31)) &&
    d878:	f8df b2cc 	ldr.w	fp, [pc, #716]	; db48 <ticker_job+0x850>
	ticker->remainder_current += ticker->remainder_periodic;
    d87c:	4410      	add	r0, r2
	if ((ticker->remainder_current < BIT(31)) &&
    d87e:	4ab1      	ldr	r2, [pc, #708]	; (db44 <ticker_job+0x84c>)
    d880:	4483      	add	fp, r0
    d882:	4593      	cmp	fp, r2
    d884:	d8ed      	bhi.n	d862 <ticker_job+0x56a>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    d886:	f1a0 70e8 	sub.w	r0, r0, #30408704	; 0x1d00000
    d88a:	f5a0 30d4 	sub.w	r0, r0, #108544	; 0x1a800
    d88e:	f5a0 70a5 	sub.w	r0, r0, #330	; 0x14a
    d892:	6260      	str	r0, [r4, #36]	; 0x24
		return 1;
    d894:	46f3      	mov	fp, lr
    d896:	e7e6      	b.n	d866 <ticker_job+0x56e>
	if (flag_elapsed) {
    d898:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    d89a:	2a00      	cmp	r2, #0
    d89c:	f000 8218 	beq.w	dcd0 <ticker_job+0x9d8>
	pending = 0U;
    d8a0:	9b06      	ldr	r3, [sp, #24]
    d8a2:	9309      	str	r3, [sp, #36]	; 0x24
	insert_head = TICKER_NULL;
    d8a4:	23ff      	movs	r3, #255	; 0xff
    d8a6:	9301      	str	r3, [sp, #4]
	ticks_now = cntr_cnt_get();
    d8a8:	f00b fd2a 	bl	19300 <cntr_cnt_get>
	node = &instance->nodes[0];
    d8ac:	f8db 3000 	ldr.w	r3, [fp]
	while (instance->ticker_id_head != TICKER_NULL) {
    d8b0:	f89b 501d 	ldrb.w	r5, [fp, #29]
	node = &instance->nodes[0];
    d8b4:	9304      	str	r3, [sp, #16]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    d8b6:	9b07      	ldr	r3, [sp, #28]
	while (instance->ticker_id_head != TICKER_NULL) {
    d8b8:	2dff      	cmp	r5, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    d8ba:	eba0 0003 	sub.w	r0, r0, r3
    d8be:	f020 487f 	bic.w	r8, r0, #4278190080	; 0xff000000
	while (instance->ticker_id_head != TICKER_NULL) {
    d8c2:	d04d      	beq.n	d960 <ticker_job+0x668>
    d8c4:	f8dd a008 	ldr.w	sl, [sp, #8]
	ticks_expired = 0U;
    d8c8:	f04f 0900 	mov.w	r9, #0
		ticker = &node[id_expired];
    d8cc:	9b04      	ldr	r3, [sp, #16]
    d8ce:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    d8d2:	eb03 1404 	add.w	r4, r3, r4, lsl #4
		ticks_to_expire = ticker->ticks_to_expire;
    d8d6:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    d8d8:	4553      	cmp	r3, sl
    d8da:	f200 8412 	bhi.w	e102 <ticker_job+0xe0a>
		if (instance->ticks_slot_previous > ticks_to_expire) {
    d8de:	f8db 2018 	ldr.w	r2, [fp, #24]
		skip_collision = (ticker->lazy_current != 0U);
    d8e2:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
		if (instance->ticks_slot_previous > ticks_to_expire) {
    d8e6:	4293      	cmp	r3, r2
		ticks_elapsed -= ticks_to_expire;
    d8e8:	ebaa 0a03 	sub.w	sl, sl, r3
		ticks_expired += ticks_to_expire;
    d8ec:	4499      	add	r9, r3
		ticks_latency -= ticks_to_expire;
    d8ee:	eba8 0803 	sub.w	r8, r8, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    d8f2:	bf25      	ittet	cs
    d8f4:	f04f 33ff 	movcs.w	r3, #4294967295	; 0xffffffff
    d8f8:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous -= ticks_to_expire;
    d8fc:	1ad3      	subcc	r3, r2, r3
			instance->ticks_slot_previous = 0U;
    d8fe:	2300      	movcs	r3, #0
    d900:	f8cb 3018 	str.w	r3, [fp, #24]
		state = (ticker->req - ticker->ack) & 0xff;
    d904:	7860      	ldrb	r0, [r4, #1]
    d906:	78a1      	ldrb	r1, [r4, #2]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    d908:	69a7      	ldr	r7, [r4, #24]
    d90a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    d90c:	f894 c000 	ldrb.w	ip, [r4]
    d910:	6866      	ldr	r6, [r4, #4]
    d912:	9703      	str	r7, [sp, #12]
		state = (ticker->req - ticker->ack) & 0xff;
    d914:	1a43      	subs	r3, r0, r1
    d916:	b2db      	uxtb	r3, r3
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    d918:	b117      	cbz	r7, d920 <ticker_job+0x628>
    d91a:	2b02      	cmp	r3, #2
    d91c:	f000 8148 	beq.w	dbb0 <ticker_job+0x8b8>
		ticker->ticks_to_expire = 0U;
    d920:	2700      	movs	r7, #0
    d922:	60a7      	str	r7, [r4, #8]
		instance->ticker_id_head = ticker->next;
    d924:	f88b c01d 	strb.w	ip, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
    d928:	2e00      	cmp	r6, #0
    d92a:	f040 80f9 	bne.w	db20 <ticker_job+0x828>
    d92e:	b11a      	cbz	r2, d938 <ticker_job+0x640>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
    d930:	7a12      	ldrb	r2, [r2, #8]
    d932:	2a01      	cmp	r2, #1
    d934:	f000 80d5 	beq.w	dae2 <ticker_job+0x7ea>
			if (state && ((state == 1U) || skip_collision) &&
    d938:	b153      	cbz	r3, d950 <ticker_job+0x658>
    d93a:	2b01      	cmp	r3, #1
    d93c:	d002      	beq.n	d944 <ticker_job+0x64c>
    d93e:	f1be 0f00 	cmp.w	lr, #0
    d942:	d005      	beq.n	d950 <ticker_job+0x658>
			    ticker->fp_op_func) {
    d944:	6a23      	ldr	r3, [r4, #32]
			if (state && ((state == 1U) || skip_collision) &&
    d946:	b11b      	cbz	r3, d950 <ticker_job+0x658>
				ticker->fp_op_func(TICKER_STATUS_FAILURE,
    d948:	6a61      	ldr	r1, [r4, #36]	; 0x24
    d94a:	2001      	movs	r0, #1
    d94c:	4798      	blx	r3
    d94e:	78a1      	ldrb	r1, [r4, #2]
			ticker->req = ticker->ack;
    d950:	7061      	strb	r1, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
    d952:	f89b 501d 	ldrb.w	r5, [fp, #29]
    d956:	2dff      	cmp	r5, #255	; 0xff
    d958:	d1b8      	bne.n	d8cc <ticker_job+0x5d4>
    d95a:	f8db 3000 	ldr.w	r3, [fp]
    d95e:	9304      	str	r3, [sp, #16]
			flag_compare_update = 1U;
    d960:	9806      	ldr	r0, [sp, #24]
	count_user = instance->count_user;
    d962:	f89b 2009 	ldrb.w	r2, [fp, #9]
			flag_compare_update = 1U;
    d966:	9c0a      	ldr	r4, [sp, #40]	; 0x28
	users = &instance->users[0];
    d968:	f8db 1004 	ldr.w	r1, [fp, #4]
    d96c:	9107      	str	r1, [sp, #28]
	while (count_user--) {
    d96e:	1e53      	subs	r3, r2, #1
			flag_compare_update = 1U;
    d970:	42a5      	cmp	r5, r4
    d972:	bf18      	it	ne
    d974:	2001      	movne	r0, #1
    d976:	9006      	str	r0, [sp, #24]
	while (count_user--) {
    d978:	b2db      	uxtb	r3, r3
    d97a:	2a00      	cmp	r2, #0
    d97c:	f000 812f 	beq.w	dbde <ticker_job+0x8e6>
    d980:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
		user_ops = (void *)&user->user_op[0];
    d984:	f8d8 3004 	ldr.w	r3, [r8, #4]
		user_ops_first = user->first;
    d988:	f898 6001 	ldrb.w	r6, [r8, #1]
		user_ops = (void *)&user->user_op[0];
    d98c:	9305      	str	r3, [sp, #20]
		while ((insert_head != TICKER_NULL) ||
    d98e:	9b01      	ldr	r3, [sp, #4]
    d990:	2bff      	cmp	r3, #255	; 0xff
    d992:	d062      	beq.n	da5a <ticker_job+0x762>
				ticker = &node[id_insert];
    d994:	f8dd a004 	ldr.w	sl, [sp, #4]
    d998:	9b04      	ldr	r3, [sp, #16]
    d99a:	fa0f f48a 	sxth.w	r4, sl
    d99e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    d9a2:	ea4f 1c04 	mov.w	ip, r4, lsl #4
    d9a6:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				insert_head = ticker->next;
    d9aa:	f813 300c 	ldrb.w	r3, [r3, ip]
    d9ae:	9301      	str	r3, [sp, #4]
				user_op = NULL;
    d9b0:	2500      	movs	r5, #0
	ticker->next = TICKER_NULL;
    d9b2:	22ff      	movs	r2, #255	; 0xff
    d9b4:	7022      	strb	r2, [r4, #0]
	(void)ticker_enqueue(instance, id_insert);
    d9b6:	f8db 7000 	ldr.w	r7, [fp]
	current = instance->ticker_id_head;
    d9ba:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticker_new = &node[id];
    d9be:	eb07 000c 	add.w	r0, r7, ip
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    d9c2:	4293      	cmp	r3, r2
	ticks_to_expire = ticker_new->ticks_to_expire;
    d9c4:	6881      	ldr	r1, [r0, #8]
	previous = TICKER_NULL;
    d9c6:	bf18      	it	ne
    d9c8:	9203      	strne	r2, [sp, #12]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    d9ca:	d112      	bne.n	d9f2 <ticker_job+0x6fa>
    d9cc:	e2ff      	b.n	dfce <ticker_job+0xcd6>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
    d9ce:	ebb1 010c 	subs.w	r1, r1, ip
    d9d2:	d106      	bne.n	d9e2 <ticker_job+0x6ea>
    d9d4:	f8be e01e 	ldrh.w	lr, [lr, #30]
    d9d8:	f8b0 901e 	ldrh.w	r9, [r0, #30]
    d9dc:	45f1      	cmp	r9, lr
    d9de:	f200 8343 	bhi.w	e068 <ticker_job+0xd70>
		current = ticker_current->next;
    d9e2:	f817 c002 	ldrb.w	ip, [r7, r2]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    d9e6:	9303      	str	r3, [sp, #12]
    d9e8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    d9ec:	f000 82e3 	beq.w	dfb6 <ticker_job+0xcbe>
    d9f0:	4663      	mov	r3, ip
		(ticker_current = &node[current])->ticks_to_expire))) {
    d9f2:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
    d9f6:	eb07 1e0c 	add.w	lr, r7, ip, lsl #4
    d9fa:	ea4f 120c 	mov.w	r2, ip, lsl #4
		(ticks_to_expire_current =
    d9fe:	f8de c008 	ldr.w	ip, [lr, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    da02:	458c      	cmp	ip, r1
    da04:	d9e3      	bls.n	d9ce <ticker_job+0x6d6>
    da06:	9a03      	ldr	r2, [sp, #12]
	ticker_new->ticks_to_expire = ticks_to_expire;
    da08:	6081      	str	r1, [r0, #8]
	if (previous == TICKER_NULL) {
    da0a:	2aff      	cmp	r2, #255	; 0xff
	ticker_new->next = current;
    da0c:	7003      	strb	r3, [r0, #0]
	if (previous == TICKER_NULL) {
    da0e:	f040 82d7 	bne.w	dfc0 <ticker_job+0xcc8>
		instance->ticker_id_head = id;
    da12:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
    da16:	2bff      	cmp	r3, #255	; 0xff
    da18:	d006      	beq.n	da28 <ticker_job+0x730>
		node[current].ticks_to_expire -= ticks_to_expire;
    da1a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    da1e:	eb07 1703 	add.w	r7, r7, r3, lsl #4
    da22:	68bb      	ldr	r3, [r7, #8]
    da24:	1a59      	subs	r1, r3, r1
    da26:	60b9      	str	r1, [r7, #8]
	ticker->req = ticker->ack + 1;
    da28:	78a3      	ldrb	r3, [r4, #2]
    da2a:	3301      	adds	r3, #1
    da2c:	7063      	strb	r3, [r4, #1]
			if (user_op) {
    da2e:	2d00      	cmp	r5, #0
    da30:	d0ad      	beq.n	d98e <ticker_job+0x696>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    da32:	f04f 0200 	mov.w	r2, #0
	if (user_op->fp_op_func) {
    da36:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    da38:	702a      	strb	r2, [r5, #0]
	user_op->status = status;
    da3a:	2200      	movs	r2, #0
    da3c:	62aa      	str	r2, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
    da3e:	b113      	cbz	r3, da46 <ticker_job+0x74e>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    da40:	6b29      	ldr	r1, [r5, #48]	; 0x30
    da42:	4610      	mov	r0, r2
    da44:	4798      	blx	r3
				if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    da46:	6863      	ldr	r3, [r4, #4]
    da48:	2b00      	cmp	r3, #0
    da4a:	d1a0      	bne.n	d98e <ticker_job+0x696>
					ticker->op_context =
    da4c:	e9d5 230b 	ldrd	r2, r3, [r5, #44]	; 0x2c
    da50:	e9c4 2308 	strd	r2, r3, [r4, #32]
		while ((insert_head != TICKER_NULL) ||
    da54:	9b01      	ldr	r3, [sp, #4]
    da56:	2bff      	cmp	r3, #255	; 0xff
    da58:	d19c      	bne.n	d994 <ticker_job+0x69c>
    da5a:	f898 3002 	ldrb.w	r3, [r8, #2]
    da5e:	42b3      	cmp	r3, r6
    da60:	d030      	beq.n	dac4 <ticker_job+0x7cc>
    da62:	9f05      	ldr	r7, [sp, #20]
				if (first == user->count_user_op) {
    da64:	f898 0000 	ldrb.w	r0, [r8]
				user_op = &user_ops[user_ops_first];
    da68:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    da6c:	eb06 0282 	add.w	r2, r6, r2, lsl #2
				first = user_ops_first + 1;
    da70:	3601      	adds	r6, #1
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    da72:	f817 1022 	ldrb.w	r1, [r7, r2, lsl #2]
				first = user_ops_first + 1;
    da76:	b2f6      	uxtb	r6, r6
					first = 0U;
    da78:	42b0      	cmp	r0, r6
    da7a:	bf08      	it	eq
    da7c:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    da7e:	2904      	cmp	r1, #4
				user_op = &user_ops[user_ops_first];
    da80:	eb07 0582 	add.w	r5, r7, r2, lsl #2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    da84:	d11c      	bne.n	dac0 <ticker_job+0x7c8>
				id_insert = user_op->id;
    da86:	f895 a001 	ldrb.w	sl, [r5, #1]
				ticker = &node[id_insert];
    da8a:	9b04      	ldr	r3, [sp, #16]
    da8c:	eb0a 0c4a 	add.w	ip, sl, sl, lsl #1
    da90:	eb03 140c 	add.w	r4, r3, ip, lsl #4
    da94:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
				if (((ticker->req -
    da98:	7861      	ldrb	r1, [r4, #1]
				      ticker->ack) & 0xff) != 0U) {
    da9a:	78a3      	ldrb	r3, [r4, #2]
				if (((ticker->req -
    da9c:	1ac9      	subs	r1, r1, r3
    da9e:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    daa2:	f000 8299 	beq.w	dfd8 <ticker_job+0xce0>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    daa6:	f04f 0300 	mov.w	r3, #0
    daaa:	f807 3022 	strb.w	r3, [r7, r2, lsl #2]
	if (user_op->fp_op_func) {
    daae:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->status = status;
    dab0:	2201      	movs	r2, #1
    dab2:	62aa      	str	r2, [r5, #40]	; 0x28
		user_op->fp_op_func(user_op->status, user_op->op_context);
    dab4:	4610      	mov	r0, r2
	if (user_op->fp_op_func) {
    dab6:	b10b      	cbz	r3, dabc <ticker_job+0x7c4>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    dab8:	6b29      	ldr	r1, [r5, #48]	; 0x30
    daba:	4798      	blx	r3
		while ((insert_head != TICKER_NULL) ||
    dabc:	f898 3002 	ldrb.w	r3, [r8, #2]
    dac0:	42b3      	cmp	r3, r6
    dac2:	d1cf      	bne.n	da64 <ticker_job+0x76c>
	while (count_user--) {
    dac4:	9a07      	ldr	r2, [sp, #28]
    dac6:	4542      	cmp	r2, r8
    dac8:	f1a8 0308 	sub.w	r3, r8, #8
    dacc:	f000 8084 	beq.w	dbd8 <ticker_job+0x8e0>
    dad0:	4698      	mov	r8, r3
    dad2:	e757      	b.n	d984 <ticker_job+0x68c>
		ticker->ticks_to_expire = 0U;
    dad4:	f8c4 e008 	str.w	lr, [r4, #8]
		instance->ticker_id_head = ticker->next;
    dad8:	f88b c01d 	strb.w	ip, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
    dadc:	2e00      	cmp	r6, #0
    dade:	f43f af27 	beq.w	d930 <ticker_job+0x638>
				ticker->req = ticker->ack;
    dae2:	4653      	mov	r3, sl
			ticks_to_expire_prep(ticker, instance->ticks_current,
    dae4:	9e07      	ldr	r6, [sp, #28]
    dae6:	f8db 2014 	ldr.w	r2, [fp, #20]
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    daea:	6960      	ldr	r0, [r4, #20]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    daec:	eb06 0709 	add.w	r7, r6, r9
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    daf0:	1abe      	subs	r6, r7, r2
    daf2:	f416 0f00 	tst.w	r6, #8388608	; 0x800000
    daf6:	d14d      	bne.n	db94 <ticker_job+0x89c>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    daf8:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    dafc:	4433      	add	r3, r6
	if (ticks_to_expire > ticks_to_expire_minus) {
    dafe:	4298      	cmp	r0, r3
    db00:	d250      	bcs.n	dba4 <ticker_job+0x8ac>
		ticks_to_expire -= ticks_to_expire_minus;
    db02:	1a1b      	subs	r3, r3, r0
		ticks_to_expire_minus = 0U;
    db04:	2000      	movs	r0, #0
			ticker->next = *insert_head;
    db06:	9a01      	ldr	r2, [sp, #4]
    db08:	7022      	strb	r2, [r4, #0]
			ticker->req++;
    db0a:	3101      	adds	r1, #1
    db0c:	7061      	strb	r1, [r4, #1]
	ticker->ticks_to_expire = ticks_to_expire;
    db0e:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    db10:	6160      	str	r0, [r4, #20]
			ticker->req++;
    db12:	9501      	str	r5, [sp, #4]
	while (instance->ticker_id_head != TICKER_NULL) {
    db14:	f89b 501d 	ldrb.w	r5, [fp, #29]
    db18:	2dff      	cmp	r5, #255	; 0xff
    db1a:	f47f aed7 	bne.w	d8cc <ticker_job+0x5d4>
    db1e:	e71c      	b.n	d95a <ticker_job+0x662>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
    db20:	b112      	cbz	r2, db28 <ticker_job+0x830>
    db22:	7a13      	ldrb	r3, [r2, #8]
    db24:	2b01      	cmp	r3, #1
    db26:	d0dc      	beq.n	dae2 <ticker_job+0x7ea>
				if (!ticker->lazy_current) {
    db28:	f1be 0f00 	cmp.w	lr, #0
    db2c:	d151      	bne.n	dbd2 <ticker_job+0x8da>
					lazy_periodic = ticker->lazy_periodic;
    db2e:	8ba7      	ldrh	r7, [r4, #28]
    db30:	9705      	str	r7, [sp, #20]
    db32:	4601      	mov	r1, r0
						ticker_remainder_inc(ticker);
    db34:	6a23      	ldr	r3, [r4, #32]
    db36:	9303      	str	r3, [sp, #12]
    db38:	6a62      	ldr	r2, [r4, #36]	; 0x24
    db3a:	9108      	str	r1, [sp, #32]
				ticks_to_expire = 0U;
    db3c:	2300      	movs	r3, #0
    db3e:	1c70      	adds	r0, r6, #1
    db40:	e009      	b.n	db56 <ticker_job+0x85e>
    db42:	bf00      	nop
    db44:	7f172b59 	.word	0x7f172b59
    db48:	ff172b5a 	.word	0xff172b5a
				while (count--) {
    db4c:	3f01      	subs	r7, #1
    db4e:	46b4      	mov	ip, r6
    db50:	1c79      	adds	r1, r7, #1
					ticks_to_expire +=
    db52:	4463      	add	r3, ip
				while (count--) {
    db54:	d012      	beq.n	db7c <ticker_job+0x884>
	ticker->remainder_current += ticker->remainder_periodic;
    db56:	9903      	ldr	r1, [sp, #12]
	if ((ticker->remainder_current < BIT(31)) &&
    db58:	f8df c2c4 	ldr.w	ip, [pc, #708]	; de20 <ticker_job+0xb28>
	ticker->remainder_current += ticker->remainder_periodic;
    db5c:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
    db5e:	49ad      	ldr	r1, [pc, #692]	; (de14 <ticker_job+0xb1c>)
    db60:	4494      	add	ip, r2
    db62:	458c      	cmp	ip, r1
    db64:	d8f2      	bhi.n	db4c <ticker_job+0x854>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    db66:	f1a2 72e8 	sub.w	r2, r2, #30408704	; 0x1d00000
				while (count--) {
    db6a:	3f01      	subs	r7, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    db6c:	f5a2 32d4 	sub.w	r2, r2, #108544	; 0x1a800
    db70:	4684      	mov	ip, r0
				while (count--) {
    db72:	1c79      	adds	r1, r7, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    db74:	f5a2 72a5 	sub.w	r2, r2, #330	; 0x14a
					ticks_to_expire +=
    db78:	4463      	add	r3, ip
				while (count--) {
    db7a:	d1ec      	bne.n	db56 <ticker_job+0x85e>
				} else if (!ticker->must_expire) {
    db7c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    db80:	9908      	ldr	r1, [sp, #32]
    db82:	6262      	str	r2, [r4, #36]	; 0x24
    db84:	2800      	cmp	r0, #0
    db86:	f000 8285 	beq.w	e094 <ticker_job+0xd9c>
				ticker->lazy_current += (lazy_periodic + lazy);
    db8a:	9a05      	ldr	r2, [sp, #20]
    db8c:	4496      	add	lr, r2
    db8e:	f8a4 e01e 	strh.w	lr, [r4, #30]
    db92:	e7a7      	b.n	dae4 <ticker_job+0x7ec>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    db94:	1bd2      	subs	r2, r2, r7
    db96:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    db9a:	429a      	cmp	r2, r3
    db9c:	d216      	bcs.n	dbcc <ticker_job+0x8d4>
			ticks_to_expire -= delta_current_start;
    db9e:	1a9b      	subs	r3, r3, r2
	if (ticks_to_expire > ticks_to_expire_minus) {
    dba0:	4298      	cmp	r0, r3
    dba2:	d3ae      	bcc.n	db02 <ticker_job+0x80a>
    dba4:	1ac0      	subs	r0, r0, r3
		ticks_to_expire = 0U;
    dba6:	2300      	movs	r3, #0
    dba8:	e7ad      	b.n	db06 <ticker_job+0x80e>
    dbaa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    dbac:	468b      	mov	fp, r1
    dbae:	e64e      	b.n	d84e <ticker_job+0x556>
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    dbb0:	f1be 0f00 	cmp.w	lr, #0
    dbb4:	f47f aeb4 	bne.w	d920 <ticker_job+0x628>
    dbb8:	b112      	cbz	r2, dbc0 <ticker_job+0x8c8>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
    dbba:	7a17      	ldrb	r7, [r2, #8]
    dbbc:	2f01      	cmp	r7, #1
    dbbe:	d089      	beq.n	dad4 <ticker_job+0x7dc>
			instance->ticks_slot_previous = ticker->ticks_slot;
    dbc0:	9f03      	ldr	r7, [sp, #12]
			instance->ticker_id_slot_previous = id_expired;
    dbc2:	f88b 501c 	strb.w	r5, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    dbc6:	f8cb 7018 	str.w	r7, [fp, #24]
    dbca:	e6a9      	b.n	d920 <ticker_job+0x628>
			ticks_to_expire_minus +=
    dbcc:	4410      	add	r0, r2
    dbce:	1ac0      	subs	r0, r0, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
    dbd0:	e7e9      	b.n	dba6 <ticker_job+0x8ae>
    dbd2:	2700      	movs	r7, #0
					lazy_periodic = 0U;
    dbd4:	9705      	str	r7, [sp, #20]
    dbd6:	e7ad      	b.n	db34 <ticker_job+0x83c>
    dbd8:	f8db 3000 	ldr.w	r3, [fp]
    dbdc:	9304      	str	r3, [sp, #16]
	while (rescheduling) {
    dbde:	f89b c01d 	ldrb.w	ip, [fp, #29]
    dbe2:	9e04      	ldr	r6, [sp, #16]
	uint8_t  rescheduled = 0U;
    dbe4:	2300      	movs	r3, #0
		while (ticker_id_head != TICKER_NULL) {
    dbe6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    dbea:	d010      	beq.n	dc0e <ticker_job+0x916>
    dbec:	46e2      	mov	sl, ip
			ticker = &nodes[ticker_id_head];
    dbee:	fa0f f28a 	sxth.w	r2, sl
    dbf2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    dbf6:	eb06 1202 	add.w	r2, r6, r2, lsl #4
			ext_data = ticker->ext_data;
    dbfa:	6a97      	ldr	r7, [r2, #40]	; 0x28
			if (ext_data && ext_data->reschedule_state ==
    dbfc:	b117      	cbz	r7, dc04 <ticker_job+0x90c>
    dbfe:	7a39      	ldrb	r1, [r7, #8]
    dc00:	2901      	cmp	r1, #1
    dc02:	d076      	beq.n	dcf2 <ticker_job+0x9fa>
			ticker_id_head = ticker->next;
    dc04:	f892 a000 	ldrb.w	sl, [r2]
		while (ticker_id_head != TICKER_NULL) {
    dc08:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    dc0c:	d1ef      	bne.n	dbee <ticker_job+0x8f6>
		if (ticker_job_reschedule_in_window(instance, ticks_elapsed)) {
    dc0e:	2b00      	cmp	r3, #0
    dc10:	d052      	beq.n	dcb8 <ticker_job+0x9c0>
	if (instance->ticker_id_head != ticker_id_old_head) {
    dc12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    dc14:	4562      	cmp	r2, ip
    dc16:	f000 827b 	beq.w	e110 <ticker_job+0xe18>
	if (!pending) {
    dc1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    dc1c:	2b00      	cmp	r3, #0
    dc1e:	f000 80e4 	beq.w	ddea <ticker_job+0xaf2>
    dc22:	f89b c01d 	ldrb.w	ip, [fp, #29]
	if (instance->ticker_id_head == TICKER_NULL) {
    dc26:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    dc2a:	f000 827f 	beq.w	e12c <ticker_job+0xe34>
	if (ticker_id_old_head == TICKER_NULL) {
    dc2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    dc30:	2bff      	cmp	r3, #255	; 0xff
    dc32:	f000 8293 	beq.w	e15c <ticker_job+0xe64>
	ticks_to_expire = ticker->ticks_to_expire;
    dc36:	f8db 3000 	ldr.w	r3, [fp]
		LL_ASSERT(i);
    dc3a:	f8df 81e8 	ldr.w	r8, [pc, #488]	; de24 <ticker_job+0xb2c>
    dc3e:	4f76      	ldr	r7, [pc, #472]	; (de18 <ticker_job+0xb20>)
    dc40:	4e76      	ldr	r6, [pc, #472]	; (de1c <ticker_job+0xb24>)
	ticker = &instance->nodes[instance->ticker_id_head];
    dc42:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
	ticks_to_expire = ticker->ticks_to_expire;
    dc46:	eb03 130c 	add.w	r3, r3, ip, lsl #4
	i = 10U;
    dc4a:	250a      	movs	r5, #10
	ticks_to_expire = ticker->ticks_to_expire;
    dc4c:	f8d3 9008 	ldr.w	r9, [r3, #8]
		ctr = cntr_cnt_get();
    dc50:	f00b fb56 	bl	19300 <cntr_cnt_get>
		cc = instance->ticks_current;
    dc54:	f8db 3014 	ldr.w	r3, [fp, #20]
		instance->trigger_set_cb(cc);
    dc58:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    dc5c:	1ac4      	subs	r4, r0, r3
    dc5e:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    dc62:	3403      	adds	r4, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
    dc64:	454c      	cmp	r4, r9
    dc66:	bf2c      	ite	cs
    dc68:	191b      	addcs	r3, r3, r4
    dc6a:	444b      	addcc	r3, r9
		cc &= HAL_TICKER_CNTR_MASK;
    dc6c:	f023 447f 	bic.w	r4, r3, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
    dc70:	4682      	mov	sl, r0
		instance->trigger_set_cb(cc);
    dc72:	4620      	mov	r0, r4
    dc74:	4790      	blx	r2
		ctr_post = cntr_cnt_get();
    dc76:	f00b fb43 	bl	19300 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    dc7a:	eba0 000a 	sub.w	r0, r0, sl
    dc7e:	eba4 040a 	sub.w	r4, r4, sl
    dc82:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    dc86:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    dc8a:	3003      	adds	r0, #3
		  ticker_ticks_diff_get(cc, ctr));
    dc8c:	42a0      	cmp	r0, r4
		i--;
    dc8e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		  ticker_ticks_diff_get(cc, ctr));
    dc92:	d91b      	bls.n	dccc <ticker_job+0x9d4>
		LL_ASSERT(i);
    dc94:	2d00      	cmp	r5, #0
    dc96:	d1db      	bne.n	dc50 <ticker_job+0x958>
    dc98:	f640 03f3 	movw	r3, #2291	; 0x8f3
    dc9c:	4642      	mov	r2, r8
    dc9e:	4639      	mov	r1, r7
    dca0:	4630      	mov	r0, r6
    dca2:	f010 fb6f 	bl	1e384 <printk>
    dca6:	4040      	eors	r0, r0
    dca8:	f380 8811 	msr	BASEPRI, r0
    dcac:	f04f 0003 	mov.w	r0, #3
    dcb0:	df02      	svc	2
    dcb2:	e7cd      	b.n	dc50 <ticker_job+0x958>
    dcb4:	f89b c01d 	ldrb.w	ip, [fp, #29]
	if (instance->ticker_id_head != ticker_id_old_head) {
    dcb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    dcba:	4563      	cmp	r3, ip
    dcbc:	d1ad      	bne.n	dc1a <ticker_job+0x922>
	if (!pending) {
    dcbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    dcc0:	2b00      	cmp	r3, #0
    dcc2:	f000 8241 	beq.w	e148 <ticker_job+0xe50>
	if (flag_compare_update) {
    dcc6:	9b06      	ldr	r3, [sp, #24]
    dcc8:	2b00      	cmp	r3, #0
    dcca:	d1aa      	bne.n	dc22 <ticker_job+0x92a>
    dccc:	f89b 301f 	ldrb.w	r3, [fp, #31]
	instance->job_guard = 0U;
    dcd0:	2200      	movs	r2, #0
    dcd2:	f88b 201e 	strb.w	r2, [fp, #30]
	if (instance->worker_trigger) {
    dcd6:	2b00      	cmp	r3, #0
    dcd8:	f000 81d8 	beq.w	e08c <ticker_job+0xd94>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    dcdc:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    dce0:	465b      	mov	r3, fp
    dce2:	2201      	movs	r2, #1
    dce4:	2103      	movs	r1, #3
    dce6:	2004      	movs	r0, #4
    dce8:	46a4      	mov	ip, r4
}
    dcea:	b00f      	add	sp, #60	; 0x3c
    dcec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    dcf0:	4760      	bx	ip
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
    dcf2:	f89b 301c 	ldrb.w	r3, [fp, #28]
    dcf6:	2bff      	cmp	r3, #255	; 0xff
    dcf8:	d042      	beq.n	dd80 <ticker_job+0xa88>
			instance->ticks_slot_previous > ticks_elapsed) {
    dcfa:	f8db 0018 	ldr.w	r0, [fp, #24]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
    dcfe:	9b02      	ldr	r3, [sp, #8]
    dd00:	4283      	cmp	r3, r0
    dd02:	d23d      	bcs.n	dd80 <ticker_job+0xa88>
			window_start_ticks = instance->ticks_slot_previous -
    dd04:	1ac3      	subs	r3, r0, r3
    dd06:	9301      	str	r3, [sp, #4]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    dd08:	e9d7 4300 	ldrd	r4, r3, [r7]
    dd0c:	42a3      	cmp	r3, r4
		ticker_id_iter = nodes[ticker_id_head].next;
    dd0e:	f892 e000 	ldrb.w	lr, [r2]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    dd12:	d23d      	bcs.n	dd90 <ticker_job+0xa98>
		while (ticker_id_iter != TICKER_NULL &&
    dd14:	f1be 0fff 	cmp.w	lr, #255	; 0xff
			ticks_slot_window = ext_data->ticks_slot_window -
    dd18:	eba4 0403 	sub.w	r4, r4, r3
		while (ticker_id_iter != TICKER_NULL &&
    dd1c:	d038      	beq.n	dd90 <ticker_job+0xa98>
		       ticks_start_offset + ticker->ticks_slot <=
    dd1e:	6995      	ldr	r5, [r2, #24]
		while (ticker_id_iter != TICKER_NULL &&
    dd20:	42ac      	cmp	r4, r5
    dd22:	f04f 0300 	mov.w	r3, #0
    dd26:	d337      	bcc.n	dd98 <ticker_job+0xaa0>
    dd28:	4699      	mov	r9, r3
    dd2a:	4671      	mov	r1, lr
    dd2c:	9203      	str	r2, [sp, #12]
    dd2e:	46a8      	mov	r8, r5
    dd30:	e01a      	b.n	dd68 <ticker_job+0xa70>
			if (node->ticks_to_expire >
    dd32:	6888      	ldr	r0, [r1, #8]
					MIN(ticks_slot_window,
    dd34:	1f03      	subs	r3, r0, #4
			if (node->ticks_to_expire >
    dd36:	2804      	cmp	r0, #4
					MIN(ticks_slot_window,
    dd38:	444b      	add	r3, r9
			if (node->ticks_to_expire >
    dd3a:	d909      	bls.n	dd50 <ticker_job+0xa58>
				window_end_ticks =
    dd3c:	42a3      	cmp	r3, r4
    dd3e:	bf28      	it	cs
    dd40:	4623      	movcs	r3, r4
			if (window_end_ticks > ticks_start_offset +
    dd42:	4543      	cmp	r3, r8
    dd44:	d904      	bls.n	dd50 <ticker_job+0xa58>
			if (ticks_to_expire != 0U &&
    dd46:	1b5b      	subs	r3, r3, r5
    dd48:	d002      	beq.n	dd50 <ticker_job+0xa58>
    dd4a:	9a01      	ldr	r2, [sp, #4]
    dd4c:	4293      	cmp	r3, r2
    dd4e:	d222      	bcs.n	dd96 <ticker_job+0xa9e>
			window_start_ticks  = node->ticks_to_expire +
    dd50:	698b      	ldr	r3, [r1, #24]
			ticker_id_iter = node->next;
    dd52:	7809      	ldrb	r1, [r1, #0]
			window_start_ticks  = node->ticks_to_expire +
    dd54:	18c3      	adds	r3, r0, r3
    dd56:	9301      	str	r3, [sp, #4]
			ticks_start_offset += node->ticks_to_expire;
    dd58:	4481      	add	r9, r0
			ticks_to_expire     = ticks_slot_window -
    dd5a:	1b63      	subs	r3, r4, r5
		while (ticker_id_iter != TICKER_NULL &&
    dd5c:	29ff      	cmp	r1, #255	; 0xff
		       ticks_start_offset + ticker->ticks_slot <=
    dd5e:	eb09 0805 	add.w	r8, r9, r5
		while (ticker_id_iter != TICKER_NULL &&
    dd62:	d018      	beq.n	dd96 <ticker_job+0xa9e>
    dd64:	4544      	cmp	r4, r8
    dd66:	d316      	bcc.n	dd96 <ticker_job+0xa9e>
			node = &nodes[ticker_id_iter];
    dd68:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    dd6c:	eb06 1101 	add.w	r1, r6, r1, lsl #4
			if (node->ext_data &&
    dd70:	6a88      	ldr	r0, [r1, #40]	; 0x28
    dd72:	2800      	cmp	r0, #0
    dd74:	d0dd      	beq.n	dd32 <ticker_job+0xa3a>
    dd76:	7a00      	ldrb	r0, [r0, #8]
    dd78:	2801      	cmp	r0, #1
    dd7a:	d1da      	bne.n	dd32 <ticker_job+0xa3a>
				ticker_id_iter = node->next;
    dd7c:	7809      	ldrb	r1, [r1, #0]
				continue;
    dd7e:	e7ed      	b.n	dd5c <ticker_job+0xa64>
		window_start_ticks = 0U;
    dd80:	2300      	movs	r3, #0
    dd82:	9301      	str	r3, [sp, #4]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    dd84:	e9d7 4300 	ldrd	r4, r3, [r7]
    dd88:	42a3      	cmp	r3, r4
		ticker_id_iter = nodes[ticker_id_head].next;
    dd8a:	f892 e000 	ldrb.w	lr, [r2]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    dd8e:	d3c1      	bcc.n	dd14 <ticker_job+0xa1c>
		ticker->ticks_to_expire = ticks_to_expire;
    dd90:	2300      	movs	r3, #0
    dd92:	6093      	str	r3, [r2, #8]
		while (ticker_id_iter != TICKER_NULL) {
    dd94:	e021      	b.n	ddda <ticker_job+0xae2>
    dd96:	9a03      	ldr	r2, [sp, #12]
		ticker->ticks_to_expire = ticks_to_expire;
    dd98:	6093      	str	r3, [r2, #8]
    dd9a:	4674      	mov	r4, lr
    dd9c:	f04f 09ff 	mov.w	r9, #255	; 0xff
    dda0:	e000      	b.n	dda4 <ticker_job+0xaac>
    dda2:	4604      	mov	r4, r0
			node = &nodes[ticker_id_iter];
    dda4:	b221      	sxth	r1, r4
    dda6:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    ddaa:	eb06 1800 	add.w	r8, r6, r0, lsl #4
    ddae:	0100      	lsls	r0, r0, #4
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
    ddb0:	f8d8 5008 	ldr.w	r5, [r8, #8]
    ddb4:	429d      	cmp	r5, r3
    ddb6:	f080 819a 	bcs.w	e0ee <ticker_job+0xdf6>
				ticker->ticks_to_expire -=
    ddba:	1b5b      	subs	r3, r3, r5
    ddbc:	6093      	str	r3, [r2, #8]
			ticker_id_iter = node->next;
    ddbe:	5c30      	ldrb	r0, [r6, r0]
		while (ticker_id_iter != TICKER_NULL) {
    ddc0:	28ff      	cmp	r0, #255	; 0xff
    ddc2:	46a1      	mov	r9, r4
    ddc4:	d1ed      	bne.n	dda2 <ticker_job+0xaaa>
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
    ddc6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    ddca:	0109      	lsls	r1, r1, #4
			instance->ticker_id_head = nodes[ticker_id_head].next;
    ddcc:	f88b e01d 	strb.w	lr, [fp, #29]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
    ddd0:	5c73      	ldrb	r3, [r6, r1]
    ddd2:	7013      	strb	r3, [r2, #0]
			nodes[ticker_id_prev].next = ticker_id_head;
    ddd4:	f806 a001 	strb.w	sl, [r6, r1]
    ddd8:	46f4      	mov	ip, lr
		ticker->lazy_current--;
    ddda:	8bd3      	ldrh	r3, [r2, #30]
    dddc:	3b01      	subs	r3, #1
    ddde:	83d3      	strh	r3, [r2, #30]
		ext_data->reschedule_state =
    dde0:	f04f 0202 	mov.w	r2, #2
		rescheduled  = 1U;
    dde4:	2301      	movs	r3, #1
		ext_data->reschedule_state =
    dde6:	723a      	strb	r2, [r7, #8]
		rescheduled  = 1U;
    dde8:	e6fd      	b.n	dbe6 <ticker_job+0x8ee>
	count_user = instance->count_user;
    ddea:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
    ddee:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
    ddf2:	1e5c      	subs	r4, r3, #1
    ddf4:	b2e4      	uxtb	r4, r4
    ddf6:	2b00      	cmp	r3, #0
    ddf8:	f43f af13 	beq.w	dc22 <ticker_job+0x92a>
		flag_compare_update = 1U;
    ddfc:	2301      	movs	r3, #1
    ddfe:	9306      	str	r3, [sp, #24]
    de00:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
		uop->status = TICKER_STATUS_SUCCESS;
    de04:	f04f 0900 	mov.w	r9, #0
		while (user->first != user->last) {
    de08:	7863      	ldrb	r3, [r4, #1]
    de0a:	78e1      	ldrb	r1, [r4, #3]
		user_op = &user->user_op[0];
    de0c:	6865      	ldr	r5, [r4, #4]
		while (user->first != user->last) {
    de0e:	4299      	cmp	r1, r3
    de10:	d116      	bne.n	de40 <ticker_job+0xb48>
    de12:	e06b      	b.n	deec <ticker_job+0xbf4>
    de14:	7f172b59 	.word	0x7f172b59
    de18:	000243f8 	.word	0x000243f8
    de1c:	00024334 	.word	0x00024334
    de20:	ff172b5a 	.word	0xff172b5a
    de24:	000242f4 	.word	0x000242f4
	switch (uop->op) {
    de28:	2b01      	cmp	r3, #1
    de2a:	d05b      	beq.n	dee4 <ticker_job+0xbec>
			first = user->first + 1;
    de2c:	7863      	ldrb	r3, [r4, #1]
			if (first == user->count_user_op) {
    de2e:	7822      	ldrb	r2, [r4, #0]
			first = user->first + 1;
    de30:	3301      	adds	r3, #1
    de32:	b2db      	uxtb	r3, r3
				first = 0U;
    de34:	429a      	cmp	r2, r3
    de36:	bf08      	it	eq
    de38:	2300      	moveq	r3, #0
		while (user->first != user->last) {
    de3a:	4299      	cmp	r1, r3
			user->first = first;
    de3c:	7063      	strb	r3, [r4, #1]
		while (user->first != user->last) {
    de3e:	d055      	beq.n	deec <ticker_job+0xbf4>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    de40:	b21b      	sxth	r3, r3
    de42:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    de46:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    de4a:	eb05 0283 	add.w	r2, r5, r3, lsl #2
	switch (uop->op) {
    de4e:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
    de52:	2b02      	cmp	r3, #2
    de54:	d01b      	beq.n	de8e <ticker_job+0xb96>
    de56:	2b03      	cmp	r3, #3
    de58:	d1e6      	bne.n	de28 <ticker_job+0xb30>
		if (uop->id < instance->count_node) {
    de5a:	7853      	ldrb	r3, [r2, #1]
    de5c:	f89b 1008 	ldrb.w	r1, [fp, #8]
    de60:	4299      	cmp	r1, r3
    de62:	d911      	bls.n	de88 <ticker_job+0xb90>
			node[uop->id].priority =
    de64:	f8db 1000 	ldr.w	r1, [fp]
    de68:	7910      	ldrb	r0, [r2, #4]
    de6a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    de6e:	eb01 1303 	add.w	r3, r1, r3, lsl #4
    de72:	f883 002d 	strb.w	r0, [r3, #45]	; 0x2d
			uop->status = TICKER_STATUS_SUCCESS;
    de76:	f8c2 9028 	str.w	r9, [r2, #40]	; 0x28
		fp_op_func = uop->fp_op_func;
    de7a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	if (fp_op_func) {
    de7c:	b113      	cbz	r3, de84 <ticker_job+0xb8c>
		fp_op_func(uop->status, uop->op_context);
    de7e:	6b11      	ldr	r1, [r2, #48]	; 0x30
    de80:	6a90      	ldr	r0, [r2, #40]	; 0x28
    de82:	4798      	blx	r3
    de84:	78e1      	ldrb	r1, [r4, #3]
    de86:	e7d1      	b.n	de2c <ticker_job+0xb34>
			uop->status = TICKER_STATUS_FAILURE;
    de88:	2301      	movs	r3, #1
    de8a:	6293      	str	r3, [r2, #40]	; 0x28
    de8c:	e7f5      	b.n	de7a <ticker_job+0xb82>
		ticker_by_next_slot_get(instance,
    de8e:	e9d2 7001 	ldrd	r7, r0, [r2, #4]
	_ticker_id_head = *ticker_id_head;
    de92:	f897 e000 	ldrb.w	lr, [r7]
		ticker_by_next_slot_get(instance,
    de96:	f8d2 c00c 	ldr.w	ip, [r2, #12]
	node = instance->nodes;
    de9a:	f8db 1000 	ldr.w	r1, [fp]
	if ((_ticker_id_head == TICKER_NULL) ||
    de9e:	f8db 8014 	ldr.w	r8, [fp, #20]
    dea2:	f1be 0fff 	cmp.w	lr, #255	; 0xff
    dea6:	d003      	beq.n	deb0 <ticker_job+0xbb8>
    dea8:	6803      	ldr	r3, [r0, #0]
    deaa:	4543      	cmp	r3, r8
    deac:	f000 80e7 	beq.w	e07e <ticker_job+0xd86>
		_ticker_id_head = instance->ticker_id_head;
    deb0:	f89b 301d 	ldrb.w	r3, [fp, #29]
		*ticks_current = instance->ticks_current;
    deb4:	f8c0 8000 	str.w	r8, [r0]
		_ticks_to_expire = 0U;
    deb8:	f04f 0e00 	mov.w	lr, #0
    debc:	e00d      	b.n	deda <ticker_job+0xbe2>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0U)) {
    debe:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    dec2:	eb01 1800 	add.w	r8, r1, r0, lsl #4
    dec6:	0100      	lsls	r0, r0, #4
    dec8:	f8d8 a008 	ldr.w	sl, [r8, #8]
	while ((_ticker_id_head != TICKER_NULL) &&
    decc:	f8d8 8018 	ldr.w	r8, [r8, #24]
    ded0:	44d6      	add	lr, sl
    ded2:	f1b8 0f00 	cmp.w	r8, #0
    ded6:	d102      	bne.n	dede <ticker_job+0xbe6>
		_ticker_id_head = ticker->next;
    ded8:	5c0b      	ldrb	r3, [r1, r0]
	while ((_ticker_id_head != TICKER_NULL) &&
    deda:	2bff      	cmp	r3, #255	; 0xff
    dedc:	d1ef      	bne.n	debe <ticker_job+0xbc6>
	*ticker_id_head = _ticker_id_head;
    dede:	703b      	strb	r3, [r7, #0]
	*ticks_to_expire = _ticks_to_expire;
    dee0:	f8cc e000 	str.w	lr, [ip]
		fp_op_func = uop->fp_op_func;
    dee4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
		uop->status = TICKER_STATUS_SUCCESS;
    dee6:	f8c2 9028 	str.w	r9, [r2, #40]	; 0x28
		break;
    deea:	e7c7      	b.n	de7c <ticker_job+0xb84>
	while (count_user--) {
    deec:	42a6      	cmp	r6, r4
    deee:	f1a4 0308 	sub.w	r3, r4, #8
    def2:	f43f aee8 	beq.w	dcc6 <ticker_job+0x9ce>
    def6:	461c      	mov	r4, r3
    def8:	e786      	b.n	de08 <ticker_job+0xb10>
	ticker_new->next = current;
    defa:	461a      	mov	r2, r3
	ticker_new->ticks_to_expire = ticks_to_expire;
    defc:	6081      	str	r1, [r0, #8]
	ticker_new->next = current;
    defe:	f880 c000 	strb.w	ip, [r0]
    df02:	4663      	mov	r3, ip
		node[previous].next = id;
    df04:	b212      	sxth	r2, r2
    df06:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    df0a:	0112      	lsls	r2, r2, #4
    df0c:	f807 a002 	strb.w	sl, [r7, r2]
    df10:	e43a      	b.n	d788 <ticker_job+0x490>
	ticker_new->next = current;
    df12:	f807 300c 	strb.w	r3, [r7, ip]
		instance->ticker_id_head = id;
    df16:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
    df1a:	e43e      	b.n	d79a <ticker_job+0x4a2>
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
    df1c:	8aaf      	ldrh	r7, [r5, #20]
				ticker_job_op_start(ticker, user_op,
    df1e:	f8db e014 	ldr.w	lr, [fp, #20]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
    df22:	f8d5 9024 	ldr.w	r9, [r5, #36]	; 0x24
    df26:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    df2a:	429f      	cmp	r7, r3
    df2c:	e9d5 0203 	ldrd	r0, r2, [r5, #12]
    df30:	d037      	beq.n	dfa2 <ticker_job+0xcaa>
		ticker->must_expire =
    df32:	f64f 73ff 	movw	r3, #65535	; 0xffff
    df36:	1afb      	subs	r3, r7, r3
    df38:	fab3 f383 	clz	r3, r3
    df3c:	095b      	lsrs	r3, r3, #5
	ticker->ext_data = start->ext_data;
    df3e:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
	ticker->lazy_periodic =
    df42:	f64f 79fd 	movw	r9, #65533	; 0xfffd
	ticker->ticks_periodic = start->ticks_periodic;
    df46:	6060      	str	r0, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    df48:	6222      	str	r2, [r4, #32]
		ticker->must_expire =
    df4a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	ticker->lazy_periodic =
    df4e:	454f      	cmp	r7, r9
    df50:	bf88      	it	hi
    df52:	2700      	movhi	r7, #0
	ticker->timeout_func = start->fp_timeout_func;
    df54:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    df58:	6868      	ldr	r0, [r5, #4]
	ticker->ticks_slot = start->ticks_slot;
    df5a:	61a2      	str	r2, [r4, #24]
	ticker->context = start->context;
    df5c:	6a2a      	ldr	r2, [r5, #32]
	ticker->lazy_periodic =
    df5e:	83a7      	strh	r7, [r4, #28]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    df60:	eba0 070e 	sub.w	r7, r0, lr
	ticker->context = start->context;
    df64:	e9c4 3203 	strd	r3, r2, [r4, #12]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    df68:	023a      	lsls	r2, r7, #8
	ticker->ticks_to_expire = start->ticks_first;
    df6a:	68ab      	ldr	r3, [r5, #8]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    df6c:	d40d      	bmi.n	df8a <ticker_job+0xc92>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    df6e:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    df72:	443b      	add	r3, r7
	if (ticks_to_expire > ticks_to_expire_minus) {
    df74:	b193      	cbz	r3, df9c <ticker_job+0xca4>
	ticker->ticks_to_expire = ticks_to_expire;
    df76:	60a3      	str	r3, [r4, #8]
	ticker->remainder_current = 0U;
    df78:	9b03      	ldr	r3, [sp, #12]
    df7a:	6263      	str	r3, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
    df7c:	83e3      	strh	r3, [r4, #30]
	ticker->force = 1U;
    df7e:	f04f 0301 	mov.w	r3, #1
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    df82:	6161      	str	r1, [r4, #20]
	ticker->force = 1U;
    df84:	70e3      	strb	r3, [r4, #3]
}
    df86:	f7ff bbc9 	b.w	d71c <ticker_job+0x424>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    df8a:	ebae 0200 	sub.w	r2, lr, r0
    df8e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    df92:	4293      	cmp	r3, r2
    df94:	d96f      	bls.n	e076 <ticker_job+0xd7e>
			ticks_to_expire -= delta_current_start;
    df96:	1a9b      	subs	r3, r3, r2
	if (ticks_to_expire > ticks_to_expire_minus) {
    df98:	2b00      	cmp	r3, #0
    df9a:	d1ec      	bne.n	df76 <ticker_job+0xc7e>
		ticks_to_expire_minus -= ticks_to_expire;
    df9c:	4619      	mov	r1, r3
		ticks_to_expire = 0U;
    df9e:	2300      	movs	r3, #0
    dfa0:	e7e9      	b.n	df76 <ticker_job+0xc7e>
	ticker->ext_data = start->ext_data;
    dfa2:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
    dfa6:	6060      	str	r0, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    dfa8:	6222      	str	r2, [r4, #32]
	ticker->lazy_periodic =
    dfaa:	460f      	mov	r7, r1
    dfac:	e7d2      	b.n	df54 <ticker_job+0xc5c>
    dfae:	9a02      	ldr	r2, [sp, #8]
    dfb0:	4661      	mov	r1, ip
    dfb2:	f7ff bbe2 	b.w	d77a <ticker_job+0x482>
	ticker_new->next = current;
    dfb6:	461a      	mov	r2, r3
	ticker_new->ticks_to_expire = ticks_to_expire;
    dfb8:	6081      	str	r1, [r0, #8]
	ticker_new->next = current;
    dfba:	f880 c000 	strb.w	ip, [r0]
    dfbe:	4663      	mov	r3, ip
		node[previous].next = id;
    dfc0:	b212      	sxth	r2, r2
    dfc2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    dfc6:	0112      	lsls	r2, r2, #4
    dfc8:	f807 a002 	strb.w	sl, [r7, r2]
    dfcc:	e523      	b.n	da16 <ticker_job+0x71e>
	ticker_new->next = current;
    dfce:	f807 300c 	strb.w	r3, [r7, ip]
		instance->ticker_id_head = id;
    dfd2:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
    dfd6:	e527      	b.n	da28 <ticker_job+0x730>
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
    dfd8:	8aaf      	ldrh	r7, [r5, #20]
				ticker_job_op_start(ticker, user_op,
    dfda:	f8db e014 	ldr.w	lr, [fp, #20]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
    dfde:	f8d5 9024 	ldr.w	r9, [r5, #36]	; 0x24
    dfe2:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    dfe6:	429f      	cmp	r7, r3
    dfe8:	e9d5 0203 	ldrd	r0, r2, [r5, #12]
    dfec:	d036      	beq.n	e05c <ticker_job+0xd64>
		ticker->must_expire =
    dfee:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dff2:	1afb      	subs	r3, r7, r3
    dff4:	fab3 f383 	clz	r3, r3
    dff8:	095b      	lsrs	r3, r3, #5
	ticker->ext_data = start->ext_data;
    dffa:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
	ticker->lazy_periodic =
    dffe:	f64f 79fd 	movw	r9, #65533	; 0xfffd
	ticker->ticks_periodic = start->ticks_periodic;
    e002:	6060      	str	r0, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    e004:	6222      	str	r2, [r4, #32]
		ticker->must_expire =
    e006:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	ticker->lazy_periodic =
    e00a:	454f      	cmp	r7, r9
    e00c:	bf88      	it	hi
    e00e:	2700      	movhi	r7, #0
	ticker->timeout_func = start->fp_timeout_func;
    e010:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    e014:	6868      	ldr	r0, [r5, #4]
	ticker->ticks_slot = start->ticks_slot;
    e016:	61a2      	str	r2, [r4, #24]
	ticker->context = start->context;
    e018:	6a2a      	ldr	r2, [r5, #32]
	ticker->lazy_periodic =
    e01a:	83a7      	strh	r7, [r4, #28]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    e01c:	eba0 070e 	sub.w	r7, r0, lr
	ticker->context = start->context;
    e020:	e9c4 3203 	strd	r3, r2, [r4, #12]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    e024:	023a      	lsls	r2, r7, #8
	ticker->ticks_to_expire = start->ticks_first;
    e026:	68ab      	ldr	r3, [r5, #8]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    e028:	d40c      	bmi.n	e044 <ticker_job+0xd4c>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    e02a:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    e02e:	443b      	add	r3, r7
	if (ticks_to_expire > ticks_to_expire_minus) {
    e030:	b18b      	cbz	r3, e056 <ticker_job+0xd5e>
	ticker->ticks_to_expire = ticks_to_expire;
    e032:	60a3      	str	r3, [r4, #8]
	ticker->remainder_current = 0U;
    e034:	2300      	movs	r3, #0
    e036:	6263      	str	r3, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
    e038:	83e3      	strh	r3, [r4, #30]
	ticker->force = 1U;
    e03a:	f04f 0301 	mov.w	r3, #1
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    e03e:	6161      	str	r1, [r4, #20]
	ticker->force = 1U;
    e040:	70e3      	strb	r3, [r4, #3]
}
    e042:	e4b6      	b.n	d9b2 <ticker_job+0x6ba>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    e044:	ebae 0200 	sub.w	r2, lr, r0
    e048:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    e04c:	4293      	cmp	r3, r2
    e04e:	d90e      	bls.n	e06e <ticker_job+0xd76>
			ticks_to_expire -= delta_current_start;
    e050:	1a9b      	subs	r3, r3, r2
	if (ticks_to_expire > ticks_to_expire_minus) {
    e052:	2b00      	cmp	r3, #0
    e054:	d1ed      	bne.n	e032 <ticker_job+0xd3a>
		ticks_to_expire_minus -= ticks_to_expire;
    e056:	4619      	mov	r1, r3
		ticks_to_expire = 0U;
    e058:	2300      	movs	r3, #0
    e05a:	e7ea      	b.n	e032 <ticker_job+0xd3a>
	ticker->ext_data = start->ext_data;
    e05c:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
    e060:	6060      	str	r0, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    e062:	6222      	str	r2, [r4, #32]
	ticker->lazy_periodic =
    e064:	460f      	mov	r7, r1
    e066:	e7d3      	b.n	e010 <ticker_job+0xd18>
    e068:	9a03      	ldr	r2, [sp, #12]
    e06a:	4661      	mov	r1, ip
    e06c:	e4cc      	b.n	da08 <ticker_job+0x710>
			    (delta_current_start - ticks_to_expire);
    e06e:	1ad3      	subs	r3, r2, r3
		ticks_to_expire_minus -= ticks_to_expire;
    e070:	4619      	mov	r1, r3
		ticks_to_expire = 0U;
    e072:	2300      	movs	r3, #0
    e074:	e7dd      	b.n	e032 <ticker_job+0xd3a>
			    (delta_current_start - ticks_to_expire);
    e076:	1ad3      	subs	r3, r2, r3
		ticks_to_expire_minus -= ticks_to_expire;
    e078:	4619      	mov	r1, r3
		ticks_to_expire = 0U;
    e07a:	2300      	movs	r3, #0
    e07c:	e77b      	b.n	df76 <ticker_job+0xc7e>
		ticker = &node[_ticker_id_head];
    e07e:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
    e082:	011b      	lsls	r3, r3, #4
	_ticks_to_expire = *ticks_to_expire;
    e084:	f8dc e000 	ldr.w	lr, [ip]
		_ticker_id_head = ticker->next;
    e088:	5ccb      	ldrb	r3, [r1, r3]
	while ((_ticker_id_head != TICKER_NULL) &&
    e08a:	e726      	b.n	deda <ticker_job+0xbe2>
}
    e08c:	b00f      	add	sp, #60	; 0x3c
    e08e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e092:	4770      	bx	lr
					while (ticks_to_expire <
    e094:	4598      	cmp	r8, r3
    e096:	f67f ad78 	bls.w	db8a <ticker_job+0x892>
    e09a:	9f03      	ldr	r7, [sp, #12]
    e09c:	9508      	str	r5, [sp, #32]
    e09e:	f106 0c01 	add.w	ip, r6, #1
    e0a2:	910b      	str	r1, [sp, #44]	; 0x2c
    e0a4:	e005      	b.n	e0b2 <ticker_job+0xdba>
    e0a6:	4635      	mov	r5, r6
						ticks_to_expire +=
    e0a8:	442b      	add	r3, r5
						lazy++;
    e0aa:	3001      	adds	r0, #1
					while (ticks_to_expire <
    e0ac:	4598      	cmp	r8, r3
						lazy++;
    e0ae:	b280      	uxth	r0, r0
					while (ticks_to_expire <
    e0b0:	d911      	bls.n	e0d6 <ticker_job+0xdde>
	if ((ticker->remainder_current < BIT(31)) &&
    e0b2:	4d31      	ldr	r5, [pc, #196]	; (e178 <ticker_job+0xe80>)
    e0b4:	4931      	ldr	r1, [pc, #196]	; (e17c <ticker_job+0xe84>)
	ticker->remainder_current += ticker->remainder_periodic;
    e0b6:	443a      	add	r2, r7
	if ((ticker->remainder_current < BIT(31)) &&
    e0b8:	1955      	adds	r5, r2, r5
    e0ba:	428d      	cmp	r5, r1
    e0bc:	d8f3      	bhi.n	e0a6 <ticker_job+0xdae>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    e0be:	4665      	mov	r5, ip
    e0c0:	f1a2 72e8 	sub.w	r2, r2, #30408704	; 0x1d00000
						ticks_to_expire +=
    e0c4:	442b      	add	r3, r5
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    e0c6:	f5a2 32d4 	sub.w	r2, r2, #108544	; 0x1a800
						lazy++;
    e0ca:	3001      	adds	r0, #1
					while (ticks_to_expire <
    e0cc:	4598      	cmp	r8, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    e0ce:	f5a2 72a5 	sub.w	r2, r2, #330	; 0x14a
						lazy++;
    e0d2:	b280      	uxth	r0, r0
					while (ticks_to_expire <
    e0d4:	d8ed      	bhi.n	e0b2 <ticker_job+0xdba>
    e0d6:	9e05      	ldr	r6, [sp, #20]
    e0d8:	9d08      	ldr	r5, [sp, #32]
    e0da:	990b      	ldr	r1, [sp, #44]	; 0x2c
    e0dc:	6262      	str	r2, [r4, #36]	; 0x24
    e0de:	4406      	add	r6, r0
    e0e0:	b2b0      	uxth	r0, r6
    e0e2:	9005      	str	r0, [sp, #20]
    e0e4:	e551      	b.n	db8a <ticker_job+0x892>
		flag_elapsed = 0U;
    e0e6:	930d      	str	r3, [sp, #52]	; 0x34
		ticks_elapsed = 0U;
    e0e8:	9302      	str	r3, [sp, #8]
    e0ea:	f7ff b931 	b.w	d350 <ticker_job+0x58>
				node->ticks_to_expire -=
    e0ee:	1aeb      	subs	r3, r5, r3
		if (ticker_id_prev != TICKER_NULL) {
    e0f0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
				node->ticks_to_expire -=
    e0f4:	f8c8 3008 	str.w	r3, [r8, #8]
		if (ticker_id_prev != TICKER_NULL) {
    e0f8:	f43f ae6f 	beq.w	ddda <ticker_job+0xae2>
    e0fc:	fa0f f189 	sxth.w	r1, r9
    e100:	e661      	b.n	ddc6 <ticker_job+0xace>
			ticker->ticks_to_expire -= ticks_elapsed;
    e102:	eba3 030a 	sub.w	r3, r3, sl
    e106:	60a3      	str	r3, [r4, #8]
			break;
    e108:	f8db 3000 	ldr.w	r3, [fp]
    e10c:	9304      	str	r3, [sp, #16]
    e10e:	e427      	b.n	d960 <ticker_job+0x668>
	if (!pending) {
    e110:	9a09      	ldr	r2, [sp, #36]	; 0x24
    e112:	2a00      	cmp	r2, #0
    e114:	f47f ad87 	bne.w	dc26 <ticker_job+0x92e>
	count_user = instance->count_user;
    e118:	f89b 2009 	ldrb.w	r2, [fp, #9]
	users = &instance->users[0];
    e11c:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
    e120:	1e54      	subs	r4, r2, #1
    e122:	b2e4      	uxtb	r4, r4
    e124:	2a00      	cmp	r2, #0
    e126:	f47f ae6a 	bne.w	ddfe <ticker_job+0xb06>
    e12a:	e57c      	b.n	dc26 <ticker_job+0x92e>
		if (cntr_stop() == 0) {
    e12c:	f00b f8c2 	bl	192b4 <cntr_stop>
    e130:	2800      	cmp	r0, #0
    e132:	f47f adcb 	bne.w	dccc <ticker_job+0x9d4>
			instance->ticks_slot_previous = 0U;
    e136:	f8cb 0018 	str.w	r0, [fp, #24]
			instance->ticks_current = cntr_cnt_get();
    e13a:	f00b f8e1 	bl	19300 <cntr_cnt_get>
    e13e:	f89b 301f 	ldrb.w	r3, [fp, #31]
    e142:	f8cb 0014 	str.w	r0, [fp, #20]
    e146:	e5c3      	b.n	dcd0 <ticker_job+0x9d8>
	count_user = instance->count_user;
    e148:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
    e14c:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
    e150:	1e5c      	subs	r4, r3, #1
    e152:	b2e4      	uxtb	r4, r4
    e154:	2b00      	cmp	r3, #0
    e156:	f47f ae53 	bne.w	de00 <ticker_job+0xb08>
    e15a:	e5b4      	b.n	dcc6 <ticker_job+0x9ce>
		ticks_current = cntr_cnt_get();
    e15c:	f00b f8d0 	bl	19300 <cntr_cnt_get>
    e160:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    e162:	f00b f897 	bl	19294 <cntr_start>
    e166:	f89b c01d 	ldrb.w	ip, [fp, #29]
    e16a:	2800      	cmp	r0, #0
    e16c:	f47f ad63 	bne.w	dc36 <ticker_job+0x93e>
			instance->ticks_current = ticks_current;
    e170:	f8cb 4014 	str.w	r4, [fp, #20]
    e174:	e55f      	b.n	dc36 <ticker_job+0x93e>
    e176:	bf00      	nop
    e178:	ff172b5a 	.word	0xff172b5a
    e17c:	7f172b59 	.word	0x7f172b59

0000e180 <ticker_init>:
{
    e180:	b4f0      	push	{r4, r5, r6, r7}
    e182:	9f04      	ldr	r7, [sp, #16]
    e184:	f89d 4014 	ldrb.w	r4, [sp, #20]
    e188:	9e06      	ldr	r6, [sp, #24]
	if (instance_index >= TICKER_INSTANCE_MAX) {
    e18a:	2800      	cmp	r0, #0
    e18c:	d13e      	bne.n	e20c <ticker_init+0x8c>
	instance->count_node = count_node;
    e18e:	f8df c084 	ldr.w	ip, [pc, #132]	; e214 <ticker_init+0x94>
	while (count_node--) {
    e192:	1e4d      	subs	r5, r1, #1
	instance->count_node = count_node;
    e194:	f88c 1008 	strb.w	r1, [ip, #8]
	instance->nodes = node;
    e198:	f8cc 2000 	str.w	r2, [ip]
	while (count_node--) {
    e19c:	b2ed      	uxtb	r5, r5
    e19e:	b149      	cbz	r1, e1b4 <ticker_init+0x34>
    e1a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    e1a4:	eb02 1105 	add.w	r1, r2, r5, lsl #4
    e1a8:	4291      	cmp	r1, r2
		instance->nodes[count_node].priority = 0;
    e1aa:	f881 002d 	strb.w	r0, [r1, #45]	; 0x2d
	while (count_node--) {
    e1ae:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
    e1b2:	d1f9      	bne.n	e1a8 <ticker_init+0x28>
	while (count_user--) {
    e1b4:	1e5a      	subs	r2, r3, #1
	instance->count_user = count_user;
    e1b6:	f88c 3009 	strb.w	r3, [ip, #9]
	instance->users = user;
    e1ba:	f8cc 7004 	str.w	r7, [ip, #4]
	while (count_user--) {
    e1be:	b2d2      	uxtb	r2, r2
    e1c0:	b17b      	cbz	r3, e1e2 <ticker_init+0x62>
    e1c2:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
		users[count_user].user_op = user_op_;
    e1c6:	6056      	str	r6, [r2, #4]
		user_op_ += users[count_user].count_user_op;
    e1c8:	4611      	mov	r1, r2
    e1ca:	f812 3908 	ldrb.w	r3, [r2], #-8
    e1ce:	eb03 0043 	add.w	r0, r3, r3, lsl #1
		count_op -= users[count_user].count_user_op;
    e1d2:	1ae4      	subs	r4, r4, r3
	while (count_user--) {
    e1d4:	428f      	cmp	r7, r1
		user_op_ += users[count_user].count_user_op;
    e1d6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
		count_op -= users[count_user].count_user_op;
    e1da:	b2e4      	uxtb	r4, r4
		user_op_ += users[count_user].count_user_op;
    e1dc:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	while (count_user--) {
    e1e0:	d1f1      	bne.n	e1c6 <ticker_init+0x46>
	if (count_op) {
    e1e2:	b99c      	cbnz	r4, e20c <ticker_init+0x8c>
	instance->caller_id_get_cb = caller_id_get_cb;
    e1e4:	9a07      	ldr	r2, [sp, #28]
    e1e6:	f8cc 2020 	str.w	r2, [ip, #32]
	instance->sched_cb = sched_cb;
    e1ea:	9a08      	ldr	r2, [sp, #32]
    e1ec:	f8cc 2024 	str.w	r2, [ip, #36]	; 0x24
	instance->ticker_id_slot_previous = TICKER_NULL;
    e1f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->trigger_set_cb = trigger_set_cb;
    e1f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
	instance->ticks_elapsed_first = 0U;
    e1f6:	f8ac 400a 	strh.w	r4, [ip, #10]
	return TICKER_STATUS_SUCCESS;
    e1fa:	4620      	mov	r0, r4
	instance->ticks_slot_previous = 0U;
    e1fc:	e9cc 4405 	strd	r4, r4, [ip, #20]
}
    e200:	bcf0      	pop	{r4, r5, r6, r7}
	instance->trigger_set_cb = trigger_set_cb;
    e202:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28
	instance->ticker_id_slot_previous = TICKER_NULL;
    e206:	f8ac 301c 	strh.w	r3, [ip, #28]
}
    e20a:	4770      	bx	lr
		return TICKER_STATUS_FAILURE;
    e20c:	2001      	movs	r0, #1
}
    e20e:	bcf0      	pop	{r4, r5, r6, r7}
    e210:	4770      	bx	lr
    e212:	bf00      	nop
    e214:	2000184c 	.word	0x2000184c

0000e218 <ticker_trigger>:
	if (instance->sched_cb) {
    e218:	4b0a      	ldr	r3, [pc, #40]	; (e244 <ticker_trigger+0x2c>)
    e21a:	222c      	movs	r2, #44	; 0x2c
    e21c:	fb02 3200 	mla	r2, r2, r0, r3
{
    e220:	b410      	push	{r4}
	if (instance->sched_cb) {
    e222:	6a54      	ldr	r4, [r2, #36]	; 0x24
    e224:	b15c      	cbz	r4, e23e <ticker_trigger+0x26>
	instance = &_instance[instance_index];
    e226:	eb00 0280 	add.w	r2, r0, r0, lsl #2
    e22a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    e22e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    e232:	46a4      	mov	ip, r4
    e234:	2201      	movs	r2, #1
}
    e236:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    e238:	2103      	movs	r1, #3
    e23a:	2002      	movs	r0, #2
    e23c:	4760      	bx	ip
}
    e23e:	bc10      	pop	{r4}
    e240:	4770      	bx	lr
    e242:	bf00      	nop
    e244:	2000184c 	.word	0x2000184c

0000e248 <ticker_start_ext>:
{
    e248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    e24c:	f8df 80a0 	ldr.w	r8, [pc, #160]	; e2f0 <ticker_start_ext+0xa8>
{
    e250:	f8bd e02c 	ldrh.w	lr, [sp, #44]	; 0x2c
	user = &instance->users[user_id];
    e254:	272c      	movs	r7, #44	; 0x2c
    e256:	fb07 8700 	mla	r7, r7, r0, r8
{
    e25a:	4604      	mov	r4, r0
	user = &instance->users[user_id];
    e25c:	687d      	ldr	r5, [r7, #4]
    e25e:	eb05 0cc1 	add.w	ip, r5, r1, lsl #3
	if (last >= user->count_user_op) {
    e262:	f815 9031 	ldrb.w	r9, [r5, r1, lsl #3]
	last = user->last + 1;
    e266:	f89c 6003 	ldrb.w	r6, [ip, #3]
	struct ticker_instance *instance = &_instance[instance_index];
    e26a:	eb04 0584 	add.w	r5, r4, r4, lsl #2
    e26e:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	last = user->last + 1;
    e272:	1c75      	adds	r5, r6, #1
{
    e274:	4608      	mov	r0, r1
	last = user->last + 1;
    e276:	b2ed      	uxtb	r5, r5
	if (last == user->first) {
    e278:	f89c 1001 	ldrb.w	r1, [ip, #1]
		last = 0U;
    e27c:	45a9      	cmp	r9, r5
    e27e:	bf98      	it	ls
    e280:	2500      	movls	r5, #0
	if (last == user->first) {
    e282:	42a9      	cmp	r1, r5
	struct ticker_instance *instance = &_instance[instance_index];
    e284:	eb08 0884 	add.w	r8, r8, r4, lsl #2
	if (last == user->first) {
    e288:	d02f      	beq.n	e2ea <ticker_start_ext+0xa2>
	user_op = &user->user_op[user->last];
    e28a:	f8dc 1004 	ldr.w	r1, [ip, #4]
    e28e:	eb06 0446 	add.w	r4, r6, r6, lsl #1
    e292:	eb06 0684 	add.w	r6, r6, r4, lsl #2
    e296:	eb01 0486 	add.w	r4, r1, r6, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_START;
    e29a:	f04f 0904 	mov.w	r9, #4
    e29e:	f801 9026 	strb.w	r9, [r1, r6, lsl #2]
	user_op->params.start.ticks_at_start = ticks_anchor;
    e2a2:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    e2a4:	9b08      	ldr	r3, [sp, #32]
    e2a6:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    e2a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e2aa:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    e2ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e2ae:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    e2b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e2b2:	61a3      	str	r3, [r4, #24]
	user_op->params.start.ext_data = ext_data;
    e2b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e2b6:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    e2b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e2ba:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    e2bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e2be:	6223      	str	r3, [r4, #32]
	user_op->fp_op_func = fp_op_func;
    e2c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    e2c2:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
    e2c4:	2102      	movs	r1, #2
	user_op->op_context = op_context;
    e2c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
    e2c8:	7062      	strb	r2, [r4, #1]
	user_op->params.start.lazy = lazy;
    e2ca:	f8a4 e014 	strh.w	lr, [r4, #20]
	user_op->op_context = op_context;
    e2ce:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
    e2d0:	62a1      	str	r1, [r4, #40]	; 0x28
	user->last = last;
    e2d2:	f88c 5003 	strb.w	r5, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    e2d6:	e9d7 3508 	ldrd	r3, r5, [r7, #32]
    e2da:	4798      	blx	r3
    e2dc:	4643      	mov	r3, r8
    e2de:	4649      	mov	r1, r9
    e2e0:	2200      	movs	r2, #0
    e2e2:	47a8      	blx	r5
	return user_op->status;
    e2e4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
    e2e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
    e2ea:	2001      	movs	r0, #1
}
    e2ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e2f0:	2000184c 	.word	0x2000184c

0000e2f4 <ticker_start>:
{
    e2f4:	b530      	push	{r4, r5, lr}
    e2f6:	b08b      	sub	sp, #44	; 0x2c
    e2f8:	e9dd 540e 	ldrd	r5, r4, [sp, #56]	; 0x38
	return ticker_start_ext(instance_index, user_id, ticker_id,
    e2fc:	9500      	str	r5, [sp, #0]
{
    e2fe:	9d10      	ldr	r5, [sp, #64]	; 0x40
	return ticker_start_ext(instance_index, user_id, ticker_id,
    e300:	9401      	str	r4, [sp, #4]
    e302:	9502      	str	r5, [sp, #8]
{
    e304:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
    e308:	9d12      	ldr	r5, [sp, #72]	; 0x48
	return ticker_start_ext(instance_index, user_id, ticker_id,
    e30a:	9403      	str	r4, [sp, #12]
    e30c:	9504      	str	r5, [sp, #16]
{
    e30e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    e310:	9d14      	ldr	r5, [sp, #80]	; 0x50
	return ticker_start_ext(instance_index, user_id, ticker_id,
    e312:	9405      	str	r4, [sp, #20]
    e314:	9506      	str	r5, [sp, #24]
{
    e316:	9c15      	ldr	r4, [sp, #84]	; 0x54
    e318:	9d16      	ldr	r5, [sp, #88]	; 0x58
	return ticker_start_ext(instance_index, user_id, ticker_id,
    e31a:	9407      	str	r4, [sp, #28]
    e31c:	2400      	movs	r4, #0
    e31e:	e9cd 5408 	strd	r5, r4, [sp, #32]
    e322:	f7ff ff91 	bl	e248 <ticker_start_ext>
}
    e326:	b00b      	add	sp, #44	; 0x2c
    e328:	bd30      	pop	{r4, r5, pc}
    e32a:	bf00      	nop

0000e32c <ticker_update_ext>:
	struct ticker_instance *instance = &_instance[instance_index];
    e32c:	f8df c0a0 	ldr.w	ip, [pc, #160]	; e3d0 <ticker_update_ext+0xa4>
{
    e330:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	user = &instance->users[user_id];
    e334:	272c      	movs	r7, #44	; 0x2c
    e336:	fb07 c700 	mla	r7, r7, r0, ip
{
    e33a:	4604      	mov	r4, r0
	user = &instance->users[user_id];
    e33c:	687d      	ldr	r5, [r7, #4]
{
    e33e:	f8bd 8034 	ldrh.w	r8, [sp, #52]	; 0x34
    e342:	f89d e038 	ldrb.w	lr, [sp, #56]	; 0x38
    e346:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
    e34a:	4608      	mov	r0, r1
	user = &instance->users[user_id];
    e34c:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
	if (last >= user->count_user_op) {
    e350:	f815 a030 	ldrb.w	sl, [r5, r0, lsl #3]
	last = user->last + 1;
    e354:	78ce      	ldrb	r6, [r1, #3]
	if (last == user->first) {
    e356:	f891 9001 	ldrb.w	r9, [r1, #1]
	struct ticker_instance *instance = &_instance[instance_index];
    e35a:	eb04 0584 	add.w	r5, r4, r4, lsl #2
    e35e:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	last = user->last + 1;
    e362:	1c75      	adds	r5, r6, #1
    e364:	b2ed      	uxtb	r5, r5
		last = 0U;
    e366:	45aa      	cmp	sl, r5
    e368:	bf98      	it	ls
    e36a:	2500      	movls	r5, #0
	if (last == user->first) {
    e36c:	45a9      	cmp	r9, r5
	struct ticker_instance *instance = &_instance[instance_index];
    e36e:	eb0c 0a84 	add.w	sl, ip, r4, lsl #2
	if (last == user->first) {
    e372:	d02a      	beq.n	e3ca <ticker_update_ext+0x9e>
	user_op = &user->user_op[user->last];
    e374:	f8d1 c004 	ldr.w	ip, [r1, #4]
    e378:	eb06 0446 	add.w	r4, r6, r6, lsl #1
    e37c:	eb06 0684 	add.w	r6, r6, r4, lsl #2
    e380:	eb0c 0486 	add.w	r4, ip, r6, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    e384:	f04f 0905 	mov.w	r9, #5
    e388:	f80c 9026 	strb.w	r9, [ip, r6, lsl #2]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    e38c:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    e38e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e390:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    e392:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e394:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    e396:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e398:	6123      	str	r3, [r4, #16]
	user_op->fp_op_func = fp_op_func;
    e39a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    e39c:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
    e39e:	2602      	movs	r6, #2
	user_op->op_context = op_context;
    e3a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
    e3a2:	7062      	strb	r2, [r4, #1]
	user_op->params.update.force = force;
    e3a4:	f884 e016 	strb.w	lr, [r4, #22]
	user_op->op_context = op_context;
    e3a8:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->params.update.lazy = lazy;
    e3aa:	f8a4 8014 	strh.w	r8, [r4, #20]
	user_op->params.update.must_expire = must_expire;
    e3ae:	f884 b017 	strb.w	fp, [r4, #23]
	user_op->status = TICKER_STATUS_BUSY;
    e3b2:	62a6      	str	r6, [r4, #40]	; 0x28
	user->last = last;
    e3b4:	70cd      	strb	r5, [r1, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    e3b6:	e9d7 3508 	ldrd	r3, r5, [r7, #32]
    e3ba:	4798      	blx	r3
    e3bc:	4653      	mov	r3, sl
    e3be:	2200      	movs	r2, #0
    e3c0:	2104      	movs	r1, #4
    e3c2:	47a8      	blx	r5
	return user_op->status;
    e3c4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
    e3c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return TICKER_STATUS_FAILURE;
    e3ca:	2001      	movs	r0, #1
}
    e3cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e3d0:	2000184c 	.word	0x2000184c

0000e3d4 <ticker_update>:
{
    e3d4:	b530      	push	{r4, r5, lr}
    e3d6:	b089      	sub	sp, #36	; 0x24
    e3d8:	e9dd 540c 	ldrd	r5, r4, [sp, #48]	; 0x30
	return ticker_update_ext(instance_index, user_id, ticker_id,
    e3dc:	9500      	str	r5, [sp, #0]
{
    e3de:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	return ticker_update_ext(instance_index, user_id, ticker_id,
    e3e0:	9401      	str	r4, [sp, #4]
    e3e2:	9502      	str	r5, [sp, #8]
{
    e3e4:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
    e3e8:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
	return ticker_update_ext(instance_index, user_id, ticker_id,
    e3ec:	9403      	str	r4, [sp, #12]
    e3ee:	9504      	str	r5, [sp, #16]
{
    e3f0:	9c11      	ldr	r4, [sp, #68]	; 0x44
    e3f2:	9d12      	ldr	r5, [sp, #72]	; 0x48
	return ticker_update_ext(instance_index, user_id, ticker_id,
    e3f4:	9405      	str	r4, [sp, #20]
    e3f6:	2400      	movs	r4, #0
    e3f8:	e9cd 5406 	strd	r5, r4, [sp, #24]
    e3fc:	f7ff ff96 	bl	e32c <ticker_update_ext>
}
    e400:	b009      	add	sp, #36	; 0x24
    e402:	bd30      	pop	{r4, r5, pc}

0000e404 <ticker_stop>:
	struct ticker_instance *instance = &_instance[instance_index];
    e404:	f8df c084 	ldr.w	ip, [pc, #132]	; e48c <ticker_stop+0x88>
{
    e408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	user = &instance->users[user_id];
    e40c:	272c      	movs	r7, #44	; 0x2c
    e40e:	fb07 c700 	mla	r7, r7, r0, ip
{
    e412:	4604      	mov	r4, r0
	user = &instance->users[user_id];
    e414:	687d      	ldr	r5, [r7, #4]
{
    e416:	4608      	mov	r0, r1
	user = &instance->users[user_id];
    e418:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
	if (last >= user->count_user_op) {
    e41c:	f815 8030 	ldrb.w	r8, [r5, r0, lsl #3]
	last = user->last + 1;
    e420:	78ce      	ldrb	r6, [r1, #3]
	if (last == user->first) {
    e422:	f891 e001 	ldrb.w	lr, [r1, #1]
	struct ticker_instance *instance = &_instance[instance_index];
    e426:	eb04 0584 	add.w	r5, r4, r4, lsl #2
    e42a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	last = user->last + 1;
    e42e:	1c75      	adds	r5, r6, #1
    e430:	b2ed      	uxtb	r5, r5
		last = 0U;
    e432:	45a8      	cmp	r8, r5
    e434:	bf98      	it	ls
    e436:	2500      	movls	r5, #0
	if (last == user->first) {
    e438:	45ae      	cmp	lr, r5
	struct ticker_instance *instance = &_instance[instance_index];
    e43a:	eb0c 0484 	add.w	r4, ip, r4, lsl #2
	if (last == user->first) {
    e43e:	d021      	beq.n	e484 <ticker_stop+0x80>
	user_op = &user->user_op[user->last];
    e440:	f8d1 c004 	ldr.w	ip, [r1, #4]
    e444:	eb06 0e46 	add.w	lr, r6, r6, lsl #1
    e448:	eb06 068e 	add.w	r6, r6, lr, lsl #2
    e44c:	eb0c 0886 	add.w	r8, ip, r6, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    e450:	f04f 0e06 	mov.w	lr, #6
    e454:	f80c e026 	strb.w	lr, [ip, r6, lsl #2]
	user_op->fp_op_func = fp_op_func;
    e458:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
    e45c:	2602      	movs	r6, #2
	user_op->op_context = op_context;
    e45e:	9b06      	ldr	r3, [sp, #24]
	user_op->id = ticker_id;
    e460:	f888 2001 	strb.w	r2, [r8, #1]
	user_op->op_context = op_context;
    e464:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
    e468:	f8c8 6028 	str.w	r6, [r8, #40]	; 0x28
	user->last = last;
    e46c:	70cd      	strb	r5, [r1, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    e46e:	e9d7 3508 	ldrd	r3, r5, [r7, #32]
    e472:	4798      	blx	r3
    e474:	4623      	mov	r3, r4
    e476:	2200      	movs	r2, #0
    e478:	2104      	movs	r1, #4
    e47a:	47a8      	blx	r5
	return user_op->status;
    e47c:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
}
    e480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
    e484:	2001      	movs	r0, #1
}
    e486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e48a:	bf00      	nop
    e48c:	2000184c 	.word	0x2000184c

0000e490 <ticker_ticks_now_get>:
	return cntr_cnt_get();
    e490:	f00a bf36 	b.w	19300 <cntr_cnt_get>

0000e494 <ll_addr_get>:
static uint8_t pub_addr[BDADDR_SIZE];
static uint8_t rnd_addr[BDADDR_SIZE];

uint8_t *ll_addr_get(uint8_t addr_type, uint8_t *bdaddr)
{
	if (addr_type > 1) {
    e494:	2801      	cmp	r0, #1
    e496:	d810      	bhi.n	e4ba <ll_addr_get+0x26>
		return NULL;
	}

	if (addr_type) {
    e498:	b938      	cbnz	r0, e4aa <ll_addr_get+0x16>
		}

		return rnd_addr;
	}

	if (bdaddr) {
    e49a:	b181      	cbz	r1, e4be <ll_addr_get+0x2a>
    e49c:	4b0a      	ldr	r3, [pc, #40]	; (e4c8 <ll_addr_get+0x34>)
    e49e:	6818      	ldr	r0, [r3, #0]
    e4a0:	6008      	str	r0, [r1, #0]
    e4a2:	889a      	ldrh	r2, [r3, #4]
    e4a4:	808a      	strh	r2, [r1, #4]
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
	}

	return pub_addr;
    e4a6:	4618      	mov	r0, r3
    e4a8:	4770      	bx	lr
		if (bdaddr) {
    e4aa:	b151      	cbz	r1, e4c2 <ll_addr_get+0x2e>
    e4ac:	4b07      	ldr	r3, [pc, #28]	; (e4cc <ll_addr_get+0x38>)
    e4ae:	6818      	ldr	r0, [r3, #0]
    e4b0:	6008      	str	r0, [r1, #0]
    e4b2:	889a      	ldrh	r2, [r3, #4]
    e4b4:	808a      	strh	r2, [r1, #4]
	return pub_addr;
    e4b6:	4618      	mov	r0, r3
    e4b8:	4770      	bx	lr
		return NULL;
    e4ba:	2000      	movs	r0, #0
    e4bc:	4770      	bx	lr
	return pub_addr;
    e4be:	4802      	ldr	r0, [pc, #8]	; (e4c8 <ll_addr_get+0x34>)
}
    e4c0:	4770      	bx	lr
		return rnd_addr;
    e4c2:	4802      	ldr	r0, [pc, #8]	; (e4cc <ll_addr_get+0x38>)
    e4c4:	4770      	bx	lr
    e4c6:	bf00      	nop
    e4c8:	20001878 	.word	0x20001878
    e4cc:	20001880 	.word	0x20001880

0000e4d0 <ll_addr_set>:

uint8_t ll_addr_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
    e4d0:	b538      	push	{r3, r4, r5, lr}
    e4d2:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER)) {
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		if (ull_adv_is_enabled(0) && !ll_adv_cmds_is_ext()) {
#else /* !CONFIG_BT_CTLR_ADV_EXT */
		if (ull_adv_is_enabled(0)) {
    e4d4:	2000      	movs	r0, #0
{
    e4d6:	460d      	mov	r5, r1
		if (ull_adv_is_enabled(0)) {
    e4d8:	f003 f936 	bl	11748 <ull_adv_is_enabled>
    e4dc:	b978      	cbnz	r0, e4fe <ll_addr_set+0x2e>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr_type) {
    e4de:	b13c      	cbz	r4, e4f0 <ll_addr_set+0x20>
    e4e0:	4a08      	ldr	r2, [pc, #32]	; (e504 <ll_addr_set+0x34>)
    e4e2:	4603      	mov	r3, r0
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    e4e4:	6828      	ldr	r0, [r5, #0]
    e4e6:	6010      	str	r0, [r2, #0]
    e4e8:	88a9      	ldrh	r1, [r5, #4]
    e4ea:	8091      	strh	r1, [r2, #4]
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
    e4ec:	4618      	mov	r0, r3
}
    e4ee:	bd38      	pop	{r3, r4, r5, pc}
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    e4f0:	4b05      	ldr	r3, [pc, #20]	; (e508 <ll_addr_set+0x38>)
    e4f2:	6828      	ldr	r0, [r5, #0]
    e4f4:	6018      	str	r0, [r3, #0]
    e4f6:	88aa      	ldrh	r2, [r5, #4]
    e4f8:	809a      	strh	r2, [r3, #4]
	return 0;
    e4fa:	4620      	mov	r0, r4
}
    e4fc:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
    e4fe:	200c      	movs	r0, #12
}
    e500:	bd38      	pop	{r3, r4, r5, pc}
    e502:	bf00      	nop
    e504:	20001880 	.word	0x20001880
    e508:	20001878 	.word	0x20001878

0000e50c <ll_tx_pwr_lvl_get>:
#include "ll.h"

uint8_t ll_tx_pwr_lvl_get(uint8_t handle_type,
		       uint16_t handle, uint8_t type, int8_t *tx_pwr_lvl)
{
	switch (handle_type) {
    e50c:	2802      	cmp	r0, #2
    e50e:	d001      	beq.n	e514 <ll_tx_pwr_lvl_get+0x8>
			}
			break;
		}
#endif /* CONFIG_BT_CONN */
		default: {
			return BT_HCI_ERR_UNKNOWN_CMD;
    e510:	2001      	movs	r0, #1
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
    e512:	4770      	bx	lr
{
    e514:	b538      	push	{r3, r4, r5, lr}
    e516:	4604      	mov	r4, r0
			conn = ll_connected_get(handle);
    e518:	4608      	mov	r0, r1
    e51a:	461d      	mov	r5, r3
    e51c:	f003 ff32 	bl	12384 <ll_connected_get>
			if (!conn) {
    e520:	b110      	cbz	r0, e528 <ll_tx_pwr_lvl_get+0x1c>
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
    e522:	2000      	movs	r0, #0
    e524:	7028      	strb	r0, [r5, #0]
}
    e526:	bd38      	pop	{r3, r4, r5, pc}
				return BT_HCI_ERR_UNKNOWN_CONN_ID;
    e528:	4620      	mov	r0, r4
}
    e52a:	bd38      	pop	{r3, r4, r5, pc}

0000e52c <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
    e52c:	2300      	movs	r3, #0
    e52e:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
    e530:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
    e532:	4770      	bx	lr

0000e534 <hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int hci_driver_init(const struct device *unused)
{
    e534:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    e536:	4802      	ldr	r0, [pc, #8]	; (e540 <hci_driver_init+0xc>)
    e538:	f7f9 f87e 	bl	7638 <bt_hci_driver_register>

	return 0;
}
    e53c:	2000      	movs	r0, #0
    e53e:	bd08      	pop	{r3, pc}
    e540:	00024424 	.word	0x00024424

0000e544 <recv_thread>:
{
    e544:	b5f0      	push	{r4, r5, r6, r7, lr}
	return z_impl_k_queue_get(queue, timeout);
    e546:	4d38      	ldr	r5, [pc, #224]	; (e628 <recv_thread+0xe4>)
		LL_ASSERT(0);
    e548:	4f38      	ldr	r7, [pc, #224]	; (e62c <recv_thread+0xe8>)
    e54a:	4e39      	ldr	r6, [pc, #228]	; (e630 <recv_thread+0xec>)
{
    e54c:	b083      	sub	sp, #12
    e54e:	e016      	b.n	e57e <recv_thread+0x3a>
	switch (class) {
    e550:	2b00      	cmp	r3, #0
    e552:	d13d      	bne.n	e5d0 <recv_thread+0x8c>
		LL_ASSERT(0);
    e554:	4837      	ldr	r0, [pc, #220]	; (e634 <recv_thread+0xf0>)
    e556:	f240 1347 	movw	r3, #327	; 0x147
    e55a:	463a      	mov	r2, r7
    e55c:	4631      	mov	r1, r6
    e55e:	f00f ff11 	bl	1e384 <printk>
    e562:	4040      	eors	r0, r0
    e564:	f380 8811 	msr	BASEPRI, r0
    e568:	f04f 0003 	mov.w	r0, #3
    e56c:	df02      	svc	2
	node_rx->hdr.next = NULL;
    e56e:	9b01      	ldr	r3, [sp, #4]
    e570:	2200      	movs	r2, #0
    e572:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    e574:	a801      	add	r0, sp, #4
    e576:	f002 f939 	bl	107ec <ll_rx_mem_release>
	z_impl_k_yield();
    e57a:	f00e ffe1 	bl	1d540 <z_impl_k_yield>
	return z_impl_k_queue_get(queue, timeout);
    e57e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e582:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e586:	4628      	mov	r0, r5
    e588:	f00e fd12 	bl	1cfb0 <z_impl_k_queue_get>
		if (node_rx && !buf) {
    e58c:	2800      	cmp	r0, #0
    e58e:	d0f4      	beq.n	e57a <recv_thread+0x36>
	uint8_t class = node_rx->hdr.user_meta;
    e590:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
    e592:	9001      	str	r0, [sp, #4]
	switch (class) {
    e594:	2b04      	cmp	r3, #4
    e596:	d9db      	bls.n	e550 <recv_thread+0xc>
    e598:	2b05      	cmp	r3, #5
    e59a:	d1db      	bne.n	e554 <recv_thread+0x10>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    e59c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e5a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e5a4:	2003      	movs	r0, #3
    e5a6:	f7f7 fe83 	bl	62b0 <bt_buf_get_rx>
    e5aa:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    e5ac:	4601      	mov	r1, r0
    e5ae:	9801      	ldr	r0, [sp, #4]
    e5b0:	f000 ff12 	bl	f3d8 <hci_acl_encode>
	node_rx->hdr.next = NULL;
    e5b4:	9b01      	ldr	r3, [sp, #4]
    e5b6:	2200      	movs	r2, #0
    e5b8:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    e5ba:	a801      	add	r0, sp, #4
    e5bc:	f002 f916 	bl	107ec <ll_rx_mem_release>
		if (buf) {
    e5c0:	2c00      	cmp	r4, #0
    e5c2:	d0da      	beq.n	e57a <recv_thread+0x36>
			if (buf->len) {
    e5c4:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
    e5c6:	4620      	mov	r0, r4
			if (buf->len) {
    e5c8:	b1db      	cbz	r3, e602 <recv_thread+0xbe>
				bt_recv(buf);
    e5ca:	f7f8 ff73 	bl	74b4 <bt_recv>
    e5ce:	e7d4      	b.n	e57a <recv_thread+0x36>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    e5d0:	2b02      	cmp	r3, #2
    e5d2:	d019      	beq.n	e608 <recv_thread+0xc4>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    e5d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e5d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e5dc:	2001      	movs	r0, #1
    e5de:	f7f7 fe67 	bl	62b0 <bt_buf_get_rx>
    e5e2:	4604      	mov	r4, r0
		if (buf) {
    e5e4:	9801      	ldr	r0, [sp, #4]
    e5e6:	b1cc      	cbz	r4, e61c <recv_thread+0xd8>
			hci_evt_encode(node_rx, buf);
    e5e8:	4621      	mov	r1, r4
    e5ea:	f000 ff2f 	bl	f44c <hci_evt_encode>
	node_rx->hdr.next = NULL;
    e5ee:	9b01      	ldr	r3, [sp, #4]
    e5f0:	2200      	movs	r2, #0
    e5f2:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    e5f4:	a801      	add	r0, sp, #4
    e5f6:	f002 f8f9 	bl	107ec <ll_rx_mem_release>
			if (buf->len) {
    e5fa:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
    e5fc:	4620      	mov	r0, r4
			if (buf->len) {
    e5fe:	2b00      	cmp	r3, #0
    e600:	d1e3      	bne.n	e5ca <recv_thread+0x86>
				net_buf_unref(buf);
    e602:	f00b fdb3 	bl	1a16c <net_buf_unref>
    e606:	e7b8      	b.n	e57a <recv_thread+0x36>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
    e608:	2200      	movs	r2, #0
    e60a:	2300      	movs	r3, #0
    e60c:	2101      	movs	r1, #1
    e60e:	2000      	movs	r0, #0
    e610:	f7f7 fe84 	bl	631c <bt_buf_get_evt>
    e614:	4604      	mov	r4, r0
		if (buf) {
    e616:	9801      	ldr	r0, [sp, #4]
    e618:	2c00      	cmp	r4, #0
    e61a:	d1e5      	bne.n	e5e8 <recv_thread+0xa4>
	node_rx->hdr.next = NULL;
    e61c:	6004      	str	r4, [r0, #0]
	ll_rx_mem_release((void **)&node_rx);
    e61e:	a801      	add	r0, sp, #4
    e620:	f002 f8e4 	bl	107ec <ll_rx_mem_release>
		if (buf) {
    e624:	e7a9      	b.n	e57a <recv_thread+0x36>
    e626:	bf00      	nop
    e628:	200008c8 	.word	0x200008c8
    e62c:	00024364 	.word	0x00024364
    e630:	000243a4 	.word	0x000243a4
    e634:	00024334 	.word	0x00024334

0000e638 <prio_recv_thread>:
{
    e638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
    e63c:	f8df 80b4 	ldr.w	r8, [pc, #180]	; e6f4 <prio_recv_thread+0xbc>
				k_fifo_put(&recv_fifo, node_rx);
    e640:	4f2b      	ldr	r7, [pc, #172]	; (e6f0 <prio_recv_thread+0xb8>)
{
    e642:	b082      	sub	sp, #8
    e644:	e00c      	b.n	e660 <prio_recv_thread+0x28>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    e646:	f7f7 fe69 	bl	631c <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    e64a:	4622      	mov	r2, r4
    e64c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    e650:	4604      	mov	r4, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    e652:	f001 f97b 	bl	f94c <hci_num_cmplt_encode>
			bt_recv_prio(buf);
    e656:	4620      	mov	r0, r4
    e658:	f7f8 ffd0 	bl	75fc <bt_recv_prio>
	z_impl_k_yield();
    e65c:	f00e ff70 	bl	1d540 <z_impl_k_yield>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    e660:	f10d 0102 	add.w	r1, sp, #2
    e664:	a801      	add	r0, sp, #4
    e666:	f001 ff07 	bl	10478 <ll_rx_get>
    e66a:	4604      	mov	r4, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    e66c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e670:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e674:	2100      	movs	r1, #0
    e676:	2013      	movs	r0, #19
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    e678:	2c00      	cmp	r4, #0
    e67a:	d1e4      	bne.n	e646 <prio_recv_thread+0xe>
		if (node_rx) {
    e67c:	9b01      	ldr	r3, [sp, #4]
    e67e:	b193      	cbz	r3, e6a6 <prio_recv_thread+0x6e>
			ll_rx_dequeue();
    e680:	f001 ffe4 	bl	1064c <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    e684:	9e01      	ldr	r6, [sp, #4]
    e686:	4630      	mov	r0, r6
    e688:	f001 f978 	bl	f97c <hci_get_class>
			buf = process_prio_evt(node_rx, &evt_flags);
    e68c:	9d01      	ldr	r5, [sp, #4]
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    e68e:	7170      	strb	r0, [r6, #5]
	if (node_rx->hdr.user_meta == HCI_CLASS_EVT_CONNECTION) {
    e690:	796b      	ldrb	r3, [r5, #5]
    e692:	2b03      	cmp	r3, #3
    e694:	d102      	bne.n	e69c <prio_recv_thread+0x64>
		if (node_rx->hdr.type == NODE_RX_TYPE_TERMINATE) {
    e696:	792b      	ldrb	r3, [r5, #4]
    e698:	2b15      	cmp	r3, #21
    e69a:	d00c      	beq.n	e6b6 <prio_recv_thread+0x7e>
				k_fifo_put(&recv_fifo, node_rx);
    e69c:	4629      	mov	r1, r5
    e69e:	4638      	mov	r0, r7
    e6a0:	f014 fbac 	bl	22dfc <k_queue_append>
			continue;
    e6a4:	e7dc      	b.n	e660 <prio_recv_thread+0x28>
	return z_impl_k_sem_take(sem, timeout);
    e6a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e6aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e6ae:	4640      	mov	r0, r8
    e6b0:	f00f f85a 	bl	1d768 <z_impl_k_sem_take>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    e6b4:	e7d4      	b.n	e660 <prio_recv_thread+0x28>
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
    e6b6:	4621      	mov	r1, r4
    e6b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e6bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e6c0:	2005      	movs	r0, #5
		handle = node_rx->hdr.handle;
    e6c2:	88ee      	ldrh	r6, [r5, #6]
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
    e6c4:	f7f7 fe2a 	bl	631c <bt_buf_get_evt>
    e6c8:	4604      	mov	r4, r0
			hci_disconn_complete_encode(pdu_data, handle, buf);
    e6ca:	4622      	mov	r2, r4
    e6cc:	f105 001c 	add.w	r0, r5, #28
    e6d0:	4631      	mov	r1, r6
    e6d2:	f000 fe69 	bl	f3a8 <hci_disconn_complete_encode>
			hci_disconn_complete_process(handle);
    e6d6:	4630      	mov	r0, r6
    e6d8:	f000 fe76 	bl	f3c8 <hci_disconn_complete_process>
				bt_recv_prio(buf);
    e6dc:	4620      	mov	r0, r4
			if (buf) {
    e6de:	b124      	cbz	r4, e6ea <prio_recv_thread+0xb2>
				bt_recv_prio(buf);
    e6e0:	f7f8 ff8c 	bl	75fc <bt_recv_prio>
					net_buf_unref(buf);
    e6e4:	4620      	mov	r0, r4
    e6e6:	f00b fd41 	bl	1a16c <net_buf_unref>
    e6ea:	9d01      	ldr	r5, [sp, #4]
    e6ec:	e7d6      	b.n	e69c <prio_recv_thread+0x64>
    e6ee:	bf00      	nop
    e6f0:	200008c8 	.word	0x200008c8
    e6f4:	20000898 	.word	0x20000898

0000e6f8 <hci_driver_send>:
{
    e6f8:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
    e6fa:	8983      	ldrh	r3, [r0, #12]
{
    e6fc:	b083      	sub	sp, #12
	if (!buf->len) {
    e6fe:	2b00      	cmp	r3, #0
    e700:	d03a      	beq.n	e778 <hci_driver_send+0x80>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    e702:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
    e704:	4604      	mov	r4, r0
    e706:	b31b      	cbz	r3, e750 <hci_driver_send+0x58>
    e708:	2b02      	cmp	r3, #2
    e70a:	d00f      	beq.n	e72c <hci_driver_send+0x34>
    e70c:	4921      	ldr	r1, [pc, #132]	; (e794 <hci_driver_send+0x9c>)
    e70e:	4a22      	ldr	r2, [pc, #136]	; (e798 <hci_driver_send+0xa0>)
		BT_ERR("Unknown HCI type %u", type);
    e710:	4822      	ldr	r0, [pc, #136]	; (e79c <hci_driver_send+0xa4>)
    e712:	1a52      	subs	r2, r2, r1
    e714:	08d2      	lsrs	r2, r2, #3
    e716:	0192      	lsls	r2, r2, #6
    e718:	4619      	mov	r1, r3
    e71a:	f042 0201 	orr.w	r2, r2, #1
    e71e:	f010 fa18 	bl	1eb52 <log_1>
		return -EINVAL;
    e722:	f06f 0515 	mvn.w	r5, #21
}
    e726:	4628      	mov	r0, r5
    e728:	b003      	add	sp, #12
    e72a:	bd30      	pop	{r4, r5, pc}
	err = hci_acl_handle(buf, &evt);
    e72c:	a901      	add	r1, sp, #4
    e72e:	f000 fd9b 	bl	f268 <hci_acl_handle>
	if (evt) {
    e732:	9b01      	ldr	r3, [sp, #4]
	err = hci_acl_handle(buf, &evt);
    e734:	4605      	mov	r5, r0
	if (evt) {
    e736:	b113      	cbz	r3, e73e <hci_driver_send+0x46>
		bt_recv_prio(evt);
    e738:	4618      	mov	r0, r3
    e73a:	f7f8 ff5f 	bl	75fc <bt_recv_prio>
	if (!err) {
    e73e:	2d00      	cmp	r5, #0
    e740:	d1f1      	bne.n	e726 <hci_driver_send+0x2e>
		net_buf_unref(buf);
    e742:	4620      	mov	r0, r4
    e744:	f00b fd12 	bl	1a16c <net_buf_unref>
    e748:	2500      	movs	r5, #0
}
    e74a:	4628      	mov	r0, r5
    e74c:	b003      	add	sp, #12
    e74e:	bd30      	pop	{r4, r5, pc}
	evt = hci_cmd_handle(buf, (void **) &node_rx);
    e750:	a901      	add	r1, sp, #4
	struct node_rx_pdu *node_rx = NULL;
    e752:	9301      	str	r3, [sp, #4]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
    e754:	f000 f9b8 	bl	eac8 <hci_cmd_handle>
	if (evt) {
    e758:	2800      	cmp	r0, #0
    e75a:	d0f2      	beq.n	e742 <hci_driver_send+0x4a>
		bt_recv_prio(evt);
    e75c:	f7f8 ff4e 	bl	75fc <bt_recv_prio>
		if (node_rx) {
    e760:	9d01      	ldr	r5, [sp, #4]
    e762:	2d00      	cmp	r5, #0
    e764:	d0ed      	beq.n	e742 <hci_driver_send+0x4a>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    e766:	4628      	mov	r0, r5
    e768:	f001 f908 	bl	f97c <hci_get_class>
    e76c:	7168      	strb	r0, [r5, #5]
			k_fifo_put(&recv_fifo, node_rx);
    e76e:	9901      	ldr	r1, [sp, #4]
    e770:	480b      	ldr	r0, [pc, #44]	; (e7a0 <hci_driver_send+0xa8>)
    e772:	f014 fb43 	bl	22dfc <k_queue_append>
	if (!err) {
    e776:	e7e4      	b.n	e742 <hci_driver_send+0x4a>
    e778:	4b06      	ldr	r3, [pc, #24]	; (e794 <hci_driver_send+0x9c>)
    e77a:	4907      	ldr	r1, [pc, #28]	; (e798 <hci_driver_send+0xa0>)
		BT_ERR("Empty HCI packet");
    e77c:	4809      	ldr	r0, [pc, #36]	; (e7a4 <hci_driver_send+0xac>)
    e77e:	1ac9      	subs	r1, r1, r3
    e780:	08c9      	lsrs	r1, r1, #3
    e782:	0189      	lsls	r1, r1, #6
    e784:	f041 0101 	orr.w	r1, r1, #1
    e788:	f010 f9d6 	bl	1eb38 <log_0>
		return -EINVAL;
    e78c:	f06f 0515 	mvn.w	r5, #21
    e790:	e7c9      	b.n	e726 <hci_driver_send+0x2e>
    e792:	bf00      	nop
    e794:	0002393c 	.word	0x0002393c
    e798:	0002398c 	.word	0x0002398c
    e79c:	000243bc 	.word	0x000243bc
    e7a0:	200008c8 	.word	0x200008c8
    e7a4:	000243a8 	.word	0x000243a8

0000e7a8 <hci_driver_open>:
{
    e7a8:	b5d0      	push	{r4, r6, r7, lr}
	err = ll_init(&sem_prio_recv);
    e7aa:	4822      	ldr	r0, [pc, #136]	; (e834 <hci_driver_open+0x8c>)
{
    e7ac:	b088      	sub	sp, #32
	err = ll_init(&sem_prio_recv);
    e7ae:	f001 fb59 	bl	fe64 <ll_init>
	if (err) {
    e7b2:	4604      	mov	r4, r0
    e7b4:	2800      	cmp	r0, #0
    e7b6:	d12e      	bne.n	e816 <hci_driver_open+0x6e>
	hci_init(NULL);
    e7b8:	f001 f8f6 	bl	f9a8 <hci_init>
	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
    e7bc:	2600      	movs	r6, #0
    e7be:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    e7c0:	f06f 0309 	mvn.w	r3, #9
    e7c4:	9303      	str	r3, [sp, #12]
    e7c6:	e9cd 6706 	strd	r6, r7, [sp, #24]
    e7ca:	e9cd 4401 	strd	r4, r4, [sp, #4]
    e7ce:	4b1a      	ldr	r3, [pc, #104]	; (e838 <hci_driver_open+0x90>)
    e7d0:	491a      	ldr	r1, [pc, #104]	; (e83c <hci_driver_open+0x94>)
    e7d2:	9404      	str	r4, [sp, #16]
    e7d4:	9400      	str	r4, [sp, #0]
    e7d6:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    e7da:	4819      	ldr	r0, [pc, #100]	; (e840 <hci_driver_open+0x98>)
    e7dc:	f00f f838 	bl	1d850 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    e7e0:	4918      	ldr	r1, [pc, #96]	; (e844 <hci_driver_open+0x9c>)
    e7e2:	4817      	ldr	r0, [pc, #92]	; (e840 <hci_driver_open+0x98>)
    e7e4:	f014 fc8d 	bl	23102 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    e7e8:	f06f 0307 	mvn.w	r3, #7
    e7ec:	9303      	str	r3, [sp, #12]
    e7ee:	e9cd 6706 	strd	r6, r7, [sp, #24]
    e7f2:	e9cd 4401 	strd	r4, r4, [sp, #4]
    e7f6:	4b14      	ldr	r3, [pc, #80]	; (e848 <hci_driver_open+0xa0>)
    e7f8:	4914      	ldr	r1, [pc, #80]	; (e84c <hci_driver_open+0xa4>)
    e7fa:	9404      	str	r4, [sp, #16]
    e7fc:	9400      	str	r4, [sp, #0]
    e7fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
    e802:	4813      	ldr	r0, [pc, #76]	; (e850 <hci_driver_open+0xa8>)
    e804:	f00f f824 	bl	1d850 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    e808:	4912      	ldr	r1, [pc, #72]	; (e854 <hci_driver_open+0xac>)
    e80a:	4811      	ldr	r0, [pc, #68]	; (e850 <hci_driver_open+0xa8>)
    e80c:	f014 fc79 	bl	23102 <z_impl_k_thread_name_set>
}
    e810:	4620      	mov	r0, r4
    e812:	b008      	add	sp, #32
    e814:	bdd0      	pop	{r4, r6, r7, pc}
    e816:	4b10      	ldr	r3, [pc, #64]	; (e858 <hci_driver_open+0xb0>)
    e818:	4a10      	ldr	r2, [pc, #64]	; (e85c <hci_driver_open+0xb4>)
		BT_ERR("LL initialization failed: %d", err);
    e81a:	4811      	ldr	r0, [pc, #68]	; (e860 <hci_driver_open+0xb8>)
    e81c:	1ad2      	subs	r2, r2, r3
    e81e:	08d2      	lsrs	r2, r2, #3
    e820:	0192      	lsls	r2, r2, #6
    e822:	f042 0201 	orr.w	r2, r2, #1
    e826:	4621      	mov	r1, r4
    e828:	f010 f993 	bl	1eb52 <log_1>
}
    e82c:	4620      	mov	r0, r4
    e82e:	b008      	add	sp, #32
    e830:	bdd0      	pop	{r4, r6, r7, pc}
    e832:	bf00      	nop
    e834:	20000898 	.word	0x20000898
    e838:	0000e639 	.word	0x0000e639
    e83c:	20003db8 	.word	0x20003db8
    e840:	20000f70 	.word	0x20000f70
    e844:	000243f0 	.word	0x000243f0
    e848:	0000e545 	.word	0x0000e545
    e84c:	20003f78 	.word	0x20003f78
    e850:	20000ff0 	.word	0x20000ff0
    e854:	000243fc 	.word	0x000243fc
    e858:	0002393c 	.word	0x0002393c
    e85c:	0002398c 	.word	0x0002398c
    e860:	000243d0 	.word	0x000243d0

0000e864 <cmd_complete_status>:
{
	return bt_hci_cmd_status_create(_opcode, status);
}

static struct net_buf *cmd_complete_status(uint8_t status)
{
    e864:	b538      	push	{r3, r4, r5, lr}
	struct net_buf *buf;
	struct bt_hci_evt_cc_status *ccst;

	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    e866:	4b07      	ldr	r3, [pc, #28]	; (e884 <cmd_complete_status+0x20>)
{
    e868:	4605      	mov	r5, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    e86a:	2101      	movs	r1, #1
    e86c:	8818      	ldrh	r0, [r3, #0]
    e86e:	f012 f8da 	bl	20a26 <bt_hci_cmd_complete_create>
    e872:	2101      	movs	r1, #1
    e874:	4604      	mov	r4, r0
    e876:	3008      	adds	r0, #8
    e878:	f013 fedb 	bl	22632 <net_buf_simple_add>
    e87c:	4603      	mov	r3, r0
	ccst = net_buf_add(buf, sizeof(*ccst));
	ccst->status = status;

	return buf;
}
    e87e:	4620      	mov	r0, r4
	ccst->status = status;
    e880:	701d      	strb	r5, [r3, #0]
}
    e882:	bd38      	pop	{r3, r4, r5, pc}
    e884:	20002c36 	.word	0x20002c36

0000e888 <meta_evt>:

static void *meta_evt(struct net_buf *buf, uint8_t subevt, uint8_t melen)
{
    e888:	b570      	push	{r4, r5, r6, lr}
    e88a:	f100 0408 	add.w	r4, r0, #8
    e88e:	460e      	mov	r6, r1
    e890:	4620      	mov	r0, r4
    e892:	2102      	movs	r1, #2
    e894:	4615      	mov	r5, r2
    e896:	f013 fecc 	bl	22632 <net_buf_simple_add>
	struct bt_hci_evt_le_meta_event *me;

	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    e89a:	1c6b      	adds	r3, r5, #1
	hdr->evt = evt;
    e89c:	223e      	movs	r2, #62	; 0x3e
    e89e:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
    e8a0:	7043      	strb	r3, [r0, #1]
    e8a2:	2101      	movs	r1, #1
    e8a4:	4620      	mov	r0, r4
    e8a6:	f013 fec4 	bl	22632 <net_buf_simple_add>
	me = net_buf_add(buf, sizeof(*me));
	me->subevent = subevt;
    e8aa:	7006      	strb	r6, [r0, #0]
    e8ac:	4629      	mov	r1, r5
    e8ae:	4620      	mov	r0, r4

	return net_buf_add(buf, melen);
}
    e8b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e8b4:	f013 bebd 	b.w	22632 <net_buf_simple_add>

0000e8b8 <encrypt_change.part.0>:
	sep->handle = sys_cpu_to_le16(handle);
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
}

static void encrypt_change(uint8_t err, uint16_t handle,
    e8b8:	b570      	push	{r4, r5, r6, lr}
    e8ba:	f102 0508 	add.w	r5, r2, #8
    e8be:	4604      	mov	r4, r0
    e8c0:	460e      	mov	r6, r1
    e8c2:	4628      	mov	r0, r5
    e8c4:	2102      	movs	r1, #2
    e8c6:	f013 feb4 	bl	22632 <net_buf_simple_add>
    e8ca:	4603      	mov	r3, r0
	hdr->evt = evt;
    e8cc:	2208      	movs	r2, #8
	hdr->len = len;
    e8ce:	2104      	movs	r1, #4
	hdr->evt = evt;
    e8d0:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
    e8d2:	7059      	strb	r1, [r3, #1]
    e8d4:	4628      	mov	r0, r5
    e8d6:	f013 feac 	bl	22632 <net_buf_simple_add>
	hci_evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
	ep = net_buf_add(buf, sizeof(*ep));

	ep->status = err;
	ep->handle = sys_cpu_to_le16(handle);
	ep->encrypt = !err ? 1 : 0;
    e8da:	fab4 f384 	clz	r3, r4
    e8de:	095b      	lsrs	r3, r3, #5
	ep->status = err;
    e8e0:	7004      	strb	r4, [r0, #0]
	ep->encrypt = !err ? 1 : 0;
    e8e2:	70c3      	strb	r3, [r0, #3]
	ep->handle = sys_cpu_to_le16(handle);
    e8e4:	f8a0 6001 	strh.w	r6, [r0, #1]
}
    e8e8:	bd70      	pop	{r4, r5, r6, pc}
    e8ea:	bf00      	nop

0000e8ec <le_remote_feat_complete>:
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(uint8_t status, struct pdu_data *pdu_data,
				    uint16_t handle, struct net_buf *buf)
{
    e8ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e8f0:	4c17      	ldr	r4, [pc, #92]	; (e950 <le_remote_feat_complete+0x64>)
    e8f2:	6866      	ldr	r6, [r4, #4]
    e8f4:	f04f 0900 	mov.w	r9, #0
    e8f8:	464c      	mov	r4, r9
    e8fa:	f006 5500 	and.w	r5, r6, #536870912	; 0x20000000
{
    e8fe:	4690      	mov	r8, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e900:	ea54 0205 	orrs.w	r2, r4, r5
    e904:	d009      	beq.n	e91a <le_remote_feat_complete+0x2e>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    e906:	4a13      	ldr	r2, [pc, #76]	; (e954 <le_remote_feat_complete+0x68>)
    e908:	6812      	ldr	r2, [r2, #0]
    e90a:	4607      	mov	r7, r0
    e90c:	460e      	mov	r6, r1
    e90e:	f002 0008 	and.w	r0, r2, #8
    e912:	4649      	mov	r1, r9
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e914:	ea50 0201 	orrs.w	r2, r0, r1
    e918:	d101      	bne.n	e91e <le_remote_feat_complete+0x32>
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    e91a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	sep = meta_evt(buf, BT_HCI_EVT_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    e91e:	4618      	mov	r0, r3
    e920:	220b      	movs	r2, #11
    e922:	2104      	movs	r1, #4
    e924:	f7ff ffb0 	bl	e888 <meta_evt>
	sep->status = status;
    e928:	7007      	strb	r7, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    e92a:	f8a0 8001 	strh.w	r8, [r0, #1]
	if (!status) {
    e92e:	b947      	cbnz	r7, e942 <le_remote_feat_complete+0x56>
    e930:	f856 3f04 	ldr.w	r3, [r6, #4]!
    e934:	6872      	ldr	r2, [r6, #4]
    e936:	f8c0 2007 	str.w	r2, [r0, #7]
    e93a:	f8c0 3003 	str.w	r3, [r0, #3]
}
    e93e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
__ssp_bos_icheck3(memset, void *, int)
    e942:	f8c0 9003 	str.w	r9, [r0, #3]
    e946:	f8c0 9007 	str.w	r9, [r0, #7]
    e94a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e94e:	bf00      	nop
    e950:	20000128 	.word	0x20000128
    e954:	20000130 	.word	0x20000130

0000e958 <hci_disconn_complete_encode.part.0>:
void hci_disconn_complete_encode(struct pdu_data *pdu_data, uint16_t handle,
    e958:	b570      	push	{r4, r5, r6, lr}
    e95a:	f102 0408 	add.w	r4, r2, #8
    e95e:	4605      	mov	r5, r0
    e960:	460e      	mov	r6, r1
    e962:	4620      	mov	r0, r4
    e964:	2102      	movs	r1, #2
    e966:	f013 fe64 	bl	22632 <net_buf_simple_add>
    e96a:	4603      	mov	r3, r0
	hdr->evt = evt;
    e96c:	2205      	movs	r2, #5
	hdr->len = len;
    e96e:	2104      	movs	r1, #4
	hdr->evt = evt;
    e970:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
    e972:	7059      	strb	r1, [r3, #1]
    e974:	4620      	mov	r0, r4
    e976:	f013 fe5c 	bl	22632 <net_buf_simple_add>
	ep->status = 0x00;
    e97a:	2300      	movs	r3, #0
	ep->handle = sys_cpu_to_le16(handle);
    e97c:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->status = 0x00;
    e980:	7003      	strb	r3, [r0, #0]
	ep->reason = *((uint8_t *)pdu_data);
    e982:	782b      	ldrb	r3, [r5, #0]
    e984:	70c3      	strb	r3, [r0, #3]
}
    e986:	bd70      	pop	{r4, r5, r6, pc}

0000e988 <hci_cmd_complete>:
{
    e988:	b538      	push	{r3, r4, r5, lr}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    e98a:	4b06      	ldr	r3, [pc, #24]	; (e9a4 <hci_cmd_complete+0x1c>)
{
    e98c:	4605      	mov	r5, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    e98e:	8818      	ldrh	r0, [r3, #0]
{
    e990:	460c      	mov	r4, r1
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    e992:	f012 f848 	bl	20a26 <bt_hci_cmd_complete_create>
    e996:	4621      	mov	r1, r4
    e998:	6028      	str	r0, [r5, #0]
}
    e99a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    e99e:	3008      	adds	r0, #8
    e9a0:	f013 be47 	b.w	22632 <net_buf_simple_add>
    e9a4:	20002c36 	.word	0x20002c36

0000e9a8 <hci_vendor_cmd_handle_common>:
{
    e9a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    e9aa:	1e43      	subs	r3, r0, #1
    e9ac:	b087      	sub	sp, #28
    e9ae:	4614      	mov	r4, r2
    e9b0:	2b09      	cmp	r3, #9
    e9b2:	d806      	bhi.n	e9c2 <hci_vendor_cmd_handle_common+0x1a>
    e9b4:	e8df f003 	tbb	[pc, r3]
    e9b8:	05342109 	.word	0x05342109
    e9bc:	4e054305 	.word	0x4e054305
    e9c0:	7869      	.short	0x7869
	return 0;
    e9c2:	f06f 0015 	mvn.w	r0, #21
}
    e9c6:	b007      	add	sp, #28
    e9c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
    e9ca:	4620      	mov	r0, r4
    e9cc:	210d      	movs	r1, #13
    e9ce:	f7ff ffdb 	bl	e988 <hci_cmd_complete>
    e9d2:	4603      	mov	r3, r0
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    e9d4:	2202      	movs	r2, #2
	rp->status = 0x00;
    e9d6:	2000      	movs	r0, #0
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
    e9d8:	2405      	movs	r4, #5
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
    e9da:	2163      	movs	r1, #99	; 0x63
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
    e9dc:	71dc      	strb	r4, [r3, #7]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
    e9de:	7259      	strb	r1, [r3, #9]
	rp->status = 0x00;
    e9e0:	7018      	strb	r0, [r3, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    e9e2:	7098      	strb	r0, [r3, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
    e9e4:	7118      	strb	r0, [r3, #4]
	rp->fw_variant = 0U;
    e9e6:	7158      	strb	r0, [r3, #5]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
    e9e8:	7218      	strb	r0, [r3, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
    e9ea:	7298      	strb	r0, [r3, #10]
    e9ec:	72d8      	strb	r0, [r3, #11]
    e9ee:	7318      	strb	r0, [r3, #12]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    e9f0:	705a      	strb	r2, [r3, #1]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
    e9f2:	70da      	strb	r2, [r3, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    e9f4:	719a      	strb	r2, [r3, #6]
}
    e9f6:	b007      	add	sp, #28
    e9f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
    e9fa:	4620      	mov	r0, r4
    e9fc:	2141      	movs	r1, #65	; 0x41
    e9fe:	f7ff ffc3 	bl	e988 <hci_cmd_complete>
	rp->status = 0x00;
    ea02:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ea04:	4605      	mov	r5, r0
    ea06:	4621      	mov	r1, r4
	rp->status = 0x00;
    ea08:	f800 4b01 	strb.w	r4, [r0], #1
    ea0c:	2240      	movs	r2, #64	; 0x40
    ea0e:	f014 fe36 	bl	2367e <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    ea12:	22a7      	movs	r2, #167	; 0xa7
	rp->commands[1] |= BIT(0) | BIT(1);
    ea14:	2303      	movs	r3, #3
	return 0;
    ea16:	4620      	mov	r0, r4
	rp->commands[0] |= BIT(5) | BIT(7);
    ea18:	706a      	strb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    ea1a:	70ab      	strb	r3, [r5, #2]
}
    ea1c:	b007      	add	sp, #28
    ea1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ea20:	4620      	mov	r0, r4
    ea22:	2109      	movs	r1, #9
    ea24:	f7ff ffb0 	bl	e988 <hci_cmd_complete>
	rp->status = 0x00;
    ea28:	4601      	mov	r1, r0
    ea2a:	2300      	movs	r3, #0
    ea2c:	f801 3b01 	strb.w	r3, [r1], #1
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ea30:	4602      	mov	r2, r0
	return 0;
    ea32:	4618      	mov	r0, r3
    ea34:	f8c2 3001 	str.w	r3, [r2, #1]
    ea38:	604b      	str	r3, [r1, #4]
}
    ea3a:	b007      	add	sp, #28
    ea3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    ea3e:	6889      	ldr	r1, [r1, #8]
    ea40:	2000      	movs	r0, #0
    ea42:	f7ff fd45 	bl	e4d0 <ll_addr_set>
	*evt = cmd_complete_status(0x00);
    ea46:	2000      	movs	r0, #0
    ea48:	f7ff ff0c 	bl	e864 <cmd_complete_status>
    ea4c:	6020      	str	r0, [r4, #0]
    ea4e:	2000      	movs	r0, #0
}
    ea50:	b007      	add	sp, #28
    ea52:	bdf0      	pop	{r4, r5, r6, r7, pc}
	const char build_info[] = HCI_VS_BUILD_INFO;
    ea54:	4e1b      	ldr	r6, [pc, #108]	; (eac4 <hci_vendor_cmd_handle_common+0x11c>)
    ea56:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    ea58:	ad01      	add	r5, sp, #4
    ea5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    ea5c:	6833      	ldr	r3, [r6, #0]
    ea5e:	802b      	strh	r3, [r5, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    ea60:	4620      	mov	r0, r4
    ea62:	2113      	movs	r1, #19
    ea64:	f7ff ff90 	bl	e988 <hci_cmd_complete>
    ea68:	ad01      	add	r5, sp, #4
    ea6a:	4607      	mov	r7, r0
    ea6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
	rp->status = 0x00;
    ea6e:	463e      	mov	r6, r7
    ea70:	2400      	movs	r4, #0
    ea72:	f806 4b01 	strb.w	r4, [r6], #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    ea76:	882d      	ldrh	r5, [r5, #0]
    ea78:	f8c7 0001 	str.w	r0, [r7, #1]
	return 0;
    ea7c:	4620      	mov	r0, r4
    ea7e:	6071      	str	r1, [r6, #4]
    ea80:	60b2      	str	r2, [r6, #8]
    ea82:	60f3      	str	r3, [r6, #12]
    ea84:	8235      	strh	r5, [r6, #16]
}
    ea86:	b007      	add	sp, #28
    ea88:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp) +
    ea8a:	4620      	mov	r0, r4
    ea8c:	2118      	movs	r1, #24
    ea8e:	f7ff ff7b 	bl	e988 <hci_cmd_complete>
	rp->status = 0x00;
    ea92:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp) +
    ea94:	4605      	mov	r5, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
    ea96:	2101      	movs	r1, #1
	rp->status = 0x00;
    ea98:	f800 4b02 	strb.w	r4, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
    ea9c:	f00b f9ec 	bl	19e78 <hci_vendor_read_static_addr>
    eaa0:	7068      	strb	r0, [r5, #1]
	return 0;
    eaa2:	4620      	mov	r0, r4
}
    eaa4:	b007      	add	sp, #28
    eaa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
    eaa8:	4620      	mov	r0, r4
    eaaa:	2121      	movs	r1, #33	; 0x21
    eaac:	f7ff ff6c 	bl	e988 <hci_cmd_complete>
	rp->status = 0x00;
    eab0:	4601      	mov	r1, r0
    eab2:	2400      	movs	r4, #0
    eab4:	f801 4b11 	strb.w	r4, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
    eab8:	3001      	adds	r0, #1
    eaba:	f00b fa53 	bl	19f64 <hci_vendor_read_key_hierarchy_roots>
	return 0;
    eabe:	4620      	mov	r0, r4
}
    eac0:	b007      	add	sp, #28
    eac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eac4:	00024438 	.word	0x00024438

0000eac8 <hci_cmd_handle>:
{
    eac8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
    eaca:	8983      	ldrh	r3, [r0, #12]
{
    eacc:	b08d      	sub	sp, #52	; 0x34
	struct net_buf *evt = NULL;
    eace:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
    ead0:	2b02      	cmp	r3, #2
	struct net_buf *evt = NULL;
    ead2:	9507      	str	r5, [sp, #28]
	if (cmd->len < sizeof(*chdr)) {
    ead4:	f240 80b6 	bls.w	ec44 <hci_cmd_handle+0x17c>
	return net_buf_simple_pull_mem(&buf->b, len);
    ead8:	4604      	mov	r4, r0
    eada:	2103      	movs	r1, #3
    eadc:	3008      	adds	r0, #8
    eade:	f013 fdd0 	bl	22682 <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
    eae2:	89a2      	ldrh	r2, [r4, #12]
    eae4:	7883      	ldrb	r3, [r0, #2]
    eae6:	429a      	cmp	r2, r3
    eae8:	f0c0 80d3 	bcc.w	ec92 <hci_cmd_handle+0x1ca>
	_opcode = sys_le16_to_cpu(chdr->opcode);
    eaec:	8801      	ldrh	r1, [r0, #0]
    eaee:	4da4      	ldr	r5, [pc, #656]	; (ed80 <hci_cmd_handle+0x2b8>)
	switch (BT_OGF(_opcode)) {
    eaf0:	f5b1 5f10 	cmp.w	r1, #9216	; 0x2400
	_opcode = sys_le16_to_cpu(chdr->opcode);
    eaf4:	b288      	uxth	r0, r1
    eaf6:	8029      	strh	r1, [r5, #0]
	ocf = BT_OCF(_opcode);
    eaf8:	f3c1 0309 	ubfx	r3, r1, #0, #10
	switch (BT_OGF(_opcode)) {
    eafc:	ea4f 2291 	mov.w	r2, r1, lsr #10
    eb00:	d267      	bcs.n	ebd2 <hci_cmd_handle+0x10a>
    eb02:	2a00      	cmp	r2, #0
    eb04:	d06f      	beq.n	ebe6 <hci_cmd_handle+0x11e>
    eb06:	3a01      	subs	r2, #1
    eb08:	2a07      	cmp	r2, #7
    eb0a:	d86c      	bhi.n	ebe6 <hci_cmd_handle+0x11e>
    eb0c:	e8df f002 	tbb	[pc, r2]
    eb10:	57706b8c 	.word	0x57706b8c
    eb14:	046b6b6b 	.word	0x046b6b6b
	switch (ocf) {
    eb18:	3b01      	subs	r3, #1
    eb1a:	2b4d      	cmp	r3, #77	; 0x4d
    eb1c:	d863      	bhi.n	ebe6 <hci_cmd_handle+0x11e>
    eb1e:	e8df f013 	tbh	[pc, r3, lsl #1]
    eb22:	01df      	.short	0x01df
    eb24:	01bf01d2 	.word	0x01bf01d2
    eb28:	01b80062 	.word	0x01b80062
    eb2c:	013b01a8 	.word	0x013b01a8
    eb30:	01a00126 	.word	0x01a00126
    eb34:	00620199 	.word	0x00620199
    eb38:	00620062 	.word	0x00620062
    eb3c:	018d0062 	.word	0x018d0062
    eb40:	01820188 	.word	0x01820188
    eb44:	0151017c 	.word	0x0151017c
    eb48:	016c0062 	.word	0x016c0062
    eb4c:	033b0163 	.word	0x033b0163
    eb50:	0062032f 	.word	0x0062032f
    eb54:	03210329 	.word	0x03210329
    eb58:	0062030b 	.word	0x0062030b
    eb5c:	00620062 	.word	0x00620062
    eb60:	02f002fc 	.word	0x02f002fc
    eb64:	02d202e8 	.word	0x02d202e8
    eb68:	006202c9 	.word	0x006202c9
    eb6c:	02c00062 	.word	0x02c00062
    eb70:	02b502ba 	.word	0x02b502ba
    eb74:	029402a9 	.word	0x029402a9
    eb78:	0278027f 	.word	0x0278027f
    eb7c:	024f0270 	.word	0x024f0270
    eb80:	02160227 	.word	0x02160227
    eb84:	006201e9 	.word	0x006201e9
    eb88:	00620062 	.word	0x00620062
    eb8c:	00620062 	.word	0x00620062
    eb90:	00620062 	.word	0x00620062
    eb94:	00620062 	.word	0x00620062
    eb98:	00620062 	.word	0x00620062
    eb9c:	00620062 	.word	0x00620062
    eba0:	00620062 	.word	0x00620062
    eba4:	00620062 	.word	0x00620062
    eba8:	00620062 	.word	0x00620062
    ebac:	00620062 	.word	0x00620062
    ebb0:	00620062 	.word	0x00620062
    ebb4:	01440062 	.word	0x01440062
    ebb8:	00620062 	.word	0x00620062
    ebbc:	011f      	.short	0x011f
	switch (ocf) {
    ebbe:	3b01      	subs	r3, #1
    ebc0:	2b08      	cmp	r3, #8
    ebc2:	d810      	bhi.n	ebe6 <hci_cmd_handle+0x11e>
    ebc4:	e8df f003 	tbb	[pc, r3]
    ebc8:	0f7585b5 	.word	0x0f7585b5
    ebcc:	0f0f0f0f 	.word	0x0f0f0f0f
    ebd0:	69          	.byte	0x69
    ebd1:	00          	.byte	0x00
	switch (BT_OGF(_opcode)) {
    ebd2:	2a3f      	cmp	r2, #63	; 0x3f
    ebd4:	d107      	bne.n	ebe6 <hci_cmd_handle+0x11e>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(uint16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
    ebd6:	4621      	mov	r1, r4
    ebd8:	4618      	mov	r0, r3
    ebda:	aa07      	add	r2, sp, #28
    ebdc:	f7ff fee4 	bl	e9a8 <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
    ebe0:	3016      	adds	r0, #22
    ebe2:	d154      	bne.n	ec8e <hci_cmd_handle+0x1c6>
    ebe4:	8828      	ldrh	r0, [r5, #0]
	return bt_hci_cmd_status_create(_opcode, status);
    ebe6:	2101      	movs	r1, #1
    ebe8:	f011 ff2f 	bl	20a4a <bt_hci_cmd_status_create>
}
    ebec:	b00d      	add	sp, #52	; 0x34
    ebee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
    ebf0:	2b63      	cmp	r3, #99	; 0x63
    ebf2:	f000 8325 	beq.w	f240 <hci_cmd_handle+0x778>
    ebf6:	d837      	bhi.n	ec68 <hci_cmd_handle+0x1a0>
    ebf8:	2b03      	cmp	r3, #3
    ebfa:	f000 8307 	beq.w	f20c <hci_cmd_handle+0x744>
    ebfe:	2b2d      	cmp	r3, #45	; 0x2d
    ec00:	d12d      	bne.n	ec5e <hci_cmd_handle+0x196>
		read_tx_power_level(cmd, evt);
    ec02:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ec04:	2104      	movs	r1, #4
    ec06:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    ec08:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
    ec0a:	789e      	ldrb	r6, [r3, #2]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ec0c:	f7ff febc 	bl	e988 <hci_cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    ec10:	b2a9      	uxth	r1, r5
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ec12:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
    ec14:	1cc3      	adds	r3, r0, #3
    ec16:	4632      	mov	r2, r6
    ec18:	2002      	movs	r0, #2
    ec1a:	f7ff fc77 	bl	e50c <ll_tx_pwr_lvl_get>
	rp->status = status;
    ec1e:	7020      	strb	r0, [r4, #0]
	rp->handle = sys_cpu_to_le16(handle);
    ec20:	9807      	ldr	r0, [sp, #28]
    ec22:	f8a4 5001 	strh.w	r5, [r4, #1]
}
    ec26:	e7e1      	b.n	ebec <hci_cmd_handle+0x124>
	switch (ocf) {
    ec28:	2b06      	cmp	r3, #6
    ec2a:	f000 82ce 	beq.w	f1ca <hci_cmd_handle+0x702>
    ec2e:	2b1d      	cmp	r3, #29
    ec30:	d1d9      	bne.n	ebe6 <hci_cmd_handle+0x11e>
	handle = sys_le16_to_cpu(cmd->handle);
    ec32:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
    ec34:	8818      	ldrh	r0, [r3, #0]
    ec36:	f003 fd2b 	bl	12690 <ll_version_ind_send>
    ec3a:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    ec3c:	8828      	ldrh	r0, [r5, #0]
    ec3e:	f011 ff04 	bl	20a4a <bt_hci_cmd_status_create>
}
    ec42:	e7d3      	b.n	ebec <hci_cmd_handle+0x124>
    ec44:	494f      	ldr	r1, [pc, #316]	; (ed84 <hci_cmd_handle+0x2bc>)
    ec46:	4b50      	ldr	r3, [pc, #320]	; (ed88 <hci_cmd_handle+0x2c0>)
		BT_ERR("No HCI Command header");
    ec48:	4850      	ldr	r0, [pc, #320]	; (ed8c <hci_cmd_handle+0x2c4>)
    ec4a:	1ac9      	subs	r1, r1, r3
    ec4c:	08c9      	lsrs	r1, r1, #3
		BT_ERR("Invalid HCI CMD packet length");
    ec4e:	0189      	lsls	r1, r1, #6
    ec50:	f041 0101 	orr.w	r1, r1, #1
    ec54:	f00f ff70 	bl	1eb38 <log_0>
		return NULL;
    ec58:	4628      	mov	r0, r5
}
    ec5a:	b00d      	add	sp, #52	; 0x34
    ec5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
    ec5e:	2b01      	cmp	r3, #1
    ec60:	d1c1      	bne.n	ebe6 <hci_cmd_handle+0x11e>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    ec62:	68a2      	ldr	r2, [r4, #8]
	event_mask = sys_get_le64(cmd->events);
    ec64:	4b4a      	ldr	r3, [pc, #296]	; (ed90 <hci_cmd_handle+0x2c8>)
    ec66:	e13d      	b.n	eee4 <hci_cmd_handle+0x41c>
	switch (ocf) {
    ec68:	2b7b      	cmp	r3, #123	; 0x7b
    ec6a:	f000 82bb 	beq.w	f1e4 <hci_cmd_handle+0x71c>
    ec6e:	2b7c      	cmp	r3, #124	; 0x7c
    ec70:	d1b9      	bne.n	ebe6 <hci_cmd_handle+0x11e>
		write_auth_payload_timeout(cmd, evt);
    ec72:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    ec74:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
    ec76:	8859      	ldrh	r1, [r3, #2]
    ec78:	4628      	mov	r0, r5
    ec7a:	f003 fe43 	bl	12904 <ll_apto_set>
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    ec7e:	4604      	mov	r4, r0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ec80:	2103      	movs	r1, #3
    ec82:	a807      	add	r0, sp, #28
    ec84:	f7ff fe80 	bl	e988 <hci_cmd_complete>
	rp->status = status;
    ec88:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    ec8a:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (err == -EINVAL) {
    ec8e:	9807      	ldr	r0, [sp, #28]
    ec90:	e7ac      	b.n	ebec <hci_cmd_handle+0x124>
    ec92:	493c      	ldr	r1, [pc, #240]	; (ed84 <hci_cmd_handle+0x2bc>)
    ec94:	4b3c      	ldr	r3, [pc, #240]	; (ed88 <hci_cmd_handle+0x2c0>)
		BT_ERR("Invalid HCI CMD packet length");
    ec96:	483f      	ldr	r0, [pc, #252]	; (ed94 <hci_cmd_handle+0x2cc>)
    ec98:	e7d7      	b.n	ec4a <hci_cmd_handle+0x182>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ec9a:	2107      	movs	r1, #7
    ec9c:	a807      	add	r0, sp, #28
    ec9e:	f7ff fe73 	bl	e988 <hci_cmd_complete>
	rp->status = 0x00;
    eca2:	4601      	mov	r1, r0
    eca4:	2000      	movs	r0, #0
    eca6:	f801 0b01 	strb.w	r0, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    ecaa:	f7ff fbf3 	bl	e494 <ll_addr_get>
	if (err == -EINVAL) {
    ecae:	9807      	ldr	r0, [sp, #28]
    ecb0:	e79c      	b.n	ebec <hci_cmd_handle+0x124>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ecb2:	2109      	movs	r1, #9
    ecb4:	a807      	add	r0, sp, #28
    ecb6:	f7ff fe67 	bl	e988 <hci_cmd_complete>
	rp->status = 0x00;
    ecba:	4602      	mov	r2, r0
    ecbc:	2100      	movs	r1, #0
    ecbe:	f802 1b01 	strb.w	r1, [r2], #1
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ecc2:	4603      	mov	r3, r0
__ssp_bos_icheck3(memset, void *, int)
    ecc4:	f8c0 1001 	str.w	r1, [r0, #1]
	rp->features[4] = (1 << 5) | (1 << 6);
    ecc8:	2460      	movs	r4, #96	; 0x60
    ecca:	6051      	str	r1, [r2, #4]
    eccc:	9807      	ldr	r0, [sp, #28]
    ecce:	715c      	strb	r4, [r3, #5]
	if (err == -EINVAL) {
    ecd0:	e78c      	b.n	ebec <hci_cmd_handle+0x124>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ecd2:	2141      	movs	r1, #65	; 0x41
    ecd4:	a807      	add	r0, sp, #28
    ecd6:	f7ff fe57 	bl	e988 <hci_cmd_complete>
	rp->status = 0x00;
    ecda:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ecdc:	4604      	mov	r4, r0
    ecde:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    ece0:	f800 1b01 	strb.w	r1, [r0], #1
    ece4:	f014 fccb 	bl	2367e <memset>
	rp->commands[0] |= BIT(5);
    ece8:	2320      	movs	r3, #32
    ecea:	7063      	strb	r3, [r4, #1]
	rp->commands[14] |= BIT(3) | BIT(5);
    ecec:	2228      	movs	r2, #40	; 0x28
	rp->commands[5] |= BIT(6) | BIT(7);
    ecee:	23c0      	movs	r3, #192	; 0xc0
	rp->commands[15] |= BIT(1);
    ecf0:	2502      	movs	r5, #2
	rp->commands[26] |= BIT(0) | BIT(1);
    ecf2:	20c3      	movs	r0, #195	; 0xc3
	rp->commands[28] |= BIT(1) | BIT(2);
    ecf4:	210e      	movs	r1, #14
	rp->commands[5] |= BIT(6) | BIT(7);
    ecf6:	71a3      	strb	r3, [r4, #6]
	rp->commands[14] |= BIT(3) | BIT(5);
    ecf8:	73e2      	strb	r2, [r4, #15]
	rp->commands[32] |= BIT(4) | BIT(5);
    ecfa:	2330      	movs	r3, #48	; 0x30
	rp->commands[33] |= BIT(6) | BIT(7);
    ecfc:	22f0      	movs	r2, #240	; 0xf0
	rp->commands[15] |= BIT(1);
    ecfe:	7425      	strb	r5, [r4, #16]
	rp->commands[26] |= BIT(0) | BIT(1);
    ed00:	76e0      	strb	r0, [r4, #27]
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    ed02:	25f9      	movs	r5, #249	; 0xf9
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    ed04:	207f      	movs	r0, #127	; 0x7f
	rp->commands[28] |= BIT(1) | BIT(2);
    ed06:	7761      	strb	r1, [r4, #29]
	rp->commands[32] |= BIT(4) | BIT(5);
    ed08:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	rp->commands[38] |= BIT(7);
    ed0c:	2180      	movs	r1, #128	; 0x80
	rp->commands[10] |= BIT(2);
    ed0e:	2304      	movs	r3, #4
	rp->commands[33] |= BIT(6) | BIT(7);
    ed10:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    ed14:	22f7      	movs	r2, #247	; 0xf7
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    ed16:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    ed1a:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
    ed1e:	9807      	ldr	r0, [sp, #28]
	rp->commands[38] |= BIT(7);
    ed20:	f884 1027 	strb.w	r1, [r4, #39]	; 0x27
	rp->commands[10] |= BIT(2);
    ed24:	72e3      	strb	r3, [r4, #11]
	rp->commands[22] |= BIT(2);
    ed26:	75e3      	strb	r3, [r4, #23]
	rp->commands[39] |= BIT(2);
    ed28:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    ed2c:	76a2      	strb	r2, [r4, #26]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    ed2e:	7722      	strb	r2, [r4, #28]
	if (err == -EINVAL) {
    ed30:	e75c      	b.n	ebec <hci_cmd_handle+0x124>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ed32:	2109      	movs	r1, #9
    ed34:	a807      	add	r0, sp, #28
    ed36:	f7ff fe27 	bl	e988 <hci_cmd_complete>
    ed3a:	4603      	mov	r3, r0
	rp->status = 0x00;
    ed3c:	2200      	movs	r2, #0
	rp->hci_version = LL_VERSION_NUMBER;
    ed3e:	200b      	movs	r0, #11
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
    ed40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
    ed44:	f06f 050e 	mvn.w	r5, #14
    ed48:	2405      	movs	r4, #5
	rp->status = 0x00;
    ed4a:	701a      	strb	r2, [r3, #0]
	rp->hci_version = LL_VERSION_NUMBER;
    ed4c:	7058      	strb	r0, [r3, #1]
	rp->lmp_version = LL_VERSION_NUMBER;
    ed4e:	7118      	strb	r0, [r3, #4]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
    ed50:	715d      	strb	r5, [r3, #5]
    ed52:	9807      	ldr	r0, [sp, #28]
    ed54:	719c      	strb	r4, [r3, #6]
	rp->hci_revision = sys_cpu_to_le16(0);
    ed56:	709a      	strb	r2, [r3, #2]
    ed58:	70da      	strb	r2, [r3, #3]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
    ed5a:	71d9      	strb	r1, [r3, #7]
    ed5c:	7219      	strb	r1, [r3, #8]
	if (err == -EINVAL) {
    ed5e:	e745      	b.n	ebec <hci_cmd_handle+0x124>
		le_set_privacy_mode(cmd, evt);
    ed60:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    ed62:	79c1      	ldrb	r1, [r0, #7]
    ed64:	f008 fa98 	bl	17298 <ll_priv_mode_set>
	*evt = cmd_complete_status(status);
    ed68:	f7ff fd7c 	bl	e864 <cmd_complete_status>
	if (err == -EINVAL) {
    ed6c:	e73e      	b.n	ebec <hci_cmd_handle+0x124>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
    ed6e:	68a1      	ldr	r1, [r4, #8]
    ed70:	f811 0b01 	ldrb.w	r0, [r1], #1
    ed74:	f002 fd4a 	bl	1180c <ll_adv_data_set>
	*evt = cmd_complete_status(status);
    ed78:	f7ff fd74 	bl	e864 <cmd_complete_status>
	if (err == -EINVAL) {
    ed7c:	e736      	b.n	ebec <hci_cmd_handle+0x124>
    ed7e:	bf00      	nop
    ed80:	20002c36 	.word	0x20002c36
    ed84:	00023984 	.word	0x00023984
    ed88:	0002393c 	.word	0x0002393c
    ed8c:	0002444c 	.word	0x0002444c
    ed90:	20000128 	.word	0x20000128
    ed94:	00024464 	.word	0x00024464
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ed98:	2102      	movs	r1, #2
    ed9a:	a807      	add	r0, sp, #28
    ed9c:	f7ff fdf4 	bl	e988 <hci_cmd_complete>
	rp->status = 0x00;
    eda0:	2300      	movs	r3, #0
    eda2:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
    eda4:	7043      	strb	r3, [r0, #1]
	if (err == -EINVAL) {
    eda6:	9807      	ldr	r0, [sp, #28]
    eda8:	e720      	b.n	ebec <hci_cmd_handle+0x124>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    edaa:	2103      	movs	r1, #3
    edac:	a807      	add	r0, sp, #28
    edae:	f7ff fdeb 	bl	e988 <hci_cmd_complete>
	rp->status = 0x00;
    edb2:	4601      	mov	r1, r0
    edb4:	2300      	movs	r3, #0
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    edb6:	3001      	adds	r0, #1
	rp->status = 0x00;
    edb8:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    edbc:	f7ff fbb6 	bl	e52c <ll_tx_pwr_get>
	if (err == -EINVAL) {
    edc0:	9807      	ldr	r0, [sp, #28]
    edc2:	e713      	b.n	ebec <hci_cmd_handle+0x124>
		le_conn_update(cmd, evt);
    edc4:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
    edc6:	8911      	ldrh	r1, [r2, #8]
    edc8:	8853      	ldrh	r3, [r2, #2]
    edca:	8810      	ldrh	r0, [r2, #0]
    edcc:	9102      	str	r1, [sp, #8]
    edce:	88d1      	ldrh	r1, [r2, #6]
    edd0:	9101      	str	r1, [sp, #4]
    edd2:	8892      	ldrh	r2, [r2, #4]
    edd4:	9200      	str	r2, [sp, #0]
    edd6:	2200      	movs	r2, #0
    edd8:	4611      	mov	r1, r2
    edda:	f003 fb3b 	bl	12454 <ll_conn_update>
    edde:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    ede0:	8828      	ldrh	r0, [r5, #0]
    ede2:	f011 fe32 	bl	20a4a <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
    ede6:	e701      	b.n	ebec <hci_cmd_handle+0x124>
	handle = sys_le16_to_cpu(cmd->handle);
    ede8:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
    edea:	8818      	ldrh	r0, [r3, #0]
    edec:	f003 fc2a 	bl	12644 <ll_feature_req_send>
    edf0:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    edf2:	8828      	ldrh	r0, [r5, #0]
    edf4:	f011 fe29 	bl	20a4a <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
    edf8:	e6f8      	b.n	ebec <hci_cmd_handle+0x124>
	handle = sys_le16_to_cpu(cmd->handle);
    edfa:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    edfc:	2108      	movs	r1, #8
    edfe:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    ee00:	881d      	ldrh	r5, [r3, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ee02:	f7ff fdc1 	bl	e988 <hci_cmd_complete>
    ee06:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
    ee08:	1ce1      	adds	r1, r4, #3
	handle = sys_le16_to_cpu(cmd->handle);
    ee0a:	b2a8      	uxth	r0, r5
	status = ll_chm_get(handle, rp->ch_map);
    ee0c:	f003 fbb8 	bl	12580 <ll_chm_get>
	rp->status = status;
    ee10:	7020      	strb	r0, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
    ee12:	9807      	ldr	r0, [sp, #28]
    ee14:	f8a4 5001 	strh.w	r5, [r4, #1]
	if (err == -EINVAL) {
    ee18:	e6e8      	b.n	ebec <hci_cmd_handle+0x124>
	status = ll_wl_remove(&cmd->addr);
    ee1a:	68a0      	ldr	r0, [r4, #8]
    ee1c:	f007 fd82 	bl	16924 <ll_wl_remove>
	*evt = cmd_complete_status(status);
    ee20:	f7ff fd20 	bl	e864 <cmd_complete_status>
	if (err == -EINVAL) {
    ee24:	e6e2      	b.n	ebec <hci_cmd_handle+0x124>
	status = ll_wl_add(&cmd->addr);
    ee26:	68a0      	ldr	r0, [r4, #8]
    ee28:	f008 f82c 	bl	16e84 <ll_wl_add>
	*evt = cmd_complete_status(status);
    ee2c:	f7ff fd1a 	bl	e864 <cmd_complete_status>
	if (err == -EINVAL) {
    ee30:	e6dc      	b.n	ebec <hci_cmd_handle+0x124>
	status = ll_wl_clear();
    ee32:	f007 fd4d 	bl	168d0 <ll_wl_clear>
	*evt = cmd_complete_status(status);
    ee36:	f7ff fd15 	bl	e864 <cmd_complete_status>
	if (err == -EINVAL) {
    ee3a:	e6d7      	b.n	ebec <hci_cmd_handle+0x124>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ee3c:	2102      	movs	r1, #2
    ee3e:	a807      	add	r0, sp, #28
    ee40:	f7ff fda2 	bl	e988 <hci_cmd_complete>
	rp->status = 0x00;
    ee44:	2300      	movs	r3, #0
    ee46:	7003      	strb	r3, [r0, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ee48:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
    ee4a:	f007 fd3f 	bl	168cc <ll_wl_size_get>
    ee4e:	7060      	strb	r0, [r4, #1]
	if (err == -EINVAL) {
    ee50:	9807      	ldr	r0, [sp, #28]
    ee52:	e6cb      	b.n	ebec <hci_cmd_handle+0x124>
	status = ll_adv_enable(cmd->enable);
    ee54:	68a3      	ldr	r3, [r4, #8]
    ee56:	7818      	ldrb	r0, [r3, #0]
    ee58:	f7f2 fa2e 	bl	12b8 <ll_adv_enable>
	*evt = cmd_complete_status(status);
    ee5c:	f7ff fd02 	bl	e864 <cmd_complete_status>
	if (err == -EINVAL) {
    ee60:	e6c4      	b.n	ebec <hci_cmd_handle+0x124>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
    ee62:	68a1      	ldr	r1, [r4, #8]
    ee64:	f811 0b01 	ldrb.w	r0, [r1], #1
    ee68:	f002 fd02 	bl	11870 <ll_adv_scan_rsp_set>
	*evt = cmd_complete_status(status);
    ee6c:	f7ff fcfa 	bl	e864 <cmd_complete_status>
	if (err == -EINVAL) {
    ee70:	e6bc      	b.n	ebec <hci_cmd_handle+0x124>
		le_set_adv_param(cmd, evt);
    ee72:	68a4      	ldr	r4, [r4, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
    ee74:	7ba5      	ldrb	r5, [r4, #14]
    ee76:	79a3      	ldrb	r3, [r4, #6]
    ee78:	7962      	ldrb	r2, [r4, #5]
    ee7a:	7921      	ldrb	r1, [r4, #4]
    ee7c:	8820      	ldrh	r0, [r4, #0]
    ee7e:	9502      	str	r5, [sp, #8]
    ee80:	7b65      	ldrb	r5, [r4, #13]
    ee82:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
    ee84:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
    ee86:	9400      	str	r4, [sp, #0]
    ee88:	f002 fadc 	bl	11444 <ll_adv_params_set>
	*evt = cmd_complete_status(status);
    ee8c:	f7ff fcea 	bl	e864 <cmd_complete_status>
	if (err == -EINVAL) {
    ee90:	e6ac      	b.n	ebec <hci_cmd_handle+0x124>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    ee92:	68a1      	ldr	r1, [r4, #8]
    ee94:	2001      	movs	r0, #1
    ee96:	f7ff fb1b 	bl	e4d0 <ll_addr_set>
	*evt = cmd_complete_status(status);
    ee9a:	f7ff fce3 	bl	e864 <cmd_complete_status>
	if (err == -EINVAL) {
    ee9e:	e6a5      	b.n	ebec <hci_cmd_handle+0x124>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    eea0:	2109      	movs	r1, #9
    eea2:	a807      	add	r0, sp, #28
    eea4:	f7ff fd70 	bl	e988 <hci_cmd_complete>
	dst[0] = val;
    eea8:	247f      	movs	r4, #127	; 0x7f
	rp->status = 0x00;
    eeaa:	2300      	movs	r3, #0
	dst[1] = val >> 8;
    eeac:	2141      	movs	r1, #65	; 0x41
	dst[0] = val;
    eeae:	2201      	movs	r2, #1
    eeb0:	7044      	strb	r4, [r0, #1]
	dst[1] = val >> 8;
    eeb2:	7081      	strb	r1, [r0, #2]
	dst[0] = val;
    eeb4:	70c2      	strb	r2, [r0, #3]
    eeb6:	7003      	strb	r3, [r0, #0]
    eeb8:	71c3      	strb	r3, [r0, #7]
	dst[1] = val >> 8;
    eeba:	7203      	strb	r3, [r0, #8]
    eebc:	7103      	strb	r3, [r0, #4]
	dst[0] = val;
    eebe:	7143      	strb	r3, [r0, #5]
	dst[1] = val >> 8;
    eec0:	7183      	strb	r3, [r0, #6]
	if (err == -EINVAL) {
    eec2:	9807      	ldr	r0, [sp, #28]
    eec4:	e692      	b.n	ebec <hci_cmd_handle+0x124>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    eec6:	2104      	movs	r1, #4
    eec8:	a807      	add	r0, sp, #28
    eeca:	f7ff fd5d 	bl	e988 <hci_cmd_complete>
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
    eece:	2203      	movs	r2, #3
	rp->status = 0x00;
    eed0:	2300      	movs	r3, #0
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
    eed2:	70c2      	strb	r2, [r0, #3]
	rp->status = 0x00;
    eed4:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_CTLR_TX_BUFFER_SIZE);
    eed6:	221b      	movs	r2, #27
    eed8:	7042      	strb	r2, [r0, #1]
    eeda:	7083      	strb	r3, [r0, #2]
	if (err == -EINVAL) {
    eedc:	9807      	ldr	r0, [sp, #28]
    eede:	e685      	b.n	ebec <hci_cmd_handle+0x124>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    eee0:	68a2      	ldr	r2, [r4, #8]
	le_event_mask = sys_get_le64(cmd->events);
    eee2:	4bbf      	ldr	r3, [pc, #764]	; (f1e0 <hci_cmd_handle+0x718>)
    eee4:	6811      	ldr	r1, [r2, #0]
    eee6:	6852      	ldr	r2, [r2, #4]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    eee8:	605a      	str	r2, [r3, #4]
    eeea:	6019      	str	r1, [r3, #0]
	*evt = cmd_complete_status(0x00);
    eeec:	2000      	movs	r0, #0
    eeee:	f7ff fcb9 	bl	e864 <cmd_complete_status>
}
    eef2:	e67b      	b.n	ebec <hci_cmd_handle+0x124>
		le_set_phy(cmd, evt);
    eef4:	68a2      	ldr	r2, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    eef6:	7894      	ldrb	r4, [r2, #2]
    eef8:	78d1      	ldrb	r1, [r2, #3]
	handle = sys_le16_to_cpu(cmd->handle);
    eefa:	8817      	ldrh	r7, [r2, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    eefc:	f8b2 6005 	ldrh.w	r6, [r2, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    ef00:	07e3      	lsls	r3, r4, #31
		cmd->tx_phys |= mask_phys;
    ef02:	bf48      	it	mi
    ef04:	f041 0103 	orrmi.w	r1, r1, #3
    ef08:	7913      	ldrb	r3, [r2, #4]
    ef0a:	bf48      	it	mi
    ef0c:	70d1      	strbmi	r1, [r2, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    ef0e:	07a4      	lsls	r4, r4, #30
		cmd->rx_phys |= mask_phys;
    ef10:	bf44      	itt	mi
    ef12:	f043 0303 	orrmi.w	r3, r3, #3
    ef16:	7113      	strbmi	r3, [r2, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
    ef18:	ea43 0201 	orr.w	r2, r3, r1
    ef1c:	f032 0203 	bics.w	r2, r2, #3
    ef20:	f040 8195 	bne.w	f24e <hci_cmd_handle+0x786>
	if (!(cmd->tx_phys & 0x07) ||
    ef24:	074c      	lsls	r4, r1, #29
    ef26:	f000 818e 	beq.w	f246 <hci_cmd_handle+0x77e>
    ef2a:	075a      	lsls	r2, r3, #29
    ef2c:	f000 818b 	beq.w	f246 <hci_cmd_handle+0x77e>
	if (phy_opts & 0x03) {
    ef30:	f016 0203 	ands.w	r2, r6, #3
		phy_opts -= 1U;
    ef34:	bf1c      	itt	ne
    ef36:	f106 36ff 	addne.w	r6, r6, #4294967295	; 0xffffffff
		phy_opts &= 1;
    ef3a:	f006 0201 	andne.w	r2, r6, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    ef3e:	4638      	mov	r0, r7
    ef40:	f003 fc6c 	bl	1281c <ll_phy_req_send>
    ef44:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    ef46:	8828      	ldrh	r0, [r5, #0]
    ef48:	f011 fd7f 	bl	20a4a <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
    ef4c:	e64e      	b.n	ebec <hci_cmd_handle+0x124>
		le_set_default_phy(cmd, evt);
    ef4e:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    ef50:	781a      	ldrb	r2, [r3, #0]
    ef52:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
    ef54:	bf4a      	itet	mi
    ef56:	2007      	movmi	r0, #7
    ef58:	7858      	ldrbpl	r0, [r3, #1]
    ef5a:	7058      	strbmi	r0, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    ef5c:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
    ef5e:	bf4a      	itet	mi
    ef60:	2107      	movmi	r1, #7
    ef62:	7899      	ldrbpl	r1, [r3, #2]
    ef64:	7099      	strbmi	r1, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    ef66:	f003 fc4f 	bl	12808 <ll_phy_default_set>
	*evt = cmd_complete_status(status);
    ef6a:	f7ff fc7b 	bl	e864 <cmd_complete_status>
	if (err == -EINVAL) {
    ef6e:	e63d      	b.n	ebec <hci_cmd_handle+0x124>
	handle = sys_le16_to_cpu(cmd->handle);
    ef70:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ef72:	2105      	movs	r1, #5
    ef74:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    ef76:	881d      	ldrh	r5, [r3, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ef78:	f7ff fd06 	bl	e988 <hci_cmd_complete>
    ef7c:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    ef7e:	1d22      	adds	r2, r4, #4
	handle = sys_le16_to_cpu(cmd->handle);
    ef80:	b2a8      	uxth	r0, r5
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    ef82:	1ce1      	adds	r1, r4, #3
    ef84:	f003 fc22 	bl	127cc <ll_phy_get>
 * @return least significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
	return __builtin_ffs(op);
    ef88:	78e2      	ldrb	r2, [r4, #3]
    ef8a:	7923      	ldrb	r3, [r4, #4]
	rp->status = status;
    ef8c:	7020      	strb	r0, [r4, #0]
    ef8e:	2a00      	cmp	r2, #0
    ef90:	fa92 f2a2 	rbit	r2, r2
    ef94:	fab2 f282 	clz	r2, r2
    ef98:	bf08      	it	eq
    ef9a:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    ef9e:	2b00      	cmp	r3, #0
    efa0:	fa93 f3a3 	rbit	r3, r3
    efa4:	fab3 f383 	clz	r3, r3
    efa8:	f102 0201 	add.w	r2, r2, #1
    efac:	bf08      	it	eq
    efae:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    efb2:	70e2      	strb	r2, [r4, #3]
    efb4:	3301      	adds	r3, #1
    efb6:	9807      	ldr	r0, [sp, #28]
	rp->handle = sys_cpu_to_le16(handle);
    efb8:	f8a4 5001 	strh.w	r5, [r4, #1]
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    efbc:	7123      	strb	r3, [r4, #4]
	if (err == -EINVAL) {
    efbe:	e615      	b.n	ebec <hci_cmd_handle+0x124>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    efc0:	2109      	movs	r1, #9
    efc2:	a807      	add	r0, sp, #28
    efc4:	f7ff fce0 	bl	e988 <hci_cmd_complete>
	ll_length_max_get(&max_tx_octets, &max_tx_time,
    efc8:	ab08      	add	r3, sp, #32
	rp = hci_cmd_complete(evt, sizeof(*rp));
    efca:	4604      	mov	r4, r0
	ll_length_max_get(&max_tx_octets, &max_tx_time,
    efcc:	f10d 021a 	add.w	r2, sp, #26
    efd0:	f10d 0016 	add.w	r0, sp, #22
    efd4:	a906      	add	r1, sp, #24
    efd6:	f003 fbef 	bl	127b8 <ll_length_max_get>
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    efda:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
    efde:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    efe2:	f8a4 2001 	strh.w	r2, [r4, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    efe6:	f8a4 3003 	strh.w	r3, [r4, #3]
	rp->max_rx_octets = sys_cpu_to_le16(max_rx_octets);
    efea:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    efee:	f8a4 3005 	strh.w	r3, [r4, #5]
	rp->status = 0x00;
    eff2:	2200      	movs	r2, #0
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
    eff4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->status = 0x00;
    eff8:	7022      	strb	r2, [r4, #0]
    effa:	9807      	ldr	r0, [sp, #28]
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
    effc:	f8a4 3007 	strh.w	r3, [r4, #7]
	if (err == -EINVAL) {
    f000:	e5f4      	b.n	ebec <hci_cmd_handle+0x124>
	uint16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
    f002:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
    f004:	8818      	ldrh	r0, [r3, #0]
    f006:	f007 fd61 	bl	16acc <ll_rl_timeout_set>
	*evt = cmd_complete_status(0x00);
    f00a:	2000      	movs	r0, #0
    f00c:	f7ff fc2a 	bl	e864 <cmd_complete_status>
	if (err == -EINVAL) {
    f010:	e5ec      	b.n	ebec <hci_cmd_handle+0x124>
	status = ll_rl_enable(cmd->enable);
    f012:	68a3      	ldr	r3, [r4, #8]
    f014:	7818      	ldrb	r0, [r3, #0]
    f016:	f007 fd43 	bl	16aa0 <ll_rl_enable>
	*evt = cmd_complete_status(status);
    f01a:	f7ff fc23 	bl	e864 <cmd_complete_status>
	if (err == -EINVAL) {
    f01e:	e5e5      	b.n	ebec <hci_cmd_handle+0x124>
	memcpy(dst, src, sizeof(*dst));
    f020:	68a3      	ldr	r3, [r4, #8]
    f022:	6818      	ldr	r0, [r3, #0]
    f024:	9008      	str	r0, [sp, #32]
    f026:	889a      	ldrh	r2, [r3, #4]
    f028:	799b      	ldrb	r3, [r3, #6]
    f02a:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f02e:	2107      	movs	r1, #7
    f030:	a807      	add	r0, sp, #28
    f032:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
    f036:	f7ff fca7 	bl	e988 <hci_cmd_complete>
    f03a:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
    f03c:	1c61      	adds	r1, r4, #1
    f03e:	a808      	add	r0, sp, #32
    f040:	f008 f90e 	bl	17260 <ll_rl_lrpa_get>
    f044:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
    f046:	9807      	ldr	r0, [sp, #28]
    f048:	e5d0      	b.n	ebec <hci_cmd_handle+0x124>
    f04a:	68a3      	ldr	r3, [r4, #8]
    f04c:	6818      	ldr	r0, [r3, #0]
    f04e:	9008      	str	r0, [sp, #32]
    f050:	889a      	ldrh	r2, [r3, #4]
    f052:	799b      	ldrb	r3, [r3, #6]
    f054:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f058:	2107      	movs	r1, #7
    f05a:	a807      	add	r0, sp, #28
    f05c:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
    f060:	f7ff fc92 	bl	e988 <hci_cmd_complete>
    f064:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
    f066:	1c61      	adds	r1, r4, #1
    f068:	a808      	add	r0, sp, #32
    f06a:	f008 f8d7 	bl	1721c <ll_rl_crpa_get>
    f06e:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
    f070:	9807      	ldr	r0, [sp, #28]
    f072:	e5bb      	b.n	ebec <hci_cmd_handle+0x124>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f074:	2102      	movs	r1, #2
    f076:	a807      	add	r0, sp, #28
    f078:	f7ff fc86 	bl	e988 <hci_cmd_complete>
    f07c:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
    f07e:	f007 fccd 	bl	16a1c <ll_rl_size_get>
	rp->status = 0x00;
    f082:	2300      	movs	r3, #0
	rp->rl_size = ll_rl_size_get();
    f084:	7060      	strb	r0, [r4, #1]
	rp->status = 0x00;
    f086:	7023      	strb	r3, [r4, #0]
	if (err == -EINVAL) {
    f088:	9807      	ldr	r0, [sp, #28]
    f08a:	e5af      	b.n	ebec <hci_cmd_handle+0x124>
	status = ll_rl_clear();
    f08c:	f007 fcc8 	bl	16a20 <ll_rl_clear>
	*evt = cmd_complete_status(status);
    f090:	f7ff fbe8 	bl	e864 <cmd_complete_status>
	if (err == -EINVAL) {
    f094:	e5aa      	b.n	ebec <hci_cmd_handle+0x124>
	status = ll_rl_remove(&cmd->peer_id_addr);
    f096:	68a0      	ldr	r0, [r4, #8]
    f098:	f008 f81e 	bl	170d8 <ll_rl_remove>
	*evt = cmd_complete_status(status);
    f09c:	f7ff fbe2 	bl	e864 <cmd_complete_status>
	if (err == -EINVAL) {
    f0a0:	e5a4      	b.n	ebec <hci_cmd_handle+0x124>
		le_add_dev_to_rl(cmd, evt);
    f0a2:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
    f0a4:	f100 0217 	add.w	r2, r0, #23
    f0a8:	1dc1      	adds	r1, r0, #7
    f0aa:	f007 ff4f 	bl	16f4c <ll_rl_add>
	*evt = cmd_complete_status(status);
    f0ae:	f7ff fbd9 	bl	e864 <cmd_complete_status>
	if (err == -EINVAL) {
    f0b2:	e59b      	b.n	ebec <hci_cmd_handle+0x124>
		le_write_default_data_len(cmd, evt);
    f0b4:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(max_tx_octets, max_tx_time);
    f0b6:	8859      	ldrh	r1, [r3, #2]
    f0b8:	8818      	ldrh	r0, [r3, #0]
    f0ba:	f003 fb73 	bl	127a4 <ll_length_default_set>
	*evt = cmd_complete_status(status);
    f0be:	b2c0      	uxtb	r0, r0
    f0c0:	f7ff fbd0 	bl	e864 <cmd_complete_status>
	if (err == -EINVAL) {
    f0c4:	e592      	b.n	ebec <hci_cmd_handle+0x124>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f0c6:	2105      	movs	r1, #5
    f0c8:	a807      	add	r0, sp, #28
    f0ca:	f7ff fc5d 	bl	e988 <hci_cmd_complete>
	ll_length_default_get(&max_tx_octets, &max_tx_time);
    f0ce:	a908      	add	r1, sp, #32
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f0d0:	4604      	mov	r4, r0
	ll_length_default_get(&max_tx_octets, &max_tx_time);
    f0d2:	f10d 001a 	add.w	r0, sp, #26
    f0d6:	f003 fb59 	bl	1278c <ll_length_default_get>
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
    f0da:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    f0de:	f8a4 3001 	strh.w	r3, [r4, #1]
	rp->status = 0x00;
    f0e2:	2200      	movs	r2, #0
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    f0e4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->status = 0x00;
    f0e8:	7022      	strb	r2, [r4, #0]
    f0ea:	9807      	ldr	r0, [sp, #28]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    f0ec:	f8a4 3003 	strh.w	r3, [r4, #3]
	if (err == -EINVAL) {
    f0f0:	e57c      	b.n	ebec <hci_cmd_handle+0x124>
		le_set_data_len(cmd, evt);
    f0f2:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    f0f4:	881d      	ldrh	r5, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
    f0f6:	889a      	ldrh	r2, [r3, #4]
    f0f8:	8859      	ldrh	r1, [r3, #2]
    f0fa:	4628      	mov	r0, r5
    f0fc:	f003 faee 	bl	126dc <ll_length_req_send>
    f100:	e5bd      	b.n	ec7e <hci_cmd_handle+0x1b6>
		le_conn_param_req_neg_reply(cmd, evt);
    f102:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    f104:	881d      	ldrh	r5, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
    f106:	789a      	ldrb	r2, [r3, #2]
    f108:	2300      	movs	r3, #0
    f10a:	e9cd 3301 	strd	r3, r3, [sp, #4]
    f10e:	4628      	mov	r0, r5
    f110:	9300      	str	r3, [sp, #0]
    f112:	2102      	movs	r1, #2
    f114:	f003 f99e 	bl	12454 <ll_conn_update>
    f118:	e5b1      	b.n	ec7e <hci_cmd_handle+0x1b6>
		le_conn_param_req_reply(cmd, evt);
    f11a:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
    f11c:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    f11e:	8815      	ldrh	r5, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
    f120:	8853      	ldrh	r3, [r2, #2]
    f122:	9102      	str	r1, [sp, #8]
    f124:	88d1      	ldrh	r1, [r2, #6]
    f126:	9101      	str	r1, [sp, #4]
    f128:	8892      	ldrh	r2, [r2, #4]
    f12a:	9200      	str	r2, [sp, #0]
    f12c:	4628      	mov	r0, r5
    f12e:	2200      	movs	r2, #0
    f130:	2102      	movs	r1, #2
    f132:	f003 f98f 	bl	12454 <ll_conn_update>
    f136:	e5a2      	b.n	ec7e <hci_cmd_handle+0x1b6>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f138:	2109      	movs	r1, #9
    f13a:	a807      	add	r0, sp, #28
    f13c:	f7ff fc24 	bl	e988 <hci_cmd_complete>
	dst[0] = val;
    f140:	248f      	movs	r4, #143	; 0x8f
	rp->status = 0x00;
    f142:	2300      	movs	r3, #0
	dst[1] = val >> 8;
    f144:	21cc      	movs	r1, #204	; 0xcc
	dst[0] = val;
    f146:	2230      	movs	r2, #48	; 0x30
    f148:	7044      	strb	r4, [r0, #1]
	dst[1] = val >> 8;
    f14a:	7081      	strb	r1, [r0, #2]
	dst[0] = val;
    f14c:	70c2      	strb	r2, [r0, #3]
	dst[1] = val >> 8;
    f14e:	24ec      	movs	r4, #236	; 0xec
	dst[0] = val;
    f150:	21c0      	movs	r1, #192	; 0xc0
	dst[1] = val >> 8;
    f152:	2201      	movs	r2, #1
    f154:	7003      	strb	r3, [r0, #0]
	dst[0] = val;
    f156:	71c3      	strb	r3, [r0, #7]
	dst[1] = val >> 8;
    f158:	7203      	strb	r3, [r0, #8]
    f15a:	7104      	strb	r4, [r0, #4]
	dst[0] = val;
    f15c:	7141      	strb	r1, [r0, #5]
	dst[1] = val >> 8;
    f15e:	7182      	strb	r2, [r0, #6]
	if (err == -EINVAL) {
    f160:	9807      	ldr	r0, [sp, #28]
    f162:	e543      	b.n	ebec <hci_cmd_handle+0x124>
	handle = sys_le16_to_cpu(cmd->handle);
    f164:	68a3      	ldr	r3, [r4, #8]
    f166:	881d      	ldrh	r5, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    f168:	2200      	movs	r2, #0
    f16a:	4628      	mov	r0, r5
    f16c:	2106      	movs	r1, #6
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    f16e:	f007 fa0b 	bl	16588 <ll_start_enc_req_send>
    f172:	e584      	b.n	ec7e <hci_cmd_handle+0x1b6>
	handle = sys_le16_to_cpu(cmd->handle);
    f174:	68a2      	ldr	r2, [r4, #8]
    f176:	f832 5b02 	ldrh.w	r5, [r2], #2
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    f17a:	2100      	movs	r1, #0
    f17c:	4628      	mov	r0, r5
    f17e:	e7f6      	b.n	f16e <hci_cmd_handle+0x6a6>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f180:	2109      	movs	r1, #9
    f182:	a807      	add	r0, sp, #28
    f184:	f7ff fc00 	bl	e988 <hci_cmd_complete>
	rp->status = 0x00;
    f188:	2300      	movs	r3, #0
    f18a:	f800 3b01 	strb.w	r3, [r0], #1
	lll_csrand_get(rp->rand, count);
    f18e:	2108      	movs	r1, #8
    f190:	f008 fb9e 	bl	178d0 <lll_csrand_get>
	if (err == -EINVAL) {
    f194:	9807      	ldr	r0, [sp, #28]
    f196:	e529      	b.n	ebec <hci_cmd_handle+0x124>
		le_encrypt(cmd, evt);
    f198:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    f19a:	aa08      	add	r2, sp, #32
    f19c:	f100 0110 	add.w	r1, r0, #16
    f1a0:	2300      	movs	r3, #0
    f1a2:	f00a f8e5 	bl	19370 <ecb_encrypt>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f1a6:	2111      	movs	r1, #17
    f1a8:	a807      	add	r0, sp, #28
    f1aa:	f7ff fbed 	bl	e988 <hci_cmd_complete>
	rp->status = 0x00;
    f1ae:	4605      	mov	r5, r0
    f1b0:	2300      	movs	r3, #0
    f1b2:	f805 3b01 	strb.w	r3, [r5], #1
    f1b6:	ac08      	add	r4, sp, #32
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f1b8:	4606      	mov	r6, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    f1ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    f1bc:	f8c6 0001 	str.w	r0, [r6, #1]
    f1c0:	9807      	ldr	r0, [sp, #28]
    f1c2:	6069      	str	r1, [r5, #4]
    f1c4:	60aa      	str	r2, [r5, #8]
    f1c6:	60eb      	str	r3, [r5, #12]
	if (err == -EINVAL) {
    f1c8:	e510      	b.n	ebec <hci_cmd_handle+0x124>
		disconnect(cmd, evt);
    f1ca:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
    f1cc:	7899      	ldrb	r1, [r3, #2]
    f1ce:	8818      	ldrh	r0, [r3, #0]
    f1d0:	f003 f9f6 	bl	125c0 <ll_terminate_ind_send>
    f1d4:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    f1d6:	8828      	ldrh	r0, [r5, #0]
    f1d8:	f011 fc37 	bl	20a4a <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
    f1dc:	e506      	b.n	ebec <hci_cmd_handle+0x124>
    f1de:	bf00      	nop
    f1e0:	20000130 	.word	0x20000130
	handle = sys_le16_to_cpu(cmd->handle);
    f1e4:	68a3      	ldr	r3, [r4, #8]
    f1e6:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
    f1e8:	a908      	add	r1, sp, #32
    f1ea:	4628      	mov	r0, r5
    f1ec:	f003 fb66 	bl	128bc <ll_apto_get>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f1f0:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
    f1f2:	4604      	mov	r4, r0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f1f4:	a807      	add	r0, sp, #28
    f1f6:	f7ff fbc7 	bl	e988 <hci_cmd_complete>
	rp->status = status;
    f1fa:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    f1fc:	f8a0 5001 	strh.w	r5, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    f200:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    f204:	f8a0 3003 	strh.w	r3, [r0, #3]
    f208:	9807      	ldr	r0, [sp, #28]
}
    f20a:	e4ef      	b.n	ebec <hci_cmd_handle+0x124>
	event_mask = DEFAULT_EVENT_MASK;
    f20c:	4912      	ldr	r1, [pc, #72]	; (f258 <hci_cmd_handle+0x790>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    f20e:	4a13      	ldr	r2, [pc, #76]	; (f25c <hci_cmd_handle+0x794>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    f210:	4b13      	ldr	r3, [pc, #76]	; (f260 <hci_cmd_handle+0x798>)
	event_mask = DEFAULT_EVENT_MASK;
    f212:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    f216:	f641 75ff 	movw	r5, #8191	; 0x1fff
    f21a:	e9c1 4500 	strd	r4, r5, [r1]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    f21e:	201f      	movs	r0, #31
    f220:	2100      	movs	r1, #0
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    f222:	2400      	movs	r4, #0
    f224:	2500      	movs	r5, #0
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    f226:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    f22a:	e9c2 4500 	strd	r4, r5, [r2]
		ll_reset();
    f22e:	f000 ff91 	bl	10154 <ll_reset>
		*evt = cmd_complete_status(0x00);
    f232:	2000      	movs	r0, #0
    f234:	f7ff fb16 	bl	e864 <cmd_complete_status>
	conn_count = 0U;
    f238:	4b0a      	ldr	r3, [pc, #40]	; (f264 <hci_cmd_handle+0x79c>)
    f23a:	2200      	movs	r2, #0
    f23c:	601a      	str	r2, [r3, #0]
}
    f23e:	e4d5      	b.n	ebec <hci_cmd_handle+0x124>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    f240:	68a2      	ldr	r2, [r4, #8]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    f242:	4b06      	ldr	r3, [pc, #24]	; (f25c <hci_cmd_handle+0x794>)
    f244:	e64e      	b.n	eee4 <hci_cmd_handle+0x41c>
	return bt_hci_cmd_status_create(_opcode, status);
    f246:	2112      	movs	r1, #18
    f248:	f011 fbff 	bl	20a4a <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
    f24c:	e4ce      	b.n	ebec <hci_cmd_handle+0x124>
	return bt_hci_cmd_status_create(_opcode, status);
    f24e:	2111      	movs	r1, #17
    f250:	f011 fbfb 	bl	20a4a <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
    f254:	e4ca      	b.n	ebec <hci_cmd_handle+0x124>
    f256:	bf00      	nop
    f258:	20000128 	.word	0x20000128
    f25c:	20001070 	.word	0x20001070
    f260:	20000130 	.word	0x20000130
    f264:	20001888 	.word	0x20001888

0000f268 <hci_acl_handle>:
	if (buf->len < sizeof(*acl)) {
    f268:	8983      	ldrh	r3, [r0, #12]
	*evt = NULL;
    f26a:	2200      	movs	r2, #0
	if (buf->len < sizeof(*acl)) {
    f26c:	2b03      	cmp	r3, #3
{
    f26e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	*evt = NULL;
    f272:	600a      	str	r2, [r1, #0]
	if (buf->len < sizeof(*acl)) {
    f274:	d944      	bls.n	f300 <hci_acl_handle+0x98>
    f276:	4605      	mov	r5, r0
    f278:	460e      	mov	r6, r1
    f27a:	3008      	adds	r0, #8
    f27c:	2104      	movs	r1, #4
    f27e:	f013 fa00 	bl	22682 <net_buf_simple_pull_mem>
	if (buf->len < len) {
    f282:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(acl->len);
    f284:	8847      	ldrh	r7, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
    f286:	f8b0 8000 	ldrh.w	r8, [r0]
	if (buf->len < len) {
    f28a:	42bb      	cmp	r3, r7
    f28c:	d349      	bcc.n	f322 <hci_acl_handle+0xba>
	if (len > CONFIG_BT_CTLR_TX_BUFFER_SIZE) {
    f28e:	2f1b      	cmp	r7, #27
    f290:	d843      	bhi.n	f31a <hci_acl_handle+0xb2>
	node_tx = ll_tx_mem_acquire();
    f292:	f003 f889 	bl	123a8 <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
    f296:	ea4f 3318 	mov.w	r3, r8, lsr #12
	if (!node_tx) {
    f29a:	4604      	mov	r4, r0
    f29c:	2800      	cmp	r0, #0
    f29e:	d044      	beq.n	f32a <hci_acl_handle+0xc2>
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
    f2a0:	089a      	lsrs	r2, r3, #2
    f2a2:	d102      	bne.n	f2aa <hci_acl_handle+0x42>
	switch (bt_acl_flags_pb(flags)) {
    f2a4:	b333      	cbz	r3, f2f4 <hci_acl_handle+0x8c>
    f2a6:	2b01      	cmp	r3, #1
    f2a8:	d003      	beq.n	f2b2 <hci_acl_handle+0x4a>
		return -EINVAL;
    f2aa:	f06f 0015 	mvn.w	r0, #21
}
    f2ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    f2b2:	7902      	ldrb	r2, [r0, #4]
    f2b4:	f363 0201 	bfi	r2, r3, #0, #2
    f2b8:	7102      	strb	r2, [r0, #4]
	pdu_data->len = len;
    f2ba:	7167      	strb	r7, [r4, #5]
    f2bc:	68a9      	ldr	r1, [r5, #8]
    f2be:	463a      	mov	r2, r7
    f2c0:	1de0      	adds	r0, r4, #7
    f2c2:	f014 f9ce 	bl	23662 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
    f2c6:	4621      	mov	r1, r4
    f2c8:	f3c8 000b 	ubfx	r0, r8, #0, #12
    f2cc:	f003 f878 	bl	123c0 <ll_tx_mem_enqueue>
    f2d0:	2800      	cmp	r0, #0
    f2d2:	d0ec      	beq.n	f2ae <hci_acl_handle+0x46>
    f2d4:	4b2c      	ldr	r3, [pc, #176]	; (f388 <hci_acl_handle+0x120>)
    f2d6:	492d      	ldr	r1, [pc, #180]	; (f38c <hci_acl_handle+0x124>)
		BT_ERR("Invalid Tx Enqueue");
    f2d8:	482d      	ldr	r0, [pc, #180]	; (f390 <hci_acl_handle+0x128>)
    f2da:	1ac9      	subs	r1, r1, r3
    f2dc:	08c9      	lsrs	r1, r1, #3
    f2de:	0189      	lsls	r1, r1, #6
    f2e0:	f041 0101 	orr.w	r1, r1, #1
    f2e4:	f00f fc28 	bl	1eb38 <log_0>
		ll_tx_mem_release(node_tx);
    f2e8:	4620      	mov	r0, r4
    f2ea:	f003 f863 	bl	123b4 <ll_tx_mem_release>
		return -EINVAL;
    f2ee:	f06f 0015 	mvn.w	r0, #21
    f2f2:	e7dc      	b.n	f2ae <hci_acl_handle+0x46>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    f2f4:	7903      	ldrb	r3, [r0, #4]
    f2f6:	2202      	movs	r2, #2
    f2f8:	f362 0301 	bfi	r3, r2, #0, #2
    f2fc:	7103      	strb	r3, [r0, #4]
		break;
    f2fe:	e7dc      	b.n	f2ba <hci_acl_handle+0x52>
    f300:	4922      	ldr	r1, [pc, #136]	; (f38c <hci_acl_handle+0x124>)
    f302:	4b21      	ldr	r3, [pc, #132]	; (f388 <hci_acl_handle+0x120>)
		BT_ERR("No HCI ACL header");
    f304:	4823      	ldr	r0, [pc, #140]	; (f394 <hci_acl_handle+0x12c>)
    f306:	1ac9      	subs	r1, r1, r3
    f308:	08c9      	lsrs	r1, r1, #3
		BT_ERR("Invalid HCI ACL packet length");
    f30a:	0189      	lsls	r1, r1, #6
    f30c:	f041 0101 	orr.w	r1, r1, #1
    f310:	f00f fc12 	bl	1eb38 <log_0>
		return -EINVAL;
    f314:	f06f 0015 	mvn.w	r0, #21
    f318:	e7c9      	b.n	f2ae <hci_acl_handle+0x46>
    f31a:	491c      	ldr	r1, [pc, #112]	; (f38c <hci_acl_handle+0x124>)
    f31c:	4b1a      	ldr	r3, [pc, #104]	; (f388 <hci_acl_handle+0x120>)
		BT_ERR("Invalid HCI ACL Data length");
    f31e:	481e      	ldr	r0, [pc, #120]	; (f398 <hci_acl_handle+0x130>)
    f320:	e7f1      	b.n	f306 <hci_acl_handle+0x9e>
    f322:	491a      	ldr	r1, [pc, #104]	; (f38c <hci_acl_handle+0x124>)
    f324:	4b18      	ldr	r3, [pc, #96]	; (f388 <hci_acl_handle+0x120>)
		BT_ERR("Invalid HCI ACL packet length");
    f326:	481d      	ldr	r0, [pc, #116]	; (f39c <hci_acl_handle+0x134>)
    f328:	e7ed      	b.n	f306 <hci_acl_handle+0x9e>
    f32a:	4b17      	ldr	r3, [pc, #92]	; (f388 <hci_acl_handle+0x120>)
    f32c:	4917      	ldr	r1, [pc, #92]	; (f38c <hci_acl_handle+0x124>)
		BT_ERR("Tx Buffer Overflow");
    f32e:	481c      	ldr	r0, [pc, #112]	; (f3a0 <hci_acl_handle+0x138>)
    f330:	1ac9      	subs	r1, r1, r3
    f332:	08c9      	lsrs	r1, r1, #3
    f334:	0189      	lsls	r1, r1, #6
    f336:	f041 0101 	orr.w	r1, r1, #1
    f33a:	f00f fbfd 	bl	1eb38 <log_0>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
    f33e:	4b19      	ldr	r3, [pc, #100]	; (f3a4 <hci_acl_handle+0x13c>)
    f340:	6819      	ldr	r1, [r3, #0]
    f342:	4623      	mov	r3, r4
    f344:	f001 7200 	and.w	r2, r1, #33554432	; 0x2000000
    f348:	4313      	orrs	r3, r2
    f34a:	d102      	bne.n	f352 <hci_acl_handle+0xea>
		return -ENOBUFS;
    f34c:	f06f 0068 	mvn.w	r0, #104	; 0x68
    f350:	e7ad      	b.n	f2ae <hci_acl_handle+0x46>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    f352:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f356:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f35a:	2001      	movs	r0, #1
    f35c:	f7f6 ffa8 	bl	62b0 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
    f360:	2102      	movs	r1, #2
    f362:	6030      	str	r0, [r6, #0]
    f364:	3008      	adds	r0, #8
    f366:	f013 f964 	bl	22632 <net_buf_simple_add>
	hdr->len = len;
    f36a:	2401      	movs	r4, #1
	hdr->evt = evt;
    f36c:	221a      	movs	r2, #26
    f36e:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
    f370:	7044      	strb	r4, [r0, #1]
    f372:	6830      	ldr	r0, [r6, #0]
    f374:	4621      	mov	r1, r4
    f376:	3008      	adds	r0, #8
    f378:	f013 f95b 	bl	22632 <net_buf_simple_add>
    f37c:	4603      	mov	r3, r0
		return -ENOBUFS;
    f37e:	f06f 0068 	mvn.w	r0, #104	; 0x68
	ep->link_type = BT_OVERFLOW_LINK_ACL;
    f382:	701c      	strb	r4, [r3, #0]
    f384:	e793      	b.n	f2ae <hci_acl_handle+0x46>
    f386:	bf00      	nop
    f388:	0002393c 	.word	0x0002393c
    f38c:	00023984 	.word	0x00023984
    f390:	000244e8 	.word	0x000244e8
    f394:	00024484 	.word	0x00024484
    f398:	000244b8 	.word	0x000244b8
    f39c:	00024498 	.word	0x00024498
    f3a0:	000244d4 	.word	0x000244d4
    f3a4:	20000128 	.word	0x20000128

0000f3a8 <hci_disconn_complete_encode>:
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    f3a8:	4b06      	ldr	r3, [pc, #24]	; (f3c4 <hci_disconn_complete_encode+0x1c>)
    f3aa:	681b      	ldr	r3, [r3, #0]
{
    f3ac:	b430      	push	{r4, r5}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    f3ae:	f003 0410 	and.w	r4, r3, #16
    f3b2:	2500      	movs	r5, #0
    f3b4:	ea54 0305 	orrs.w	r3, r4, r5
    f3b8:	d101      	bne.n	f3be <hci_disconn_complete_encode+0x16>
}
    f3ba:	bc30      	pop	{r4, r5}
    f3bc:	4770      	bx	lr
    f3be:	bc30      	pop	{r4, r5}
    f3c0:	f7ff baca 	b.w	e958 <hci_disconn_complete_encode.part.0>
    f3c4:	20000128 	.word	0x20000128

0000f3c8 <hci_disconn_complete_process>:
	conn_count--;
    f3c8:	4a02      	ldr	r2, [pc, #8]	; (f3d4 <hci_disconn_complete_process+0xc>)
    f3ca:	6813      	ldr	r3, [r2, #0]
    f3cc:	3b01      	subs	r3, #1
    f3ce:	6013      	str	r3, [r2, #0]
}
    f3d0:	4770      	bx	lr
    f3d2:	bf00      	nop
    f3d4:	20001888 	.word	0x20001888

0000f3d8 <hci_acl_encode>:
	uint16_t handle;
	uint8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
    f3d8:	7f03      	ldrb	r3, [r0, #28]
    f3da:	f003 0303 	and.w	r3, r3, #3
    f3de:	3b01      	subs	r3, #1
    f3e0:	2b01      	cmp	r3, #1
{
    f3e2:	b570      	push	{r4, r5, r6, lr}
	switch (pdu_data->ll_id) {
    f3e4:	d90d      	bls.n	f402 <hci_acl_encode+0x2a>
		}
#endif
		break;

	default:
		LL_ASSERT(0);
    f3e6:	4a16      	ldr	r2, [pc, #88]	; (f440 <hci_acl_encode+0x68>)
    f3e8:	4916      	ldr	r1, [pc, #88]	; (f444 <hci_acl_encode+0x6c>)
    f3ea:	4817      	ldr	r0, [pc, #92]	; (f448 <hci_acl_encode+0x70>)
    f3ec:	f241 73d4 	movw	r3, #6100	; 0x17d4
    f3f0:	f00e ffc8 	bl	1e384 <printk>
    f3f4:	4040      	eors	r0, r0
    f3f6:	f380 8811 	msr	BASEPRI, r0
    f3fa:	f04f 0003 	mov.w	r0, #3
    f3fe:	df02      	svc	2
		break;
	}
}
    f400:	bd70      	pop	{r4, r5, r6, pc}
    f402:	4604      	mov	r4, r0
    f404:	f101 0508 	add.w	r5, r1, #8
    f408:	4628      	mov	r0, r5
    f40a:	2104      	movs	r1, #4
	handle = node_rx->hdr.handle;
    f40c:	88e6      	ldrh	r6, [r4, #6]
    f40e:	f013 f910 	bl	22632 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    f412:	7f23      	ldrb	r3, [r4, #28]
    f414:	f003 0303 	and.w	r3, r3, #3
    f418:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    f41a:	bf0c      	ite	eq
    f41c:	f446 5600 	orreq.w	r6, r6, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    f420:	f446 5680 	orrne.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
    f424:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
    f426:	7f61      	ldrb	r1, [r4, #29]
    f428:	8041      	strh	r1, [r0, #2]
    f42a:	4628      	mov	r0, r5
    f42c:	f013 f901 	bl	22632 <net_buf_simple_add>
    f430:	7f62      	ldrb	r2, [r4, #29]
    f432:	f104 011f 	add.w	r1, r4, #31
}
    f436:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f43a:	f014 b912 	b.w	23662 <memcpy>
    f43e:	bf00      	nop
    f440:	000244fc 	.word	0x000244fc
    f444:	000243a4 	.word	0x000243a4
    f448:	00024334 	.word	0x00024334

0000f44c <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
    f44c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct pdu_data *pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    f450:	7905      	ldrb	r5, [r0, #4]
    f452:	88c7      	ldrh	r7, [r0, #6]
    f454:	2d03      	cmp	r5, #3
{
    f456:	4604      	mov	r4, r0
    f458:	b088      	sub	sp, #32
    f45a:	460e      	mov	r6, r1
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
    f45c:	f100 001c 	add.w	r0, r0, #28
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    f460:	d00c      	beq.n	f47c <hci_evt_encode+0x30>
	switch (node_rx->hdr.type) {
    f462:	3d14      	subs	r5, #20
    f464:	2d06      	cmp	r5, #6
    f466:	f200 8263 	bhi.w	f930 <hci_evt_encode+0x4e4>
    f46a:	e8df f015 	tbh	[pc, r5, lsl #1]
    f46e:	005c      	.short	0x005c
    f470:	00b400d6 	.word	0x00b400d6
    f474:	00e30114 	.word	0x00e30114
    f478:	002100fa 	.word	0x002100fa
	switch (pdu_data->llctrl.opcode) {
    f47c:	7fe3      	ldrb	r3, [r4, #31]
    f47e:	3b03      	subs	r3, #3
    f480:	2b12      	cmp	r3, #18
    f482:	f200 8122 	bhi.w	f6ca <hci_evt_encode+0x27e>
    f486:	e8df f013 	tbh	[pc, r3, lsl #1]
    f48a:	016e      	.short	0x016e
    f48c:	01200120 	.word	0x01200120
    f490:	01b30191 	.word	0x01b30191
    f494:	01c30120 	.word	0x01c30120
    f498:	01200120 	.word	0x01200120
    f49c:	01ca0120 	.word	0x01ca0120
    f4a0:	01d90120 	.word	0x01d90120
    f4a4:	01200120 	.word	0x01200120
    f4a8:	01200120 	.word	0x01200120
    f4ac:	012e012e 	.word	0x012e012e
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    f4b0:	4bc5      	ldr	r3, [pc, #788]	; (f7c8 <hci_evt_encode+0x37c>)
    f4b2:	6858      	ldr	r0, [r3, #4]
    f4b4:	2100      	movs	r1, #0
    f4b6:	460a      	mov	r2, r1
    f4b8:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    f4bc:	4313      	orrs	r3, r2
    f4be:	d007      	beq.n	f4d0 <hci_evt_encode+0x84>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    f4c0:	4bc2      	ldr	r3, [pc, #776]	; (f7cc <hci_evt_encode+0x380>)
    f4c2:	6818      	ldr	r0, [r3, #0]
    f4c4:	460b      	mov	r3, r1
    f4c6:	f400 6200 	and.w	r2, r0, #2048	; 0x800
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    f4ca:	4313      	orrs	r3, r2
    f4cc:	f040 812b 	bne.w	f726 <hci_evt_encode+0x2da>
    f4d0:	7f61      	ldrb	r1, [r4, #29]
    f4d2:	48bf      	ldr	r0, [pc, #764]	; (f7d0 <hci_evt_encode+0x384>)
    f4d4:	4bbf      	ldr	r3, [pc, #764]	; (f7d4 <hci_evt_encode+0x388>)
    f4d6:	7fa2      	ldrb	r2, [r4, #30]
		BT_WARN("handle: 0x%04x, status: %x, tx: %x, rx: %x.", handle,
    f4d8:	7f25      	ldrb	r5, [r4, #28]
    f4da:	9704      	str	r7, [sp, #16]
    f4dc:	2900      	cmp	r1, #0
    f4de:	eba3 0300 	sub.w	r3, r3, r0
    f4e2:	fa91 f1a1 	rbit	r1, r1
    f4e6:	fab1 f181 	clz	r1, r1
    f4ea:	ea4f 03d3 	mov.w	r3, r3, lsr #3
    f4ee:	bf08      	it	eq
    f4f0:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
    f4f4:	2a00      	cmp	r2, #0
    f4f6:	fa92 f2a2 	rbit	r2, r2
    f4fa:	fab2 f282 	clz	r2, r2
    f4fe:	f101 0001 	add.w	r0, r1, #1
    f502:	bf08      	it	eq
    f504:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    f508:	019b      	lsls	r3, r3, #6
    f50a:	1c54      	adds	r4, r2, #1
    f50c:	9006      	str	r0, [sp, #24]
    f50e:	f043 0302 	orr.w	r3, r3, #2
    f512:	48b1      	ldr	r0, [pc, #708]	; (f7d8 <hci_evt_encode+0x38c>)
    f514:	9407      	str	r4, [sp, #28]
    f516:	2204      	movs	r2, #4
    f518:	a904      	add	r1, sp, #16
    f51a:	9505      	str	r5, [sp, #20]
    f51c:	f00f fb62 	bl	1ebe4 <log_n>
		encode_control(node_rx, pdu_data, buf);
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    f520:	b008      	add	sp, #32
    f522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t status = cc->status;
    f526:	7f25      	ldrb	r5, [r4, #28]
	if (!status) {
    f528:	2d00      	cmp	r5, #0
    f52a:	f000 81a5 	beq.w	f878 <hci_evt_encode+0x42c>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    f52e:	4ba6      	ldr	r3, [pc, #664]	; (f7c8 <hci_evt_encode+0x37c>)
    f530:	6859      	ldr	r1, [r3, #4]
    f532:	f04f 0800 	mov.w	r8, #0
    f536:	4642      	mov	r2, r8
    f538:	f001 5300 	and.w	r3, r1, #536870912	; 0x20000000
    f53c:	4313      	orrs	r3, r2
    f53e:	d0ef      	beq.n	f520 <hci_evt_encode+0xd4>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    f540:	4ba2      	ldr	r3, [pc, #648]	; (f7cc <hci_evt_encode+0x380>)
    f542:	f8d3 c000 	ldr.w	ip, [r3]
    f546:	f240 2101 	movw	r1, #513	; 0x201
    f54a:	ea0c 0201 	and.w	r2, ip, r1
    f54e:	4643      	mov	r3, r8
    f550:	4313      	orrs	r3, r2
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    f552:	f40c 7000 	and.w	r0, ip, #512	; 0x200
    f556:	4641      	mov	r1, r8
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    f558:	d0e2      	beq.n	f520 <hci_evt_encode+0xd4>
	if (!status) {
    f55a:	2d00      	cmp	r5, #0
    f55c:	f040 819f 	bne.w	f89e <hci_evt_encode+0x452>
		conn_count++;
    f560:	4a9e      	ldr	r2, [pc, #632]	; (f7dc <hci_evt_encode+0x390>)
    f562:	6813      	ldr	r3, [r2, #0]
    f564:	3301      	adds	r3, #1
    f566:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    f568:	ea50 0301 	orrs.w	r3, r0, r1
    f56c:	f104 081f 	add.w	r8, r4, #31
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    f570:	4630      	mov	r0, r6
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    f572:	f000 81a3 	beq.w	f8bc <hci_evt_encode+0x470>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    f576:	221e      	movs	r2, #30
    f578:	210a      	movs	r1, #10
    f57a:	f7ff f985 	bl	e888 <meta_evt>
		leecc->status = 0x00;
    f57e:	7005      	strb	r5, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
    f580:	f8a0 7001 	strh.w	r7, [r0, #1]
		leecc->role = cc->role;
    f584:	7f62      	ldrb	r2, [r4, #29]
    f586:	70c2      	strb	r2, [r0, #3]
		leecc->peer_addr.type = cc->peer_addr_type;
    f588:	7fa2      	ldrb	r2, [r4, #30]
    f58a:	7102      	strb	r2, [r0, #4]
    f58c:	f8d8 2000 	ldr.w	r2, [r8]
    f590:	f8c0 2005 	str.w	r2, [r0, #5]
    f594:	f8b8 2004 	ldrh.w	r2, [r8, #4]
    f598:	f8a0 2009 	strh.w	r2, [r0, #9]
    f59c:	4623      	mov	r3, r4
    f59e:	f853 2f2b 	ldr.w	r2, [r3, #43]!
    f5a2:	f8c0 200b 	str.w	r2, [r0, #11]
    f5a6:	889b      	ldrh	r3, [r3, #4]
    f5a8:	f8a0 300f 	strh.w	r3, [r0, #15]
    f5ac:	4623      	mov	r3, r4
    f5ae:	f853 2f25 	ldr.w	r2, [r3, #37]!
    f5b2:	f8c0 2011 	str.w	r2, [r0, #17]
    f5b6:	889b      	ldrh	r3, [r3, #4]
    f5b8:	f8a0 3015 	strh.w	r3, [r0, #21]
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
    f5bc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
		leecc->interval = sys_cpu_to_le16(cc->interval);
    f5be:	8e61      	ldrh	r1, [r4, #50]	; 0x32
		leecc->latency = sys_cpu_to_le16(cc->latency);
    f5c0:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    f5c2:	f8a0 2019 	strh.w	r2, [r0, #25]
		leecc->interval = sys_cpu_to_le16(cc->interval);
    f5c6:	f8a0 1017 	strh.w	r1, [r0, #23]
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
    f5ca:	f8a0 301b 	strh.w	r3, [r0, #27]
		leecc->clock_accuracy = cc->sca;
    f5ce:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    f5d2:	7743      	strb	r3, [r0, #29]
		return;
    f5d4:	e7a4      	b.n	f520 <hci_evt_encode+0xd4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    f5d6:	4b7c      	ldr	r3, [pc, #496]	; (f7c8 <hci_evt_encode+0x37c>)
    f5d8:	6858      	ldr	r0, [r3, #4]
    f5da:	2100      	movs	r1, #0
    f5dc:	460a      	mov	r2, r1
    f5de:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    f5e2:	4313      	orrs	r3, r2
    f5e4:	d09c      	beq.n	f520 <hci_evt_encode+0xd4>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    f5e6:	4b79      	ldr	r3, [pc, #484]	; (f7cc <hci_evt_encode+0x380>)
    f5e8:	6818      	ldr	r0, [r3, #0]
    f5ea:	460b      	mov	r3, r1
    f5ec:	f000 0204 	and.w	r2, r0, #4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    f5f0:	4313      	orrs	r3, r2
    f5f2:	d095      	beq.n	f520 <hci_evt_encode+0xd4>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
    f5f4:	2209      	movs	r2, #9
    f5f6:	2103      	movs	r1, #3
    f5f8:	4630      	mov	r0, r6
    f5fa:	f7ff f945 	bl	e888 <meta_evt>
	sep->status = cu->status;
    f5fe:	7f23      	ldrb	r3, [r4, #28]
    f600:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
    f602:	8be1      	ldrh	r1, [r4, #30]
	sep->latency = sys_cpu_to_le16(cu->latency);
    f604:	8c22      	ldrh	r2, [r4, #32]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
    f606:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    f608:	f8a0 3007 	strh.w	r3, [r0, #7]
	sep->handle = sys_cpu_to_le16(handle);
    f60c:	f8a0 7001 	strh.w	r7, [r0, #1]
	sep->interval = sys_cpu_to_le16(cu->interval);
    f610:	f8a0 1003 	strh.w	r1, [r0, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
    f614:	f8a0 2005 	strh.w	r2, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
    f618:	e782      	b.n	f520 <hci_evt_encode+0xd4>
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    f61a:	4b6b      	ldr	r3, [pc, #428]	; (f7c8 <hci_evt_encode+0x37c>)
    f61c:	6819      	ldr	r1, [r3, #0]
    f61e:	2300      	movs	r3, #0
    f620:	f001 0210 	and.w	r2, r1, #16
    f624:	4313      	orrs	r3, r2
    f626:	f43f af7b 	beq.w	f520 <hci_evt_encode+0xd4>
    f62a:	4632      	mov	r2, r6
    f62c:	4639      	mov	r1, r7
    f62e:	f7ff f993 	bl	e958 <hci_disconn_complete_encode.part.0>
    f632:	e775      	b.n	f520 <hci_evt_encode+0xd4>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
    f634:	4b6a      	ldr	r3, [pc, #424]	; (f7e0 <hci_evt_encode+0x394>)
    f636:	6819      	ldr	r1, [r3, #0]
    f638:	2300      	movs	r3, #0
    f63a:	f401 0200 	and.w	r2, r1, #8388608	; 0x800000
    f63e:	4313      	orrs	r3, r2
    f640:	f43f af6e 	beq.w	f520 <hci_evt_encode+0xd4>
    f644:	3608      	adds	r6, #8
    f646:	2102      	movs	r1, #2
    f648:	4630      	mov	r0, r6
    f64a:	f012 fff2 	bl	22632 <net_buf_simple_add>
    f64e:	4603      	mov	r3, r0
	hdr->evt = evt;
    f650:	2257      	movs	r2, #87	; 0x57
	hdr->len = len;
    f652:	2102      	movs	r1, #2
    f654:	4630      	mov	r0, r6
	hdr->evt = evt;
    f656:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
    f658:	7059      	strb	r1, [r3, #1]
    f65a:	f012 ffea 	bl	22632 <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
    f65e:	8007      	strh	r7, [r0, #0]
    f660:	e75e      	b.n	f520 <hci_evt_encode+0xd4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    f662:	4b59      	ldr	r3, [pc, #356]	; (f7c8 <hci_evt_encode+0x37c>)
    f664:	6858      	ldr	r0, [r3, #4]
    f666:	2100      	movs	r1, #0
    f668:	460a      	mov	r2, r1
    f66a:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    f66e:	4313      	orrs	r3, r2
    f670:	f43f af56 	beq.w	f520 <hci_evt_encode+0xd4>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    f674:	4b55      	ldr	r3, [pc, #340]	; (f7cc <hci_evt_encode+0x380>)
    f676:	6818      	ldr	r0, [r3, #0]
    f678:	460b      	mov	r3, r1
    f67a:	f400 2200 	and.w	r2, r0, #524288	; 0x80000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    f67e:	4313      	orrs	r3, r2
    f680:	f43f af4e 	beq.w	f520 <hci_evt_encode+0xd4>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
    f684:	4630      	mov	r0, r6
    f686:	2203      	movs	r2, #3
    f688:	2114      	movs	r1, #20
    f68a:	f7ff f8fd 	bl	e888 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    f68e:	8007      	strh	r7, [r0, #0]
	sep->chan_sel_algo = cs->csa;
    f690:	7f23      	ldrb	r3, [r4, #28]
    f692:	7083      	strb	r3, [r0, #2]
    f694:	e744      	b.n	f520 <hci_evt_encode+0xd4>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    f696:	4b4c      	ldr	r3, [pc, #304]	; (f7c8 <hci_evt_encode+0x37c>)
    f698:	6859      	ldr	r1, [r3, #4]
    f69a:	2400      	movs	r4, #0
    f69c:	4622      	mov	r2, r4
    f69e:	f401 4300 	and.w	r3, r1, #32768	; 0x8000
    f6a2:	4313      	orrs	r3, r2
    f6a4:	f43f af3c 	beq.w	f520 <hci_evt_encode+0xd4>
    f6a8:	3608      	adds	r6, #8
    f6aa:	2102      	movs	r1, #2
    f6ac:	4630      	mov	r0, r6
    f6ae:	f012 ffc0 	bl	22632 <net_buf_simple_add>
    f6b2:	4603      	mov	r3, r0
	hdr->evt = evt;
    f6b4:	2230      	movs	r2, #48	; 0x30
	hdr->len = len;
    f6b6:	2103      	movs	r1, #3
    f6b8:	4630      	mov	r0, r6
	hdr->evt = evt;
    f6ba:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
    f6bc:	7059      	strb	r1, [r3, #1]
    f6be:	f012 ffb8 	bl	22632 <net_buf_simple_add>
	ep->status = 0x00;
    f6c2:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    f6c4:	f8a0 7001 	strh.w	r7, [r0, #1]
    f6c8:	e72a      	b.n	f520 <hci_evt_encode+0xd4>
		LL_ASSERT(0);
    f6ca:	f241 73a8 	movw	r3, #6056	; 0x17a8
    f6ce:	4a45      	ldr	r2, [pc, #276]	; (f7e4 <hci_evt_encode+0x398>)
    f6d0:	4945      	ldr	r1, [pc, #276]	; (f7e8 <hci_evt_encode+0x39c>)
    f6d2:	4846      	ldr	r0, [pc, #280]	; (f7ec <hci_evt_encode+0x3a0>)
    f6d4:	f00e fe56 	bl	1e384 <printk>
    f6d8:	4040      	eors	r0, r0
    f6da:	f380 8811 	msr	BASEPRI, r0
    f6de:	f04f 0003 	mov.w	r0, #3
    f6e2:	df02      	svc	2
}
    f6e4:	e71c      	b.n	f520 <hci_evt_encode+0xd4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    f6e6:	4b38      	ldr	r3, [pc, #224]	; (f7c8 <hci_evt_encode+0x37c>)
    f6e8:	6858      	ldr	r0, [r3, #4]
    f6ea:	2100      	movs	r1, #0
    f6ec:	460a      	mov	r2, r1
    f6ee:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    f6f2:	4313      	orrs	r3, r2
    f6f4:	f43f af14 	beq.w	f520 <hci_evt_encode+0xd4>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    f6f8:	4b34      	ldr	r3, [pc, #208]	; (f7cc <hci_evt_encode+0x380>)
    f6fa:	6818      	ldr	r0, [r3, #0]
    f6fc:	460b      	mov	r3, r1
    f6fe:	f000 0240 	and.w	r2, r0, #64	; 0x40
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    f702:	4313      	orrs	r3, r2
    f704:	f43f af0c 	beq.w	f520 <hci_evt_encode+0xd4>
	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
    f708:	4630      	mov	r0, r6
    f70a:	220a      	movs	r2, #10
    f70c:	2107      	movs	r1, #7
    f70e:	f7ff f8bb 	bl	e888 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    f712:	8007      	strh	r7, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
    f714:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    f716:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
    f718:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    f71a:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
    f71c:	8c23      	ldrh	r3, [r4, #32]
    f71e:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    f720:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    f722:	8103      	strh	r3, [r0, #8]
    f724:	e6fc      	b.n	f520 <hci_evt_encode+0xd4>
	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
    f726:	2205      	movs	r2, #5
    f728:	4630      	mov	r0, r6
    f72a:	210c      	movs	r1, #12
    f72c:	f7ff f8ac 	bl	e888 <meta_evt>
	sep->status = pu->status;
    f730:	7f23      	ldrb	r3, [r4, #28]
    f732:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    f734:	f8a0 7001 	strh.w	r7, [r0, #1]
    f738:	7f62      	ldrb	r2, [r4, #29]
    f73a:	2a00      	cmp	r2, #0
    f73c:	fa92 f3a2 	rbit	r3, r2
    f740:	fab3 f383 	clz	r3, r3
    f744:	bf08      	it	eq
    f746:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    f74a:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(pu->tx);
    f74c:	70c3      	strb	r3, [r0, #3]
    f74e:	7fa2      	ldrb	r2, [r4, #30]
    f750:	fa92 f3a2 	rbit	r3, r2
    f754:	2a00      	cmp	r2, #0
    f756:	fab3 f383 	clz	r3, r3
    f75a:	bf08      	it	eq
    f75c:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    f760:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(pu->rx);
    f762:	7103      	strb	r3, [r0, #4]
    f764:	e6dc      	b.n	f520 <hci_evt_encode+0xd4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    f766:	4b18      	ldr	r3, [pc, #96]	; (f7c8 <hci_evt_encode+0x37c>)
    f768:	6858      	ldr	r0, [r3, #4]
    f76a:	2100      	movs	r1, #0
    f76c:	460a      	mov	r2, r1
    f76e:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    f772:	4313      	orrs	r3, r2
    f774:	f43f aed4 	beq.w	f520 <hci_evt_encode+0xd4>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    f778:	4b14      	ldr	r3, [pc, #80]	; (f7cc <hci_evt_encode+0x380>)
    f77a:	6818      	ldr	r0, [r3, #0]
    f77c:	460b      	mov	r3, r1
    f77e:	f000 0210 	and.w	r2, r0, #16
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    f782:	4313      	orrs	r3, r2
    f784:	f43f aecc 	beq.w	f520 <hci_evt_encode+0xd4>
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    f788:	220c      	movs	r2, #12
    f78a:	2105      	movs	r1, #5
    f78c:	4630      	mov	r0, r6
    f78e:	f7ff f87b 	bl	e888 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    f792:	4603      	mov	r3, r0
    f794:	4622      	mov	r2, r4
    f796:	f823 7b02 	strh.w	r7, [r3], #2
    f79a:	f852 1f20 	ldr.w	r1, [r2, #32]!
    f79e:	6852      	ldr	r2, [r2, #4]
    f7a0:	f8c0 1002 	str.w	r1, [r0, #2]
    f7a4:	605a      	str	r2, [r3, #4]
    f7a6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    f7a8:	8143      	strh	r3, [r0, #10]
    f7aa:	e6b9      	b.n	f520 <hci_evt_encode+0xd4>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    f7ac:	4b06      	ldr	r3, [pc, #24]	; (f7c8 <hci_evt_encode+0x37c>)
    f7ae:	6819      	ldr	r1, [r3, #0]
    f7b0:	2000      	movs	r0, #0
    f7b2:	f001 0280 	and.w	r2, r1, #128	; 0x80
    f7b6:	4603      	mov	r3, r0
    f7b8:	4313      	orrs	r3, r2
    f7ba:	f43f aeb1 	beq.w	f520 <hci_evt_encode+0xd4>
    f7be:	4632      	mov	r2, r6
    f7c0:	4639      	mov	r1, r7
    f7c2:	f7ff f879 	bl	e8b8 <encrypt_change.part.0>
    f7c6:	e6ab      	b.n	f520 <hci_evt_encode+0xd4>
    f7c8:	20000128 	.word	0x20000128
    f7cc:	20000130 	.word	0x20000130
    f7d0:	0002393c 	.word	0x0002393c
    f7d4:	00023984 	.word	0x00023984
    f7d8:	00024538 	.word	0x00024538
    f7dc:	20001888 	.word	0x20001888
    f7e0:	20001070 	.word	0x20001070
    f7e4:	000244fc 	.word	0x000244fc
    f7e8:	000243a4 	.word	0x000243a4
    f7ec:	00024334 	.word	0x00024334
		le_unknown_rsp(pdu_data, handle, buf);
    f7f0:	f894 1020 	ldrb.w	r1, [r4, #32]
	switch (pdu_data->llctrl.unknown_rsp.type) {
    f7f4:	290e      	cmp	r1, #14
    f7f6:	f000 8083 	beq.w	f900 <hci_evt_encode+0x4b4>
    f7fa:	4b4f      	ldr	r3, [pc, #316]	; (f938 <hci_evt_encode+0x4ec>)
    f7fc:	4a4f      	ldr	r2, [pc, #316]	; (f93c <hci_evt_encode+0x4f0>)
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
    f7fe:	4850      	ldr	r0, [pc, #320]	; (f940 <hci_evt_encode+0x4f4>)
    f800:	1ad2      	subs	r2, r2, r3
    f802:	08d2      	lsrs	r2, r2, #3
    f804:	0192      	lsls	r2, r2, #6
    f806:	f042 0202 	orr.w	r2, r2, #2
    f80a:	f00f f9a2 	bl	1eb52 <log_1>
    f80e:	e687      	b.n	f520 <hci_evt_encode+0xd4>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    f810:	460b      	mov	r3, r1
    f812:	463a      	mov	r2, r7
    f814:	4601      	mov	r1, r0
    f816:	2000      	movs	r0, #0
    f818:	f7ff f868 	bl	e8ec <le_remote_feat_complete>
		break;
    f81c:	e680      	b.n	f520 <hci_evt_encode+0xd4>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    f81e:	4b49      	ldr	r3, [pc, #292]	; (f944 <hci_evt_encode+0x4f8>)
    f820:	6819      	ldr	r1, [r3, #0]
    f822:	2300      	movs	r3, #0
    f824:	f001 0280 	and.w	r2, r1, #128	; 0x80
    f828:	4313      	orrs	r3, r2
    f82a:	f43f ae79 	beq.w	f520 <hci_evt_encode+0xd4>
    f82e:	f894 0020 	ldrb.w	r0, [r4, #32]
    f832:	4632      	mov	r2, r6
    f834:	4639      	mov	r1, r7
    f836:	f7ff f83f 	bl	e8b8 <encrypt_change.part.0>
    f83a:	e671      	b.n	f520 <hci_evt_encode+0xd4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    f83c:	4b41      	ldr	r3, [pc, #260]	; (f944 <hci_evt_encode+0x4f8>)
    f83e:	6858      	ldr	r0, [r3, #4]
    f840:	2100      	movs	r1, #0
    f842:	460a      	mov	r2, r1
    f844:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    f848:	4313      	orrs	r3, r2
    f84a:	d01e      	beq.n	f88a <hci_evt_encode+0x43e>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    f84c:	4b3e      	ldr	r3, [pc, #248]	; (f948 <hci_evt_encode+0x4fc>)
    f84e:	6818      	ldr	r0, [r3, #0]
    f850:	460b      	mov	r3, r1
    f852:	f000 0220 	and.w	r2, r0, #32
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    f856:	4313      	orrs	r3, r2
    f858:	d017      	beq.n	f88a <hci_evt_encode+0x43e>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
    f85a:	4630      	mov	r0, r6
    f85c:	220a      	movs	r2, #10
    f85e:	2106      	movs	r1, #6
    f860:	f7ff f812 	bl	e888 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    f864:	8007      	strh	r7, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
    f866:	8c23      	ldrh	r3, [r4, #32]
    f868:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
    f86a:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    f86c:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
    f86e:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    f870:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
    f872:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    f874:	8103      	strh	r3, [r0, #8]
    f876:	e653      	b.n	f520 <hci_evt_encode+0xd4>
		ll_rl_crpa_set(cc->peer_addr_type,
    f878:	7fa0      	ldrb	r0, [r4, #30]
    f87a:	f104 0325 	add.w	r3, r4, #37	; 0x25
    f87e:	22ff      	movs	r2, #255	; 0xff
    f880:	f104 011f 	add.w	r1, r4, #31
    f884:	f007 fca8 	bl	171d8 <ll_rl_crpa_set>
    f888:	e651      	b.n	f52e <hci_evt_encode+0xe2>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
    f88a:	2300      	movs	r3, #0
    f88c:	e9cd 3301 	strd	r3, r3, [sp, #4]
    f890:	4638      	mov	r0, r7
    f892:	9300      	str	r3, [sp, #0]
    f894:	221a      	movs	r2, #26
    f896:	2102      	movs	r1, #2
    f898:	f002 fddc 	bl	12454 <ll_conn_update>
		return;
    f89c:	e640      	b.n	f520 <hci_evt_encode+0xd4>
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    f89e:	ea50 0301 	orrs.w	r3, r0, r1
    f8a2:	d034      	beq.n	f90e <hci_evt_encode+0x4c2>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    f8a4:	221e      	movs	r2, #30
    f8a6:	210a      	movs	r1, #10
    f8a8:	4630      	mov	r0, r6
    f8aa:	f7fe ffed 	bl	e888 <meta_evt>
    f8ae:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
    f8b0:	4641      	mov	r1, r8
    f8b2:	221e      	movs	r2, #30
    f8b4:	f013 fee3 	bl	2367e <memset>
			leecc->status = status;
    f8b8:	7025      	strb	r5, [r4, #0]
			return;
    f8ba:	e631      	b.n	f520 <hci_evt_encode+0xd4>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    f8bc:	2212      	movs	r2, #18
    f8be:	2101      	movs	r1, #1
    f8c0:	f7fe ffe2 	bl	e888 <meta_evt>
	lecc->status = 0x00;
    f8c4:	7005      	strb	r5, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
    f8c6:	f8a0 7001 	strh.w	r7, [r0, #1]
	lecc->role = cc->role;
    f8ca:	7f63      	ldrb	r3, [r4, #29]
    f8cc:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = cc->peer_addr_type & 0x1;
    f8ce:	7fa3      	ldrb	r3, [r4, #30]
    f8d0:	f003 0301 	and.w	r3, r3, #1
    f8d4:	7103      	strb	r3, [r0, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    f8d6:	f8d8 3000 	ldr.w	r3, [r8]
    f8da:	f8c0 3005 	str.w	r3, [r0, #5]
    f8de:	f8b8 3004 	ldrh.w	r3, [r8, #4]
    f8e2:	f8a0 3009 	strh.w	r3, [r0, #9]
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
    f8e6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
	lecc->interval = sys_cpu_to_le16(cc->interval);
    f8e8:	8e61      	ldrh	r1, [r4, #50]	; 0x32
	lecc->latency = sys_cpu_to_le16(cc->latency);
    f8ea:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    f8ec:	f8a0 200d 	strh.w	r2, [r0, #13]
	lecc->interval = sys_cpu_to_le16(cc->interval);
    f8f0:	f8a0 100b 	strh.w	r1, [r0, #11]
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
    f8f4:	f8a0 300f 	strh.w	r3, [r0, #15]
	lecc->clock_accuracy = cc->sca;
    f8f8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    f8fc:	7443      	strb	r3, [r0, #17]
    f8fe:	e60f      	b.n	f520 <hci_evt_encode+0xd4>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    f900:	4633      	mov	r3, r6
    f902:	463a      	mov	r2, r7
    f904:	2100      	movs	r1, #0
    f906:	201a      	movs	r0, #26
    f908:	f7fe fff0 	bl	e8ec <le_remote_feat_complete>
		break;
    f90c:	e608      	b.n	f520 <hci_evt_encode+0xd4>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    f90e:	4630      	mov	r0, r6
    f910:	2212      	movs	r2, #18
    f912:	2101      	movs	r1, #1
    f914:	f7fe ffb8 	bl	e888 <meta_evt>
__ssp_bos_icheck3(memset, void *, int)
    f918:	f8c0 8000 	str.w	r8, [r0]
    f91c:	f8c0 8004 	str.w	r8, [r0, #4]
    f920:	f8c0 8008 	str.w	r8, [r0, #8]
    f924:	f8c0 800c 	str.w	r8, [r0, #12]
    f928:	f8a0 8010 	strh.w	r8, [r0, #16]
		lecc->status = status;
    f92c:	7005      	strb	r5, [r0, #0]
		return;
    f92e:	e5f7      	b.n	f520 <hci_evt_encode+0xd4>
		LL_ASSERT(0);
    f930:	f241 63df 	movw	r3, #5855	; 0x16df
    f934:	e6cb      	b.n	f6ce <hci_evt_encode+0x282>
    f936:	bf00      	nop
    f938:	0002393c 	.word	0x0002393c
    f93c:	00023984 	.word	0x00023984
    f940:	00024564 	.word	0x00024564
    f944:	20000128 	.word	0x20000128
    f948:	20000130 	.word	0x20000130

0000f94c <hci_num_cmplt_encode>:

#if defined(CONFIG_BT_CONN)
void hci_num_cmplt_encode(struct net_buf *buf, uint16_t handle, uint8_t num)
{
    f94c:	b570      	push	{r4, r5, r6, lr}
    f94e:	f100 0408 	add.w	r4, r0, #8
    f952:	460e      	mov	r6, r1
    f954:	4620      	mov	r0, r4
    f956:	2102      	movs	r1, #2
    f958:	4615      	mov	r5, r2
    f95a:	f012 fe6a 	bl	22632 <net_buf_simple_add>
    f95e:	4603      	mov	r3, r0
	hdr->evt = evt;
    f960:	2213      	movs	r2, #19
	hdr->len = len;
    f962:	2105      	movs	r1, #5
	hdr->evt = evt;
    f964:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
    f966:	7059      	strb	r1, [r3, #1]
    f968:	4620      	mov	r0, r4
    f96a:	f012 fe62 	bl	22632 <net_buf_simple_add>

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	hci_evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
	ep->num_handles = num_handles;
    f96e:	2301      	movs	r3, #1
    f970:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
    f972:	f8a0 6001 	strh.w	r6, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
    f976:	f8a0 5003 	strh.w	r5, [r0, #3]
}
    f97a:	bd70      	pop	{r4, r5, r6, pc}

0000f97c <hci_get_class>:
{
#if defined(CONFIG_BT_CONN)
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
#endif

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    f97c:	7903      	ldrb	r3, [r0, #4]
    f97e:	2b03      	cmp	r3, #3
    f980:	d009      	beq.n	f996 <hci_get_class+0x1a>

		switch (node_rx->hdr.type) {
    f982:	2b14      	cmp	r3, #20
    f984:	d005      	beq.n	f992 <hci_get_class+0x16>
    f986:	3b15      	subs	r3, #21
		case NODE_RX_TYPE_USER_START ... NODE_RX_TYPE_USER_END - 1:
			return hci_user_ext_get_class(node_rx);
#endif /* CONFIG_BT_CTLR_USER_EVT_RANGE > 0 */

		default:
			return HCI_CLASS_NONE;
    f988:	2b05      	cmp	r3, #5
    f98a:	bf94      	ite	ls
    f98c:	2003      	movls	r0, #3
    f98e:	2000      	movhi	r0, #0
    f990:	4770      	bx	lr
			return HCI_CLASS_EVT_REQUIRED;
    f992:	2001      	movs	r0, #1
#else
	} else {
		return HCI_CLASS_NONE;
	}
#endif
}
    f994:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    f996:	7f03      	ldrb	r3, [r0, #28]
    f998:	f003 0303 	and.w	r3, r3, #3
    f99c:	2b03      	cmp	r3, #3
		return HCI_CLASS_ACL_DATA;
    f99e:	bf0c      	ite	eq
    f9a0:	2004      	moveq	r0, #4
    f9a2:	2005      	movne	r0, #5
    f9a4:	4770      	bx	lr
    f9a6:	bf00      	nop

0000f9a8 <hci_init>:

void hci_init(struct k_poll_signal *signal_host_buf)
{
    f9a8:	b430      	push	{r4, r5}
	event_mask = DEFAULT_EVENT_MASK;
    f9aa:	480b      	ldr	r0, [pc, #44]	; (f9d8 <hci_init+0x30>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    f9ac:	490b      	ldr	r1, [pc, #44]	; (f9dc <hci_init+0x34>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    f9ae:	4a0c      	ldr	r2, [pc, #48]	; (f9e0 <hci_init+0x38>)
	conn_count = 0U;
    f9b0:	4b0c      	ldr	r3, [pc, #48]	; (f9e4 <hci_init+0x3c>)
	event_mask = DEFAULT_EVENT_MASK;
    f9b2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    f9b6:	f641 75ff 	movw	r5, #8191	; 0x1fff
    f9ba:	e9c0 4500 	strd	r4, r5, [r0]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    f9be:	2400      	movs	r4, #0
    f9c0:	2500      	movs	r5, #0
    f9c2:	e9c1 4500 	strd	r4, r5, [r1]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    f9c6:	201f      	movs	r0, #31
    f9c8:	2100      	movs	r1, #0
    f9ca:	e9c2 0100 	strd	r0, r1, [r2]
	conn_count = 0U;
    f9ce:	2200      	movs	r2, #0
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
    f9d0:	bc30      	pop	{r4, r5}
	conn_count = 0U;
    f9d2:	601a      	str	r2, [r3, #0]
}
    f9d4:	4770      	bx	lr
    f9d6:	bf00      	nop
    f9d8:	20000128 	.word	0x20000128
    f9dc:	20001070 	.word	0x20001070
    f9e0:	20000130 	.word	0x20000130
    f9e4:	20001888 	.word	0x20001888

0000f9e8 <bt_rand>:
#include "hal/ecb.h"
#include "lll.h"

int bt_rand(void *buf, size_t len)
{
	return lll_csrand_get(buf, len);
    f9e8:	f007 bf72 	b.w	178d0 <lll_csrand_get>

0000f9ec <bt_encrypt_le>:
}

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
    f9ec:	b508      	push	{r3, lr}
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
    f9ee:	2300      	movs	r3, #0
    f9f0:	f009 fcbe 	bl	19370 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
    f9f4:	2000      	movs	r0, #0
    f9f6:	bd08      	pop	{r3, pc}

0000f9f8 <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
    f9f8:	b510      	push	{r4, lr}
    f9fa:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
    f9fc:	f007 ff8a 	bl	17914 <lll_reset>
	LL_ASSERT(!err);
    fa00:	b950      	cbnz	r0, fa18 <perform_lll_reset+0x20>

#if defined(CONFIG_BT_BROADCASTER)
	/* Reset adv state */
	err = lll_adv_reset();
    fa02:	f008 fb25 	bl	18050 <lll_adv_reset>
	LL_ASSERT(!err);
    fa06:	b9c0      	cbnz	r0, fa3a <perform_lll_reset+0x42>
	LL_ASSERT(!err);
#endif /* CONFIG_BT_OBSERVER */

#if defined(CONFIG_BT_CONN)
	/* Reset conn role */
	err = lll_conn_reset();
    fa08:	f008 ffb6 	bl	18978 <lll_conn_reset>
	LL_ASSERT(!err);
    fa0c:	bb30      	cbnz	r0, fa5c <perform_lll_reset+0x64>
	z_impl_k_sem_give(sem);
    fa0e:	4620      	mov	r0, r4
#endif /* CONFIG_BT_CTLR_DF */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
    fa10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fa14:	f00d be82 	b.w	1d71c <z_impl_k_sem_give>
	LL_ASSERT(!err);
    fa18:	4a19      	ldr	r2, [pc, #100]	; (fa80 <perform_lll_reset+0x88>)
    fa1a:	491a      	ldr	r1, [pc, #104]	; (fa84 <perform_lll_reset+0x8c>)
    fa1c:	481a      	ldr	r0, [pc, #104]	; (fa88 <perform_lll_reset+0x90>)
    fa1e:	f240 7329 	movw	r3, #1833	; 0x729
    fa22:	f00e fcaf 	bl	1e384 <printk>
    fa26:	4040      	eors	r0, r0
    fa28:	f380 8811 	msr	BASEPRI, r0
    fa2c:	f04f 0003 	mov.w	r0, #3
    fa30:	df02      	svc	2
	err = lll_adv_reset();
    fa32:	f008 fb0d 	bl	18050 <lll_adv_reset>
	LL_ASSERT(!err);
    fa36:	2800      	cmp	r0, #0
    fa38:	d0e6      	beq.n	fa08 <perform_lll_reset+0x10>
    fa3a:	4a11      	ldr	r2, [pc, #68]	; (fa80 <perform_lll_reset+0x88>)
    fa3c:	4911      	ldr	r1, [pc, #68]	; (fa84 <perform_lll_reset+0x8c>)
    fa3e:	4812      	ldr	r0, [pc, #72]	; (fa88 <perform_lll_reset+0x90>)
    fa40:	f240 732e 	movw	r3, #1838	; 0x72e
    fa44:	f00e fc9e 	bl	1e384 <printk>
    fa48:	4040      	eors	r0, r0
    fa4a:	f380 8811 	msr	BASEPRI, r0
    fa4e:	f04f 0003 	mov.w	r0, #3
    fa52:	df02      	svc	2
	err = lll_conn_reset();
    fa54:	f008 ff90 	bl	18978 <lll_conn_reset>
	LL_ASSERT(!err);
    fa58:	2800      	cmp	r0, #0
    fa5a:	d0d8      	beq.n	fa0e <perform_lll_reset+0x16>
    fa5c:	4a08      	ldr	r2, [pc, #32]	; (fa80 <perform_lll_reset+0x88>)
    fa5e:	4909      	ldr	r1, [pc, #36]	; (fa84 <perform_lll_reset+0x8c>)
    fa60:	4809      	ldr	r0, [pc, #36]	; (fa88 <perform_lll_reset+0x90>)
    fa62:	f240 733a 	movw	r3, #1850	; 0x73a
    fa66:	f00e fc8d 	bl	1e384 <printk>
    fa6a:	4040      	eors	r0, r0
    fa6c:	f380 8811 	msr	BASEPRI, r0
    fa70:	f04f 0003 	mov.w	r0, #3
    fa74:	df02      	svc	2
    fa76:	4620      	mov	r0, r4
}
    fa78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fa7c:	f00d be4e 	b.w	1d71c <z_impl_k_sem_give>
    fa80:	00024590 	.word	0x00024590
    fa84:	000245cc 	.word	0x000245cc
    fa88:	00024334 	.word	0x00024334

0000fa8c <ull_ticker_status_give>:
	*((uint32_t volatile *)param) = status;
    fa8c:	6008      	str	r0, [r1, #0]
    fa8e:	4801      	ldr	r0, [pc, #4]	; (fa94 <ull_ticker_status_give+0x8>)
    fa90:	f00d be44 	b.w	1d71c <z_impl_k_sem_give>
    fa94:	20001c88 	.word	0x20001c88

0000fa98 <disabled_cb>:
    fa98:	f00d be40 	b.w	1d71c <z_impl_k_sem_give>

0000fa9c <tx_cmplt_get>:
}
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL */

#if defined(CONFIG_BT_CONN)
static uint8_t tx_cmplt_get(uint16_t *handle, uint8_t *first, uint8_t last)
{
    fa9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_tx *tx;
	uint8_t cmplt;

	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    faa0:	4f2f      	ldr	r7, [pc, #188]	; (fb60 <tx_cmplt_get+0xc4>)
					   uint8_t first, uint8_t last, uint8_t *idx)
{
	void *p;
	uint8_t i;

	if (*idx >= count) {
    faa2:	780b      	ldrb	r3, [r1, #0]
    faa4:	783c      	ldrb	r4, [r7, #0]
{
    faa6:	460d      	mov	r5, r1
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    faa8:	7879      	ldrb	r1, [r7, #1]
    faaa:	4299      	cmp	r1, r3
    faac:	bf9c      	itt	ls
    faae:	78bb      	ldrbls	r3, [r7, #2]
		*idx = first;
    fab0:	702b      	strbls	r3, [r5, #0]
	}

	if (*idx == last) {
    fab2:	429a      	cmp	r2, r3
{
    fab4:	4683      	mov	fp, r0
    fab6:	4692      	mov	sl, r2
    fab8:	d045      	beq.n	fb46 <tx_cmplt_get+0xaa>
		return NULL;
	}

	i = *idx + 1;
    faba:	1c5a      	adds	r2, r3, #1
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
    fabc:	4e29      	ldr	r6, [pc, #164]	; (fb64 <tx_cmplt_get+0xc8>)
	i = *idx + 1;
    fabe:	b2d2      	uxtb	r2, r2
	p = (void *)(fifo + (*idx) * size);
    fac0:	fb13 f304 	smulbb	r3, r3, r4
		i = 0U;
    fac4:	4291      	cmp	r1, r2
    fac6:	bf08      	it	eq
    fac8:	2200      	moveq	r2, #0
				    mfifo_tx_ack.n, mfifo_tx_ack.f, last,
				    first);
	if (!tx) {
    faca:	18f1      	adds	r1, r6, r3

	*idx = i;
    facc:	702a      	strb	r2, [r5, #0]
    face:	d03a      	beq.n	fb46 <tx_cmplt_get+0xaa>
		return 0;
	}

	*handle = tx->handle;
    fad0:	5af3      	ldrh	r3, [r6, r3]
    fad2:	8003      	strh	r3, [r0, #0]
	cmplt = 0U;
    fad4:	f04f 0800 	mov.w	r8, #0
    fad8:	f04f 0901 	mov.w	r9, #1
    fadc:	e022      	b.n	fb24 <tx_cmplt_get+0x88>
		struct node_tx *node_tx;
		struct pdu_data *p;

		node_tx = tx->node;
		p = (void *)node_tx->pdu;
		if (!node_tx || (node_tx == (void *)1) ||
    fade:	b37b      	cbz	r3, fb40 <tx_cmplt_get+0xa4>
		    (((uint32_t)node_tx & ~3) &&
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
    fae0:	7903      	ldrb	r3, [r0, #4]
    fae2:	f003 0303 	and.w	r3, r3, #3
		    (((uint32_t)node_tx & ~3) &&
    fae6:	3b01      	subs	r3, #1
    fae8:	2b01      	cmp	r3, #1
    faea:	d931      	bls.n	fb50 <tx_cmplt_get+0xb4>
    faec:	2302      	movs	r3, #2
    faee:	604b      	str	r3, [r1, #4]
			/* ctrl packet or flushed, hence dont count num cmplt */
			tx->node = (void *)2;
		}

		if (((uint32_t)node_tx & ~3)) {
			ll_tx_mem_release(node_tx);
    faf0:	f002 fc60 	bl	123b4 <ll_tx_mem_release>
	if (*idx >= count) {
    faf4:	782b      	ldrb	r3, [r5, #0]
		}

		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    faf6:	7879      	ldrb	r1, [r7, #1]
    faf8:	7838      	ldrb	r0, [r7, #0]
    fafa:	4299      	cmp	r1, r3
    fafc:	bf9c      	itt	ls
    fafe:	78bb      	ldrbls	r3, [r7, #2]
		*idx = first;
    fb00:	702b      	strbls	r3, [r5, #0]
	if (*idx == last) {
    fb02:	459a      	cmp	sl, r3
    fb04:	d021      	beq.n	fb4a <tx_cmplt_get+0xae>
	i = *idx + 1;
    fb06:	1c5c      	adds	r4, r3, #1
    fb08:	b2e4      	uxtb	r4, r4
	p = (void *)(fifo + (*idx) * size);
    fb0a:	fb13 f300 	smulbb	r3, r3, r0
		i = 0U;
    fb0e:	42a1      	cmp	r1, r4
    fb10:	bf08      	it	eq
    fb12:	2400      	moveq	r4, #0
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
					    last, first);
	} while (tx && tx->handle == *handle);
    fb14:	18f1      	adds	r1, r6, r3
	*idx = i;
    fb16:	702c      	strb	r4, [r5, #0]
    fb18:	d017      	beq.n	fb4a <tx_cmplt_get+0xae>
    fb1a:	5af0      	ldrh	r0, [r6, r3]
    fb1c:	f8bb 3000 	ldrh.w	r3, [fp]
    fb20:	4298      	cmp	r0, r3
    fb22:	d112      	bne.n	fb4a <tx_cmplt_get+0xae>
		node_tx = tx->node;
    fb24:	6848      	ldr	r0, [r1, #4]
		if (!node_tx || (node_tx == (void *)1) ||
    fb26:	2801      	cmp	r0, #1
    fb28:	f020 0303 	bic.w	r3, r0, #3
    fb2c:	d8d7      	bhi.n	fade <tx_cmplt_get+0x42>
			cmplt++;
    fb2e:	f108 0801 	add.w	r8, r8, #1
    fb32:	fa5f f888 	uxtb.w	r8, r8
    fb36:	f8c1 9004 	str.w	r9, [r1, #4]
		if (((uint32_t)node_tx & ~3)) {
    fb3a:	2b00      	cmp	r3, #0
    fb3c:	d0da      	beq.n	faf4 <tx_cmplt_get+0x58>
    fb3e:	e7d7      	b.n	faf0 <tx_cmplt_get+0x54>
    fb40:	2302      	movs	r3, #2
    fb42:	604b      	str	r3, [r1, #4]
    fb44:	e7d6      	b.n	faf4 <tx_cmplt_get+0x58>
		return 0;
    fb46:	f04f 0800 	mov.w	r8, #0

	return cmplt;
}
    fb4a:	4640      	mov	r0, r8
    fb4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cmplt++;
    fb50:	f108 0801 	add.w	r8, r8, #1
    fb54:	fa5f f888 	uxtb.w	r8, r8
    fb58:	f8c1 9004 	str.w	r9, [r1, #4]
		if (((uint32_t)node_tx & ~3)) {
    fb5c:	e7c8      	b.n	faf0 <tx_cmplt_get+0x54>
    fb5e:	bf00      	nop
    fb60:	200003e4 	.word	0x200003e4
    fb64:	200003e8 	.word	0x200003e8

0000fb68 <ull_done>:
}
#endif /* CONFIG_BT_CONN */

#if !defined(CONFIG_BT_CTLR_LOW_LAT_ULL)
static void ull_done(void *param)
{
    fb68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fb6c:	4f3f      	ldr	r7, [pc, #252]	; (fc6c <ull_done+0x104>)
	case EVENT_DONE_EXTRA_TYPE_NONE:
		/* ignore */
		break;

	default:
		LL_ASSERT(0);
    fb6e:	f8df 810c 	ldr.w	r8, [pc, #268]	; fc7c <ull_done+0x114>
    fb72:	f8df a10c 	ldr.w	sl, [pc, #268]	; fc80 <ull_done+0x118>
{
    fb76:	b082      	sub	sp, #8
			memq_dequeue(memq_ull_done.tail, &memq_ull_done.head, NULL);
    fb78:	46b9      	mov	r9, r7
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
    fb7a:	e9d7 0100 	ldrd	r0, r1, [r7]
    fb7e:	aa01      	add	r2, sp, #4
    fb80:	f7fd f8ce 	bl	cd20 <memq_peek>
		if (link) {
    fb84:	4604      	mov	r4, r0
    fb86:	2800      	cmp	r0, #0
    fb88:	d042      	beq.n	fc10 <ull_done+0xa8>
			memq_dequeue(memq_ull_done.tail, &memq_ull_done.head, NULL);
    fb8a:	6878      	ldr	r0, [r7, #4]
    fb8c:	2200      	movs	r2, #0
    fb8e:	4649      	mov	r1, r9
    fb90:	f7fd f8ce 	bl	cd30 <memq_dequeue>
			rx_demux_event_done(link, done);
    fb94:	9e01      	ldr	r6, [sp, #4]
	switch (done->extra.type) {
    fb96:	f896 3020 	ldrb.w	r3, [r6, #32]
	ull_hdr = done->param;
    fb9a:	69f5      	ldr	r5, [r6, #28]
	switch (done->extra.type) {
    fb9c:	b123      	cbz	r3, fba8 <ull_done+0x40>
    fb9e:	2b01      	cmp	r3, #1
    fba0:	d147      	bne.n	fc32 <ull_done+0xca>
		ull_conn_done(done);
    fba2:	4630      	mov	r0, r6
    fba4:	f005 ffc0 	bl	15b28 <ull_conn_done>
	if (!MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
    fba8:	f8df c0d8 	ldr.w	ip, [pc, #216]	; fc84 <ull_done+0x11c>
    fbac:	f89c 2003 	ldrb.w	r2, [ip, #3]
	if (last == count) {
    fbb0:	f89c 0001 	ldrb.w	r0, [ip, #1]
    fbb4:	f89c 1002 	ldrb.w	r1, [ip, #2]
	last = last + 1;
    fbb8:	1c53      	adds	r3, r2, #1
    fbba:	b2db      	uxtb	r3, r3
		last = 0U;
    fbbc:	4298      	cmp	r0, r3
    fbbe:	bf08      	it	eq
    fbc0:	2300      	moveq	r3, #0
	if (last == first) {
    fbc2:	4299      	cmp	r1, r3
		break;
	}

	/* release done */
	done->extra.type = 0U;
    fbc4:	f04f 0000 	mov.w	r0, #0
    fbc8:	f886 0020 	strb.w	r0, [r6, #32]
    fbcc:	d023      	beq.n	fc16 <ull_done+0xae>
	done->hdr.link = link;
    fbce:	6034      	str	r4, [r6, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    fbd0:	f89c 1000 	ldrb.w	r1, [ip]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    fbd4:	fb01 c202 	mla	r2, r1, r2, ip
    fbd8:	6056      	str	r6, [r2, #4]
	*last = idx; /* Commit: Update write index */
    fbda:	f88c 3003 	strb.w	r3, [ip, #3]
	/* LLL done synchronized */
	lll_done_sync();
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL_DONE */

	/* ull instance will resume, dont decrement ref */
	if (!ull_hdr) {
    fbde:	2d00      	cmp	r5, #0
    fbe0:	d0cb      	beq.n	fb7a <ull_done+0x12>
	return hdr->ref;
    fbe2:	782b      	ldrb	r3, [r5, #0]
		return;
	}

	/* Decrement prepare reference */
	LL_ASSERT(ull_ref_get(ull_hdr));
    fbe4:	2b00      	cmp	r3, #0
    fbe6:	d032      	beq.n	fc4e <ull_done+0xe6>
	return hdr->ref--;
    fbe8:	782b      	ldrb	r3, [r5, #0]
    fbea:	3b01      	subs	r3, #1
    fbec:	b2db      	uxtb	r3, r3
    fbee:	702b      	strb	r3, [r5, #0]
	return hdr->ref;
    fbf0:	782b      	ldrb	r3, [r5, #0]
	ull_ref_dec(ull_hdr);

	/* If disable initiated, signal the semaphore */
	if (!ull_ref_get(ull_hdr) && ull_hdr->disabled_cb) {
    fbf2:	2b00      	cmp	r3, #0
    fbf4:	d1c1      	bne.n	fb7a <ull_done+0x12>
    fbf6:	686b      	ldr	r3, [r5, #4]
    fbf8:	2b00      	cmp	r3, #0
    fbfa:	d0be      	beq.n	fb7a <ull_done+0x12>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
    fbfc:	68a8      	ldr	r0, [r5, #8]
    fbfe:	4798      	blx	r3
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
    fc00:	e9d7 0100 	ldrd	r0, r1, [r7]
    fc04:	aa01      	add	r2, sp, #4
    fc06:	f7fd f88b 	bl	cd20 <memq_peek>
		if (link) {
    fc0a:	4604      	mov	r4, r0
    fc0c:	2800      	cmp	r0, #0
    fc0e:	d1bc      	bne.n	fb8a <ull_done+0x22>
}
    fc10:	b002      	add	sp, #8
    fc12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	LL_ASSERT(release == done);
    fc16:	4916      	ldr	r1, [pc, #88]	; (fc70 <ull_done+0x108>)
    fc18:	4816      	ldr	r0, [pc, #88]	; (fc74 <ull_done+0x10c>)
    fc1a:	f640 137b 	movw	r3, #2427	; 0x97b
    fc1e:	4642      	mov	r2, r8
    fc20:	f00e fbb0 	bl	1e384 <printk>
    fc24:	4040      	eors	r0, r0
    fc26:	f380 8811 	msr	BASEPRI, r0
    fc2a:	f04f 0003 	mov.w	r0, #3
    fc2e:	df02      	svc	2
    fc30:	e7d5      	b.n	fbde <ull_done+0x76>
		LL_ASSERT(0);
    fc32:	4810      	ldr	r0, [pc, #64]	; (fc74 <ull_done+0x10c>)
    fc34:	f640 1374 	movw	r3, #2420	; 0x974
    fc38:	4642      	mov	r2, r8
    fc3a:	4651      	mov	r1, sl
    fc3c:	f00e fba2 	bl	1e384 <printk>
    fc40:	4040      	eors	r0, r0
    fc42:	f380 8811 	msr	BASEPRI, r0
    fc46:	f04f 0003 	mov.w	r0, #3
    fc4a:	df02      	svc	2
		break;
    fc4c:	e7ac      	b.n	fba8 <ull_done+0x40>
	LL_ASSERT(ull_ref_get(ull_hdr));
    fc4e:	490a      	ldr	r1, [pc, #40]	; (fc78 <ull_done+0x110>)
    fc50:	4808      	ldr	r0, [pc, #32]	; (fc74 <ull_done+0x10c>)
    fc52:	f640 138b 	movw	r3, #2443	; 0x98b
    fc56:	4642      	mov	r2, r8
    fc58:	f00e fb94 	bl	1e384 <printk>
    fc5c:	4040      	eors	r0, r0
    fc5e:	f380 8811 	msr	BASEPRI, r0
    fc62:	f04f 0003 	mov.w	r0, #3
    fc66:	df02      	svc	2
    fc68:	e7be      	b.n	fbe8 <ull_done+0x80>
    fc6a:	bf00      	nop
    fc6c:	20001c74 	.word	0x20001c74
    fc70:	000245ec 	.word	0x000245ec
    fc74:	00024334 	.word	0x00024334
    fc78:	000245d4 	.word	0x000245d4
    fc7c:	00024590 	.word	0x00024590
    fc80:	000243a4 	.word	0x000243a4
    fc84:	200002a0 	.word	0x200002a0

0000fc88 <rx_demux>:
{
    fc88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fc8c:	4f6d      	ldr	r7, [pc, #436]	; (fe44 <rx_demux+0x1bc>)
	k_sem_give(sem_recv);
    fc8e:	f8df 81c8 	ldr.w	r8, [pc, #456]	; fe58 <rx_demux+0x1d0>
		LL_ASSERT(0);
    fc92:	f8df 91c8 	ldr.w	r9, [pc, #456]	; fe5c <rx_demux+0x1d4>
    fc96:	f8df a1c8 	ldr.w	sl, [pc, #456]	; fe60 <rx_demux+0x1d8>
{
    fc9a:	b087      	sub	sp, #28
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
    fc9c:	e9d7 0100 	ldrd	r0, r1, [r7]
    fca0:	aa03      	add	r2, sp, #12
    fca2:	f7fd f83d 	bl	cd20 <memq_peek>
		if (link) {
    fca6:	4605      	mov	r5, r0
    fca8:	2800      	cmp	r0, #0
    fcaa:	d036      	beq.n	fd1a <rx_demux+0x92>
			LL_ASSERT(rx);
    fcac:	9b03      	ldr	r3, [sp, #12]
    fcae:	2b00      	cmp	r3, #0
    fcb0:	f000 80a4 	beq.w	fdfc <rx_demux+0x174>
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
    fcb4:	7818      	ldrb	r0, [r3, #0]
    fcb6:	aa04      	add	r2, sp, #16
    fcb8:	a902      	add	r1, sp, #8
    fcba:	f006 f9bd 	bl	16038 <ull_conn_ack_by_last_peek>
			if (link_tx) {
    fcbe:	4604      	mov	r4, r0
    fcc0:	2800      	cmp	r0, #0
    fcc2:	d056      	beq.n	fd72 <rx_demux+0xea>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
    fcc4:	e9dd 1203 	ldrd	r1, r2, [sp, #12]
    fcc8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    fccc:	f891 b000 	ldrb.w	fp, [r1]
    fcd0:	9205      	str	r2, [sp, #20]
    fcd2:	f8ad 300a 	strh.w	r3, [sp, #10]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
    fcd6:	ae05      	add	r6, sp, #20
    fcd8:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
    fcdc:	f006 f9c2 	bl	16064 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
    fce0:	4621      	mov	r1, r4
    fce2:	9a05      	ldr	r2, [sp, #20]
    fce4:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    fce8:	f006 fa04 	bl	160f4 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
    fcec:	4620      	mov	r0, r4
    fcee:	f006 f97d 	bl	15fec <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
    fcf2:	4632      	mov	r2, r6
    fcf4:	4629      	mov	r1, r5
    fcf6:	4658      	mov	r0, fp
    fcf8:	f006 f99e 	bl	16038 <ull_conn_ack_by_last_peek>
	} while (link);
    fcfc:	4604      	mov	r4, r0
    fcfe:	2800      	cmp	r0, #0
    fd00:	d1ec      	bne.n	fcdc <rx_demux+0x54>
	k_sem_give(sem_recv);
    fd02:	f8d8 0000 	ldr.w	r0, [r8]
    fd06:	f00d fd09 	bl	1d71c <z_impl_k_sem_give>
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
    fd0a:	e9d7 0100 	ldrd	r0, r1, [r7]
    fd0e:	aa03      	add	r2, sp, #12
    fd10:	f7fd f806 	bl	cd20 <memq_peek>
		if (link) {
    fd14:	4605      	mov	r5, r0
    fd16:	2800      	cmp	r0, #0
    fd18:	d1c8      	bne.n	fcac <rx_demux+0x24>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
    fd1a:	aa04      	add	r2, sp, #16
    fd1c:	a902      	add	r1, sp, #8
    fd1e:	f10d 0007 	add.w	r0, sp, #7
    fd22:	f006 f96f 	bl	16004 <ull_conn_ack_peek>
			if (link) {
    fd26:	4604      	mov	r4, r0
    fd28:	2800      	cmp	r0, #0
    fd2a:	d064      	beq.n	fdf6 <rx_demux+0x16e>
				rx_demux_conn_tx_ack(ack_last, handle,
    fd2c:	9a04      	ldr	r2, [sp, #16]
    fd2e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    fd32:	f89d b007 	ldrb.w	fp, [sp, #7]
    fd36:	9205      	str	r2, [sp, #20]
    fd38:	f8ad 300a 	strh.w	r3, [sp, #10]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
    fd3c:	ae05      	add	r6, sp, #20
    fd3e:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
    fd42:	f006 f98f 	bl	16064 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
    fd46:	4621      	mov	r1, r4
    fd48:	9a05      	ldr	r2, [sp, #20]
    fd4a:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    fd4e:	f006 f9d1 	bl	160f4 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
    fd52:	4620      	mov	r0, r4
    fd54:	f006 f94a 	bl	15fec <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
    fd58:	4632      	mov	r2, r6
    fd5a:	4629      	mov	r1, r5
    fd5c:	4658      	mov	r0, fp
    fd5e:	f006 f96b 	bl	16038 <ull_conn_ack_by_last_peek>
	} while (link);
    fd62:	4604      	mov	r4, r0
    fd64:	2800      	cmp	r0, #0
    fd66:	d1ec      	bne.n	fd42 <rx_demux+0xba>
	k_sem_give(sem_recv);
    fd68:	f8d8 0000 	ldr.w	r0, [r8]
    fd6c:	f00d fcd6 	bl	1d71c <z_impl_k_sem_give>
			if (nack) {
    fd70:	e7cb      	b.n	fd0a <rx_demux+0x82>
				nack = rx_demux_rx(link, rx);
    fd72:	9b03      	ldr	r3, [sp, #12]
    fd74:	9305      	str	r3, [sp, #20]
	switch (rx->type) {
    fd76:	791b      	ldrb	r3, [r3, #4]
    fd78:	3b01      	subs	r3, #1
    fd7a:	2b14      	cmp	r3, #20
    fd7c:	d80c      	bhi.n	fd98 <rx_demux+0x110>
    fd7e:	e8df f003 	tbb	[pc, r3]
    fd82:	0b19      	.short	0x0b19
    fd84:	0b0b0b35 	.word	0x0b0b0b35
    fd88:	0b0b0b0b 	.word	0x0b0b0b0b
    fd8c:	0b0b0b0b 	.word	0x0b0b0b0b
    fd90:	0b0b0b0b 	.word	0x0b0b0b0b
    fd94:	2b0b      	.short	0x2b0b
    fd96:	19          	.byte	0x19
    fd97:	00          	.byte	0x00
		LL_ASSERT(0);
    fd98:	482b      	ldr	r0, [pc, #172]	; (fe48 <rx_demux+0x1c0>)
    fd9a:	f640 132f 	movw	r3, #2351	; 0x92f
    fd9e:	464a      	mov	r2, r9
    fda0:	4651      	mov	r1, sl
    fda2:	f00e faef 	bl	1e384 <printk>
    fda6:	4040      	eors	r0, r0
    fda8:	f380 8811 	msr	BASEPRI, r0
    fdac:	f04f 0003 	mov.w	r0, #3
    fdb0:	df02      	svc	2
			if (nack) {
    fdb2:	e773      	b.n	fc9c <rx_demux+0x14>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    fdb4:	4923      	ldr	r1, [pc, #140]	; (fe44 <rx_demux+0x1bc>)
    fdb6:	6878      	ldr	r0, [r7, #4]
    fdb8:	2200      	movs	r2, #0
    fdba:	f7fc ffb9 	bl	cd30 <memq_dequeue>
	rx_hdr->ack_last = mfifo_tx_ack.l;
    fdbe:	4b23      	ldr	r3, [pc, #140]	; (fe4c <rx_demux+0x1c4>)
		ll_rx_put(link, rx);
    fdc0:	9905      	ldr	r1, [sp, #20]
	rx_hdr->ack_last = mfifo_tx_ack.l;
    fdc2:	78db      	ldrb	r3, [r3, #3]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    fdc4:	4a22      	ldr	r2, [pc, #136]	; (fe50 <rx_demux+0x1c8>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
    fdc6:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    fdc8:	4628      	mov	r0, r5
    fdca:	f7fc ffa1 	bl	cd10 <memq_enqueue>
	k_sem_give(sem_recv);
    fdce:	f8d8 0000 	ldr.w	r0, [r8]
    fdd2:	f00d fca3 	bl	1d71c <z_impl_k_sem_give>
			if (nack) {
    fdd6:	e798      	b.n	fd0a <rx_demux+0x82>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    fdd8:	491a      	ldr	r1, [pc, #104]	; (fe44 <rx_demux+0x1bc>)
    fdda:	6878      	ldr	r0, [r7, #4]
    fddc:	2200      	movs	r2, #0
    fdde:	f7fc ffa7 	bl	cd30 <memq_dequeue>
		ull_conn_setup(link, rx);
    fde2:	9905      	ldr	r1, [sp, #20]
    fde4:	4628      	mov	r0, r5
    fde6:	f002 fe03 	bl	129f0 <ull_conn_setup>
			if (nack) {
    fdea:	e757      	b.n	fc9c <rx_demux+0x14>
		nack = ull_conn_rx(link, (void *)&rx);
    fdec:	a905      	add	r1, sp, #20
    fdee:	4628      	mov	r0, r5
    fdf0:	f002 fe1e 	bl	12a30 <ull_conn_rx>
		if (nack) {
    fdf4:	b188      	cbz	r0, fe1a <rx_demux+0x192>
}
    fdf6:	b007      	add	sp, #28
    fdf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LL_ASSERT(rx);
    fdfc:	4915      	ldr	r1, [pc, #84]	; (fe54 <rx_demux+0x1cc>)
    fdfe:	4812      	ldr	r0, [pc, #72]	; (fe48 <rx_demux+0x1c0>)
    fe00:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
    fe04:	464a      	mov	r2, r9
    fe06:	f00e fabd 	bl	1e384 <printk>
    fe0a:	4040      	eors	r0, r0
    fe0c:	f380 8811 	msr	BASEPRI, r0
    fe10:	f04f 0003 	mov.w	r0, #3
    fe14:	df02      	svc	2
    fe16:	9b03      	ldr	r3, [sp, #12]
    fe18:	e74c      	b.n	fcb4 <rx_demux+0x2c>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    fe1a:	490a      	ldr	r1, [pc, #40]	; (fe44 <rx_demux+0x1bc>)
    fe1c:	4602      	mov	r2, r0
    fe1e:	6878      	ldr	r0, [r7, #4]
    fe20:	f7fc ff86 	bl	cd30 <memq_dequeue>
		if (rx) {
    fe24:	9905      	ldr	r1, [sp, #20]
    fe26:	2900      	cmp	r1, #0
    fe28:	f43f af38 	beq.w	fc9c <rx_demux+0x14>
	rx_hdr->ack_last = mfifo_tx_ack.l;
    fe2c:	4b07      	ldr	r3, [pc, #28]	; (fe4c <rx_demux+0x1c4>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    fe2e:	4a08      	ldr	r2, [pc, #32]	; (fe50 <rx_demux+0x1c8>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
    fe30:	78db      	ldrb	r3, [r3, #3]
    fe32:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    fe34:	4628      	mov	r0, r5
    fe36:	f7fc ff6b 	bl	cd10 <memq_enqueue>
	k_sem_give(sem_recv);
    fe3a:	f8d8 0000 	ldr.w	r0, [r8]
    fe3e:	f00d fc6d 	bl	1d71c <z_impl_k_sem_give>
			if (nack) {
    fe42:	e72b      	b.n	fc9c <rx_demux+0x14>
    fe44:	20001c7c 	.word	0x20001c7c
    fe48:	00024334 	.word	0x00024334
    fe4c:	200003e4 	.word	0x200003e4
    fe50:	20001c70 	.word	0x20001c70
    fe54:	000245fc 	.word	0x000245fc
    fe58:	20001c84 	.word	0x20001c84
    fe5c:	00024590 	.word	0x00024590
    fe60:	000243a4 	.word	0x000243a4

0000fe64 <ll_init>:
{
    fe64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sem_recv = sem_rx;
    fe68:	4ba3      	ldr	r3, [pc, #652]	; (100f8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xf9>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
    fe6a:	4ca4      	ldr	r4, [pc, #656]	; (100fc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xfd>)
	sem_recv = sem_rx;
    fe6c:	6018      	str	r0, [r3, #0]
{
    fe6e:	b086      	sub	sp, #24
	cntr_init();
    fe70:	f009 fa02 	bl	19278 <cntr_init>
	mayfly_init();
    fe74:	f7fc ff6c 	bl	cd50 <mayfly_init>
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    fe78:	4aa1      	ldr	r2, [pc, #644]	; (10100 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x101>)
    fe7a:	48a2      	ldr	r0, [pc, #648]	; (10104 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x105>)
    fe7c:	9205      	str	r2, [sp, #20]
    fe7e:	9004      	str	r0, [sp, #16]
    fe80:	4aa1      	ldr	r2, [pc, #644]	; (10108 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x109>)
    fe82:	48a2      	ldr	r0, [pc, #648]	; (1010c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x10d>)
    fe84:	9203      	str	r2, [sp, #12]
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
    fe86:	2304      	movs	r3, #4
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    fe88:	220c      	movs	r2, #12
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
    fe8a:	2502      	movs	r5, #2
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    fe8c:	e9cd 2001 	strd	r2, r0, [sp, #4]
    fe90:	9400      	str	r4, [sp, #0]
    fe92:	4a9f      	ldr	r2, [pc, #636]	; (10110 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x111>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
    fe94:	7023      	strb	r3, [r4, #0]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    fe96:	4619      	mov	r1, r3
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
    fe98:	7223      	strb	r3, [r4, #8]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    fe9a:	2000      	movs	r0, #0
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
    fe9c:	7425      	strb	r5, [r4, #16]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_THREAD_OPS;
    fe9e:	7625      	strb	r5, [r4, #24]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    fea0:	f7fe f96e 	bl	e180 <ticker_init>
	LL_ASSERT(!err);
    fea4:	2800      	cmp	r0, #0
    fea6:	f040 80e9 	bne.w	1007c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x7d>
	return z_impl_k_sem_init(sem, initial_count, limit);
    feaa:	2201      	movs	r2, #1
    feac:	2100      	movs	r1, #0
    feae:	4899      	ldr	r0, [pc, #612]	; (10114 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x115>)
    feb0:	f013 f90d 	bl	230ce <z_impl_k_sem_init>
	err = lll_init();
    feb4:	f007 fcd8 	bl	17868 <lll_init>
	if (err) {
    feb8:	4604      	mov	r4, r0
    feba:	b118      	cbz	r0, fec4 <ll_init+0x60>
}
    febc:	4620      	mov	r0, r4
    febe:	b006      	add	sp, #24
    fec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
    fec4:	4b94      	ldr	r3, [pc, #592]	; (10118 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x119>)
		link = mem_acquire(&mem_link_done.free);
    fec6:	f8df 8258 	ldr.w	r8, [pc, #600]	; 10120 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x121>
    feca:	4d94      	ldr	r5, [pc, #592]	; (1011c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x11d>)
		rx = mem_acquire(&mem_done.free);
    fecc:	4f92      	ldr	r7, [pc, #584]	; (10118 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x119>)
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
    fece:	1d18      	adds	r0, r3, #4
    fed0:	2203      	movs	r2, #3
    fed2:	2134      	movs	r1, #52	; 0x34
    fed4:	f7fc fe9a 	bl	cc0c <mem_init>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX +
    fed8:	4643      	mov	r3, r8
    feda:	2204      	movs	r2, #4
    fedc:	1898      	adds	r0, r3, r2
    fede:	2108      	movs	r1, #8
    fee0:	f7fc fe94 	bl	cc0c <mem_init>
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
    fee4:	78ec      	ldrb	r4, [r5, #3]
	if (last == count) {
    fee6:	786a      	ldrb	r2, [r5, #1]
    fee8:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
    feea:	3401      	adds	r4, #1
    feec:	b2e4      	uxtb	r4, r4
		last = 0U;
    feee:	42a2      	cmp	r2, r4
    fef0:	bf08      	it	eq
    fef2:	2400      	moveq	r4, #0
	if (last == first) {
    fef4:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_done.free);
    fef6:	4640      	mov	r0, r8
    fef8:	d013      	beq.n	ff22 <ll_init+0xbe>
    fefa:	f7fc fea7 	bl	cc4c <mem_acquire>
    fefe:	4606      	mov	r6, r0
		rx = mem_acquire(&mem_done.free);
    ff00:	4638      	mov	r0, r7
		if (!link) {
    ff02:	b176      	cbz	r6, ff22 <ll_init+0xbe>
		rx = mem_acquire(&mem_done.free);
    ff04:	f7fc fea2 	bl	cc4c <mem_acquire>
		if (!rx) {
    ff08:	b138      	cbz	r0, ff1a <ll_init+0xb6>
		rx->link = link;
    ff0a:	6006      	str	r6, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    ff0c:	78ea      	ldrb	r2, [r5, #3]
    ff0e:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    ff10:	fb02 5303 	mla	r3, r2, r3, r5
    ff14:	6058      	str	r0, [r3, #4]
	*last = idx; /* Commit: Update write index */
    ff16:	70ec      	strb	r4, [r5, #3]
}
    ff18:	e7e5      	b.n	fee6 <ll_init+0x82>
			mem_release(link, &mem_link_done.free);
    ff1a:	4981      	ldr	r1, [pc, #516]	; (10120 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x121>)
    ff1c:	4630      	mov	r0, r6
    ff1e:	f7fc feab 	bl	cc78 <mem_release>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
    ff22:	4b80      	ldr	r3, [pc, #512]	; (10124 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x125>)
    ff24:	2209      	movs	r2, #9
    ff26:	1d18      	adds	r0, r3, #4
    ff28:	2148      	movs	r1, #72	; 0x48
    ff2a:	f7fc fe6f 	bl	cc0c <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
    ff2e:	4b7e      	ldr	r3, [pc, #504]	; (10128 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x129>)
    ff30:	220b      	movs	r2, #11
    ff32:	1d18      	adds	r0, r3, #4
    ff34:	2108      	movs	r1, #8
    ff36:	f7fc fe69 	bl	cc0c <mem_init>
	link = mem_acquire(&mem_link_rx.free);
    ff3a:	487b      	ldr	r0, [pc, #492]	; (10128 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x129>)
    ff3c:	f7fc fe86 	bl	cc4c <mem_acquire>
	LL_ASSERT(link);
    ff40:	4604      	mov	r4, r0
    ff42:	2800      	cmp	r0, #0
    ff44:	f000 80c4 	beq.w	100d0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xd1>
	MEMQ_INIT(ull_rx, link);
    ff48:	4a78      	ldr	r2, [pc, #480]	; (1012c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x12d>)
    ff4a:	4620      	mov	r0, r4
    ff4c:	1f11      	subs	r1, r2, #4
    ff4e:	f7fc fed1 	bl	ccf4 <memq_init>
	link = mem_acquire(&mem_link_done.free);
    ff52:	4873      	ldr	r0, [pc, #460]	; (10120 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x121>)
    ff54:	f7fc fe7a 	bl	cc4c <mem_acquire>
	LL_ASSERT(link);
    ff58:	4604      	mov	r4, r0
    ff5a:	2800      	cmp	r0, #0
    ff5c:	f000 80aa 	beq.w	100b4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb5>
	MEMQ_INIT(ull_done, link);
    ff60:	4a73      	ldr	r2, [pc, #460]	; (10130 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x131>)
    ff62:	4620      	mov	r0, r4
    ff64:	1f11      	subs	r1, r2, #4
    ff66:	f7fc fec5 	bl	ccf4 <memq_init>
	link = mem_acquire(&mem_link_rx.free);
    ff6a:	486f      	ldr	r0, [pc, #444]	; (10128 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x129>)
    ff6c:	f7fc fe6e 	bl	cc4c <mem_acquire>
	LL_ASSERT(link);
    ff70:	4604      	mov	r4, r0
    ff72:	2800      	cmp	r0, #0
    ff74:	f000 8090 	beq.w	10098 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x99>
	MEMQ_INIT(ll_rx, link);
    ff78:	4a6e      	ldr	r2, [pc, #440]	; (10134 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x135>)
	mem_link_rx.quota_pdu = RX_CNT;
    ff7a:	4f6f      	ldr	r7, [pc, #444]	; (10138 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x139>)
    ff7c:	4d6f      	ldr	r5, [pc, #444]	; (1013c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x13d>)
		rx = mem_acquire(&mem_pdu_rx.free);
    ff7e:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 10124 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x125>
	MEMQ_INIT(ll_rx, link);
    ff82:	4620      	mov	r0, r4
    ff84:	1f11      	subs	r1, r2, #4
	mem_link_rx.quota_pdu = RX_CNT;
    ff86:	46b8      	mov	r8, r7
	MEMQ_INIT(ll_rx, link);
    ff88:	f7fc feb4 	bl	ccf4 <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
    ff8c:	2307      	movs	r3, #7
    ff8e:	f808 3b04 	strb.w	r3, [r8], #4
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    ff92:	78ec      	ldrb	r4, [r5, #3]
    ff94:	2606      	movs	r6, #6
	if (last == count) {
    ff96:	786a      	ldrb	r2, [r5, #1]
    ff98:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
    ff9a:	3401      	adds	r4, #1
    ff9c:	b2e4      	uxtb	r4, r4
		last = 0U;
    ff9e:	42a2      	cmp	r2, r4
    ffa0:	bf08      	it	eq
    ffa2:	2400      	moveq	r4, #0
	if (last == first) {
    ffa4:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
    ffa6:	4640      	mov	r0, r8
    ffa8:	d064      	beq.n	10074 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x75>
    ffaa:	f7fc fe4f 	bl	cc4c <mem_acquire>
    ffae:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    ffb0:	4648      	mov	r0, r9
		if (!link) {
    ffb2:	f1ba 0f00 	cmp.w	sl, #0
    ffb6:	d041      	beq.n	1003c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x3d>
		rx = mem_acquire(&mem_pdu_rx.free);
    ffb8:	f7fc fe48 	bl	cc4c <mem_acquire>
		if (!rx) {
    ffbc:	2800      	cmp	r0, #0
    ffbe:	f000 8095 	beq.w	100ec <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xed>
		rx->link = link;
    ffc2:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    ffc6:	78ea      	ldrb	r2, [r5, #3]
    ffc8:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    ffca:	fb02 5303 	mla	r3, r2, r3, r5
    ffce:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
    ffd0:	783b      	ldrb	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
    ffd2:	70ec      	strb	r4, [r5, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    ffd4:	3e01      	subs	r6, #1
	mem_link_rx.quota_pdu += delta;
    ffd6:	3b01      	subs	r3, #1
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    ffd8:	b2f6      	uxtb	r6, r6
	mem_link_rx.quota_pdu += delta;
    ffda:	b2db      	uxtb	r3, r3
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    ffdc:	2eff      	cmp	r6, #255	; 0xff
	mem_link_rx.quota_pdu += delta;
    ffde:	703b      	strb	r3, [r7, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    ffe0:	d1d9      	bne.n	ff96 <ll_init+0x132>
	while (mem_link_rx.quota_pdu &&
    ffe2:	b35b      	cbz	r3, 1003c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x3d>
    ffe4:	4d56      	ldr	r5, [pc, #344]	; (10140 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x141>)
		link = mem_acquire(&mem_link_rx.free);
    ffe6:	4e50      	ldr	r6, [pc, #320]	; (10128 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x129>)
    ffe8:	78ec      	ldrb	r4, [r5, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
    ffea:	f8df 8138 	ldr.w	r8, [pc, #312]	; 10124 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x125>
		link->mem = NULL;
    ffee:	f04f 0900 	mov.w	r9, #0
	if (last == count) {
    fff2:	786a      	ldrb	r2, [r5, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    fff4:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
    fff6:	3401      	adds	r4, #1
    fff8:	b2e4      	uxtb	r4, r4
		last = 0U;
    fffa:	42a2      	cmp	r2, r4
    fffc:	bf08      	it	eq
    fffe:	2400      	moveq	r4, #0
	if (last == first) {
   10000:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   10002:	4630      	mov	r0, r6
   10004:	d01a      	beq.n	1003c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x3d>
   10006:	f7fc fe21 	bl	cc4c <mem_acquire>
   1000a:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   1000c:	4640      	mov	r0, r8
		if (!link) {
   1000e:	f1ba 0f00 	cmp.w	sl, #0
   10012:	d013      	beq.n	1003c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x3d>
		rx = mem_acquire(&mem_pdu_rx.free);
   10014:	f7fc fe1a 	bl	cc4c <mem_acquire>
		if (!rx) {
   10018:	2800      	cmp	r0, #0
   1001a:	d067      	beq.n	100ec <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xed>
		link->mem = NULL;
   1001c:	f8ca 9004 	str.w	r9, [sl, #4]
		rx->link = link;
   10020:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   10024:	78ea      	ldrb	r2, [r5, #3]
   10026:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   10028:	fb02 5303 	mla	r3, r2, r3, r5
   1002c:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   1002e:	783b      	ldrb	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
   10030:	70ec      	strb	r4, [r5, #3]
   10032:	3b01      	subs	r3, #1
   10034:	b2db      	uxtb	r3, r3
   10036:	703b      	strb	r3, [r7, #0]
	while (mem_link_rx.quota_pdu &&
   10038:	2b00      	cmp	r3, #0
   1003a:	d1da      	bne.n	fff2 <ll_init+0x18e>
	err = lll_adv_init();
   1003c:	f007 fff0 	bl	18020 <lll_adv_init>
	if (err) {
   10040:	4604      	mov	r4, r0
   10042:	2800      	cmp	r0, #0
   10044:	f47f af3a 	bne.w	febc <ll_init+0x58>
	err = ull_adv_init();
   10048:	f001 fa9a 	bl	11580 <ull_adv_init>
	if (err) {
   1004c:	4604      	mov	r4, r0
   1004e:	2800      	cmp	r0, #0
   10050:	f47f af34 	bne.w	febc <ll_init+0x58>
	err = lll_conn_init();
   10054:	f008 fc86 	bl	18964 <lll_conn_init>
	if (err) {
   10058:	4604      	mov	r4, r0
   1005a:	2800      	cmp	r0, #0
   1005c:	f47f af2e 	bne.w	febc <ll_init+0x58>
	err = ull_conn_init();
   10060:	f002 fc72 	bl	12948 <ull_conn_init>
	if (err) {
   10064:	4604      	mov	r4, r0
   10066:	2800      	cmp	r0, #0
   10068:	f47f af28 	bne.w	febc <ll_init+0x58>
		ull_filter_reset(true);
   1006c:	2001      	movs	r0, #1
   1006e:	f007 f945 	bl	172fc <ull_filter_reset>
	return  0;
   10072:	e723      	b.n	febc <ll_init+0x58>
	if (!max) {
   10074:	2e00      	cmp	r6, #0
   10076:	d0e1      	beq.n	1003c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x3d>
   10078:	783b      	ldrb	r3, [r7, #0]
   1007a:	e7b2      	b.n	ffe2 <ll_init+0x17e>
	LL_ASSERT(!err);
   1007c:	4a31      	ldr	r2, [pc, #196]	; (10144 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x145>)
   1007e:	4932      	ldr	r1, [pc, #200]	; (10148 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x149>)
   10080:	4832      	ldr	r0, [pc, #200]	; (1014c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x14d>)
   10082:	f240 13a9 	movw	r3, #425	; 0x1a9
   10086:	f00e f97d 	bl	1e384 <printk>
   1008a:	4040      	eors	r0, r0
   1008c:	f380 8811 	msr	BASEPRI, r0
   10090:	f04f 0003 	mov.w	r0, #3
   10094:	df02      	svc	2
   10096:	e708      	b.n	feaa <ll_init+0x46>
	LL_ASSERT(link);
   10098:	4a2a      	ldr	r2, [pc, #168]	; (10144 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x145>)
   1009a:	492d      	ldr	r1, [pc, #180]	; (10150 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x151>)
   1009c:	482b      	ldr	r0, [pc, #172]	; (1014c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x14d>)
   1009e:	f240 7317 	movw	r3, #1815	; 0x717
   100a2:	f00e f96f 	bl	1e384 <printk>
   100a6:	4040      	eors	r0, r0
   100a8:	f380 8811 	msr	BASEPRI, r0
   100ac:	f04f 0003 	mov.w	r0, #3
   100b0:	df02      	svc	2
   100b2:	e761      	b.n	ff78 <ll_init+0x114>
	LL_ASSERT(link);
   100b4:	4a23      	ldr	r2, [pc, #140]	; (10144 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x145>)
   100b6:	4926      	ldr	r1, [pc, #152]	; (10150 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x151>)
   100b8:	4824      	ldr	r0, [pc, #144]	; (1014c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x14d>)
   100ba:	f240 730f 	movw	r3, #1807	; 0x70f
   100be:	f00e f961 	bl	1e384 <printk>
   100c2:	4040      	eors	r0, r0
   100c4:	f380 8811 	msr	BASEPRI, r0
   100c8:	f04f 0003 	mov.w	r0, #3
   100cc:	df02      	svc	2
   100ce:	e747      	b.n	ff60 <ll_init+0xfc>
	LL_ASSERT(link);
   100d0:	4a1c      	ldr	r2, [pc, #112]	; (10144 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x145>)
   100d2:	491f      	ldr	r1, [pc, #124]	; (10150 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x151>)
   100d4:	481d      	ldr	r0, [pc, #116]	; (1014c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x14d>)
   100d6:	f240 7307 	movw	r3, #1799	; 0x707
   100da:	f00e f953 	bl	1e384 <printk>
   100de:	4040      	eors	r0, r0
   100e0:	f380 8811 	msr	BASEPRI, r0
   100e4:	f04f 0003 	mov.w	r0, #3
   100e8:	df02      	svc	2
   100ea:	e72d      	b.n	ff48 <ll_init+0xe4>
			mem_release(link, &mem_link_rx.free);
   100ec:	490e      	ldr	r1, [pc, #56]	; (10128 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x129>)
   100ee:	4650      	mov	r0, sl
   100f0:	f7fc fdc2 	bl	cc78 <mem_release>
			return;
   100f4:	e7a2      	b.n	1003c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x3d>
   100f6:	bf00      	nop
   100f8:	20001c84 	.word	0x20001c84
   100fc:	20001fd0 	.word	0x20001fd0
   10100:	00019e71 	.word	0x00019e71
   10104:	00019d91 	.word	0x00019d91
   10108:	00019d2d 	.word	0x00019d2d
   1010c:	20001d60 	.word	0x20001d60
   10110:	20001ca0 	.word	0x20001ca0
   10114:	20001c88 	.word	0x20001c88
   10118:	200018bc 	.word	0x200018bc
   1011c:	200002a0 	.word	0x200002a0
   10120:	2000195c 	.word	0x2000195c
   10124:	200019e0 	.word	0x200019e0
   10128:	20001984 	.word	0x20001984
   1012c:	20001c80 	.word	0x20001c80
   10130:	20001c78 	.word	0x20001c78
   10134:	20001c70 	.word	0x20001c70
   10138:	20001980 	.word	0x20001980
   1013c:	200002c8 	.word	0x200002c8
   10140:	200002b4 	.word	0x200002b4
   10144:	00024590 	.word	0x00024590
   10148:	000245cc 	.word	0x000245cc
   1014c:	00024334 	.word	0x00024334
   10150:	000248cc 	.word	0x000248cc

00010154 <ll_reset>:
{
   10154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10158:	b087      	sub	sp, #28
	err = ull_adv_reset();
   1015a:	f001 fa13 	bl	11584 <ull_adv_reset>
	LL_ASSERT(!err);
   1015e:	2800      	cmp	r0, #0
   10160:	f040 8122 	bne.w	103a8 <ll_reset+0x254>
	err = ull_conn_reset();
   10164:	f002 fbf2 	bl	1294c <ull_conn_reset>
	LL_ASSERT(!err);
   10168:	2800      	cmp	r0, #0
   1016a:	f040 810f 	bne.w	1038c <ll_reset+0x238>
	MFIFO_INIT(tx_ack);
   1016e:	4baf      	ldr	r3, [pc, #700]	; (1042c <ll_reset+0x2d8>)
	MFIFO_INIT(done);
   10170:	4eaf      	ldr	r6, [pc, #700]	; (10430 <ll_reset+0x2dc>)
	MFIFO_INIT(pdu_rx_free);
   10172:	4db0      	ldr	r5, [pc, #704]	; (10434 <ll_reset+0x2e0>)
	MFIFO_INIT(ll_pdu_rx_free);
   10174:	4fb0      	ldr	r7, [pc, #704]	; (10438 <ll_reset+0x2e4>)
	MFIFO_INIT(tx_ack);
   10176:	2400      	movs	r4, #0
   10178:	805c      	strh	r4, [r3, #2]
		ull_filter_reset(false);
   1017a:	4620      	mov	r0, r4
   1017c:	f007 f8be 	bl	172fc <ull_filter_reset>
	MFIFO_INIT(prep);
   10180:	4bae      	ldr	r3, [pc, #696]	; (1043c <ll_reset+0x2e8>)
	MFIFO_INIT(done);
   10182:	8074      	strh	r4, [r6, #2]
	MFIFO_INIT(prep);
   10184:	805c      	strh	r4, [r3, #2]
	MFIFO_INIT(pdu_rx_free);
   10186:	806c      	strh	r4, [r5, #2]
	MFIFO_INIT(ll_pdu_rx_free);
   10188:	807c      	strh	r4, [r7, #2]
   1018a:	2201      	movs	r2, #1
   1018c:	4621      	mov	r1, r4
   1018e:	4668      	mov	r0, sp
   10190:	f012 ff9d 	bl	230ce <z_impl_k_sem_init>
		mfy.param = &sem;
   10194:	4baa      	ldr	r3, [pc, #680]	; (10440 <ll_reset+0x2ec>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   10196:	4622      	mov	r2, r4
   10198:	4621      	mov	r1, r4
   1019a:	2003      	movs	r0, #3
		mfy.param = &sem;
   1019c:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   101a0:	f7fc fe2a 	bl	cdf8 <mayfly_enqueue>
		LL_ASSERT(!retval);
   101a4:	2800      	cmp	r0, #0
   101a6:	f040 80e3 	bne.w	10370 <ll_reset+0x21c>
	return z_impl_k_sem_take(sem, timeout);
   101aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   101ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   101b2:	4668      	mov	r0, sp
   101b4:	f00d fad8 	bl	1d768 <z_impl_k_sem_take>
	err = ull_adv_reset_finalize();
   101b8:	f001 fa8c 	bl	116d4 <ull_adv_reset_finalize>
	LL_ASSERT(!err);
   101bc:	2800      	cmp	r0, #0
   101be:	f040 80c9 	bne.w	10354 <ll_reset+0x200>
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   101c2:	4ba0      	ldr	r3, [pc, #640]	; (10444 <ll_reset+0x2f0>)
		link = mem_acquire(&mem_link_done.free);
   101c4:	f8df 9280 	ldr.w	r9, [pc, #640]	; 10448 <ll_reset+0x2f4>
		rx = mem_acquire(&mem_done.free);
   101c8:	f8df 8278 	ldr.w	r8, [pc, #632]	; 10444 <ll_reset+0x2f0>
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   101cc:	1d18      	adds	r0, r3, #4
   101ce:	2203      	movs	r2, #3
   101d0:	2134      	movs	r1, #52	; 0x34
   101d2:	f7fc fd1b 	bl	cc0c <mem_init>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX +
   101d6:	464b      	mov	r3, r9
   101d8:	2204      	movs	r2, #4
   101da:	1898      	adds	r0, r3, r2
   101dc:	2108      	movs	r1, #8
   101de:	f7fc fd15 	bl	cc0c <mem_init>
static inline void done_alloc(void)
   101e2:	78f4      	ldrb	r4, [r6, #3]
	if (last == count) {
   101e4:	7872      	ldrb	r2, [r6, #1]
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   101e6:	78b3      	ldrb	r3, [r6, #2]
	last = last + 1;
   101e8:	3401      	adds	r4, #1
   101ea:	b2e4      	uxtb	r4, r4
		last = 0U;
   101ec:	42a2      	cmp	r2, r4
   101ee:	bf08      	it	eq
   101f0:	2400      	moveq	r4, #0
	if (last == first) {
   101f2:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_done.free);
   101f4:	4648      	mov	r0, r9
   101f6:	d016      	beq.n	10226 <ll_reset+0xd2>
   101f8:	f7fc fd28 	bl	cc4c <mem_acquire>
   101fc:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_done.free);
   101fe:	4640      	mov	r0, r8
		if (!link) {
   10200:	f1ba 0f00 	cmp.w	sl, #0
   10204:	d00f      	beq.n	10226 <ll_reset+0xd2>
		rx = mem_acquire(&mem_done.free);
   10206:	f7fc fd21 	bl	cc4c <mem_acquire>
		if (!rx) {
   1020a:	b140      	cbz	r0, 1021e <ll_reset+0xca>
		rx->link = link;
   1020c:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   10210:	78f2      	ldrb	r2, [r6, #3]
   10212:	7833      	ldrb	r3, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   10214:	fb02 6303 	mla	r3, r2, r3, r6
   10218:	6058      	str	r0, [r3, #4]
	*last = idx; /* Commit: Update write index */
   1021a:	70f4      	strb	r4, [r6, #3]
}
   1021c:	e7e2      	b.n	101e4 <ll_reset+0x90>
			mem_release(link, &mem_link_done.free);
   1021e:	498a      	ldr	r1, [pc, #552]	; (10448 <ll_reset+0x2f4>)
   10220:	4650      	mov	r0, sl
   10222:	f7fc fd29 	bl	cc78 <mem_release>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
   10226:	4b89      	ldr	r3, [pc, #548]	; (1044c <ll_reset+0x2f8>)
   10228:	2209      	movs	r2, #9
   1022a:	1d18      	adds	r0, r3, #4
   1022c:	2148      	movs	r1, #72	; 0x48
   1022e:	f7fc fced 	bl	cc0c <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
   10232:	4b87      	ldr	r3, [pc, #540]	; (10450 <ll_reset+0x2fc>)
   10234:	220b      	movs	r2, #11
   10236:	1d18      	adds	r0, r3, #4
   10238:	2108      	movs	r1, #8
   1023a:	f7fc fce7 	bl	cc0c <mem_init>
	link = mem_acquire(&mem_link_rx.free);
   1023e:	4884      	ldr	r0, [pc, #528]	; (10450 <ll_reset+0x2fc>)
   10240:	f7fc fd04 	bl	cc4c <mem_acquire>
	LL_ASSERT(link);
   10244:	4604      	mov	r4, r0
   10246:	2800      	cmp	r0, #0
   10248:	f000 80ca 	beq.w	103e0 <ll_reset+0x28c>
	MEMQ_INIT(ull_rx, link);
   1024c:	4a81      	ldr	r2, [pc, #516]	; (10454 <ll_reset+0x300>)
   1024e:	4620      	mov	r0, r4
   10250:	1f11      	subs	r1, r2, #4
   10252:	f7fc fd4f 	bl	ccf4 <memq_init>
	link = mem_acquire(&mem_link_done.free);
   10256:	487c      	ldr	r0, [pc, #496]	; (10448 <ll_reset+0x2f4>)
   10258:	f7fc fcf8 	bl	cc4c <mem_acquire>
	LL_ASSERT(link);
   1025c:	4604      	mov	r4, r0
   1025e:	2800      	cmp	r0, #0
   10260:	f000 80cc 	beq.w	103fc <ll_reset+0x2a8>
	MEMQ_INIT(ull_done, link);
   10264:	4a7c      	ldr	r2, [pc, #496]	; (10458 <ll_reset+0x304>)
   10266:	4620      	mov	r0, r4
   10268:	1f11      	subs	r1, r2, #4
   1026a:	f7fc fd43 	bl	ccf4 <memq_init>
	link = mem_acquire(&mem_link_rx.free);
   1026e:	4878      	ldr	r0, [pc, #480]	; (10450 <ll_reset+0x2fc>)
   10270:	f7fc fcec 	bl	cc4c <mem_acquire>
	LL_ASSERT(link);
   10274:	4604      	mov	r4, r0
   10276:	2800      	cmp	r0, #0
   10278:	f000 80a4 	beq.w	103c4 <ll_reset+0x270>
	MEMQ_INIT(ll_rx, link);
   1027c:	4a77      	ldr	r2, [pc, #476]	; (1045c <ll_reset+0x308>)
	mem_link_rx.quota_pdu = RX_CNT;
   1027e:	4e78      	ldr	r6, [pc, #480]	; (10460 <ll_reset+0x30c>)
		rx = mem_acquire(&mem_pdu_rx.free);
   10280:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 1044c <ll_reset+0x2f8>
	MEMQ_INIT(ll_rx, link);
   10284:	4620      	mov	r0, r4
   10286:	1f11      	subs	r1, r2, #4
	mem_link_rx.quota_pdu = RX_CNT;
   10288:	46b0      	mov	r8, r6
	MEMQ_INIT(ll_rx, link);
   1028a:	f7fc fd33 	bl	ccf4 <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
   1028e:	2307      	movs	r3, #7
   10290:	f808 3b04 	strb.w	r3, [r8], #4
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   10294:	78ec      	ldrb	r4, [r5, #3]
   10296:	f04f 0a06 	mov.w	sl, #6
	if (last == count) {
   1029a:	786a      	ldrb	r2, [r5, #1]
   1029c:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   1029e:	3401      	adds	r4, #1
   102a0:	b2e4      	uxtb	r4, r4
		last = 0U;
   102a2:	42a2      	cmp	r2, r4
   102a4:	bf08      	it	eq
   102a6:	2400      	moveq	r4, #0
	if (last == first) {
   102a8:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   102aa:	4640      	mov	r0, r8
   102ac:	d04d      	beq.n	1034a <ll_reset+0x1f6>
   102ae:	f7fc fccd 	bl	cc4c <mem_acquire>
   102b2:	4683      	mov	fp, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   102b4:	4648      	mov	r0, r9
		if (!link) {
   102b6:	f1bb 0f00 	cmp.w	fp, #0
   102ba:	d043      	beq.n	10344 <ll_reset+0x1f0>
		rx = mem_acquire(&mem_pdu_rx.free);
   102bc:	f7fc fcc6 	bl	cc4c <mem_acquire>
		if (!rx) {
   102c0:	2800      	cmp	r0, #0
   102c2:	f000 80a9 	beq.w	10418 <ll_reset+0x2c4>
		rx->link = link;
   102c6:	f8c0 b000 	str.w	fp, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   102ca:	78ea      	ldrb	r2, [r5, #3]
   102cc:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   102ce:	fb02 5303 	mla	r3, r2, r3, r5
   102d2:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   102d4:	7833      	ldrb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
   102d6:	70ec      	strb	r4, [r5, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   102d8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
	mem_link_rx.quota_pdu += delta;
   102dc:	3b01      	subs	r3, #1
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   102de:	fa5f fa8a 	uxtb.w	sl, sl
	mem_link_rx.quota_pdu += delta;
   102e2:	b2db      	uxtb	r3, r3
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   102e4:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
	mem_link_rx.quota_pdu += delta;
   102e8:	7033      	strb	r3, [r6, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   102ea:	d1d6      	bne.n	1029a <ll_reset+0x146>
	while (mem_link_rx.quota_pdu &&
   102ec:	b353      	cbz	r3, 10344 <ll_reset+0x1f0>
   102ee:	78fc      	ldrb	r4, [r7, #3]
		link = mem_acquire(&mem_link_rx.free);
   102f0:	f8df 915c 	ldr.w	r9, [pc, #348]	; 10450 <ll_reset+0x2fc>
		rx = mem_acquire(&mem_pdu_rx.free);
   102f4:	f8df 8154 	ldr.w	r8, [pc, #340]	; 1044c <ll_reset+0x2f8>
		link->mem = NULL;
   102f8:	2500      	movs	r5, #0
	if (last == count) {
   102fa:	787a      	ldrb	r2, [r7, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   102fc:	78bb      	ldrb	r3, [r7, #2]
	last = last + 1;
   102fe:	3401      	adds	r4, #1
   10300:	b2e4      	uxtb	r4, r4
		last = 0U;
   10302:	42a2      	cmp	r2, r4
   10304:	bf08      	it	eq
   10306:	2400      	moveq	r4, #0
	if (last == first) {
   10308:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   1030a:	4648      	mov	r0, r9
   1030c:	d01a      	beq.n	10344 <ll_reset+0x1f0>
   1030e:	f7fc fc9d 	bl	cc4c <mem_acquire>
   10312:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   10314:	4640      	mov	r0, r8
		if (!link) {
   10316:	f1ba 0f00 	cmp.w	sl, #0
   1031a:	d013      	beq.n	10344 <ll_reset+0x1f0>
		rx = mem_acquire(&mem_pdu_rx.free);
   1031c:	f7fc fc96 	bl	cc4c <mem_acquire>
		if (!rx) {
   10320:	2800      	cmp	r0, #0
   10322:	d07e      	beq.n	10422 <ll_reset+0x2ce>
		link->mem = NULL;
   10324:	f8ca 5004 	str.w	r5, [sl, #4]
		rx->link = link;
   10328:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1032c:	78fa      	ldrb	r2, [r7, #3]
   1032e:	783b      	ldrb	r3, [r7, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   10330:	fb02 7303 	mla	r3, r2, r3, r7
   10334:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   10336:	7833      	ldrb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
   10338:	70fc      	strb	r4, [r7, #3]
   1033a:	3b01      	subs	r3, #1
   1033c:	b2db      	uxtb	r3, r3
   1033e:	7033      	strb	r3, [r6, #0]
	while (mem_link_rx.quota_pdu &&
   10340:	2b00      	cmp	r3, #0
   10342:	d1da      	bne.n	102fa <ll_reset+0x1a6>
}
   10344:	b007      	add	sp, #28
   10346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!max) {
   1034a:	f1ba 0f00 	cmp.w	sl, #0
   1034e:	d0f9      	beq.n	10344 <ll_reset+0x1f0>
   10350:	7833      	ldrb	r3, [r6, #0]
   10352:	e7cb      	b.n	102ec <ll_reset+0x198>
	LL_ASSERT(!err);
   10354:	4a43      	ldr	r2, [pc, #268]	; (10464 <ll_reset+0x310>)
   10356:	4944      	ldr	r1, [pc, #272]	; (10468 <ll_reset+0x314>)
   10358:	4844      	ldr	r0, [pc, #272]	; (1046c <ll_reset+0x318>)
   1035a:	f240 23da 	movw	r3, #730	; 0x2da
   1035e:	f00e f811 	bl	1e384 <printk>
   10362:	4040      	eors	r0, r0
   10364:	f380 8811 	msr	BASEPRI, r0
   10368:	f04f 0003 	mov.w	r0, #3
   1036c:	df02      	svc	2
   1036e:	e728      	b.n	101c2 <ll_reset+0x6e>
		LL_ASSERT(!retval);
   10370:	4a3c      	ldr	r2, [pc, #240]	; (10464 <ll_reset+0x310>)
   10372:	493f      	ldr	r1, [pc, #252]	; (10470 <ll_reset+0x31c>)
   10374:	483d      	ldr	r0, [pc, #244]	; (1046c <ll_reset+0x318>)
   10376:	f240 23cd 	movw	r3, #717	; 0x2cd
   1037a:	f00e f803 	bl	1e384 <printk>
   1037e:	4040      	eors	r0, r0
   10380:	f380 8811 	msr	BASEPRI, r0
   10384:	f04f 0003 	mov.w	r0, #3
   10388:	df02      	svc	2
   1038a:	e70e      	b.n	101aa <ll_reset+0x56>
	LL_ASSERT(!err);
   1038c:	4a35      	ldr	r2, [pc, #212]	; (10464 <ll_reset+0x310>)
   1038e:	4936      	ldr	r1, [pc, #216]	; (10468 <ll_reset+0x314>)
   10390:	4836      	ldr	r0, [pc, #216]	; (1046c <ll_reset+0x318>)
   10392:	f240 239b 	movw	r3, #667	; 0x29b
   10396:	f00d fff5 	bl	1e384 <printk>
   1039a:	4040      	eors	r0, r0
   1039c:	f380 8811 	msr	BASEPRI, r0
   103a0:	f04f 0003 	mov.w	r0, #3
   103a4:	df02      	svc	2
   103a6:	e6e2      	b.n	1016e <ll_reset+0x1a>
	LL_ASSERT(!err);
   103a8:	4a2e      	ldr	r2, [pc, #184]	; (10464 <ll_reset+0x310>)
   103aa:	492f      	ldr	r1, [pc, #188]	; (10468 <ll_reset+0x314>)
   103ac:	482f      	ldr	r0, [pc, #188]	; (1046c <ll_reset+0x318>)
   103ae:	f240 234b 	movw	r3, #587	; 0x24b
   103b2:	f00d ffe7 	bl	1e384 <printk>
   103b6:	4040      	eors	r0, r0
   103b8:	f380 8811 	msr	BASEPRI, r0
   103bc:	f04f 0003 	mov.w	r0, #3
   103c0:	df02      	svc	2
   103c2:	e6cf      	b.n	10164 <ll_reset+0x10>
	LL_ASSERT(link);
   103c4:	4a27      	ldr	r2, [pc, #156]	; (10464 <ll_reset+0x310>)
   103c6:	492b      	ldr	r1, [pc, #172]	; (10474 <ll_reset+0x320>)
   103c8:	4828      	ldr	r0, [pc, #160]	; (1046c <ll_reset+0x318>)
   103ca:	f240 7317 	movw	r3, #1815	; 0x717
   103ce:	f00d ffd9 	bl	1e384 <printk>
   103d2:	4040      	eors	r0, r0
   103d4:	f380 8811 	msr	BASEPRI, r0
   103d8:	f04f 0003 	mov.w	r0, #3
   103dc:	df02      	svc	2
   103de:	e74d      	b.n	1027c <ll_reset+0x128>
	LL_ASSERT(link);
   103e0:	4a20      	ldr	r2, [pc, #128]	; (10464 <ll_reset+0x310>)
   103e2:	4924      	ldr	r1, [pc, #144]	; (10474 <ll_reset+0x320>)
   103e4:	4821      	ldr	r0, [pc, #132]	; (1046c <ll_reset+0x318>)
   103e6:	f240 7307 	movw	r3, #1799	; 0x707
   103ea:	f00d ffcb 	bl	1e384 <printk>
   103ee:	4040      	eors	r0, r0
   103f0:	f380 8811 	msr	BASEPRI, r0
   103f4:	f04f 0003 	mov.w	r0, #3
   103f8:	df02      	svc	2
   103fa:	e727      	b.n	1024c <ll_reset+0xf8>
	LL_ASSERT(link);
   103fc:	4a19      	ldr	r2, [pc, #100]	; (10464 <ll_reset+0x310>)
   103fe:	491d      	ldr	r1, [pc, #116]	; (10474 <ll_reset+0x320>)
   10400:	481a      	ldr	r0, [pc, #104]	; (1046c <ll_reset+0x318>)
   10402:	f240 730f 	movw	r3, #1807	; 0x70f
   10406:	f00d ffbd 	bl	1e384 <printk>
   1040a:	4040      	eors	r0, r0
   1040c:	f380 8811 	msr	BASEPRI, r0
   10410:	f04f 0003 	mov.w	r0, #3
   10414:	df02      	svc	2
   10416:	e725      	b.n	10264 <ll_reset+0x110>
			mem_release(link, &mem_link_rx.free);
   10418:	490d      	ldr	r1, [pc, #52]	; (10450 <ll_reset+0x2fc>)
   1041a:	4658      	mov	r0, fp
   1041c:	f7fc fc2c 	bl	cc78 <mem_release>
			return;
   10420:	e790      	b.n	10344 <ll_reset+0x1f0>
			mem_release(link, &mem_link_rx.free);
   10422:	490b      	ldr	r1, [pc, #44]	; (10450 <ll_reset+0x2fc>)
   10424:	4650      	mov	r0, sl
   10426:	f7fc fc27 	bl	cc78 <mem_release>
			return;
   1042a:	e78b      	b.n	10344 <ll_reset+0x1f0>
   1042c:	200003e4 	.word	0x200003e4
   10430:	200002a0 	.word	0x200002a0
   10434:	200002c8 	.word	0x200002c8
   10438:	200002b4 	.word	0x200002b4
   1043c:	200002e0 	.word	0x200002e0
   10440:	20000408 	.word	0x20000408
   10444:	200018bc 	.word	0x200018bc
   10448:	2000195c 	.word	0x2000195c
   1044c:	200019e0 	.word	0x200019e0
   10450:	20001984 	.word	0x20001984
   10454:	20001c80 	.word	0x20001c80
   10458:	20001c78 	.word	0x20001c78
   1045c:	20001c70 	.word	0x20001c70
   10460:	20001980 	.word	0x20001980
   10464:	00024590 	.word	0x00024590
   10468:	000245cc 	.word	0x000245cc
   1046c:	00024334 	.word	0x00024334
   10470:	00024600 	.word	0x00024600
   10474:	000248cc 	.word	0x000248cc

00010478 <ll_rx_get>:
{
   10478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1047c:	b085      	sub	sp, #20
   1047e:	e9cd 0100 	strd	r0, r1, [sp]
   10482:	4c67      	ldr	r4, [pc, #412]	; (10620 <ll_rx_get+0x1a8>)
				mem_release(link, &mem_link_rx.free);
   10484:	4d67      	ldr	r5, [pc, #412]	; (10624 <ll_rx_get+0x1ac>)
   10486:	4e68      	ldr	r6, [pc, #416]	; (10628 <ll_rx_get+0x1b0>)
	*node_rx = NULL;
   10488:	9a00      	ldr	r2, [sp, #0]
   1048a:	2300      	movs	r3, #0
   1048c:	6013      	str	r3, [r2, #0]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
   1048e:	e9d6 0100 	ldrd	r0, r1, [r6]
   10492:	aa03      	add	r2, sp, #12
   10494:	f7fc fc44 	bl	cd20 <memq_peek>
	if (link) {
   10498:	4680      	mov	r8, r0
   1049a:	2800      	cmp	r0, #0
   1049c:	f000 80b6 	beq.w	1060c <ll_rx_get+0x194>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   104a0:	9b03      	ldr	r3, [sp, #12]
   104a2:	4962      	ldr	r1, [pc, #392]	; (1062c <ll_rx_get+0x1b4>)
   104a4:	781a      	ldrb	r2, [r3, #0]
   104a6:	9801      	ldr	r0, [sp, #4]
   104a8:	f7ff faf8 	bl	fa9c <tx_cmplt_get>
		if (!cmplt) {
   104ac:	4603      	mov	r3, r0
   104ae:	2800      	cmp	r0, #0
   104b0:	f040 80a3 	bne.w	105fa <ll_rx_get+0x182>
			f = mfifo_tx_ack.f;
   104b4:	78a2      	ldrb	r2, [r4, #2]
   104b6:	f88d 2009 	strb.w	r2, [sp, #9]
				cmplt_curr = tx_cmplt_get(&h, &f,
   104ba:	78e2      	ldrb	r2, [r4, #3]
   104bc:	f10d 0109 	add.w	r1, sp, #9
   104c0:	f10d 000a 	add.w	r0, sp, #10
   104c4:	461f      	mov	r7, r3
   104c6:	f7ff fae9 	bl	fa9c <tx_cmplt_get>
   104ca:	ea47 0200 	orr.w	r2, r7, r0
			} while ((cmplt_prev != 0U) ||
   104ce:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
				cmplt_curr = tx_cmplt_get(&h, &f,
   104d2:	4603      	mov	r3, r0
			} while ((cmplt_prev != 0U) ||
   104d4:	d1f1      	bne.n	104ba <ll_rx_get+0x42>
			if (rx->type == NODE_RX_TYPE_RELEASE) {
   104d6:	9b03      	ldr	r3, [sp, #12]
   104d8:	7919      	ldrb	r1, [r3, #4]
   104da:	2901      	cmp	r1, #1
   104dc:	f040 808a 	bne.w	105f4 <ll_rx_get+0x17c>
				(void)memq_dequeue(memq_ll_rx.tail,
   104e0:	4951      	ldr	r1, [pc, #324]	; (10628 <ll_rx_get+0x1b0>)
   104e2:	6870      	ldr	r0, [r6, #4]
   104e4:	f7fc fc24 	bl	cd30 <memq_dequeue>
				mem_release(link, &mem_link_rx.free);
   104e8:	4951      	ldr	r1, [pc, #324]	; (10630 <ll_rx_get+0x1b8>)
   104ea:	4640      	mov	r0, r8
   104ec:	f7fc fbc4 	bl	cc78 <mem_release>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   104f0:	782b      	ldrb	r3, [r5, #0]
   104f2:	2b06      	cmp	r3, #6
   104f4:	d86f      	bhi.n	105d6 <ll_rx_get+0x15e>
	mem_link_rx.quota_pdu += delta;
   104f6:	3301      	adds	r3, #1
				mem_release(rx, &mem_pdu_rx.free);
   104f8:	494e      	ldr	r1, [pc, #312]	; (10634 <ll_rx_get+0x1bc>)
   104fa:	9803      	ldr	r0, [sp, #12]
	mem_link_rx.quota_pdu += delta;
   104fc:	702b      	strb	r3, [r5, #0]
				mem_release(rx, &mem_pdu_rx.free);
   104fe:	f7fc fbbb 	bl	cc78 <mem_release>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   10502:	782b      	ldrb	r3, [r5, #0]
   10504:	2b00      	cmp	r3, #0
   10506:	d0bf      	beq.n	10488 <ll_rx_get+0x10>
   10508:	f8df 8138 	ldr.w	r8, [pc, #312]	; 10644 <ll_rx_get+0x1cc>
	last = last + 1;
   1050c:	f898 7003 	ldrb.w	r7, [r8, #3]
	if (last == count) {
   10510:	f898 2001 	ldrb.w	r2, [r8, #1]
   10514:	f898 3002 	ldrb.w	r3, [r8, #2]
	last = last + 1;
   10518:	3701      	adds	r7, #1
   1051a:	b2ff      	uxtb	r7, r7
		last = 0U;
   1051c:	42ba      	cmp	r2, r7
   1051e:	bf08      	it	eq
   10520:	2700      	moveq	r7, #0
	if (last == first) {
   10522:	429f      	cmp	r7, r3
   10524:	d0b0      	beq.n	10488 <ll_rx_get+0x10>
		link = mem_acquire(&mem_link_rx.free);
   10526:	4842      	ldr	r0, [pc, #264]	; (10630 <ll_rx_get+0x1b8>)
   10528:	f7fc fb90 	bl	cc4c <mem_acquire>
		if (!link) {
   1052c:	4682      	mov	sl, r0
   1052e:	2800      	cmp	r0, #0
   10530:	d0aa      	beq.n	10488 <ll_rx_get+0x10>
		rx = mem_acquire(&mem_pdu_rx.free);
   10532:	4840      	ldr	r0, [pc, #256]	; (10634 <ll_rx_get+0x1bc>)
   10534:	f7fc fb8a 	bl	cc4c <mem_acquire>
		if (!rx) {
   10538:	2800      	cmp	r0, #0
   1053a:	d062      	beq.n	10602 <ll_rx_get+0x18a>
		rx->link = link;
   1053c:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   10540:	f898 2003 	ldrb.w	r2, [r8, #3]
   10544:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   10548:	fb02 8303 	mla	r3, r2, r3, r8
   1054c:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   1054e:	782b      	ldrb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   10550:	f888 7003 	strb.w	r7, [r8, #3]
   10554:	3b01      	subs	r3, #1
   10556:	b2db      	uxtb	r3, r3
   10558:	702b      	strb	r3, [r5, #0]
	while (mem_link_rx.quota_pdu &&
   1055a:	2b00      	cmp	r3, #0
   1055c:	d094      	beq.n	10488 <ll_rx_get+0x10>
   1055e:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 10648 <ll_rx_get+0x1d0>
		link = mem_acquire(&mem_link_rx.free);
   10562:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 10630 <ll_rx_get+0x1b8>
   10566:	f89a 7003 	ldrb.w	r7, [sl, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   1056a:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 10634 <ll_rx_get+0x1bc>
   1056e:	e014      	b.n	1059a <ll_rx_get+0x122>
		link->mem = NULL;
   10570:	2300      	movs	r3, #0
   10572:	f8c9 3004 	str.w	r3, [r9, #4]
		rx->link = link;
   10576:	f8c0 9000 	str.w	r9, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1057a:	f89a 2003 	ldrb.w	r2, [sl, #3]
   1057e:	f89a 3000 	ldrb.w	r3, [sl]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   10582:	fb02 a303 	mla	r3, r2, r3, sl
   10586:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   10588:	782b      	ldrb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   1058a:	f88a 7003 	strb.w	r7, [sl, #3]
   1058e:	3b01      	subs	r3, #1
   10590:	b2db      	uxtb	r3, r3
   10592:	702b      	strb	r3, [r5, #0]
	while (mem_link_rx.quota_pdu &&
   10594:	2b00      	cmp	r3, #0
   10596:	f43f af77 	beq.w	10488 <ll_rx_get+0x10>
	if (last == count) {
   1059a:	f89a 2001 	ldrb.w	r2, [sl, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   1059e:	f89a 3002 	ldrb.w	r3, [sl, #2]
	last = last + 1;
   105a2:	3701      	adds	r7, #1
   105a4:	b2ff      	uxtb	r7, r7
		last = 0U;
   105a6:	42ba      	cmp	r2, r7
   105a8:	bf08      	it	eq
   105aa:	2700      	moveq	r7, #0
	if (last == first) {
   105ac:	429f      	cmp	r7, r3
		link = mem_acquire(&mem_link_rx.free);
   105ae:	4640      	mov	r0, r8
   105b0:	f43f af6a 	beq.w	10488 <ll_rx_get+0x10>
   105b4:	f7fc fb4a 	bl	cc4c <mem_acquire>
   105b8:	4681      	mov	r9, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   105ba:	4658      	mov	r0, fp
		if (!link) {
   105bc:	f1b9 0f00 	cmp.w	r9, #0
   105c0:	f43f af62 	beq.w	10488 <ll_rx_get+0x10>
		rx = mem_acquire(&mem_pdu_rx.free);
   105c4:	f7fc fb42 	bl	cc4c <mem_acquire>
		if (!rx) {
   105c8:	2800      	cmp	r0, #0
   105ca:	d1d1      	bne.n	10570 <ll_rx_get+0xf8>
			mem_release(link, &mem_link_rx.free);
   105cc:	4918      	ldr	r1, [pc, #96]	; (10630 <ll_rx_get+0x1b8>)
   105ce:	4648      	mov	r0, r9
   105d0:	f7fc fb52 	bl	cc78 <mem_release>
			return;
   105d4:	e758      	b.n	10488 <ll_rx_get+0x10>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   105d6:	4a18      	ldr	r2, [pc, #96]	; (10638 <ll_rx_get+0x1c0>)
   105d8:	4918      	ldr	r1, [pc, #96]	; (1063c <ll_rx_get+0x1c4>)
   105da:	4819      	ldr	r0, [pc, #100]	; (10640 <ll_rx_get+0x1c8>)
   105dc:	f240 531c 	movw	r3, #1308	; 0x51c
   105e0:	f00d fed0 	bl	1e384 <printk>
   105e4:	4040      	eors	r0, r0
   105e6:	f380 8811 	msr	BASEPRI, r0
   105ea:	f04f 0003 	mov.w	r0, #3
   105ee:	df02      	svc	2
   105f0:	782b      	ldrb	r3, [r5, #0]
   105f2:	e780      	b.n	104f6 <ll_rx_get+0x7e>
			*node_rx = rx;
   105f4:	9900      	ldr	r1, [sp, #0]
   105f6:	600b      	str	r3, [r1, #0]
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   105f8:	4613      	mov	r3, r2
}
   105fa:	4618      	mov	r0, r3
   105fc:	b005      	add	sp, #20
   105fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, &mem_link_rx.free);
   10602:	490b      	ldr	r1, [pc, #44]	; (10630 <ll_rx_get+0x1b8>)
   10604:	4650      	mov	r0, sl
   10606:	f7fc fb37 	bl	cc78 <mem_release>
			return;
   1060a:	e73d      	b.n	10488 <ll_rx_get+0x10>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
   1060c:	78e2      	ldrb	r2, [r4, #3]
   1060e:	4907      	ldr	r1, [pc, #28]	; (1062c <ll_rx_get+0x1b4>)
   10610:	9801      	ldr	r0, [sp, #4]
   10612:	f7ff fa43 	bl	fa9c <tx_cmplt_get>
   10616:	4603      	mov	r3, r0
}
   10618:	4618      	mov	r0, r3
   1061a:	b005      	add	sp, #20
   1061c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10620:	200003e4 	.word	0x200003e4
   10624:	20001980 	.word	0x20001980
   10628:	20001c6c 	.word	0x20001c6c
   1062c:	200003e6 	.word	0x200003e6
   10630:	20001984 	.word	0x20001984
   10634:	200019e0 	.word	0x200019e0
   10638:	00024590 	.word	0x00024590
   1063c:	00024608 	.word	0x00024608
   10640:	00024334 	.word	0x00024334
   10644:	200002c8 	.word	0x200002c8
   10648:	200002b4 	.word	0x200002b4

0001064c <ll_rx_dequeue>:
{
   1064c:	b570      	push	{r4, r5, r6, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   1064e:	495d      	ldr	r1, [pc, #372]	; (107c4 <ll_rx_dequeue+0x178>)
{
   10650:	b082      	sub	sp, #8
	struct node_rx_hdr *rx = NULL;
   10652:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   10654:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
   10656:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   10658:	aa01      	add	r2, sp, #4
   1065a:	f7fc fb69 	bl	cd30 <memq_dequeue>
	LL_ASSERT(link);
   1065e:	4604      	mov	r4, r0
   10660:	2800      	cmp	r0, #0
   10662:	d062      	beq.n	1072a <ll_rx_dequeue+0xde>
	mem_release(link, &mem_link_rx.free);
   10664:	4958      	ldr	r1, [pc, #352]	; (107c8 <ll_rx_dequeue+0x17c>)
   10666:	4620      	mov	r0, r4
   10668:	f7fc fb06 	bl	cc78 <mem_release>
	switch (rx->type) {
   1066c:	9a01      	ldr	r2, [sp, #4]
   1066e:	7913      	ldrb	r3, [r2, #4]
   10670:	2b1a      	cmp	r3, #26
   10672:	d80f      	bhi.n	10694 <ll_rx_dequeue+0x48>
   10674:	e8df f003 	tbb	[pc, r3]
   10678:	1d0e0e1d 	.word	0x1d0e0e1d
   1067c:	0e0e0e0e 	.word	0x0e0e0e0e
   10680:	0e0e0e0e 	.word	0x0e0e0e0e
   10684:	0e0e0e0e 	.word	0x0e0e0e0e
   10688:	0e0e0e0e 	.word	0x0e0e0e0e
   1068c:	1d1d1d2e 	.word	0x1d1d1d2e
   10690:	1d1d      	.short	0x1d1d
   10692:	1d          	.byte	0x1d
   10693:	00          	.byte	0x00
		LL_ASSERT(0);
   10694:	4a4d      	ldr	r2, [pc, #308]	; (107cc <ll_rx_dequeue+0x180>)
   10696:	494e      	ldr	r1, [pc, #312]	; (107d0 <ll_rx_dequeue+0x184>)
   10698:	484e      	ldr	r0, [pc, #312]	; (107d4 <ll_rx_dequeue+0x188>)
   1069a:	f240 4332 	movw	r3, #1074	; 0x432
   1069e:	f00d fe71 	bl	1e384 <printk>
   106a2:	4040      	eors	r0, r0
   106a4:	f380 8811 	msr	BASEPRI, r0
   106a8:	f04f 0003 	mov.w	r0, #3
   106ac:	df02      	svc	2
}
   106ae:	b002      	add	sp, #8
   106b0:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
   106b2:	2b00      	cmp	r3, #0
   106b4:	d1fb      	bne.n	106ae <ll_rx_dequeue+0x62>
   106b6:	4a45      	ldr	r2, [pc, #276]	; (107cc <ll_rx_dequeue+0x180>)
   106b8:	4947      	ldr	r1, [pc, #284]	; (107d8 <ll_rx_dequeue+0x18c>)
   106ba:	4846      	ldr	r0, [pc, #280]	; (107d4 <ll_rx_dequeue+0x188>)
   106bc:	f240 432e 	movw	r3, #1070	; 0x42e
   106c0:	f00d fe60 	bl	1e384 <printk>
   106c4:	4040      	eors	r0, r0
   106c6:	f380 8811 	msr	BASEPRI, r0
   106ca:	f04f 0003 	mov.w	r0, #3
   106ce:	df02      	svc	2
}
   106d0:	b002      	add	sp, #8
   106d2:	bd70      	pop	{r4, r5, r6, pc}
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
   106d4:	7f13      	ldrb	r3, [r2, #28]
   106d6:	2b3c      	cmp	r3, #60	; 0x3c
   106d8:	d035      	beq.n	10746 <ll_rx_dequeue+0xfa>
   106da:	7f53      	ldrb	r3, [r2, #29]
   106dc:	b1bb      	cbz	r3, 1070e <ll_rx_dequeue+0xc2>
			struct ll_adv_set *adv = (void *)HDR_LLL2EVT(lll);
   106de:	6893      	ldr	r3, [r2, #8]
   106e0:	681c      	ldr	r4, [r3, #0]
				if (adv->node_rx_cc_free) {
   106e2:	6c60      	ldr	r0, [r4, #68]	; 0x44
   106e4:	b120      	cbz	r0, 106f0 <ll_rx_dequeue+0xa4>
					adv->node_rx_cc_free = NULL;
   106e6:	2300      	movs	r3, #0
					mem_release(rx_free, &mem_pdu_rx.free);
   106e8:	493c      	ldr	r1, [pc, #240]	; (107dc <ll_rx_dequeue+0x190>)
					adv->node_rx_cc_free = NULL;
   106ea:	6463      	str	r3, [r4, #68]	; 0x44
					mem_release(rx_free, &mem_pdu_rx.free);
   106ec:	f7fc fac4 	bl	cc78 <mem_release>
			adv->is_enabled = 0U;
   106f0:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
   106f4:	f36f 0300 	bfc	r3, #0, #1
   106f8:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
			      ull_adv_is_enabled(0));
   106fc:	2000      	movs	r0, #0
   106fe:	f001 f823 	bl	11748 <ull_adv_is_enabled>
			if (!bm) {
   10702:	2800      	cmp	r0, #0
   10704:	d1d3      	bne.n	106ae <ll_rx_dequeue+0x62>
				ull_filter_adv_scan_state_cb(0);
   10706:	f006 f9eb 	bl	16ae0 <ull_filter_adv_scan_state_cb>
}
   1070a:	b002      	add	sp, #8
   1070c:	bd70      	pop	{r4, r5, r6, pc}
			LL_ASSERT(0);
   1070e:	4a2f      	ldr	r2, [pc, #188]	; (107cc <ll_rx_dequeue+0x180>)
   10710:	492f      	ldr	r1, [pc, #188]	; (107d0 <ll_rx_dequeue+0x184>)
   10712:	4830      	ldr	r0, [pc, #192]	; (107d4 <ll_rx_dequeue+0x188>)
   10714:	f44f 7373 	mov.w	r3, #972	; 0x3cc
   10718:	f00d fe34 	bl	1e384 <printk>
   1071c:	4040      	eors	r0, r0
   1071e:	f380 8811 	msr	BASEPRI, r0
   10722:	f04f 0003 	mov.w	r0, #3
   10726:	df02      	svc	2
   10728:	e7e8      	b.n	106fc <ll_rx_dequeue+0xb0>
	LL_ASSERT(link);
   1072a:	4a28      	ldr	r2, [pc, #160]	; (107cc <ll_rx_dequeue+0x180>)
   1072c:	492c      	ldr	r1, [pc, #176]	; (107e0 <ll_rx_dequeue+0x194>)
   1072e:	4829      	ldr	r0, [pc, #164]	; (107d4 <ll_rx_dequeue+0x188>)
   10730:	f240 3331 	movw	r3, #817	; 0x331
   10734:	f00d fe26 	bl	1e384 <printk>
   10738:	4040      	eors	r0, r0
   1073a:	f380 8811 	msr	BASEPRI, r0
   1073e:	f04f 0003 	mov.w	r0, #3
   10742:	df02      	svc	2
   10744:	e78e      	b.n	10664 <ll_rx_dequeue+0x18>
			struct lll_adv *lll = ftr->param;
   10746:	6896      	ldr	r6, [r2, #8]
			struct ll_adv_set *adv = (void *)HDR_LLL2EVT(lll);
   10748:	e9d6 4500 	ldrd	r4, r5, [r6]
				LL_ASSERT(conn_lll);
   1074c:	b1ed      	cbz	r5, 1078a <ll_rx_dequeue+0x13e>
				LL_ASSERT(!conn_lll->link_tx_free);
   1074e:	6dab      	ldr	r3, [r5, #88]	; 0x58
				lll->conn = NULL;
   10750:	2200      	movs	r2, #0
   10752:	6072      	str	r2, [r6, #4]
				LL_ASSERT(!conn_lll->link_tx_free);
   10754:	b163      	cbz	r3, 10770 <ll_rx_dequeue+0x124>
   10756:	4a1d      	ldr	r2, [pc, #116]	; (107cc <ll_rx_dequeue+0x180>)
   10758:	4922      	ldr	r1, [pc, #136]	; (107e4 <ll_rx_dequeue+0x198>)
   1075a:	481e      	ldr	r0, [pc, #120]	; (107d4 <ll_rx_dequeue+0x188>)
   1075c:	f44f 7369 	mov.w	r3, #932	; 0x3a4
   10760:	f00d fe10 	bl	1e384 <printk>
   10764:	4040      	eors	r0, r0
   10766:	f380 8811 	msr	BASEPRI, r0
   1076a:	f04f 0003 	mov.w	r0, #3
   1076e:	df02      	svc	2
				link = memq_deinit(&conn_lll->memq_tx.head,
   10770:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   10774:	f105 0048 	add.w	r0, r5, #72	; 0x48
   10778:	f7fc fac0 	bl	ccfc <memq_deinit>
				LL_ASSERT(link);
   1077c:	4606      	mov	r6, r0
   1077e:	b190      	cbz	r0, 107a6 <ll_rx_dequeue+0x15a>
				ll_conn_release(conn);
   10780:	6828      	ldr	r0, [r5, #0]
				conn_lll->link_tx_free = link;
   10782:	65ae      	str	r6, [r5, #88]	; 0x58
				ll_conn_release(conn);
   10784:	f001 fde8 	bl	12358 <ll_conn_release>
   10788:	e7b2      	b.n	106f0 <ll_rx_dequeue+0xa4>
				LL_ASSERT(conn_lll);
   1078a:	4a10      	ldr	r2, [pc, #64]	; (107cc <ll_rx_dequeue+0x180>)
   1078c:	4916      	ldr	r1, [pc, #88]	; (107e8 <ll_rx_dequeue+0x19c>)
   1078e:	4811      	ldr	r0, [pc, #68]	; (107d4 <ll_rx_dequeue+0x188>)
   10790:	f240 33a1 	movw	r3, #929	; 0x3a1
   10794:	f00d fdf6 	bl	1e384 <printk>
   10798:	4040      	eors	r0, r0
   1079a:	f380 8811 	msr	BASEPRI, r0
   1079e:	f04f 0003 	mov.w	r0, #3
   107a2:	df02      	svc	2
   107a4:	e7d3      	b.n	1074e <ll_rx_dequeue+0x102>
				LL_ASSERT(link);
   107a6:	4a09      	ldr	r2, [pc, #36]	; (107cc <ll_rx_dequeue+0x180>)
   107a8:	490d      	ldr	r1, [pc, #52]	; (107e0 <ll_rx_dequeue+0x194>)
   107aa:	480a      	ldr	r0, [pc, #40]	; (107d4 <ll_rx_dequeue+0x188>)
   107ac:	f240 33a7 	movw	r3, #935	; 0x3a7
   107b0:	f00d fde8 	bl	1e384 <printk>
   107b4:	4040      	eors	r0, r0
   107b6:	f380 8811 	msr	BASEPRI, r0
   107ba:	f04f 0003 	mov.w	r0, #3
   107be:	df02      	svc	2
   107c0:	e7de      	b.n	10780 <ll_rx_dequeue+0x134>
   107c2:	bf00      	nop
   107c4:	20001c6c 	.word	0x20001c6c
   107c8:	20001984 	.word	0x20001984
   107cc:	00024590 	.word	0x00024590
   107d0:	000243a4 	.word	0x000243a4
   107d4:	00024334 	.word	0x00024334
   107d8:	00024660 	.word	0x00024660
   107dc:	200019e0 	.word	0x200019e0
   107e0:	000248cc 	.word	0x000248cc
   107e4:	00024648 	.word	0x00024648
   107e8:	0002463c 	.word	0x0002463c

000107ec <ll_rx_mem_release>:
{
   107ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	rx = *node_rx;
   107f0:	6804      	ldr	r4, [r0, #0]
	while (rx) {
   107f2:	4e88      	ldr	r6, [pc, #544]	; (10a14 <ll_rx_mem_release+0x228>)
{
   107f4:	4681      	mov	r9, r0
	while (rx) {
   107f6:	b344      	cbz	r4, 1084a <ll_rx_mem_release+0x5e>
			LL_ASSERT(0);
   107f8:	f8df 8244 	ldr.w	r8, [pc, #580]	; 10a40 <ll_rx_mem_release+0x254>
   107fc:	f8df a244 	ldr.w	sl, [pc, #580]	; 10a44 <ll_rx_mem_release+0x258>
   10800:	4f85      	ldr	r7, [pc, #532]	; (10a18 <ll_rx_mem_release+0x22c>)
		rx = rx->next;
   10802:	4625      	mov	r5, r4
   10804:	6824      	ldr	r4, [r4, #0]
		switch (rx_free->type) {
   10806:	792b      	ldrb	r3, [r5, #4]
   10808:	2b1a      	cmp	r3, #26
   1080a:	d80f      	bhi.n	1082c <ll_rx_mem_release+0x40>
   1080c:	e8df f003 	tbb	[pc, r3]
   10810:	940e0e94 	.word	0x940e0e94
   10814:	0e0e0e0e 	.word	0x0e0e0e0e
   10818:	0e0e0e0e 	.word	0x0e0e0e0e
   1081c:	0e0e0e0e 	.word	0x0e0e0e0e
   10820:	0e0e0e0e 	.word	0x0e0e0e0e
   10824:	9494af82 	.word	0x9494af82
   10828:	9494      	.short	0x9494
   1082a:	94          	.byte	0x94
   1082b:	00          	.byte	0x00
			LL_ASSERT(0);
   1082c:	f44f 63a2 	mov.w	r3, #1296	; 0x510
   10830:	4642      	mov	r2, r8
   10832:	4651      	mov	r1, sl
   10834:	4638      	mov	r0, r7
   10836:	f00d fda5 	bl	1e384 <printk>
   1083a:	4040      	eors	r0, r0
   1083c:	f380 8811 	msr	BASEPRI, r0
   10840:	f04f 0003 	mov.w	r0, #3
   10844:	df02      	svc	2
	while (rx) {
   10846:	2c00      	cmp	r4, #0
   10848:	d1db      	bne.n	10802 <ll_rx_mem_release+0x16>
	*node_rx = rx;
   1084a:	2300      	movs	r3, #0
   1084c:	f8c9 3000 	str.w	r3, [r9]
	if (max > mem_link_rx.quota_pdu) {
   10850:	7833      	ldrb	r3, [r6, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   10852:	1e5f      	subs	r7, r3, #1
   10854:	b2ff      	uxtb	r7, r7
   10856:	2b00      	cmp	r3, #0
   10858:	d05a      	beq.n	10910 <ll_rx_mem_release+0x124>
   1085a:	4d70      	ldr	r5, [pc, #448]	; (10a1c <ll_rx_mem_release+0x230>)
		link = mem_acquire(&mem_link_rx.free);
   1085c:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 10a24 <ll_rx_mem_release+0x238>
   10860:	78ec      	ldrb	r4, [r5, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   10862:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 10a30 <ll_rx_mem_release+0x244>
	if (last == count) {
   10866:	786a      	ldrb	r2, [r5, #1]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   10868:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   1086a:	3401      	adds	r4, #1
   1086c:	b2e4      	uxtb	r4, r4
		last = 0U;
   1086e:	42a2      	cmp	r2, r4
   10870:	bf08      	it	eq
   10872:	2400      	moveq	r4, #0
	if (last == first) {
   10874:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   10876:	4640      	mov	r0, r8
   10878:	f000 80ac 	beq.w	109d4 <ll_rx_mem_release+0x1e8>
   1087c:	f7fc f9e6 	bl	cc4c <mem_acquire>
   10880:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   10882:	4648      	mov	r0, r9
		if (!link) {
   10884:	f1ba 0f00 	cmp.w	sl, #0
   10888:	d042      	beq.n	10910 <ll_rx_mem_release+0x124>
		rx = mem_acquire(&mem_pdu_rx.free);
   1088a:	f7fc f9df 	bl	cc4c <mem_acquire>
		if (!rx) {
   1088e:	2800      	cmp	r0, #0
   10890:	f000 80ba 	beq.w	10a08 <ll_rx_mem_release+0x21c>
		rx->link = link;
   10894:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   10898:	78ea      	ldrb	r2, [r5, #3]
   1089a:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1089c:	fb02 5303 	mla	r3, r2, r3, r5
   108a0:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   108a2:	7833      	ldrb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
   108a4:	70ec      	strb	r4, [r5, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   108a6:	3f01      	subs	r7, #1
	mem_link_rx.quota_pdu += delta;
   108a8:	3b01      	subs	r3, #1
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   108aa:	b2ff      	uxtb	r7, r7
	mem_link_rx.quota_pdu += delta;
   108ac:	b2db      	uxtb	r3, r3
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   108ae:	2fff      	cmp	r7, #255	; 0xff
	mem_link_rx.quota_pdu += delta;
   108b0:	7033      	strb	r3, [r6, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   108b2:	d1d8      	bne.n	10866 <ll_rx_mem_release+0x7a>
	while (mem_link_rx.quota_pdu &&
   108b4:	b363      	cbz	r3, 10910 <ll_rx_mem_release+0x124>
   108b6:	4d5a      	ldr	r5, [pc, #360]	; (10a20 <ll_rx_mem_release+0x234>)
		link = mem_acquire(&mem_link_rx.free);
   108b8:	4f5a      	ldr	r7, [pc, #360]	; (10a24 <ll_rx_mem_release+0x238>)
   108ba:	78ec      	ldrb	r4, [r5, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   108bc:	f8df 8170 	ldr.w	r8, [pc, #368]	; 10a30 <ll_rx_mem_release+0x244>
		link->mem = NULL;
   108c0:	f04f 0900 	mov.w	r9, #0
	if (last == count) {
   108c4:	786a      	ldrb	r2, [r5, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   108c6:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   108c8:	3401      	adds	r4, #1
   108ca:	b2e4      	uxtb	r4, r4
		last = 0U;
   108cc:	42a2      	cmp	r2, r4
   108ce:	bf08      	it	eq
   108d0:	2400      	moveq	r4, #0
	if (last == first) {
   108d2:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   108d4:	4638      	mov	r0, r7
   108d6:	d01b      	beq.n	10910 <ll_rx_mem_release+0x124>
   108d8:	f7fc f9b8 	bl	cc4c <mem_acquire>
   108dc:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   108de:	4640      	mov	r0, r8
		if (!link) {
   108e0:	f1ba 0f00 	cmp.w	sl, #0
   108e4:	d014      	beq.n	10910 <ll_rx_mem_release+0x124>
		rx = mem_acquire(&mem_pdu_rx.free);
   108e6:	f7fc f9b1 	bl	cc4c <mem_acquire>
		if (!rx) {
   108ea:	2800      	cmp	r0, #0
   108ec:	f000 808c 	beq.w	10a08 <ll_rx_mem_release+0x21c>
		link->mem = NULL;
   108f0:	f8ca 9004 	str.w	r9, [sl, #4]
		rx->link = link;
   108f4:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   108f8:	78ea      	ldrb	r2, [r5, #3]
   108fa:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   108fc:	fb02 5303 	mla	r3, r2, r3, r5
   10900:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   10902:	7833      	ldrb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
   10904:	70ec      	strb	r4, [r5, #3]
   10906:	3b01      	subs	r3, #1
   10908:	b2db      	uxtb	r3, r3
   1090a:	7033      	strb	r3, [r6, #0]
	while (mem_link_rx.quota_pdu &&
   1090c:	2b00      	cmp	r3, #0
   1090e:	d1d9      	bne.n	108c4 <ll_rx_mem_release+0xd8>
}
   10910:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			} else if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
   10914:	7f2b      	ldrb	r3, [r5, #28]
   10916:	2b3c      	cmp	r3, #60	; 0x3c
   10918:	d060      	beq.n	109dc <ll_rx_mem_release+0x1f0>
				LL_ASSERT(!cc->status);
   1091a:	b1db      	cbz	r3, 10954 <ll_rx_mem_release+0x168>
   1091c:	4942      	ldr	r1, [pc, #264]	; (10a28 <ll_rx_mem_release+0x23c>)
   1091e:	f44f 6391 	mov.w	r3, #1160	; 0x488
   10922:	4642      	mov	r2, r8
   10924:	4638      	mov	r0, r7
   10926:	f00d fd2d 	bl	1e384 <printk>
   1092a:	4040      	eors	r0, r0
   1092c:	f380 8811 	msr	BASEPRI, r0
   10930:	f04f 0003 	mov.w	r0, #3
   10934:	df02      	svc	2
   10936:	792b      	ldrb	r3, [r5, #4]
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
   10938:	b963      	cbnz	r3, 10954 <ll_rx_mem_release+0x168>
   1093a:	493c      	ldr	r1, [pc, #240]	; (10a2c <ll_rx_mem_release+0x240>)
   1093c:	f240 43dc 	movw	r3, #1244	; 0x4dc
   10940:	4642      	mov	r2, r8
   10942:	4638      	mov	r0, r7
   10944:	f00d fd1e 	bl	1e384 <printk>
   10948:	4040      	eors	r0, r0
   1094a:	f380 8811 	msr	BASEPRI, r0
   1094e:	f04f 0003 	mov.w	r0, #3
   10952:	df02      	svc	2
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   10954:	7833      	ldrb	r3, [r6, #0]
   10956:	2b06      	cmp	r3, #6
   10958:	d82d      	bhi.n	109b6 <ll_rx_mem_release+0x1ca>
	mem_link_rx.quota_pdu += delta;
   1095a:	3301      	adds	r3, #1
			mem_release(rx_free, &mem_pdu_rx.free);
   1095c:	4934      	ldr	r1, [pc, #208]	; (10a30 <ll_rx_mem_release+0x244>)
	mem_link_rx.quota_pdu += delta;
   1095e:	7033      	strb	r3, [r6, #0]
			mem_release(rx_free, &mem_pdu_rx.free);
   10960:	4628      	mov	r0, r5
   10962:	f7fc f989 	bl	cc78 <mem_release>
	while (rx) {
   10966:	2c00      	cmp	r4, #0
   10968:	f47f af4b 	bne.w	10802 <ll_rx_mem_release+0x16>
   1096c:	e76d      	b.n	1084a <ll_rx_mem_release+0x5e>
			conn = ll_conn_get(rx_free->handle);
   1096e:	88e8      	ldrh	r0, [r5, #6]
   10970:	f001 fd00 	bl	12374 <ll_conn_get>
			LL_ASSERT(!conn->lll.link_tx_free);
   10974:	6f43      	ldr	r3, [r0, #116]	; 0x74
			conn = ll_conn_get(rx_free->handle);
   10976:	4605      	mov	r5, r0
			LL_ASSERT(!conn->lll.link_tx_free);
   10978:	b163      	cbz	r3, 10994 <ll_rx_mem_release+0x1a8>
   1097a:	492e      	ldr	r1, [pc, #184]	; (10a34 <ll_rx_mem_release+0x248>)
   1097c:	f240 5303 	movw	r3, #1283	; 0x503
   10980:	4642      	mov	r2, r8
   10982:	4638      	mov	r0, r7
   10984:	f00d fcfe 	bl	1e384 <printk>
   10988:	4040      	eors	r0, r0
   1098a:	f380 8811 	msr	BASEPRI, r0
   1098e:	f04f 0003 	mov.w	r0, #3
   10992:	df02      	svc	2
			link = memq_deinit(&conn->lll.memq_tx.head,
   10994:	f105 0168 	add.w	r1, r5, #104	; 0x68
   10998:	f105 0064 	add.w	r0, r5, #100	; 0x64
   1099c:	f7fc f9ae 	bl	ccfc <memq_deinit>
			LL_ASSERT(link);
   109a0:	4683      	mov	fp, r0
   109a2:	b318      	cbz	r0, 109ec <ll_rx_mem_release+0x200>
			conn->lll.link_tx_free = link;
   109a4:	f8c5 b074 	str.w	fp, [r5, #116]	; 0x74
			ll_conn_release(conn);
   109a8:	4628      	mov	r0, r5
   109aa:	f001 fcd5 	bl	12358 <ll_conn_release>
	while (rx) {
   109ae:	2c00      	cmp	r4, #0
   109b0:	f47f af27 	bne.w	10802 <ll_rx_mem_release+0x16>
   109b4:	e749      	b.n	1084a <ll_rx_mem_release+0x5e>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   109b6:	4920      	ldr	r1, [pc, #128]	; (10a38 <ll_rx_mem_release+0x24c>)
   109b8:	f240 531c 	movw	r3, #1308	; 0x51c
   109bc:	4642      	mov	r2, r8
   109be:	4638      	mov	r0, r7
   109c0:	f00d fce0 	bl	1e384 <printk>
   109c4:	4040      	eors	r0, r0
   109c6:	f380 8811 	msr	BASEPRI, r0
   109ca:	f04f 0003 	mov.w	r0, #3
   109ce:	df02      	svc	2
   109d0:	7833      	ldrb	r3, [r6, #0]
   109d2:	e7c2      	b.n	1095a <ll_rx_mem_release+0x16e>
	if (!max) {
   109d4:	2f00      	cmp	r7, #0
   109d6:	d09b      	beq.n	10910 <ll_rx_mem_release+0x124>
   109d8:	7833      	ldrb	r3, [r6, #0]
   109da:	e76b      	b.n	108b4 <ll_rx_mem_release+0xc8>
				mem_release(rx_free, &mem_pdu_rx.free);
   109dc:	4914      	ldr	r1, [pc, #80]	; (10a30 <ll_rx_mem_release+0x244>)
   109de:	4628      	mov	r0, r5
   109e0:	f7fc f94a 	bl	cc78 <mem_release>
	while (rx) {
   109e4:	2c00      	cmp	r4, #0
   109e6:	f47f af0c 	bne.w	10802 <ll_rx_mem_release+0x16>
   109ea:	e72e      	b.n	1084a <ll_rx_mem_release+0x5e>
			LL_ASSERT(link);
   109ec:	4913      	ldr	r1, [pc, #76]	; (10a3c <ll_rx_mem_release+0x250>)
   109ee:	f240 5306 	movw	r3, #1286	; 0x506
   109f2:	4642      	mov	r2, r8
   109f4:	4638      	mov	r0, r7
   109f6:	f00d fcc5 	bl	1e384 <printk>
   109fa:	4040      	eors	r0, r0
   109fc:	f380 8811 	msr	BASEPRI, r0
   10a00:	f04f 0003 	mov.w	r0, #3
   10a04:	df02      	svc	2
   10a06:	e7cd      	b.n	109a4 <ll_rx_mem_release+0x1b8>
			mem_release(link, &mem_link_rx.free);
   10a08:	4650      	mov	r0, sl
   10a0a:	4906      	ldr	r1, [pc, #24]	; (10a24 <ll_rx_mem_release+0x238>)
}
   10a0c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mem_release(link, &mem_link_rx.free);
   10a10:	f7fc b932 	b.w	cc78 <mem_release>
   10a14:	20001980 	.word	0x20001980
   10a18:	00024334 	.word	0x00024334
   10a1c:	200002c8 	.word	0x200002c8
   10a20:	200002b4 	.word	0x200002b4
   10a24:	20001984 	.word	0x20001984
   10a28:	00024680 	.word	0x00024680
   10a2c:	0002468c 	.word	0x0002468c
   10a30:	200019e0 	.word	0x200019e0
   10a34:	000246b0 	.word	0x000246b0
   10a38:	00024608 	.word	0x00024608
   10a3c:	000248cc 	.word	0x000248cc
   10a40:	00024590 	.word	0x00024590
   10a44:	000243a4 	.word	0x000243a4

00010a48 <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
   10a48:	4801      	ldr	r0, [pc, #4]	; (10a50 <ll_rx_link_alloc+0x8>)
   10a4a:	f7fc b8ff 	b.w	cc4c <mem_acquire>
   10a4e:	bf00      	nop
   10a50:	20001984 	.word	0x20001984

00010a54 <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
   10a54:	4901      	ldr	r1, [pc, #4]	; (10a5c <ll_rx_link_release+0x8>)
   10a56:	f7fc b90f 	b.w	cc78 <mem_release>
   10a5a:	bf00      	nop
   10a5c:	20001984 	.word	0x20001984

00010a60 <ll_rx_alloc>:
	return mem_acquire(&mem_pdu_rx.free);
   10a60:	4801      	ldr	r0, [pc, #4]	; (10a68 <ll_rx_alloc+0x8>)
   10a62:	f7fc b8f3 	b.w	cc4c <mem_acquire>
   10a66:	bf00      	nop
   10a68:	200019e0 	.word	0x200019e0

00010a6c <ll_rx_release>:
	mem_release(node_rx, &mem_pdu_rx.free);
   10a6c:	4901      	ldr	r1, [pc, #4]	; (10a74 <ll_rx_release+0x8>)
   10a6e:	f7fc b903 	b.w	cc78 <mem_release>
   10a72:	bf00      	nop
   10a74:	200019e0 	.word	0x200019e0

00010a78 <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
   10a78:	4b02      	ldr	r3, [pc, #8]	; (10a84 <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   10a7a:	4a03      	ldr	r2, [pc, #12]	; (10a88 <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   10a7c:	78db      	ldrb	r3, [r3, #3]
   10a7e:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   10a80:	f7fc b946 	b.w	cd10 <memq_enqueue>
   10a84:	200003e4 	.word	0x200003e4
   10a88:	20001c70 	.word	0x20001c70

00010a8c <ll_rx_sched>:
	k_sem_give(sem_recv);
   10a8c:	4b01      	ldr	r3, [pc, #4]	; (10a94 <ll_rx_sched+0x8>)
   10a8e:	6818      	ldr	r0, [r3, #0]
	z_impl_k_sem_give(sem);
   10a90:	f00c be44 	b.w	1d71c <z_impl_k_sem_give>
   10a94:	20001c84 	.word	0x20001c84

00010a98 <ll_pdu_rx_alloc_peek>:
{
   10a98:	b410      	push	{r4}
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   10a9a:	4b0d      	ldr	r3, [pc, #52]	; (10ad0 <ll_pdu_rx_alloc_peek+0x38>)
   10a9c:	789a      	ldrb	r2, [r3, #2]
   10a9e:	78dc      	ldrb	r4, [r3, #3]
	if (last >= first) {
   10aa0:	42a2      	cmp	r2, r4
   10aa2:	d809      	bhi.n	10ab8 <ll_pdu_rx_alloc_peek+0x20>
		return last - first;
   10aa4:	1aa1      	subs	r1, r4, r2
   10aa6:	b2c9      	uxtb	r1, r1
   10aa8:	4288      	cmp	r0, r1
   10aaa:	d802      	bhi.n	10ab2 <ll_pdu_rx_alloc_peek+0x1a>
	if (first == last) {
   10aac:	42a2      	cmp	r2, r4
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   10aae:	7819      	ldrb	r1, [r3, #0]
   10ab0:	d109      	bne.n	10ac6 <ll_pdu_rx_alloc_peek+0x2e>
		return NULL;
   10ab2:	2000      	movs	r0, #0
}
   10ab4:	bc10      	pop	{r4}
   10ab6:	4770      	bx	lr
		return count - first + last;
   10ab8:	7859      	ldrb	r1, [r3, #1]
   10aba:	1a89      	subs	r1, r1, r2
   10abc:	4421      	add	r1, r4
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   10abe:	b2c9      	uxtb	r1, r1
   10ac0:	4288      	cmp	r0, r1
   10ac2:	d8f6      	bhi.n	10ab2 <ll_pdu_rx_alloc_peek+0x1a>
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   10ac4:	7819      	ldrb	r1, [r3, #0]
}
   10ac6:	bc10      	pop	{r4}
	return *((void **)(fifo + first * size));
   10ac8:	fb02 3301 	mla	r3, r2, r1, r3
   10acc:	6858      	ldr	r0, [r3, #4]
   10ace:	4770      	bx	lr
   10ad0:	200002b4 	.word	0x200002b4

00010ad4 <ll_pdu_rx_alloc>:
{
   10ad4:	b410      	push	{r4}
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   10ad6:	4b0a      	ldr	r3, [pc, #40]	; (10b00 <ll_pdu_rx_alloc+0x2c>)
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(uint8_t *fifo, uint8_t size, uint8_t count,
				  uint8_t last, uint8_t *first)
{
	uint8_t _first = *first; /* Copy read-index */
   10ad8:	7899      	ldrb	r1, [r3, #2]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
   10ada:	78da      	ldrb	r2, [r3, #3]
   10adc:	7818      	ldrb	r0, [r3, #0]
   10ade:	785c      	ldrb	r4, [r3, #1]
   10ae0:	428a      	cmp	r2, r1
   10ae2:	d00a      	beq.n	10afa <ll_pdu_rx_alloc+0x26>
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
   10ae4:	1c4a      	adds	r2, r1, #1
   10ae6:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   10ae8:	fb01 3100 	mla	r1, r1, r0, r3
	if (_first == count) {
		_first = 0U;
   10aec:	4294      	cmp	r4, r2
   10aee:	bf08      	it	eq
   10af0:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   10af2:	6848      	ldr	r0, [r1, #4]
	}

	*first = _first; /* Write back read-index */
   10af4:	709a      	strb	r2, [r3, #2]
}
   10af6:	bc10      	pop	{r4}
   10af8:	4770      	bx	lr
		return NULL;
   10afa:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   10afc:	e7fb      	b.n	10af6 <ll_pdu_rx_alloc+0x22>
   10afe:	bf00      	nop
   10b00:	200002b4 	.word	0x200002b4

00010b04 <ll_tx_ack_put>:
{
   10b04:	b570      	push	{r4, r5, r6, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
   10b06:	4a13      	ldr	r2, [pc, #76]	; (10b54 <ll_tx_ack_put+0x50>)
   10b08:	78d6      	ldrb	r6, [r2, #3]
	if (last == count) {
   10b0a:	7855      	ldrb	r5, [r2, #1]
   10b0c:	7894      	ldrb	r4, [r2, #2]
	last = last + 1;
   10b0e:	1c73      	adds	r3, r6, #1
   10b10:	b2db      	uxtb	r3, r3
		last = 0U;
   10b12:	429d      	cmp	r5, r3
   10b14:	bf08      	it	eq
   10b16:	2300      	moveq	r3, #0
	if (last == first) {
   10b18:	429c      	cmp	r4, r3
   10b1a:	d00a      	beq.n	10b32 <ll_tx_ack_put+0x2e>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   10b1c:	4615      	mov	r5, r2
   10b1e:	f815 4b04 	ldrb.w	r4, [r5], #4
   10b22:	fb14 f406 	smulbb	r4, r4, r6
	LL_ASSERT(tx);
   10b26:	192e      	adds	r6, r5, r4
   10b28:	d003      	beq.n	10b32 <ll_tx_ack_put+0x2e>
	tx->handle = handle;
   10b2a:	5328      	strh	r0, [r5, r4]
	tx->node = node_tx;
   10b2c:	6071      	str	r1, [r6, #4]
	*last = idx; /* Commit: Update write index */
   10b2e:	70d3      	strb	r3, [r2, #3]
}
   10b30:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(tx);
   10b32:	4a09      	ldr	r2, [pc, #36]	; (10b58 <ll_tx_ack_put+0x54>)
   10b34:	4909      	ldr	r1, [pc, #36]	; (10b5c <ll_tx_ack_put+0x58>)
   10b36:	480a      	ldr	r0, [pc, #40]	; (10b60 <ll_tx_ack_put+0x5c>)
   10b38:	f240 5364 	movw	r3, #1380	; 0x564
   10b3c:	f00d fc22 	bl	1e384 <printk>
   10b40:	4040      	eors	r0, r0
   10b42:	f380 8811 	msr	BASEPRI, r0
   10b46:	f04f 0003 	mov.w	r0, #3
   10b4a:	df02      	svc	2
	tx->handle = handle;
   10b4c:	2300      	movs	r3, #0
   10b4e:	801b      	strh	r3, [r3, #0]
   10b50:	deff      	udf	#255	; 0xff
   10b52:	bf00      	nop
   10b54:	200003e4 	.word	0x200003e4
   10b58:	00024590 	.word	0x00024590
   10b5c:	000248c0 	.word	0x000248c0
   10b60:	00024334 	.word	0x00024334

00010b64 <ull_ticker_status_take>:
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   10b64:	f030 0302 	bics.w	r3, r0, #2
{
   10b68:	b510      	push	{r4, lr}
   10b6a:	460c      	mov	r4, r1
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   10b6c:	d002      	beq.n	10b74 <ull_ticker_status_take+0x10>
   10b6e:	680b      	ldr	r3, [r1, #0]
   10b70:	2b02      	cmp	r3, #2
   10b72:	d008      	beq.n	10b86 <ull_ticker_status_take+0x22>
	return z_impl_k_sem_take(sem, timeout);
   10b74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   10b78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10b7c:	4809      	ldr	r0, [pc, #36]	; (10ba4 <ull_ticker_status_take+0x40>)
   10b7e:	f00c fdf3 	bl	1d768 <z_impl_k_sem_take>
	return *ret_cb;
   10b82:	6820      	ldr	r0, [r4, #0]
}
   10b84:	bd10      	pop	{r4, pc}
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   10b86:	4a08      	ldr	r2, [pc, #32]	; (10ba8 <ull_ticker_status_take+0x44>)
   10b88:	4908      	ldr	r1, [pc, #32]	; (10bac <ull_ticker_status_take+0x48>)
   10b8a:	4809      	ldr	r0, [pc, #36]	; (10bb0 <ull_ticker_status_take+0x4c>)
   10b8c:	f44f 63b3 	mov.w	r3, #1432	; 0x598
   10b90:	f00d fbf8 	bl	1e384 <printk>
   10b94:	4040      	eors	r0, r0
   10b96:	f380 8811 	msr	BASEPRI, r0
   10b9a:	f04f 0003 	mov.w	r0, #3
   10b9e:	df02      	svc	2
   10ba0:	e7e8      	b.n	10b74 <ull_ticker_status_take+0x10>
   10ba2:	bf00      	nop
   10ba4:	20001c88 	.word	0x20001c88
   10ba8:	00024590 	.word	0x00024590
   10bac:	000246d0 	.word	0x000246d0
   10bb0:	00024334 	.word	0x00024334

00010bb4 <ull_disable_mark>:
	if (!*m) {
   10bb4:	4a04      	ldr	r2, [pc, #16]	; (10bc8 <ull_disable_mark+0x14>)
   10bb6:	6813      	ldr	r3, [r2, #0]
   10bb8:	b10b      	cbz	r3, 10bbe <ull_disable_mark+0xa>
}
   10bba:	4618      	mov	r0, r3
   10bbc:	4770      	bx	lr
		*m = param;
   10bbe:	4603      	mov	r3, r0
   10bc0:	6010      	str	r0, [r2, #0]
}
   10bc2:	4618      	mov	r0, r3
   10bc4:	4770      	bx	lr
   10bc6:	bf00      	nop
   10bc8:	200018b4 	.word	0x200018b4

00010bcc <ull_disable_unmark>:
	if (*m && *m == param) {
   10bcc:	4a04      	ldr	r2, [pc, #16]	; (10be0 <ull_disable_unmark+0x14>)
   10bce:	6813      	ldr	r3, [r2, #0]
   10bd0:	b123      	cbz	r3, 10bdc <ull_disable_unmark+0x10>
   10bd2:	4298      	cmp	r0, r3
		*m = NULL;
   10bd4:	bf06      	itte	eq
   10bd6:	2100      	moveq	r1, #0
   10bd8:	6011      	streq	r1, [r2, #0]
	return NULL;
   10bda:	2300      	movne	r3, #0
}
   10bdc:	4618      	mov	r0, r3
   10bde:	4770      	bx	lr
   10be0:	200018b4 	.word	0x200018b4

00010be4 <ull_disable_mark_get>:
	return mark_get(mark_disable);
   10be4:	4b01      	ldr	r3, [pc, #4]	; (10bec <ull_disable_mark_get+0x8>)
}
   10be6:	6818      	ldr	r0, [r3, #0]
   10be8:	4770      	bx	lr
   10bea:	bf00      	nop
   10bec:	200018b4 	.word	0x200018b4

00010bf0 <ull_update_mark>:
	if (!*m) {
   10bf0:	4a04      	ldr	r2, [pc, #16]	; (10c04 <ull_update_mark+0x14>)
   10bf2:	6813      	ldr	r3, [r2, #0]
   10bf4:	b10b      	cbz	r3, 10bfa <ull_update_mark+0xa>
}
   10bf6:	4618      	mov	r0, r3
   10bf8:	4770      	bx	lr
		*m = param;
   10bfa:	4603      	mov	r3, r0
   10bfc:	6010      	str	r0, [r2, #0]
}
   10bfe:	4618      	mov	r0, r3
   10c00:	4770      	bx	lr
   10c02:	bf00      	nop
   10c04:	200018b8 	.word	0x200018b8

00010c08 <ull_update_unmark>:
	if (*m && *m == param) {
   10c08:	4a04      	ldr	r2, [pc, #16]	; (10c1c <ull_update_unmark+0x14>)
   10c0a:	6813      	ldr	r3, [r2, #0]
   10c0c:	b123      	cbz	r3, 10c18 <ull_update_unmark+0x10>
   10c0e:	4298      	cmp	r0, r3
		*m = NULL;
   10c10:	bf06      	itte	eq
   10c12:	2100      	moveq	r1, #0
   10c14:	6011      	streq	r1, [r2, #0]
	return NULL;
   10c16:	2300      	movne	r3, #0
}
   10c18:	4618      	mov	r0, r3
   10c1a:	4770      	bx	lr
   10c1c:	200018b8 	.word	0x200018b8

00010c20 <ull_update_mark_get>:
	return mark_get(mark_update);
   10c20:	4b01      	ldr	r3, [pc, #4]	; (10c28 <ull_update_mark_get+0x8>)
}
   10c22:	6818      	ldr	r0, [r3, #0]
   10c24:	4770      	bx	lr
   10c26:	bf00      	nop
   10c28:	200018b8 	.word	0x200018b8

00010c2c <ull_disable>:
{
   10c2c:	b530      	push	{r4, r5, lr}
	hdr = HDR_ULL(((struct lll_hdr *)lll)->parent);
   10c2e:	6805      	ldr	r5, [r0, #0]
	if (!hdr) {
   10c30:	f115 0f10 	cmn.w	r5, #16
{
   10c34:	b087      	sub	sp, #28
	if (!hdr) {
   10c36:	d00b      	beq.n	10c50 <ull_disable+0x24>
	compiler_barrier();
   10c38:	4604      	mov	r4, r0
	return z_impl_k_sem_init(sem, initial_count, limit);
   10c3a:	2201      	movs	r2, #1
   10c3c:	4668      	mov	r0, sp
   10c3e:	2100      	movs	r1, #0
   10c40:	f012 fa45 	bl	230ce <z_impl_k_sem_init>
   10c44:	7c2b      	ldrb	r3, [r5, #16]
	hdr->disabled_cb = disabled_cb;
   10c46:	4a13      	ldr	r2, [pc, #76]	; (10c94 <ull_disable+0x68>)
	hdr->disabled_param = &sem;
   10c48:	f8c5 d018 	str.w	sp, [r5, #24]
	hdr->disabled_cb = disabled_cb;
   10c4c:	616a      	str	r2, [r5, #20]
	if (!ull_ref_get(hdr)) {
   10c4e:	b913      	cbnz	r3, 10c56 <ull_disable+0x2a>
		return ULL_STATUS_SUCCESS;
   10c50:	2000      	movs	r0, #0
}
   10c52:	b007      	add	sp, #28
   10c54:	bd30      	pop	{r4, r5, pc}
	mfy.param = lll;
   10c56:	4b10      	ldr	r3, [pc, #64]	; (10c98 <ull_disable+0x6c>)
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   10c58:	2200      	movs	r2, #0
   10c5a:	4611      	mov	r1, r2
   10c5c:	2003      	movs	r0, #3
	mfy.param = lll;
   10c5e:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   10c60:	f7fc f8ca 	bl	cdf8 <mayfly_enqueue>
	LL_ASSERT(!ret);
   10c64:	b940      	cbnz	r0, 10c78 <ull_disable+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   10c66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   10c6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10c6e:	4668      	mov	r0, sp
   10c70:	f00c fd7a 	bl	1d768 <z_impl_k_sem_take>
}
   10c74:	b007      	add	sp, #28
   10c76:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
   10c78:	4a08      	ldr	r2, [pc, #32]	; (10c9c <ull_disable+0x70>)
   10c7a:	4909      	ldr	r1, [pc, #36]	; (10ca0 <ull_disable+0x74>)
   10c7c:	4809      	ldr	r0, [pc, #36]	; (10ca4 <ull_disable+0x78>)
   10c7e:	f240 630a 	movw	r3, #1546	; 0x60a
   10c82:	f00d fb7f 	bl	1e384 <printk>
   10c86:	4040      	eors	r0, r0
   10c88:	f380 8811 	msr	BASEPRI, r0
   10c8c:	f04f 0003 	mov.w	r0, #3
   10c90:	df02      	svc	2
   10c92:	e7e8      	b.n	10c66 <ull_disable+0x3a>
   10c94:	0000fa99 	.word	0x0000fa99
   10c98:	20000418 	.word	0x20000418
   10c9c:	00024590 	.word	0x00024590
   10ca0:	000246c8 	.word	0x000246c8
   10ca4:	00024334 	.word	0x00024334

00010ca8 <ull_ticker_stop_with_mark>:
{
   10ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!*m) {
   10caa:	4d1d      	ldr	r5, [pc, #116]	; (10d20 <ull_ticker_stop_with_mark+0x78>)
   10cac:	682b      	ldr	r3, [r5, #0]
{
   10cae:	b085      	sub	sp, #20
   10cb0:	460c      	mov	r4, r1
   10cb2:	4616      	mov	r6, r2
	if (!*m) {
   10cb4:	b323      	cbz	r3, 10d00 <ull_ticker_stop_with_mark+0x58>
	if (mark != param) {
   10cb6:	4299      	cmp	r1, r3
   10cb8:	d112      	bne.n	10ce0 <ull_ticker_stop_with_mark+0x38>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   10cba:	af03      	add	r7, sp, #12
	ret_cb = TICKER_STATUS_BUSY;
   10cbc:	2102      	movs	r1, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   10cbe:	4602      	mov	r2, r0
	ret_cb = TICKER_STATUS_BUSY;
   10cc0:	9103      	str	r1, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   10cc2:	4b18      	ldr	r3, [pc, #96]	; (10d24 <ull_ticker_stop_with_mark+0x7c>)
   10cc4:	9700      	str	r7, [sp, #0]
   10cc6:	2103      	movs	r1, #3
   10cc8:	2000      	movs	r0, #0
   10cca:	f7fd fb9b 	bl	e404 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   10cce:	4639      	mov	r1, r7
   10cd0:	f7ff ff48 	bl	10b64 <ull_ticker_status_take>
	if (ret) {
   10cd4:	b140      	cbz	r0, 10ce8 <ull_ticker_stop_with_mark+0x40>
	if (*m && *m == param) {
   10cd6:	682b      	ldr	r3, [r5, #0]
   10cd8:	b10b      	cbz	r3, 10cde <ull_ticker_stop_with_mark+0x36>
   10cda:	429c      	cmp	r4, r3
   10cdc:	d012      	beq.n	10d04 <ull_ticker_stop_with_mark+0x5c>
		if (mark != param) {
   10cde:	b1cc      	cbz	r4, 10d14 <ull_ticker_stop_with_mark+0x6c>
			return -ENOLCK;
   10ce0:	f06f 002d 	mvn.w	r0, #45	; 0x2d
}
   10ce4:	b005      	add	sp, #20
   10ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = ull_disable(lll_disable);
   10ce8:	4630      	mov	r0, r6
   10cea:	f7ff ff9f 	bl	10c2c <ull_disable>
	if (ret) {
   10cee:	b9a0      	cbnz	r0, 10d1a <ull_ticker_stop_with_mark+0x72>
	if (*m && *m == param) {
   10cf0:	682b      	ldr	r3, [r5, #0]
   10cf2:	b10b      	cbz	r3, 10cf8 <ull_ticker_stop_with_mark+0x50>
   10cf4:	429c      	cmp	r4, r3
   10cf6:	d00b      	beq.n	10d10 <ull_ticker_stop_with_mark+0x68>
	if (mark != param) {
   10cf8:	2c00      	cmp	r4, #0
   10cfa:	d1f1      	bne.n	10ce0 <ull_ticker_stop_with_mark+0x38>
}
   10cfc:	b005      	add	sp, #20
   10cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = param;
   10d00:	6029      	str	r1, [r5, #0]
	if (mark != param) {
   10d02:	e7da      	b.n	10cba <ull_ticker_stop_with_mark+0x12>
		*m = NULL;
   10d04:	2300      	movs	r3, #0
		return -EALREADY;
   10d06:	f06f 0077 	mvn.w	r0, #119	; 0x77
		*m = NULL;
   10d0a:	602b      	str	r3, [r5, #0]
}
   10d0c:	b005      	add	sp, #20
   10d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = NULL;
   10d10:	6028      	str	r0, [r5, #0]
	if (mark != param) {
   10d12:	e7e7      	b.n	10ce4 <ull_ticker_stop_with_mark+0x3c>
		return -EALREADY;
   10d14:	f06f 0077 	mvn.w	r0, #119	; 0x77
   10d18:	e7e4      	b.n	10ce4 <ull_ticker_stop_with_mark+0x3c>
		return -EBUSY;
   10d1a:	f06f 000f 	mvn.w	r0, #15
   10d1e:	e7e1      	b.n	10ce4 <ull_ticker_stop_with_mark+0x3c>
   10d20:	200018b4 	.word	0x200018b4
   10d24:	0000fa8d 	.word	0x0000fa8d

00010d28 <ull_pdu_rx_alloc_peek>:
{
   10d28:	b410      	push	{r4}
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   10d2a:	4b0d      	ldr	r3, [pc, #52]	; (10d60 <ull_pdu_rx_alloc_peek+0x38>)
   10d2c:	789a      	ldrb	r2, [r3, #2]
   10d2e:	78dc      	ldrb	r4, [r3, #3]
	if (last >= first) {
   10d30:	42a2      	cmp	r2, r4
   10d32:	d809      	bhi.n	10d48 <ull_pdu_rx_alloc_peek+0x20>
		return last - first;
   10d34:	1aa1      	subs	r1, r4, r2
   10d36:	b2c9      	uxtb	r1, r1
   10d38:	4288      	cmp	r0, r1
   10d3a:	d802      	bhi.n	10d42 <ull_pdu_rx_alloc_peek+0x1a>
	if (first == last) {
   10d3c:	42a2      	cmp	r2, r4
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   10d3e:	7819      	ldrb	r1, [r3, #0]
   10d40:	d109      	bne.n	10d56 <ull_pdu_rx_alloc_peek+0x2e>
		return NULL;
   10d42:	2000      	movs	r0, #0
}
   10d44:	bc10      	pop	{r4}
   10d46:	4770      	bx	lr
		return count - first + last;
   10d48:	7859      	ldrb	r1, [r3, #1]
   10d4a:	1a89      	subs	r1, r1, r2
   10d4c:	4421      	add	r1, r4
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   10d4e:	b2c9      	uxtb	r1, r1
   10d50:	4288      	cmp	r0, r1
   10d52:	d8f6      	bhi.n	10d42 <ull_pdu_rx_alloc_peek+0x1a>
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   10d54:	7819      	ldrb	r1, [r3, #0]
}
   10d56:	bc10      	pop	{r4}
	return *((void **)(fifo + first * size));
   10d58:	fb02 3301 	mla	r3, r2, r1, r3
   10d5c:	6858      	ldr	r0, [r3, #4]
   10d5e:	4770      	bx	lr
   10d60:	200002c8 	.word	0x200002c8

00010d64 <ull_pdu_rx_alloc>:
{
   10d64:	b410      	push	{r4}
	return MFIFO_DEQUEUE(pdu_rx_free);
   10d66:	4b0a      	ldr	r3, [pc, #40]	; (10d90 <ull_pdu_rx_alloc+0x2c>)
	uint8_t _first = *first; /* Copy read-index */
   10d68:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   10d6a:	78da      	ldrb	r2, [r3, #3]
   10d6c:	7818      	ldrb	r0, [r3, #0]
   10d6e:	785c      	ldrb	r4, [r3, #1]
   10d70:	428a      	cmp	r2, r1
   10d72:	d00a      	beq.n	10d8a <ull_pdu_rx_alloc+0x26>
	_first += 1U;
   10d74:	1c4a      	adds	r2, r1, #1
   10d76:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   10d78:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   10d7c:	4294      	cmp	r4, r2
   10d7e:	bf08      	it	eq
   10d80:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   10d82:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   10d84:	709a      	strb	r2, [r3, #2]
}
   10d86:	bc10      	pop	{r4}
   10d88:	4770      	bx	lr
		return NULL;
   10d8a:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(pdu_rx_free);
   10d8c:	e7fb      	b.n	10d86 <ull_pdu_rx_alloc+0x22>
   10d8e:	bf00      	nop
   10d90:	200002c8 	.word	0x200002c8

00010d94 <ull_rx_put>:
{
   10d94:	b538      	push	{r3, r4, r5, lr}
   10d96:	460c      	mov	r4, r1
   10d98:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   10d9a:	f005 f92d 	bl	15ff8 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   10d9e:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   10da0:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   10da2:	4a03      	ldr	r2, [pc, #12]	; (10db0 <ull_rx_put+0x1c>)
   10da4:	4628      	mov	r0, r5
}
   10da6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   10daa:	f7fb bfb1 	b.w	cd10 <memq_enqueue>
   10dae:	bf00      	nop
   10db0:	20001c80 	.word	0x20001c80

00010db4 <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   10db4:	2201      	movs	r2, #1
   10db6:	4b02      	ldr	r3, [pc, #8]	; (10dc0 <ull_rx_sched+0xc>)
   10db8:	4611      	mov	r1, r2
   10dba:	2000      	movs	r0, #0
   10dbc:	f7fc b81c 	b.w	cdf8 <mayfly_enqueue>
   10dc0:	20000428 	.word	0x20000428

00010dc4 <ull_prepare_enqueue>:
{
   10dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   10dc8:	4e1c      	ldr	r6, [pc, #112]	; (10e3c <ull_prepare_enqueue+0x78>)
{
   10dca:	f89d e024 	ldrb.w	lr, [sp, #36]	; 0x24
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   10dce:	78f4      	ldrb	r4, [r6, #3]
	if (last == count) {
   10dd0:	f896 c001 	ldrb.w	ip, [r6, #1]
   10dd4:	78b7      	ldrb	r7, [r6, #2]
	last = last + 1;
   10dd6:	1c65      	adds	r5, r4, #1
   10dd8:	b2ed      	uxtb	r5, r5
		last = 0U;
   10dda:	45ac      	cmp	ip, r5
   10ddc:	bf08      	it	eq
   10dde:	2500      	moveq	r5, #0
	if (last == first) {
   10de0:	42af      	cmp	r7, r5
   10de2:	d026      	beq.n	10e32 <ull_prepare_enqueue+0x6e>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   10de4:	46b4      	mov	ip, r6
   10de6:	f81c 7b04 	ldrb.w	r7, [ip], #4
   10dea:	fb17 f704 	smulbb	r7, r7, r4
	if (!e) {
   10dee:	eb1c 0407 	adds.w	r4, ip, r7
   10df2:	d01e      	beq.n	10e32 <ull_prepare_enqueue+0x6e>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   10df4:	f8d2 b000 	ldr.w	fp, [r2]
   10df8:	f8d2 a004 	ldr.w	sl, [r2, #4]
   10dfc:	f8d2 8008 	ldr.w	r8, [r2, #8]
   10e00:	f8d2 900c 	ldr.w	r9, [r2, #12]
   10e04:	f84c b007 	str.w	fp, [ip, r7]
	e->is_resume = is_resume;
   10e08:	7f22      	ldrb	r2, [r4, #28]
   10e0a:	f8c4 a004 	str.w	sl, [r4, #4]
   10e0e:	f00e 0e01 	and.w	lr, lr, #1
   10e12:	f022 0203 	bic.w	r2, r2, #3
   10e16:	ea42 020e 	orr.w	r2, r2, lr
   10e1a:	f8c4 8008 	str.w	r8, [r4, #8]
   10e1e:	f8c4 900c 	str.w	r9, [r4, #12]
	e->is_abort_cb = is_abort_cb;
   10e22:	e9c4 3004 	strd	r3, r0, [r4, #16]
	e->abort_cb = abort_cb;
   10e26:	61a1      	str	r1, [r4, #24]
	e->is_resume = is_resume;
   10e28:	7722      	strb	r2, [r4, #28]
	return 0;
   10e2a:	2000      	movs	r0, #0
	*last = idx; /* Commit: Update write index */
   10e2c:	70f5      	strb	r5, [r6, #3]
}
   10e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOBUFS;
   10e32:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   10e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10e3a:	bf00      	nop
   10e3c:	200002e0 	.word	0x200002e0

00010e40 <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
   10e40:	4b05      	ldr	r3, [pc, #20]	; (10e58 <ull_prepare_dequeue_get+0x18>)
   10e42:	789a      	ldrb	r2, [r3, #2]
	if (first == last) {
   10e44:	78d9      	ldrb	r1, [r3, #3]
   10e46:	7818      	ldrb	r0, [r3, #0]
   10e48:	4291      	cmp	r1, r2
	return (void *)(fifo + first * size);
   10e4a:	bf1a      	itte	ne
   10e4c:	3304      	addne	r3, #4
   10e4e:	fb02 3000 	mlane	r0, r2, r0, r3
		return NULL;
   10e52:	2000      	moveq	r0, #0
}
   10e54:	4770      	bx	lr
   10e56:	bf00      	nop
   10e58:	200002e0 	.word	0x200002e0

00010e5c <ull_prepare_dequeue_iter>:
{
   10e5c:	b430      	push	{r4, r5}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   10e5e:	4b0c      	ldr	r3, [pc, #48]	; (10e90 <ull_prepare_dequeue_iter+0x34>)
	if (*idx >= count) {
   10e60:	7802      	ldrb	r2, [r0, #0]
   10e62:	785c      	ldrb	r4, [r3, #1]
   10e64:	78dd      	ldrb	r5, [r3, #3]
   10e66:	7819      	ldrb	r1, [r3, #0]
   10e68:	4294      	cmp	r4, r2
   10e6a:	bf9c      	itt	ls
   10e6c:	789a      	ldrbls	r2, [r3, #2]
		*idx = first;
   10e6e:	7002      	strbls	r2, [r0, #0]
	if (*idx == last) {
   10e70:	4295      	cmp	r5, r2
   10e72:	d00a      	beq.n	10e8a <ull_prepare_dequeue_iter+0x2e>
	i = *idx + 1;
   10e74:	1c53      	adds	r3, r2, #1
	p = (void *)(fifo + (*idx) * size);
   10e76:	4d07      	ldr	r5, [pc, #28]	; (10e94 <ull_prepare_dequeue_iter+0x38>)
	i = *idx + 1;
   10e78:	b2db      	uxtb	r3, r3
		i = 0U;
   10e7a:	429c      	cmp	r4, r3
   10e7c:	bf08      	it	eq
   10e7e:	2300      	moveq	r3, #0
	*idx = i;
   10e80:	7003      	strb	r3, [r0, #0]
	p = (void *)(fifo + (*idx) * size);
   10e82:	fb02 5001 	mla	r0, r2, r1, r5
}
   10e86:	bc30      	pop	{r4, r5}
   10e88:	4770      	bx	lr
		return NULL;
   10e8a:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   10e8c:	e7fb      	b.n	10e86 <ull_prepare_dequeue_iter+0x2a>
   10e8e:	bf00      	nop
   10e90:	200002e0 	.word	0x200002e0
   10e94:	200002e4 	.word	0x200002e4

00010e98 <ull_prepare_dequeue>:
{
   10e98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return MFIFO_DEQUEUE_GET(prep);
   10e9c:	4c26      	ldr	r4, [pc, #152]	; (10f38 <ull_prepare_dequeue+0xa0>)
   10e9e:	78a2      	ldrb	r2, [r4, #2]
	if (first == last) {
   10ea0:	78e1      	ldrb	r1, [r4, #3]
   10ea2:	7823      	ldrb	r3, [r4, #0]
   10ea4:	4291      	cmp	r1, r2
   10ea6:	d027      	beq.n	10ef8 <ull_prepare_dequeue+0x60>
	return (void *)(fifo + first * size);
   10ea8:	1d27      	adds	r7, r4, #4
   10eaa:	fb02 7203 	mla	r2, r2, r3, r7
	while (next) {
   10eae:	b31a      	cbz	r2, 10ef8 <ull_prepare_dequeue+0x60>
			mfy.param = next;
   10eb0:	f8df 9088 	ldr.w	r9, [pc, #136]	; 10f3c <ull_prepare_dequeue+0xa4>
			LL_ASSERT(!ret);
   10eb4:	f8df b090 	ldr.w	fp, [pc, #144]	; 10f48 <ull_prepare_dequeue+0xb0>
   10eb8:	f8df a090 	ldr.w	sl, [pc, #144]	; 10f4c <ull_prepare_dequeue+0xb4>
   10ebc:	4680      	mov	r8, r0
		uint8_t is_aborted = next->is_aborted;
   10ebe:	7f13      	ldrb	r3, [r2, #28]
		if (!is_aborted) {
   10ec0:	0799      	lsls	r1, r3, #30
		uint8_t is_aborted = next->is_aborted;
   10ec2:	f3c3 0540 	ubfx	r5, r3, #1, #1
		uint8_t is_resume = next->is_resume;
   10ec6:	f003 0601 	and.w	r6, r3, #1
		if (!is_aborted) {
   10eca:	d517      	bpl.n	10efc <ull_prepare_dequeue+0x64>
		MFIFO_DEQUEUE(prep);
   10ecc:	78e1      	ldrb	r1, [r4, #3]
	uint8_t _first = *first; /* Copy read-index */
   10ece:	78a3      	ldrb	r3, [r4, #2]
   10ed0:	7822      	ldrb	r2, [r4, #0]
   10ed2:	7860      	ldrb	r0, [r4, #1]
	if (_first == last) {
   10ed4:	4299      	cmp	r1, r3
   10ed6:	d00f      	beq.n	10ef8 <ull_prepare_dequeue+0x60>
	_first += 1U;
   10ed8:	3301      	adds	r3, #1
   10eda:	b2db      	uxtb	r3, r3
	if (_first == count) {
   10edc:	4298      	cmp	r0, r3
   10ede:	d025      	beq.n	10f2c <ull_prepare_dequeue+0x94>
	if (first == last) {
   10ee0:	4299      	cmp	r1, r3
	*first = _first; /* Write back read-index */
   10ee2:	70a3      	strb	r3, [r4, #2]
	if (first == last) {
   10ee4:	d008      	beq.n	10ef8 <ull_prepare_dequeue+0x60>
	return (void *)(fifo + first * size);
   10ee6:	fb03 7202 	mla	r2, r3, r2, r7
		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
   10eea:	b12a      	cbz	r2, 10ef8 <ull_prepare_dequeue+0x60>
   10eec:	2d00      	cmp	r5, #0
   10eee:	d1e6      	bne.n	10ebe <ull_prepare_dequeue+0x26>
   10ef0:	b116      	cbz	r6, 10ef8 <ull_prepare_dequeue+0x60>
   10ef2:	7f13      	ldrb	r3, [r2, #28]
   10ef4:	07db      	lsls	r3, r3, #31
   10ef6:	d5e2      	bpl.n	10ebe <ull_prepare_dequeue+0x26>
}
   10ef8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mfy.param = next;
   10efc:	f8c9 2008 	str.w	r2, [r9, #8]
			ret = mayfly_enqueue(caller_id, TICKER_USER_ID_LLL, 0,
   10f00:	4b0e      	ldr	r3, [pc, #56]	; (10f3c <ull_prepare_dequeue+0xa4>)
   10f02:	462a      	mov	r2, r5
   10f04:	4629      	mov	r1, r5
   10f06:	4640      	mov	r0, r8
   10f08:	f7fb ff76 	bl	cdf8 <mayfly_enqueue>
			LL_ASSERT(!ret);
   10f0c:	2800      	cmp	r0, #0
   10f0e:	d0dd      	beq.n	10ecc <ull_prepare_dequeue+0x34>
   10f10:	480b      	ldr	r0, [pc, #44]	; (10f40 <ull_prepare_dequeue+0xa8>)
   10f12:	f240 6381 	movw	r3, #1665	; 0x681
   10f16:	465a      	mov	r2, fp
   10f18:	4651      	mov	r1, sl
   10f1a:	f00d fa33 	bl	1e384 <printk>
   10f1e:	4040      	eors	r0, r0
   10f20:	f380 8811 	msr	BASEPRI, r0
   10f24:	f04f 0003 	mov.w	r0, #3
   10f28:	df02      	svc	2
   10f2a:	e7cf      	b.n	10ecc <ull_prepare_dequeue+0x34>
	*first = _first; /* Write back read-index */
   10f2c:	2300      	movs	r3, #0
   10f2e:	70a3      	strb	r3, [r4, #2]
	if (first == last) {
   10f30:	2900      	cmp	r1, #0
   10f32:	d0e1      	beq.n	10ef8 <ull_prepare_dequeue+0x60>
	return (void *)(fifo + first * size);
   10f34:	4a03      	ldr	r2, [pc, #12]	; (10f44 <ull_prepare_dequeue+0xac>)
   10f36:	e7d9      	b.n	10eec <ull_prepare_dequeue+0x54>
   10f38:	200002e0 	.word	0x200002e0
   10f3c:	20000448 	.word	0x20000448
   10f40:	00024334 	.word	0x00024334
   10f44:	200002e4 	.word	0x200002e4
   10f48:	00024590 	.word	0x00024590
   10f4c:	000246c8 	.word	0x000246c8

00010f50 <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
   10f50:	4b06      	ldr	r3, [pc, #24]	; (10f6c <ull_event_done_extra_get+0x1c>)
   10f52:	7899      	ldrb	r1, [r3, #2]
	if (first == last) {
   10f54:	78d8      	ldrb	r0, [r3, #3]
   10f56:	781a      	ldrb	r2, [r3, #0]
   10f58:	4288      	cmp	r0, r1
   10f5a:	d005      	beq.n	10f68 <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
   10f5c:	fb01 3302 	mla	r3, r1, r2, r3
   10f60:	6858      	ldr	r0, [r3, #4]
	if (!evdone) {
   10f62:	b110      	cbz	r0, 10f6a <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
   10f64:	3020      	adds	r0, #32
   10f66:	4770      	bx	lr
		return NULL;
   10f68:	2000      	movs	r0, #0
}
   10f6a:	4770      	bx	lr
   10f6c:	200002a0 	.word	0x200002a0

00010f70 <ull_event_done>:
{
   10f70:	b570      	push	{r4, r5, r6, lr}
	evdone = MFIFO_DEQUEUE(done);
   10f72:	4a13      	ldr	r2, [pc, #76]	; (10fc0 <ull_event_done+0x50>)
	uint8_t _first = *first; /* Copy read-index */
   10f74:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   10f76:	78d5      	ldrb	r5, [r2, #3]
   10f78:	7814      	ldrb	r4, [r2, #0]
   10f7a:	7856      	ldrb	r6, [r2, #1]
   10f7c:	429d      	cmp	r5, r3
   10f7e:	d01c      	beq.n	10fba <ull_event_done+0x4a>
	mem = *((void **)(fifo + _first * size));
   10f80:	fb03 2404 	mla	r4, r3, r4, r2
	_first += 1U;
   10f84:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   10f86:	6864      	ldr	r4, [r4, #4]
	_first += 1U;
   10f88:	b2db      	uxtb	r3, r3
		_first = 0U;
   10f8a:	429e      	cmp	r6, r3
   10f8c:	bf08      	it	eq
   10f8e:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   10f90:	7093      	strb	r3, [r2, #2]
	if (!evdone) {
   10f92:	b184      	cbz	r4, 10fb6 <ull_event_done+0x46>
   10f94:	4601      	mov	r1, r0
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   10f96:	2302      	movs	r3, #2
	evdone->hdr.link = NULL;
   10f98:	2500      	movs	r5, #0
	link = evdone->hdr.link;
   10f9a:	6820      	ldr	r0, [r4, #0]
	memq_enqueue(link, done, &memq_ull_done.tail);
   10f9c:	4a09      	ldr	r2, [pc, #36]	; (10fc4 <ull_event_done+0x54>)
	evdone->param = param;
   10f9e:	61e1      	str	r1, [r4, #28]
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   10fa0:	7123      	strb	r3, [r4, #4]
	memq_enqueue(link, done, &memq_ull_done.tail);
   10fa2:	4621      	mov	r1, r4
	evdone->hdr.link = NULL;
   10fa4:	6025      	str	r5, [r4, #0]
	memq_enqueue(link, done, &memq_ull_done.tail);
   10fa6:	f7fb feb3 	bl	cd10 <memq_enqueue>
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   10faa:	2201      	movs	r2, #1
   10fac:	4b06      	ldr	r3, [pc, #24]	; (10fc8 <ull_event_done+0x58>)
   10fae:	4628      	mov	r0, r5
   10fb0:	4611      	mov	r1, r2
   10fb2:	f7fb ff21 	bl	cdf8 <mayfly_enqueue>
}
   10fb6:	4620      	mov	r0, r4
   10fb8:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   10fba:	2400      	movs	r4, #0
   10fbc:	e7fb      	b.n	10fb6 <ull_event_done+0x46>
   10fbe:	bf00      	nop
   10fc0:	200002a0 	.word	0x200002a0
   10fc4:	20001c78 	.word	0x20001c78
   10fc8:	20000438 	.word	0x20000438

00010fcc <lll_prepare>:
 *	   -EINPROGRESS: Event already in progress and prepare was queued
 */
int lll_prepare(lll_is_abort_cb_t is_abort_cb, lll_abort_cb_t abort_cb,
		lll_prepare_cb_t prepare_cb, int8_t event_prio,
		struct lll_prepare_param *prepare_param)
{
   10fcc:	b500      	push	{lr}
   10fce:	b083      	sub	sp, #12
	}

	prepare_param->prio = prio;
#endif /* CONFIG_BT_CTLR_JIT_SCHEDULING */

	return lll_prepare_resolve(is_abort_cb, abort_cb, prepare_cb,
   10fd0:	2300      	movs	r3, #0
   10fd2:	e9cd 3300 	strd	r3, r3, [sp]
   10fd6:	9b04      	ldr	r3, [sp, #16]
   10fd8:	f006 fe3e 	bl	17c58 <lll_prepare_resolve>
				   prepare_param, 0, 0);
}
   10fdc:	b003      	add	sp, #12
   10fde:	f85d fb04 	ldr.w	pc, [sp], #4
   10fe2:	bf00      	nop

00010fe4 <lll_resume>:

void lll_resume(void *param)
{
   10fe4:	b510      	push	{r4, lr}
   10fe6:	4603      	mov	r3, r0
	int ret;

	next = param;
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
				  next->prepare_cb, &next->prepare_param,
				  next->is_resume, 1);
   10fe8:	7f00      	ldrb	r0, [r0, #28]
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
   10fea:	691a      	ldr	r2, [r3, #16]
   10fec:	6999      	ldr	r1, [r3, #24]
{
   10fee:	b082      	sub	sp, #8
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
   10ff0:	2401      	movs	r4, #1
   10ff2:	4020      	ands	r0, r4
   10ff4:	9401      	str	r4, [sp, #4]
   10ff6:	9000      	str	r0, [sp, #0]
   10ff8:	6958      	ldr	r0, [r3, #20]
   10ffa:	f006 fe2d 	bl	17c58 <lll_prepare_resolve>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   10ffe:	b108      	cbz	r0, 11004 <lll_resume+0x20>
   11000:	3077      	adds	r0, #119	; 0x77
   11002:	d101      	bne.n	11008 <lll_resume+0x24>
}
   11004:	b002      	add	sp, #8
   11006:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   11008:	4a06      	ldr	r2, [pc, #24]	; (11024 <lll_resume+0x40>)
   1100a:	4907      	ldr	r1, [pc, #28]	; (11028 <lll_resume+0x44>)
   1100c:	4807      	ldr	r0, [pc, #28]	; (1102c <lll_resume+0x48>)
   1100e:	234f      	movs	r3, #79	; 0x4f
   11010:	f00d f9b8 	bl	1e384 <printk>
   11014:	4040      	eors	r0, r0
   11016:	f380 8811 	msr	BASEPRI, r0
   1101a:	f04f 0003 	mov.w	r0, #3
   1101e:	df02      	svc	2
}
   11020:	b002      	add	sp, #8
   11022:	bd10      	pop	{r4, pc}
   11024:	000246fc 	.word	0x000246fc
   11028:	00024740 	.word	0x00024740
   1102c:	00024334 	.word	0x00024334

00011030 <ticker_cb>:
{
   11030:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11034:	4615      	mov	r5, r2
   11036:	b08b      	sub	sp, #44	; 0x2c
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
   11038:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1103c:	4295      	cmp	r5, r2
{
   1103e:	9c12      	ldr	r4, [sp, #72]	; 0x48
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
   11040:	d01b      	beq.n	1107a <ticker_cb+0x4a>
	return ++hdr->ref;
   11042:	7c22      	ldrb	r2, [r4, #16]
   11044:	3201      	adds	r2, #1
   11046:	b2d2      	uxtb	r2, r2
   11048:	4681      	mov	r9, r0
   1104a:	4688      	mov	r8, r1
   1104c:	461f      	mov	r7, r3
   1104e:	7422      	strb	r2, [r4, #16]
		LL_ASSERT(ref);
   11050:	2a00      	cmp	r2, #0
   11052:	d064      	beq.n	1111e <ticker_cb+0xee>
		p.ticks_at_expire = ticks_at_expire;
   11054:	4e39      	ldr	r6, [pc, #228]	; (1113c <ticker_cb+0x10c>)
		mfy.param = &p;
   11056:	4b3a      	ldr	r3, [pc, #232]	; (11140 <ticker_cb+0x110>)
		p.ticks_at_expire = ticks_at_expire;
   11058:	f8c6 9000 	str.w	r9, [r6]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   1105c:	2200      	movs	r2, #0
	lll = &adv->lll;
   1105e:	f104 0c1c 	add.w	ip, r4, #28
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   11062:	4611      	mov	r1, r2
   11064:	2001      	movs	r0, #1
		mfy.param = &p;
   11066:	609e      	str	r6, [r3, #8]
		p.remainder = remainder;
   11068:	f8c6 8004 	str.w	r8, [r6, #4]
		p.lazy = lazy;
   1106c:	8135      	strh	r5, [r6, #8]
		p.force = force;
   1106e:	72b7      	strb	r7, [r6, #10]
		p.param = lll;
   11070:	f8c6 c00c 	str.w	ip, [r6, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   11074:	f7fb fec0 	bl	cdf8 <mayfly_enqueue>
		LL_ASSERT(!ret);
   11078:	b938      	cbnz	r0, 1108a <ticker_cb+0x5a>
	if (!lll->is_hdcd)
   1107a:	f894 5024 	ldrb.w	r5, [r4, #36]	; 0x24
   1107e:	f015 0501 	ands.w	r5, r5, #1
   11082:	d014      	beq.n	110ae <ticker_cb+0x7e>
}
   11084:	b00b      	add	sp, #44	; 0x2c
   11086:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		LL_ASSERT(!ret);
   1108a:	4a2e      	ldr	r2, [pc, #184]	; (11144 <ticker_cb+0x114>)
   1108c:	492e      	ldr	r1, [pc, #184]	; (11148 <ticker_cb+0x118>)
   1108e:	482f      	ldr	r0, [pc, #188]	; (1114c <ticker_cb+0x11c>)
   11090:	f240 63ce 	movw	r3, #1742	; 0x6ce
   11094:	f00d f976 	bl	1e384 <printk>
   11098:	4040      	eors	r0, r0
   1109a:	f380 8811 	msr	BASEPRI, r0
   1109e:	f04f 0003 	mov.w	r0, #3
   110a2:	df02      	svc	2
	if (!lll->is_hdcd)
   110a4:	f894 5024 	ldrb.w	r5, [r4, #36]	; 0x24
   110a8:	f015 0501 	ands.w	r5, r5, #1
   110ac:	d1ea      	bne.n	11084 <ticker_cb+0x54>
		lll_rand_isr_get(&random_delay, sizeof(random_delay));
   110ae:	2104      	movs	r1, #4
   110b0:	a809      	add	r0, sp, #36	; 0x24
   110b2:	f006 fc2d 	bl	17910 <lll_rand_isr_get>
		random_delay %= ULL_ADV_RANDOM_DELAY;
   110b6:	9809      	ldr	r0, [sp, #36]	; 0x24
   110b8:	4925      	ldr	r1, [pc, #148]	; (11150 <ticker_cb+0x120>)
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   110ba:	4a26      	ldr	r2, [pc, #152]	; (11154 <ticker_cb+0x124>)
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   110bc:	9406      	str	r4, [sp, #24]
		random_delay %= ULL_ADV_RANDOM_DELAY;
   110be:	fba1 3100 	umull	r3, r1, r1, r0
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   110c2:	1aa2      	subs	r2, r4, r2
   110c4:	4c24      	ldr	r4, [pc, #144]	; (11158 <ticker_cb+0x128>)
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   110c6:	9504      	str	r5, [sp, #16]
		random_delay %= ULL_ADV_RANDOM_DELAY;
   110c8:	1a43      	subs	r3, r0, r1
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   110ca:	0892      	lsrs	r2, r2, #2
		random_delay %= ULL_ADV_RANDOM_DELAY;
   110cc:	eb01 0353 	add.w	r3, r1, r3, lsr #1
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   110d0:	fba4 4202 	umull	r4, r2, r4, r2
		random_delay %= ULL_ADV_RANDOM_DELAY;
   110d4:	f240 1147 	movw	r1, #327	; 0x147
   110d8:	0a1b      	lsrs	r3, r3, #8
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   110da:	0892      	lsrs	r2, r2, #2
		random_delay %= ULL_ADV_RANDOM_DELAY;
   110dc:	fb01 0313 	mls	r3, r1, r3, r0
				    (TICKER_ID_ADV_BASE +
   110e0:	3202      	adds	r2, #2
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   110e2:	491e      	ldr	r1, [pc, #120]	; (1115c <ticker_cb+0x12c>)
   110e4:	9105      	str	r1, [sp, #20]
		random_delay += 1;
   110e6:	3301      	adds	r3, #1
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   110e8:	e9cd 5502 	strd	r5, r5, [sp, #8]
   110ec:	e9cd 5500 	strd	r5, r5, [sp]
   110f0:	4628      	mov	r0, r5
   110f2:	b2d2      	uxtb	r2, r2
   110f4:	2101      	movs	r1, #1
		random_delay += 1;
   110f6:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   110f8:	f7fd f96c 	bl	e3d4 <ticker_update>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   110fc:	f030 0302 	bics.w	r3, r0, #2
   11100:	d0c0      	beq.n	11084 <ticker_cb+0x54>
   11102:	4a10      	ldr	r2, [pc, #64]	; (11144 <ticker_cb+0x114>)
   11104:	4916      	ldr	r1, [pc, #88]	; (11160 <ticker_cb+0x130>)
   11106:	4811      	ldr	r0, [pc, #68]	; (1114c <ticker_cb+0x11c>)
   11108:	f240 63e4 	movw	r3, #1764	; 0x6e4
   1110c:	f00d f93a 	bl	1e384 <printk>
   11110:	4040      	eors	r0, r0
   11112:	f380 8811 	msr	BASEPRI, r0
   11116:	f04f 0003 	mov.w	r0, #3
   1111a:	df02      	svc	2
}
   1111c:	e7b2      	b.n	11084 <ticker_cb+0x54>
		LL_ASSERT(ref);
   1111e:	4a09      	ldr	r2, [pc, #36]	; (11144 <ticker_cb+0x114>)
   11120:	4910      	ldr	r1, [pc, #64]	; (11164 <ticker_cb+0x134>)
   11122:	480a      	ldr	r0, [pc, #40]	; (1114c <ticker_cb+0x11c>)
   11124:	f240 63c1 	movw	r3, #1729	; 0x6c1
   11128:	f00d f92c 	bl	1e384 <printk>
   1112c:	4040      	eors	r0, r0
   1112e:	f380 8811 	msr	BASEPRI, r0
   11132:	f04f 0003 	mov.w	r0, #3
   11136:	df02      	svc	2
   11138:	e78c      	b.n	11054 <ticker_cb+0x24>
   1113a:	bf00      	nop
   1113c:	20002060 	.word	0x20002060
   11140:	20000458 	.word	0x20000458
   11144:	00024768 	.word	0x00024768
   11148:	000246c8 	.word	0x000246c8
   1114c:	00024334 	.word	0x00024334
   11150:	90d4f121 	.word	0x90d4f121
   11154:	20002000 	.word	0x20002000
   11158:	30c30c31 	.word	0x30c30c31
   1115c:	000112a1 	.word	0x000112a1
   11160:	000247ac 	.word	0x000247ac
   11164:	000247a8 	.word	0x000247a8

00011168 <ticker_op_stop_cb>:
	if (status != TICKER_STATUS_SUCCESS) {
   11168:	2800      	cmp	r0, #0
   1116a:	d132      	bne.n	111d2 <ticker_op_stop_cb+0x6a>
{
   1116c:	b538      	push	{r3, r4, r5, lr}
   1116e:	460c      	mov	r4, r1
	mfy.param = &adv->lll;
   11170:	4d1f      	ldr	r5, [pc, #124]	; (111f0 <ticker_op_stop_cb+0x88>)
	return hdr->ref;
   11172:	7c09      	ldrb	r1, [r1, #16]
   11174:	f104 031c 	add.w	r3, r4, #28
   11178:	60ab      	str	r3, [r5, #8]
	if (ull_ref_get(hdr)) {
   1117a:	f001 02ff 	and.w	r2, r1, #255	; 0xff
   1117e:	b1e1      	cbz	r1, 111ba <ticker_op_stop_cb+0x52>
		LL_ASSERT(!hdr->disabled_cb);
   11180:	6962      	ldr	r2, [r4, #20]
   11182:	b16a      	cbz	r2, 111a0 <ticker_op_stop_cb+0x38>
   11184:	4a1b      	ldr	r2, [pc, #108]	; (111f4 <ticker_op_stop_cb+0x8c>)
   11186:	491c      	ldr	r1, [pc, #112]	; (111f8 <ticker_op_stop_cb+0x90>)
   11188:	481c      	ldr	r0, [pc, #112]	; (111fc <ticker_op_stop_cb+0x94>)
   1118a:	f240 7335 	movw	r3, #1845	; 0x735
   1118e:	f00d f8f9 	bl	1e384 <printk>
   11192:	4040      	eors	r0, r0
   11194:	f380 8811 	msr	BASEPRI, r0
   11198:	f04f 0003 	mov.w	r0, #3
   1119c:	df02      	svc	2
   1119e:	68ab      	ldr	r3, [r5, #8]
		hdr->disabled_cb = disabled_cb;
   111a0:	4917      	ldr	r1, [pc, #92]	; (11200 <ticker_op_stop_cb+0x98>)
		mfy.fp = lll_disable;
   111a2:	4818      	ldr	r0, [pc, #96]	; (11204 <ticker_op_stop_cb+0x9c>)
		hdr->disabled_param = mfy.param;
   111a4:	61a3      	str	r3, [r4, #24]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   111a6:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   111a8:	6161      	str	r1, [r4, #20]
		mfy.fp = lll_disable;
   111aa:	60e8      	str	r0, [r5, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   111ac:	4b10      	ldr	r3, [pc, #64]	; (111f0 <ticker_op_stop_cb+0x88>)
   111ae:	4611      	mov	r1, r2
   111b0:	2002      	movs	r0, #2
   111b2:	f7fb fe21 	bl	cdf8 <mayfly_enqueue>
		LL_ASSERT(!ret);
   111b6:	b968      	cbnz	r0, 111d4 <ticker_op_stop_cb+0x6c>
}
   111b8:	bd38      	pop	{r3, r4, r5, pc}
		mfy.fp = disabled_cb;
   111ba:	4b11      	ldr	r3, [pc, #68]	; (11200 <ticker_op_stop_cb+0x98>)
   111bc:	60eb      	str	r3, [r5, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   111be:	2101      	movs	r1, #1
   111c0:	462b      	mov	r3, r5
   111c2:	2002      	movs	r0, #2
   111c4:	f7fb fe18 	bl	cdf8 <mayfly_enqueue>
		LL_ASSERT(!ret);
   111c8:	2800      	cmp	r0, #0
   111ca:	d0f5      	beq.n	111b8 <ticker_op_stop_cb+0x50>
   111cc:	f240 7341 	movw	r3, #1857	; 0x741
   111d0:	e002      	b.n	111d8 <ticker_op_stop_cb+0x70>
   111d2:	4770      	bx	lr
		LL_ASSERT(!ret);
   111d4:	f240 733c 	movw	r3, #1852	; 0x73c
		LL_ASSERT(!ret);
   111d8:	4a06      	ldr	r2, [pc, #24]	; (111f4 <ticker_op_stop_cb+0x8c>)
   111da:	490b      	ldr	r1, [pc, #44]	; (11208 <ticker_op_stop_cb+0xa0>)
   111dc:	4807      	ldr	r0, [pc, #28]	; (111fc <ticker_op_stop_cb+0x94>)
   111de:	f00d f8d1 	bl	1e384 <printk>
   111e2:	4040      	eors	r0, r0
   111e4:	f380 8811 	msr	BASEPRI, r0
   111e8:	f04f 0003 	mov.w	r0, #3
   111ec:	df02      	svc	2
}
   111ee:	bd38      	pop	{r3, r4, r5, pc}
   111f0:	20000468 	.word	0x20000468
   111f4:	00024768 	.word	0x00024768
   111f8:	000247c8 	.word	0x000247c8
   111fc:	00024334 	.word	0x00024334
   11200:	0001120d 	.word	0x0001120d
   11204:	00017919 	.word	0x00017919
   11208:	000246c8 	.word	0x000246c8

0001120c <disabled_cb>:
{
   1120c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	adv = ((struct lll_hdr *)param)->parent;
   1120e:	6805      	ldr	r5, [r0, #0]
	LL_ASSERT(adv->link_cc_free);
   11210:	6c2f      	ldr	r7, [r5, #64]	; 0x40
{
   11212:	4606      	mov	r6, r0
	LL_ASSERT(adv->link_cc_free);
   11214:	b1d7      	cbz	r7, 1124c <disabled_cb+0x40>
	LL_ASSERT(adv->node_rx_cc_free);
   11216:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	adv->link_cc_free = NULL;
   11218:	2300      	movs	r3, #0
   1121a:	642b      	str	r3, [r5, #64]	; 0x40
	LL_ASSERT(adv->node_rx_cc_free);
   1121c:	b34c      	cbz	r4, 11272 <disabled_cb+0x66>
	adv->node_rx_cc_free = NULL;
   1121e:	2100      	movs	r1, #0
	rx->hdr.handle = 0xffff;
   11220:	f64f 73ff 	movw	r3, #65535	; 0xffff
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   11224:	2214      	movs	r2, #20
	adv->node_rx_cc_free = NULL;
   11226:	6469      	str	r1, [r5, #68]	; 0x44
__ssp_bos_icheck3(memset, void *, int)
   11228:	f104 001c 	add.w	r0, r4, #28
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1122c:	7122      	strb	r2, [r4, #4]
	rx->hdr.handle = 0xffff;
   1122e:	80e3      	strh	r3, [r4, #6]
   11230:	221e      	movs	r2, #30
   11232:	f012 fa24 	bl	2367e <memset>
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
   11236:	233c      	movs	r3, #60	; 0x3c
	rx->hdr.rx_ftr.param = param;
   11238:	60a6      	str	r6, [r4, #8]
	ll_rx_put(link, rx);
   1123a:	4638      	mov	r0, r7
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
   1123c:	7723      	strb	r3, [r4, #28]
	ll_rx_put(link, rx);
   1123e:	4621      	mov	r1, r4
   11240:	f7ff fc1a 	bl	10a78 <ll_rx_put>
}
   11244:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_rx_sched();
   11248:	f7ff bc20 	b.w	10a8c <ll_rx_sched>
	LL_ASSERT(adv->link_cc_free);
   1124c:	4a10      	ldr	r2, [pc, #64]	; (11290 <disabled_cb+0x84>)
   1124e:	4911      	ldr	r1, [pc, #68]	; (11294 <disabled_cb+0x88>)
   11250:	4811      	ldr	r0, [pc, #68]	; (11298 <disabled_cb+0x8c>)
   11252:	f240 734e 	movw	r3, #1870	; 0x74e
   11256:	f00d f895 	bl	1e384 <printk>
   1125a:	4040      	eors	r0, r0
   1125c:	f380 8811 	msr	BASEPRI, r0
   11260:	f04f 0003 	mov.w	r0, #3
   11264:	df02      	svc	2
	LL_ASSERT(adv->node_rx_cc_free);
   11266:	6c6c      	ldr	r4, [r5, #68]	; 0x44
   11268:	6c2f      	ldr	r7, [r5, #64]	; 0x40
	adv->link_cc_free = NULL;
   1126a:	2300      	movs	r3, #0
   1126c:	642b      	str	r3, [r5, #64]	; 0x40
	LL_ASSERT(adv->node_rx_cc_free);
   1126e:	2c00      	cmp	r4, #0
   11270:	d1d5      	bne.n	1121e <disabled_cb+0x12>
   11272:	4a07      	ldr	r2, [pc, #28]	; (11290 <disabled_cb+0x84>)
   11274:	4909      	ldr	r1, [pc, #36]	; (1129c <disabled_cb+0x90>)
   11276:	4808      	ldr	r0, [pc, #32]	; (11298 <disabled_cb+0x8c>)
   11278:	f240 7352 	movw	r3, #1874	; 0x752
   1127c:	f00d f882 	bl	1e384 <printk>
   11280:	4040      	eors	r0, r0
   11282:	f380 8811 	msr	BASEPRI, r0
   11286:	f04f 0003 	mov.w	r0, #3
   1128a:	df02      	svc	2
   1128c:	6c6c      	ldr	r4, [r5, #68]	; 0x44
   1128e:	e7c6      	b.n	1121e <disabled_cb+0x12>
   11290:	00024768 	.word	0x00024768
   11294:	000247dc 	.word	0x000247dc
   11298:	00024334 	.word	0x00024334
   1129c:	000247f0 	.word	0x000247f0

000112a0 <ticker_op_update_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   112a0:	b900      	cbnz	r0, 112a4 <ticker_op_update_cb+0x4>
   112a2:	4770      	bx	lr
{
   112a4:	b510      	push	{r4, lr}
   112a6:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   112a8:	f7ff fc9c 	bl	10be4 <ull_disable_mark_get>
   112ac:	4284      	cmp	r4, r0
   112ae:	d00c      	beq.n	112ca <ticker_op_update_cb+0x2a>
   112b0:	4a06      	ldr	r2, [pc, #24]	; (112cc <ticker_op_update_cb+0x2c>)
   112b2:	4907      	ldr	r1, [pc, #28]	; (112d0 <ticker_op_update_cb+0x30>)
   112b4:	4807      	ldr	r0, [pc, #28]	; (112d4 <ticker_op_update_cb+0x34>)
   112b6:	f240 7305 	movw	r3, #1797	; 0x705
   112ba:	f00d f863 	bl	1e384 <printk>
   112be:	4040      	eors	r0, r0
   112c0:	f380 8811 	msr	BASEPRI, r0
   112c4:	f04f 0003 	mov.w	r0, #3
   112c8:	df02      	svc	2
}
   112ca:	bd10      	pop	{r4, pc}
   112cc:	00024768 	.word	0x00024768
   112d0:	00024808 	.word	0x00024808
   112d4:	00024334 	.word	0x00024334

000112d8 <ticker_stop_cb>:
{
   112d8:	b530      	push	{r4, r5, lr}
   112da:	b083      	sub	sp, #12
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   112dc:	4b19      	ldr	r3, [pc, #100]	; (11344 <ticker_stop_cb+0x6c>)
{
   112de:	9d06      	ldr	r5, [sp, #24]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   112e0:	4a19      	ldr	r2, [pc, #100]	; (11348 <ticker_stop_cb+0x70>)
   112e2:	1aeb      	subs	r3, r5, r3
   112e4:	089b      	lsrs	r3, r3, #2
   112e6:	fba2 2303 	umull	r2, r3, r2, r3
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   112ea:	f413 7f7f 	tst.w	r3, #1020	; 0x3fc
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   112ee:	ea4f 0493 	mov.w	r4, r3, lsr #2
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   112f2:	d119      	bne.n	11328 <ticker_stop_cb+0x50>
			  TICKER_ID_ADV_BASE + handle,
   112f4:	1ca2      	adds	r2, r4, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
   112f6:	4b15      	ldr	r3, [pc, #84]	; (1134c <ticker_stop_cb+0x74>)
   112f8:	9500      	str	r5, [sp, #0]
   112fa:	b2d2      	uxtb	r2, r2
   112fc:	2101      	movs	r1, #1
   112fe:	2000      	movs	r0, #0
   11300:	f7fd f880 	bl	e404 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   11304:	f030 0302 	bics.w	r3, r0, #2
   11308:	d00c      	beq.n	11324 <ticker_stop_cb+0x4c>
   1130a:	4a11      	ldr	r2, [pc, #68]	; (11350 <ticker_stop_cb+0x78>)
   1130c:	4911      	ldr	r1, [pc, #68]	; (11354 <ticker_stop_cb+0x7c>)
   1130e:	4812      	ldr	r0, [pc, #72]	; (11358 <ticker_stop_cb+0x80>)
   11310:	f240 7317 	movw	r3, #1815	; 0x717
   11314:	f00d f836 	bl	1e384 <printk>
   11318:	4040      	eors	r0, r0
   1131a:	f380 8811 	msr	BASEPRI, r0
   1131e:	f04f 0003 	mov.w	r0, #3
   11322:	df02      	svc	2
}
   11324:	b003      	add	sp, #12
   11326:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   11328:	4a09      	ldr	r2, [pc, #36]	; (11350 <ticker_stop_cb+0x78>)
   1132a:	490c      	ldr	r1, [pc, #48]	; (1135c <ticker_stop_cb+0x84>)
   1132c:	480a      	ldr	r0, [pc, #40]	; (11358 <ticker_stop_cb+0x80>)
   1132e:	f240 7312 	movw	r3, #1810	; 0x712
   11332:	f00d f827 	bl	1e384 <printk>
   11336:	4040      	eors	r0, r0
   11338:	f380 8811 	msr	BASEPRI, r0
   1133c:	f04f 0003 	mov.w	r0, #3
   11340:	df02      	svc	2
   11342:	e7d7      	b.n	112f4 <ticker_stop_cb+0x1c>
   11344:	20002000 	.word	0x20002000
   11348:	30c30c31 	.word	0x30c30c31
   1134c:	00011169 	.word	0x00011169
   11350:	00024768 	.word	0x00024768
   11354:	000247ac 	.word	0x000247ac
   11358:	00024334 	.word	0x00024334
   1135c:	00024838 	.word	0x00024838

00011360 <init_reset>:
{
   11360:	b538      	push	{r3, r4, r5, lr}
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
   11362:	4c15      	ldr	r4, [pc, #84]	; (113b8 <init_reset+0x58>)
   11364:	f104 0028 	add.w	r0, r4, #40	; 0x28
   11368:	f006 fe74 	bl	18054 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   1136c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   11370:	f006 fe70 	bl	18054 <lll_adv_data_init>
   11374:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
{
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
#if defined(CONFIG_BT_CTLR_PRIVACY)
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
#endif /* CONFIG_BT_CTLR_PRIVACY */
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
   11378:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   1137a:	4910      	ldr	r1, [pc, #64]	; (113bc <init_reset+0x5c>)
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
   1137c:	f894 504a 	ldrb.w	r5, [r4, #74]	; 0x4a
   11380:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
   11384:	400b      	ands	r3, r1
   11386:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
   11388:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1138c:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
   11390:	f36f 0542 	bfc	r5, #1, #2
	pdu->len = BDADDR_SIZE;
   11394:	2206      	movs	r2, #6
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
   11396:	f043 030e 	orr.w	r3, r3, #14
	pdu->type = pdu_type;
   1139a:	2000      	movs	r0, #0
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
   1139c:	84a3      	strh	r3, [r4, #36]	; 0x24
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
   1139e:	f884 504a 	strb.w	r5, [r4, #74]	; 0x4a
	pdu->len = BDADDR_SIZE;
   113a2:	704a      	strb	r2, [r1, #1]
	pdu->type = pdu_type;
   113a4:	7008      	strb	r0, [r1, #0]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   113a6:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
   113aa:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   113ae:	2104      	movs	r1, #4
   113b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	pdu->len = BDADDR_SIZE;
   113b2:	705a      	strb	r2, [r3, #1]
	pdu->type = pdu_type;
   113b4:	7019      	strb	r1, [r3, #0]
}
   113b6:	bd38      	pop	{r3, r4, r5, pc}
   113b8:	20002000 	.word	0x20002000
   113bc:	fffffcf1 	.word	0xfffffcf1

000113c0 <conn_release.constprop.0>:
static void conn_release(struct ll_adv_set *adv)
   113c0:	b570      	push	{r4, r5, r6, lr}
	struct lll_conn *lll = adv->lll.conn;
   113c2:	4c1b      	ldr	r4, [pc, #108]	; (11430 <conn_release.constprop.0+0x70>)
   113c4:	6a25      	ldr	r5, [r4, #32]
	LL_ASSERT(!lll->link_tx_free);
   113c6:	6dab      	ldr	r3, [r5, #88]	; 0x58
   113c8:	b163      	cbz	r3, 113e4 <conn_release.constprop.0+0x24>
   113ca:	4a1a      	ldr	r2, [pc, #104]	; (11434 <conn_release.constprop.0+0x74>)
   113cc:	491a      	ldr	r1, [pc, #104]	; (11438 <conn_release.constprop.0+0x78>)
   113ce:	481b      	ldr	r0, [pc, #108]	; (1143c <conn_release.constprop.0+0x7c>)
   113d0:	f240 737c 	movw	r3, #1916	; 0x77c
   113d4:	f00c ffd6 	bl	1e384 <printk>
   113d8:	4040      	eors	r0, r0
   113da:	f380 8811 	msr	BASEPRI, r0
   113de:	f04f 0003 	mov.w	r0, #3
   113e2:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
   113e4:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   113e8:	f105 0048 	add.w	r0, r5, #72	; 0x48
   113ec:	f7fb fc86 	bl	ccfc <memq_deinit>
	LL_ASSERT(link);
   113f0:	4606      	mov	r6, r0
   113f2:	b170      	cbz	r0, 11412 <conn_release.constprop.0+0x52>
	ll_conn_release(lll->hdr.parent);
   113f4:	6828      	ldr	r0, [r5, #0]
	lll->link_tx_free = link;
   113f6:	65ae      	str	r6, [r5, #88]	; 0x58
	ll_conn_release(lll->hdr.parent);
   113f8:	f000 ffae 	bl	12358 <ll_conn_release>
	adv->lll.conn = NULL;
   113fc:	2500      	movs	r5, #0
	ll_rx_release(adv->node_rx_cc_free);
   113fe:	6c60      	ldr	r0, [r4, #68]	; 0x44
	adv->lll.conn = NULL;
   11400:	6225      	str	r5, [r4, #32]
	ll_rx_release(adv->node_rx_cc_free);
   11402:	f7ff fb33 	bl	10a6c <ll_rx_release>
	ll_rx_link_release(adv->link_cc_free);
   11406:	6c20      	ldr	r0, [r4, #64]	; 0x40
	adv->node_rx_cc_free = NULL;
   11408:	6465      	str	r5, [r4, #68]	; 0x44
	ll_rx_link_release(adv->link_cc_free);
   1140a:	f7ff fb23 	bl	10a54 <ll_rx_link_release>
	adv->link_cc_free = NULL;
   1140e:	6425      	str	r5, [r4, #64]	; 0x40
}
   11410:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
   11412:	4a08      	ldr	r2, [pc, #32]	; (11434 <conn_release.constprop.0+0x74>)
   11414:	490a      	ldr	r1, [pc, #40]	; (11440 <conn_release.constprop.0+0x80>)
   11416:	4809      	ldr	r0, [pc, #36]	; (1143c <conn_release.constprop.0+0x7c>)
   11418:	f240 737e 	movw	r3, #1918	; 0x77e
   1141c:	f00c ffb2 	bl	1e384 <printk>
   11420:	4040      	eors	r0, r0
   11422:	f380 8811 	msr	BASEPRI, r0
   11426:	f04f 0003 	mov.w	r0, #3
   1142a:	df02      	svc	2
   1142c:	e7e2      	b.n	113f4 <conn_release.constprop.0+0x34>
   1142e:	bf00      	nop
   11430:	20002000 	.word	0x20002000
   11434:	00024768 	.word	0x00024768
   11438:	00024844 	.word	0x00024844
   1143c:	00024334 	.word	0x00024334
   11440:	000248cc 	.word	0x000248cc

00011444 <ll_adv_params_set>:
{
   11444:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   11448:	4d4a      	ldr	r5, [pc, #296]	; (11574 <ll_adv_params_set+0x130>)
	if (!adv || adv->is_enabled) {
   1144a:	4c4b      	ldr	r4, [pc, #300]	; (11578 <ll_adv_params_set+0x134>)
{
   1144c:	4686      	mov	lr, r0
   1144e:	460e      	mov	r6, r1
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   11450:	e895 0003 	ldmia.w	r5, {r0, r1}
{
   11454:	b083      	sub	sp, #12
	if (!adv || adv->is_enabled) {
   11456:	f894 804a 	ldrb.w	r8, [r4, #74]	; 0x4a
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   1145a:	9000      	str	r0, [sp, #0]
	if (!adv || adv->is_enabled) {
   1145c:	f018 0001 	ands.w	r0, r8, #1
{
   11460:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   11462:	f89d c02c 	ldrb.w	ip, [sp, #44]	; 0x2c
   11466:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   1146a:	f88d 1004 	strb.w	r1, [sp, #4]
	if (!adv || adv->is_enabled) {
   1146e:	d17c      	bne.n	1156a <ll_adv_params_set+0x126>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   11470:	f894 9029 	ldrb.w	r9, [r4, #41]	; 0x29
	adv->lll.chan_map = chan_map;
   11474:	f8b4 8024 	ldrh.w	r8, [r4, #36]	; 0x24
   11478:	eb04 0989 	add.w	r9, r4, r9, lsl #2
	pdu->type = pdu_adv_type[adv_type];
   1147c:	a902      	add	r1, sp, #8
	adv->lll.chan_map = chan_map;
   1147e:	f00c 0c07 	and.w	ip, ip, #7
		adv->interval = 0;
   11482:	2e01      	cmp	r6, #1
	pdu->type = pdu_adv_type[adv_type];
   11484:	4431      	add	r1, r6
	adv->lll.chan_map = chan_map;
   11486:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   1148a:	f8d9 602c 	ldr.w	r6, [r9, #44]	; 0x2c
	pdu->type = pdu_adv_type[adv_type];
   1148e:	f811 9c08 	ldrb.w	r9, [r1, #-8]
   11492:	7831      	ldrb	r1, [r6, #0]
	adv->lll.chan_map = chan_map;
   11494:	f005 0503 	and.w	r5, r5, #3
   11498:	ea4c 2505 	orr.w	r5, ip, r5, lsl #8
   1149c:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 1157c <ll_adv_params_set+0x138>
   114a0:	ea08 080c 	and.w	r8, r8, ip
	adv->own_addr_type = own_addr_type;
   114a4:	f894 c04a 	ldrb.w	ip, [r4, #74]	; 0x4a
		adv->interval = 0;
   114a8:	bf08      	it	eq
   114aa:	f04f 0e00 	moveq.w	lr, #0
	pdu->type = pdu_adv_type[adv_type];
   114ae:	f021 011f 	bic.w	r1, r1, #31
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   114b2:	f019 0f0e 	tst.w	r9, #14
	pdu->type = pdu_adv_type[adv_type];
   114b6:	f009 090f 	and.w	r9, r9, #15
   114ba:	f8a4 e048 	strh.w	lr, [r4, #72]	; 0x48
	adv->own_addr_type = own_addr_type;
   114be:	f362 0c42 	bfi	ip, r2, #1, #2
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   114c2:	bf0c      	ite	eq
   114c4:	f04f 0e01 	moveq.w	lr, #1
   114c8:	f04f 0e00 	movne.w	lr, #0
   114cc:	ea49 0101 	orr.w	r1, r9, r1
	adv->lll.chan_map = chan_map;
   114d0:	ea45 0508 	orr.w	r5, r5, r8
   114d4:	f36e 1145 	bfi	r1, lr, #5, #1
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   114d8:	f01c 0f04 	tst.w	ip, #4
	adv->lll.chan_map = chan_map;
   114dc:	84a5      	strh	r5, [r4, #36]	; 0x24
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   114de:	7031      	strb	r1, [r6, #0]
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   114e0:	fa5f f58c 	uxtb.w	r5, ip
	adv->own_addr_type = own_addr_type;
   114e4:	f884 c04a 	strb.w	ip, [r4, #74]	; 0x4a
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   114e8:	d00a      	beq.n	11500 <ll_adv_params_set+0xbc>
		adv->peer_addr_type = direct_addr_type;
   114ea:	4629      	mov	r1, r5
   114ec:	f363 01c3 	bfi	r1, r3, #3, #1
   114f0:	f884 104a 	strb.w	r1, [r4, #74]	; 0x4a
		memcpy(&adv->peer_addr, direct_addr, BDADDR_SIZE);
   114f4:	6839      	ldr	r1, [r7, #0]
   114f6:	f8c4 104b 	str.w	r1, [r4, #75]	; 0x4b
   114fa:	88b9      	ldrh	r1, [r7, #4]
   114fc:	f8a4 104f 	strh.w	r1, [r4, #79]	; 0x4f
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   11500:	7831      	ldrb	r1, [r6, #0]
   11502:	f001 050f 	and.w	r5, r1, #15
   11506:	2d01      	cmp	r5, #1
   11508:	f002 0c01 	and.w	ip, r2, #1
   1150c:	d01f      	beq.n	1154e <ll_adv_params_set+0x10a>
	} else if (pdu->len == 0) {
   1150e:	7873      	ldrb	r3, [r6, #1]
		pdu->tx_addr = own_addr_type & 0x1;
   11510:	f36c 1186 	bfi	r1, ip, #6, #1
	} else if (pdu->len == 0) {
   11514:	b1ab      	cbz	r3, 11542 <ll_adv_params_set+0xfe>
		pdu->rx_addr = 0;
   11516:	f36f 11c7 	bfc	r1, #7, #1
   1151a:	7031      	strb	r1, [r6, #0]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   1151c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
   11520:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   11524:	0192      	lsls	r2, r2, #6
   11526:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   11528:	f002 0240 	and.w	r2, r2, #64	; 0x40
		if (pdu->len == 0) {
   1152c:	7859      	ldrb	r1, [r3, #1]
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   1152e:	f042 0204 	orr.w	r2, r2, #4
   11532:	701a      	strb	r2, [r3, #0]
		if (pdu->len == 0) {
   11534:	b911      	cbnz	r1, 1153c <ll_adv_params_set+0xf8>
			pdu->len = BDADDR_SIZE;
   11536:	2206      	movs	r2, #6
	return 0;
   11538:	4608      	mov	r0, r1
			pdu->len = BDADDR_SIZE;
   1153a:	705a      	strb	r2, [r3, #1]
}
   1153c:	b003      	add	sp, #12
   1153e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pdu->rx_addr = 0;
   11542:	f363 11c7 	bfi	r1, r3, #7, #1
		pdu->len = BDADDR_SIZE;
   11546:	2306      	movs	r3, #6
		pdu->rx_addr = 0;
   11548:	7031      	strb	r1, [r6, #0]
		pdu->len = BDADDR_SIZE;
   1154a:	7073      	strb	r3, [r6, #1]
   1154c:	e7e6      	b.n	1151c <ll_adv_params_set+0xd8>
		pdu->rx_addr = direct_addr_type;
   1154e:	4635      	mov	r5, r6
		pdu->tx_addr = own_addr_type & 0x1;
   11550:	f36c 1186 	bfi	r1, ip, #6, #1
		pdu->rx_addr = direct_addr_type;
   11554:	f363 11c7 	bfi	r1, r3, #7, #1
   11558:	f805 1b08 	strb.w	r1, [r5], #8
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1155c:	683b      	ldr	r3, [r7, #0]
   1155e:	60b3      	str	r3, [r6, #8]
   11560:	88bb      	ldrh	r3, [r7, #4]
   11562:	80ab      	strh	r3, [r5, #4]
		pdu->len = sizeof(struct pdu_adv_direct_ind);
   11564:	230c      	movs	r3, #12
   11566:	7073      	strb	r3, [r6, #1]
   11568:	e7d8      	b.n	1151c <ll_adv_params_set+0xd8>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1156a:	200c      	movs	r0, #12
}
   1156c:	b003      	add	sp, #12
   1156e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   11572:	bf00      	nop
   11574:	00023ba8 	.word	0x00023ba8
   11578:	20002000 	.word	0x20002000
   1157c:	fffffcf1 	.word	0xfffffcf1

00011580 <ull_adv_init>:
	err = init_reset();
   11580:	f7ff beee 	b.w	11360 <init_reset>

00011584 <ull_adv_reset>:
{
   11584:	b530      	push	{r4, r5, lr}
	if (!adv || !adv->is_enabled) {
   11586:	4c4c      	ldr	r4, [pc, #304]	; (116b8 <ull_adv_reset+0x134>)
   11588:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
   1158c:	07d9      	lsls	r1, r3, #31
{
   1158e:	b085      	sub	sp, #20
	if (!adv || !adv->is_enabled) {
   11590:	d551      	bpl.n	11636 <ull_adv_reset+0xb2>
	if (adv->lll.conn) {
   11592:	6a23      	ldr	r3, [r4, #32]
   11594:	b153      	cbz	r3, 115ac <ull_adv_reset+0x28>
		adv->lll.conn->slave.cancelled = 1U;
   11596:	f893 2020 	ldrb.w	r2, [r3, #32]
   1159a:	f042 0202 	orr.w	r2, r2, #2
   1159e:	f883 2020 	strb.w	r2, [r3, #32]
		if (unlikely(adv->lll.conn->slave.initiated)) {
   115a2:	6a23      	ldr	r3, [r4, #32]
   115a4:	f893 3020 	ldrb.w	r3, [r3, #32]
   115a8:	07da      	lsls	r2, r3, #31
   115aa:	d444      	bmi.n	11636 <ull_adv_reset+0xb2>
	mark = ull_disable_mark(adv);
   115ac:	4842      	ldr	r0, [pc, #264]	; (116b8 <ull_adv_reset+0x134>)
   115ae:	f7ff fb01 	bl	10bb4 <ull_disable_mark>
	LL_ASSERT(mark == adv);
   115b2:	4284      	cmp	r4, r0
   115b4:	d00c      	beq.n	115d0 <ull_adv_reset+0x4c>
   115b6:	4a41      	ldr	r2, [pc, #260]	; (116bc <ull_adv_reset+0x138>)
   115b8:	4941      	ldr	r1, [pc, #260]	; (116c0 <ull_adv_reset+0x13c>)
   115ba:	4842      	ldr	r0, [pc, #264]	; (116c4 <ull_adv_reset+0x140>)
   115bc:	f240 73df 	movw	r3, #2015	; 0x7df
   115c0:	f00c fee0 	bl	1e384 <printk>
   115c4:	4040      	eors	r0, r0
   115c6:	f380 8811 	msr	BASEPRI, r0
   115ca:	f04f 0003 	mov.w	r0, #3
   115ce:	df02      	svc	2
	if (adv->lll.is_hdcd) {
   115d0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   115d4:	07db      	lsls	r3, r3, #31
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   115d6:	ad03      	add	r5, sp, #12
	if (adv->lll.is_hdcd) {
   115d8:	d430      	bmi.n	1163c <ull_adv_reset+0xb8>
	ret_cb = TICKER_STATUS_BUSY;
   115da:	2202      	movs	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   115dc:	2103      	movs	r1, #3
   115de:	4b3a      	ldr	r3, [pc, #232]	; (116c8 <ull_adv_reset+0x144>)
   115e0:	9500      	str	r5, [sp, #0]
   115e2:	2000      	movs	r0, #0
	ret_cb = TICKER_STATUS_BUSY;
   115e4:	9203      	str	r2, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   115e6:	f7fc ff0d 	bl	e404 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   115ea:	4629      	mov	r1, r5
   115ec:	f7ff faba 	bl	10b64 <ull_ticker_status_take>
	if (ret) {
   115f0:	2800      	cmp	r0, #0
   115f2:	d14c      	bne.n	1168e <ull_adv_reset+0x10a>
	ret = ull_disable(&adv->lll);
   115f4:	4835      	ldr	r0, [pc, #212]	; (116cc <ull_adv_reset+0x148>)
   115f6:	f7ff fb19 	bl	10c2c <ull_disable>
	LL_ASSERT(!ret);
   115fa:	2800      	cmp	r0, #0
   115fc:	d134      	bne.n	11668 <ull_adv_reset+0xe4>
	mark = ull_disable_unmark(adv);
   115fe:	482e      	ldr	r0, [pc, #184]	; (116b8 <ull_adv_reset+0x134>)
   11600:	f7ff fae4 	bl	10bcc <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   11604:	4284      	cmp	r4, r0
   11606:	d00c      	beq.n	11622 <ull_adv_reset+0x9e>
   11608:	4a2c      	ldr	r2, [pc, #176]	; (116bc <ull_adv_reset+0x138>)
   1160a:	492d      	ldr	r1, [pc, #180]	; (116c0 <ull_adv_reset+0x13c>)
   1160c:	482d      	ldr	r0, [pc, #180]	; (116c4 <ull_adv_reset+0x140>)
   1160e:	f640 0301 	movw	r3, #2049	; 0x801
   11612:	f00c feb7 	bl	1e384 <printk>
   11616:	4040      	eors	r0, r0
   11618:	f380 8811 	msr	BASEPRI, r0
   1161c:	f04f 0003 	mov.w	r0, #3
   11620:	df02      	svc	2
	if (adv->lll.conn) {
   11622:	6a23      	ldr	r3, [r4, #32]
   11624:	b10b      	cbz	r3, 1162a <ull_adv_reset+0xa6>
		conn_release(adv);
   11626:	f7ff fecb 	bl	113c0 <conn_release.constprop.0>
	adv->is_enabled = 0U;
   1162a:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
   1162e:	f36f 0300 	bfc	r3, #0, #1
   11632:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
}
   11636:	2000      	movs	r0, #0
   11638:	b005      	add	sp, #20
   1163a:	bd30      	pop	{r4, r5, pc}
		ret_cb = TICKER_STATUS_BUSY;
   1163c:	2202      	movs	r2, #2
   1163e:	9203      	str	r2, [sp, #12]
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   11640:	2103      	movs	r1, #3
   11642:	4b21      	ldr	r3, [pc, #132]	; (116c8 <ull_adv_reset+0x144>)
   11644:	9500      	str	r5, [sp, #0]
   11646:	2201      	movs	r2, #1
   11648:	2000      	movs	r0, #0
   1164a:	f7fc fedb 	bl	e404 <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
   1164e:	4629      	mov	r1, r5
   11650:	f7ff fa88 	bl	10b64 <ull_ticker_status_take>
		if (ret) {
   11654:	2800      	cmp	r0, #0
   11656:	d0c0      	beq.n	115da <ull_adv_reset+0x56>
			mark = ull_disable_unmark(adv);
   11658:	4817      	ldr	r0, [pc, #92]	; (116b8 <ull_adv_reset+0x134>)
   1165a:	f7ff fab7 	bl	10bcc <ull_disable_unmark>
			LL_ASSERT(mark == adv);
   1165e:	4284      	cmp	r4, r0
   11660:	d0e9      	beq.n	11636 <ull_adv_reset+0xb2>
   11662:	f240 73ea 	movw	r3, #2026	; 0x7ea
   11666:	e019      	b.n	1169c <ull_adv_reset+0x118>
	LL_ASSERT(!ret);
   11668:	4a14      	ldr	r2, [pc, #80]	; (116bc <ull_adv_reset+0x138>)
   1166a:	4919      	ldr	r1, [pc, #100]	; (116d0 <ull_adv_reset+0x14c>)
   1166c:	4815      	ldr	r0, [pc, #84]	; (116c4 <ull_adv_reset+0x140>)
   1166e:	f240 73fe 	movw	r3, #2046	; 0x7fe
   11672:	f00c fe87 	bl	1e384 <printk>
   11676:	4040      	eors	r0, r0
   11678:	f380 8811 	msr	BASEPRI, r0
   1167c:	f04f 0003 	mov.w	r0, #3
   11680:	df02      	svc	2
	mark = ull_disable_unmark(adv);
   11682:	480d      	ldr	r0, [pc, #52]	; (116b8 <ull_adv_reset+0x134>)
   11684:	f7ff faa2 	bl	10bcc <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   11688:	4284      	cmp	r4, r0
   1168a:	d1bd      	bne.n	11608 <ull_adv_reset+0x84>
   1168c:	e7c9      	b.n	11622 <ull_adv_reset+0x9e>
		mark = ull_disable_unmark(adv);
   1168e:	480a      	ldr	r0, [pc, #40]	; (116b8 <ull_adv_reset+0x134>)
   11690:	f7ff fa9c 	bl	10bcc <ull_disable_unmark>
		LL_ASSERT(mark == adv);
   11694:	4284      	cmp	r4, r0
   11696:	d0ce      	beq.n	11636 <ull_adv_reset+0xb2>
   11698:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
   1169c:	4a07      	ldr	r2, [pc, #28]	; (116bc <ull_adv_reset+0x138>)
   1169e:	4908      	ldr	r1, [pc, #32]	; (116c0 <ull_adv_reset+0x13c>)
   116a0:	4808      	ldr	r0, [pc, #32]	; (116c4 <ull_adv_reset+0x140>)
   116a2:	f00c fe6f 	bl	1e384 <printk>
   116a6:	4040      	eors	r0, r0
   116a8:	f380 8811 	msr	BASEPRI, r0
   116ac:	f04f 0003 	mov.w	r0, #3
   116b0:	df02      	svc	2
}
   116b2:	2000      	movs	r0, #0
   116b4:	b005      	add	sp, #20
   116b6:	bd30      	pop	{r4, r5, pc}
   116b8:	20002000 	.word	0x20002000
   116bc:	00024768 	.word	0x00024768
   116c0:	00024858 	.word	0x00024858
   116c4:	00024334 	.word	0x00024334
   116c8:	0000fa8d 	.word	0x0000fa8d
   116cc:	2000201c 	.word	0x2000201c
   116d0:	000246c8 	.word	0x000246c8

000116d4 <ull_adv_reset_finalize>:
{
   116d4:	b510      	push	{r4, lr}
		lll_adv_data_reset(&lll->adv_data);
   116d6:	4c06      	ldr	r4, [pc, #24]	; (116f0 <ull_adv_reset_finalize+0x1c>)
   116d8:	f104 0028 	add.w	r0, r4, #40	; 0x28
   116dc:	f006 fcca 	bl	18074 <lll_adv_data_reset>
		lll_adv_data_reset(&lll->scan_rsp);
   116e0:	f104 0034 	add.w	r0, r4, #52	; 0x34
   116e4:	f006 fcc6 	bl	18074 <lll_adv_data_reset>
}
   116e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = init_reset();
   116ec:	f7ff be38 	b.w	11360 <init_reset>
   116f0:	20002000 	.word	0x20002000

000116f4 <ull_adv_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   116f4:	4a04      	ldr	r2, [pc, #16]	; (11708 <ull_adv_handle_get+0x14>)
   116f6:	4b05      	ldr	r3, [pc, #20]	; (1170c <ull_adv_handle_get+0x18>)
   116f8:	1a80      	subs	r0, r0, r2
   116fa:	0880      	lsrs	r0, r0, #2
   116fc:	fba3 3000 	umull	r3, r0, r3, r0
}
   11700:	f3c0 008f 	ubfx	r0, r0, #2, #16
   11704:	4770      	bx	lr
   11706:	bf00      	nop
   11708:	20002000 	.word	0x20002000
   1170c:	30c30c31 	.word	0x30c30c31

00011710 <ull_adv_lll_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   11710:	4a04      	ldr	r2, [pc, #16]	; (11724 <ull_adv_lll_handle_get+0x14>)
   11712:	6800      	ldr	r0, [r0, #0]
   11714:	4b04      	ldr	r3, [pc, #16]	; (11728 <ull_adv_lll_handle_get+0x18>)
   11716:	1a80      	subs	r0, r0, r2
   11718:	0880      	lsrs	r0, r0, #2
   1171a:	fba3 3000 	umull	r3, r0, r3, r0
}
   1171e:	f3c0 008f 	ubfx	r0, r0, #2, #16
   11722:	4770      	bx	lr
   11724:	20002000 	.word	0x20002000
   11728:	30c30c31 	.word	0x30c30c31

0001172c <ull_adv_is_enabled_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   1172c:	b938      	cbnz	r0, 1173e <ull_adv_is_enabled_get+0x12>
	if (!adv || !adv->is_enabled) {
   1172e:	4805      	ldr	r0, [pc, #20]	; (11744 <ull_adv_is_enabled_get+0x18>)
   11730:	f890 304a 	ldrb.w	r3, [r0, #74]	; 0x4a
	return &ll_adv[handle];
   11734:	f013 0f01 	tst.w	r3, #1
   11738:	bf08      	it	eq
   1173a:	2000      	moveq	r0, #0
   1173c:	4770      	bx	lr
		return NULL;
   1173e:	2000      	movs	r0, #0
}
   11740:	4770      	bx	lr
   11742:	bf00      	nop
   11744:	20002000 	.word	0x20002000

00011748 <ull_adv_is_enabled>:
	if (handle >= BT_CTLR_ADV_SET) {
   11748:	b928      	cbnz	r0, 11756 <ull_adv_is_enabled+0xe>
	if (!adv || !adv->is_enabled) {
   1174a:	4b04      	ldr	r3, [pc, #16]	; (1175c <ull_adv_is_enabled+0x14>)
   1174c:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
   11750:	f000 0001 	and.w	r0, r0, #1
   11754:	4770      	bx	lr
   11756:	2000      	movs	r0, #0
}
   11758:	4770      	bx	lr
   1175a:	bf00      	nop
   1175c:	20002000 	.word	0x20002000

00011760 <ull_adv_filter_pol_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   11760:	b950      	cbnz	r0, 11778 <ull_adv_filter_pol_get+0x18>
	if (!adv || !adv->is_enabled) {
   11762:	4b06      	ldr	r3, [pc, #24]	; (1177c <ull_adv_filter_pol_get+0x1c>)
   11764:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
   11768:	f010 0001 	ands.w	r0, r0, #1
   1176c:	d005      	beq.n	1177a <ull_adv_filter_pol_get+0x1a>
	return adv->lll.filter_policy;
   1176e:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
   11772:	f000 0003 	and.w	r0, r0, #3
   11776:	4770      	bx	lr
		return 0;
   11778:	2000      	movs	r0, #0
}
   1177a:	4770      	bx	lr
   1177c:	20002000 	.word	0x20002000

00011780 <ull_adv_data_set>:
{
   11780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   11784:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   11788:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   1178c:	b082      	sub	sp, #8
   1178e:	6ade      	ldr	r6, [r3, #44]	; 0x2c
	if (prev->type == PDU_ADV_TYPE_DIRECT_IND) {
   11790:	7833      	ldrb	r3, [r6, #0]
   11792:	f003 030f 	and.w	r3, r3, #15
   11796:	2b01      	cmp	r3, #1
   11798:	d034      	beq.n	11804 <ull_adv_data_set+0x84>
	if (len > PDU_AC_DATA_SIZE_MAX) {
   1179a:	291f      	cmp	r1, #31
   1179c:	460d      	mov	r5, r1
   1179e:	d82d      	bhi.n	117fc <ull_adv_data_set+0x7c>
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   117a0:	4604      	mov	r4, r0
   117a2:	f10d 0107 	add.w	r1, sp, #7
   117a6:	3028      	adds	r0, #40	; 0x28
   117a8:	4690      	mov	r8, r2
   117aa:	f006 fc69 	bl	18080 <lll_adv_pdu_alloc>
		pdu->chan_sel = prev->chan_sel;
   117ae:	7832      	ldrb	r2, [r6, #0]
   117b0:	f3c2 1140 	ubfx	r1, r2, #5, #1
	pdu->type = prev->type;
   117b4:	f3c2 0303 	ubfx	r3, r2, #0, #4
   117b8:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
	pdu->tx_addr = prev->tx_addr;
   117bc:	f3c2 1180 	ubfx	r1, r2, #6, #1
	pdu->type = prev->type;
   117c0:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
   117c4:	f002 0280 	and.w	r2, r2, #128	; 0x80
   117c8:	4601      	mov	r1, r0
   117ca:	4313      	orrs	r3, r2
   117cc:	f801 3b02 	strb.w	r3, [r1], #2
   117d0:	f856 3f02 	ldr.w	r3, [r6, #2]!
   117d4:	f8c0 3002 	str.w	r3, [r0, #2]
   117d8:	88b3      	ldrh	r3, [r6, #4]
   117da:	808b      	strh	r3, [r1, #4]
   117dc:	4607      	mov	r7, r0
   117de:	462a      	mov	r2, r5
   117e0:	4641      	mov	r1, r8
   117e2:	3008      	adds	r0, #8
   117e4:	f011 ff3d 	bl	23662 <memcpy>
	pdu->last = idx;
   117e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
	pdu->len = BDADDR_SIZE + len;
   117ec:	3506      	adds	r5, #6
	return 0;
   117ee:	2000      	movs	r0, #0
	pdu->len = BDADDR_SIZE + len;
   117f0:	707d      	strb	r5, [r7, #1]
   117f2:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}
   117f6:	b002      	add	sp, #8
   117f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_INVALID_PARAM;
   117fc:	2012      	movs	r0, #18
}
   117fe:	b002      	add	sp, #8
   11800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 0;
   11804:	2000      	movs	r0, #0
}
   11806:	b002      	add	sp, #8
   11808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001180c <ll_adv_data_set>:
{
   1180c:	460a      	mov	r2, r1
	return ull_adv_data_set(adv, len, data);
   1180e:	4601      	mov	r1, r0
   11810:	4801      	ldr	r0, [pc, #4]	; (11818 <ll_adv_data_set+0xc>)
   11812:	f7ff bfb5 	b.w	11780 <ull_adv_data_set>
   11816:	bf00      	nop
   11818:	20002000 	.word	0x20002000

0001181c <ull_scan_rsp_set>:
{
   1181c:	b5f0      	push	{r4, r5, r6, r7, lr}
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   1181e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
   11822:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   11826:	b083      	sub	sp, #12
   11828:	6b9d      	ldr	r5, [r3, #56]	; 0x38
   1182a:	460e      	mov	r6, r1
   1182c:	4604      	mov	r4, r0
	return lll_adv_pdu_alloc(&lll->scan_rsp, idx);
   1182e:	f10d 0107 	add.w	r1, sp, #7
   11832:	3034      	adds	r0, #52	; 0x34
   11834:	4617      	mov	r7, r2
   11836:	f006 fc23 	bl	18080 <lll_adv_pdu_alloc>
	pdu->tx_addr = prev->tx_addr;
   1183a:	782b      	ldrb	r3, [r5, #0]
   1183c:	f3c3 1380 	ubfx	r3, r3, #6, #1
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   11840:	019b      	lsls	r3, r3, #6
	pdu->len = BDADDR_SIZE + len;
   11842:	1db2      	adds	r2, r6, #6
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   11844:	f043 0304 	orr.w	r3, r3, #4
	pdu->len = BDADDR_SIZE + len;
   11848:	7042      	strb	r2, [r0, #1]
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   1184a:	7003      	strb	r3, [r0, #0]
   1184c:	f855 3f02 	ldr.w	r3, [r5, #2]!
   11850:	f8c0 3002 	str.w	r3, [r0, #2]
   11854:	88ab      	ldrh	r3, [r5, #4]
   11856:	80c3      	strh	r3, [r0, #6]
   11858:	4639      	mov	r1, r7
   1185a:	4632      	mov	r2, r6
   1185c:	3008      	adds	r0, #8
   1185e:	f011 ff00 	bl	23662 <memcpy>
	pdu->last = idx;
   11862:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11866:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
   1186a:	2000      	movs	r0, #0
   1186c:	b003      	add	sp, #12
   1186e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00011870 <ll_adv_scan_rsp_set>:
{
   11870:	460a      	mov	r2, r1
	return ull_scan_rsp_set(adv, len, data);
   11872:	4601      	mov	r1, r0
   11874:	4801      	ldr	r0, [pc, #4]	; (1187c <ll_adv_scan_rsp_set+0xc>)
   11876:	f7ff bfd1 	b.w	1181c <ull_scan_rsp_set>
   1187a:	bf00      	nop
   1187c:	20002000 	.word	0x20002000

00011880 <ull_adv_pdu_update_addrs>:
{
   11880:	b570      	push	{r4, r5, r6, lr}
   11882:	460c      	mov	r4, r1
   11884:	4605      	mov	r5, r0
	const uint8_t *rpa = ull_filter_adva_get(adv);
   11886:	f005 fa7b 	bl	16d80 <ull_filter_adva_get>
			own_addr = ll_addr_get(pdu->tx_addr, NULL);
   1188a:	7823      	ldrb	r3, [r4, #0]
	if (!rpa || IS_ENABLED(CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN)) {
   1188c:	b308      	cbz	r0, 118d2 <ull_adv_pdu_update_addrs+0x52>
		pdu->tx_addr = 1;
   1188e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11892:	7023      	strb	r3, [r4, #0]
	if ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   11894:	7823      	ldrb	r3, [r4, #0]
   11896:	6802      	ldr	r2, [r0, #0]
   11898:	f8c4 2002 	str.w	r2, [r4, #2]
   1189c:	f003 030f 	and.w	r3, r3, #15
   118a0:	8882      	ldrh	r2, [r0, #4]
   118a2:	80e2      	strh	r2, [r4, #6]
   118a4:	2b01      	cmp	r3, #1
	return pdu->adv_ind.addr;
   118a6:	f104 0602 	add.w	r6, r4, #2
	if ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   118aa:	d001      	beq.n	118b0 <ull_adv_pdu_update_addrs+0x30>
}
   118ac:	4630      	mov	r0, r6
   118ae:	bd70      	pop	{r4, r5, r6, pc}
	rx_addr = ull_filter_tgta_get(adv);
   118b0:	4628      	mov	r0, r5
   118b2:	f005 fa93 	bl	16ddc <ull_filter_tgta_get>
	if (rx_addr) {
   118b6:	2800      	cmp	r0, #0
   118b8:	d0f8      	beq.n	118ac <ull_adv_pdu_update_addrs+0x2c>
		pdu->rx_addr = 1;
   118ba:	7822      	ldrb	r2, [r4, #0]
   118bc:	4623      	mov	r3, r4
   118be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   118c2:	f803 2b08 	strb.w	r2, [r3], #8
   118c6:	6802      	ldr	r2, [r0, #0]
   118c8:	60a2      	str	r2, [r4, #8]
   118ca:	8882      	ldrh	r2, [r0, #4]
   118cc:	809a      	strh	r2, [r3, #4]
}
   118ce:	4630      	mov	r0, r6
   118d0:	bd70      	pop	{r4, r5, r6, pc}
			own_addr = ll_addr_get(pdu->tx_addr, NULL);
   118d2:	4601      	mov	r1, r0
   118d4:	f3c3 1080 	ubfx	r0, r3, #6, #1
   118d8:	f7fc fddc 	bl	e494 <ll_addr_get>
	if (rpa) {
   118dc:	e7da      	b.n	11894 <ull_adv_pdu_update_addrs+0x14>
   118de:	bf00      	nop

000118e0 <tx_ull_dequeue>:
{
   118e0:	b410      	push	{r4}
   118e2:	e9d0 2471 	ldrd	r2, r4, [r0, #452]	; 0x1c4
   118e6:	4603      	mov	r3, r0
   118e8:	4608      	mov	r0, r1
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   118ea:	b164      	cbz	r4, 11906 <tx_ull_dequeue+0x26>
	if (conn->tx_head == conn->tx_ctrl) {
   118ec:	4294      	cmp	r4, r2
   118ee:	d027      	beq.n	11940 <tx_ull_dequeue+0x60>
		if (conn->tx_head == conn->tx_data) {
   118f0:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
   118f4:	4291      	cmp	r1, r2
   118f6:	d018      	beq.n	1192a <tx_ull_dequeue+0x4a>
		conn->tx_head = conn->tx_head->next;
   118f8:	6812      	ldr	r2, [r2, #0]
   118fa:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
		tx->next = NULL;
   118fe:	2300      	movs	r3, #0
}
   11900:	bc10      	pop	{r4}
		tx->next = NULL;
   11902:	6003      	str	r3, [r0, #0]
}
   11904:	4770      	bx	lr
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   11906:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
   1190a:	4291      	cmp	r1, r2
   1190c:	d023      	beq.n	11956 <tx_ull_dequeue+0x76>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1190e:	7911      	ldrb	r1, [r2, #4]
   11910:	f001 0103 	and.w	r1, r1, #3
   11914:	2903      	cmp	r1, #3
   11916:	d00d      	beq.n	11934 <tx_ull_dequeue+0x54>
		conn->tx_head = conn->tx_head->next;
   11918:	6812      	ldr	r2, [r2, #0]
   1191a:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
			conn->tx_ctrl = NULL;
   1191e:	2200      	movs	r2, #0
			conn->tx_ctrl_last = NULL;
   11920:	e9c3 2272 	strd	r2, r2, [r3, #456]	; 0x1c8
}
   11924:	bc10      	pop	{r4}
		tx->next = tx;
   11926:	6000      	str	r0, [r0, #0]
}
   11928:	4770      	bx	lr
   1192a:	4611      	mov	r1, r2
			conn->tx_data = conn->tx_data->next;
   1192c:	6809      	ldr	r1, [r1, #0]
   1192e:	f8c3 11d0 	str.w	r1, [r3, #464]	; 0x1d0
   11932:	e7e1      	b.n	118f8 <tx_ull_dequeue+0x18>
	    ((pdu_data_tx->llctrl.opcode !=
   11934:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   11936:	2903      	cmp	r1, #3
   11938:	d0de      	beq.n	118f8 <tx_ull_dequeue+0x18>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1193a:	290a      	cmp	r1, #10
   1193c:	d1ec      	bne.n	11918 <tx_ull_dequeue+0x38>
   1193e:	e7db      	b.n	118f8 <tx_ull_dequeue+0x18>
   11940:	f8d3 11cc 	ldr.w	r1, [r3, #460]	; 0x1cc
		conn->tx_head = conn->tx_head->next;
   11944:	6812      	ldr	r2, [r2, #0]
   11946:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   1194a:	42a1      	cmp	r1, r4
			conn->tx_ctrl = conn->tx_head;
   1194c:	bf18      	it	ne
   1194e:	f8c3 21c8 	strne.w	r2, [r3, #456]	; 0x1c8
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   11952:	d1e7      	bne.n	11924 <tx_ull_dequeue+0x44>
   11954:	e7e3      	b.n	1191e <tx_ull_dequeue+0x3e>
	if (conn->tx_head == conn->tx_ctrl) {
   11956:	2a00      	cmp	r2, #0
   11958:	d1e8      	bne.n	1192c <tx_ull_dequeue+0x4c>
   1195a:	f8d3 11cc 	ldr.w	r1, [r3, #460]	; 0x1cc
   1195e:	4614      	mov	r4, r2
   11960:	e7f0      	b.n	11944 <tx_ull_dequeue+0x64>
   11962:	bf00      	nop

00011964 <init_reset>:
{
   11964:	b538      	push	{r3, r4, r5, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
   11966:	4813      	ldr	r0, [pc, #76]	; (119b4 <init_reset+0x50>)
   11968:	4b13      	ldr	r3, [pc, #76]	; (119b8 <init_reset+0x54>)
   1196a:	2201      	movs	r2, #1
   1196c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   11970:	f7fb f94c 	bl	cc0c <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONFIG_BT_CTLR_TX_BUFFERS,
   11974:	4b11      	ldr	r3, [pc, #68]	; (119bc <init_reset+0x58>)
   11976:	2203      	movs	r2, #3
   11978:	1d18      	adds	r0, r3, #4
   1197a:	2124      	movs	r1, #36	; 0x24
   1197c:	f7fb f946 	bl	cc0c <mem_init>
	mem_init(mem_conn_tx_ctrl.pool, CONN_TX_CTRL_BUF_SIZE,
   11980:	4b0f      	ldr	r3, [pc, #60]	; (119c0 <init_reset+0x5c>)
   11982:	2204      	movs	r2, #4
   11984:	1898      	adds	r0, r3, r2
   11986:	212c      	movs	r1, #44	; 0x2c
   11988:	f7fb f940 	bl	cc0c <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
   1198c:	4b0d      	ldr	r3, [pc, #52]	; (119c4 <init_reset+0x60>)
   1198e:	2207      	movs	r2, #7
   11990:	1d18      	adds	r0, r3, #4
   11992:	2108      	movs	r1, #8
   11994:	f7fb f93a 	bl	cc0c <mem_init>
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   11998:	4b0b      	ldr	r3, [pc, #44]	; (119c8 <init_reset+0x64>)
	default_phy_tx |= PHY_2M;
   1199a:	490c      	ldr	r1, [pc, #48]	; (119cc <init_reset+0x68>)
	default_phy_rx |= PHY_2M;
   1199c:	4a0c      	ldr	r2, [pc, #48]	; (119d0 <init_reset+0x6c>)
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   1199e:	480d      	ldr	r0, [pc, #52]	; (119d4 <init_reset+0x70>)
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   119a0:	251b      	movs	r5, #27
   119a2:	801d      	strh	r5, [r3, #0]
	default_phy_tx |= PHY_2M;
   119a4:	2303      	movs	r3, #3
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   119a6:	f44f 74a4 	mov.w	r4, #328	; 0x148
	default_phy_tx |= PHY_2M;
   119aa:	700b      	strb	r3, [r1, #0]
	default_phy_rx |= PHY_2M;
   119ac:	7013      	strb	r3, [r2, #0]
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   119ae:	8004      	strh	r4, [r0, #0]
}
   119b0:	2000      	movs	r0, #0
   119b2:	bd38      	pop	{r3, r4, r5, pc}
   119b4:	20001078 	.word	0x20001078
   119b8:	20002070 	.word	0x20002070
   119bc:	20002088 	.word	0x20002088
   119c0:	200020f8 	.word	0x200020f8
   119c4:	200021ac 	.word	0x200021ac
   119c8:	20002c38 	.word	0x20002c38
   119cc:	200031bb 	.word	0x200031bb
   119d0:	200031ba 	.word	0x200031ba
   119d4:	20002c3a 	.word	0x20002c3a

000119d8 <ctrl_tx_pause_enqueue>:
{
   119d8:	b538      	push	{r3, r4, r5, lr}
   119da:	4604      	mov	r4, r0
   119dc:	e9d0 3071 	ldrd	r3, r0, [r0, #452]	; 0x1c4
   119e0:	460d      	mov	r5, r1
	if (
   119e2:	b11b      	cbz	r3, 119ec <ctrl_tx_pause_enqueue+0x14>
	    !conn->llcp_enc.pause_tx &&
   119e4:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   119e8:	0789      	lsls	r1, r1, #30
   119ea:	d50b      	bpl.n	11a04 <ctrl_tx_pause_enqueue+0x2c>
		if (!conn->tx_ctrl) {
   119ec:	b1e0      	cbz	r0, 11a28 <ctrl_tx_pause_enqueue+0x50>
			LL_ASSERT(!pause);
   119ee:	bb2a      	cbnz	r2, 11a3c <ctrl_tx_pause_enqueue+0x64>
	tx->next = conn->tx_ctrl_last->next;
   119f0:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   119f4:	681a      	ldr	r2, [r3, #0]
   119f6:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   119f8:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
   119fa:	682b      	ldr	r3, [r5, #0]
   119fc:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
	if (!tx->next) {
   11a00:	b17b      	cbz	r3, 11a22 <ctrl_tx_pause_enqueue+0x4a>
}
   11a02:	bd38      	pop	{r3, r4, r5, pc}
	    !conn->llcp_phy.pause_tx &&
   11a04:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   11a08:	07c9      	lsls	r1, r1, #31
   11a0a:	d4ef      	bmi.n	119ec <ctrl_tx_pause_enqueue+0x14>
		if (conn->tx_head == conn->tx_data) {
   11a0c:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   11a10:	428b      	cmp	r3, r1
   11a12:	d021      	beq.n	11a58 <ctrl_tx_pause_enqueue+0x80>
		} else if (!conn->tx_ctrl) {
   11a14:	2800      	cmp	r0, #0
   11a16:	d02e      	beq.n	11a76 <ctrl_tx_pause_enqueue+0x9e>
			LL_ASSERT(!pause);
   11a18:	2a00      	cmp	r2, #0
   11a1a:	d0e9      	beq.n	119f0 <ctrl_tx_pause_enqueue+0x18>
   11a1c:	f640 0359 	movw	r3, #2137	; 0x859
   11a20:	e00e      	b.n	11a40 <ctrl_tx_pause_enqueue+0x68>
		conn->tx_data_last = tx;
   11a22:	f8c4 51d4 	str.w	r5, [r4, #468]	; 0x1d4
}
   11a26:	bd38      	pop	{r3, r4, r5, pc}
			tx->next = conn->tx_head;
   11a28:	602b      	str	r3, [r5, #0]
			conn->tx_head = tx;
   11a2a:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
			if (!pause) {
   11a2e:	2a00      	cmp	r2, #0
   11a30:	d1e6      	bne.n	11a00 <ctrl_tx_pause_enqueue+0x28>
				conn->tx_ctrl_last = tx;
   11a32:	e9c4 5572 	strd	r5, r5, [r4, #456]	; 0x1c8
	if (!tx->next) {
   11a36:	2b00      	cmp	r3, #0
   11a38:	d1e3      	bne.n	11a02 <ctrl_tx_pause_enqueue+0x2a>
   11a3a:	e7f2      	b.n	11a22 <ctrl_tx_pause_enqueue+0x4a>
			LL_ASSERT(!pause);
   11a3c:	f640 036b 	movw	r3, #2155	; 0x86b
   11a40:	4a15      	ldr	r2, [pc, #84]	; (11a98 <ctrl_tx_pause_enqueue+0xc0>)
   11a42:	4916      	ldr	r1, [pc, #88]	; (11a9c <ctrl_tx_pause_enqueue+0xc4>)
   11a44:	4816      	ldr	r0, [pc, #88]	; (11aa0 <ctrl_tx_pause_enqueue+0xc8>)
   11a46:	f00c fc9d 	bl	1e384 <printk>
   11a4a:	4040      	eors	r0, r0
   11a4c:	f380 8811 	msr	BASEPRI, r0
   11a50:	f04f 0003 	mov.w	r0, #3
   11a54:	df02      	svc	2
   11a56:	e7cb      	b.n	119f0 <ctrl_tx_pause_enqueue+0x18>
			conn->tx_data = conn->tx_data->next;
   11a58:	6819      	ldr	r1, [r3, #0]
   11a5a:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   11a5e:	2800      	cmp	r0, #0
   11a60:	d1da      	bne.n	11a18 <ctrl_tx_pause_enqueue+0x40>
			tx->next = conn->tx_head->next;
   11a62:	6819      	ldr	r1, [r3, #0]
   11a64:	6029      	str	r1, [r5, #0]
			conn->tx_head->next = tx;
   11a66:	601d      	str	r5, [r3, #0]
			if (!pause) {
   11a68:	b90a      	cbnz	r2, 11a6e <ctrl_tx_pause_enqueue+0x96>
				conn->tx_ctrl_last = tx;
   11a6a:	e9c4 5572 	strd	r5, r5, [r4, #456]	; 0x1c8
   11a6e:	682b      	ldr	r3, [r5, #0]
	if (!tx->next) {
   11a70:	2b00      	cmp	r3, #0
   11a72:	d1c6      	bne.n	11a02 <ctrl_tx_pause_enqueue+0x2a>
   11a74:	e7d5      	b.n	11a22 <ctrl_tx_pause_enqueue+0x4a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   11a76:	7919      	ldrb	r1, [r3, #4]
   11a78:	f001 0103 	and.w	r1, r1, #3
   11a7c:	2903      	cmp	r1, #3
   11a7e:	d004      	beq.n	11a8a <ctrl_tx_pause_enqueue+0xb2>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   11a80:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
			LL_ASSERT(!pause);
   11a84:	2a00      	cmp	r2, #0
   11a86:	d0b3      	beq.n	119f0 <ctrl_tx_pause_enqueue+0x18>
   11a88:	e7c8      	b.n	11a1c <ctrl_tx_pause_enqueue+0x44>
	    ((pdu_data_tx->llctrl.opcode !=
   11a8a:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   11a8c:	2903      	cmp	r1, #3
   11a8e:	d0e8      	beq.n	11a62 <ctrl_tx_pause_enqueue+0x8a>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   11a90:	290a      	cmp	r1, #10
   11a92:	d1f5      	bne.n	11a80 <ctrl_tx_pause_enqueue+0xa8>
   11a94:	e7e5      	b.n	11a62 <ctrl_tx_pause_enqueue+0x8a>
   11a96:	bf00      	nop
   11a98:	00024874 	.word	0x00024874
   11a9c:	000248b4 	.word	0x000248b4
   11aa0:	00024334 	.word	0x00024334

00011aa4 <tx_lll_flush>:
{
   11aa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct ll_conn *conn = (void *)HDR_LLL2EVT(param);
   11aa8:	f8d0 8000 	ldr.w	r8, [r0]
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   11aac:	4934      	ldr	r1, [pc, #208]	; (11b80 <tx_lll_flush+0xdc>)
{
   11aae:	b083      	sub	sp, #12
   11ab0:	4605      	mov	r5, r0
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   11ab2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   11ab6:	4640      	mov	r0, r8
   11ab8:	f7fb f8fc 	bl	ccb4 <mem_index_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   11abc:	f105 0648 	add.w	r6, r5, #72	; 0x48
	lll_conn_flush(handle, lll);
   11ac0:	4629      	mov	r1, r5
   11ac2:	f006 ff5b 	bl	1897c <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   11ac6:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
   11ac8:	4631      	mov	r1, r6
   11aca:	aa01      	add	r2, sp, #4
   11acc:	f7fb f930 	bl	cd30 <memq_dequeue>
	while (link) {
   11ad0:	b328      	cbz	r0, 11b1e <tx_lll_flush+0x7a>
   11ad2:	4c2c      	ldr	r4, [pc, #176]	; (11b84 <tx_lll_flush+0xe0>)
		lll_tx->handle = 0xFFFF;
   11ad4:	f64f 77ff 	movw	r7, #65535	; 0xffff
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   11ad8:	f104 0904 	add.w	r9, r4, #4
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   11adc:	78e1      	ldrb	r1, [r4, #3]
	if (last == count) {
   11ade:	f894 c001 	ldrb.w	ip, [r4, #1]
   11ae2:	78a2      	ldrb	r2, [r4, #2]
	last = last + 1;
   11ae4:	1c4b      	adds	r3, r1, #1
   11ae6:	b2db      	uxtb	r3, r3
		last = 0U;
   11ae8:	459c      	cmp	ip, r3
   11aea:	bf08      	it	eq
   11aec:	2300      	moveq	r3, #0
	if (last == first) {
   11aee:	429a      	cmp	r2, r3
   11af0:	d035      	beq.n	11b5e <tx_lll_flush+0xba>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   11af2:	7822      	ldrb	r2, [r4, #0]
   11af4:	fb12 f201 	smulbb	r2, r2, r1
		LL_ASSERT(lll_tx);
   11af8:	eb19 0c02 	adds.w	ip, r9, r2
   11afc:	d02f      	beq.n	11b5e <tx_lll_flush+0xba>
		lll_tx->node = tx;
   11afe:	9901      	ldr	r1, [sp, #4]
		lll_tx->handle = 0xFFFF;
   11b00:	f829 7002 	strh.w	r7, [r9, r2]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   11b04:	680a      	ldr	r2, [r1, #0]
		lll_tx->node = tx;
   11b06:	f8cc 1004 	str.w	r1, [ip, #4]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   11b0a:	6002      	str	r2, [r0, #0]
		tx->next = link;
   11b0c:	6008      	str	r0, [r1, #0]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   11b0e:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
	*last = idx; /* Commit: Update write index */
   11b10:	70e3      	strb	r3, [r4, #3]
   11b12:	aa01      	add	r2, sp, #4
   11b14:	4631      	mov	r1, r6
   11b16:	f7fb f90b 	bl	cd30 <memq_dequeue>
	while (link) {
   11b1a:	2800      	cmp	r0, #0
   11b1c:	d1de      	bne.n	11adc <tx_lll_flush+0x38>
	LL_ASSERT(rx->hdr.link);
   11b1e:	f8d8 0144 	ldr.w	r0, [r8, #324]	; 0x144
	rx = (void *)&conn->llcp_terminate.node_rx;
   11b22:	f508 74a2 	add.w	r4, r8, #324	; 0x144
	LL_ASSERT(rx->hdr.link);
   11b26:	b150      	cbz	r0, 11b3e <tx_lll_flush+0x9a>
	rx->hdr.link = NULL;
   11b28:	2300      	movs	r3, #0
	ull_rx_put(link, rx);
   11b2a:	4621      	mov	r1, r4
	rx->hdr.link = NULL;
   11b2c:	f8c8 3144 	str.w	r3, [r8, #324]	; 0x144
	ull_rx_put(link, rx);
   11b30:	f7ff f930 	bl	10d94 <ull_rx_put>
	ull_rx_sched();
   11b34:	f7ff f93e 	bl	10db4 <ull_rx_sched>
}
   11b38:	b003      	add	sp, #12
   11b3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(rx->hdr.link);
   11b3e:	4a12      	ldr	r2, [pc, #72]	; (11b88 <tx_lll_flush+0xe4>)
   11b40:	4912      	ldr	r1, [pc, #72]	; (11b8c <tx_lll_flush+0xe8>)
   11b42:	4813      	ldr	r0, [pc, #76]	; (11b90 <tx_lll_flush+0xec>)
   11b44:	f240 73c6 	movw	r3, #1990	; 0x7c6
   11b48:	f00c fc1c 	bl	1e384 <printk>
   11b4c:	4040      	eors	r0, r0
   11b4e:	f380 8811 	msr	BASEPRI, r0
   11b52:	f04f 0003 	mov.w	r0, #3
   11b56:	df02      	svc	2
   11b58:	f8d8 0144 	ldr.w	r0, [r8, #324]	; 0x144
   11b5c:	e7e4      	b.n	11b28 <tx_lll_flush+0x84>
		LL_ASSERT(lll_tx);
   11b5e:	4a0a      	ldr	r2, [pc, #40]	; (11b88 <tx_lll_flush+0xe4>)
   11b60:	490c      	ldr	r1, [pc, #48]	; (11b94 <tx_lll_flush+0xf0>)
   11b62:	480b      	ldr	r0, [pc, #44]	; (11b90 <tx_lll_flush+0xec>)
   11b64:	f240 73b2 	movw	r3, #1970	; 0x7b2
   11b68:	f00c fc0c 	bl	1e384 <printk>
   11b6c:	4040      	eors	r0, r0
   11b6e:	f380 8811 	msr	BASEPRI, r0
   11b72:	f04f 0003 	mov.w	r0, #3
   11b76:	df02      	svc	2
		lll_tx->handle = 0xFFFF;
   11b78:	2300      	movs	r3, #0
   11b7a:	801b      	strh	r3, [r3, #0]
   11b7c:	deff      	udf	#255	; 0xff
   11b7e:	bf00      	nop
   11b80:	20001078 	.word	0x20001078
   11b84:	20000478 	.word	0x20000478
   11b88:	00024874 	.word	0x00024874
   11b8c:	000248c4 	.word	0x000248c4
   11b90:	00024334 	.word	0x00024334
   11b94:	000248bc 	.word	0x000248bc

00011b98 <ticker_op_stop_cb>:
{
   11b98:	b510      	push	{r4, lr}
   11b9a:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   11b9c:	b9b0      	cbnz	r0, 11bcc <ticker_op_stop_cb+0x34>
	mfy.param = param;
   11b9e:	4b12      	ldr	r3, [pc, #72]	; (11be8 <ticker_op_stop_cb+0x50>)
	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_LLL, 0,
   11ba0:	2200      	movs	r2, #0
   11ba2:	4611      	mov	r1, r2
   11ba4:	2002      	movs	r0, #2
	mfy.param = param;
   11ba6:	609c      	str	r4, [r3, #8]
	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_LLL, 0,
   11ba8:	f7fb f926 	bl	cdf8 <mayfly_enqueue>
	LL_ASSERT(!retval);
   11bac:	b900      	cbnz	r0, 11bb0 <ticker_op_stop_cb+0x18>
}
   11bae:	bd10      	pop	{r4, pc}
	LL_ASSERT(!retval);
   11bb0:	4a0e      	ldr	r2, [pc, #56]	; (11bec <ticker_op_stop_cb+0x54>)
   11bb2:	490f      	ldr	r1, [pc, #60]	; (11bf0 <ticker_op_stop_cb+0x58>)
   11bb4:	480f      	ldr	r0, [pc, #60]	; (11bf4 <ticker_op_stop_cb+0x5c>)
   11bb6:	f240 7321 	movw	r3, #1825	; 0x721
   11bba:	f00c fbe3 	bl	1e384 <printk>
   11bbe:	4040      	eors	r0, r0
   11bc0:	f380 8811 	msr	BASEPRI, r0
   11bc4:	f04f 0003 	mov.w	r0, #3
   11bc8:	df02      	svc	2
}
   11bca:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   11bcc:	4a07      	ldr	r2, [pc, #28]	; (11bec <ticker_op_stop_cb+0x54>)
   11bce:	490a      	ldr	r1, [pc, #40]	; (11bf8 <ticker_op_stop_cb+0x60>)
   11bd0:	4808      	ldr	r0, [pc, #32]	; (11bf4 <ticker_op_stop_cb+0x5c>)
   11bd2:	f240 731a 	movw	r3, #1818	; 0x71a
   11bd6:	f00c fbd5 	bl	1e384 <printk>
   11bda:	4040      	eors	r0, r0
   11bdc:	f380 8811 	msr	BASEPRI, r0
   11be0:	f04f 0003 	mov.w	r0, #3
   11be4:	df02      	svc	2
   11be6:	e7da      	b.n	11b9e <ticker_op_stop_cb+0x6>
   11be8:	200004f0 	.word	0x200004f0
   11bec:	00024874 	.word	0x00024874
   11bf0:	00024600 	.word	0x00024600
   11bf4:	00024334 	.word	0x00024334
   11bf8:	000248d4 	.word	0x000248d4

00011bfc <ticker_start_conn_op_cb>:
{
   11bfc:	b510      	push	{r4, lr}
   11bfe:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   11c00:	b990      	cbnz	r0, 11c28 <ticker_start_conn_op_cb+0x2c>
	p = ull_update_unmark(param);
   11c02:	4620      	mov	r0, r4
   11c04:	f7ff f800 	bl	10c08 <ull_update_unmark>
	LL_ASSERT(p == param);
   11c08:	4284      	cmp	r4, r0
   11c0a:	d00c      	beq.n	11c26 <ticker_start_conn_op_cb+0x2a>
   11c0c:	4a0d      	ldr	r2, [pc, #52]	; (11c44 <ticker_start_conn_op_cb+0x48>)
   11c0e:	490e      	ldr	r1, [pc, #56]	; (11c48 <ticker_start_conn_op_cb+0x4c>)
   11c10:	480e      	ldr	r0, [pc, #56]	; (11c4c <ticker_start_conn_op_cb+0x50>)
   11c12:	f240 7311 	movw	r3, #1809	; 0x711
   11c16:	f00c fbb5 	bl	1e384 <printk>
   11c1a:	4040      	eors	r0, r0
   11c1c:	f380 8811 	msr	BASEPRI, r0
   11c20:	f04f 0003 	mov.w	r0, #3
   11c24:	df02      	svc	2
}
   11c26:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   11c28:	4a06      	ldr	r2, [pc, #24]	; (11c44 <ticker_start_conn_op_cb+0x48>)
   11c2a:	4909      	ldr	r1, [pc, #36]	; (11c50 <ticker_start_conn_op_cb+0x54>)
   11c2c:	4807      	ldr	r0, [pc, #28]	; (11c4c <ticker_start_conn_op_cb+0x50>)
   11c2e:	f240 730e 	movw	r3, #1806	; 0x70e
   11c32:	f00c fba7 	bl	1e384 <printk>
   11c36:	4040      	eors	r0, r0
   11c38:	f380 8811 	msr	BASEPRI, r0
   11c3c:	f04f 0003 	mov.w	r0, #3
   11c40:	df02      	svc	2
   11c42:	e7de      	b.n	11c02 <ticker_start_conn_op_cb+0x6>
   11c44:	00024874 	.word	0x00024874
   11c48:	000248e0 	.word	0x000248e0
   11c4c:	00024334 	.word	0x00024334
   11c50:	000248d4 	.word	0x000248d4

00011c54 <ticker_stop_conn_op_cb>:
{
   11c54:	b510      	push	{r4, lr}
   11c56:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   11c58:	b990      	cbnz	r0, 11c80 <ticker_stop_conn_op_cb+0x2c>
	p = ull_update_mark(param);
   11c5a:	4620      	mov	r0, r4
   11c5c:	f7fe ffc8 	bl	10bf0 <ull_update_mark>
	LL_ASSERT(p == param);
   11c60:	4284      	cmp	r4, r0
   11c62:	d00c      	beq.n	11c7e <ticker_stop_conn_op_cb+0x2a>
   11c64:	4a0d      	ldr	r2, [pc, #52]	; (11c9c <ticker_stop_conn_op_cb+0x48>)
   11c66:	490e      	ldr	r1, [pc, #56]	; (11ca0 <ticker_stop_conn_op_cb+0x4c>)
   11c68:	480e      	ldr	r0, [pc, #56]	; (11ca4 <ticker_stop_conn_op_cb+0x50>)
   11c6a:	f240 7307 	movw	r3, #1799	; 0x707
   11c6e:	f00c fb89 	bl	1e384 <printk>
   11c72:	4040      	eors	r0, r0
   11c74:	f380 8811 	msr	BASEPRI, r0
   11c78:	f04f 0003 	mov.w	r0, #3
   11c7c:	df02      	svc	2
}
   11c7e:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   11c80:	4a06      	ldr	r2, [pc, #24]	; (11c9c <ticker_stop_conn_op_cb+0x48>)
   11c82:	4909      	ldr	r1, [pc, #36]	; (11ca8 <ticker_stop_conn_op_cb+0x54>)
   11c84:	4807      	ldr	r0, [pc, #28]	; (11ca4 <ticker_stop_conn_op_cb+0x50>)
   11c86:	f240 7304 	movw	r3, #1796	; 0x704
   11c8a:	f00c fb7b 	bl	1e384 <printk>
   11c8e:	4040      	eors	r0, r0
   11c90:	f380 8811 	msr	BASEPRI, r0
   11c94:	f04f 0003 	mov.w	r0, #3
   11c98:	df02      	svc	2
   11c9a:	e7de      	b.n	11c5a <ticker_stop_conn_op_cb+0x6>
   11c9c:	00024874 	.word	0x00024874
   11ca0:	000248e0 	.word	0x000248e0
   11ca4:	00024334 	.word	0x00024334
   11ca8:	000248d4 	.word	0x000248d4

00011cac <ticker_update_conn_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   11cac:	b900      	cbnz	r0, 11cb0 <ticker_update_conn_op_cb+0x4>
   11cae:	4770      	bx	lr
{
   11cb0:	b510      	push	{r4, lr}
   11cb2:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   11cb4:	f7fe ffb4 	bl	10c20 <ull_update_mark_get>
   11cb8:	4284      	cmp	r4, r0
   11cba:	d010      	beq.n	11cde <ticker_update_conn_op_cb+0x32>
   11cbc:	f7fe ff92 	bl	10be4 <ull_disable_mark_get>
   11cc0:	4284      	cmp	r4, r0
   11cc2:	d00c      	beq.n	11cde <ticker_update_conn_op_cb+0x32>
   11cc4:	4a06      	ldr	r2, [pc, #24]	; (11ce0 <ticker_update_conn_op_cb+0x34>)
   11cc6:	4907      	ldr	r1, [pc, #28]	; (11ce4 <ticker_update_conn_op_cb+0x38>)
   11cc8:	4807      	ldr	r0, [pc, #28]	; (11ce8 <ticker_update_conn_op_cb+0x3c>)
   11cca:	f240 63fb 	movw	r3, #1787	; 0x6fb
   11cce:	f00c fb59 	bl	1e384 <printk>
   11cd2:	4040      	eors	r0, r0
   11cd4:	f380 8811 	msr	BASEPRI, r0
   11cd8:	f04f 0003 	mov.w	r0, #3
   11cdc:	df02      	svc	2
}
   11cde:	bd10      	pop	{r4, pc}
   11ce0:	00024874 	.word	0x00024874
   11ce4:	000248ec 	.word	0x000248ec
   11ce8:	00024334 	.word	0x00024334

00011cec <reject_ext_ind_send>:
}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ) || defined(CONFIG_BT_CTLR_PHY)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
			       uint8_t reject_opcode, uint8_t error_code)
{
   11cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11cf0:	4604      	mov	r4, r0
	if (conn->common.txn_lock) {
   11cf2:	f890 00d8 	ldrb.w	r0, [r0, #216]	; 0xd8
{
   11cf6:	460d      	mov	r5, r1
	if (conn->common.txn_lock) {
   11cf8:	0781      	lsls	r1, r0, #30
   11cfa:	d433      	bmi.n	11d64 <reject_ext_ind_send+0x78>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   11cfc:	4836      	ldr	r0, [pc, #216]	; (11dd8 <reject_ext_ind_send+0xec>)
   11cfe:	4690      	mov	r8, r2
   11d00:	461f      	mov	r7, r3
   11d02:	f7fa ffa3 	bl	cc4c <mem_acquire>
	if (!tx) {
   11d06:	2800      	cmp	r0, #0
   11d08:	d047      	beq.n	11d9a <reject_ext_ind_send+0xae>
	conn->common.txn_lock = 1U;
   11d0a:	f894 10d8 	ldrb.w	r1, [r4, #216]	; 0xd8
	if (!tx) {
		return err;
	}

	pdu_ctrl_tx = (void *)tx->pdu;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11d0e:	7906      	ldrb	r6, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   11d10:	2303      	movs	r3, #3
	conn->common.txn_lock = 1U;
   11d12:	f041 0102 	orr.w	r1, r1, #2
   11d16:	f884 10d8 	strb.w	r1, [r4, #216]	; 0xd8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   11d1a:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
   11d1c:	f8d4 11c4 	ldr.w	r1, [r4, #452]	; 0x1c4
		sizeof(struct pdu_data_llctrl_reject_ext_ind);
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
   11d20:	f880 8008 	strb.w	r8, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11d24:	ea46 0203 	orr.w	r2, r6, r3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   11d28:	2311      	movs	r3, #17
   11d2a:	f8d4 61c8 	ldr.w	r6, [r4, #456]	; 0x1c8
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
   11d2e:	7247      	strb	r7, [r0, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11d30:	7102      	strb	r2, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   11d32:	71c3      	strb	r3, [r0, #7]
	if (
   11d34:	b1d9      	cbz	r1, 11d6e <reject_ext_ind_send+0x82>
	    !conn->llcp_enc.pause_tx &&
   11d36:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
	    conn->tx_head &&
   11d3a:	079a      	lsls	r2, r3, #30
   11d3c:	d417      	bmi.n	11d6e <reject_ext_ind_send+0x82>
	    !conn->llcp_phy.pause_tx &&
   11d3e:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   11d42:	07db      	lsls	r3, r3, #31
   11d44:	d413      	bmi.n	11d6e <reject_ext_ind_send+0x82>
		if (conn->tx_head == conn->tx_data) {
   11d46:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
   11d4a:	4299      	cmp	r1, r3
   11d4c:	d028      	beq.n	11da0 <reject_ext_ind_send+0xb4>
		} else if (!conn->tx_ctrl) {
   11d4e:	2e00      	cmp	r6, #0
   11d50:	d034      	beq.n	11dbc <reject_ext_ind_send+0xd0>
   11d52:	f8d4 11cc 	ldr.w	r1, [r4, #460]	; 0x1cc
	tx->next = conn->tx_ctrl_last->next;
   11d56:	680b      	ldr	r3, [r1, #0]
   11d58:	6003      	str	r3, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   11d5a:	6008      	str	r0, [r1, #0]
	if (!tx->next) {
   11d5c:	6801      	ldr	r1, [r0, #0]
	conn->tx_ctrl_last = tx;
   11d5e:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   11d62:	b179      	cbz	r1, 11d84 <reject_ext_ind_send+0x98>

	ctrl_tx_enqueue(conn, tx);

	/* Mark for buffer for release */
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   11d64:	2301      	movs	r3, #1
   11d66:	712b      	strb	r3, [r5, #4]

	return 0;
   11d68:	2000      	movs	r0, #0
}
   11d6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!conn->tx_ctrl) {
   11d6e:	b166      	cbz	r6, 11d8a <reject_ext_ind_send+0x9e>
	tx->next = conn->tx_ctrl_last->next;
   11d70:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   11d74:	681a      	ldr	r2, [r3, #0]
   11d76:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   11d78:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   11d7a:	6801      	ldr	r1, [r0, #0]
   11d7c:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   11d80:	2900      	cmp	r1, #0
   11d82:	d1ef      	bne.n	11d64 <reject_ext_ind_send+0x78>
		conn->tx_data_last = tx;
   11d84:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   11d88:	e7ec      	b.n	11d64 <reject_ext_ind_send+0x78>
			tx->next = conn->tx_head;
   11d8a:	6001      	str	r1, [r0, #0]
				conn->tx_ctrl = tx;
   11d8c:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   11d90:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   11d94:	2900      	cmp	r1, #0
   11d96:	d1e5      	bne.n	11d64 <reject_ext_ind_send+0x78>
   11d98:	e7f4      	b.n	11d84 <reject_ext_ind_send+0x98>
		*err = -ENOBUFS;
   11d9a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   11d9e:	e7e4      	b.n	11d6a <reject_ext_ind_send+0x7e>
			conn->tx_data = conn->tx_data->next;
   11da0:	680b      	ldr	r3, [r1, #0]
   11da2:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   11da6:	2e00      	cmp	r6, #0
   11da8:	d1d3      	bne.n	11d52 <reject_ext_ind_send+0x66>
			tx->next = conn->tx_head->next;
   11daa:	680b      	ldr	r3, [r1, #0]
   11dac:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   11dae:	6008      	str	r0, [r1, #0]
				conn->tx_ctrl = tx;
   11db0:	6801      	ldr	r1, [r0, #0]
				conn->tx_ctrl_last = tx;
   11db2:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
	if (!tx->next) {
   11db6:	2900      	cmp	r1, #0
   11db8:	d1d4      	bne.n	11d64 <reject_ext_ind_send+0x78>
   11dba:	e7e3      	b.n	11d84 <reject_ext_ind_send+0x98>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   11dbc:	790b      	ldrb	r3, [r1, #4]
   11dbe:	f003 0303 	and.w	r3, r3, #3
   11dc2:	2b03      	cmp	r3, #3
   11dc4:	d002      	beq.n	11dcc <reject_ext_ind_send+0xe0>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   11dc6:	f8c4 11c8 	str.w	r1, [r4, #456]	; 0x1c8
   11dca:	e7c4      	b.n	11d56 <reject_ext_ind_send+0x6a>
	    ((pdu_data_tx->llctrl.opcode !=
   11dcc:	79cb      	ldrb	r3, [r1, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   11dce:	2b03      	cmp	r3, #3
   11dd0:	d0eb      	beq.n	11daa <reject_ext_ind_send+0xbe>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   11dd2:	2b0a      	cmp	r3, #10
   11dd4:	d1f7      	bne.n	11dc6 <reject_ext_ind_send+0xda>
   11dd6:	e7e8      	b.n	11daa <reject_ext_ind_send+0xbe>
   11dd8:	200020f8 	.word	0x200020f8

00011ddc <start_enc_rsp_send>:
{
   11ddc:	b570      	push	{r4, r5, r6, lr}
   11dde:	4604      	mov	r4, r0
	if (!pdu_ctrl_tx) {
   11de0:	b179      	cbz	r1, 11e02 <start_enc_rsp_send+0x26>
	conn->lll.enc_tx = 1;
   11de2:	f890 207a 	ldrb.w	r2, [r0, #122]	; 0x7a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11de6:	780b      	ldrb	r3, [r1, #0]
	conn->lll.enc_tx = 1;
   11de8:	f042 0210 	orr.w	r2, r2, #16
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   11dec:	2601      	movs	r6, #1
	conn->lll.enc_tx = 1;
   11dee:	f880 207a 	strb.w	r2, [r0, #122]	; 0x7a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11df2:	f043 0303 	orr.w	r3, r3, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   11df6:	2506      	movs	r5, #6
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   11df8:	704e      	strb	r6, [r1, #1]
	return 0;
   11dfa:	2000      	movs	r0, #0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11dfc:	700b      	strb	r3, [r1, #0]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   11dfe:	70cd      	strb	r5, [r1, #3]
}
   11e00:	bd70      	pop	{r4, r5, r6, pc}
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   11e02:	482c      	ldr	r0, [pc, #176]	; (11eb4 <start_enc_rsp_send+0xd8>)
   11e04:	f7fa ff22 	bl	cc4c <mem_acquire>
		if (!tx) {
   11e08:	2800      	cmp	r0, #0
   11e0a:	d04f      	beq.n	11eac <start_enc_rsp_send+0xd0>
	conn->lll.enc_tx = 1;
   11e0c:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11e10:	7902      	ldrb	r2, [r0, #4]
	conn->lll.enc_tx = 1;
   11e12:	f043 0310 	orr.w	r3, r3, #16
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   11e16:	2101      	movs	r1, #1
	conn->lll.enc_tx = 1;
   11e18:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   11e1c:	7141      	strb	r1, [r0, #5]
   11e1e:	e9d4 3571 	ldrd	r3, r5, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11e22:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   11e26:	2106      	movs	r1, #6
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11e28:	7102      	strb	r2, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   11e2a:	71c1      	strb	r1, [r0, #7]
	if (
   11e2c:	b1bb      	cbz	r3, 11e5e <start_enc_rsp_send+0x82>
	    !conn->llcp_enc.pause_tx &&
   11e2e:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   11e32:	0791      	lsls	r1, r2, #30
   11e34:	d413      	bmi.n	11e5e <start_enc_rsp_send+0x82>
	    !conn->llcp_phy.pause_tx &&
   11e36:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   11e3a:	07d2      	lsls	r2, r2, #31
   11e3c:	d40f      	bmi.n	11e5e <start_enc_rsp_send+0x82>
		if (conn->tx_head == conn->tx_data) {
   11e3e:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   11e42:	4293      	cmp	r3, r2
   11e44:	d020      	beq.n	11e88 <start_enc_rsp_send+0xac>
		} else if (!conn->tx_ctrl) {
   11e46:	b1bd      	cbz	r5, 11e78 <start_enc_rsp_send+0x9c>
	tx->next = conn->tx_ctrl_last->next;
   11e48:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   11e4c:	681a      	ldr	r2, [r3, #0]
   11e4e:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   11e50:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   11e52:	6803      	ldr	r3, [r0, #0]
   11e54:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   11e58:	b153      	cbz	r3, 11e70 <start_enc_rsp_send+0x94>
	return 0;
   11e5a:	2000      	movs	r0, #0
}
   11e5c:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->tx_ctrl) {
   11e5e:	2d00      	cmp	r5, #0
   11e60:	d1f2      	bne.n	11e48 <start_enc_rsp_send+0x6c>
			tx->next = conn->tx_head;
   11e62:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   11e64:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   11e68:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   11e6c:	2b00      	cmp	r3, #0
   11e6e:	d1f4      	bne.n	11e5a <start_enc_rsp_send+0x7e>
		conn->tx_data_last = tx;
   11e70:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
	return 0;
   11e74:	4618      	mov	r0, r3
}
   11e76:	bd70      	pop	{r4, r5, r6, pc}
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   11e78:	791a      	ldrb	r2, [r3, #4]
   11e7a:	f002 0203 	and.w	r2, r2, #3
   11e7e:	2a03      	cmp	r2, #3
   11e80:	d00e      	beq.n	11ea0 <start_enc_rsp_send+0xc4>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   11e82:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
   11e86:	e7e1      	b.n	11e4c <start_enc_rsp_send+0x70>
			conn->tx_data = conn->tx_data->next;
   11e88:	681a      	ldr	r2, [r3, #0]
   11e8a:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   11e8e:	2d00      	cmp	r5, #0
   11e90:	d1da      	bne.n	11e48 <start_enc_rsp_send+0x6c>
			tx->next = conn->tx_head->next;
   11e92:	681a      	ldr	r2, [r3, #0]
   11e94:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   11e96:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   11e98:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   11e9a:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   11e9e:	e7db      	b.n	11e58 <start_enc_rsp_send+0x7c>
	    ((pdu_data_tx->llctrl.opcode !=
   11ea0:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   11ea2:	2a03      	cmp	r2, #3
   11ea4:	d0f5      	beq.n	11e92 <start_enc_rsp_send+0xb6>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   11ea6:	2a0a      	cmp	r2, #10
   11ea8:	d1eb      	bne.n	11e82 <start_enc_rsp_send+0xa6>
   11eaa:	e7f2      	b.n	11e92 <start_enc_rsp_send+0xb6>
			return -ENOBUFS;
   11eac:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   11eb0:	bd70      	pop	{r4, r5, r6, pc}
   11eb2:	bf00      	nop
   11eb4:	200020f8 	.word	0x200020f8

00011eb8 <ctrl_tx_sec_enqueue>:
	if (conn->llcp_enc.pause_tx) {
   11eb8:	f890 3166 	ldrb.w	r3, [r0, #358]	; 0x166
   11ebc:	f8d0 21c8 	ldr.w	r2, [r0, #456]	; 0x1c8
   11ec0:	079b      	lsls	r3, r3, #30
{
   11ec2:	b570      	push	{r4, r5, r6, lr}
   11ec4:	4604      	mov	r4, r0
   11ec6:	460d      	mov	r5, r1
	if (conn->llcp_enc.pause_tx) {
   11ec8:	d509      	bpl.n	11ede <ctrl_tx_sec_enqueue+0x26>
		if (!conn->tx_ctrl) {
   11eca:	2a00      	cmp	r2, #0
   11ecc:	d044      	beq.n	11f58 <ctrl_tx_sec_enqueue+0xa0>
			tx->next = conn->tx_ctrl_last->next;
   11ece:	f8d0 31cc 	ldr.w	r3, [r0, #460]	; 0x1cc
   11ed2:	681a      	ldr	r2, [r3, #0]
   11ed4:	600a      	str	r2, [r1, #0]
			conn->tx_ctrl_last->next = tx;
   11ed6:	6019      	str	r1, [r3, #0]
		if (!tx->next) {
   11ed8:	682b      	ldr	r3, [r5, #0]
   11eda:	b36b      	cbz	r3, 11f38 <ctrl_tx_sec_enqueue+0x80>
}
   11edc:	bd70      	pop	{r4, r5, r6, pc}
		if (conn->tx_head) {
   11ede:	f8d0 11c4 	ldr.w	r1, [r0, #452]	; 0x1c4
   11ee2:	b319      	cbz	r1, 11f2c <ctrl_tx_sec_enqueue+0x74>
			if ((conn->llcp_req != conn->llcp_ack) &&
   11ee4:	f890 31bf 	ldrb.w	r3, [r0, #447]	; 0x1bf
   11ee8:	f890 60e4 	ldrb.w	r6, [r0, #228]	; 0xe4
   11eec:	f890 00e5 	ldrb.w	r0, [r0, #229]	; 0xe5
   11ef0:	4286      	cmp	r6, r0
   11ef2:	f003 0301 	and.w	r3, r3, #1
   11ef6:	d003      	beq.n	11f00 <ctrl_tx_sec_enqueue+0x48>
   11ef8:	f894 00e6 	ldrb.w	r0, [r4, #230]	; 0xe6
   11efc:	2803      	cmp	r0, #3
   11efe:	d033      	beq.n	11f68 <ctrl_tx_sec_enqueue+0xb0>
	    !conn->llcp_phy.pause_tx &&
   11f00:	b9eb      	cbnz	r3, 11f3e <ctrl_tx_sec_enqueue+0x86>
		if (conn->tx_head == conn->tx_data) {
   11f02:	f8d4 01d0 	ldr.w	r0, [r4, #464]	; 0x1d0
   11f06:	4281      	cmp	r1, r0
   11f08:	d04b      	beq.n	11fa2 <ctrl_tx_sec_enqueue+0xea>
		} else if (!conn->tx_ctrl) {
   11f0a:	2a00      	cmp	r2, #0
   11f0c:	d03b      	beq.n	11f86 <ctrl_tx_sec_enqueue+0xce>
			LL_ASSERT(!pause);
   11f0e:	b1c3      	cbz	r3, 11f42 <ctrl_tx_sec_enqueue+0x8a>
   11f10:	f640 0359 	movw	r3, #2137	; 0x859
			LL_ASSERT(!pause);
   11f14:	4a32      	ldr	r2, [pc, #200]	; (11fe0 <ctrl_tx_sec_enqueue+0x128>)
   11f16:	4933      	ldr	r1, [pc, #204]	; (11fe4 <ctrl_tx_sec_enqueue+0x12c>)
   11f18:	4833      	ldr	r0, [pc, #204]	; (11fe8 <ctrl_tx_sec_enqueue+0x130>)
   11f1a:	f00c fa33 	bl	1e384 <printk>
   11f1e:	4040      	eors	r0, r0
   11f20:	f380 8811 	msr	BASEPRI, r0
   11f24:	f04f 0003 	mov.w	r0, #3
   11f28:	df02      	svc	2
   11f2a:	e00a      	b.n	11f42 <ctrl_tx_sec_enqueue+0x8a>
		if (!conn->tx_ctrl) {
   11f2c:	b94a      	cbnz	r2, 11f42 <ctrl_tx_sec_enqueue+0x8a>
			tx->next = conn->tx_head;
   11f2e:	602a      	str	r2, [r5, #0]
				conn->tx_ctrl = tx;
   11f30:	e9c0 5571 	strd	r5, r5, [r0, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   11f34:	f8c0 51cc 	str.w	r5, [r0, #460]	; 0x1cc
			conn->tx_data_last = tx;
   11f38:	f8c4 51d4 	str.w	r5, [r4, #468]	; 0x1d4
}
   11f3c:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->tx_ctrl) {
   11f3e:	2a00      	cmp	r2, #0
   11f40:	d03f      	beq.n	11fc2 <ctrl_tx_sec_enqueue+0x10a>
	tx->next = conn->tx_ctrl_last->next;
   11f42:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   11f46:	681a      	ldr	r2, [r3, #0]
   11f48:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   11f4a:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
   11f4c:	682b      	ldr	r3, [r5, #0]
   11f4e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
		if (!tx->next) {
   11f52:	2b00      	cmp	r3, #0
   11f54:	d1c2      	bne.n	11edc <ctrl_tx_sec_enqueue+0x24>
   11f56:	e7ef      	b.n	11f38 <ctrl_tx_sec_enqueue+0x80>
			tx->next = conn->tx_head;
   11f58:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
   11f5c:	600b      	str	r3, [r1, #0]
			conn->tx_head = tx;
   11f5e:	f8c4 11c4 	str.w	r1, [r4, #452]	; 0x1c4
		if (!tx->next) {
   11f62:	2b00      	cmp	r3, #0
   11f64:	d1ba      	bne.n	11edc <ctrl_tx_sec_enqueue+0x24>
   11f66:	e7e7      	b.n	11f38 <ctrl_tx_sec_enqueue+0x80>
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   11f68:	7908      	ldrb	r0, [r1, #4]
			    (conn->llcp_type == LLCP_ENCRYPTION) &&
   11f6a:	f000 0003 	and.w	r0, r0, #3
   11f6e:	2803      	cmp	r0, #3
   11f70:	d1c6      	bne.n	11f00 <ctrl_tx_sec_enqueue+0x48>
			    ((pdu_data_tx->llctrl.opcode ==
   11f72:	79c8      	ldrb	r0, [r1, #7]
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   11f74:	2803      	cmp	r0, #3
   11f76:	d001      	beq.n	11f7c <ctrl_tx_sec_enqueue+0xc4>
			      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   11f78:	280a      	cmp	r0, #10
   11f7a:	d1c1      	bne.n	11f00 <ctrl_tx_sec_enqueue+0x48>
	    !conn->llcp_phy.pause_tx &&
   11f7c:	b33b      	cbz	r3, 11fce <ctrl_tx_sec_enqueue+0x116>
		if (!conn->tx_ctrl) {
   11f7e:	b162      	cbz	r2, 11f9a <ctrl_tx_sec_enqueue+0xe2>
			LL_ASSERT(!pause);
   11f80:	f640 036b 	movw	r3, #2155	; 0x86b
   11f84:	e7c6      	b.n	11f14 <ctrl_tx_sec_enqueue+0x5c>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   11f86:	790a      	ldrb	r2, [r1, #4]
   11f88:	f002 0203 	and.w	r2, r2, #3
   11f8c:	2a03      	cmp	r2, #3
   11f8e:	d020      	beq.n	11fd2 <ctrl_tx_sec_enqueue+0x11a>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   11f90:	e9c4 1172 	strd	r1, r1, [r4, #456]	; 0x1c8
			LL_ASSERT(!pause);
   11f94:	2b00      	cmp	r3, #0
   11f96:	d0d4      	beq.n	11f42 <ctrl_tx_sec_enqueue+0x8a>
   11f98:	e7ba      	b.n	11f10 <ctrl_tx_sec_enqueue+0x58>
			tx->next = conn->tx_head;
   11f9a:	6029      	str	r1, [r5, #0]
			conn->tx_head = tx;
   11f9c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
}
   11fa0:	bd70      	pop	{r4, r5, r6, pc}
			conn->tx_data = conn->tx_data->next;
   11fa2:	6808      	ldr	r0, [r1, #0]
   11fa4:	f8c4 01d0 	str.w	r0, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   11fa8:	2a00      	cmp	r2, #0
   11faa:	d1b0      	bne.n	11f0e <ctrl_tx_sec_enqueue+0x56>
			tx->next = conn->tx_head->next;
   11fac:	680a      	ldr	r2, [r1, #0]
   11fae:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
   11fb0:	600d      	str	r5, [r1, #0]
			if (!pause) {
   11fb2:	2b00      	cmp	r3, #0
   11fb4:	d190      	bne.n	11ed8 <ctrl_tx_sec_enqueue+0x20>
				conn->tx_ctrl = tx;
   11fb6:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
   11fb8:	e9c4 5572 	strd	r5, r5, [r4, #456]	; 0x1c8
		if (!tx->next) {
   11fbc:	2b00      	cmp	r3, #0
   11fbe:	d18d      	bne.n	11edc <ctrl_tx_sec_enqueue+0x24>
   11fc0:	e7ba      	b.n	11f38 <ctrl_tx_sec_enqueue+0x80>
			tx->next = conn->tx_head;
   11fc2:	6029      	str	r1, [r5, #0]
				conn->tx_ctrl = tx;
   11fc4:	e9c4 5571 	strd	r5, r5, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   11fc8:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
}
   11fcc:	bd70      	pop	{r4, r5, r6, pc}
				pause = true;
   11fce:	2301      	movs	r3, #1
   11fd0:	e797      	b.n	11f02 <ctrl_tx_sec_enqueue+0x4a>
	    ((pdu_data_tx->llctrl.opcode !=
   11fd2:	79ca      	ldrb	r2, [r1, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   11fd4:	2a03      	cmp	r2, #3
   11fd6:	d0e9      	beq.n	11fac <ctrl_tx_sec_enqueue+0xf4>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   11fd8:	2a0a      	cmp	r2, #10
   11fda:	d1d9      	bne.n	11f90 <ctrl_tx_sec_enqueue+0xd8>
   11fdc:	e7e6      	b.n	11fac <ctrl_tx_sec_enqueue+0xf4>
   11fde:	bf00      	nop
   11fe0:	00024874 	.word	0x00024874
   11fe4:	000248b4 	.word	0x000248b4
   11fe8:	00024334 	.word	0x00024334

00011fec <event_phy_upd_ind_prep>:
{
   11fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (conn->llcp.phy_upd_ind.initiate) {
   11ff0:	f890 30e8 	ldrb.w	r3, [r0, #232]	; 0xe8
   11ff4:	f013 0201 	ands.w	r2, r3, #1
{
   11ff8:	4604      	mov	r4, r0
   11ffa:	460d      	mov	r5, r1
	if (conn->llcp.phy_upd_ind.initiate) {
   11ffc:	f040 8090 	bne.w	12120 <event_phy_upd_ind_prep+0x134>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) &
   12000:	f8b0 10ea 	ldrh.w	r1, [r0, #234]	; 0xea
   12004:	1a69      	subs	r1, r5, r1
   12006:	0409      	lsls	r1, r1, #16
   12008:	f100 80d6 	bmi.w	121b8 <event_phy_upd_ind_prep+0x1cc>
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   1200c:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
   12010:	2900      	cmp	r1, #0
   12012:	469c      	mov	ip, r3
   12014:	f2c0 80fb 	blt.w	1220e <event_phy_upd_ind_prep+0x222>
			conn->llcp_ack = conn->llcp_req;
   12018:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   1201c:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
		old_tx = lll->phy_tx;
   12020:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
		old_rx = lll->phy_rx;
   12024:	f894 8061 	ldrb.w	r8, [r4, #97]	; 0x61
		uint16_t eff_rx_time = lll->max_rx_time;
   12028:	f8b4 705e 	ldrh.w	r7, [r4, #94]	; 0x5e
		if (conn->llcp.phy_upd_ind.tx) {
   1202c:	f013 0f1c 	tst.w	r3, #28
		old_tx = lll->phy_tx;
   12030:	f002 0907 	and.w	r9, r2, #7
		old_rx = lll->phy_rx;
   12034:	f008 0807 	and.w	r8, r8, #7
		if (conn->llcp.phy_upd_ind.tx) {
   12038:	f040 80c0 	bne.w	121bc <event_phy_upd_ind_prep+0x1d0>
		uint16_t eff_tx_time = lll->max_tx_time;
   1203c:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c
		if (conn->llcp.phy_upd_ind.rx) {
   12040:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   12044:	d008      	beq.n	12058 <event_phy_upd_ind_prep+0x6c>
			lll->phy_rx = conn->llcp.phy_upd_ind.rx;
   12046:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
   1204a:	095b      	lsrs	r3, r3, #5
   1204c:	f363 0202 	bfi	r2, r3, #0, #3
   12050:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
				calc_eff_time(lll->max_rx_octets, lll->phy_rx,
   12054:	f44f 77a4 	mov.w	r7, #328	; 0x148
		rx = conn->llcp_rx;
   12058:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
		LL_ASSERT(rx && rx->hdr.link);
   1205c:	2d00      	cmp	r5, #0
   1205e:	f000 80b6 	beq.w	121ce <event_phy_upd_ind_prep+0x1e2>
   12062:	6828      	ldr	r0, [r5, #0]
   12064:	2800      	cmp	r0, #0
   12066:	f000 80b2 	beq.w	121ce <event_phy_upd_ind_prep+0x1e2>
		conn->llcp_rx = rx->hdr.link->mem;
   1206a:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   1206e:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
   12072:	6841      	ldr	r1, [r0, #4]
   12074:	f8c4 1108 	str.w	r1, [r4, #264]	; 0x108
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   12078:	f01c 0f02 	tst.w	ip, #2
   1207c:	f3c3 0102 	ubfx	r1, r3, #0, #3
   12080:	f3c2 0e02 	ubfx	lr, r2, #0, #3
   12084:	f003 0307 	and.w	r3, r3, #7
   12088:	f002 0207 	and.w	r2, r2, #7
   1208c:	d102      	bne.n	12094 <event_phy_upd_ind_prep+0xa8>
   1208e:	4599      	cmp	r9, r3
   12090:	f000 80c5 	beq.w	1221e <event_phy_upd_ind_prep+0x232>
		rx->hdr.handle = lll->handle;
   12094:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   12096:	80eb      	strh	r3, [r5, #6]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   12098:	221a      	movs	r2, #26
		upd->status = 0U;
   1209a:	2300      	movs	r3, #0
		upd->tx = lll->phy_tx;
   1209c:	7769      	strb	r1, [r5, #29]
		upd->rx = lll->phy_rx;
   1209e:	f885 e01e 	strb.w	lr, [r5, #30]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   120a2:	712a      	strb	r2, [r5, #4]
		upd->status = 0U;
   120a4:	772b      	strb	r3, [r5, #28]
		ll_rx_put(rx->hdr.link, rx);
   120a6:	4629      	mov	r1, r5
   120a8:	f7fe fce6 	bl	10a78 <ll_rx_put>
		rx = conn->llcp_rx;
   120ac:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
		LL_ASSERT(rx && rx->hdr.link);
   120b0:	2d00      	cmp	r5, #0
   120b2:	f000 809d 	beq.w	121f0 <event_phy_upd_ind_prep+0x204>
   120b6:	6828      	ldr	r0, [r5, #0]
   120b8:	2800      	cmp	r0, #0
   120ba:	f000 8099 	beq.w	121f0 <event_phy_upd_ind_prep+0x204>
		if ((eff_tx_time <= lll->max_tx_time) &&
   120be:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
		conn->llcp_rx = rx->hdr.link->mem;
   120c2:	6842      	ldr	r2, [r0, #4]
   120c4:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
		if ((eff_tx_time <= lll->max_tx_time) &&
   120c8:	42b3      	cmp	r3, r6
   120ca:	d30a      	bcc.n	120e2 <event_phy_upd_ind_prep+0xf6>
   120cc:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   120d0:	d807      	bhi.n	120e2 <event_phy_upd_ind_prep+0xf6>
		    (eff_rx_time <= lll->max_rx_time) &&
   120d2:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
		    (lll->max_tx_time <= max_tx_time) &&
   120d6:	42bb      	cmp	r3, r7
   120d8:	d303      	bcc.n	120e2 <event_phy_upd_ind_prep+0xf6>
		    (eff_rx_time <= lll->max_rx_time) &&
   120da:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   120de:	f240 80b0 	bls.w	12242 <event_phy_upd_ind_prep+0x256>
		lll->max_tx_time = eff_tx_time;
   120e2:	f8a4 605c 	strh.w	r6, [r4, #92]	; 0x5c
		lll->max_rx_time = eff_rx_time;
   120e6:	f8a4 705e 	strh.w	r7, [r4, #94]	; 0x5e
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   120ea:	7f2b      	ldrb	r3, [r5, #28]
		rx->hdr.handle = lll->handle;
   120ec:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   120ee:	80ea      	strh	r2, [r5, #6]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   120f0:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   120f4:	2103      	movs	r1, #3
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   120f6:	2209      	movs	r2, #9
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   120f8:	7129      	strb	r1, [r5, #4]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   120fa:	772b      	strb	r3, [r5, #28]
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   120fc:	776a      	strb	r2, [r5, #29]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   120fe:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
   12102:	f8b4 2058 	ldrh.w	r2, [r4, #88]	; 0x58
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   12106:	842b      	strh	r3, [r5, #32]
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   12108:	2315      	movs	r3, #21
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
   1210a:	84aa      	strh	r2, [r5, #36]	; 0x24
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   1210c:	846f      	strh	r7, [r5, #34]	; 0x22
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);
   1210e:	84ee      	strh	r6, [r5, #38]	; 0x26
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   12110:	77eb      	strb	r3, [r5, #31]
		ll_rx_put(rx->hdr.link, rx);
   12112:	4629      	mov	r1, r5
   12114:	f7fe fcb0 	bl	10a78 <ll_rx_put>
}
   12118:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		ll_rx_sched();
   1211c:	f7fe bcb6 	b.w	10a8c <ll_rx_sched>
		rx = ll_pdu_rx_alloc_peek(2);
   12120:	2002      	movs	r0, #2
   12122:	f7fe fcb9 	bl	10a98 <ll_pdu_rx_alloc_peek>
		if (!rx) {
   12126:	4607      	mov	r7, r0
   12128:	2800      	cmp	r0, #0
   1212a:	d045      	beq.n	121b8 <event_phy_upd_ind_prep+0x1cc>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1212c:	4883      	ldr	r0, [pc, #524]	; (1233c <event_phy_upd_ind_prep+0x350>)
   1212e:	f7fa fd8d 	bl	cc4c <mem_acquire>
		if (!tx) {
   12132:	4606      	mov	r6, r0
   12134:	2800      	cmp	r0, #0
   12136:	d03f      	beq.n	121b8 <event_phy_upd_ind_prep+0x1cc>
		conn->llcp.phy_upd_ind.initiate = 0U;
   12138:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   1213c:	f36f 0300 	bfc	r3, #0, #1
		if (!((conn->llcp.phy_upd_ind.tx |
   12140:	f3c3 0882 	ubfx	r8, r3, #2, #3
		       conn->llcp.phy_upd_ind.rx) & 0x07)) {
   12144:	f3c3 1242 	ubfx	r2, r3, #5, #3
		if (!((conn->llcp.phy_upd_ind.tx |
   12148:	ea58 0802 	orrs.w	r8, r8, r2
		conn->llcp.phy_upd_ind.initiate = 0U;
   1214c:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
		if (!((conn->llcp.phy_upd_ind.tx |
   12150:	b2db      	uxtb	r3, r3
   12152:	d17f      	bne.n	12254 <event_phy_upd_ind_prep+0x268>
			conn->llcp_ack = conn->llcp_req;
   12154:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
			conn->llcp.phy_upd_ind.instant = 0U;
   12158:	f8a4 80ea 	strh.w	r8, [r4, #234]	; 0xea
			if (conn->llcp.phy_upd_ind.cmd) {
   1215c:	079b      	lsls	r3, r3, #30
			conn->llcp_ack = conn->llcp_req;
   1215e:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
			if (conn->llcp.phy_upd_ind.cmd) {
   12162:	f100 80a8 	bmi.w	122b6 <event_phy_upd_ind_prep+0x2ca>
   12166:	4643      	mov	r3, r8
   12168:	4641      	mov	r1, r8
		pdu_ctrl_tx->len =
   1216a:	2205      	movs	r2, #5
   1216c:	7172      	strb	r2, [r6, #5]
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   1216e:	f886 8008 	strb.w	r8, [r6, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12172:	7932      	ldrb	r2, [r6, #4]
		ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
   12174:	7273      	strb	r3, [r6, #9]
	    conn->tx_head &&
   12176:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   1217a:	8171      	strh	r1, [r6, #10]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1217c:	f042 0203 	orr.w	r2, r2, #3
		pdu_ctrl_tx->llctrl.opcode =
   12180:	2118      	movs	r1, #24
   12182:	f8d4 01c8 	ldr.w	r0, [r4, #456]	; 0x1c8
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12186:	7132      	strb	r2, [r6, #4]
		pdu_ctrl_tx->llctrl.opcode =
   12188:	71f1      	strb	r1, [r6, #7]
	if (
   1218a:	b13b      	cbz	r3, 1219c <event_phy_upd_ind_prep+0x1b0>
	    !conn->llcp_enc.pause_tx &&
   1218c:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   12190:	0797      	lsls	r7, r2, #30
   12192:	d403      	bmi.n	1219c <event_phy_upd_ind_prep+0x1b0>
	    !conn->llcp_phy.pause_tx &&
   12194:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   12198:	07d5      	lsls	r5, r2, #31
   1219a:	d578      	bpl.n	1228e <event_phy_upd_ind_prep+0x2a2>
		if (!conn->tx_ctrl) {
   1219c:	2800      	cmp	r0, #0
   1219e:	f000 8084 	beq.w	122aa <event_phy_upd_ind_prep+0x2be>
	tx->next = conn->tx_ctrl_last->next;
   121a2:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   121a6:	681a      	ldr	r2, [r3, #0]
   121a8:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
   121aa:	601e      	str	r6, [r3, #0]
	conn->tx_ctrl_last = tx;
   121ac:	6833      	ldr	r3, [r6, #0]
   121ae:	f8c4 61cc 	str.w	r6, [r4, #460]	; 0x1cc
	if (!tx->next) {
   121b2:	b90b      	cbnz	r3, 121b8 <event_phy_upd_ind_prep+0x1cc>
		conn->tx_data_last = tx;
   121b4:	f8c4 61d4 	str.w	r6, [r4, #468]	; 0x1d4
}
   121b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			lll->phy_tx = conn->llcp.phy_upd_ind.tx;
   121bc:	f3c3 0182 	ubfx	r1, r3, #2, #3
   121c0:	f361 0202 	bfi	r2, r1, #0, #3
   121c4:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
			eff_tx_time = calc_eff_time(lll->max_tx_octets,
   121c8:	f44f 76a4 	mov.w	r6, #328	; 0x148
   121cc:	e738      	b.n	12040 <event_phy_upd_ind_prep+0x54>
		LL_ASSERT(rx && rx->hdr.link);
   121ce:	4a5c      	ldr	r2, [pc, #368]	; (12340 <event_phy_upd_ind_prep+0x354>)
   121d0:	495c      	ldr	r1, [pc, #368]	; (12344 <event_phy_upd_ind_prep+0x358>)
   121d2:	485d      	ldr	r0, [pc, #372]	; (12348 <event_phy_upd_ind_prep+0x35c>)
   121d4:	f640 7396 	movw	r3, #3990	; 0xf96
   121d8:	f00c f8d4 	bl	1e384 <printk>
   121dc:	4040      	eors	r0, r0
   121de:	f380 8811 	msr	BASEPRI, r0
   121e2:	f04f 0003 	mov.w	r0, #3
   121e6:	df02      	svc	2
   121e8:	6828      	ldr	r0, [r5, #0]
   121ea:	f894 c0e8 	ldrb.w	ip, [r4, #232]	; 0xe8
   121ee:	e73c      	b.n	1206a <event_phy_upd_ind_prep+0x7e>
		LL_ASSERT(rx && rx->hdr.link);
   121f0:	4a53      	ldr	r2, [pc, #332]	; (12340 <event_phy_upd_ind_prep+0x354>)
   121f2:	4954      	ldr	r1, [pc, #336]	; (12344 <event_phy_upd_ind_prep+0x358>)
   121f4:	4854      	ldr	r0, [pc, #336]	; (12348 <event_phy_upd_ind_prep+0x35c>)
   121f6:	f640 73c2 	movw	r3, #4034	; 0xfc2
   121fa:	f00c f8c3 	bl	1e384 <printk>
   121fe:	4040      	eors	r0, r0
   12200:	f380 8811 	msr	BASEPRI, r0
   12204:	f04f 0003 	mov.w	r0, #3
   12208:	df02      	svc	2
   1220a:	6828      	ldr	r0, [r5, #0]
   1220c:	e757      	b.n	120be <event_phy_upd_ind_prep+0xd2>
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   1220e:	f890 10d9 	ldrb.w	r1, [r0, #217]	; 0xd9
   12212:	2900      	cmp	r1, #0
   12214:	f43f af00 	beq.w	12018 <event_phy_upd_ind_prep+0x2c>
			conn->slave.llcp_type = LLCP_NONE;
   12218:	f880 20d9 	strb.w	r2, [r0, #217]	; 0xd9
   1221c:	e700      	b.n	12020 <event_phy_upd_ind_prep+0x34>
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   1221e:	4590      	cmp	r8, r2
   12220:	f47f af38 	bne.w	12094 <event_phy_upd_ind_prep+0xa8>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   12224:	2301      	movs	r3, #1
   12226:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
   12228:	4629      	mov	r1, r5
   1222a:	f7fe fc25 	bl	10a78 <ll_rx_put>
				rx = conn->llcp_rx;
   1222e:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
				LL_ASSERT(rx && rx->hdr.link);
   12232:	2d00      	cmp	r5, #0
   12234:	d06c      	beq.n	12310 <event_phy_upd_ind_prep+0x324>
   12236:	6828      	ldr	r0, [r5, #0]
   12238:	2800      	cmp	r0, #0
   1223a:	d069      	beq.n	12310 <event_phy_upd_ind_prep+0x324>
				conn->llcp_rx = rx->hdr.link->mem;
   1223c:	6843      	ldr	r3, [r0, #4]
   1223e:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   12242:	2301      	movs	r3, #1
   12244:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
   12246:	4629      	mov	r1, r5
   12248:	f7fe fc16 	bl	10a78 <ll_rx_put>
}
   1224c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			ll_rx_sched();
   12250:	f7fe bc1c 	b.w	10a8c <ll_rx_sched>
			conn->llcp.phy_upd_ind.instant = event_counter +
   12254:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
   12256:	4429      	add	r1, r5
							 lll->latency +
   12258:	3106      	adds	r1, #6
			conn->llcp.phy_upd_ind.instant = event_counter +
   1225a:	f8a4 10ea 	strh.w	r1, [r4, #234]	; 0xea
			(void)ll_pdu_rx_alloc();
   1225e:	f7fe fc39 	bl	10ad4 <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
   12262:	683b      	ldr	r3, [r7, #0]
   12264:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   12268:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
   1226a:	f8c4 7108 	str.w	r7, [r4, #264]	; 0x108
			rx = ll_pdu_rx_alloc();
   1226e:	f7fe fc31 	bl	10ad4 <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
   12272:	6803      	ldr	r3, [r0, #0]
   12274:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   12278:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
   1227a:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   1227e:	f8b4 10ea 	ldrh.w	r1, [r4, #234]	; 0xea
   12282:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
   12286:	f3c3 0882 	ubfx	r8, r3, #2, #3
   1228a:	095b      	lsrs	r3, r3, #5
   1228c:	e76d      	b.n	1216a <event_phy_upd_ind_prep+0x17e>
		if (conn->tx_head == conn->tx_data) {
   1228e:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   12292:	4293      	cmp	r3, r2
   12294:	d02f      	beq.n	122f6 <event_phy_upd_ind_prep+0x30a>
		} else if (!conn->tx_ctrl) {
   12296:	2800      	cmp	r0, #0
   12298:	d183      	bne.n	121a2 <event_phy_upd_ind_prep+0x1b6>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1229a:	791a      	ldrb	r2, [r3, #4]
   1229c:	f002 0203 	and.w	r2, r2, #3
   122a0:	2a03      	cmp	r2, #3
   122a2:	d044      	beq.n	1232e <event_phy_upd_ind_prep+0x342>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   122a4:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
   122a8:	e77d      	b.n	121a6 <event_phy_upd_ind_prep+0x1ba>
			tx->next = conn->tx_head;
   122aa:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
   122ac:	e9c4 6671 	strd	r6, r6, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   122b0:	f8c4 61cc 	str.w	r6, [r4, #460]	; 0x1cc
   122b4:	e77d      	b.n	121b2 <event_phy_upd_ind_prep+0x1c6>
				(void)ll_pdu_rx_alloc();
   122b6:	f7fe fc0d 	bl	10ad4 <ll_pdu_rx_alloc>
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   122ba:	231a      	movs	r3, #26
				rx->hdr.handle = lll->handle;
   122bc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
				upd->status = 0U;
   122be:	f887 801c 	strb.w	r8, [r7, #28]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   122c2:	713b      	strb	r3, [r7, #4]
				upd->tx = lll->phy_tx;
   122c4:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
				ll_rx_put(rx->hdr.link, rx);
   122c8:	6838      	ldr	r0, [r7, #0]
				rx->hdr.handle = lll->handle;
   122ca:	80fa      	strh	r2, [r7, #6]
				upd->tx = lll->phy_tx;
   122cc:	f3c3 0302 	ubfx	r3, r3, #0, #3
   122d0:	777b      	strb	r3, [r7, #29]
				upd->rx = lll->phy_rx;
   122d2:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   122d6:	f3c3 0302 	ubfx	r3, r3, #0, #3
   122da:	77bb      	strb	r3, [r7, #30]
				ll_rx_put(rx->hdr.link, rx);
   122dc:	4639      	mov	r1, r7
   122de:	f7fe fbcb 	bl	10a78 <ll_rx_put>
				ll_rx_sched();
   122e2:	f7fe fbd3 	bl	10a8c <ll_rx_sched>
   122e6:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   122ea:	f8b4 10ea 	ldrh.w	r1, [r4, #234]	; 0xea
   122ee:	f3c3 0882 	ubfx	r8, r3, #2, #3
   122f2:	095b      	lsrs	r3, r3, #5
   122f4:	e739      	b.n	1216a <event_phy_upd_ind_prep+0x17e>
			conn->tx_data = conn->tx_data->next;
   122f6:	681a      	ldr	r2, [r3, #0]
   122f8:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   122fc:	2800      	cmp	r0, #0
   122fe:	f47f af50 	bne.w	121a2 <event_phy_upd_ind_prep+0x1b6>
			tx->next = conn->tx_head->next;
   12302:	681a      	ldr	r2, [r3, #0]
   12304:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
   12306:	601e      	str	r6, [r3, #0]
				conn->tx_ctrl = tx;
   12308:	6833      	ldr	r3, [r6, #0]
				conn->tx_ctrl_last = tx;
   1230a:	e9c4 6672 	strd	r6, r6, [r4, #456]	; 0x1c8
   1230e:	e750      	b.n	121b2 <event_phy_upd_ind_prep+0x1c6>
				LL_ASSERT(rx && rx->hdr.link);
   12310:	4a0b      	ldr	r2, [pc, #44]	; (12340 <event_phy_upd_ind_prep+0x354>)
   12312:	490c      	ldr	r1, [pc, #48]	; (12344 <event_phy_upd_ind_prep+0x358>)
   12314:	480c      	ldr	r0, [pc, #48]	; (12348 <event_phy_upd_ind_prep+0x35c>)
   12316:	f640 73a5 	movw	r3, #4005	; 0xfa5
   1231a:	f00c f833 	bl	1e384 <printk>
   1231e:	4040      	eors	r0, r0
   12320:	f380 8811 	msr	BASEPRI, r0
   12324:	f04f 0003 	mov.w	r0, #3
   12328:	df02      	svc	2
   1232a:	6828      	ldr	r0, [r5, #0]
   1232c:	e786      	b.n	1223c <event_phy_upd_ind_prep+0x250>
	    ((pdu_data_tx->llctrl.opcode !=
   1232e:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   12330:	2a03      	cmp	r2, #3
   12332:	d0e6      	beq.n	12302 <event_phy_upd_ind_prep+0x316>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   12334:	2a0a      	cmp	r2, #10
   12336:	d1b5      	bne.n	122a4 <event_phy_upd_ind_prep+0x2b8>
   12338:	e7e3      	b.n	12302 <event_phy_upd_ind_prep+0x316>
   1233a:	bf00      	nop
   1233c:	200020f8 	.word	0x200020f8
   12340:	00024874 	.word	0x00024874
   12344:	00024940 	.word	0x00024940
   12348:	00024334 	.word	0x00024334

0001234c <ll_conn_acquire>:
	return mem_acquire(&conn_free);
   1234c:	4801      	ldr	r0, [pc, #4]	; (12354 <ll_conn_acquire+0x8>)
   1234e:	f7fa bc7d 	b.w	cc4c <mem_acquire>
   12352:	bf00      	nop
   12354:	20002070 	.word	0x20002070

00012358 <ll_conn_release>:
	mem_release(conn, &conn_free);
   12358:	4901      	ldr	r1, [pc, #4]	; (12360 <ll_conn_release+0x8>)
   1235a:	f7fa bc8d 	b.w	cc78 <mem_release>
   1235e:	bf00      	nop
   12360:	20002070 	.word	0x20002070

00012364 <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   12364:	4902      	ldr	r1, [pc, #8]	; (12370 <ll_conn_handle_get+0xc>)
   12366:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   1236a:	f7fa bca3 	b.w	ccb4 <mem_index_get>
   1236e:	bf00      	nop
   12370:	20001078 	.word	0x20001078

00012374 <ll_conn_get>:
{
   12374:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   12376:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1237a:	4801      	ldr	r0, [pc, #4]	; (12380 <ll_conn_get+0xc>)
   1237c:	f7fa bc96 	b.w	ccac <mem_get>
   12380:	20001078 	.word	0x20001078

00012384 <ll_connected_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   12384:	b958      	cbnz	r0, 1239e <ll_connected_get+0x1a>
{
   12386:	b508      	push	{r3, lr}
   12388:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1238a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1238e:	4805      	ldr	r0, [pc, #20]	; (123a4 <ll_connected_get+0x20>)
   12390:	f7fa fc8c 	bl	ccac <mem_get>
	if (conn->lll.handle != handle) {
   12394:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   12396:	b903      	cbnz	r3, 1239a <ll_connected_get+0x16>
}
   12398:	bd08      	pop	{r3, pc}
		return NULL;
   1239a:	2000      	movs	r0, #0
}
   1239c:	bd08      	pop	{r3, pc}
		return NULL;
   1239e:	2000      	movs	r0, #0
}
   123a0:	4770      	bx	lr
   123a2:	bf00      	nop
   123a4:	20001078 	.word	0x20001078

000123a8 <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
   123a8:	4801      	ldr	r0, [pc, #4]	; (123b0 <ll_tx_mem_acquire+0x8>)
   123aa:	f7fa bc4f 	b.w	cc4c <mem_acquire>
   123ae:	bf00      	nop
   123b0:	20002088 	.word	0x20002088

000123b4 <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
   123b4:	4901      	ldr	r1, [pc, #4]	; (123bc <ll_tx_mem_release+0x8>)
   123b6:	f7fa bc5f 	b.w	cc78 <mem_release>
   123ba:	bf00      	nop
   123bc:	20002088 	.word	0x20002088

000123c0 <ll_tx_mem_enqueue>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   123c0:	2800      	cmp	r0, #0
   123c2:	d13d      	bne.n	12440 <ll_tx_mem_enqueue+0x80>
{
   123c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   123c6:	4602      	mov	r2, r0
   123c8:	460d      	mov	r5, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   123ca:	481f      	ldr	r0, [pc, #124]	; (12448 <ll_tx_mem_enqueue+0x88>)
   123cc:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   123d0:	f7fa fc6c 	bl	ccac <mem_get>
	if (conn->lll.handle != handle) {
   123d4:	8d02      	ldrh	r2, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   123d6:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   123d8:	b9e2      	cbnz	r2, 12414 <ll_tx_mem_enqueue+0x54>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
   123da:	491c      	ldr	r1, [pc, #112]	; (1244c <ll_tx_mem_enqueue+0x8c>)
   123dc:	78cf      	ldrb	r7, [r1, #3]
	if (last == count) {
   123de:	784e      	ldrb	r6, [r1, #1]
   123e0:	7888      	ldrb	r0, [r1, #2]
	last = last + 1;
   123e2:	1c7b      	adds	r3, r7, #1
   123e4:	b2db      	uxtb	r3, r3
		last = 0U;
   123e6:	429e      	cmp	r6, r3
   123e8:	bf08      	it	eq
   123ea:	2300      	moveq	r3, #0
	if (last == first) {
   123ec:	4298      	cmp	r0, r3
   123ee:	d014      	beq.n	1241a <ll_tx_mem_enqueue+0x5a>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   123f0:	460e      	mov	r6, r1
   123f2:	f816 0b04 	ldrb.w	r0, [r6], #4
   123f6:	fb10 f007 	smulbb	r0, r0, r7
	if (!lll_tx) {
   123fa:	1837      	adds	r7, r6, r0
   123fc:	d00d      	beq.n	1241a <ll_tx_mem_enqueue+0x5a>
	lll_tx->handle = handle;
   123fe:	5232      	strh	r2, [r6, r0]
	lll_tx->node = tx;
   12400:	607d      	str	r5, [r7, #4]
   12402:	7c20      	ldrb	r0, [r4, #16]
	*last = idx; /* Commit: Update write index */
   12404:	70cb      	strb	r3, [r1, #3]
	if (ull_ref_get(&conn->ull)) {
   12406:	b958      	cbnz	r0, 12420 <ll_tx_mem_enqueue+0x60>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   12408:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1240c:	2b00      	cmp	r3, #0
   1240e:	db11      	blt.n	12434 <ll_tx_mem_enqueue+0x74>
	return 0;
   12410:	2000      	movs	r0, #0
}
   12412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   12414:	f06f 0015 	mvn.w	r0, #21
}
   12418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   1241a:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   1241e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		mfy.param = conn;
   12420:	4b0b      	ldr	r3, [pc, #44]	; (12450 <ll_tx_mem_enqueue+0x90>)
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   12422:	2101      	movs	r1, #1
   12424:	2003      	movs	r0, #3
		mfy.param = conn;
   12426:	609c      	str	r4, [r3, #8]
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   12428:	f7fa fce6 	bl	cdf8 <mayfly_enqueue>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1242c:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   12430:	2b00      	cmp	r3, #0
   12432:	daed      	bge.n	12410 <ll_tx_mem_enqueue+0x50>
		ull_slave_latency_cancel(conn, handle);
   12434:	4620      	mov	r0, r4
   12436:	2100      	movs	r1, #0
   12438:	f004 f86e 	bl	16518 <ull_slave_latency_cancel>
	return 0;
   1243c:	2000      	movs	r0, #0
}
   1243e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   12440:	f06f 0015 	mvn.w	r0, #21
}
   12444:	4770      	bx	lr
   12446:	bf00      	nop
   12448:	20001078 	.word	0x20001078
   1244c:	200004bc 	.word	0x200004bc
   12450:	200004e0 	.word	0x200004e0

00012454 <ll_conn_update>:
{
   12454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12458:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   1245c:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
   12460:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	if (handle >= CONFIG_BT_MAX_CONN) {
   12464:	2800      	cmp	r0, #0
   12466:	d155      	bne.n	12514 <ll_conn_update+0xc0>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   12468:	460c      	mov	r4, r1
   1246a:	4616      	mov	r6, r2
   1246c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   12470:	4602      	mov	r2, r0
   12472:	4842      	ldr	r0, [pc, #264]	; (1257c <ll_conn_update+0x128>)
   12474:	461d      	mov	r5, r3
   12476:	f7fa fc19 	bl	ccac <mem_get>
	if (conn->lll.handle != handle) {
   1247a:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   1247c:	2b00      	cmp	r3, #0
   1247e:	d149      	bne.n	12514 <ll_conn_update+0xc0>
	if (!cmd) {
   12480:	b1e4      	cbz	r4, 124bc <ll_conn_update+0x68>
		cmd--;
   12482:	3c01      	subs	r4, #1
		if (cmd) {
   12484:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   12488:	f890 2184 	ldrb.w	r2, [r0, #388]	; 0x184
   1248c:	f890 1185 	ldrb.w	r1, [r0, #389]	; 0x185
   12490:	d052      	beq.n	12538 <ll_conn_update+0xe4>
			if ((conn->llcp_conn_param.req ==
   12492:	428a      	cmp	r2, r1
   12494:	d03b      	beq.n	1250e <ll_conn_update+0xba>
			    (conn->llcp_conn_param.state !=
   12496:	f890 2186 	ldrb.w	r2, [r0, #390]	; 0x186
			     conn->llcp_conn_param.ack) ||
   1249a:	f002 0107 	and.w	r1, r2, #7
   1249e:	2903      	cmp	r1, #3
   124a0:	d135      	bne.n	1250e <ll_conn_update+0xba>
			conn->llcp_conn_param.state = cmd;
   124a2:	f004 0407 	and.w	r4, r4, #7
   124a6:	f044 0408 	orr.w	r4, r4, #8
   124aa:	f022 020f 	bic.w	r2, r2, #15
   124ae:	4314      	orrs	r4, r2
   124b0:	f880 4186 	strb.w	r4, [r0, #390]	; 0x186
			conn->llcp_conn_param.status = status;
   124b4:	f880 6187 	strb.w	r6, [r0, #391]	; 0x187
	return 0;
   124b8:	4618      	mov	r0, r3
   124ba:	e029      	b.n	12510 <ll_conn_update+0xbc>
		if (!conn->llcp_conn_param.disabled &&
   124bc:	f890 3186 	ldrb.w	r3, [r0, #390]	; 0x186
   124c0:	f013 0410 	ands.w	r4, r3, #16
   124c4:	d029      	beq.n	1251a <ll_conn_update+0xc6>
		} else if (conn->lll.role) {
   124c6:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   124ca:	2b00      	cmp	r3, #0
   124cc:	db4f      	blt.n	1256e <ll_conn_update+0x11a>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
   124ce:	f890 210c 	ldrb.w	r2, [r0, #268]	; 0x10c
   124d2:	f890 310d 	ldrb.w	r3, [r0, #269]	; 0x10d
   124d6:	4293      	cmp	r3, r2
   124d8:	d119      	bne.n	1250e <ll_conn_update+0xba>
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   124da:	f890 210e 	ldrb.w	r2, [r0, #270]	; 0x10e
		conn->llcp_cu.interval = interval_max;
   124de:	f8a0 9110 	strh.w	r9, [r0, #272]	; 0x110
		conn->llcp_cu.req++;
   124e2:	3301      	adds	r3, #1
		conn->llcp_cu.win_size = 1U;
   124e4:	2101      	movs	r1, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   124e6:	f022 020f 	bic.w	r2, r2, #15
		conn->llcp_cu.req++;
   124ea:	f880 310c 	strb.w	r3, [r0, #268]	; 0x10c
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   124ee:	f042 0209 	orr.w	r2, r2, #9
		conn->llcp_cu.win_offset_us = 0U;
   124f2:	2300      	movs	r3, #0
		conn->llcp_cu.win_size = 1U;
   124f4:	f880 111c 	strb.w	r1, [r0, #284]	; 0x11c
		conn->llcp_cu.latency = latency;
   124f8:	f8a0 8112 	strh.w	r8, [r0, #274]	; 0x112
		conn->llcp_cu.timeout = timeout;
   124fc:	f8a0 7114 	strh.w	r7, [r0, #276]	; 0x114
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   12500:	f880 210e 	strb.w	r2, [r0, #270]	; 0x10e
		conn->llcp_cu.win_offset_us = 0U;
   12504:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
	return 0;
   12508:	4618      	mov	r0, r3
}
   1250a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   1250e:	200c      	movs	r0, #12
}
   12510:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   12514:	2002      	movs	r0, #2
}
   12516:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		    (!conn->common.fex_valid ||
   1251a:	f890 30d8 	ldrb.w	r3, [r0, #216]	; 0xd8
		if (!conn->llcp_conn_param.disabled &&
   1251e:	07db      	lsls	r3, r3, #31
   12520:	d506      	bpl.n	12530 <ll_conn_update+0xdc>
		     (conn->llcp_feature.features_conn &
   12522:	f8d0 1128 	ldr.w	r1, [r0, #296]	; 0x128
   12526:	4623      	mov	r3, r4
   12528:	f001 0202 	and.w	r2, r1, #2
		    (!conn->common.fex_valid ||
   1252c:	4313      	orrs	r3, r2
   1252e:	d0ca      	beq.n	124c6 <ll_conn_update+0x72>
   12530:	f890 2184 	ldrb.w	r2, [r0, #388]	; 0x184
   12534:	f890 1185 	ldrb.w	r1, [r0, #389]	; 0x185
			if (conn->llcp_conn_param.req !=
   12538:	428a      	cmp	r2, r1
   1253a:	d1e8      	bne.n	1250e <ll_conn_update+0xba>
			conn->llcp_conn_param.state = cmd;
   1253c:	f8b0 3186 	ldrh.w	r3, [r0, #390]	; 0x186
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   12540:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
			conn->llcp_conn_param.interval_min = interval_min;
   12544:	f8a0 5188 	strh.w	r5, [r0, #392]	; 0x188
			conn->llcp_conn_param.state = cmd;
   12548:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
			conn->llcp_conn_param.req++;
   1254c:	3201      	adds	r2, #1
			conn->llcp_conn_param.state = cmd;
   1254e:	f043 0308 	orr.w	r3, r3, #8
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   12552:	2900      	cmp	r1, #0
			conn->llcp_conn_param.interval_max = interval_max;
   12554:	f8a0 918a 	strh.w	r9, [r0, #394]	; 0x18a
			conn->llcp_conn_param.req++;
   12558:	f880 2184 	strb.w	r2, [r0, #388]	; 0x184
			conn->llcp_conn_param.latency = latency;
   1255c:	f8a0 818c 	strh.w	r8, [r0, #396]	; 0x18c
			conn->llcp_conn_param.timeout = timeout;
   12560:	f8a0 718e 	strh.w	r7, [r0, #398]	; 0x18e
			conn->llcp_conn_param.state = cmd;
   12564:	f8a0 3186 	strh.w	r3, [r0, #390]	; 0x186
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   12568:	db03      	blt.n	12572 <ll_conn_update+0x11e>
	return 0;
   1256a:	2000      	movs	r0, #0
   1256c:	e7d0      	b.n	12510 <ll_conn_update+0xbc>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   1256e:	201a      	movs	r0, #26
   12570:	e7ce      	b.n	12510 <ll_conn_update+0xbc>
				ull_slave_latency_cancel(conn, handle);
   12572:	2100      	movs	r1, #0
   12574:	f003 ffd0 	bl	16518 <ull_slave_latency_cancel>
	return 0;
   12578:	2000      	movs	r0, #0
   1257a:	e7c9      	b.n	12510 <ll_conn_update+0xbc>
   1257c:	20001078 	.word	0x20001078

00012580 <ll_chm_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   12580:	b9c8      	cbnz	r0, 125b6 <ll_chm_get+0x36>
{
   12582:	b538      	push	{r3, r4, r5, lr}
   12584:	4602      	mov	r2, r0
   12586:	460c      	mov	r4, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   12588:	480c      	ldr	r0, [pc, #48]	; (125bc <ll_chm_get+0x3c>)
   1258a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1258e:	f7fa fb8d 	bl	ccac <mem_get>
	if (conn->lll.handle != handle) {
   12592:	8d05      	ldrh	r5, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   12594:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
   12596:	b965      	cbnz	r5, 125b2 <ll_chm_get+0x32>
   12598:	f100 0234 	add.w	r2, r0, #52	; 0x34
		conn->chm_updated = 0U;
   1259c:	f883 51d8 	strb.w	r5, [r3, #472]	; 0x1d8
   125a0:	6811      	ldr	r1, [r2, #0]
   125a2:	6021      	str	r1, [r4, #0]
   125a4:	7911      	ldrb	r1, [r2, #4]
   125a6:	7121      	strb	r1, [r4, #4]
	} while (conn->chm_updated);
   125a8:	f893 01d8 	ldrb.w	r0, [r3, #472]	; 0x1d8
   125ac:	2800      	cmp	r0, #0
   125ae:	d1f5      	bne.n	1259c <ll_chm_get+0x1c>
}
   125b0:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   125b2:	2002      	movs	r0, #2
}
   125b4:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   125b6:	2002      	movs	r0, #2
}
   125b8:	4770      	bx	lr
   125ba:	bf00      	nop
   125bc:	20001078 	.word	0x20001078

000125c0 <ll_terminate_ind_send>:
	switch (reason) {
   125c0:	2929      	cmp	r1, #41	; 0x29
{
   125c2:	b538      	push	{r3, r4, r5, lr}
   125c4:	460d      	mov	r5, r1
   125c6:	4604      	mov	r4, r0
	switch (reason) {
   125c8:	d819      	bhi.n	125fe <ll_terminate_ind_send+0x3e>
   125ca:	2904      	cmp	r1, #4
   125cc:	d919      	bls.n	12602 <ll_terminate_ind_send+0x42>
   125ce:	1f4b      	subs	r3, r1, #5
   125d0:	2b24      	cmp	r3, #36	; 0x24
   125d2:	d816      	bhi.n	12602 <ll_terminate_ind_send+0x42>
   125d4:	e8df f003 	tbb	[pc, r3]
   125d8:	15151517 	.word	0x15151517
   125dc:	15151515 	.word	0x15151515
   125e0:	15151515 	.word	0x15151515
   125e4:	17171515 	.word	0x17171515
   125e8:	15151517 	.word	0x15151517
   125ec:	15151715 	.word	0x15151715
   125f0:	15151515 	.word	0x15151515
   125f4:	15151515 	.word	0x15151515
   125f8:	15151515 	.word	0x15151515
   125fc:	17          	.byte	0x17
   125fd:	00          	.byte	0x00
   125fe:	293b      	cmp	r1, #59	; 0x3b
   12600:	d001      	beq.n	12606 <ll_terminate_ind_send+0x46>
   12602:	2012      	movs	r0, #18
}
   12604:	bd38      	pop	{r3, r4, r5, pc}
	if (handle >= CONFIG_BT_MAX_CONN) {
   12606:	b9a4      	cbnz	r4, 12632 <ll_terminate_ind_send+0x72>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   12608:	4622      	mov	r2, r4
   1260a:	480d      	ldr	r0, [pc, #52]	; (12640 <ll_terminate_ind_send+0x80>)
   1260c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   12610:	f7fa fb4c 	bl	ccac <mem_get>
	if (conn->lll.handle != handle) {
   12614:	8d02      	ldrh	r2, [r0, #40]	; 0x28
   12616:	b962      	cbnz	r2, 12632 <ll_terminate_ind_send+0x72>
	conn->llcp_terminate.req++;
   12618:	f890 2140 	ldrb.w	r2, [r0, #320]	; 0x140
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1261c:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
	conn->llcp_terminate.reason_own = reason;
   12620:	f880 5142 	strb.w	r5, [r0, #322]	; 0x142
	conn->llcp_terminate.req++;
   12624:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   12626:	2900      	cmp	r1, #0
	conn->llcp_terminate.req++;
   12628:	f880 2140 	strb.w	r2, [r0, #320]	; 0x140
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1262c:	db03      	blt.n	12636 <ll_terminate_ind_send+0x76>
	return 0;
   1262e:	4620      	mov	r0, r4
}
   12630:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   12632:	2002      	movs	r0, #2
}
   12634:	bd38      	pop	{r3, r4, r5, pc}
		ull_slave_latency_cancel(conn, handle);
   12636:	4621      	mov	r1, r4
   12638:	f003 ff6e 	bl	16518 <ull_slave_latency_cancel>
	return 0;
   1263c:	4620      	mov	r0, r4
}
   1263e:	bd38      	pop	{r3, r4, r5, pc}
   12640:	20001078 	.word	0x20001078

00012644 <ll_feature_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   12644:	b9d8      	cbnz	r0, 1267e <ll_feature_req_send+0x3a>
{
   12646:	b510      	push	{r4, lr}
   12648:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1264a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1264e:	480f      	ldr	r0, [pc, #60]	; (1268c <ll_feature_req_send+0x48>)
   12650:	f7fa fb2c 	bl	ccac <mem_get>
	if (conn->lll.handle != handle) {
   12654:	8d04      	ldrh	r4, [r0, #40]	; 0x28
   12656:	b984      	cbnz	r4, 1267a <ll_feature_req_send+0x36>
	if (conn->llcp_feature.req != conn->llcp_feature.ack) {
   12658:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
   1265c:	f890 2121 	ldrb.w	r2, [r0, #289]	; 0x121
   12660:	428a      	cmp	r2, r1
   12662:	d108      	bne.n	12676 <ll_feature_req_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   12664:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
	conn->llcp_feature.req++;
   12668:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1266a:	2900      	cmp	r1, #0
	conn->llcp_feature.req++;
   1266c:	f880 2120 	strb.w	r2, [r0, #288]	; 0x120
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   12670:	db07      	blt.n	12682 <ll_feature_req_send+0x3e>
	return 0;
   12672:	4620      	mov	r0, r4
}
   12674:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   12676:	200c      	movs	r0, #12
}
   12678:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1267a:	2002      	movs	r0, #2
}
   1267c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1267e:	2002      	movs	r0, #2
}
   12680:	4770      	bx	lr
		ull_slave_latency_cancel(conn, handle);
   12682:	4621      	mov	r1, r4
   12684:	f003 ff48 	bl	16518 <ull_slave_latency_cancel>
	return 0;
   12688:	4620      	mov	r0, r4
}
   1268a:	bd10      	pop	{r4, pc}
   1268c:	20001078 	.word	0x20001078

00012690 <ll_version_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   12690:	b9d8      	cbnz	r0, 126ca <ll_version_ind_send+0x3a>
{
   12692:	b510      	push	{r4, lr}
   12694:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   12696:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1269a:	480f      	ldr	r0, [pc, #60]	; (126d8 <ll_version_ind_send+0x48>)
   1269c:	f7fa fb06 	bl	ccac <mem_get>
	if (conn->lll.handle != handle) {
   126a0:	8d04      	ldrh	r4, [r0, #40]	; 0x28
   126a2:	b984      	cbnz	r4, 126c6 <ll_version_ind_send+0x36>
	if (conn->llcp_version.req != conn->llcp_version.ack) {
   126a4:	f890 1138 	ldrb.w	r1, [r0, #312]	; 0x138
   126a8:	f890 2139 	ldrb.w	r2, [r0, #313]	; 0x139
   126ac:	428a      	cmp	r2, r1
   126ae:	d108      	bne.n	126c2 <ll_version_ind_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   126b0:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
	conn->llcp_version.req++;
   126b4:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   126b6:	2900      	cmp	r1, #0
	conn->llcp_version.req++;
   126b8:	f880 2138 	strb.w	r2, [r0, #312]	; 0x138
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   126bc:	db07      	blt.n	126ce <ll_version_ind_send+0x3e>
	return 0;
   126be:	4620      	mov	r0, r4
}
   126c0:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   126c2:	200c      	movs	r0, #12
}
   126c4:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   126c6:	2002      	movs	r0, #2
}
   126c8:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   126ca:	2002      	movs	r0, #2
}
   126cc:	4770      	bx	lr
		ull_slave_latency_cancel(conn, handle);
   126ce:	4621      	mov	r1, r4
   126d0:	f003 ff22 	bl	16518 <ull_slave_latency_cancel>
	return 0;
   126d4:	4620      	mov	r0, r4
}
   126d6:	bd10      	pop	{r4, pc}
   126d8:	20001078 	.word	0x20001078

000126dc <ll_length_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   126dc:	2800      	cmp	r0, #0
   126de:	d14c      	bne.n	1277a <ll_length_req_send+0x9e>
{
   126e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   126e2:	460d      	mov	r5, r1
   126e4:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   126e6:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   126ea:	4602      	mov	r2, r0
   126ec:	4826      	ldr	r0, [pc, #152]	; (12788 <ll_length_req_send+0xac>)
   126ee:	f7fa fadd 	bl	ccac <mem_get>
	if (conn->lll.handle != handle) {
   126f2:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   126f4:	bb43      	cbnz	r3, 12748 <ll_length_req_send+0x6c>
	if (conn->llcp_length.disabled ||
   126f6:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
   126fa:	f013 0108 	ands.w	r1, r3, #8
   126fe:	d125      	bne.n	1274c <ll_length_req_send+0x70>
	    (conn->common.fex_valid &&
   12700:	f890 20d8 	ldrb.w	r2, [r0, #216]	; 0xd8
	if (conn->llcp_length.disabled ||
   12704:	07d2      	lsls	r2, r2, #31
   12706:	d507      	bpl.n	12718 <ll_length_req_send+0x3c>
	     !(conn->llcp_feature.features_conn & BIT64(BT_LE_FEAT_BIT_DLE)))) {
   12708:	f8d0 2128 	ldr.w	r2, [r0, #296]	; 0x128
   1270c:	460f      	mov	r7, r1
   1270e:	f002 0620 	and.w	r6, r2, #32
	    (conn->common.fex_valid &&
   12712:	ea56 0207 	orrs.w	r2, r6, r7
   12716:	d019      	beq.n	1274c <ll_length_req_send+0x70>
	if (conn->llcp_length.req != conn->llcp_length.ack) {
   12718:	f890 11ac 	ldrb.w	r1, [r0, #428]	; 0x1ac
   1271c:	f890 21ad 	ldrb.w	r2, [r0, #429]	; 0x1ad
   12720:	428a      	cmp	r2, r1
   12722:	d017      	beq.n	12754 <ll_length_req_send+0x78>
		switch (conn->llcp_length.state) {
   12724:	f003 0307 	and.w	r3, r3, #7
   12728:	2b03      	cmp	r3, #3
   1272a:	d004      	beq.n	12736 <ll_length_req_send+0x5a>
   1272c:	3303      	adds	r3, #3
   1272e:	f003 0307 	and.w	r3, r3, #7
   12732:	2b01      	cmp	r3, #1
   12734:	d80c      	bhi.n	12750 <ll_length_req_send+0x74>
			if (!conn->llcp_length.cache.tx_octets) {
   12736:	f8b0 31b8 	ldrh.w	r3, [r0, #440]	; 0x1b8
   1273a:	b94b      	cbnz	r3, 12750 <ll_length_req_send+0x74>
				conn->llcp_length.cache.tx_octets = tx_octets;
   1273c:	f8a0 51b8 	strh.w	r5, [r0, #440]	; 0x1b8
				conn->llcp_length.cache.tx_time = tx_time;
   12740:	f8a0 41ba 	strh.w	r4, [r0, #442]	; 0x1ba
				return 0;
   12744:	4618      	mov	r0, r3
}
   12746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   12748:	2002      	movs	r0, #2
}
   1274a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   1274c:	201a      	movs	r0, #26
}
   1274e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   12750:	200c      	movs	r0, #12
}
   12752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   12754:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   12758:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
	conn->llcp_length.tx_octets = tx_octets;
   1275c:	f8a0 51b2 	strh.w	r5, [r0, #434]	; 0x1b2
	conn->llcp_length.req++;
   12760:	3201      	adds	r2, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   12762:	f36f 0302 	bfc	r3, #0, #3
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   12766:	2900      	cmp	r1, #0
	conn->llcp_length.req++;
   12768:	f880 21ac 	strb.w	r2, [r0, #428]	; 0x1ac
	conn->llcp_length.tx_time = tx_time;
   1276c:	f8a0 41b6 	strh.w	r4, [r0, #438]	; 0x1b6
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   12770:	f880 31ae 	strb.w	r3, [r0, #430]	; 0x1ae
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   12774:	db03      	blt.n	1277e <ll_length_req_send+0xa2>
	return 0;
   12776:	2000      	movs	r0, #0
}
   12778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1277a:	2002      	movs	r0, #2
}
   1277c:	4770      	bx	lr
		ull_slave_latency_cancel(conn, handle);
   1277e:	2100      	movs	r1, #0
   12780:	f003 feca 	bl	16518 <ull_slave_latency_cancel>
	return 0;
   12784:	2000      	movs	r0, #0
}
   12786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12788:	20001078 	.word	0x20001078

0001278c <ll_length_default_get>:
	*max_tx_octets = default_tx_octets;
   1278c:	4a03      	ldr	r2, [pc, #12]	; (1279c <ll_length_default_get+0x10>)
	*max_tx_time = default_tx_time;
   1278e:	4b04      	ldr	r3, [pc, #16]	; (127a0 <ll_length_default_get+0x14>)
	*max_tx_octets = default_tx_octets;
   12790:	8812      	ldrh	r2, [r2, #0]
	*max_tx_time = default_tx_time;
   12792:	881b      	ldrh	r3, [r3, #0]
	*max_tx_octets = default_tx_octets;
   12794:	8002      	strh	r2, [r0, #0]
	*max_tx_time = default_tx_time;
   12796:	800b      	strh	r3, [r1, #0]
}
   12798:	4770      	bx	lr
   1279a:	bf00      	nop
   1279c:	20002c38 	.word	0x20002c38
   127a0:	20002c3a 	.word	0x20002c3a

000127a4 <ll_length_default_set>:
	default_tx_octets = max_tx_octets;
   127a4:	4a02      	ldr	r2, [pc, #8]	; (127b0 <ll_length_default_set+0xc>)
	default_tx_time = max_tx_time;
   127a6:	4b03      	ldr	r3, [pc, #12]	; (127b4 <ll_length_default_set+0x10>)
	default_tx_octets = max_tx_octets;
   127a8:	8010      	strh	r0, [r2, #0]
	default_tx_time = max_tx_time;
   127aa:	8019      	strh	r1, [r3, #0]
}
   127ac:	2000      	movs	r0, #0
   127ae:	4770      	bx	lr
   127b0:	20002c38 	.word	0x20002c38
   127b4:	20002c3a 	.word	0x20002c3a

000127b8 <ll_length_max_get>:
{
   127b8:	b430      	push	{r4, r5}
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
   127ba:	251b      	movs	r5, #27
	*max_tx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   127bc:	f44f 74a0 	mov.w	r4, #320	; 0x140
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
   127c0:	8005      	strh	r5, [r0, #0]
	*max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
   127c2:	8015      	strh	r5, [r2, #0]
	*max_tx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   127c4:	800c      	strh	r4, [r1, #0]
	*max_rx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   127c6:	801c      	strh	r4, [r3, #0]
}
   127c8:	bc30      	pop	{r4, r5}
   127ca:	4770      	bx	lr

000127cc <ll_phy_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   127cc:	b9c0      	cbnz	r0, 12800 <ll_phy_get+0x34>
{
   127ce:	b538      	push	{r3, r4, r5, lr}
   127d0:	460d      	mov	r5, r1
   127d2:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   127d4:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   127d8:	4602      	mov	r2, r0
   127da:	480a      	ldr	r0, [pc, #40]	; (12804 <ll_phy_get+0x38>)
   127dc:	f7fa fa66 	bl	ccac <mem_get>
   127e0:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
   127e2:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   127e4:	b950      	cbnz	r0, 127fc <ll_phy_get+0x30>
	*tx = conn->lll.phy_tx;
   127e6:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   127ea:	f3c2 0202 	ubfx	r2, r2, #0, #3
   127ee:	702a      	strb	r2, [r5, #0]
	*rx = conn->lll.phy_rx;
   127f0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
   127f4:	f3c3 0302 	ubfx	r3, r3, #0, #3
   127f8:	7023      	strb	r3, [r4, #0]
}
   127fa:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   127fc:	2002      	movs	r0, #2
}
   127fe:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   12800:	2002      	movs	r0, #2
}
   12802:	4770      	bx	lr
   12804:	20001078 	.word	0x20001078

00012808 <ll_phy_default_set>:
	default_phy_tx = tx;
   12808:	4a02      	ldr	r2, [pc, #8]	; (12814 <ll_phy_default_set+0xc>)
	default_phy_rx = rx;
   1280a:	4b03      	ldr	r3, [pc, #12]	; (12818 <ll_phy_default_set+0x10>)
	default_phy_tx = tx;
   1280c:	7010      	strb	r0, [r2, #0]
	default_phy_rx = rx;
   1280e:	7019      	strb	r1, [r3, #0]
}
   12810:	2000      	movs	r0, #0
   12812:	4770      	bx	lr
   12814:	200031bb 	.word	0x200031bb
   12818:	200031ba 	.word	0x200031ba

0001281c <ll_phy_req_send>:
{
   1281c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (handle >= CONFIG_BT_MAX_CONN) {
   1281e:	2800      	cmp	r0, #0
   12820:	d13d      	bne.n	1289e <ll_phy_req_send+0x82>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   12822:	460c      	mov	r4, r1
   12824:	4615      	mov	r5, r2
   12826:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1282a:	4602      	mov	r2, r0
   1282c:	4822      	ldr	r0, [pc, #136]	; (128b8 <ll_phy_req_send+0x9c>)
   1282e:	461e      	mov	r6, r3
   12830:	f7fa fa3c 	bl	ccac <mem_get>
	if (conn->lll.handle != handle) {
   12834:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   12836:	bb93      	cbnz	r3, 1289e <ll_phy_req_send+0x82>
	if (conn->llcp_phy.disabled ||
   12838:	f890 71bf 	ldrb.w	r7, [r0, #447]	; 0x1bf
   1283c:	f017 0708 	ands.w	r7, r7, #8
   12840:	d130      	bne.n	128a4 <ll_phy_req_send+0x88>
	    (conn->common.fex_valid &&
   12842:	f890 30d8 	ldrb.w	r3, [r0, #216]	; 0xd8
	if (conn->llcp_phy.disabled ||
   12846:	07db      	lsls	r3, r3, #31
   12848:	d506      	bpl.n	12858 <ll_phy_req_send+0x3c>
	     !(conn->llcp_feature.features_conn & BIT64(BT_LE_FEAT_BIT_PHY_2M)) &&
   1284a:	f8d0 1128 	ldr.w	r1, [r0, #296]	; 0x128
   1284e:	463b      	mov	r3, r7
   12850:	f401 6210 	and.w	r2, r1, #2304	; 0x900
   12854:	4313      	orrs	r3, r2
   12856:	d025      	beq.n	128a4 <ll_phy_req_send+0x88>
	if (conn->llcp_phy.req != conn->llcp_phy.ack) {
   12858:	f890 31bc 	ldrb.w	r3, [r0, #444]	; 0x1bc
   1285c:	f890 21bd 	ldrb.w	r2, [r0, #445]	; 0x1bd
   12860:	429a      	cmp	r2, r3
   12862:	d122      	bne.n	128aa <ll_phy_req_send+0x8e>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   12864:	f004 0407 	and.w	r4, r4, #7
   12868:	00a4      	lsls	r4, r4, #2
   1286a:	f8b0 11be 	ldrh.w	r1, [r0, #446]	; 0x1be
   1286e:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
   12872:	f006 0307 	and.w	r3, r6, #7
   12876:	ea44 1343 	orr.w	r3, r4, r3, lsl #5
   1287a:	f005 0501 	and.w	r5, r5, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1287e:	f990 4039 	ldrsb.w	r4, [r0, #57]	; 0x39
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   12882:	ea43 2345 	orr.w	r3, r3, r5, lsl #9
   12886:	f401 4179 	and.w	r1, r1, #63744	; 0xf900
	conn->llcp_phy.req++;
   1288a:	3201      	adds	r2, #1
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   1288c:	430b      	orrs	r3, r1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1288e:	2c00      	cmp	r4, #0
	conn->llcp_phy.req++;
   12890:	f880 21bc 	strb.w	r2, [r0, #444]	; 0x1bc
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   12894:	f8a0 31be 	strh.w	r3, [r0, #446]	; 0x1be
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   12898:	db0a      	blt.n	128b0 <ll_phy_req_send+0x94>
}
   1289a:	4638      	mov	r0, r7
   1289c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1289e:	2702      	movs	r7, #2
}
   128a0:	4638      	mov	r0, r7
   128a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   128a4:	271a      	movs	r7, #26
}
   128a6:	4638      	mov	r0, r7
   128a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   128aa:	270c      	movs	r7, #12
}
   128ac:	4638      	mov	r0, r7
   128ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ull_slave_latency_cancel(conn, handle);
   128b0:	2100      	movs	r1, #0
   128b2:	f003 fe31 	bl	16518 <ull_slave_latency_cancel>
   128b6:	e7f0      	b.n	1289a <ll_phy_req_send+0x7e>
   128b8:	20001078 	.word	0x20001078

000128bc <ll_apto_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   128bc:	b9d8      	cbnz	r0, 128f6 <ll_apto_get+0x3a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   128be:	4602      	mov	r2, r0
{
   128c0:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   128c2:	480e      	ldr	r0, [pc, #56]	; (128fc <ll_apto_get+0x40>)
   128c4:	460c      	mov	r4, r1
   128c6:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   128ca:	f7fa f9ef 	bl	ccac <mem_get>
   128ce:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
   128d0:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   128d2:	b970      	cbnz	r0, 128f2 <ll_apto_get+0x36>
	*apto = conn->apto_reload * conn->lll.interval * 125U / 1000;
   128d4:	f8b2 10ce 	ldrh.w	r1, [r2, #206]	; 0xce
   128d8:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
   128da:	4a09      	ldr	r2, [pc, #36]	; (12900 <ll_apto_get+0x44>)
   128dc:	fb03 f301 	mul.w	r3, r3, r1
   128e0:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
   128e4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   128e8:	fba2 2303 	umull	r2, r3, r2, r3
   128ec:	099b      	lsrs	r3, r3, #6
   128ee:	8023      	strh	r3, [r4, #0]
}
   128f0:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   128f2:	2002      	movs	r0, #2
}
   128f4:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   128f6:	2002      	movs	r0, #2
}
   128f8:	4770      	bx	lr
   128fa:	bf00      	nop
   128fc:	20001078 	.word	0x20001078
   12900:	10624dd3 	.word	0x10624dd3

00012904 <ll_apto_set>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   12904:	b9d8      	cbnz	r0, 1293e <ll_apto_set+0x3a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   12906:	4602      	mov	r2, r0
{
   12908:	b538      	push	{r3, r4, r5, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1290a:	480e      	ldr	r0, [pc, #56]	; (12944 <ll_apto_set+0x40>)
   1290c:	460d      	mov	r5, r1
   1290e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   12912:	f7fa f9cb 	bl	ccac <mem_get>
   12916:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
   12918:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   1291a:	b970      	cbnz	r0, 1293a <ll_apto_set+0x36>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
   1291c:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
   1291e:	f240 44e2 	movw	r4, #1250	; 0x4e2
   12922:	fb04 f403 	mul.w	r4, r4, r3
   12926:	f242 7310 	movw	r3, #10000	; 0x2710
   1292a:	fb03 4305 	mla	r3, r3, r5, r4
   1292e:	3b01      	subs	r3, #1
   12930:	fbb3 f3f4 	udiv	r3, r3, r4
   12934:	f8a2 30ce 	strh.w	r3, [r2, #206]	; 0xce
}
   12938:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1293a:	2002      	movs	r0, #2
}
   1293c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1293e:	2002      	movs	r0, #2
}
   12940:	4770      	bx	lr
   12942:	bf00      	nop
   12944:	20001078 	.word	0x20001078

00012948 <ull_conn_init>:
	err = init_reset();
   12948:	f7ff b80c 	b.w	11964 <init_reset>

0001294c <ull_conn_reset>:
{
   1294c:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1294e:	2200      	movs	r2, #0
   12950:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   12954:	4813      	ldr	r0, [pc, #76]	; (129a4 <ull_conn_reset+0x58>)
   12956:	f7fa f9a9 	bl	ccac <mem_get>
   1295a:	4604      	mov	r4, r0
	err = ull_ticker_stop_with_mark(TICKER_ID_CONN_BASE + handle,
   1295c:	f100 021c 	add.w	r2, r0, #28
   12960:	4601      	mov	r1, r0
   12962:	2003      	movs	r0, #3
   12964:	f7fe f9a0 	bl	10ca8 <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   12968:	b108      	cbz	r0, 1296e <ull_conn_reset+0x22>
   1296a:	3078      	adds	r0, #120	; 0x78
   1296c:	d10b      	bne.n	12986 <ull_conn_reset+0x3a>
	MFIFO_INIT(conn_tx);
   1296e:	480e      	ldr	r0, [pc, #56]	; (129a8 <ull_conn_reset+0x5c>)
	MFIFO_INIT(conn_ack);
   12970:	490e      	ldr	r1, [pc, #56]	; (129ac <ull_conn_reset+0x60>)
	conn_upd_curr = NULL;
   12972:	4a0f      	ldr	r2, [pc, #60]	; (129b0 <ull_conn_reset+0x64>)
	conn->lll.link_tx_free = NULL;
   12974:	2300      	movs	r3, #0
	MFIFO_INIT(conn_tx);
   12976:	8043      	strh	r3, [r0, #2]
	MFIFO_INIT(conn_ack);
   12978:	804b      	strh	r3, [r1, #2]
	conn->lll.link_tx_free = NULL;
   1297a:	6763      	str	r3, [r4, #116]	; 0x74
}
   1297c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	conn_upd_curr = NULL;
   12980:	6013      	str	r3, [r2, #0]
	err = init_reset();
   12982:	f7fe bfef 	b.w	11964 <init_reset>
	LL_ASSERT(err == 0 || err == -EALREADY);
   12986:	4a0b      	ldr	r2, [pc, #44]	; (129b4 <ull_conn_reset+0x68>)
   12988:	490b      	ldr	r1, [pc, #44]	; (129b8 <ull_conn_reset+0x6c>)
   1298a:	480c      	ldr	r0, [pc, #48]	; (129bc <ull_conn_reset+0x70>)
   1298c:	f240 732d 	movw	r3, #1837	; 0x72d
   12990:	f00b fcf8 	bl	1e384 <printk>
   12994:	4040      	eors	r0, r0
   12996:	f380 8811 	msr	BASEPRI, r0
   1299a:	f04f 0003 	mov.w	r0, #3
   1299e:	df02      	svc	2
   129a0:	e7e5      	b.n	1296e <ull_conn_reset+0x22>
   129a2:	bf00      	nop
   129a4:	20001078 	.word	0x20001078
   129a8:	200004bc 	.word	0x200004bc
   129ac:	20000478 	.word	0x20000478
   129b0:	20002074 	.word	0x20002074
   129b4:	00024874 	.word	0x00024874
   129b8:	00024984 	.word	0x00024984
   129bc:	00024334 	.word	0x00024334

000129c0 <ull_conn_default_tx_octets_get>:
	return default_tx_octets;
   129c0:	4b01      	ldr	r3, [pc, #4]	; (129c8 <ull_conn_default_tx_octets_get+0x8>)
}
   129c2:	8818      	ldrh	r0, [r3, #0]
   129c4:	4770      	bx	lr
   129c6:	bf00      	nop
   129c8:	20002c38 	.word	0x20002c38

000129cc <ull_conn_default_tx_time_get>:
	return default_tx_time;
   129cc:	4b01      	ldr	r3, [pc, #4]	; (129d4 <ull_conn_default_tx_time_get+0x8>)
}
   129ce:	8818      	ldrh	r0, [r3, #0]
   129d0:	4770      	bx	lr
   129d2:	bf00      	nop
   129d4:	20002c3a 	.word	0x20002c3a

000129d8 <ull_conn_default_phy_tx_get>:
	return default_phy_tx;
   129d8:	4b01      	ldr	r3, [pc, #4]	; (129e0 <ull_conn_default_phy_tx_get+0x8>)
}
   129da:	7818      	ldrb	r0, [r3, #0]
   129dc:	4770      	bx	lr
   129de:	bf00      	nop
   129e0:	200031bb 	.word	0x200031bb

000129e4 <ull_conn_default_phy_rx_get>:
	return default_phy_rx;
   129e4:	4b01      	ldr	r3, [pc, #4]	; (129ec <ull_conn_default_phy_rx_get+0x8>)
}
   129e6:	7818      	ldrb	r0, [r3, #0]
   129e8:	4770      	bx	lr
   129ea:	bf00      	nop
   129ec:	200031ba 	.word	0x200031ba

000129f0 <ull_conn_setup>:
	lll = *((struct lll_conn **)((uint8_t *)ftr->param +
   129f0:	688b      	ldr	r3, [r1, #8]
   129f2:	685b      	ldr	r3, [r3, #4]
{
   129f4:	b510      	push	{r4, lr}
	switch (lll->role) {
   129f6:	7f5c      	ldrb	r4, [r3, #29]
   129f8:	09e4      	lsrs	r4, r4, #7
   129fa:	d10d      	bne.n	12a18 <ull_conn_setup+0x28>
		LL_ASSERT(0);
   129fc:	4a09      	ldr	r2, [pc, #36]	; (12a24 <ull_conn_setup+0x34>)
   129fe:	490a      	ldr	r1, [pc, #40]	; (12a28 <ull_conn_setup+0x38>)
   12a00:	480a      	ldr	r0, [pc, #40]	; (12a2c <ull_conn_setup+0x3c>)
   12a02:	f240 3341 	movw	r3, #833	; 0x341
   12a06:	f00b fcbd 	bl	1e384 <printk>
   12a0a:	4040      	eors	r0, r0
   12a0c:	f380 8811 	msr	BASEPRI, r0
   12a10:	f04f 0003 	mov.w	r0, #3
   12a14:	df02      	svc	2
}
   12a16:	bd10      	pop	{r4, pc}
		ull_slave_setup(link, rx, ftr, lll);
   12a18:	460a      	mov	r2, r1
}
   12a1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ull_slave_setup(link, rx, ftr, lll);
   12a1e:	3208      	adds	r2, #8
   12a20:	f7ef b9e2 	b.w	1de8 <ull_slave_setup>
   12a24:	00024874 	.word	0x00024874
   12a28:	000243a4 	.word	0x000243a4
   12a2c:	00024334 	.word	0x00024334

00012a30 <ull_conn_rx>:
	conn = ll_connected_get((*rx)->hdr.handle);
   12a30:	680b      	ldr	r3, [r1, #0]
	if (handle >= CONFIG_BT_MAX_CONN) {
   12a32:	88da      	ldrh	r2, [r3, #6]
   12a34:	2a00      	cmp	r2, #0
   12a36:	f040 80c8 	bne.w	12bca <ull_conn_rx+0x19a>
{
   12a3a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a3e:	460d      	mov	r5, r1
   12a40:	b085      	sub	sp, #20
   12a42:	4607      	mov	r7, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   12a44:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   12a48:	48be      	ldr	r0, [pc, #760]	; (12d44 <ull_conn_rx+0x314>)
   12a4a:	f7fa f92f 	bl	ccac <mem_get>
	if (conn->lll.handle != handle) {
   12a4e:	8d03      	ldrh	r3, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   12a50:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   12a52:	2b00      	cmp	r3, #0
   12a54:	f040 80fa 	bne.w	12c4c <ull_conn_rx+0x21c>
	pdu_rx = (void *)(*rx)->pdu;
   12a58:	682e      	ldr	r6, [r5, #0]
	switch (pdu_rx->ll_id) {
   12a5a:	f890 1166 	ldrb.w	r1, [r0, #358]	; 0x166
   12a5e:	7f32      	ldrb	r2, [r6, #28]
   12a60:	f002 0203 	and.w	r2, r2, #3
   12a64:	2a03      	cmp	r2, #3
   12a66:	f001 0001 	and.w	r0, r1, #1
   12a6a:	d128      	bne.n	12abe <ull_conn_rx+0x8e>
			  struct pdu_data *pdu_rx, struct ll_conn *conn)
{
	int nack = 0;
	uint8_t opcode;

	opcode = pdu_rx->llctrl.opcode;
   12a6c:	f896 801f 	ldrb.w	r8, [r6, #31]

#if defined(CONFIG_BT_CTLR_LE_ENC)
	/* FIXME: do check in individual case to reduce CPU time */
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   12a70:	2800      	cmp	r0, #0
   12a72:	d03a      	beq.n	12aea <ull_conn_rx+0xba>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   12a74:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   12a78:	2b00      	cmp	r3, #0
   12a7a:	f001 0004 	and.w	r0, r1, #4
   12a7e:	f2c0 85b8 	blt.w	135f2 <ull_conn_rx+0xbc2>
	return (!conn->lll.role &&
   12a82:	2800      	cmp	r0, #0
   12a84:	f040 8506 	bne.w	13494 <ull_conn_rx+0xa64>
		((!conn->llcp_enc.refresh &&
   12a88:	f1b8 0f02 	cmp.w	r8, #2
   12a8c:	f000 83fa 	beq.w	13284 <ull_conn_rx+0x854>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   12a90:	f1b8 0f05 	cmp.w	r8, #5
   12a94:	d04b      	beq.n	12b2e <ull_conn_rx+0xfe>
   12a96:	f1b8 0f06 	cmp.w	r8, #6
   12a9a:	f000 85c6 	beq.w	1362a <ull_conn_rx+0xbfa>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   12a9e:	f1b8 0f0d 	cmp.w	r8, #13
   12aa2:	f000 81ab 	beq.w	12dfc <ull_conn_rx+0x3cc>
   12aa6:	f1b8 0f11 	cmp.w	r8, #17
   12aaa:	f000 823e 	beq.w	12f2a <ull_conn_rx+0x4fa>
		conn->llcp_terminate.reason_peer =
   12aae:	233d      	movs	r3, #61	; 0x3d
   12ab0:	f884 3143 	strb.w	r3, [r4, #323]	; 0x143
			BT_HCI_ERR_TERM_DUE_TO_MIC_FAIL;

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   12ab4:	682b      	ldr	r3, [r5, #0]
   12ab6:	2201      	movs	r2, #1
   12ab8:	711a      	strb	r2, [r3, #4]

		return 0;
   12aba:	2000      	movs	r0, #0
   12abc:	e008      	b.n	12ad0 <ull_conn_rx+0xa0>
	switch (pdu_rx->ll_id) {
   12abe:	b952      	cbnz	r2, 12ad6 <ull_conn_rx+0xa6>
		if (conn->llcp_enc.pause_rx) {
   12ac0:	b118      	cbz	r0, 12aca <ull_conn_rx+0x9a>
			conn->llcp_terminate.reason_peer =
   12ac2:	233d      	movs	r3, #61	; 0x3d
   12ac4:	f884 3143 	strb.w	r3, [r4, #323]	; 0x143
   12ac8:	682e      	ldr	r6, [r5, #0]
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   12aca:	2301      	movs	r3, #1
   12acc:	7133      	strb	r3, [r6, #4]
	return 0;
   12ace:	2000      	movs	r0, #0
}
   12ad0:	b005      	add	sp, #20
   12ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (conn->llcp_enc.pause_rx) {
   12ad6:	2800      	cmp	r0, #0
   12ad8:	d0f9      	beq.n	12ace <ull_conn_rx+0x9e>
			conn->llcp_terminate.reason_peer =
   12ada:	223d      	movs	r2, #61	; 0x3d
   12adc:	f884 2143 	strb.w	r2, [r4, #323]	; 0x143
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   12ae0:	682a      	ldr	r2, [r5, #0]
   12ae2:	2101      	movs	r1, #1
	return 0;
   12ae4:	4618      	mov	r0, r3
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   12ae6:	7111      	strb	r1, [r2, #4]
   12ae8:	e7f2      	b.n	12ad0 <ull_conn_rx+0xa0>
	}
#endif /* CONFIG_BT_CTLR_LE_ENC */

	switch (opcode) {
   12aea:	f1b8 0f18 	cmp.w	r8, #24
   12aee:	d81e      	bhi.n	12b2e <ull_conn_rx+0xfe>
   12af0:	e8df f018 	tbh	[pc, r8, lsl #1]
   12af4:	03d40355 	.word	0x03d40355
   12af8:	040903c8 	.word	0x040903c8
   12afc:	001d001d 	.word	0x001d001d
   12b00:	032b04aa 	.word	0x032b04aa
   12b04:	029c02ce 	.word	0x029c02ce
   12b08:	04560250 	.word	0x04560250
   12b0c:	018401c7 	.word	0x018401c7
   12b10:	0173001d 	.word	0x0173001d
   12b14:	021b001d 	.word	0x021b001d
   12b18:	016901f6 	.word	0x016901f6
   12b1c:	012e012e 	.word	0x012e012e
   12b20:	001d00f6 	.word	0x001d00f6
   12b24:	00b3      	.short	0x00b3
		nack = pause_enc_rsp_send(conn, *rx, 1);
		break;
#endif /* CONFIG_BT_PERIPHERAL */

	case PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP:
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   12b26:	7f73      	ldrb	r3, [r6, #29]
   12b28:	2b01      	cmp	r3, #1
   12b2a:	f000 8442 	beq.w	133b2 <ull_conn_rx+0x982>
   12b2e:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
   12b32:	f000 0502 	and.w	r5, r0, #2
	if (conn->common.txn_lock) {
   12b36:	2d00      	cmp	r5, #0
   12b38:	d1c7      	bne.n	12aca <ull_conn_rx+0x9a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   12b3a:	4883      	ldr	r0, [pc, #524]	; (12d48 <ull_conn_rx+0x318>)
   12b3c:	f7fa f886 	bl	cc4c <mem_acquire>
	if (!tx) {
   12b40:	2800      	cmp	r0, #0
   12b42:	f000 856e 	beq.w	13622 <ull_conn_rx+0xbf2>
	conn->common.txn_lock = 1U;
   12b46:	f894 10d8 	ldrb.w	r1, [r4, #216]	; 0xd8
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   12b4a:	7903      	ldrb	r3, [r0, #4]
	conn->common.txn_lock = 1U;
   12b4c:	f041 0102 	orr.w	r1, r1, #2
   12b50:	f884 10d8 	strb.w	r1, [r4, #216]	; 0xd8
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   12b54:	2102      	movs	r1, #2
   12b56:	7141      	strb	r1, [r0, #5]
	    conn->tx_head &&
   12b58:	f8d4 11c4 	ldr.w	r1, [r4, #452]	; 0x1c4
	pdu->llctrl.unknown_rsp.type = type;
   12b5c:	f880 8008 	strb.w	r8, [r0, #8]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   12b60:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   12b64:	2207      	movs	r2, #7
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   12b66:	7103      	strb	r3, [r0, #4]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   12b68:	71c2      	strb	r2, [r0, #7]
	if (
   12b6a:	b1e9      	cbz	r1, 12ba8 <ull_conn_rx+0x178>
	    !conn->llcp_enc.pause_tx &&
   12b6c:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
	    conn->tx_head &&
   12b70:	079a      	lsls	r2, r3, #30
   12b72:	d419      	bmi.n	12ba8 <ull_conn_rx+0x178>
	    !conn->llcp_phy.pause_tx &&
   12b74:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   12b78:	07db      	lsls	r3, r3, #31
   12b7a:	d415      	bmi.n	12ba8 <ull_conn_rx+0x178>
		if (conn->tx_head == conn->tx_data) {
   12b7c:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
   12b80:	4299      	cmp	r1, r3
		if (!conn->tx_ctrl) {
   12b82:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   12b86:	f000 855b 	beq.w	13640 <ull_conn_rx+0xc10>
		} else if (!conn->tx_ctrl) {
   12b8a:	2b00      	cmp	r3, #0
   12b8c:	f000 8574 	beq.w	13678 <ull_conn_rx+0xc48>
   12b90:	f8d4 11cc 	ldr.w	r1, [r4, #460]	; 0x1cc
	tx->next = conn->tx_ctrl_last->next;
   12b94:	680b      	ldr	r3, [r1, #0]
   12b96:	6003      	str	r3, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   12b98:	6008      	str	r0, [r1, #0]
	if (!tx->next) {
   12b9a:	6801      	ldr	r1, [r0, #0]
	conn->tx_ctrl_last = tx;
   12b9c:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   12ba0:	2900      	cmp	r1, #0
   12ba2:	d192      	bne.n	12aca <ull_conn_rx+0x9a>
   12ba4:	f000 bc43 	b.w	1342e <ull_conn_rx+0x9fe>
		if (!conn->tx_ctrl) {
   12ba8:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   12bac:	2b00      	cmp	r3, #0
   12bae:	f000 847f 	beq.w	134b0 <ull_conn_rx+0xa80>
	tx->next = conn->tx_ctrl_last->next;
   12bb2:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   12bb6:	681a      	ldr	r2, [r3, #0]
   12bb8:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   12bba:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   12bbc:	6801      	ldr	r1, [r0, #0]
   12bbe:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   12bc2:	2900      	cmp	r1, #0
   12bc4:	d181      	bne.n	12aca <ull_conn_rx+0x9a>
   12bc6:	f000 bc32 	b.w	1342e <ull_conn_rx+0x9fe>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   12bca:	2201      	movs	r2, #1
   12bcc:	711a      	strb	r2, [r3, #4]
		return 0;
   12bce:	2000      	movs	r0, #0
}
   12bd0:	4770      	bx	lr
			} else {
				struct pdu_data_llctrl *c = &pdu_rx->llctrl;
				struct pdu_data_llctrl_phy_req *p =
					&c->phy_req;

				conn->llcp_phy.state =
   12bd2:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
					LLCP_PHY_STATE_UPD;

				if (conn->llcp_phy.ack ==
   12bd6:	4281      	cmp	r1, r0
				conn->llcp_phy.state =
   12bd8:	f043 0303 	orr.w	r3, r3, #3
   12bdc:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
				if (conn->llcp_phy.ack ==
   12be0:	d10f      	bne.n	12c02 <ull_conn_rx+0x1d2>
				    conn->llcp_phy.req) {
					conn->llcp_phy.ack--;

					conn->llcp_phy.cmd = 0U;

					conn->llcp_phy.tx =
   12be2:	f8b4 21be 	ldrh.w	r2, [r4, #446]	; 0x1be
   12be6:	4859      	ldr	r0, [pc, #356]	; (12d4c <ull_conn_rx+0x31c>)
						conn->phy_pref_tx;
					conn->llcp_phy.rx =
						conn->phy_pref_rx;
   12be8:	f894 31c0 	ldrb.w	r3, [r4, #448]	; 0x1c0
					conn->llcp_phy.tx =
   12bec:	4010      	ands	r0, r2
   12bee:	f240 42fc 	movw	r2, #1276	; 0x4fc
   12bf2:	ea02 0283 	and.w	r2, r2, r3, lsl #2
   12bf6:	4302      	orrs	r2, r0
					conn->llcp_phy.ack--;
   12bf8:	1e4b      	subs	r3, r1, #1
   12bfa:	f884 31bd 	strb.w	r3, [r4, #445]	; 0x1bd
					conn->llcp_phy.tx =
   12bfe:	f8a4 21be 	strh.w	r2, [r4, #446]	; 0x1be
				}

				conn->llcp_phy.tx &= p->rx_phys;
				conn->llcp_phy.rx &= p->tx_phys;
   12c02:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
				conn->llcp_phy.tx &= p->rx_phys;
   12c06:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
				conn->llcp_phy.rx &= p->tx_phys;
   12c0a:	f896 1020 	ldrb.w	r1, [r6, #32]
				conn->llcp_phy.tx &= p->rx_phys;
   12c0e:	f3c2 0082 	ubfx	r0, r2, #2, #3
   12c12:	4003      	ands	r3, r0
				conn->llcp_phy.rx &= p->tx_phys;
   12c14:	ea01 1152 	and.w	r1, r1, r2, lsr #5
				conn->llcp_phy.tx &= p->rx_phys;
   12c18:	009b      	lsls	r3, r3, #2
   12c1a:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   12c1e:	f002 0203 	and.w	r2, r2, #3
   12c22:	4313      	orrs	r3, r2

				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   12c24:	f013 0f1c 	tst.w	r3, #28
				conn->llcp_phy.tx &= p->rx_phys;
   12c28:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   12c2c:	d002      	beq.n	12c34 <ull_conn_rx+0x204>
   12c2e:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   12c32:	d105      	bne.n	12c40 <ull_conn_rx+0x210>
					conn->llcp_phy.tx = 0;
   12c34:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   12c38:	f003 0303 	and.w	r3, r3, #3
   12c3c:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
					conn->llcp_phy.rx = 0;
				}

				/* pause data packet tx */
				conn->llcp_phy.pause_tx = 1U;
   12c40:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   12c44:	f043 0301 	orr.w	r3, r3, #1
   12c48:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf

				/* Mark for buffer for release */
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   12c4c:	682b      	ldr	r3, [r5, #0]
   12c4e:	2201      	movs	r2, #1
	int nack = 0;
   12c50:	2000      	movs	r0, #0
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   12c52:	711a      	strb	r2, [r3, #4]
}
   12c54:	b005      	add	sp, #20
   12c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
#if defined(CONFIG_BT_PERIPHERAL)
	case PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND:
	{
		uint8_t err;

		if (!conn->lll.role ||
   12c5a:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   12c5e:	2b00      	cmp	r3, #0
   12c60:	f6bf af65 	bge.w	12b2e <ull_conn_rx+0xfe>
   12c64:	7f73      	ldrb	r3, [r6, #29]
   12c66:	2b05      	cmp	r3, #5
   12c68:	f47f af61 	bne.w	12b2e <ull_conn_rx+0xfe>
	if (!((ind->m_to_s_phy | ind->s_to_m_phy) & 0x07)) {
   12c6c:	f896 1020 	ldrb.w	r1, [r6, #32]
   12c70:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   12c74:	ea41 0003 	orr.w	r0, r1, r3
   12c78:	f010 0007 	ands.w	r0, r0, #7
   12c7c:	f040 876e 	bne.w	13b5c <ull_conn_rx+0x112c>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   12c80:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   12c84:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   12c88:	428b      	cmp	r3, r1
   12c8a:	f43f af1e 	beq.w	12aca <ull_conn_rx+0x9a>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
   12c8e:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   12c92:	f003 0303 	and.w	r3, r3, #3
   12c96:	2b02      	cmp	r3, #2
   12c98:	f47f af17 	bne.w	12aca <ull_conn_rx+0x9a>
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   12c9c:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
		conn->llcp_phy.pause_tx = 0U;
   12ca0:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
		conn->llcp_phy.ack = conn->llcp_phy.req;
   12ca4:	f884 11bd 	strb.w	r1, [r4, #445]	; 0x1bd
		conn->llcp_phy.pause_tx = 0U;
   12ca8:	f360 0300 	bfi	r3, r0, #0, #1
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   12cac:	4611      	mov	r1, r2
   12cae:	f362 1106 	bfi	r1, r2, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   12cb2:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
		if (!conn->llcp_phy.cmd) {
   12cb6:	f013 0304 	ands.w	r3, r3, #4
		conn->procedure_expire = 0U;
   12cba:	f8a4 00c8 	strh.w	r0, [r4, #200]	; 0xc8
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   12cbe:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
   12cc2:	f3c2 0202 	ubfx	r2, r2, #0, #3
		if (!conn->llcp_phy.cmd) {
   12cc6:	f43f af0b 	beq.w	12ae0 <ull_conn_rx+0xb0>
		(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   12cca:	682b      	ldr	r3, [r5, #0]
   12ccc:	211a      	movs	r1, #26
   12cce:	7119      	strb	r1, [r3, #4]
		p->status = 0U;
   12cd0:	7730      	strb	r0, [r6, #28]
		p->tx = conn->lll.phy_tx;
   12cd2:	7772      	strb	r2, [r6, #29]
		p->rx = conn->lll.phy_rx;
   12cd4:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   12cd8:	f3c3 0302 	ubfx	r3, r3, #0, #3
   12cdc:	77b3      	strb	r3, [r6, #30]
		    PDU_DATA_LLCTRL_LEN(phy_upd_ind) != pdu_rx->len) {
			goto ull_conn_rx_unknown_rsp_send;
		}

		err = phy_upd_ind_recv(conn, link, rx, pdu_rx);
		if (err) {
   12cde:	e6f7      	b.n	12ad0 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(phy_req) != pdu_rx->len) {
   12ce0:	7f73      	ldrb	r3, [r6, #29]
   12ce2:	2b03      	cmp	r3, #3
   12ce4:	f47f af23 	bne.w	12b2e <ull_conn_rx+0xfe>
		if (!conn->lll.role) {
   12ce8:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   12cec:	2b00      	cmp	r3, #0
   12cee:	f2c0 8627 	blt.w	13940 <ull_conn_rx+0xf10>
			if ((conn->llcp_phy.ack !=
   12cf2:	f894 11bd 	ldrb.w	r1, [r4, #445]	; 0x1bd
			     conn->llcp_phy.req) &&
   12cf6:	f894 01bc 	ldrb.w	r0, [r4, #444]	; 0x1bc
			if ((conn->llcp_phy.ack !=
   12cfa:	4281      	cmp	r1, r0
   12cfc:	d007      	beq.n	12d0e <ull_conn_rx+0x2de>
			      LLCP_PHY_STATE_RSP_WAIT) ||
   12cfe:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   12d02:	f003 0303 	and.w	r3, r3, #3
			     conn->llcp_phy.req) &&
   12d06:	3b01      	subs	r3, #1
   12d08:	2b02      	cmp	r3, #2
   12d0a:	f240 87db 	bls.w	13cc4 <ull_conn_rx+0x1294>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   12d0e:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   12d12:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   12d16:	1a9b      	subs	r3, r3, r2
   12d18:	f003 0303 	and.w	r3, r3, #3
   12d1c:	2b02      	cmp	r3, #2
   12d1e:	f000 8716 	beq.w	13b4e <ull_conn_rx+0x111e>
				     LLCP_ENCRYPTION)) ||
   12d22:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   12d26:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
   12d2a:	429a      	cmp	r2, r3
   12d2c:	f43f af51 	beq.w	12bd2 <ull_conn_rx+0x1a2>
				nack = reject_ext_ind_send(conn, *rx,
   12d30:	4631      	mov	r1, r6
   12d32:	4620      	mov	r0, r4
   12d34:	232a      	movs	r3, #42	; 0x2a
   12d36:	2216      	movs	r2, #22
}
   12d38:	b005      	add	sp, #20
   12d3a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(conn, *rx,
   12d3e:	f7fe bfd5 	b.w	11cec <reject_ext_ind_send>
   12d42:	bf00      	nop
   12d44:	20001078 	.word	0x20001078
   12d48:	200020f8 	.word	0x200020f8
   12d4c:	fffffb03 	.word	0xfffffb03
		if (PDU_DATA_LLCTRL_LEN(length_req) != pdu_rx->len) {
   12d50:	7f73      	ldrb	r3, [r6, #29]
   12d52:	2b09      	cmp	r3, #9
   12d54:	f47f aeeb 	bne.w	12b2e <ull_conn_rx+0xfe>
	if (pdu_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   12d58:	f1b8 0f14 	cmp.w	r8, #20
   12d5c:	f000 84ce 	beq.w	136fc <ull_conn_rx+0xccc>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   12d60:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
	if (/* Local idle, and Peer request then complete the Peer procedure
   12d64:	f894 11ad 	ldrb.w	r1, [r4, #429]	; 0x1ad
	eff_rx_octets = conn->lll.max_rx_octets;
   12d68:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
	eff_tx_octets = conn->lll.max_tx_octets;
   12d6c:	f8b4 9058 	ldrh.w	r9, [r4, #88]	; 0x58
	eff_rx_time = conn->lll.max_rx_time;
   12d70:	f8b4 a05e 	ldrh.w	sl, [r4, #94]	; 0x5e
	eff_tx_time = conn->lll.max_tx_time;
   12d74:	f8b4 b05c 	ldrh.w	fp, [r4, #92]	; 0x5c
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   12d78:	9200      	str	r2, [sp, #0]
	if (/* Local idle, and Peer request then complete the Peer procedure
   12d7a:	4291      	cmp	r1, r2
	eff_rx_octets = conn->lll.max_rx_octets;
   12d7c:	9301      	str	r3, [sp, #4]
	if (/* Local idle, and Peer request then complete the Peer procedure
   12d7e:	f001 810e 	beq.w	13f9e <ull_conn_rx+0x156e>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   12d82:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
	struct node_tx *tx = NULL;
   12d86:	2100      	movs	r1, #0
	       tx) ||
   12d88:	f002 0207 	and.w	r2, r2, #7
   12d8c:	2a02      	cmp	r2, #2
   12d8e:	f000 84dd 	beq.w	1374c <ull_conn_rx+0xd1c>
   12d92:	f896 801f 	ldrb.w	r8, [r6, #31]
		if (pdu_rx->llctrl.opcode != PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) {
   12d96:	f1b8 0f15 	cmp.w	r8, #21
   12d9a:	f43f ae98 	beq.w	12ace <ull_conn_rx+0x9e>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   12d9e:	4608      	mov	r0, r1
   12da0:	49b7      	ldr	r1, [pc, #732]	; (13080 <ull_conn_rx+0x650>)
   12da2:	f7f9 ff69 	bl	cc78 <mem_release>
			if (conn->llcp_length.state ==
   12da6:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
			conn->common.txn_lock = 0U;
   12daa:	f894 20d8 	ldrb.w	r2, [r4, #216]	; 0xd8
			if (conn->llcp_length.state ==
   12dae:	f003 0307 	and.w	r3, r3, #7
			conn->common.txn_lock = 0U;
   12db2:	f36f 0241 	bfc	r2, #1, #1
			if (conn->llcp_length.state ==
   12db6:	2b04      	cmp	r3, #4
			conn->common.txn_lock = 0U;
   12db8:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
			if (conn->llcp_length.state ==
   12dbc:	f47f ae87 	bne.w	12ace <ull_conn_rx+0x9e>
				return -EBUSY;
   12dc0:	f06f 000f 	mvn.w	r0, #15
   12dc4:	e684      	b.n	12ad0 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(ping_rsp) != pdu_rx->len) {
   12dc6:	7f71      	ldrb	r1, [r6, #29]
   12dc8:	2901      	cmp	r1, #1
   12dca:	f47f aeb0 	bne.w	12b2e <ull_conn_rx+0xfe>
		conn->procedure_expire = 0U;
   12dce:	2300      	movs	r3, #0
   12dd0:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   12dd4:	4618      	mov	r0, r3
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   12dd6:	7131      	strb	r1, [r6, #4]
		break;
   12dd8:	e67a      	b.n	12ad0 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(conn_param_req) != pdu_rx->len) {
   12dda:	7f73      	ldrb	r3, [r6, #29]
   12ddc:	2b18      	cmp	r3, #24
   12dde:	f47f aea6 	bne.w	12b2e <ull_conn_rx+0xfe>
		if (conn_upd_curr && (conn_upd_curr != conn)) {
   12de2:	4fa8      	ldr	r7, [pc, #672]	; (13084 <ull_conn_rx+0x654>)
   12de4:	683b      	ldr	r3, [r7, #0]
   12de6:	2b00      	cmp	r3, #0
   12de8:	f000 8450 	beq.w	1368c <ull_conn_rx+0xc5c>
   12dec:	429c      	cmp	r4, r3
   12dee:	f000 844d 	beq.w	1368c <ull_conn_rx+0xc5c>
			nack = reject_ext_ind_send(conn, *rx,
   12df2:	4631      	mov	r1, r6
   12df4:	4620      	mov	r0, r4
   12df6:	2320      	movs	r3, #32
   12df8:	220f      	movs	r2, #15
   12dfa:	e79d      	b.n	12d38 <ull_conn_rx+0x308>
		if (PDU_DATA_LLCTRL_LEN(reject_ind) != pdu_rx->len) {
   12dfc:	7f73      	ldrb	r3, [r6, #29]
   12dfe:	2b02      	cmp	r3, #2
   12e00:	f47f ae95 	bne.w	12b2e <ull_conn_rx+0xfe>
	} else if ((conn->llcp_ack != conn->llcp_req) &&
   12e04:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   12e08:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   12e0c:	429a      	cmp	r2, r3
   12e0e:	d004      	beq.n	12e1a <ull_conn_rx+0x3ea>
   12e10:	f894 20e6 	ldrb.w	r2, [r4, #230]	; 0xe6
   12e14:	2a03      	cmp	r2, #3
   12e16:	f000 875a 	beq.w	13cce <ull_conn_rx+0x129e>
	} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   12e1a:	f894 21bc 	ldrb.w	r2, [r4, #444]	; 0x1bc
   12e1e:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   12e22:	4293      	cmp	r3, r2
   12e24:	f000 8708 	beq.w	13c38 <ull_conn_rx+0x1208>
		rej_ext_ind->error_code = rej_ind->error_code;
   12e28:	f896 1020 	ldrb.w	r1, [r6, #32]
   12e2c:	f886 1021 	strb.w	r1, [r6, #33]	; 0x21
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   12e30:	2923      	cmp	r1, #35	; 0x23
   12e32:	d012      	beq.n	12e5a <ull_conn_rx+0x42a>
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   12e34:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		conn->llcp_phy.pause_tx = 0U;
   12e38:	f894 01bf 	ldrb.w	r0, [r4, #447]	; 0x1bf
		conn->llcp_phy.ack = conn->llcp_phy.req;
   12e3c:	f884 21bd 	strb.w	r2, [r4, #445]	; 0x1bd
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   12e40:	f3c3 0202 	ubfx	r2, r3, #0, #3
   12e44:	f362 1306 	bfi	r3, r2, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   12e48:	f36f 0000 	bfc	r0, #0, #1
		conn->procedure_expire = 0U;
   12e4c:	2200      	movs	r2, #0
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   12e4e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
		conn->llcp_phy.pause_tx = 0U;
   12e52:	f884 01bf 	strb.w	r0, [r4, #447]	; 0x1bf
		conn->procedure_expire = 0U;
   12e56:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	if (!conn->llcp_phy.cmd) {
   12e5a:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   12e5e:	0758      	lsls	r0, r3, #29
   12e60:	f57f ae33 	bpl.w	12aca <ull_conn_rx+0x9a>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   12e64:	231a      	movs	r3, #26
	p->status = rej_ext_ind->error_code;
   12e66:	7731      	strb	r1, [r6, #28]
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   12e68:	7133      	strb	r3, [r6, #4]
	p->tx = conn->lll.phy_tx;
   12e6a:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   12e6e:	f3c3 0302 	ubfx	r3, r3, #0, #3
   12e72:	7773      	strb	r3, [r6, #29]
	p->rx = conn->lll.phy_rx;
   12e74:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   12e78:	f3c3 0302 	ubfx	r3, r3, #0, #3
   12e7c:	77b3      	strb	r3, [r6, #30]
	int nack = 0;
   12e7e:	2000      	movs	r0, #0
   12e80:	e626      	b.n	12ad0 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(version_ind) != pdu_rx->len) {
   12e82:	7f75      	ldrb	r5, [r6, #29]
   12e84:	2d06      	cmp	r5, #6
   12e86:	f47f ae52 	bne.w	12b2e <ull_conn_rx+0xfe>
	if (!conn->llcp_version.tx) {
   12e8a:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
   12e8e:	07df      	lsls	r7, r3, #31
   12e90:	f140 85e8 	bpl.w	13a64 <ull_conn_rx+0x1034>
	} else if (!conn->llcp_version.rx) {
   12e94:	f013 0302 	ands.w	r3, r3, #2
   12e98:	f47f ae17 	bne.w	12aca <ull_conn_rx+0x9a>
		conn->llcp_version.ack = conn->llcp_version.req;
   12e9c:	f894 2138 	ldrb.w	r2, [r4, #312]	; 0x138
		conn->procedure_expire = 0U;
   12ea0:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
		conn->llcp_version.ack = conn->llcp_version.req;
   12ea4:	f884 2139 	strb.w	r2, [r4, #313]	; 0x139
	conn->llcp_version.version_number = v->version_number;
   12ea8:	f896 3020 	ldrb.w	r3, [r6, #32]
   12eac:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   12eb0:	f896 1022 	ldrb.w	r1, [r6, #34]	; 0x22
   12eb4:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
	conn->llcp_version.rx = 1U;
   12eb8:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   12ebc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   12ec0:	f8a4 213c 	strh.w	r2, [r4, #316]	; 0x13c
		sys_le16_to_cpu(v->sub_version_number);
   12ec4:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
   12ec8:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
	conn->llcp_version.rx = 1U;
   12ecc:	f043 0302 	orr.w	r3, r3, #2
		sys_le16_to_cpu(v->sub_version_number);
   12ed0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_version.sub_version_number =
   12ed4:	f8a4 213e 	strh.w	r2, [r4, #318]	; 0x13e
	conn->llcp_version.rx = 1U;
   12ed8:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
	return 0;
   12edc:	2000      	movs	r0, #0
   12ede:	e5f7      	b.n	12ad0 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(ping_req) != pdu_rx->len) {
   12ee0:	7f77      	ldrb	r7, [r6, #29]
   12ee2:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
   12ee6:	2f01      	cmp	r7, #1
   12ee8:	f000 0502 	and.w	r5, r0, #2
   12eec:	f47f ae23 	bne.w	12b36 <ull_conn_rx+0x106>
	if (conn->common.txn_lock) {
   12ef0:	2d00      	cmp	r5, #0
   12ef2:	f040 8628 	bne.w	13b46 <ull_conn_rx+0x1116>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   12ef6:	4862      	ldr	r0, [pc, #392]	; (13080 <ull_conn_rx+0x650>)
   12ef8:	f7f9 fea8 	bl	cc4c <mem_acquire>
	if (!tx) {
   12efc:	4601      	mov	r1, r0
   12efe:	2800      	cmp	r0, #0
   12f00:	f000 838f 	beq.w	13622 <ull_conn_rx+0xbf2>
	conn->common.txn_lock = 1U;
   12f04:	f894 20d8 	ldrb.w	r2, [r4, #216]	; 0xd8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   12f08:	7903      	ldrb	r3, [r0, #4]
	conn->common.txn_lock = 1U;
   12f0a:	f042 0202 	orr.w	r2, r2, #2
   12f0e:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   12f12:	f043 0303 	orr.w	r3, r3, #3
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   12f16:	2213      	movs	r2, #19
	pdu_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
   12f18:	7147      	strb	r7, [r0, #5]
	ctrl_tx_sec_enqueue(conn, tx);
   12f1a:	4620      	mov	r0, r4
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   12f1c:	710b      	strb	r3, [r1, #4]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   12f1e:	71ca      	strb	r2, [r1, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   12f20:	f7fe ffca 	bl	11eb8 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   12f24:	7137      	strb	r7, [r6, #4]
	return 0;
   12f26:	4628      	mov	r0, r5
   12f28:	e5d2      	b.n	12ad0 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(reject_ext_ind) != pdu_rx->len) {
   12f2a:	7f73      	ldrb	r3, [r6, #29]
   12f2c:	2b03      	cmp	r3, #3
   12f2e:	f47f adfe 	bne.w	12b2e <ull_conn_rx+0xfe>
	switch (rej_ext_ind->reject_opcode) {
   12f32:	f896 3020 	ldrb.w	r3, [r6, #32]
   12f36:	3b03      	subs	r3, #3
   12f38:	2b13      	cmp	r3, #19
   12f3a:	f63f adc6 	bhi.w	12aca <ull_conn_rx+0x9a>
   12f3e:	a201      	add	r2, pc, #4	; (adr r2, 12f44 <ull_conn_rx+0x514>)
   12f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   12f44:	000135b3 	.word	0x000135b3
   12f48:	00012acb 	.word	0x00012acb
   12f4c:	00012acb 	.word	0x00012acb
   12f50:	00012acb 	.word	0x00012acb
   12f54:	00012acb 	.word	0x00012acb
   12f58:	00012acb 	.word	0x00012acb
   12f5c:	00012acb 	.word	0x00012acb
   12f60:	00012acb 	.word	0x00012acb
   12f64:	00012acb 	.word	0x00012acb
   12f68:	00012acb 	.word	0x00012acb
   12f6c:	00012acb 	.word	0x00012acb
   12f70:	00012acb 	.word	0x00012acb
   12f74:	0001354d 	.word	0x0001354d
   12f78:	00012acb 	.word	0x00012acb
   12f7c:	00012acb 	.word	0x00012acb
   12f80:	00012acb 	.word	0x00012acb
   12f84:	00012acb 	.word	0x00012acb
   12f88:	000134c3 	.word	0x000134c3
   12f8c:	00012acb 	.word	0x00012acb
   12f90:	00013501 	.word	0x00013501
		if (!conn->lll.role ||
   12f94:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   12f98:	2b00      	cmp	r3, #0
   12f9a:	f6bf adc8 	bge.w	12b2e <ull_conn_rx+0xfe>
   12f9e:	7f75      	ldrb	r5, [r6, #29]
   12fa0:	2d01      	cmp	r5, #1
   12fa2:	f47f adc4 	bne.w	12b2e <ull_conn_rx+0xfe>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   12fa6:	4836      	ldr	r0, [pc, #216]	; (13080 <ull_conn_rx+0x650>)
   12fa8:	f7f9 fe50 	bl	cc4c <mem_acquire>
		if (!tx) {
   12fac:	4601      	mov	r1, r0
   12fae:	2800      	cmp	r0, #0
   12fb0:	f000 8337 	beq.w	13622 <ull_conn_rx+0xbf2>
	conn->llcp_enc.pause_rx = 1U;
   12fb4:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
	conn->lll.enc_rx = 0;
   12fb8:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
	conn->llcp_enc.pause_rx = 1U;
   12fbc:	f023 0305 	bic.w	r3, r3, #5
   12fc0:	f043 0305 	orr.w	r3, r3, #5
	conn->lll.enc_rx = 0;
   12fc4:	f36f 02c3 	bfc	r2, #3, #1
	conn->llcp_enc.pause_rx = 1U;
   12fc8:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
	conn->lll.enc_rx = 0;
   12fcc:	f884 207a 	strb.w	r2, [r4, #122]	; 0x7a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12fd0:	7902      	ldrb	r2, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   12fd2:	7145      	strb	r5, [r0, #5]
	    conn->tx_head &&
   12fd4:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12fd8:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   12fdc:	200b      	movs	r0, #11
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12fde:	710a      	strb	r2, [r1, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   12fe0:	71c8      	strb	r0, [r1, #7]
	if (
   12fe2:	2b00      	cmp	r3, #0
   12fe4:	f000 840f 	beq.w	13806 <ull_conn_rx+0xdd6>
	    !conn->llcp_enc.pause_tx &&
   12fe8:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   12fec:	0795      	lsls	r5, r2, #30
   12fee:	f100 840a 	bmi.w	13806 <ull_conn_rx+0xdd6>
	    !conn->llcp_phy.pause_tx &&
   12ff2:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   12ff6:	07d0      	lsls	r0, r2, #31
   12ff8:	f100 8405 	bmi.w	13806 <ull_conn_rx+0xdd6>
		if (conn->tx_head == conn->tx_data) {
   12ffc:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   13000:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   13002:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   13006:	f000 87e1 	beq.w	13fcc <ull_conn_rx+0x159c>
		} else if (!conn->tx_ctrl) {
   1300a:	2a00      	cmp	r2, #0
   1300c:	f000 87d4 	beq.w	13fb8 <ull_conn_rx+0x1588>
	tx->next = conn->tx_ctrl_last->next;
   13010:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   13014:	681a      	ldr	r2, [r3, #0]
   13016:	600a      	str	r2, [r1, #0]
	conn->tx_ctrl_last->next = tx;
   13018:	6019      	str	r1, [r3, #0]
	conn->tx_ctrl_last = tx;
   1301a:	f8c4 11cc 	str.w	r1, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1301e:	680b      	ldr	r3, [r1, #0]
   13020:	2b00      	cmp	r3, #0
   13022:	f47f ad52 	bne.w	12aca <ull_conn_rx+0x9a>
		conn->tx_data_last = tx;
   13026:	f8c4 11d4 	str.w	r1, [r4, #468]	; 0x1d4
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1302a:	e54e      	b.n	12aca <ull_conn_rx+0x9a>
		if ((!IS_ENABLED(CONFIG_BT_CTLR_SLAVE_FEAT_REQ) &&
   1302c:	7f73      	ldrb	r3, [r6, #29]
   1302e:	2b09      	cmp	r3, #9
   13030:	f47f ad7d 	bne.w	12b2e <ull_conn_rx+0xfe>
   13034:	6a35      	ldr	r5, [r6, #32]
   13036:	6a73      	ldr	r3, [r6, #36]	; 0x24
	feat &= LL_FEAT_BIT_MASK;
   13038:	4913      	ldr	r1, [pc, #76]	; (13088 <ull_conn_rx+0x658>)
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   1303a:	e9d4 204a 	ldrd	r2, r0, [r4, #296]	; 0x128
	feat &= LL_FEAT_BIT_MASK;
   1303e:	4329      	orrs	r1, r5
   13040:	f003 030f 	and.w	r3, r3, #15
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   13044:	400a      	ands	r2, r1
   13046:	4003      	ands	r3, r0
   13048:	e9c4 234a 	strd	r2, r3, [r4, #296]	; 0x128
   1304c:	6a33      	ldr	r3, [r6, #32]
   1304e:	6a75      	ldr	r5, [r6, #36]	; 0x24
	conn->common.fex_valid = 1U;
   13050:	f894 20d8 	ldrb.w	r2, [r4, #216]	; 0xd8
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   13054:	490d      	ldr	r1, [pc, #52]	; (1308c <ull_conn_rx+0x65c>)
	conn->llcp_feature.ack = conn->llcp_feature.req;
   13056:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
   1305a:	f884 0121 	strb.w	r0, [r4, #289]	; 0x121
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   1305e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   13062:	4319      	orrs	r1, r3
   13064:	f005 050f 	and.w	r5, r5, #15
	feat &= LL_FEAT_BIT_MASK;
   13068:	2300      	movs	r3, #0
	conn->common.fex_valid = 1U;
   1306a:	f042 0201 	orr.w	r2, r2, #1
	conn->llcp_feature.features_peer =
   1306e:	e9c4 154c 	strd	r1, r5, [r4, #304]	; 0x130
	conn->common.fex_valid = 1U;
   13072:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
	conn->procedure_expire = 0U;
   13076:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   1307a:	4618      	mov	r0, r3
}
   1307c:	e528      	b.n	12ad0 <ull_conn_rx+0xa0>
   1307e:	bf00      	nop
   13080:	200020f8 	.word	0x200020f8
   13084:	20002074 	.word	0x20002074
   13088:	087830d0 	.word	0x087830d0
   1308c:	08783050 	.word	0x08783050
		if (!conn->lll.role ||
   13090:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   13094:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
   13098:	2b00      	cmp	r3, #0
   1309a:	f000 0502 	and.w	r5, r0, #2
   1309e:	f6bf ad4a 	bge.w	12b36 <ull_conn_rx+0x106>
   130a2:	7f77      	ldrb	r7, [r6, #29]
   130a4:	2f09      	cmp	r7, #9
   130a6:	f47f ad46 	bne.w	12b36 <ull_conn_rx+0x106>
	if (conn->common.txn_lock) {
   130aa:	2d00      	cmp	r5, #0
   130ac:	f47f ad0d 	bne.w	12aca <ull_conn_rx+0x9a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   130b0:	48e1      	ldr	r0, [pc, #900]	; (13438 <ull_conn_rx+0xa08>)
   130b2:	f7f9 fdcb 	bl	cc4c <mem_acquire>
	if (!tx) {
   130b6:	4601      	mov	r1, r0
   130b8:	2800      	cmp	r0, #0
   130ba:	f000 82b2 	beq.w	13622 <ull_conn_rx+0xbf2>
	conn->common.txn_lock = 1U;
   130be:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
	feat &= LL_FEAT_BIT_MASK;
   130c2:	48de      	ldr	r0, [pc, #888]	; (1343c <ull_conn_rx+0xa0c>)
	conn->common.txn_lock = 1U;
   130c4:	f043 0302 	orr.w	r3, r3, #2
   130c8:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
   130cc:	6a32      	ldr	r2, [r6, #32]
   130ce:	6a73      	ldr	r3, [r6, #36]	; 0x24
	feat &= LL_FEAT_BIT_MASK;
   130d0:	4310      	orrs	r0, r2
   130d2:	f003 020f 	and.w	r2, r3, #15
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   130d6:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   130da:	4018      	ands	r0, r3
   130dc:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
   130e0:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
   130e4:	4013      	ands	r3, r2
   130e6:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
   130ea:	f8d6 c020 	ldr.w	ip, [r6, #32]
   130ee:	6a72      	ldr	r2, [r6, #36]	; 0x24
	conn->common.fex_valid = 1U;
   130f0:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   130f4:	48d2      	ldr	r0, [pc, #840]	; (13440 <ull_conn_rx+0xa10>)
   130f6:	f02c 0c80 	bic.w	ip, ip, #128	; 0x80
   130fa:	ea4c 0000 	orr.w	r0, ip, r0
   130fe:	f002 020f 	and.w	r2, r2, #15
	conn->common.fex_valid = 1U;
   13102:	f043 0301 	orr.w	r3, r3, #1
	conn->llcp_feature.features_peer =
   13106:	e9c4 024c 	strd	r0, r2, [r4, #304]	; 0x130
	conn->common.fex_valid = 1U;
   1310a:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
__ssp_bos_icheck3(memset, void *, int)
   1310e:	608d      	str	r5, [r1, #8]
   13110:	60cd      	str	r5, [r1, #12]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   13112:	714f      	strb	r7, [r1, #5]
	feat_result &= 0xFF;
   13114:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   13118:	790b      	ldrb	r3, [r1, #4]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   1311a:	71cf      	strb	r7, [r1, #7]
	feat_result &= 0xFF;
   1311c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   13120:	f043 0303 	orr.w	r3, r3, #3
	dst[1] = val >> 8;
   13124:	f04f 0c41 	mov.w	ip, #65	; 0x41
	dst[0] = val;
   13128:	2701      	movs	r7, #1
	ctrl_tx_sec_enqueue(conn, tx);
   1312a:	4620      	mov	r0, r4
   1312c:	720a      	strb	r2, [r1, #8]
	dst[1] = val >> 8;
   1312e:	72cd      	strb	r5, [r1, #11]
	dst[0] = val;
   13130:	730d      	strb	r5, [r1, #12]
	dst[1] = val >> 8;
   13132:	734d      	strb	r5, [r1, #13]
	dst[0] = val;
   13134:	738d      	strb	r5, [r1, #14]
	dst[1] = val >> 8;
   13136:	73cd      	strb	r5, [r1, #15]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   13138:	710b      	strb	r3, [r1, #4]
   1313a:	f881 c009 	strb.w	ip, [r1, #9]
	dst[0] = val;
   1313e:	728f      	strb	r7, [r1, #10]
	ctrl_tx_sec_enqueue(conn, tx);
   13140:	f7fe feba 	bl	11eb8 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   13144:	7137      	strb	r7, [r6, #4]
	return 0;
   13146:	4628      	mov	r0, r5
   13148:	e4c2      	b.n	12ad0 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(unknown_rsp) != pdu_rx->len) {
   1314a:	7f73      	ldrb	r3, [r6, #29]
   1314c:	2b02      	cmp	r3, #2
   1314e:	f47f acee 	bne.w	12b2e <ull_conn_rx+0xfe>
		} else if ((conn->llcp_conn_param.ack !=
   13152:	f894 1185 	ldrb.w	r1, [r4, #389]	; 0x185
   13156:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   1315a:	f896 2020 	ldrb.w	r2, [r6, #32]
   1315e:	4299      	cmp	r1, r3
   13160:	d002      	beq.n	13168 <ull_conn_rx+0x738>
			    conn->llcp_conn_param.req) &&
   13162:	2a0f      	cmp	r2, #15
   13164:	f000 84a4 	beq.w	13ab0 <ull_conn_rx+0x1080>
		} else if ((conn->llcp_length.req != conn->llcp_length.ack) &&
   13168:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
   1316c:	f894 11ad 	ldrb.w	r1, [r4, #429]	; 0x1ad
   13170:	4299      	cmp	r1, r3
   13172:	d002      	beq.n	1317a <ull_conn_rx+0x74a>
   13174:	2a14      	cmp	r2, #20
   13176:	f000 8595 	beq.w	13ca4 <ull_conn_rx+0x1274>
		} else if ((conn->llcp_phy.req != conn->llcp_phy.ack) &&
   1317a:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   1317e:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   13182:	428b      	cmp	r3, r1
   13184:	d002      	beq.n	1318c <ull_conn_rx+0x75c>
   13186:	2a16      	cmp	r2, #22
   13188:	f000 85c2 	beq.w	13d10 <ull_conn_rx+0x12e0>
			switch (llctrl->unknown_rsp.type) {
   1318c:	2a12      	cmp	r2, #18
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1318e:	bf04      	itt	eq
   13190:	2301      	moveq	r3, #1
   13192:	7133      	strbeq	r3, [r6, #4]
		conn->procedure_expire = 0U;
   13194:	2300      	movs	r3, #0
   13196:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   1319a:	4618      	mov	r0, r3
		break;
   1319c:	e498      	b.n	12ad0 <ull_conn_rx+0xa0>
		if (!conn->lll.role ||
   1319e:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   131a2:	2b00      	cmp	r3, #0
   131a4:	f6bf acc3 	bge.w	12b2e <ull_conn_rx+0xfe>
   131a8:	7f73      	ldrb	r3, [r6, #29]
   131aa:	2b0c      	cmp	r3, #12
   131ac:	f47f acbf 	bne.w	12b2e <ull_conn_rx+0xfe>
	instant = sys_le16_to_cpu(pdu->llctrl.conn_update_ind.instant);
   131b0:	f8b6 0029 	ldrh.w	r0, [r6, #41]	; 0x29
	if (((instant - conn->lll.event_counter) & 0xFFFF) > 0x7FFF) {
   131b4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   131b6:	1ac3      	subs	r3, r0, r3
   131b8:	041b      	lsls	r3, r3, #16
   131ba:	f100 8598 	bmi.w	13cee <ull_conn_rx+0x12be>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   131be:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   131c2:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   131c6:	1a9b      	subs	r3, r3, r2
   131c8:	f003 0303 	and.w	r3, r3, #3
   131cc:	2b02      	cmp	r3, #2
   131ce:	f000 862b 	beq.w	13e28 <ull_conn_rx+0x13f8>
	if (!conn_upd_curr) {
   131d2:	4b9c      	ldr	r3, [pc, #624]	; (13444 <ull_conn_rx+0xa14>)
   131d4:	681a      	ldr	r2, [r3, #0]
   131d6:	2a00      	cmp	r2, #0
   131d8:	f000 8638 	beq.w	13e4c <ull_conn_rx+0x141c>
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
   131dc:	f896 3020 	ldrb.w	r3, [r6, #32]
   131e0:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) *
   131e4:	f8b6 1021 	ldrh.w	r1, [r6, #33]	; 0x21
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   131e8:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) *
   131ec:	f240 42e2 	movw	r2, #1250	; 0x4e2
   131f0:	fb02 f201 	mul.w	r2, r2, r1
	conn->llcp_cu.win_offset_us =
   131f4:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.interval);
   131f8:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
   131fc:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
   13200:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_cu.interval =
   13204:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.latency);
   13208:	f896 1026 	ldrb.w	r1, [r6, #38]	; 0x26
   1320c:	f896 2025 	ldrb.w	r2, [r6, #37]	; 0x25
   13210:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_cu.latency =
   13214:	f8a4 2112 	strh.w	r2, [r4, #274]	; 0x112
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   13218:	f896 1027 	ldrb.w	r1, [r6, #39]	; 0x27
	conn->llcp_cu.ack--;
   1321c:	f894 210d 	ldrb.w	r2, [r4, #269]	; 0x10d
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   13220:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
	conn->llcp.conn_upd.instant = instant;
   13224:	f8a4 00e8 	strh.w	r0, [r4, #232]	; 0xe8
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   13228:	f023 030f 	bic.w	r3, r3, #15
	link->mem = conn->llcp_rx;
   1322c:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   13230:	f043 0308 	orr.w	r3, r3, #8
	conn->llcp_cu.ack--;
   13234:	3a01      	subs	r2, #1
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   13236:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
	conn->llcp_cu.ack--;
   1323a:	f884 210d 	strb.w	r2, [r4, #269]	; 0x10d
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   1323e:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
	conn->llcp_cu.timeout =
   13242:	f8a4 1114 	strh.w	r1, [r4, #276]	; 0x114
	link->mem = conn->llcp_rx;
   13246:	6078      	str	r0, [r7, #4]
	(*rx)->hdr.link = link;
   13248:	682b      	ldr	r3, [r5, #0]
   1324a:	601f      	str	r7, [r3, #0]
	conn->llcp_rx = *rx;
   1324c:	682b      	ldr	r3, [r5, #0]
   1324e:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
	*rx = NULL;
   13252:	2300      	movs	r3, #0
   13254:	602b      	str	r3, [r5, #0]
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   13256:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   1325a:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
   1325e:	4293      	cmp	r3, r2
   13260:	d098      	beq.n	13194 <ull_conn_rx+0x764>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
   13262:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   13266:	f003 0307 	and.w	r3, r3, #7
   1326a:	2b04      	cmp	r3, #4
   1326c:	d192      	bne.n	13194 <ull_conn_rx+0x764>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1326e:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
		if (err) {
   13272:	e78f      	b.n	13194 <ull_conn_rx+0x764>
		((!conn->llcp_enc.refresh &&
   13274:	f1b8 0f07 	cmp.w	r8, #7
   13278:	f43f af67 	beq.w	1314a <ull_conn_rx+0x71a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
   1327c:	f1b8 0f02 	cmp.w	r8, #2
   13280:	f040 81c5 	bne.w	1360e <ull_conn_rx+0xbde>
		if (PDU_DATA_LLCTRL_LEN(terminate_ind) != pdu_rx->len) {
   13284:	7f73      	ldrb	r3, [r6, #29]
   13286:	2b02      	cmp	r3, #2
   13288:	f47f ac51 	bne.w	12b2e <ull_conn_rx+0xfe>
	conn->llcp_terminate.reason_peer = pdu->llctrl.terminate_ind.error_code;
   1328c:	f896 3020 	ldrb.w	r3, [r6, #32]
   13290:	f884 3143 	strb.w	r3, [r4, #323]	; 0x143
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   13294:	2301      	movs	r3, #1
   13296:	7133      	strb	r3, [r6, #4]
	int nack = 0;
   13298:	2000      	movs	r0, #0
}
   1329a:	e419      	b.n	12ad0 <ull_conn_rx+0xa0>
		if (!conn->lll.role ||
   1329c:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   132a0:	2b00      	cmp	r3, #0
   132a2:	f6bf ac44 	bge.w	12b2e <ull_conn_rx+0xfe>
   132a6:	7f73      	ldrb	r3, [r6, #29]
   132a8:	2b08      	cmp	r3, #8
   132aa:	f47f ac40 	bne.w	12b2e <ull_conn_rx+0xfe>
	instant = sys_le16_to_cpu(pdu->llctrl.chan_map_ind.instant);
   132ae:	f8b6 0025 	ldrh.w	r0, [r6, #37]	; 0x25
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   132b2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   132b4:	1ac3      	subs	r3, r0, r3
   132b6:	041f      	lsls	r7, r3, #16
   132b8:	f100 8519 	bmi.w	13cee <ull_conn_rx+0x12be>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   132bc:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   132c0:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   132c4:	1a9b      	subs	r3, r3, r2
   132c6:	f003 0303 	and.w	r3, r3, #3
   132ca:	2b02      	cmp	r3, #2
   132cc:	f000 85ac 	beq.w	13e28 <ull_conn_rx+0x13f8>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   132d0:	4633      	mov	r3, r6
	conn->llcp.chan_map.initiate = 0U;
   132d2:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   132d6:	f853 5f20 	ldr.w	r5, [r3, #32]!
   132da:	f8c4 50e9 	str.w	r5, [r4, #233]	; 0xe9
   132de:	791b      	ldrb	r3, [r3, #4]
   132e0:	f884 30ed 	strb.w	r3, [r4, #237]	; 0xed
	conn->llcp_ack -= 2U;
   132e4:	3a02      	subs	r2, #2
	conn->llcp.chan_map.initiate = 0U;
   132e6:	f36f 0100 	bfc	r1, #0, #1
	conn->llcp_type = LLCP_CHAN_MAP;
   132ea:	2502      	movs	r5, #2
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   132ec:	2301      	movs	r3, #1
	conn->llcp.chan_map.instant = instant;
   132ee:	f8a4 00ee 	strh.w	r0, [r4, #238]	; 0xee
	conn->llcp_ack -= 2U;
   132f2:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
	conn->llcp.chan_map.initiate = 0U;
   132f6:	f884 10e8 	strb.w	r1, [r4, #232]	; 0xe8
	conn->llcp_type = LLCP_CHAN_MAP;
   132fa:	f884 50e6 	strb.w	r5, [r4, #230]	; 0xe6
	int nack = 0;
   132fe:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   13300:	7133      	strb	r3, [r6, #4]
		if (err) {
   13302:	f7ff bbe5 	b.w	12ad0 <ull_conn_rx+0xa0>
		if (!conn->lll.role ||
   13306:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1330a:	2b00      	cmp	r3, #0
   1330c:	f6bf ac0f 	bge.w	12b2e <ull_conn_rx+0xfe>
   13310:	7f73      	ldrb	r3, [r6, #29]
   13312:	2b17      	cmp	r3, #23
   13314:	f47f ac0b 	bne.w	12b2e <ull_conn_rx+0xfe>
		if (unlikely(((conn->llcp_req - conn->llcp_ack) & 0x03) ==
   13318:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   1331c:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   13320:	1a9b      	subs	r3, r3, r2
   13322:	f003 0303 	and.w	r3, r3, #3
   13326:	2b02      	cmp	r3, #2
   13328:	f000 862c 	beq.w	13f84 <ull_conn_rx+0x1554>
   1332c:	4633      	mov	r3, r6
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   1332e:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
   13332:	f853 1f20 	ldr.w	r1, [r3, #32]!
   13336:	685b      	ldr	r3, [r3, #4]
   13338:	f8c4 316d 	str.w	r3, [r4, #365]	; 0x16d
   1333c:	f8c4 1169 	str.w	r1, [r4, #361]	; 0x169
		conn->llcp_enc.ediv[0] = pdu_rx->llctrl.enc_req.ediv[0];
   13340:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
   13344:	f884 3167 	strb.w	r3, [r4, #359]	; 0x167
		conn->llcp_enc.ediv[1] = pdu_rx->llctrl.enc_req.ediv[1];
   13348:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
   1334c:	f884 3168 	strb.w	r3, [r4, #360]	; 0x168
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   13350:	6829      	ldr	r1, [r5, #0]
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   13352:	2301      	movs	r3, #1
   13354:	f363 0201 	bfi	r2, r3, #0, #2
   13358:	f884 20f4 	strb.w	r2, [r4, #244]	; 0xf4
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1335c:	710b      	strb	r3, [r1, #4]
		conn->llcp_ack -= 2U;
   1335e:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
		conn->llcp_enc.pause_rx = 1U;
   13362:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
		conn->procedure_expire = conn->procedure_reload;
   13366:	f8b4 10c6 	ldrh.w	r1, [r4, #198]	; 0xc6
		conn->llcp_ack -= 2U;
   1336a:	3a02      	subs	r2, #2
   1336c:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
		conn->llcp_type = LLCP_ENCRYPTION;
   13370:	2003      	movs	r0, #3
   13372:	4632      	mov	r2, r6
   13374:	f884 00e6 	strb.w	r0, [r4, #230]	; 0xe6
   13378:	f852 0f2a 	ldr.w	r0, [r2, #42]!
   1337c:	6852      	ldr	r2, [r2, #4]
   1337e:	f8c4 20fa 	str.w	r2, [r4, #250]	; 0xfa
   13382:	f8c4 00f6 	str.w	r0, [r4, #246]	; 0xf6
   13386:	f8d6 2032 	ldr.w	r2, [r6, #50]	; 0x32
   1338a:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
		conn->llcp_enc.pause_rx = 1U;
   1338e:	f043 0301 	orr.w	r3, r3, #1
   13392:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
		conn->procedure_expire = conn->procedure_reload;
   13396:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
	int nack = 0;
   1339a:	2000      	movs	r0, #0
		break;
   1339c:	f7ff bb98 	b.w	12ad0 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   133a0:	7f73      	ldrb	r3, [r6, #29]
   133a2:	2b01      	cmp	r3, #1
   133a4:	f47f abc3 	bne.w	12b2e <ull_conn_rx+0xfe>
	} else if (!conn->lll.role) {
   133a8:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   133ac:	2b00      	cmp	r3, #0
   133ae:	f2c0 815b 	blt.w	13668 <ull_conn_rx+0xc38>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   133b2:	4821      	ldr	r0, [pc, #132]	; (13438 <ull_conn_rx+0xa08>)
   133b4:	f7f9 fc4a 	bl	cc4c <mem_acquire>
		if (!tx) {
   133b8:	2800      	cmp	r0, #0
   133ba:	f000 8132 	beq.w	13622 <ull_conn_rx+0xbf2>
	conn->llcp_enc.pause_rx = 1U;
   133be:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	conn->lll.enc_rx = 0;
   133c2:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   133c6:	7902      	ldrb	r2, [r0, #4]
	conn->llcp_enc.pause_rx = 1U;
   133c8:	f041 0101 	orr.w	r1, r1, #1
   133cc:	f884 1166 	strb.w	r1, [r4, #358]	; 0x166
	conn->lll.enc_rx = 0;
   133d0:	f023 0318 	bic.w	r3, r3, #24
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   133d4:	2101      	movs	r1, #1
	conn->lll.enc_rx = 0;
   133d6:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   133da:	7141      	strb	r1, [r0, #5]
	    conn->tx_head &&
   133dc:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   133e0:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   133e4:	210b      	movs	r1, #11
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   133e6:	7102      	strb	r2, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   133e8:	71c1      	strb	r1, [r0, #7]
	if (
   133ea:	2b00      	cmp	r3, #0
   133ec:	f000 817b 	beq.w	136e6 <ull_conn_rx+0xcb6>
	    !conn->llcp_enc.pause_tx &&
   133f0:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   133f4:	0791      	lsls	r1, r2, #30
   133f6:	f100 8176 	bmi.w	136e6 <ull_conn_rx+0xcb6>
	    !conn->llcp_phy.pause_tx &&
   133fa:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   133fe:	07d2      	lsls	r2, r2, #31
   13400:	f100 8171 	bmi.w	136e6 <ull_conn_rx+0xcb6>
		if (conn->tx_head == conn->tx_data) {
   13404:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   13408:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   1340a:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   1340e:	f000 863f 	beq.w	14090 <ull_conn_rx+0x1660>
		} else if (!conn->tx_ctrl) {
   13412:	2a00      	cmp	r2, #0
   13414:	f000 8633 	beq.w	1407e <ull_conn_rx+0x164e>
	tx->next = conn->tx_ctrl_last->next;
   13418:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   1341c:	681a      	ldr	r2, [r3, #0]
   1341e:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   13420:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   13422:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   13426:	6803      	ldr	r3, [r0, #0]
   13428:	2b00      	cmp	r3, #0
   1342a:	f47f ab4e 	bne.w	12aca <ull_conn_rx+0x9a>
		conn->tx_data_last = tx;
   1342e:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   13432:	f7ff bb4a 	b.w	12aca <ull_conn_rx+0x9a>
   13436:	bf00      	nop
   13438:	200020f8 	.word	0x200020f8
   1343c:	087830d0 	.word	0x087830d0
   13440:	08783050 	.word	0x08783050
   13444:	20002074 	.word	0x20002074
		if (PDU_DATA_LLCTRL_LEN(start_enc_rsp) != pdu_rx->len) {
   13448:	7f73      	ldrb	r3, [r6, #29]
   1344a:	2b01      	cmp	r3, #1
   1344c:	f47f ab6f 	bne.w	12b2e <ull_conn_rx+0xfe>
		if (conn->lll.role) {
   13450:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   13454:	2b00      	cmp	r3, #0
   13456:	f280 80ec 	bge.w	13632 <ull_conn_rx+0xc02>
			if ((conn->llcp_req != conn->llcp_ack) &&
   1345a:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
   1345e:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   13462:	4283      	cmp	r3, r0
   13464:	f000 84e4 	beq.w	13e30 <ull_conn_rx+0x1400>
   13468:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   1346c:	2b03      	cmp	r3, #3
   1346e:	f47f ab5e 	bne.w	12b2e <ull_conn_rx+0xfe>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   13472:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   13476:	f36f 0301 	bfc	r3, #0, #2
   1347a:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
		if (conn->llcp_enc.refresh) {
   1347e:	074e      	lsls	r6, r1, #29
   13480:	f57f ae88 	bpl.w	13194 <ull_conn_rx+0x764>
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   13484:	682b      	ldr	r3, [r5, #0]
			conn->llcp_enc.refresh = 0U;
   13486:	f36f 0182 	bfc	r1, #2, #1
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   1348a:	2217      	movs	r2, #23
			conn->llcp_enc.refresh = 0U;
   1348c:	f884 1166 	strb.w	r1, [r4, #358]	; 0x166
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   13490:	711a      	strb	r2, [r3, #4]
		conn->procedure_expire = 0U;
   13492:	e67f      	b.n	13194 <ull_conn_rx+0x764>
		 (conn->llcp_enc.refresh &&
   13494:	f1b8 0f02 	cmp.w	r8, #2
   13498:	f43f aef4 	beq.w	13284 <ull_conn_rx+0x854>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   1349c:	f1b8 0f0b 	cmp.w	r8, #11
   134a0:	f43f ab41 	beq.w	12b26 <ull_conn_rx+0xf6>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   134a4:	f1b8 0f04 	cmp.w	r8, #4
   134a8:	f47f aaf2 	bne.w	12a90 <ull_conn_rx+0x60>
   134ac:	f7ff bb3f 	b.w	12b2e <ull_conn_rx+0xfe>
			tx->next = conn->tx_head;
   134b0:	6001      	str	r1, [r0, #0]
				conn->tx_ctrl = tx;
   134b2:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   134b6:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   134ba:	2900      	cmp	r1, #0
   134bc:	f47f ab05 	bne.w	12aca <ull_conn_rx+0x9a>
   134c0:	e7b5      	b.n	1342e <ull_conn_rx+0x9fe>
		if (conn->llcp_length.ack != conn->llcp_length.req) {
   134c2:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
   134c6:	f894 31ad 	ldrb.w	r3, [r4, #429]	; 0x1ad
   134ca:	4293      	cmp	r3, r2
   134cc:	f43f aafd 	beq.w	12aca <ull_conn_rx+0x9a>
	conn->procedure_expire = 0U;
   134d0:	2300      	movs	r3, #0
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   134d2:	2109      	movs	r1, #9
	conn->llcp_length.ack = conn->llcp_length.req;
   134d4:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
	conn->procedure_expire = 0U;
   134d8:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   134dc:	7771      	strb	r1, [r6, #29]
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   134de:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   134e2:	f8b4 7058 	ldrh.w	r7, [r4, #88]	; 0x58
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
   134e6:	f8b4 505e 	ldrh.w	r5, [r4, #94]	; 0x5e
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   134ea:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   134ee:	8432      	strh	r2, [r6, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   134f0:	2215      	movs	r2, #21
	int nack = 0;
   134f2:	4618      	mov	r0, r3
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   134f4:	84b7      	strh	r7, [r6, #36]	; 0x24
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
   134f6:	8475      	strh	r5, [r6, #34]	; 0x22
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   134f8:	84f1      	strh	r1, [r6, #38]	; 0x26
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   134fa:	77f2      	strb	r2, [r6, #31]
	if (err) {
   134fc:	f7ff bae8 	b.w	12ad0 <ull_conn_rx+0xa0>
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   13500:	f894 01bc 	ldrb.w	r0, [r4, #444]	; 0x1bc
   13504:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   13508:	4283      	cmp	r3, r0
   1350a:	f43f aade 	beq.w	12aca <ull_conn_rx+0x9a>
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   1350e:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
   13512:	2a23      	cmp	r2, #35	; 0x23
   13514:	d012      	beq.n	1353c <ull_conn_rx+0xb0c>
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   13516:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		conn->llcp_phy.pause_tx = 0U;
   1351a:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
		conn->llcp_phy.ack = conn->llcp_phy.req;
   1351e:	f884 01bd 	strb.w	r0, [r4, #445]	; 0x1bd
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   13522:	f3c3 0002 	ubfx	r0, r3, #0, #3
   13526:	f360 1306 	bfi	r3, r0, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   1352a:	f36f 0100 	bfc	r1, #0, #1
		conn->procedure_expire = 0U;
   1352e:	2000      	movs	r0, #0
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   13530:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
		conn->llcp_phy.pause_tx = 0U;
   13534:	f884 11bf 	strb.w	r1, [r4, #447]	; 0x1bf
		conn->procedure_expire = 0U;
   13538:	f8a4 00c8 	strh.w	r0, [r4, #200]	; 0xc8
	if (!conn->llcp_phy.cmd) {
   1353c:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   13540:	075d      	lsls	r5, r3, #29
   13542:	f57f aac2 	bpl.w	12aca <ull_conn_rx+0x9a>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   13546:	231a      	movs	r3, #26
	p->status = rej_ext_ind->error_code;
   13548:	7732      	strb	r2, [r6, #28]
   1354a:	e48d      	b.n	12e68 <ull_conn_rx+0x438>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   1354c:	f894 2185 	ldrb.w	r2, [r4, #389]	; 0x185
   13550:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   13554:	429a      	cmp	r2, r3
   13556:	f43f aab8 	beq.w	12aca <ull_conn_rx+0x9a>
	if (!lll->role && (rej_ext_ind->error_code ==
   1355a:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
   1355e:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
   13562:	2900      	cmp	r1, #0
   13564:	f2c0 857a 	blt.w	1405c <ull_conn_rx+0x162c>
   13568:	2a1a      	cmp	r2, #26
   1356a:	f000 8606 	beq.w	1417a <ull_conn_rx+0x174a>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   1356e:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   13572:	f002 0107 	and.w	r1, r2, #7
   13576:	2904      	cmp	r1, #4
   13578:	f000 8535 	beq.w	13fe6 <ull_conn_rx+0x15b6>
	if (!conn->llcp_conn_param.cmd) {
   1357c:	0710      	lsls	r0, r2, #28
   1357e:	f57f aaa4 	bpl.w	12aca <ull_conn_rx+0x9a>
	cu->status = rej_ext_ind->error_code;
   13582:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   13586:	7733      	strb	r3, [r6, #28]
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   13588:	2216      	movs	r2, #22
   1358a:	7132      	strb	r2, [r6, #4]
	cu->interval = lll->interval;
   1358c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
	cu->timeout = conn->supervision_reload *
   1358e:	f8b4 20c2 	ldrh.w	r2, [r4, #194]	; 0xc2
	cu->latency = lll->latency;
   13592:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
	cu->interval = lll->interval;
   13594:	83f3      	strh	r3, [r6, #30]
	cu->timeout = conn->supervision_reload *
   13596:	fb03 f202 	mul.w	r2, r3, r2
		      lll->interval * 125U / 1000;
   1359a:	237d      	movs	r3, #125	; 0x7d
   1359c:	fb03 f302 	mul.w	r3, r3, r2
	cu->latency = lll->latency;
   135a0:	8431      	strh	r1, [r6, #32]
		      lll->interval * 125U / 1000;
   135a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	int nack = 0;
   135a6:	2000      	movs	r0, #0
		      lll->interval * 125U / 1000;
   135a8:	fbb3 f3f2 	udiv	r3, r3, r2
	cu->timeout = conn->supervision_reload *
   135ac:	8473      	strh	r3, [r6, #34]	; 0x22
	if (err) {
   135ae:	f7ff ba8f 	b.w	12ad0 <ull_conn_rx+0xa0>
		if ((conn->llcp_ack != conn->llcp_req) &&
   135b2:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   135b6:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   135ba:	429a      	cmp	r2, r3
   135bc:	f43f aa85 	beq.w	12aca <ull_conn_rx+0x9a>
   135c0:	f894 20e6 	ldrb.w	r2, [r4, #230]	; 0xe6
   135c4:	2a03      	cmp	r2, #3
   135c6:	f47f aa80 	bne.w	12aca <ull_conn_rx+0x9a>
	conn->llcp_enc.pause_rx = 0U;
   135ca:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	conn->llcp_ack = conn->llcp_req;
   135ce:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
	conn->llcp_enc.pause_rx = 0U;
   135d2:	f022 0203 	bic.w	r2, r2, #3
	conn->procedure_expire = 0U;
   135d6:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   135d8:	f884 2166 	strb.w	r2, [r4, #358]	; 0x166
	conn->procedure_expire = 0U;
   135dc:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	pdu_rx->llctrl.reject_ind.error_code = rej_ext_ind->error_code;
   135e0:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
   135e4:	f886 2020 	strb.w	r2, [r6, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   135e8:	220d      	movs	r2, #13
	int nack = 0;
   135ea:	4618      	mov	r0, r3
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   135ec:	77f2      	strb	r2, [r6, #31]
	if (err) {
   135ee:	f7ff ba6f 	b.w	12ad0 <ull_conn_rx+0xa0>
	       (conn->lll.role &&
   135f2:	2800      	cmp	r0, #0
   135f4:	f43f ae3e 	beq.w	13274 <ull_conn_rx+0x844>
		 (conn->llcp_enc.refresh &&
   135f8:	f1b8 0f02 	cmp.w	r8, #2
   135fc:	f43f ae42 	beq.w	13284 <ull_conn_rx+0x854>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   13600:	f1b8 0f0b 	cmp.w	r8, #11
   13604:	d02c      	beq.n	13660 <ull_conn_rx+0xc30>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   13606:	f1b8 0f03 	cmp.w	r8, #3
   1360a:	f43f ae81 	beq.w	13310 <ull_conn_rx+0x8e0>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   1360e:	f1b8 0f06 	cmp.w	r8, #6
   13612:	f47f aa44 	bne.w	12a9e <ull_conn_rx+0x6e>
		if (PDU_DATA_LLCTRL_LEN(start_enc_rsp) != pdu_rx->len) {
   13616:	7f73      	ldrb	r3, [r6, #29]
   13618:	2b01      	cmp	r3, #1
   1361a:	f43f af1e 	beq.w	1345a <ull_conn_rx+0xa2a>
   1361e:	f7ff ba86 	b.w	12b2e <ull_conn_rx+0xfe>
		*err = -ENOBUFS;
   13622:	f06f 0068 	mvn.w	r0, #104	; 0x68
   13626:	f7ff ba53 	b.w	12ad0 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(start_enc_rsp) != pdu_rx->len) {
   1362a:	7f73      	ldrb	r3, [r6, #29]
   1362c:	2b01      	cmp	r3, #1
   1362e:	f47f aa7e 	bne.w	12b2e <ull_conn_rx+0xfe>
			conn->llcp_enc.pause_rx = 0U;
   13632:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
   13636:	f021 0103 	bic.w	r1, r1, #3
   1363a:	f884 1166 	strb.w	r1, [r4, #358]	; 0x166
   1363e:	e71e      	b.n	1347e <ull_conn_rx+0xa4e>
			conn->tx_data = conn->tx_data->next;
   13640:	680a      	ldr	r2, [r1, #0]
   13642:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   13646:	2b00      	cmp	r3, #0
   13648:	f47f aaa2 	bne.w	12b90 <ull_conn_rx+0x160>
			tx->next = conn->tx_head->next;
   1364c:	680b      	ldr	r3, [r1, #0]
   1364e:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   13650:	6008      	str	r0, [r1, #0]
				conn->tx_ctrl = tx;
   13652:	6801      	ldr	r1, [r0, #0]
				conn->tx_ctrl_last = tx;
   13654:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
	if (!tx->next) {
   13658:	2900      	cmp	r1, #0
   1365a:	f47f aa36 	bne.w	12aca <ull_conn_rx+0x9a>
   1365e:	e6e6      	b.n	1342e <ull_conn_rx+0x9fe>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   13660:	7f73      	ldrb	r3, [r6, #29]
   13662:	2b01      	cmp	r3, #1
   13664:	f47f aa63 	bne.w	12b2e <ull_conn_rx+0xfe>
		conn->lll.enc_tx = 0;
   13668:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   1366c:	f36f 1304 	bfc	r3, #4, #1
   13670:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
		goto pause_enc_rsp_send_exit;
   13674:	f7ff ba29 	b.w	12aca <ull_conn_rx+0x9a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   13678:	790b      	ldrb	r3, [r1, #4]
   1367a:	f003 0303 	and.w	r3, r3, #3
   1367e:	2b03      	cmp	r3, #3
   13680:	f000 81e6 	beq.w	13a50 <ull_conn_rx+0x1020>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   13684:	f8c4 11c8 	str.w	r1, [r4, #456]	; 0x1c8
   13688:	f7ff ba84 	b.w	12b94 <ull_conn_rx+0x164>
		if (!conn->lll.role) {
   1368c:	f994 0039 	ldrsb.w	r0, [r4, #57]	; 0x39
   13690:	f894 2185 	ldrb.w	r2, [r4, #389]	; 0x185
   13694:	f894 c184 	ldrb.w	ip, [r4, #388]	; 0x184
   13698:	9200      	str	r2, [sp, #0]
   1369a:	2800      	cmp	r0, #0
   1369c:	f2c0 80be 	blt.w	1381c <ull_conn_rx+0xdec>
			if ((conn->llcp_conn_param.req !=
   136a0:	4562      	cmp	r2, ip
   136a2:	d009      	beq.n	136b8 <ull_conn_rx+0xc88>
			    ((conn->llcp_conn_param.state ==
   136a4:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
					conn->llcp_conn_param.ack) &&
   136a8:	f012 0207 	ands.w	r2, r2, #7
   136ac:	f000 8304 	beq.w	13cb8 <ull_conn_rx+0x1288>
			      LLCP_CPR_STATE_REQ) ||
   136b0:	3a04      	subs	r2, #4
   136b2:	2a01      	cmp	r2, #1
   136b4:	f240 8300 	bls.w	13cb8 <ull_conn_rx+0x1288>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   136b8:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   136bc:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
   136c0:	1a12      	subs	r2, r2, r0
   136c2:	f002 0203 	and.w	r2, r2, #3
   136c6:	2a02      	cmp	r2, #2
   136c8:	f000 83c8 	beq.w	13e5c <ull_conn_rx+0x142c>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
   136cc:	f894 01bc 	ldrb.w	r0, [r4, #444]	; 0x1bc
   136d0:	f894 21bd 	ldrb.w	r2, [r4, #445]	; 0x1bd
   136d4:	4290      	cmp	r0, r2
   136d6:	f000 83c7 	beq.w	13e68 <ull_conn_rx+0x1438>
				nack = reject_ext_ind_send(conn, *rx,
   136da:	4631      	mov	r1, r6
   136dc:	4620      	mov	r0, r4
   136de:	232a      	movs	r3, #42	; 0x2a
   136e0:	220f      	movs	r2, #15
   136e2:	f7ff bb29 	b.w	12d38 <ull_conn_rx+0x308>
		if (!conn->tx_ctrl) {
   136e6:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   136ea:	2a00      	cmp	r2, #0
   136ec:	f47f ae94 	bne.w	13418 <ull_conn_rx+0x9e8>
			tx->next = conn->tx_head;
   136f0:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   136f2:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   136f6:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   136fa:	e694      	b.n	13426 <ull_conn_rx+0x9f6>
	if (conn->common.txn_lock) {
   136fc:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   13700:	079b      	lsls	r3, r3, #30
   13702:	f53f a9e2 	bmi.w	12aca <ull_conn_rx+0x9a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   13706:	48d6      	ldr	r0, [pc, #856]	; (13a60 <ull_conn_rx+0x1030>)
   13708:	f7f9 faa0 	bl	cc4c <mem_acquire>
	if (!tx) {
   1370c:	4601      	mov	r1, r0
   1370e:	2800      	cmp	r0, #0
   13710:	d087      	beq.n	13622 <ull_conn_rx+0xbf2>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   13712:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
   13716:	9300      	str	r3, [sp, #0]
	eff_rx_octets = conn->lll.max_rx_octets;
   13718:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
	conn->common.txn_lock = 1U;
   1371c:	f894 20d8 	ldrb.w	r2, [r4, #216]	; 0xd8
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   13720:	f894 01ad 	ldrb.w	r0, [r4, #429]	; 0x1ad
	eff_rx_octets = conn->lll.max_rx_octets;
   13724:	9301      	str	r3, [sp, #4]
	if (/* Local idle, and Peer request then complete the Peer procedure
   13726:	9b00      	ldr	r3, [sp, #0]
	eff_tx_octets = conn->lll.max_tx_octets;
   13728:	f8b4 9058 	ldrh.w	r9, [r4, #88]	; 0x58
	eff_rx_time = conn->lll.max_rx_time;
   1372c:	f8b4 a05e 	ldrh.w	sl, [r4, #94]	; 0x5e
	eff_tx_time = conn->lll.max_tx_time;
   13730:	f8b4 b05c 	ldrh.w	fp, [r4, #92]	; 0x5c
	conn->common.txn_lock = 1U;
   13734:	f042 0202 	orr.w	r2, r2, #2
	if (/* Local idle, and Peer request then complete the Peer procedure
   13738:	4283      	cmp	r3, r0
	conn->common.txn_lock = 1U;
   1373a:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
	if (/* Local idle, and Peer request then complete the Peer procedure
   1373e:	d005      	beq.n	1374c <ull_conn_rx+0xd1c>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   13740:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
	    ((conn->llcp_length.req != conn->llcp_length.ack) &&
   13744:	f012 0f06 	tst.w	r2, #6
   13748:	f47f ab1e 	bne.w	12d88 <ull_conn_rx+0x358>
		max_rx_octets = sys_le16_to_cpu(lr->max_rx_octets);
   1374c:	8c32      	ldrh	r2, [r6, #32]
		if (max_rx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   1374e:	2a1a      	cmp	r2, #26
   13750:	f240 82cb 	bls.w	13cea <ull_conn_rx+0x12ba>
			eff_tx_octets = MIN(max_rx_octets,
   13754:	f8b4 00d2 	ldrh.w	r0, [r4, #210]	; 0xd2
   13758:	4282      	cmp	r2, r0
   1375a:	bf28      	it	cs
   1375c:	4602      	movcs	r2, r0
		if (max_tx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   1375e:	f8b6 e024 	ldrh.w	lr, [r6, #36]	; 0x24
			eff_rx_octets = MIN(max_tx_octets,
   13762:	9b01      	ldr	r3, [sp, #4]
		if (lr_rx_time >= PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M)) {
   13764:	f8b6 8022 	ldrh.w	r8, [r6, #34]	; 0x22
		lr_tx_time = sys_le16_to_cpu(lr->max_tx_time);
   13768:	f8b6 c026 	ldrh.w	ip, [r6, #38]	; 0x26
			eff_rx_octets = MIN(max_tx_octets,
   1376c:	f1be 0f1b 	cmp.w	lr, #27
   13770:	bf34      	ite	cc
   13772:	469e      	movcc	lr, r3
   13774:	f04f 0e1b 	movcs.w	lr, #27
			eff_tx_time = MIN(lr_rx_time, max_tx_time);
   13778:	f5b8 7fa4 	cmp.w	r8, #328	; 0x148
			eff_rx_octets = MIN(max_tx_octets,
   1377c:	4618      	mov	r0, r3
			eff_tx_time = MIN(lr_rx_time, max_tx_time);
   1377e:	bf34      	ite	cc
   13780:	4658      	movcc	r0, fp
   13782:	f44f 70a4 	movcs.w	r0, #328	; 0x148
			eff_rx_time = MIN(lr_tx_time, max_rx_time);
   13786:	f5bc 7fa4 	cmp.w	ip, #328	; 0x148
   1378a:	bf34      	ite	cc
   1378c:	46d4      	movcc	ip, sl
   1378e:	f44f 7ca4 	movcs.w	ip, #328	; 0x148
		if (eff_rx_octets != conn->lll.max_rx_octets) {
   13792:	459e      	cmp	lr, r3
   13794:	f000 8320 	beq.w	13dd8 <ull_conn_rx+0x13a8>
			conn->llcp_length.ack = conn->llcp_length.req - 1;
   13798:	9b00      	ldr	r3, [sp, #0]
			conn->llcp_length.rx_octets = eff_rx_octets;
   1379a:	f8a4 e1b0 	strh.w	lr, [r4, #432]	; 0x1b0
			conn->llcp_length.ack = conn->llcp_length.req - 1;
   1379e:	3b01      	subs	r3, #1
   137a0:	f884 31ad 	strb.w	r3, [r4, #429]	; 0x1ad
			conn->llcp_length.tx_octets = eff_tx_octets;
   137a4:	f8a4 21b2 	strh.w	r2, [r4, #434]	; 0x1b2
				conn->llcp_length.state =
   137a8:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
			conn->llcp_length.rx_time = eff_rx_time;
   137ac:	f8a4 c1b4 	strh.w	ip, [r4, #436]	; 0x1b4
			conn->llcp_length.tx_time = eff_tx_time;
   137b0:	f8a4 01b6 	strh.w	r0, [r4, #438]	; 0x1b6
			if (tx) {
   137b4:	2900      	cmp	r1, #0
   137b6:	f000 83f5 	beq.w	13fa4 <ull_conn_rx+0x1574>
				conn->llcp_length.state =
   137ba:	2605      	movs	r6, #5
   137bc:	f366 0302 	bfi	r3, r6, #0, #3
   137c0:	f884 31ae 	strb.w	r3, [r4, #430]	; 0x1ae
			link->mem = conn->llcp_rx;
   137c4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   137c8:	607b      	str	r3, [r7, #4]
			(*rx)->hdr.link = link;
   137ca:	682b      	ldr	r3, [r5, #0]
   137cc:	601f      	str	r7, [r3, #0]
			conn->llcp_rx = *rx;
   137ce:	682b      	ldr	r3, [r5, #0]
   137d0:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
			*rx = NULL;
   137d4:	2300      	movs	r3, #0
   137d6:	602b      	str	r3, [r5, #0]
	if (tx) {
   137d8:	2900      	cmp	r1, #0
   137da:	f43f a978 	beq.w	12ace <ull_conn_rx+0x9e>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   137de:	790b      	ldrb	r3, [r1, #4]
	pdu_tx->llctrl.length_rsp.max_tx_octets =
   137e0:	818a      	strh	r2, [r1, #12]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   137e2:	f043 0303 	orr.w	r3, r3, #3
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   137e6:	2215      	movs	r2, #21
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   137e8:	2509      	movs	r5, #9
	pdu_tx->llctrl.length_rsp.max_tx_time = sys_cpu_to_le16(eff_tx_time);
   137ea:	81c8      	strh	r0, [r1, #14]
	pdu_tx->llctrl.length_rsp.max_rx_octets =
   137ec:	f8a1 e008 	strh.w	lr, [r1, #8]
	ctrl_tx_sec_enqueue(conn, tx);
   137f0:	4620      	mov	r0, r4
	pdu_tx->llctrl.length_rsp.max_rx_time = sys_cpu_to_le16(eff_rx_time);
   137f2:	f8a1 c00a 	strh.w	ip, [r1, #10]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   137f6:	710b      	strb	r3, [r1, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   137f8:	714d      	strb	r5, [r1, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   137fa:	71ca      	strb	r2, [r1, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   137fc:	f7fe fb5c 	bl	11eb8 <ctrl_tx_sec_enqueue>
	return 0;
   13800:	2000      	movs	r0, #0
}
   13802:	f7ff b965 	b.w	12ad0 <ull_conn_rx+0xa0>
		if (!conn->tx_ctrl) {
   13806:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   1380a:	2a00      	cmp	r2, #0
   1380c:	f47f ac00 	bne.w	13010 <ull_conn_rx+0x5e0>
			tx->next = conn->tx_head;
   13810:	600b      	str	r3, [r1, #0]
				conn->tx_ctrl = tx;
   13812:	e9c4 1171 	strd	r1, r1, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   13816:	f8c4 11cc 	str.w	r1, [r4, #460]	; 0x1cc
   1381a:	e400      	b.n	1301e <ull_conn_rx+0x5ee>
		} else if ((conn->llcp_conn_param.req ==
   1381c:	9a00      	ldr	r2, [sp, #0]
   1381e:	4562      	cmp	r2, ip
   13820:	d004      	beq.n	1382c <ull_conn_rx+0xdfc>
			    conn->llcp_conn_param.ack) ||
   13822:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   13826:	0792      	lsls	r2, r2, #30
   13828:	f47f a94f 	bne.w	12aca <ull_conn_rx+0x9a>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   1382c:	f8b6 8020 	ldrh.w	r8, [r6, #32]
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   13830:	f1b8 0f05 	cmp.w	r8, #5
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   13834:	fa1f f288 	uxth.w	r2, r8
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   13838:	f240 8104 	bls.w	13a44 <ull_conn_rx+0x1014>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   1383c:	f8b6 e022 	ldrh.w	lr, [r6, #34]	; 0x22
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   13840:	f5be 6f48 	cmp.w	lr, #3200	; 0xc80
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   13844:	fa1f f18e 	uxth.w	r1, lr
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   13848:	f200 80fc 	bhi.w	13a44 <ull_conn_rx+0x1014>
			    (interval_max > 3200) ||
   1384c:	428a      	cmp	r2, r1
   1384e:	f200 80f9 	bhi.w	13a44 <ull_conn_rx+0x1014>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   13852:	f8b6 c024 	ldrh.w	ip, [r6, #36]	; 0x24
			    (interval_min > interval_max) ||
   13856:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   1385a:	fa1f fa8c 	uxth.w	sl, ip
			    (interval_min > interval_max) ||
   1385e:	f080 80f1 	bcs.w	13a44 <ull_conn_rx+0x1014>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   13862:	8cf0      	ldrh	r0, [r6, #38]	; 0x26
			    (latency > 499) ||
   13864:	f1a0 090a 	sub.w	r9, r0, #10
   13868:	fa1f f989 	uxth.w	r9, r9
   1386c:	f640 4b76 	movw	fp, #3190	; 0xc76
   13870:	45d9      	cmp	r9, fp
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   13872:	b282      	uxth	r2, r0
			    (latency > 499) ||
   13874:	f200 80e6 	bhi.w	13a44 <ull_conn_rx+0x1014>
			     ((latency + 1) * interval_max)) ||
   13878:	fb0a 1901 	mla	r9, sl, r1, r1
			    (timeout < 10) || (timeout > 3200) ||
   1387c:	ebb9 0f82 	cmp.w	r9, r2, lsl #2
   13880:	f080 80e0 	bcs.w	13a44 <ull_conn_rx+0x1014>
			     ((latency + 1) * interval_max)) ||
   13884:	f896 b028 	ldrb.w	fp, [r6, #40]	; 0x28
   13888:	4559      	cmp	r1, fp
   1388a:	f0c0 80db 	bcc.w	13a44 <ull_conn_rx+0x1014>
			conn->llcp_conn_param.latency =	latency;
   1388e:	f8a4 c18c 	strh.w	ip, [r4, #396]	; 0x18c
			conn->llcp_conn_param.interval_min = interval_min;
   13892:	f8a4 8188 	strh.w	r8, [r4, #392]	; 0x188
			conn->llcp_conn_param.interval_max = interval_max;
   13896:	f8a4 e18a 	strh.w	lr, [r4, #394]	; 0x18a
			conn->llcp_conn_param.timeout =	timeout;
   1389a:	f8a4 018e 	strh.w	r0, [r4, #398]	; 0x18e
			conn->llcp_conn_param.preferred_periodicity =
   1389e:	f884 b190 	strb.w	fp, [r4, #400]	; 0x190
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   138a2:	f896 e02a 	ldrb.w	lr, [r6, #42]	; 0x2a
   138a6:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
			     lll->interval) ||
   138aa:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   138ae:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   138b2:	f8a4 0192 	strh.w	r0, [r4, #402]	; 0x192
				sys_le16_to_cpu(cpr->offset0);
   138b6:	f896 e02c 	ldrb.w	lr, [r6, #44]	; 0x2c
   138ba:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
   138be:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.offset0 =
   138c2:	f8a4 0194 	strh.w	r0, [r4, #404]	; 0x194
				sys_le16_to_cpu(cpr->offset1);
   138c6:	f896 e02e 	ldrb.w	lr, [r6, #46]	; 0x2e
   138ca:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
   138ce:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.offset1 =
   138d2:	f8a4 0196 	strh.w	r0, [r4, #406]	; 0x196
				sys_le16_to_cpu(cpr->offset2);
   138d6:	f896 e030 	ldrb.w	lr, [r6, #48]	; 0x30
   138da:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
   138de:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.offset2 =
   138e2:	f8a4 0198 	strh.w	r0, [r4, #408]	; 0x198
				sys_le16_to_cpu(cpr->offset3);
   138e6:	f896 e032 	ldrb.w	lr, [r6, #50]	; 0x32
   138ea:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
   138ee:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.offset3 =
   138f2:	f8a4 019a 	strh.w	r0, [r4, #410]	; 0x19a
				sys_le16_to_cpu(cpr->offset4);
   138f6:	f896 0033 	ldrb.w	r0, [r6, #51]	; 0x33
   138fa:	f896 e034 	ldrb.w	lr, [r6, #52]	; 0x34
   138fe:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.offset4 =
   13902:	f8a4 019c 	strh.w	r0, [r4, #412]	; 0x19c
				sys_le16_to_cpu(cpr->offset5);
   13906:	f896 0035 	ldrb.w	r0, [r6, #53]	; 0x35
   1390a:	f896 6036 	ldrb.w	r6, [r6, #54]	; 0x36
			if ((conn->llcp_conn_param.interval_max !=
   1390e:	4561      	cmp	r1, ip
				sys_le16_to_cpu(cpr->offset5);
   13910:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
			conn->llcp_conn_param.offset5 =
   13914:	f8a4 019e 	strh.w	r0, [r4, #414]	; 0x19e
			if ((conn->llcp_conn_param.interval_max !=
   13918:	f000 83f7 	beq.w	1410a <ull_conn_rx+0x16da>
				conn->llcp_conn_param.state =
   1391c:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   13920:	2103      	movs	r1, #3
   13922:	f361 0202 	bfi	r2, r1, #0, #3
   13926:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
			conn->llcp_conn_param.ack--;
   1392a:	9a00      	ldr	r2, [sp, #0]
   1392c:	3a01      	subs	r2, #1
   1392e:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
			if (!conn_upd_curr) {
   13932:	2b00      	cmp	r3, #0
   13934:	f47f a8cb 	bne.w	12ace <ull_conn_rx+0x9e>
				conn_upd_curr = conn;
   13938:	603c      	str	r4, [r7, #0]
	int nack = 0;
   1393a:	4618      	mov	r0, r3
   1393c:	f7ff b8c8 	b.w	12ad0 <ull_conn_rx+0xa0>
	if (conn->common.txn_lock) {
   13940:	f894 80d8 	ldrb.w	r8, [r4, #216]	; 0xd8
   13944:	f018 0802 	ands.w	r8, r8, #2
   13948:	f47f a8bf 	bne.w	12aca <ull_conn_rx+0x9a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1394c:	4844      	ldr	r0, [pc, #272]	; (13a60 <ull_conn_rx+0x1030>)
   1394e:	f7f9 f97d 	bl	cc4c <mem_acquire>
	if (!tx) {
   13952:	4602      	mov	r2, r0
   13954:	2800      	cmp	r0, #0
   13956:	f43f ae64 	beq.w	13622 <ull_conn_rx+0xbf2>
	conn->common.txn_lock = 1U;
   1395a:	f894 10d8 	ldrb.w	r1, [r4, #216]	; 0xd8
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   1395e:	f894 01be 	ldrb.w	r0, [r4, #446]	; 0x1be
	if (conn->llcp_phy.ack ==
   13962:	f894 e1bd 	ldrb.w	lr, [r4, #445]	; 0x1bd
   13966:	f894 71bc 	ldrb.w	r7, [r4, #444]	; 0x1bc
   1396a:	f894 31c0 	ldrb.w	r3, [r4, #448]	; 0x1c0
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   1396e:	2502      	movs	r5, #2
   13970:	f365 0001 	bfi	r0, r5, #0, #2
	conn->common.txn_lock = 1U;
   13974:	4329      	orrs	r1, r5
	if (conn->llcp_phy.ack ==
   13976:	4577      	cmp	r7, lr
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   13978:	f884 01be 	strb.w	r0, [r4, #446]	; 0x1be
	conn->common.txn_lock = 1U;
   1397c:	f884 10d8 	strb.w	r1, [r4, #216]	; 0xd8
	if (conn->llcp_phy.ack ==
   13980:	f3c3 0502 	ubfx	r5, r3, #0, #3
   13984:	f003 0c07 	and.w	ip, r3, #7
   13988:	f3c3 00c2 	ubfx	r0, r3, #3, #3
   1398c:	d114      	bne.n	139b8 <ull_conn_rx+0xf88>
		conn->llcp_phy.tx =
   1398e:	f894 11be 	ldrb.w	r1, [r4, #446]	; 0x1be
		conn->procedure_expire =
   13992:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   13996:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
		conn->llcp_phy.tx =
   1399a:	f36c 0184 	bfi	r1, ip, #2, #3
		conn->llcp_phy.cmd = 0U;
   1399e:	f894 c1bf 	ldrb.w	ip, [r4, #447]	; 0x1bf
		conn->llcp_phy.ack--;
   139a2:	3f01      	subs	r7, #1
		conn->llcp_phy.rx =
   139a4:	f360 1147 	bfi	r1, r0, #5, #3
		conn->llcp_phy.cmd = 0U;
   139a8:	f368 0c82 	bfi	ip, r8, #2, #1
		conn->llcp_phy.ack--;
   139ac:	f884 71bd 	strb.w	r7, [r4, #445]	; 0x1bd
		conn->llcp_phy.rx =
   139b0:	f884 11be 	strb.w	r1, [r4, #446]	; 0x1be
		conn->llcp_phy.cmd = 0U;
   139b4:	f884 c1bf 	strb.w	ip, [r4, #447]	; 0x1bf
	conn->llcp_phy.rx &= p->tx_phys;
   139b8:	f894 11be 	ldrb.w	r1, [r4, #446]	; 0x1be
	conn->llcp_phy.tx &= p->rx_phys;
   139bc:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
	conn->llcp_phy.rx &= p->tx_phys;
   139c0:	f896 7020 	ldrb.w	r7, [r6, #32]
	conn->llcp_phy.tx &= p->rx_phys;
   139c4:	f3c1 0c82 	ubfx	ip, r1, #2, #3
   139c8:	ea03 030c 	and.w	r3, r3, ip
	conn->llcp_phy.rx &= p->tx_phys;
   139cc:	ea07 1751 	and.w	r7, r7, r1, lsr #5
	conn->llcp_phy.tx &= p->rx_phys;
   139d0:	009b      	lsls	r3, r3, #2
   139d2:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   139d6:	f001 0103 	and.w	r1, r1, #3
   139da:	430b      	orrs	r3, r1
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   139dc:	2703      	movs	r7, #3
	conn->llcp_phy.tx &= p->rx_phys;
   139de:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   139e2:	7911      	ldrb	r1, [r2, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   139e4:	7157      	strb	r7, [r2, #5]
	    conn->tx_head &&
   139e6:	f8d4 71c4 	ldr.w	r7, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   139ea:	7215      	strb	r5, [r2, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   139ec:	f041 0103 	orr.w	r1, r1, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   139f0:	2517      	movs	r5, #23
   139f2:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
   139f6:	7250      	strb	r0, [r2, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   139f8:	7111      	strb	r1, [r2, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   139fa:	71d5      	strb	r5, [r2, #7]
	if (
   139fc:	2f00      	cmp	r7, #0
   139fe:	f000 817e 	beq.w	13cfe <ull_conn_rx+0x12ce>
	    !conn->llcp_enc.pause_tx &&
   13a02:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   13a06:	0788      	lsls	r0, r1, #30
   13a08:	f100 8179 	bmi.w	13cfe <ull_conn_rx+0x12ce>
	    !conn->llcp_phy.pause_tx &&
   13a0c:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   13a10:	07c9      	lsls	r1, r1, #31
   13a12:	f100 8174 	bmi.w	13cfe <ull_conn_rx+0x12ce>
		if (conn->tx_head == conn->tx_data) {
   13a16:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   13a1a:	428f      	cmp	r7, r1
   13a1c:	f000 839b 	beq.w	14156 <ull_conn_rx+0x1726>
		} else if (!conn->tx_ctrl) {
   13a20:	2b00      	cmp	r3, #0
   13a22:	f000 8388 	beq.w	14136 <ull_conn_rx+0x1706>
	tx->next = conn->tx_ctrl_last->next;
   13a26:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   13a2a:	6819      	ldr	r1, [r3, #0]
   13a2c:	6011      	str	r1, [r2, #0]
	conn->tx_ctrl_last->next = tx;
   13a2e:	601a      	str	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
   13a30:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
	if (!tx->next) {
   13a34:	6813      	ldr	r3, [r2, #0]
   13a36:	2b00      	cmp	r3, #0
   13a38:	f47f a847 	bne.w	12aca <ull_conn_rx+0x9a>
		conn->tx_data_last = tx;
   13a3c:	f8c4 21d4 	str.w	r2, [r4, #468]	; 0x1d4
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   13a40:	f7ff b843 	b.w	12aca <ull_conn_rx+0x9a>
				nack = reject_ext_ind_send(conn, *rx,
   13a44:	4631      	mov	r1, r6
   13a46:	4620      	mov	r0, r4
   13a48:	231e      	movs	r3, #30
   13a4a:	220f      	movs	r2, #15
   13a4c:	f7ff b974 	b.w	12d38 <ull_conn_rx+0x308>
	    ((pdu_data_tx->llctrl.opcode !=
   13a50:	79cb      	ldrb	r3, [r1, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   13a52:	2b03      	cmp	r3, #3
   13a54:	f43f adfa 	beq.w	1364c <ull_conn_rx+0xc1c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   13a58:	2b0a      	cmp	r3, #10
   13a5a:	f47f ae13 	bne.w	13684 <ull_conn_rx+0xc54>
   13a5e:	e5f5      	b.n	1364c <ull_conn_rx+0xc1c>
   13a60:	200020f8 	.word	0x200020f8
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   13a64:	48d6      	ldr	r0, [pc, #856]	; (13dc0 <ull_conn_rx+0x1390>)
   13a66:	f7f9 f8f1 	bl	cc4c <mem_acquire>
		if (!tx) {
   13a6a:	4601      	mov	r1, r0
   13a6c:	2800      	cmp	r0, #0
   13a6e:	f43f add8 	beq.w	13622 <ull_conn_rx+0xbf2>
		conn->llcp_version.tx = 1U;
   13a72:	f894 213a 	ldrb.w	r2, [r4, #314]	; 0x13a
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   13a76:	7903      	ldrb	r3, [r0, #4]
		conn->llcp_version.tx = 1U;
   13a78:	f042 0201 	orr.w	r2, r2, #1
   13a7c:	f884 213a 	strb.w	r2, [r4, #314]	; 0x13a
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   13a80:	f043 0303 	orr.w	r3, r3, #3
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   13a84:	220c      	movs	r2, #12
		pdu_tx->len =
   13a86:	7145      	strb	r5, [r0, #5]
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   13a88:	7103      	strb	r3, [r0, #4]
		v->version_number = LL_VERSION_NUMBER;
   13a8a:	250b      	movs	r5, #11
		v->sub_version_number =
   13a8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   13a90:	f06f 000e 	mvn.w	r0, #14
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   13a94:	71ca      	strb	r2, [r1, #7]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   13a96:	2205      	movs	r2, #5
   13a98:	7248      	strb	r0, [r1, #9]
		v->sub_version_number =
   13a9a:	72cb      	strb	r3, [r1, #11]
   13a9c:	730b      	strb	r3, [r1, #12]
		v->version_number = LL_VERSION_NUMBER;
   13a9e:	720d      	strb	r5, [r1, #8]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   13aa0:	728a      	strb	r2, [r1, #10]
		ctrl_tx_sec_enqueue(conn, tx);
   13aa2:	4620      	mov	r0, r4
   13aa4:	f7fe fa08 	bl	11eb8 <ctrl_tx_sec_enqueue>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   13aa8:	2301      	movs	r3, #1
   13aaa:	7133      	strb	r3, [r6, #4]
   13aac:	f7ff b9fc 	b.w	12ea8 <ull_conn_rx+0x478>
			conn->llcp_conn_param.disabled = 1U;
   13ab0:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
			if (!conn->lll.role) {
   13ab4:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
			conn->llcp_conn_param.disabled = 1U;
   13ab8:	f042 0210 	orr.w	r2, r2, #16
			if (!conn->lll.role) {
   13abc:	2900      	cmp	r1, #0
			conn->llcp_conn_param.disabled = 1U;
   13abe:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
			if (!conn->lll.role) {
   13ac2:	f2c0 8148 	blt.w	13d56 <ull_conn_rx+0x1326>
				LL_ASSERT(conn->llcp_cu.req ==
   13ac6:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
   13aca:	f894 210d 	ldrb.w	r2, [r4, #269]	; 0x10d
   13ace:	4293      	cmp	r3, r2
   13ad0:	d00e      	beq.n	13af0 <ull_conn_rx+0x10c0>
   13ad2:	4abc      	ldr	r2, [pc, #752]	; (13dc4 <ull_conn_rx+0x1394>)
   13ad4:	49bc      	ldr	r1, [pc, #752]	; (13dc8 <ull_conn_rx+0x1398>)
   13ad6:	48bd      	ldr	r0, [pc, #756]	; (13dcc <ull_conn_rx+0x139c>)
   13ad8:	f641 1315 	movw	r3, #6421	; 0x1915
   13adc:	f00a fc52 	bl	1e384 <printk>
   13ae0:	4040      	eors	r0, r0
   13ae2:	f380 8811 	msr	BASEPRI, r0
   13ae6:	f04f 0003 	mov.w	r0, #3
   13aea:	df02      	svc	2
   13aec:	f894 210d 	ldrb.w	r2, [r4, #269]	; 0x10d
				conn->llcp_conn_param.state =
   13af0:	f894 0186 	ldrb.w	r0, [r4, #390]	; 0x186
				conn->llcp_cu.interval =
   13af4:	f8b4 318a 	ldrh.w	r3, [r4, #394]	; 0x18a
   13af8:	f8a4 3110 	strh.w	r3, [r4, #272]	; 0x110
				conn->llcp_conn_param.state =
   13afc:	2305      	movs	r3, #5
   13afe:	f363 0002 	bfi	r0, r3, #0, #3
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   13b02:	f894 110e 	ldrb.w	r1, [r4, #270]	; 0x10e
				conn->llcp_cu.ack--;
   13b06:	1e53      	subs	r3, r2, #1
				conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   13b08:	f3c0 02c0 	ubfx	r2, r0, #3, #1
				conn->llcp_cu.win_size = 1U;
   13b0c:	2601      	movs	r6, #1
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   13b0e:	00d2      	lsls	r2, r2, #3
				conn->llcp_cu.ack--;
   13b10:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
				conn->llcp_cu.win_size = 1U;
   13b14:	f884 611c 	strb.w	r6, [r4, #284]	; 0x11c
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   13b18:	f021 030f 	bic.w	r3, r1, #15
   13b1c:	4332      	orrs	r2, r6
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   13b1e:	6829      	ldr	r1, [r5, #0]
				conn->llcp_cu.latency =
   13b20:	f8b4 518c 	ldrh.w	r5, [r4, #396]	; 0x18c
				conn->llcp_conn_param.state =
   13b24:	f884 0186 	strb.w	r0, [r4, #390]	; 0x186
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   13b28:	431a      	orrs	r2, r3
   13b2a:	f884 210e 	strb.w	r2, [r4, #270]	; 0x10e
				conn->llcp_cu.win_offset_us = 0U;
   13b2e:	2000      	movs	r0, #0
				conn->llcp_cu.timeout =
   13b30:	f8b4 218e 	ldrh.w	r2, [r4, #398]	; 0x18e
				conn->llcp_cu.win_offset_us = 0U;
   13b34:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
				conn->llcp_cu.latency =
   13b38:	f8a4 5112 	strh.w	r5, [r4, #274]	; 0x112
				conn->llcp_cu.timeout =
   13b3c:	f8a4 2114 	strh.w	r2, [r4, #276]	; 0x114
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   13b40:	710e      	strb	r6, [r1, #4]
				break;
   13b42:	f7fe bfc5 	b.w	12ad0 <ull_conn_rx+0xa0>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   13b46:	7137      	strb	r7, [r6, #4]
		*err = 0U;
   13b48:	2000      	movs	r0, #0
   13b4a:	f7fe bfc1 	b.w	12ad0 <ull_conn_rx+0xa0>
				      0x03) == 0x02) &&
   13b4e:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   13b52:	2b03      	cmp	r3, #3
   13b54:	f47f a8ec 	bne.w	12d30 <ull_conn_rx+0x300>
   13b58:	f7ff b8e3 	b.w	12d22 <ull_conn_rx+0x2f2>
	instant = sys_le16_to_cpu(ind->instant);
   13b5c:	8c70      	ldrh	r0, [r6, #34]	; 0x22
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   13b5e:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   13b60:	1a82      	subs	r2, r0, r2
   13b62:	0412      	lsls	r2, r2, #16
   13b64:	f100 80c3 	bmi.w	13cee <ull_conn_rx+0x12be>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   13b68:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   13b6c:	f894 c0e5 	ldrb.w	ip, [r4, #229]	; 0xe5
   13b70:	eba2 020c 	sub.w	r2, r2, ip
   13b74:	f002 0203 	and.w	r2, r2, #3
   13b78:	2a02      	cmp	r2, #2
   13b7a:	f000 8155 	beq.w	13e28 <ull_conn_rx+0x13f8>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   13b7e:	f894 c1bc 	ldrb.w	ip, [r4, #444]	; 0x1bc
   13b82:	f894 21bd 	ldrb.w	r2, [r4, #445]	; 0x1bd
   13b86:	4562      	cmp	r2, ip
   13b88:	d019      	beq.n	13bbe <ull_conn_rx+0x118e>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   13b8a:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   13b8e:	f002 0203 	and.w	r2, r2, #3
   13b92:	2a02      	cmp	r2, #2
   13b94:	d113      	bne.n	13bbe <ull_conn_rx+0x118e>
		conn->llcp_phy.pause_tx = 0U;
   13b96:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   13b9a:	f894 60e8 	ldrb.w	r6, [r4, #232]	; 0xe8
		conn->llcp_phy.ack = conn->llcp_phy.req;
   13b9e:	f884 c1bd 	strb.w	ip, [r4, #445]	; 0x1bd
		conn->llcp_phy.pause_tx = 0U;
   13ba2:	f36f 0200 	bfc	r2, #0, #1
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   13ba6:	f3c2 0c80 	ubfx	ip, r2, #2, #1
   13baa:	f36c 0641 	bfi	r6, ip, #1, #1
		conn->procedure_expire = 0U;
   13bae:	f04f 0c00 	mov.w	ip, #0
		conn->llcp_phy.pause_tx = 0U;
   13bb2:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   13bb6:	f884 60e8 	strb.w	r6, [r4, #232]	; 0xe8
		conn->procedure_expire = 0U;
   13bba:	f8a4 c0c8 	strh.w	ip, [r4, #200]	; 0xc8
	conn->llcp.phy_upd_ind.initiate = 0U;
   13bbe:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
	conn->llcp.phy_upd_ind.instant = instant;
   13bc2:	f8a4 00ea 	strh.w	r0, [r4, #234]	; 0xea
	conn->llcp.phy_upd_ind.initiate = 0U;
   13bc6:	009b      	lsls	r3, r3, #2
   13bc8:	f003 031c 	and.w	r3, r3, #28
   13bcc:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   13bd0:	f002 0202 	and.w	r2, r2, #2
   13bd4:	4313      	orrs	r3, r2
	link->mem = conn->llcp_rx;
   13bd6:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
	conn->llcp.phy_upd_ind.initiate = 0U;
   13bda:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	link->mem = conn->llcp_rx;
   13bde:	607a      	str	r2, [r7, #4]
	(*rx)->hdr.link = link;
   13be0:	682b      	ldr	r3, [r5, #0]
   13be2:	601f      	str	r7, [r3, #0]
	conn->llcp_rx = *rx;
   13be4:	682b      	ldr	r3, [r5, #0]
   13be6:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
	*rx = NULL;
   13bea:	2300      	movs	r3, #0
   13bec:	602b      	str	r3, [r5, #0]
	struct node_rx_pdu *rx_dle = ll_pdu_rx_alloc();
   13bee:	f7fc ff71 	bl	10ad4 <ll_pdu_rx_alloc>
	LL_ASSERT(rx_dle);
   13bf2:	4605      	mov	r5, r0
   13bf4:	2800      	cmp	r0, #0
   13bf6:	f000 8258 	beq.w	140aa <ull_conn_rx+0x167a>
	rx_dle->hdr.link->mem = conn->llcp_rx;
   13bfa:	682b      	ldr	r3, [r5, #0]
   13bfc:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   13c00:	605a      	str	r2, [r3, #4]
	conn->llcp_ack -= 2U;
   13c02:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
	if (conn->llcp.phy_upd_ind.tx) {
   13c06:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
	conn->llcp_rx = rx_dle;
   13c0a:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
	conn->llcp_ack -= 2U;
   13c0e:	3a02      	subs	r2, #2
	conn->llcp_type = LLCP_PHY_UPD;
   13c10:	2106      	movs	r1, #6
	if (conn->llcp.phy_upd_ind.tx) {
   13c12:	f013 0f1c 	tst.w	r3, #28
	conn->llcp_ack -= 2U;
   13c16:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
	conn->llcp_type = LLCP_PHY_UPD;
   13c1a:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
	if (conn->llcp.phy_upd_ind.tx) {
   13c1e:	f43e af56 	beq.w	12ace <ull_conn_rx+0x9e>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   13c22:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
   13c26:	f3c3 0382 	ubfx	r3, r3, #2, #3
   13c2a:	f363 1206 	bfi	r2, r3, #4, #3
   13c2e:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
	int nack = 0;
   13c32:	2000      	movs	r0, #0
   13c34:	f7fe bf4c 	b.w	12ad0 <ull_conn_rx+0xa0>
	} else if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   13c38:	f894 2185 	ldrb.w	r2, [r4, #389]	; 0x185
   13c3c:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   13c40:	429a      	cmp	r2, r3
   13c42:	f43f ac3e 	beq.w	134c2 <ull_conn_rx+0xa92>
		rej_ext_ind->error_code = rej_ind->error_code;
   13c46:	f896 3020 	ldrb.w	r3, [r6, #32]
   13c4a:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
	if (!lll->role && (rej_ext_ind->error_code ==
   13c4e:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
   13c52:	2a00      	cmp	r2, #0
   13c54:	f2c0 820b 	blt.w	1406e <ull_conn_rx+0x163e>
   13c58:	2b1a      	cmp	r3, #26
   13c5a:	f000 828e 	beq.w	1417a <ull_conn_rx+0x174a>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   13c5e:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   13c62:	f002 0307 	and.w	r3, r2, #7
   13c66:	2b04      	cmp	r3, #4
   13c68:	f47f ac88 	bne.w	1357c <ull_conn_rx+0xb4c>
		LL_ASSERT(conn_upd_curr == conn);
   13c6c:	4f58      	ldr	r7, [pc, #352]	; (13dd0 <ull_conn_rx+0x13a0>)
   13c6e:	683b      	ldr	r3, [r7, #0]
   13c70:	429c      	cmp	r4, r3
   13c72:	d00e      	beq.n	13c92 <ull_conn_rx+0x1262>
   13c74:	4a53      	ldr	r2, [pc, #332]	; (13dc4 <ull_conn_rx+0x1394>)
   13c76:	4957      	ldr	r1, [pc, #348]	; (13dd4 <ull_conn_rx+0x13a4>)
   13c78:	4854      	ldr	r0, [pc, #336]	; (13dcc <ull_conn_rx+0x139c>)
   13c7a:	f241 2329 	movw	r3, #4649	; 0x1229
   13c7e:	f00a fb81 	bl	1e384 <printk>
   13c82:	4040      	eors	r0, r0
   13c84:	f380 8811 	msr	BASEPRI, r0
   13c88:	f04f 0003 	mov.w	r0, #3
   13c8c:	df02      	svc	2
   13c8e:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   13c92:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   13c96:	f884 3185 	strb.w	r3, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
   13c9a:	2300      	movs	r3, #0
   13c9c:	603b      	str	r3, [r7, #0]
		conn->procedure_expire = 0U;
   13c9e:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   13ca2:	e46b      	b.n	1357c <ull_conn_rx+0xb4c>
			conn->llcp_length.disabled = 1U;
   13ca4:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
			conn->llcp_length.ack = conn->llcp_length.req;
   13ca8:	f884 31ad 	strb.w	r3, [r4, #429]	; 0x1ad
			conn->llcp_length.disabled = 1U;
   13cac:	f042 0308 	orr.w	r3, r2, #8
   13cb0:	f884 31ae 	strb.w	r3, [r4, #430]	; 0x1ae
			conn->llcp_length.ack = conn->llcp_length.req;
   13cb4:	f7ff ba6e 	b.w	13194 <ull_conn_rx+0x764>
				nack = reject_ext_ind_send(conn, *rx,
   13cb8:	4631      	mov	r1, r6
   13cba:	4620      	mov	r0, r4
   13cbc:	2323      	movs	r3, #35	; 0x23
   13cbe:	220f      	movs	r2, #15
   13cc0:	f7ff b83a 	b.w	12d38 <ull_conn_rx+0x308>
				nack = reject_ext_ind_send(conn, *rx,
   13cc4:	4631      	mov	r1, r6
   13cc6:	4620      	mov	r0, r4
   13cc8:	2323      	movs	r3, #35	; 0x23
   13cca:	f7ff b834 	b.w	12d36 <ull_conn_rx+0x306>
	conn->llcp_enc.pause_rx = 0U;
   13cce:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	conn->llcp_ack = conn->llcp_req;
   13cd2:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
	conn->llcp_enc.pause_rx = 0U;
   13cd6:	f022 0203 	bic.w	r2, r2, #3
	conn->procedure_expire = 0U;
   13cda:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   13cdc:	f884 2166 	strb.w	r2, [r4, #358]	; 0x166
	conn->procedure_expire = 0U;
   13ce0:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   13ce4:	4618      	mov	r0, r3
   13ce6:	f7fe bef3 	b.w	12ad0 <ull_conn_rx+0xa0>
   13cea:	464a      	mov	r2, r9
   13cec:	e537      	b.n	1375e <ull_conn_rx+0xd2e>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   13cee:	2301      	movs	r3, #1
   13cf0:	7133      	strb	r3, [r6, #4]
		return BT_HCI_ERR_INSTANT_PASSED;
   13cf2:	2328      	movs	r3, #40	; 0x28
			conn->llcp_terminate.reason_peer = err;
   13cf4:	f884 3143 	strb.w	r3, [r4, #323]	; 0x143
	int nack = 0;
   13cf8:	2000      	movs	r0, #0
   13cfa:	f7fe bee9 	b.w	12ad0 <ull_conn_rx+0xa0>
		if (!conn->tx_ctrl) {
   13cfe:	2b00      	cmp	r3, #0
   13d00:	f47f ae91 	bne.w	13a26 <ull_conn_rx+0xff6>
			tx->next = conn->tx_head;
   13d04:	6017      	str	r7, [r2, #0]
				conn->tx_ctrl = tx;
   13d06:	e9c4 2271 	strd	r2, r2, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   13d0a:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
   13d0e:	e691      	b.n	13a34 <ull_conn_rx+0x1004>
			lll->phy_tx_time = lll->phy_tx;
   13d10:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
			conn->llcp_phy.pause_tx = 0U;
   13d14:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
			conn->llcp_phy.ack = conn->llcp_phy.req;
   13d18:	f884 11bd 	strb.w	r1, [r4, #445]	; 0x1bd
			conn->llcp_phy.pause_tx = 0U;
   13d1c:	f023 0309 	bic.w	r3, r3, #9
			lll->phy_tx_time = lll->phy_tx;
   13d20:	4611      	mov	r1, r2
   13d22:	f362 1106 	bfi	r1, r2, #4, #3
			conn->llcp_phy.pause_tx = 0U;
   13d26:	f043 0308 	orr.w	r3, r3, #8
			lll->phy_tx_time = lll->phy_tx;
   13d2a:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
			if (conn->llcp_phy.cmd) {
   13d2e:	0759      	lsls	r1, r3, #29
			conn->llcp_phy.pause_tx = 0U;
   13d30:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
			lll->phy_tx_time = lll->phy_tx;
   13d34:	f3c2 0202 	ubfx	r2, r2, #0, #3
			if (conn->llcp_phy.cmd) {
   13d38:	f140 808b 	bpl.w	13e52 <ull_conn_rx+0x1422>
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   13d3c:	6829      	ldr	r1, [r5, #0]
				p->status = 0U;
   13d3e:	2300      	movs	r3, #0
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   13d40:	201a      	movs	r0, #26
   13d42:	7108      	strb	r0, [r1, #4]
				p->tx = lll->phy_tx;
   13d44:	7772      	strb	r2, [r6, #29]
				p->status = 0U;
   13d46:	7733      	strb	r3, [r6, #28]
				p->rx = lll->phy_rx;
   13d48:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   13d4c:	f3c3 0302 	ubfx	r3, r3, #0, #3
   13d50:	77b3      	strb	r3, [r6, #30]
   13d52:	f7ff ba1f 	b.w	13194 <ull_conn_rx+0x764>
			LL_ASSERT(conn_upd_curr == conn);
   13d56:	4f1e      	ldr	r7, [pc, #120]	; (13dd0 <ull_conn_rx+0x13a0>)
   13d58:	683a      	ldr	r2, [r7, #0]
   13d5a:	4294      	cmp	r4, r2
   13d5c:	d00e      	beq.n	13d7c <ull_conn_rx+0x134c>
   13d5e:	4a19      	ldr	r2, [pc, #100]	; (13dc4 <ull_conn_rx+0x1394>)
   13d60:	491c      	ldr	r1, [pc, #112]	; (13dd4 <ull_conn_rx+0x13a4>)
   13d62:	481a      	ldr	r0, [pc, #104]	; (13dcc <ull_conn_rx+0x139c>)
   13d64:	f641 132d 	movw	r3, #6445	; 0x192d
   13d68:	f00a fb0c 	bl	1e384 <printk>
   13d6c:	4040      	eors	r0, r0
   13d6e:	f380 8811 	msr	BASEPRI, r0
   13d72:	f04f 0003 	mov.w	r0, #3
   13d76:	df02      	svc	2
   13d78:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
			if (!conn->llcp_conn_param.cmd) {
   13d7c:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   13d80:	f884 3185 	strb.w	r3, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
   13d84:	2300      	movs	r3, #0
   13d86:	603b      	str	r3, [r7, #0]
			if (!conn->llcp_conn_param.cmd) {
   13d88:	f012 0308 	ands.w	r3, r2, #8
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   13d8c:	682a      	ldr	r2, [r5, #0]
			if (!conn->llcp_conn_param.cmd) {
   13d8e:	f43e aea8 	beq.w	12ae2 <ull_conn_rx+0xb2>
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   13d92:	2116      	movs	r1, #22
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   13d94:	231a      	movs	r3, #26
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   13d96:	7111      	strb	r1, [r2, #4]
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   13d98:	7733      	strb	r3, [r6, #28]
			cu->interval = lll->interval;
   13d9a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
			cu->timeout = conn->supervision_reload *
   13d9c:	f8b4 20c2 	ldrh.w	r2, [r4, #194]	; 0xc2
			cu->latency = lll->latency;
   13da0:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
			cu->interval = lll->interval;
   13da2:	83f3      	strh	r3, [r6, #30]
			cu->timeout = conn->supervision_reload *
   13da4:	fb03 f202 	mul.w	r2, r3, r2
				      lll->interval * 125U / 1000;
   13da8:	237d      	movs	r3, #125	; 0x7d
   13daa:	fb03 f302 	mul.w	r3, r3, r2
			cu->latency = lll->latency;
   13dae:	8431      	strh	r1, [r6, #32]
				      lll->interval * 125U / 1000;
   13db0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13db4:	fbb3 f3f2 	udiv	r3, r3, r2
			cu->timeout = conn->supervision_reload *
   13db8:	8473      	strh	r3, [r6, #34]	; 0x22
			    PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ)) {
   13dba:	f7ff b9eb 	b.w	13194 <ull_conn_rx+0x764>
   13dbe:	bf00      	nop
   13dc0:	200020f8 	.word	0x200020f8
   13dc4:	00024874 	.word	0x00024874
   13dc8:	000249c0 	.word	0x000249c0
   13dcc:	00024334 	.word	0x00024334
   13dd0:	20002074 	.word	0x20002074
   13dd4:	000249e8 	.word	0x000249e8
			conn->llcp_length.ack = conn->llcp_length.req;
   13dd8:	9b00      	ldr	r3, [sp, #0]
   13dda:	f884 31ad 	strb.w	r3, [r4, #429]	; 0x1ad
			conn->procedure_expire = 0U;
   13dde:	2700      	movs	r7, #0
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   13de0:	454a      	cmp	r2, r9
			conn->procedure_expire = 0U;
   13de2:	f8a4 70c8 	strh.w	r7, [r4, #200]	; 0xc8
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   13de6:	f000 812e 	beq.w	14046 <ull_conn_rx+0x1616>
			conn->lll.max_rx_time = eff_rx_time;
   13dea:	f8a4 c05e 	strh.w	ip, [r4, #94]	; 0x5e
			if (tx) {
   13dee:	2900      	cmp	r1, #0
   13df0:	f000 8124 	beq.w	1403c <ull_conn_rx+0x160c>
				conn->llcp_length.state =
   13df4:	f894 51ae 	ldrb.w	r5, [r4, #430]	; 0x1ae
					(conn->llcp_length.req - 1);
   13df8:	9b00      	ldr	r3, [sp, #0]
				conn->llcp_length.rx_octets = eff_rx_octets;
   13dfa:	f8a4 e1b0 	strh.w	lr, [r4, #432]	; 0x1b0
				conn->llcp_length.state =
   13dfe:	2703      	movs	r7, #3
					(conn->llcp_length.req - 1);
   13e00:	3b01      	subs	r3, #1
				conn->llcp_length.state =
   13e02:	f367 0502 	bfi	r5, r7, #0, #3
				conn->llcp_length.ack =
   13e06:	f884 31ad 	strb.w	r3, [r4, #429]	; 0x1ad
				conn->llcp_length.tx_octets = eff_tx_octets;
   13e0a:	f8a4 21b2 	strh.w	r2, [r4, #434]	; 0x1b2
				conn->llcp_length.rx_time = eff_rx_time;
   13e0e:	f8a4 c1b4 	strh.w	ip, [r4, #436]	; 0x1b4
				conn->llcp_length.tx_time = eff_tx_time;
   13e12:	f8a4 01b6 	strh.w	r0, [r4, #438]	; 0x1b6
				conn->llcp_length.state =
   13e16:	f884 51ae 	strb.w	r5, [r4, #430]	; 0x1ae
			lr->max_rx_octets = sys_cpu_to_le16(eff_rx_octets);
   13e1a:	f8a6 e020 	strh.w	lr, [r6, #32]
			lr->max_tx_octets = sys_cpu_to_le16(eff_tx_octets);
   13e1e:	84b2      	strh	r2, [r6, #36]	; 0x24
			lr->max_rx_time = sys_cpu_to_le16(eff_rx_time);
   13e20:	f8a6 c022 	strh.w	ip, [r6, #34]	; 0x22
			lr->max_tx_time = sys_cpu_to_le16(eff_tx_time);
   13e24:	84f0      	strh	r0, [r6, #38]	; 0x26
   13e26:	e4d7      	b.n	137d8 <ull_conn_rx+0xda8>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   13e28:	2301      	movs	r3, #1
   13e2a:	7133      	strb	r3, [r6, #4]
		return BT_HCI_ERR_DIFF_TRANS_COLLISION;
   13e2c:	232a      	movs	r3, #42	; 0x2a
   13e2e:	e761      	b.n	13cf4 <ull_conn_rx+0x12c4>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   13e30:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
				conn->llcp_ack -= 2U;
   13e34:	3b02      	subs	r3, #2
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   13e36:	f36f 0201 	bfc	r2, #0, #2
				conn->llcp_type = LLCP_ENCRYPTION;
   13e3a:	2003      	movs	r0, #3
				conn->llcp_ack -= 2U;
   13e3c:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   13e40:	f884 20f4 	strb.w	r2, [r4, #244]	; 0xf4
				conn->llcp_type = LLCP_ENCRYPTION;
   13e44:	f884 00e6 	strb.w	r0, [r4, #230]	; 0xe6
				conn->llcp_ack -= 2U;
   13e48:	f7ff bb19 	b.w	1347e <ull_conn_rx+0xa4e>
		conn_upd_curr = conn;
   13e4c:	601c      	str	r4, [r3, #0]
   13e4e:	f7ff b9c5 	b.w	131dc <ull_conn_rx+0x7ac>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   13e52:	682b      	ldr	r3, [r5, #0]
   13e54:	2201      	movs	r2, #1
   13e56:	711a      	strb	r2, [r3, #4]
   13e58:	f7ff b99c 	b.w	13194 <ull_conn_rx+0x764>
				      0x03) == 0x02) &&
   13e5c:	f894 20e6 	ldrb.w	r2, [r4, #230]	; 0xe6
   13e60:	2a03      	cmp	r2, #3
   13e62:	f47f ac3a 	bne.w	136da <ull_conn_rx+0xcaa>
   13e66:	e431      	b.n	136cc <ull_conn_rx+0xc9c>
				uint16_t interval_min =
   13e68:	f8b6 8020 	ldrh.w	r8, [r6, #32]
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   13e6c:	f1b8 0f05 	cmp.w	r8, #5
				uint16_t interval_min =
   13e70:	fa1f f088 	uxth.w	r0, r8
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   13e74:	f67f ade6 	bls.w	13a44 <ull_conn_rx+0x1014>
				uint16_t interval_max =
   13e78:	f8b6 e022 	ldrh.w	lr, [r6, #34]	; 0x22
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   13e7c:	f5be 6f48 	cmp.w	lr, #3200	; 0xc80
				uint16_t interval_max =
   13e80:	fa1f f28e 	uxth.w	r2, lr
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   13e84:	f63f adde 	bhi.w	13a44 <ull_conn_rx+0x1014>
				    (interval_max > 3200) ||
   13e88:	4290      	cmp	r0, r2
   13e8a:	f63f addb 	bhi.w	13a44 <ull_conn_rx+0x1014>
				uint16_t latency =
   13e8e:	f8b6 c024 	ldrh.w	ip, [r6, #36]	; 0x24
   13e92:	fa1f f08c 	uxth.w	r0, ip
				    (interval_min > interval_max) ||
   13e96:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
				uint16_t latency =
   13e9a:	e9cd 0001 	strd	r0, r0, [sp, #4]
				    (interval_min > interval_max) ||
   13e9e:	f4bf add1 	bcs.w	13a44 <ull_conn_rx+0x1014>
				uint16_t timeout =
   13ea2:	8cf0      	ldrh	r0, [r6, #38]	; 0x26
   13ea4:	f8ad 000e 	strh.w	r0, [sp, #14]
				    (latency > 499) ||
   13ea8:	f1a0 090a 	sub.w	r9, r0, #10
   13eac:	fa1f f989 	uxth.w	r9, r9
   13eb0:	f640 4a76 	movw	sl, #3190	; 0xc76
   13eb4:	45d1      	cmp	r9, sl
				uint16_t timeout =
   13eb6:	fa1f fb80 	uxth.w	fp, r0
				    (latency > 499) ||
   13eba:	f63f adc3 	bhi.w	13a44 <ull_conn_rx+0x1014>
				     ((latency + 1) * interval_max)) ||
   13ebe:	9801      	ldr	r0, [sp, #4]
   13ec0:	fb00 2902 	mla	r9, r0, r2, r2
				    (timeout > 3200) ||
   13ec4:	ebb9 0f8b 	cmp.w	r9, fp, lsl #2
   13ec8:	f4bf adbc 	bcs.w	13a44 <ull_conn_rx+0x1014>
				     ((latency + 1) * interval_max)) ||
   13ecc:	f896 a028 	ldrb.w	sl, [r6, #40]	; 0x28
   13ed0:	4552      	cmp	r2, sl
   13ed2:	f4ff adb7 	bcc.w	13a44 <ull_conn_rx+0x1014>
				conn->llcp_conn_param.timeout =	timeout;
   13ed6:	f8bd 000e 	ldrh.w	r0, [sp, #14]
				conn->llcp_conn_param.latency =	latency;
   13eda:	f8a4 c18c 	strh.w	ip, [r4, #396]	; 0x18c
				conn->llcp_conn_param.interval_min =
   13ede:	f8a4 8188 	strh.w	r8, [r4, #392]	; 0x188
				conn->llcp_conn_param.interval_max =
   13ee2:	f8a4 e18a 	strh.w	lr, [r4, #394]	; 0x18a
				conn->llcp_conn_param.timeout =	timeout;
   13ee6:	f8a4 018e 	strh.w	r0, [r4, #398]	; 0x18e
				conn->llcp_conn_param.preferred_periodicity =
   13eea:	f884 a190 	strb.w	sl, [r4, #400]	; 0x190
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   13eee:	f896 e02a 	ldrb.w	lr, [r6, #42]	; 0x2a
   13ef2:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
				     lll->interval) ||
   13ef6:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   13efa:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
   13efe:	f8a4 0192 	strh.w	r0, [r4, #402]	; 0x192
					sys_le16_to_cpu(cpr->offset0);
   13f02:	f896 e02c 	ldrb.w	lr, [r6, #44]	; 0x2c
   13f06:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
   13f0a:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.offset0 =
   13f0e:	f8a4 0194 	strh.w	r0, [r4, #404]	; 0x194
					sys_le16_to_cpu(cpr->offset1);
   13f12:	f896 e02e 	ldrb.w	lr, [r6, #46]	; 0x2e
   13f16:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
   13f1a:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.offset1 =
   13f1e:	f8a4 0196 	strh.w	r0, [r4, #406]	; 0x196
					sys_le16_to_cpu(cpr->offset2);
   13f22:	f896 e030 	ldrb.w	lr, [r6, #48]	; 0x30
   13f26:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
   13f2a:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.offset2 =
   13f2e:	f8a4 0198 	strh.w	r0, [r4, #408]	; 0x198
					sys_le16_to_cpu(cpr->offset3);
   13f32:	f896 e032 	ldrb.w	lr, [r6, #50]	; 0x32
   13f36:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
   13f3a:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.offset3 =
   13f3e:	f8a4 019a 	strh.w	r0, [r4, #410]	; 0x19a
					sys_le16_to_cpu(cpr->offset4);
   13f42:	f896 0033 	ldrb.w	r0, [r6, #51]	; 0x33
   13f46:	f896 e034 	ldrb.w	lr, [r6, #52]	; 0x34
   13f4a:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.offset4 =
   13f4e:	f8a4 019c 	strh.w	r0, [r4, #412]	; 0x19c
					sys_le16_to_cpu(cpr->offset5);
   13f52:	f896 0035 	ldrb.w	r0, [r6, #53]	; 0x35
   13f56:	f896 6036 	ldrb.w	r6, [r6, #54]	; 0x36
				if ((conn->llcp_conn_param.interval_max !=
   13f5a:	4562      	cmp	r2, ip
					sys_le16_to_cpu(cpr->offset5);
   13f5c:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
				conn->llcp_conn_param.offset5 =
   13f60:	f8a4 019e 	strh.w	r0, [r4, #414]	; 0x19e
				if ((conn->llcp_conn_param.interval_max !=
   13f64:	f000 80af 	beq.w	140c6 <ull_conn_rx+0x1696>
					if (conn->llcp_enc.pause_tx) {
   13f68:	0789      	lsls	r1, r1, #30
						conn->llcp_conn_param.state =
   13f6a:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
					if (conn->llcp_enc.pause_tx) {
   13f6e:	f57f acd7 	bpl.w	13920 <ull_conn_rx+0xef0>
						(*rx)->hdr.type =
   13f72:	6829      	ldr	r1, [r5, #0]
						conn->llcp_conn_param.state =
   13f74:	2002      	movs	r0, #2
   13f76:	f360 0202 	bfi	r2, r0, #0, #3
						(*rx)->hdr.type =
   13f7a:	2001      	movs	r0, #1
						conn->llcp_conn_param.state =
   13f7c:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
						(*rx)->hdr.type =
   13f80:	7108      	strb	r0, [r1, #4]
   13f82:	e4d2      	b.n	1392a <ull_conn_rx+0xefa>
			LL_ASSERT(conn->slave.llcp_type == LLCP_NONE);
   13f84:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
			conn->llcp_ack += 2U;
   13f88:	3202      	adds	r2, #2
   13f8a:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
			LL_ASSERT(conn->slave.llcp_type == LLCP_NONE);
   13f8e:	2b00      	cmp	r3, #0
   13f90:	d146      	bne.n	14020 <ull_conn_rx+0x15f0>
			conn->slave.llcp_type = conn->llcp_type;
   13f92:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   13f96:	f884 30d9 	strb.w	r3, [r4, #217]	; 0xd9
   13f9a:	f7ff b9c7 	b.w	1332c <ull_conn_rx+0x8fc>
	struct node_tx *tx = NULL;
   13f9e:	2100      	movs	r1, #0
   13fa0:	f7fe bef9 	b.w	12d96 <ull_conn_rx+0x366>
				conn->llcp_length.state =
   13fa4:	2604      	movs	r6, #4
   13fa6:	f366 0302 	bfi	r3, r6, #0, #3
				conn->lll.max_tx_octets = eff_tx_octets;
   13faa:	f8a4 2058 	strh.w	r2, [r4, #88]	; 0x58
				conn->lll.max_tx_time = eff_tx_time;
   13fae:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
				conn->llcp_length.state =
   13fb2:	f884 31ae 	strb.w	r3, [r4, #430]	; 0x1ae
   13fb6:	e405      	b.n	137c4 <ull_conn_rx+0xd94>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   13fb8:	791a      	ldrb	r2, [r3, #4]
   13fba:	f002 0203 	and.w	r2, r2, #3
   13fbe:	2a03      	cmp	r2, #3
   13fc0:	f000 80c1 	beq.w	14146 <ull_conn_rx+0x1716>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   13fc4:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   13fc8:	f7ff b822 	b.w	13010 <ull_conn_rx+0x5e0>
			conn->tx_data = conn->tx_data->next;
   13fcc:	6818      	ldr	r0, [r3, #0]
   13fce:	f8c4 01d0 	str.w	r0, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   13fd2:	2a00      	cmp	r2, #0
   13fd4:	f47f a81c 	bne.w	13010 <ull_conn_rx+0x5e0>
			tx->next = conn->tx_head->next;
   13fd8:	681a      	ldr	r2, [r3, #0]
   13fda:	600a      	str	r2, [r1, #0]
			conn->tx_head->next = tx;
   13fdc:	6019      	str	r1, [r3, #0]
				conn->tx_ctrl_last = tx;
   13fde:	e9c4 1172 	strd	r1, r1, [r4, #456]	; 0x1c8
   13fe2:	f7ff b81c 	b.w	1301e <ull_conn_rx+0x5ee>
		LL_ASSERT(conn_upd_curr == conn);
   13fe6:	4f87      	ldr	r7, [pc, #540]	; (14204 <ull_conn_rx+0x17d4>)
   13fe8:	6839      	ldr	r1, [r7, #0]
   13fea:	428c      	cmp	r4, r1
   13fec:	d010      	beq.n	14010 <ull_conn_rx+0x15e0>
   13fee:	4a86      	ldr	r2, [pc, #536]	; (14208 <ull_conn_rx+0x17d8>)
   13ff0:	4986      	ldr	r1, [pc, #536]	; (1420c <ull_conn_rx+0x17dc>)
   13ff2:	4887      	ldr	r0, [pc, #540]	; (14210 <ull_conn_rx+0x17e0>)
   13ff4:	f241 2329 	movw	r3, #4649	; 0x1229
   13ff8:	f00a f9c4 	bl	1e384 <printk>
   13ffc:	4040      	eors	r0, r0
   13ffe:	f380 8811 	msr	BASEPRI, r0
   14002:	f04f 0003 	mov.w	r0, #3
   14006:	df02      	svc	2
   14008:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   1400c:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   14010:	f884 3185 	strb.w	r3, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
   14014:	2300      	movs	r3, #0
   14016:	603b      	str	r3, [r7, #0]
		conn->procedure_expire = 0U;
   14018:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   1401c:	f7ff baae 	b.w	1357c <ull_conn_rx+0xb4c>
			LL_ASSERT(conn->slave.llcp_type == LLCP_NONE);
   14020:	4a79      	ldr	r2, [pc, #484]	; (14208 <ull_conn_rx+0x17d8>)
   14022:	497c      	ldr	r1, [pc, #496]	; (14214 <ull_conn_rx+0x17e4>)
   14024:	487a      	ldr	r0, [pc, #488]	; (14210 <ull_conn_rx+0x17e0>)
   14026:	f241 63c1 	movw	r3, #5825	; 0x16c1
   1402a:	f00a f9ab 	bl	1e384 <printk>
   1402e:	4040      	eors	r0, r0
   14030:	f380 8811 	msr	BASEPRI, r0
   14034:	f04f 0003 	mov.w	r0, #3
   14038:	df02      	svc	2
   1403a:	e7aa      	b.n	13f92 <ull_conn_rx+0x1562>
				conn->lll.max_tx_octets = eff_tx_octets;
   1403c:	f8a4 2058 	strh.w	r2, [r4, #88]	; 0x58
				conn->lll.max_tx_time = eff_tx_time;
   14040:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
   14044:	e6e9      	b.n	13e1a <ull_conn_rx+0x13ea>
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   14046:	4558      	cmp	r0, fp
   14048:	f47f aecf 	bne.w	13dea <ull_conn_rx+0x13ba>
			    eff_rx_time == conn->lll.max_rx_time &&
   1404c:	45d4      	cmp	ip, sl
   1404e:	f47f aecc 	bne.w	13dea <ull_conn_rx+0x13ba>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   14052:	682b      	ldr	r3, [r5, #0]
   14054:	2501      	movs	r5, #1
   14056:	711d      	strb	r5, [r3, #4]
				goto send_length_resp;
   14058:	f7ff bbbe 	b.w	137d8 <ull_conn_rx+0xda8>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   1405c:	2a23      	cmp	r2, #35	; 0x23
   1405e:	f43f aa86 	beq.w	1356e <ull_conn_rx+0xb3e>
			conn->slave.ticks_to_offset =
   14062:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
   14066:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
   1406a:	f7ff ba80 	b.w	1356e <ull_conn_rx+0xb3e>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   1406e:	2b23      	cmp	r3, #35	; 0x23
   14070:	f43f adf5 	beq.w	13c5e <ull_conn_rx+0x122e>
			conn->slave.ticks_to_offset =
   14074:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
   14078:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
   1407c:	e5ef      	b.n	13c5e <ull_conn_rx+0x122e>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1407e:	791a      	ldrb	r2, [r3, #4]
   14080:	f002 0203 	and.w	r2, r2, #3
   14084:	2a03      	cmp	r2, #3
   14086:	d072      	beq.n	1416e <ull_conn_rx+0x173e>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   14088:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   1408c:	f7ff b9c4 	b.w	13418 <ull_conn_rx+0x9e8>
			conn->tx_data = conn->tx_data->next;
   14090:	6819      	ldr	r1, [r3, #0]
   14092:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   14096:	2a00      	cmp	r2, #0
   14098:	f47f a9be 	bne.w	13418 <ull_conn_rx+0x9e8>
			tx->next = conn->tx_head->next;
   1409c:	681a      	ldr	r2, [r3, #0]
   1409e:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   140a0:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
   140a2:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   140a6:	f7ff b9be 	b.w	13426 <ull_conn_rx+0x9f6>
	LL_ASSERT(rx_dle);
   140aa:	4a57      	ldr	r2, [pc, #348]	; (14208 <ull_conn_rx+0x17d8>)
   140ac:	495a      	ldr	r1, [pc, #360]	; (14218 <ull_conn_rx+0x17e8>)
   140ae:	4858      	ldr	r0, [pc, #352]	; (14210 <ull_conn_rx+0x17e0>)
   140b0:	f241 43eb 	movw	r3, #5355	; 0x14eb
   140b4:	f00a f966 	bl	1e384 <printk>
   140b8:	4040      	eors	r0, r0
   140ba:	f380 8811 	msr	BASEPRI, r0
   140be:	f04f 0003 	mov.w	r0, #3
   140c2:	df02      	svc	2
   140c4:	e599      	b.n	13bfa <ull_conn_rx+0x11ca>
				     lll->interval) ||
   140c6:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   140c8:	9802      	ldr	r0, [sp, #8]
   140ca:	4282      	cmp	r2, r0
   140cc:	f47f af4c 	bne.w	13f68 <ull_conn_rx+0x1538>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   140d0:	f240 42e2 	movw	r2, #1250	; 0x4e2
   140d4:	fb02 f00c 	mul.w	r0, r2, ip
   140d8:	f242 7210 	movw	r2, #10000	; 0x2710
				     lll->latency) ||
   140dc:	f8b4 60c2 	ldrh.w	r6, [r4, #194]	; 0xc2
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   140e0:	fb02 020b 	mla	r2, r2, fp, r0
   140e4:	3a01      	subs	r2, #1
   140e6:	fbb2 f2f0 	udiv	r2, r2, r0
				     lll->latency) ||
   140ea:	b292      	uxth	r2, r2
   140ec:	4296      	cmp	r6, r2
   140ee:	f47f af3b 	bne.w	13f68 <ull_conn_rx+0x1538>
				conn->llcp_conn_param.state =
   140f2:	f8b4 2186 	ldrh.w	r2, [r4, #390]	; 0x186
   140f6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
   140fa:	f042 0201 	orr.w	r2, r2, #1
   140fe:	f8a4 2186 	strh.w	r2, [r4, #390]	; 0x186
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   14102:	682a      	ldr	r2, [r5, #0]
   14104:	2101      	movs	r1, #1
   14106:	7111      	strb	r1, [r2, #4]
   14108:	e40f      	b.n	1392a <ull_conn_rx+0xefa>
			     lll->interval) ||
   1410a:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
   1410c:	4550      	cmp	r0, sl
   1410e:	f47f ac05 	bne.w	1391c <ull_conn_rx+0xeec>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   14112:	f240 40e2 	movw	r0, #1250	; 0x4e2
   14116:	fb00 f101 	mul.w	r1, r0, r1
   1411a:	f242 7010 	movw	r0, #10000	; 0x2710
   1411e:	fb00 1202 	mla	r2, r0, r2, r1
			    (conn->llcp_conn_param.latency != lll->latency) ||
   14122:	f8b4 00c2 	ldrh.w	r0, [r4, #194]	; 0xc2
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   14126:	3a01      	subs	r2, #1
   14128:	fbb2 f2f1 	udiv	r2, r2, r1
			    (conn->llcp_conn_param.latency != lll->latency) ||
   1412c:	b292      	uxth	r2, r2
   1412e:	4290      	cmp	r0, r2
   14130:	f47f abf4 	bne.w	1391c <ull_conn_rx+0xeec>
   14134:	e7dd      	b.n	140f2 <ull_conn_rx+0x16c2>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   14136:	793b      	ldrb	r3, [r7, #4]
   14138:	f003 0303 	and.w	r3, r3, #3
   1413c:	2b03      	cmp	r3, #3
   1413e:	d05b      	beq.n	141f8 <ull_conn_rx+0x17c8>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   14140:	e9c4 7772 	strd	r7, r7, [r4, #456]	; 0x1c8
   14144:	e46f      	b.n	13a26 <ull_conn_rx+0xff6>
	    ((pdu_data_tx->llctrl.opcode !=
   14146:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   14148:	2a03      	cmp	r2, #3
   1414a:	f43f af45 	beq.w	13fd8 <ull_conn_rx+0x15a8>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1414e:	2a0a      	cmp	r2, #10
   14150:	f47f af38 	bne.w	13fc4 <ull_conn_rx+0x1594>
   14154:	e740      	b.n	13fd8 <ull_conn_rx+0x15a8>
			conn->tx_data = conn->tx_data->next;
   14156:	6839      	ldr	r1, [r7, #0]
   14158:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1415c:	2b00      	cmp	r3, #0
   1415e:	f47f ac62 	bne.w	13a26 <ull_conn_rx+0xff6>
			tx->next = conn->tx_head->next;
   14162:	683b      	ldr	r3, [r7, #0]
   14164:	6013      	str	r3, [r2, #0]
			conn->tx_head->next = tx;
   14166:	603a      	str	r2, [r7, #0]
				conn->tx_ctrl_last = tx;
   14168:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
   1416c:	e462      	b.n	13a34 <ull_conn_rx+0x1004>
	    ((pdu_data_tx->llctrl.opcode !=
   1416e:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   14170:	2a03      	cmp	r2, #3
   14172:	d093      	beq.n	1409c <ull_conn_rx+0x166c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   14174:	2a0a      	cmp	r2, #10
   14176:	d187      	bne.n	14088 <ull_conn_rx+0x1658>
   14178:	e790      	b.n	1409c <ull_conn_rx+0x166c>
		LL_ASSERT(conn->llcp_cu.req == conn->llcp_cu.ack);
   1417a:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
   1417e:	f894 210d 	ldrb.w	r2, [r4, #269]	; 0x10d
   14182:	4293      	cmp	r3, r2
   14184:	d00e      	beq.n	141a4 <ull_conn_rx+0x1774>
   14186:	4a20      	ldr	r2, [pc, #128]	; (14208 <ull_conn_rx+0x17d8>)
   14188:	4924      	ldr	r1, [pc, #144]	; (1421c <ull_conn_rx+0x17ec>)
   1418a:	4821      	ldr	r0, [pc, #132]	; (14210 <ull_conn_rx+0x17e0>)
   1418c:	f241 230e 	movw	r3, #4622	; 0x120e
   14190:	f00a f8f8 	bl	1e384 <printk>
   14194:	4040      	eors	r0, r0
   14196:	f380 8811 	msr	BASEPRI, r0
   1419a:	f04f 0003 	mov.w	r0, #3
   1419e:	df02      	svc	2
   141a0:	f894 210d 	ldrb.w	r2, [r4, #269]	; 0x10d
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   141a4:	f894 1186 	ldrb.w	r1, [r4, #390]	; 0x186
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   141a8:	f8b4 318a 	ldrh.w	r3, [r4, #394]	; 0x18a
   141ac:	f8a4 3110 	strh.w	r3, [r4, #272]	; 0x110
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   141b0:	2305      	movs	r3, #5
   141b2:	f363 0102 	bfi	r1, r3, #0, #3
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   141b6:	f894 010e 	ldrb.w	r0, [r4, #270]	; 0x10e
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   141ba:	f884 1186 	strb.w	r1, [r4, #390]	; 0x186
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   141be:	f3c1 03c0 	ubfx	r3, r1, #3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   141c2:	00db      	lsls	r3, r3, #3
   141c4:	f020 000f 	bic.w	r0, r0, #15
   141c8:	f043 0301 	orr.w	r3, r3, #1
   141cc:	4303      	orrs	r3, r0
		conn->llcp_cu.ack--;
   141ce:	3a01      	subs	r2, #1
		conn->llcp_cu.win_size = 1U;
   141d0:	2501      	movs	r5, #1
		conn->llcp_cu.ack--;
   141d2:	f884 210d 	strb.w	r2, [r4, #269]	; 0x10d
		conn->llcp_cu.win_offset_us = 0U;
   141d6:	2000      	movs	r0, #0
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   141d8:	f8b4 218c 	ldrh.w	r2, [r4, #396]	; 0x18c
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   141dc:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   141e0:	f8b4 318e 	ldrh.w	r3, [r4, #398]	; 0x18e
		conn->llcp_cu.win_size = 1U;
   141e4:	f884 511c 	strb.w	r5, [r4, #284]	; 0x11c
		conn->llcp_cu.win_offset_us = 0U;
   141e8:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   141ec:	f8a4 2112 	strh.w	r2, [r4, #274]	; 0x112
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   141f0:	f8a4 3114 	strh.w	r3, [r4, #276]	; 0x114
	if (err) {
   141f4:	f7fe bc69 	b.w	12aca <ull_conn_rx+0x9a>
	    ((pdu_data_tx->llctrl.opcode !=
   141f8:	79fb      	ldrb	r3, [r7, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   141fa:	2b03      	cmp	r3, #3
   141fc:	d0b1      	beq.n	14162 <ull_conn_rx+0x1732>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   141fe:	2b0a      	cmp	r3, #10
   14200:	d19e      	bne.n	14140 <ull_conn_rx+0x1710>
   14202:	e7ae      	b.n	14162 <ull_conn_rx+0x1732>
   14204:	20002074 	.word	0x20002074
   14208:	00024874 	.word	0x00024874
   1420c:	000249e8 	.word	0x000249e8
   14210:	00024334 	.word	0x00024334
   14214:	0002499c 	.word	0x0002499c
   14218:	00024a00 	.word	0x00024a00
   1421c:	000249c0 	.word	0x000249c0

00014220 <ull_conn_llcp>:
{
   14220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14224:	4604      	mov	r4, r0
	if ((conn->llcp_ack == conn->llcp_req) &&
   14226:	f890 00e5 	ldrb.w	r0, [r0, #229]	; 0xe5
   1422a:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   1422e:	4298      	cmp	r0, r3
{
   14230:	460d      	mov	r5, r1
   14232:	4616      	mov	r6, r2
	if ((conn->llcp_ack == conn->llcp_req) &&
   14234:	d042      	beq.n	142bc <ull_conn_llcp+0x9c>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   14236:	1a1b      	subs	r3, r3, r0
   14238:	f003 0303 	and.w	r3, r3, #3
   1423c:	2b02      	cmp	r3, #2
   1423e:	d055      	beq.n	142ec <ull_conn_llcp+0xcc>
   14240:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
   14244:	468c      	mov	ip, r1
	if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   14246:	f1bc 0f00 	cmp.w	ip, #0
   1424a:	f2c0 8084 	blt.w	14356 <ull_conn_llcp+0x136>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
   1424e:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
   14252:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
   14256:	429a      	cmp	r2, r3
   14258:	d07a      	beq.n	14350 <ull_conn_llcp+0x130>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1425a:	48c0      	ldr	r0, [pc, #768]	; (1455c <ull_conn_llcp+0x33c>)
   1425c:	f7f8 fcf6 	bl	cc4c <mem_acquire>
		if (tx) {
   14260:	2800      	cmp	r0, #0
   14262:	d06c      	beq.n	1433e <ull_conn_llcp+0x11e>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
   14264:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
   14268:	f884 3141 	strb.w	r3, [r4, #321]	; 0x141
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1426c:	7903      	ldrb	r3, [r0, #4]
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
   1426e:	2202      	movs	r2, #2
   14270:	7142      	strb	r2, [r0, #5]
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   14272:	f043 0303 	orr.w	r3, r3, #3
   14276:	7103      	strb	r3, [r0, #4]
			pdu_tx->llctrl.opcode =
   14278:	71c2      	strb	r2, [r0, #7]
	    conn->tx_head &&
   1427a:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
			pdu_tx->llctrl.terminate_ind.error_code =
   1427e:	f894 2142 	ldrb.w	r2, [r4, #322]	; 0x142
   14282:	7202      	strb	r2, [r0, #8]
	if (
   14284:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   14288:	2b00      	cmp	r3, #0
   1428a:	d04b      	beq.n	14324 <ull_conn_llcp+0x104>
	    !conn->llcp_enc.pause_tx &&
   1428c:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   14290:	078d      	lsls	r5, r1, #30
   14292:	d447      	bmi.n	14324 <ull_conn_llcp+0x104>
	    !conn->llcp_phy.pause_tx &&
   14294:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   14298:	07c9      	lsls	r1, r1, #31
   1429a:	d443      	bmi.n	14324 <ull_conn_llcp+0x104>
		if (conn->tx_head == conn->tx_data) {
   1429c:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   142a0:	428b      	cmp	r3, r1
   142a2:	f000 846f 	beq.w	14b84 <ull_conn_llcp+0x964>
		} else if (!conn->tx_ctrl) {
   142a6:	2a00      	cmp	r2, #0
   142a8:	d13e      	bne.n	14328 <ull_conn_llcp+0x108>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   142aa:	791a      	ldrb	r2, [r3, #4]
   142ac:	f002 0203 	and.w	r2, r2, #3
   142b0:	2a03      	cmp	r2, #3
   142b2:	f000 8700 	beq.w	150b6 <ull_conn_llcp+0xe96>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   142b6:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
   142ba:	e037      	b.n	1432c <ull_conn_llcp+0x10c>
   142bc:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
	if ((conn->llcp_ack == conn->llcp_req) &&
   142c0:	2900      	cmp	r1, #0
   142c2:	468c      	mov	ip, r1
   142c4:	f2c0 81c5 	blt.w	14652 <ull_conn_llcp+0x432>
	    !conn->llcp_enc.pause_rx) {
   142c8:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    (!conn->lll.role || (conn->slave.llcp_type == LLCP_NONE)) &&
   142cc:	f012 0801 	ands.w	r8, r2, #1
   142d0:	d1b9      	bne.n	14246 <ull_conn_llcp+0x26>
		if (conn->llcp_cu.ack != conn->llcp_cu.req) {
   142d2:	f894 e10d 	ldrb.w	lr, [r4, #269]	; 0x10d
   142d6:	f894 710c 	ldrb.w	r7, [r4, #268]	; 0x10c
   142da:	4577      	cmp	r7, lr
   142dc:	f000 8369 	beq.w	149b2 <ull_conn_llcp+0x792>
			conn->llcp_ack -= 2U;
   142e0:	1e83      	subs	r3, r0, #2
			conn->llcp_type = LLCP_CONN_UPD;
   142e2:	2201      	movs	r2, #1
			conn->llcp_ack -= 2U;
   142e4:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
			conn->llcp_type = LLCP_CONN_UPD;
   142e8:	f884 20e6 	strb.w	r2, [r4, #230]	; 0xe6
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   142ec:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
   142f0:	f894 21ad 	ldrb.w	r2, [r4, #429]	; 0x1ad
   142f4:	429a      	cmp	r2, r3
   142f6:	d006      	beq.n	14306 <ull_conn_llcp+0xe6>
			if ((conn->llcp_length.state ==
   142f8:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
   142fc:	f002 0106 	and.w	r1, r2, #6
   14300:	2904      	cmp	r1, #4
   14302:	f000 81ac 	beq.w	1465e <ull_conn_llcp+0x43e>
		switch (conn->llcp_type) {
   14306:	f894 90e6 	ldrb.w	r9, [r4, #230]	; 0xe6
   1430a:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
   1430e:	2b05      	cmp	r3, #5
   14310:	f200 8191 	bhi.w	14636 <ull_conn_llcp+0x416>
   14314:	e8df f013 	tbh	[pc, r3, lsl #1]
   14318:	012a015c 	.word	0x012a015c
   1431c:	018f009e 	.word	0x018f009e
   14320:	00580063 	.word	0x00580063
		if (!conn->tx_ctrl) {
   14324:	2a00      	cmp	r2, #0
   14326:	d049      	beq.n	143bc <ull_conn_llcp+0x19c>
	tx->next = conn->tx_ctrl_last->next;
   14328:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   1432c:	681a      	ldr	r2, [r3, #0]
   1432e:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   14330:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   14332:	6803      	ldr	r3, [r0, #0]
   14334:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   14338:	b90b      	cbnz	r3, 1433e <ull_conn_llcp+0x11e>
		conn->tx_data_last = tx;
   1433a:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
		if (!conn->procedure_expire) {
   1433e:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
   14342:	b928      	cbnz	r0, 14350 <ull_conn_llcp+0x130>
			conn->procedure_expire = conn->supervision_reload;
   14344:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
			if (conn->procedure_expire <= 1U) {
   14348:	2b01      	cmp	r3, #1
   1434a:	d91e      	bls.n	1438a <ull_conn_llcp+0x16a>
			conn->procedure_expire = conn->supervision_reload;
   1434c:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	return 0;
   14350:	2000      	movs	r0, #0
}
   14352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14356:	f894 20d9 	ldrb.w	r2, [r4, #217]	; 0xd9
	if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   1435a:	2a00      	cmp	r2, #0
   1435c:	f43f af77 	beq.w	1424e <ull_conn_llcp+0x2e>
		switch (conn->slave.llcp_type) {
   14360:	2a02      	cmp	r2, #2
   14362:	f000 8140 	beq.w	145e6 <ull_conn_llcp+0x3c6>
   14366:	2a06      	cmp	r2, #6
   14368:	d014      	beq.n	14394 <ull_conn_llcp+0x174>
   1436a:	2a01      	cmp	r2, #1
   1436c:	d01b      	beq.n	143a6 <ull_conn_llcp+0x186>
			LL_ASSERT(0);
   1436e:	4a7c      	ldr	r2, [pc, #496]	; (14560 <ull_conn_llcp+0x340>)
   14370:	497c      	ldr	r1, [pc, #496]	; (14564 <ull_conn_llcp+0x344>)
   14372:	487d      	ldr	r0, [pc, #500]	; (14568 <ull_conn_llcp+0x348>)
   14374:	f240 434f 	movw	r3, #1103	; 0x44f
   14378:	f00a f804 	bl	1e384 <printk>
   1437c:	4040      	eors	r0, r0
   1437e:	f380 8811 	msr	BASEPRI, r0
   14382:	f04f 0003 	mov.w	r0, #3
   14386:	df02      	svc	2
			break;
   14388:	e761      	b.n	1424e <ull_conn_llcp+0x2e>
				conn->procedure_expire++;
   1438a:	3301      	adds	r3, #1
   1438c:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
}
   14390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			event_counter = lll->event_counter +
   14394:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
   14396:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   14398:	440a      	add	r2, r1
					lll->latency_prepare + lazy;
   1439a:	4432      	add	r2, r6
			event_phy_upd_ind_prep(conn, event_counter);
   1439c:	b291      	uxth	r1, r2
   1439e:	4620      	mov	r0, r4
   143a0:	f7fd fe24 	bl	11fec <event_phy_upd_ind_prep>
		break;
   143a4:	e753      	b.n	1424e <ull_conn_llcp+0x2e>
			if (event_conn_upd_prep(conn, lazy,
   143a6:	462a      	mov	r2, r5
   143a8:	4631      	mov	r1, r6
   143aa:	4620      	mov	r0, r4
   143ac:	f7ed fa5c 	bl	1868 <event_conn_upd_prep>
   143b0:	2800      	cmp	r0, #0
   143b2:	f47f af4c 	bne.w	1424e <ull_conn_llcp+0x2e>
				return -ECANCELED;
   143b6:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   143ba:	e7ca      	b.n	14352 <ull_conn_llcp+0x132>
			tx->next = conn->tx_head;
   143bc:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   143be:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   143c2:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   143c6:	e7b7      	b.n	14338 <ull_conn_llcp+0x118>
			event_counter = lll->event_counter +
   143c8:	8e61      	ldrh	r1, [r4, #50]	; 0x32
   143ca:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   143cc:	4419      	add	r1, r3
					lll->latency_prepare + lazy;
   143ce:	4431      	add	r1, r6
			event_phy_upd_ind_prep(conn, event_counter);
   143d0:	b289      	uxth	r1, r1
   143d2:	4620      	mov	r0, r4
   143d4:	f7fd fe0a 	bl	11fec <event_phy_upd_ind_prep>
		break;
   143d8:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   143dc:	e733      	b.n	14246 <ull_conn_llcp+0x26>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   143de:	485f      	ldr	r0, [pc, #380]	; (1455c <ull_conn_llcp+0x33c>)
   143e0:	f7f8 fc34 	bl	cc4c <mem_acquire>
	if (tx) {
   143e4:	2800      	cmp	r0, #0
   143e6:	f000 80fb 	beq.w	145e0 <ull_conn_llcp+0x3c0>
		conn->llcp_ack = conn->llcp_req;
   143ea:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   143ee:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
   143f2:	2301      	movs	r3, #1
   143f4:	7143      	strb	r3, [r0, #5]
   143f6:	e9d4 3771 	ldrd	r3, r7, [r4, #452]	; 0x1c4
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   143fa:	7902      	ldrb	r2, [r0, #4]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
   143fc:	2112      	movs	r1, #18
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   143fe:	f042 0203 	orr.w	r2, r2, #3
   14402:	7102      	strb	r2, [r0, #4]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
   14404:	71c1      	strb	r1, [r0, #7]
	if (
   14406:	2b00      	cmp	r3, #0
   14408:	f000 8327 	beq.w	14a5a <ull_conn_llcp+0x83a>
	    !conn->llcp_enc.pause_tx &&
   1440c:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   14410:	0791      	lsls	r1, r2, #30
   14412:	f100 8322 	bmi.w	14a5a <ull_conn_llcp+0x83a>
	    !conn->llcp_phy.pause_tx &&
   14416:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   1441a:	07d2      	lsls	r2, r2, #31
   1441c:	f100 831d 	bmi.w	14a5a <ull_conn_llcp+0x83a>
		if (conn->tx_head == conn->tx_data) {
   14420:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   14424:	4293      	cmp	r3, r2
   14426:	f000 87f1 	beq.w	1540c <ull_conn_llcp+0x11ec>
		} else if (!conn->tx_ctrl) {
   1442a:	2f00      	cmp	r7, #0
   1442c:	f000 87fc 	beq.w	15428 <ull_conn_llcp+0x1208>
	tx->next = conn->tx_ctrl_last->next;
   14430:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   14434:	681a      	ldr	r2, [r3, #0]
   14436:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   14438:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   1443a:	6803      	ldr	r3, [r0, #0]
   1443c:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   14440:	2b00      	cmp	r3, #0
   14442:	f000 84ab 	beq.w	14d9c <ull_conn_llcp+0xb7c>
		conn->procedure_expire = conn->procedure_reload;
   14446:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   1444a:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   1444e:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   14452:	e6f8      	b.n	14246 <ull_conn_llcp+0x26>
	if (conn->llcp.encryption.state) {
   14454:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
   14458:	f012 0803 	ands.w	r8, r2, #3
   1445c:	f000 8161 	beq.w	14722 <ull_conn_llcp+0x502>
		if (lll->role &&
   14460:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   14464:	2b00      	cmp	r3, #0
   14466:	f6bf aef2 	bge.w	1424e <ull_conn_llcp+0x2e>
   1446a:	f1b8 0f01 	cmp.w	r8, #1
   1446e:	f47f af72 	bne.w	14356 <ull_conn_llcp+0x136>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   14472:	483a      	ldr	r0, [pc, #232]	; (1455c <ull_conn_llcp+0x33c>)
   14474:	f7f8 fbea 	bl	cc4c <mem_acquire>
	if (!tx) {
   14478:	4680      	mov	r8, r0
   1447a:	2800      	cmp	r0, #0
   1447c:	f000 80b0 	beq.w	145e0 <ull_conn_llcp+0x3c0>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14480:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   14482:	2204      	movs	r2, #4
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14484:	f043 0303 	orr.w	r3, r3, #3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
   14488:	210d      	movs	r1, #13
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
   1448a:	f100 0708 	add.w	r7, r0, #8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1448e:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
   14490:	7141      	strb	r1, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   14492:	71c2      	strb	r2, [r0, #7]
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
   14494:	210c      	movs	r1, #12
   14496:	4638      	mov	r0, r7
   14498:	f003 fa26 	bl	178e8 <lll_csrand_isr_get>
   1449c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   144a0:	f8d8 200c 	ldr.w	r2, [r8, #12]
   144a4:	f8c4 2102 	str.w	r2, [r4, #258]	; 0x102
   144a8:	f8c4 30fe 	str.w	r3, [r4, #254]	; 0xfe
	    conn->tx_head &&
   144ac:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   144b0:	f8d8 2010 	ldr.w	r2, [r8, #16]
   144b4:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	if (
   144b8:	2b00      	cmp	r3, #0
   144ba:	f000 85b6 	beq.w	1502a <ull_conn_llcp+0xe0a>
	    !conn->llcp_enc.pause_tx &&
   144be:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
   144c2:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
	    conn->tx_head &&
   144c6:	0789      	lsls	r1, r1, #30
   144c8:	f100 85b1 	bmi.w	1502e <ull_conn_llcp+0xe0e>
	    !conn->llcp_phy.pause_tx &&
   144cc:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   144d0:	07cf      	lsls	r7, r1, #31
   144d2:	f100 85ac 	bmi.w	1502e <ull_conn_llcp+0xe0e>
		if (conn->tx_head == conn->tx_data) {
   144d6:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   144da:	428b      	cmp	r3, r1
   144dc:	f000 87e2 	beq.w	154a4 <ull_conn_llcp+0x1284>
		} else if (!conn->tx_ctrl) {
   144e0:	2a00      	cmp	r2, #0
   144e2:	f001 8055 	beq.w	15590 <ull_conn_llcp+0x1370>
	tx->next = conn->tx_ctrl_last->next;
   144e6:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   144ea:	681a      	ldr	r2, [r3, #0]
   144ec:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
   144f0:	f8c3 8000 	str.w	r8, [r3]
	conn->tx_ctrl_last = tx;
   144f4:	f8d8 3000 	ldr.w	r3, [r8]
   144f8:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
	if (!tx->next) {
   144fc:	2b00      	cmp	r3, #0
   144fe:	f000 86d1 	beq.w	152a4 <ull_conn_llcp+0x1084>
			rx = ll_pdu_rx_alloc();
   14502:	f7fc fae7 	bl	10ad4 <ll_pdu_rx_alloc>
			if (!rx) {
   14506:	4601      	mov	r1, r0
   14508:	2800      	cmp	r0, #0
   1450a:	d069      	beq.n	145e0 <ull_conn_llcp+0x3c0>
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   1450c:	7f0b      	ldrb	r3, [r1, #28]
			rx->hdr.handle = conn->lll.handle;
   1450e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   14510:	80ca      	strh	r2, [r1, #6]
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   14512:	f043 0303 	orr.w	r3, r3, #3
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   14516:	2203      	movs	r2, #3
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
   14518:	2017      	movs	r0, #23
   1451a:	7748      	strb	r0, [r1, #29]
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   1451c:	770b      	strb	r3, [r1, #28]
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1451e:	710a      	strb	r2, [r1, #4]
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   14520:	77ca      	strb	r2, [r1, #31]
   14522:	f8d4 216d 	ldr.w	r2, [r4, #365]	; 0x16d
   14526:	f8d4 3169 	ldr.w	r3, [r4, #361]	; 0x169
   1452a:	620b      	str	r3, [r1, #32]
   1452c:	624a      	str	r2, [r1, #36]	; 0x24
			pdu->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
   1452e:	f894 3167 	ldrb.w	r3, [r4, #359]	; 0x167
   14532:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
			pdu->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
   14536:	f894 3168 	ldrb.w	r3, [r4, #360]	; 0x168
   1453a:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
			ll_rx_put(rx->hdr.link, rx);
   1453e:	6808      	ldr	r0, [r1, #0]
   14540:	f7fc fa9a 	bl	10a78 <ll_rx_put>
			ll_rx_sched();
   14544:	f7fc faa2 	bl	10a8c <ll_rx_sched>
			conn->llcp.encryption.state = LLCP_ENC_STATE_LTK_WAIT;
   14548:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   1454c:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   14550:	2202      	movs	r2, #2
   14552:	f362 0301 	bfi	r3, r2, #0, #2
   14556:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
   1455a:	e674      	b.n	14246 <ull_conn_llcp+0x26>
   1455c:	200020f8 	.word	0x200020f8
   14560:	00024874 	.word	0x00024874
   14564:	000243a4 	.word	0x000243a4
   14568:	00024334 	.word	0x00024334
			event_counter = lll->event_counter +
   1456c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   1456e:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
	if (conn->llcp.chan_map.initiate) {
   14570:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
			event_counter = lll->event_counter +
   14574:	440b      	add	r3, r1
					lll->latency_prepare + lazy;
   14576:	4433      	add	r3, r6
	if (conn->llcp.chan_map.initiate) {
   14578:	f012 0201 	ands.w	r2, r2, #1
			event_counter = lll->event_counter +
   1457c:	b29f      	uxth	r7, r3
	if (conn->llcp.chan_map.initiate) {
   1457e:	f040 8085 	bne.w	1468c <ull_conn_llcp+0x46c>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   14582:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
   14586:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   1458a:	1afb      	subs	r3, r7, r3
   1458c:	0418      	lsls	r0, r3, #16
   1458e:	f53f ae5a 	bmi.w	14246 <ull_conn_llcp+0x26>
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   14592:	f1bc 0f00 	cmp.w	ip, #0
   14596:	f2c0 83f9 	blt.w	14d8c <ull_conn_llcp+0xb6c>
			conn->llcp_ack = conn->llcp_req;
   1459a:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   1459e:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
   145a2:	4623      	mov	r3, r4
		memcpy(&lll->data_chan_map[0],
   145a4:	f104 0034 	add.w	r0, r4, #52	; 0x34
   145a8:	f853 2fe9 	ldr.w	r2, [r3, #233]!
   145ac:	6362      	str	r2, [r4, #52]	; 0x34
   145ae:	791b      	ldrb	r3, [r3, #4]
   145b0:	7103      	strb	r3, [r0, #4]
			util_ones_count_get(&lll->data_chan_map[0],
   145b2:	2105      	movs	r1, #5
   145b4:	f7f8 fd16 	bl	cfe4 <util_ones_count_get>
		lll->data_chan_count =
   145b8:	f894 c039 	ldrb.w	ip, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   145bc:	2301      	movs	r3, #1
		lll->data_chan_count =
   145be:	f360 0c05 	bfi	ip, r0, #0, #6
   145c2:	f884 c039 	strb.w	ip, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   145c6:	f884 31d8 	strb.w	r3, [r4, #472]	; 0x1d8
   145ca:	fa4f fc8c 	sxtb.w	ip, ip
   145ce:	e63a      	b.n	14246 <ull_conn_llcp+0x26>
			if (event_conn_upd_prep(conn, lazy,
   145d0:	462a      	mov	r2, r5
   145d2:	4631      	mov	r1, r6
   145d4:	4620      	mov	r0, r4
   145d6:	f7ed f947 	bl	1868 <event_conn_upd_prep>
   145da:	2800      	cmp	r0, #0
   145dc:	f43f aeeb 	beq.w	143b6 <ull_conn_llcp+0x196>
			break;
   145e0:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   145e4:	e62f      	b.n	14246 <ull_conn_llcp+0x26>
			event_counter = lll->event_counter +
   145e6:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   145e8:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
	if (conn->llcp.chan_map.initiate) {
   145ea:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
			event_counter = lll->event_counter +
   145ee:	440a      	add	r2, r1
					lll->latency_prepare + lazy;
   145f0:	4432      	add	r2, r6
	if (conn->llcp.chan_map.initiate) {
   145f2:	f013 0301 	ands.w	r3, r3, #1
			event_counter = lll->event_counter +
   145f6:	b296      	uxth	r6, r2
	if (conn->llcp.chan_map.initiate) {
   145f8:	f040 80f4 	bne.w	147e4 <ull_conn_llcp+0x5c4>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   145fc:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
   14600:	1ab6      	subs	r6, r6, r2
   14602:	0436      	lsls	r6, r6, #16
   14604:	f53f ae23 	bmi.w	1424e <ull_conn_llcp+0x2e>
   14608:	4622      	mov	r2, r4
			conn->slave.llcp_type = LLCP_NONE;
   1460a:	f884 30d9 	strb.w	r3, [r4, #217]	; 0xd9
   1460e:	f852 3fe9 	ldr.w	r3, [r2, #233]!
   14612:	6363      	str	r3, [r4, #52]	; 0x34
		memcpy(&lll->data_chan_map[0],
   14614:	f104 0034 	add.w	r0, r4, #52	; 0x34
   14618:	7913      	ldrb	r3, [r2, #4]
   1461a:	7103      	strb	r3, [r0, #4]
			util_ones_count_get(&lll->data_chan_map[0],
   1461c:	2105      	movs	r1, #5
   1461e:	f7f8 fce1 	bl	cfe4 <util_ones_count_get>
		lll->data_chan_count =
   14622:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   14626:	2201      	movs	r2, #1
		lll->data_chan_count =
   14628:	f360 0305 	bfi	r3, r0, #0, #6
   1462c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   14630:	f884 21d8 	strb.w	r2, [r4, #472]	; 0x1d8
   14634:	e60b      	b.n	1424e <ull_conn_llcp+0x2e>
			LL_ASSERT(0);
   14636:	4ab1      	ldr	r2, [pc, #708]	; (148fc <ull_conn_llcp+0x6dc>)
   14638:	49b1      	ldr	r1, [pc, #708]	; (14900 <ull_conn_llcp+0x6e0>)
   1463a:	48b2      	ldr	r0, [pc, #712]	; (14904 <ull_conn_llcp+0x6e4>)
   1463c:	f240 431e 	movw	r3, #1054	; 0x41e
   14640:	f009 fea0 	bl	1e384 <printk>
   14644:	4040      	eors	r0, r0
   14646:	f380 8811 	msr	BASEPRI, r0
   1464a:	f04f 0003 	mov.w	r0, #3
   1464e:	df02      	svc	2
   14650:	e7c6      	b.n	145e0 <ull_conn_llcp+0x3c0>
	    (!conn->lll.role || (conn->slave.llcp_type == LLCP_NONE)) &&
   14652:	f894 20d9 	ldrb.w	r2, [r4, #217]	; 0xd9
   14656:	2a00      	cmp	r2, #0
   14658:	f47f ae82 	bne.w	14360 <ull_conn_llcp+0x140>
   1465c:	e634      	b.n	142c8 <ull_conn_llcp+0xa8>
	switch (conn->llcp_length.state) {
   1465e:	f002 0107 	and.w	r1, r2, #7
   14662:	2906      	cmp	r1, #6
   14664:	f201 8174 	bhi.w	15950 <ull_conn_llcp+0x1730>
   14668:	a001      	add	r0, pc, #4	; (adr r0, 14670 <ull_conn_llcp+0x450>)
   1466a:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   1466e:	bf00      	nop
   14670:	0001490d 	.word	0x0001490d
   14674:	00014307 	.word	0x00014307
   14678:	00014307 	.word	0x00014307
   1467c:	00014307 	.word	0x00014307
   14680:	00014879 	.word	0x00014879
   14684:	00014879 	.word	0x00014879
   14688:	00014307 	.word	0x00014307
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1468c:	489e      	ldr	r0, [pc, #632]	; (14908 <ull_conn_llcp+0x6e8>)
   1468e:	f7f8 fadd 	bl	cc4c <mem_acquire>
		if (tx) {
   14692:	2800      	cmp	r0, #0
   14694:	d0a4      	beq.n	145e0 <ull_conn_llcp+0x3c0>
			conn->llcp.chan_map.instant = event_counter +
   14696:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			conn->llcp.chan_map.initiate = 0U;
   14698:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1469c:	7902      	ldrb	r2, [r0, #4]
			conn->llcp.chan_map.instant = event_counter +
   1469e:	443b      	add	r3, r7
						      conn->lll.latency + 6;
   146a0:	3306      	adds	r3, #6
			conn->llcp.chan_map.initiate = 0U;
   146a2:	f36f 0100 	bfc	r1, #0, #1
			conn->llcp.chan_map.instant = event_counter +
   146a6:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
			conn->llcp.chan_map.initiate = 0U;
   146aa:	f884 10e8 	strb.w	r1, [r4, #232]	; 0xe8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   146ae:	f042 0203 	orr.w	r2, r2, #3
   146b2:	4623      	mov	r3, r4
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   146b4:	2708      	movs	r7, #8
			pdu_ctrl_tx->llctrl.opcode =
   146b6:	2101      	movs	r1, #1
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   146b8:	7147      	strb	r7, [r0, #5]
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   146ba:	7102      	strb	r2, [r0, #4]
			pdu_ctrl_tx->llctrl.opcode =
   146bc:	71c1      	strb	r1, [r0, #7]
   146be:	f853 2fe9 	ldr.w	r2, [r3, #233]!
   146c2:	6082      	str	r2, [r0, #8]
   146c4:	791b      	ldrb	r3, [r3, #4]
   146c6:	7303      	strb	r3, [r0, #12]
	    conn->tx_head &&
   146c8:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
   146cc:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
   146d0:	f8a0 200d 	strh.w	r2, [r0, #13]
	if (
   146d4:	2b00      	cmp	r3, #0
   146d6:	f000 8343 	beq.w	14d60 <ull_conn_llcp+0xb40>
	    !conn->llcp_enc.pause_tx &&
   146da:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
   146de:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
	    conn->tx_head &&
   146e2:	0789      	lsls	r1, r1, #30
   146e4:	f100 833e 	bmi.w	14d64 <ull_conn_llcp+0xb44>
	    !conn->llcp_phy.pause_tx &&
   146e8:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   146ec:	07cf      	lsls	r7, r1, #31
   146ee:	f100 8339 	bmi.w	14d64 <ull_conn_llcp+0xb44>
		if (conn->tx_head == conn->tx_data) {
   146f2:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   146f6:	428b      	cmp	r3, r1
   146f8:	f000 86ae 	beq.w	15458 <ull_conn_llcp+0x1238>
		} else if (!conn->tx_ctrl) {
   146fc:	2a00      	cmp	r2, #0
   146fe:	f000 86c7 	beq.w	15490 <ull_conn_llcp+0x1270>
	tx->next = conn->tx_ctrl_last->next;
   14702:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   14706:	681a      	ldr	r2, [r3, #0]
   14708:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   1470a:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   1470c:	6803      	ldr	r3, [r0, #0]
   1470e:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   14712:	2b00      	cmp	r3, #0
   14714:	f47f af64 	bne.w	145e0 <ull_conn_llcp+0x3c0>
		conn->tx_data_last = tx;
   14718:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   1471c:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   14720:	e591      	b.n	14246 <ull_conn_llcp+0x26>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   14722:	4879      	ldr	r0, [pc, #484]	; (14908 <ull_conn_llcp+0x6e8>)
   14724:	f7f8 fa92 	bl	cc4c <mem_acquire>
	if (!tx) {
   14728:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   1472c:	4607      	mov	r7, r0
   1472e:	2800      	cmp	r0, #0
   14730:	f43f ad89 	beq.w	14246 <ull_conn_llcp+0x26>
	if (!lll->role) {
   14734:	f1bc 0f00 	cmp.w	ip, #0
	pdu_ctrl_tx = (void *)tx->pdu;
   14738:	f100 0a04 	add.w	sl, r0, #4
	if (!lll->role) {
   1473c:	f280 8392 	bge.w	14e64 <ull_conn_llcp+0xc44>
	else if (!lll->enc_rx) {
   14740:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   14744:	f013 0208 	ands.w	r2, r3, #8
   14748:	f040 8511 	bne.w	1516e <ull_conn_llcp+0xf4e>
		if (conn->llcp.encryption.error_code) {
   1474c:	f894 80f5 	ldrb.w	r8, [r4, #245]	; 0xf5
   14750:	f1b8 0f00 	cmp.w	r8, #0
   14754:	f000 85ad 	beq.w	152b2 <ull_conn_llcp+0x1092>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   14758:	7903      	ldrb	r3, [r0, #4]
	if (conn->common.fex_valid &&
   1475a:	f894 10d8 	ldrb.w	r1, [r4, #216]	; 0xd8
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1475e:	f043 0303 	orr.w	r3, r3, #3
   14762:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
   14764:	07cb      	lsls	r3, r1, #31
   14766:	f140 8533 	bpl.w	151d0 <ull_conn_llcp+0xfb0>
	    (conn->llcp_feature.features_conn &
   1476a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1476e:	4611      	mov	r1, r2
   14770:	f003 0004 	and.w	r0, r3, #4
	if (conn->common.fex_valid &&
   14774:	ea50 0301 	orrs.w	r3, r0, r1
   14778:	f000 852a 	beq.w	151d0 <ull_conn_llcp+0xfb0>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   1477c:	2211      	movs	r2, #17
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   1477e:	2303      	movs	r3, #3
		p->error_code = conn->llcp.encryption.error_code;
   14780:	f887 8009 	strb.w	r8, [r7, #9]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   14784:	71fa      	strb	r2, [r7, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   14786:	723b      	strb	r3, [r7, #8]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
   14788:	f887 9005 	strb.w	r9, [r7, #5]
	    conn->tx_head &&
   1478c:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
	conn->llcp.encryption.error_code = 0U;
   14790:	2300      	movs	r3, #0
   14792:	f884 30f5 	strb.w	r3, [r4, #245]	; 0xf5
	if (
   14796:	2a00      	cmp	r2, #0
   14798:	f000 8495 	beq.w	150c6 <ull_conn_llcp+0xea6>
	    !conn->llcp_enc.pause_tx &&
   1479c:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
	    conn->tx_head &&
   147a0:	0798      	lsls	r0, r3, #30
   147a2:	f100 8490 	bmi.w	150c6 <ull_conn_llcp+0xea6>
	    !conn->llcp_phy.pause_tx &&
   147a6:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   147aa:	07d9      	lsls	r1, r3, #31
   147ac:	f100 848b 	bmi.w	150c6 <ull_conn_llcp+0xea6>
		if (conn->tx_head == conn->tx_data) {
   147b0:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
   147b4:	429a      	cmp	r2, r3
		if (!conn->tx_ctrl) {
   147b6:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   147ba:	f000 8765 	beq.w	15688 <ull_conn_llcp+0x1468>
		} else if (!conn->tx_ctrl) {
   147be:	2b00      	cmp	r3, #0
   147c0:	f001 8043 	beq.w	1584a <ull_conn_llcp+0x162a>
	tx->next = conn->tx_ctrl_last->next;
   147c4:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   147c8:	681a      	ldr	r2, [r3, #0]
   147ca:	603a      	str	r2, [r7, #0]
	conn->tx_ctrl_last->next = tx;
   147cc:	601f      	str	r7, [r3, #0]
	conn->tx_ctrl_last = tx;
   147ce:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
	if (!tx->next) {
   147d2:	683b      	ldr	r3, [r7, #0]
   147d4:	2b00      	cmp	r3, #0
   147d6:	f000 83b7 	beq.w	14f48 <ull_conn_llcp+0xd28>
	conn->llcp_ack = conn->llcp_req;
   147da:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   147de:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
   147e2:	e530      	b.n	14246 <ull_conn_llcp+0x26>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   147e4:	4848      	ldr	r0, [pc, #288]	; (14908 <ull_conn_llcp+0x6e8>)
   147e6:	f7f8 fa31 	bl	cc4c <mem_acquire>
		if (tx) {
   147ea:	2800      	cmp	r0, #0
   147ec:	f43f ad2f 	beq.w	1424e <ull_conn_llcp+0x2e>
			conn->llcp.chan_map.instant = event_counter +
   147f0:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			conn->llcp.chan_map.initiate = 0U;
   147f2:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   147f6:	7902      	ldrb	r2, [r0, #4]
			conn->llcp.chan_map.instant = event_counter +
   147f8:	4433      	add	r3, r6
						      conn->lll.latency + 6;
   147fa:	3306      	adds	r3, #6
			conn->llcp.chan_map.instant = event_counter +
   147fc:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14800:	f042 0203 	orr.w	r2, r2, #3
   14804:	4623      	mov	r3, r4
			conn->llcp.chan_map.initiate = 0U;
   14806:	f36f 0100 	bfc	r1, #0, #1
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   1480a:	2608      	movs	r6, #8
			pdu_ctrl_tx->llctrl.opcode =
   1480c:	2501      	movs	r5, #1
			conn->llcp.chan_map.initiate = 0U;
   1480e:	f884 10e8 	strb.w	r1, [r4, #232]	; 0xe8
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   14812:	7146      	strb	r6, [r0, #5]
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14814:	7102      	strb	r2, [r0, #4]
			pdu_ctrl_tx->llctrl.opcode =
   14816:	71c5      	strb	r5, [r0, #7]
   14818:	f853 2fe9 	ldr.w	r2, [r3, #233]!
   1481c:	6082      	str	r2, [r0, #8]
   1481e:	791b      	ldrb	r3, [r3, #4]
   14820:	7303      	strb	r3, [r0, #12]
	    conn->tx_head &&
   14822:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
   14826:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
   1482a:	f8a0 200d 	strh.w	r2, [r0, #13]
	if (
   1482e:	2b00      	cmp	r3, #0
   14830:	f000 82a1 	beq.w	14d76 <ull_conn_llcp+0xb56>
	    !conn->llcp_enc.pause_tx &&
   14834:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
   14838:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
	    conn->tx_head &&
   1483c:	0789      	lsls	r1, r1, #30
   1483e:	f100 829c 	bmi.w	14d7a <ull_conn_llcp+0xb5a>
	    !conn->llcp_phy.pause_tx &&
   14842:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   14846:	07cf      	lsls	r7, r1, #31
   14848:	f100 8297 	bmi.w	14d7a <ull_conn_llcp+0xb5a>
		if (conn->tx_head == conn->tx_data) {
   1484c:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   14850:	428b      	cmp	r3, r1
   14852:	f000 860f 	beq.w	15474 <ull_conn_llcp+0x1254>
		} else if (!conn->tx_ctrl) {
   14856:	2a00      	cmp	r2, #0
   14858:	f000 8653 	beq.w	15502 <ull_conn_llcp+0x12e2>
	tx->next = conn->tx_ctrl_last->next;
   1485c:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   14860:	681a      	ldr	r2, [r3, #0]
   14862:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   14864:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   14866:	6803      	ldr	r3, [r0, #0]
   14868:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1486c:	2b00      	cmp	r3, #0
   1486e:	f47f acee 	bne.w	1424e <ull_conn_llcp+0x2e>
		conn->tx_data_last = tx;
   14872:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   14876:	e4ea      	b.n	1424e <ull_conn_llcp+0x2e>
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   14878:	f002 0207 	and.w	r2, r2, #7
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   1487c:	f8b4 c1b0 	ldrh.w	ip, [r4, #432]	; 0x1b0
		lll->max_rx_time = conn->llcp_length.rx_time;
   14880:	f8b4 11b4 	ldrh.w	r1, [r4, #436]	; 0x1b4
		tx_octets = conn->llcp_length.tx_octets;
   14884:	f8b4 91b2 	ldrh.w	r9, [r4, #434]	; 0x1b2
		uint16_t tx_time = conn->llcp_length.tx_time;
   14888:	f8b4 81b6 	ldrh.w	r8, [r4, #438]	; 0x1b6
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   1488c:	f8a4 c05a 	strh.w	ip, [r4, #90]	; 0x5a
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   14890:	2a04      	cmp	r2, #4
		lll->max_rx_time = conn->llcp_length.rx_time;
   14892:	f8a4 105e 	strh.w	r1, [r4, #94]	; 0x5e
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   14896:	f000 8403 	beq.w	150a0 <ull_conn_llcp+0xe80>
			conn->llcp_length.state =
   1489a:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
   1489e:	2206      	movs	r2, #6
   148a0:	f362 0302 	bfi	r3, r2, #0, #3
   148a4:	f884 31ae 	strb.w	r3, [r4, #430]	; 0x1ae
		rx = conn->llcp_rx;
   148a8:	f8d4 7108 	ldr.w	r7, [r4, #264]	; 0x108
		LL_ASSERT(rx && rx->hdr.link);
   148ac:	2f00      	cmp	r7, #0
   148ae:	f000 83d9 	beq.w	15064 <ull_conn_llcp+0xe44>
   148b2:	6838      	ldr	r0, [r7, #0]
   148b4:	2800      	cmp	r0, #0
   148b6:	f000 83d5 	beq.w	15064 <ull_conn_llcp+0xe44>
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   148ba:	7f3b      	ldrb	r3, [r7, #28]
		conn->llcp_rx = rx->hdr.link->mem;
   148bc:	6842      	ldr	r2, [r0, #4]
		rx->hdr.handle = conn->lll.handle;
   148be:	f8b4 e028 	ldrh.w	lr, [r4, #40]	; 0x28
		conn->llcp_rx = rx->hdr.link->mem;
   148c2:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   148c6:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   148ca:	2203      	movs	r2, #3
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   148cc:	773b      	strb	r3, [r7, #28]
		pdu_ctrl_rx->len =
   148ce:	f04f 0a09 	mov.w	sl, #9
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   148d2:	2315      	movs	r3, #21
		rx->hdr.handle = conn->lll.handle;
   148d4:	f8a7 e006 	strh.w	lr, [r7, #6]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   148d8:	f8a7 c020 	strh.w	ip, [r7, #32]
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   148dc:	8479      	strh	r1, [r7, #34]	; 0x22
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   148de:	713a      	strb	r2, [r7, #4]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   148e0:	77fb      	strb	r3, [r7, #31]
		ll_rx_put(rx->hdr.link, rx);
   148e2:	4639      	mov	r1, r7
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
   148e4:	f8a7 9024 	strh.w	r9, [r7, #36]	; 0x24
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   148e8:	f8a7 8026 	strh.w	r8, [r7, #38]	; 0x26
		pdu_ctrl_rx->len =
   148ec:	f887 a01d 	strb.w	sl, [r7, #29]
		ll_rx_put(rx->hdr.link, rx);
   148f0:	f7fc f8c2 	bl	10a78 <ll_rx_put>
		ll_rx_sched();
   148f4:	f7fc f8ca 	bl	10a8c <ll_rx_sched>
	break;
   148f8:	e505      	b.n	14306 <ull_conn_llcp+0xe6>
   148fa:	bf00      	nop
   148fc:	00024874 	.word	0x00024874
   14900:	000243a4 	.word	0x000243a4
   14904:	00024334 	.word	0x00024334
   14908:	200020f8 	.word	0x200020f8
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1490c:	48cc      	ldr	r0, [pc, #816]	; (14c40 <ull_conn_llcp+0xa20>)
   1490e:	f7f8 f99d 	bl	cc4c <mem_acquire>
		if (!tx) {
   14912:	2800      	cmp	r0, #0
   14914:	f43f acf7 	beq.w	14306 <ull_conn_llcp+0xe6>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   14918:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   1491c:	f8b4 11b2 	ldrh.w	r1, [r4, #434]	; 0x1b2
		conn->default_tx_time = conn->llcp_length.tx_time;
   14920:	f8b4 71b6 	ldrh.w	r7, [r4, #438]	; 0x1b6
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   14924:	f8a4 10d2 	strh.w	r1, [r4, #210]	; 0xd2
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   14928:	2201      	movs	r2, #1
		conn->default_tx_time = conn->llcp_length.tx_time;
   1492a:	f8a4 70d4 	strh.w	r7, [r4, #212]	; 0xd4
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   1492e:	f362 0302 	bfi	r3, r2, #0, #3
   14932:	f884 31ae 	strb.w	r3, [r4, #430]	; 0x1ae
		pdu_ctrl_tx->len =
   14936:	2709      	movs	r7, #9
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14938:	7903      	ldrb	r3, [r0, #4]
		pdu_ctrl_tx->len =
   1493a:	7147      	strb	r7, [r0, #5]
	    conn->tx_head &&
   1493c:	f8d4 c1c4 	ldr.w	ip, [r4, #452]	; 0x1c4
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
   14940:	8181      	strh	r1, [r0, #12]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14942:	f043 0303 	orr.w	r3, r3, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   14946:	2114      	movs	r1, #20
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   14948:	72c2      	strb	r2, [r0, #11]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   1494a:	73c2      	strb	r2, [r0, #15]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   1494c:	2700      	movs	r7, #0
   1494e:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14952:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   14954:	71c1      	strb	r1, [r0, #7]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   14956:	2348      	movs	r3, #72	; 0x48
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   14958:	211b      	movs	r1, #27
   1495a:	7247      	strb	r7, [r0, #9]
   1495c:	7201      	strb	r1, [r0, #8]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   1495e:	7283      	strb	r3, [r0, #10]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   14960:	7383      	strb	r3, [r0, #14]
	if (
   14962:	f1bc 0f00 	cmp.w	ip, #0
   14966:	f000 8273 	beq.w	14e50 <ull_conn_llcp+0xc30>
	    !conn->llcp_enc.pause_tx &&
   1496a:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
	    conn->tx_head &&
   1496e:	079b      	lsls	r3, r3, #30
   14970:	f100 826e 	bmi.w	14e50 <ull_conn_llcp+0xc30>
	    !conn->llcp_phy.pause_tx &&
   14974:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   14978:	07df      	lsls	r7, r3, #31
   1497a:	f100 8269 	bmi.w	14e50 <ull_conn_llcp+0xc30>
		if (conn->tx_head == conn->tx_data) {
   1497e:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
   14982:	459c      	cmp	ip, r3
   14984:	f000 85ab 	beq.w	154de <ull_conn_llcp+0x12be>
		} else if (!conn->tx_ctrl) {
   14988:	2a00      	cmp	r2, #0
   1498a:	f000 85cb 	beq.w	15524 <ull_conn_llcp+0x1304>
	tx->next = conn->tx_ctrl_last->next;
   1498e:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   14992:	681a      	ldr	r2, [r3, #0]
   14994:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   14996:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   14998:	f8d0 c000 	ldr.w	ip, [r0]
   1499c:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   149a0:	f1bc 0f00 	cmp.w	ip, #0
   149a4:	f000 8470 	beq.w	15288 <ull_conn_llcp+0x1068>
		conn->procedure_expire = conn->procedure_reload;
   149a8:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   149ac:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	break;
   149b0:	e4a9      	b.n	14306 <ull_conn_llcp+0xe6>
		} else if (conn->llcp_feature.ack != conn->llcp_feature.req) {
   149b2:	f894 7121 	ldrb.w	r7, [r4, #289]	; 0x121
   149b6:	f894 9120 	ldrb.w	r9, [r4, #288]	; 0x120
   149ba:	454f      	cmp	r7, r9
   149bc:	d056      	beq.n	14a6c <ull_conn_llcp+0x84c>
	if (!((conn->llcp_feature.ack - conn->llcp_feature.req) & 0x01)) {
   149be:	eba7 0709 	sub.w	r7, r7, r9
   149c2:	07f8      	lsls	r0, r7, #31
   149c4:	f57f ac3f 	bpl.w	14246 <ull_conn_llcp+0x26>
	if (conn->common.fex_valid) {
   149c8:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   149cc:	f013 0701 	ands.w	r7, r3, #1
   149d0:	f000 81e8 	beq.w	14da4 <ull_conn_llcp+0xb84>
		rx = ll_pdu_rx_alloc();
   149d4:	f7fc f87e 	bl	10ad4 <ll_pdu_rx_alloc>
		if (!rx) {
   149d8:	4601      	mov	r1, r0
   149da:	2800      	cmp	r0, #0
   149dc:	f000 80cc 	beq.w	14b78 <ull_conn_llcp+0x958>
		conn->llcp_feature.ack = conn->llcp_feature.req;
   149e0:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
   149e4:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   149e8:	2709      	movs	r7, #9
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   149ea:	2303      	movs	r3, #3
		rx->hdr.handle = conn->lll.handle;
   149ec:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   149f0:	7747      	strb	r7, [r0, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   149f2:	7103      	strb	r3, [r0, #4]
__ssp_bos_icheck3(memset, void *, int)
   149f4:	f8c0 8020 	str.w	r8, [r0, #32]
   149f8:	f8c0 8024 	str.w	r8, [r0, #36]	; 0x24
		sys_put_le64(conn->llcp_feature.features_peer,
   149fc:	e9d4 024c 	ldrd	r0, r2, [r4, #304]	; 0x130
		rx->hdr.handle = conn->lll.handle;
   14a00:	f8a1 c006 	strh.w	ip, [r1, #6]
	sys_put_le16(val >> 16, &dst[2]);
   14a04:	ea4f 4c10 	mov.w	ip, r0, lsr #16
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   14a08:	7f0b      	ldrb	r3, [r1, #28]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   14a0a:	77cf      	strb	r7, [r1, #31]
	dst[1] = val >> 8;
   14a0c:	ea4f 271c 	mov.w	r7, ip, lsr #8
   14a10:	f881 7023 	strb.w	r7, [r1, #35]	; 0x23
	sys_put_le16(val >> 16, &dst[2]);
   14a14:	0c17      	lsrs	r7, r2, #16
	dst[1] = val >> 8;
   14a16:	f3c0 2e07 	ubfx	lr, r0, #8, #8
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   14a1a:	f043 0303 	orr.w	r3, r3, #3
	dst[0] = val;
   14a1e:	f881 c022 	strb.w	ip, [r1, #34]	; 0x22
   14a22:	f881 0020 	strb.w	r0, [r1, #32]
	dst[1] = val >> 8;
   14a26:	ea4f 2c17 	mov.w	ip, r7, lsr #8
   14a2a:	f3c2 2007 	ubfx	r0, r2, #8, #8
   14a2e:	f881 e021 	strb.w	lr, [r1, #33]	; 0x21
	dst[0] = val;
   14a32:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
   14a36:	f881 7026 	strb.w	r7, [r1, #38]	; 0x26
	dst[1] = val >> 8;
   14a3a:	f881 c027 	strb.w	ip, [r1, #39]	; 0x27
   14a3e:	f881 0025 	strb.w	r0, [r1, #37]	; 0x25
   14a42:	770b      	strb	r3, [r1, #28]
	ll_rx_put(rx->hdr.link, rx);
   14a44:	6808      	ldr	r0, [r1, #0]
   14a46:	f7fc f817 	bl	10a78 <ll_rx_put>
	ll_rx_sched();
   14a4a:	f7fc f81f 	bl	10a8c <ll_rx_sched>
   14a4e:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   14a52:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
   14a56:	f7ff bbee 	b.w	14236 <ull_conn_llcp+0x16>
		if (!conn->tx_ctrl) {
   14a5a:	2f00      	cmp	r7, #0
   14a5c:	f47f ace8 	bne.w	14430 <ull_conn_llcp+0x210>
			tx->next = conn->tx_head;
   14a60:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   14a62:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   14a66:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   14a6a:	e4e9      	b.n	14440 <ull_conn_llcp+0x220>
		} else if (conn->llcp_version.ack != conn->llcp_version.req) {
   14a6c:	f894 7139 	ldrb.w	r7, [r4, #313]	; 0x139
   14a70:	f894 8138 	ldrb.w	r8, [r4, #312]	; 0x138
   14a74:	4547      	cmp	r7, r8
   14a76:	f000 8093 	beq.w	14ba0 <ull_conn_llcp+0x980>
	if (!((conn->llcp_version.ack - conn->llcp_version.req) & 0x01)) {
   14a7a:	eba7 0708 	sub.w	r7, r7, r8
   14a7e:	07f8      	lsls	r0, r7, #31
   14a80:	f57f abe1 	bpl.w	14246 <ull_conn_llcp+0x26>
	if (conn->llcp_version.tx == 0U) {
   14a84:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
   14a88:	07d9      	lsls	r1, r3, #31
   14a8a:	f140 83a9 	bpl.w	151e0 <ull_conn_llcp+0xfc0>
	} else if (conn->llcp_version.rx) {
   14a8e:	0798      	lsls	r0, r3, #30
   14a90:	f140 83ec 	bpl.w	1526c <ull_conn_llcp+0x104c>
		rx = ll_pdu_rx_alloc();
   14a94:	f7fc f81e 	bl	10ad4 <ll_pdu_rx_alloc>
		if (!rx) {
   14a98:	4601      	mov	r1, r0
   14a9a:	2800      	cmp	r0, #0
   14a9c:	d06c      	beq.n	14b78 <ull_conn_llcp+0x958>
		conn->llcp_version.ack = conn->llcp_version.req;
   14a9e:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
   14aa2:	f884 3139 	strb.w	r3, [r4, #313]	; 0x139
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   14aa6:	7f03      	ldrb	r3, [r0, #28]
		rx->hdr.handle = conn->lll.handle;
   14aa8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   14aaa:	80c2      	strh	r2, [r0, #6]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   14aac:	f043 0303 	orr.w	r3, r3, #3
   14ab0:	770b      	strb	r3, [r1, #28]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   14ab2:	2003      	movs	r0, #3
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
   14ab4:	2206      	movs	r2, #6
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   14ab6:	230c      	movs	r3, #12
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   14ab8:	7108      	strb	r0, [r1, #4]
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
   14aba:	774a      	strb	r2, [r1, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   14abc:	77cb      	strb	r3, [r1, #31]
		pdu->llctrl.version_ind.version_number =
   14abe:	f894 013b 	ldrb.w	r0, [r4, #315]	; 0x13b
		pdu->llctrl.version_ind.company_id =
   14ac2:	f8b4 213c 	ldrh.w	r2, [r4, #316]	; 0x13c
		pdu->llctrl.version_ind.sub_version_number =
   14ac6:	f8b4 313e 	ldrh.w	r3, [r4, #318]	; 0x13e
   14aca:	f8a1 3023 	strh.w	r3, [r1, #35]	; 0x23
		pdu->llctrl.version_ind.version_number =
   14ace:	f881 0020 	strb.w	r0, [r1, #32]
		pdu->llctrl.version_ind.company_id =
   14ad2:	f8a1 2021 	strh.w	r2, [r1, #33]	; 0x21
		ll_rx_put(rx->hdr.link, rx);
   14ad6:	e7b5      	b.n	14a44 <ull_conn_llcp+0x824>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   14ad8:	4859      	ldr	r0, [pc, #356]	; (14c40 <ull_conn_llcp+0xa20>)
   14ada:	f7f8 f8b7 	bl	cc4c <mem_acquire>
		if (!tx) {
   14ade:	2800      	cmp	r0, #0
   14ae0:	d04a      	beq.n	14b78 <ull_conn_llcp+0x958>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   14ae2:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   14ae6:	f8b4 71b2 	ldrh.w	r7, [r4, #434]	; 0x1b2
		conn->default_tx_time = conn->llcp_length.tx_time;
   14aea:	f8b4 11b6 	ldrh.w	r1, [r4, #438]	; 0x1b6
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   14aee:	f8a4 70d2 	strh.w	r7, [r4, #210]	; 0xd2
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   14af2:	2201      	movs	r2, #1
		conn->default_tx_time = conn->llcp_length.tx_time;
   14af4:	f8a4 10d4 	strh.w	r1, [r4, #212]	; 0xd4
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   14af8:	f362 0302 	bfi	r3, r2, #0, #3
   14afc:	f884 31ae 	strb.w	r3, [r4, #430]	; 0x1ae
		pdu_ctrl_tx->len =
   14b00:	2109      	movs	r1, #9
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14b02:	7903      	ldrb	r3, [r0, #4]
		pdu_ctrl_tx->len =
   14b04:	7141      	strb	r1, [r0, #5]
	    conn->tx_head &&
   14b06:	f8d4 11c4 	ldr.w	r1, [r4, #452]	; 0x1c4
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
   14b0a:	8187      	strh	r7, [r0, #12]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14b0c:	f043 0303 	orr.w	r3, r3, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   14b10:	f04f 0c14 	mov.w	ip, #20
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   14b14:	72c2      	strb	r2, [r0, #11]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   14b16:	73c2      	strb	r2, [r0, #15]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   14b18:	2700      	movs	r7, #0
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14b1a:	7103      	strb	r3, [r0, #4]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   14b1c:	221b      	movs	r2, #27
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   14b1e:	2348      	movs	r3, #72	; 0x48
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   14b20:	f880 c007 	strb.w	ip, [r0, #7]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   14b24:	7247      	strb	r7, [r0, #9]
   14b26:	7202      	strb	r2, [r0, #8]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   14b28:	7283      	strb	r3, [r0, #10]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   14b2a:	7383      	strb	r3, [r0, #14]
	if (
   14b2c:	2900      	cmp	r1, #0
   14b2e:	f000 84ca 	beq.w	154c6 <ull_conn_llcp+0x12a6>
	    !conn->llcp_enc.pause_tx &&
   14b32:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
	    conn->tx_head &&
   14b36:	079a      	lsls	r2, r3, #30
   14b38:	f100 84c5 	bmi.w	154c6 <ull_conn_llcp+0x12a6>
	    !conn->llcp_phy.pause_tx &&
   14b3c:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   14b40:	07db      	lsls	r3, r3, #31
   14b42:	f100 84c0 	bmi.w	154c6 <ull_conn_llcp+0x12a6>
		if (conn->tx_head == conn->tx_data) {
   14b46:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
   14b4a:	4299      	cmp	r1, r3
		if (!conn->tx_ctrl) {
   14b4c:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   14b50:	f000 86c3 	beq.w	158da <ull_conn_llcp+0x16ba>
		} else if (!conn->tx_ctrl) {
   14b54:	2b00      	cmp	r3, #0
   14b56:	f000 86a9 	beq.w	158ac <ull_conn_llcp+0x168c>
	tx->next = conn->tx_ctrl_last->next;
   14b5a:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   14b5e:	681a      	ldr	r2, [r3, #0]
   14b60:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   14b62:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   14b64:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   14b68:	6803      	ldr	r3, [r0, #0]
   14b6a:	2b00      	cmp	r3, #0
   14b6c:	f000 839e 	beq.w	152ac <ull_conn_llcp+0x108c>
		conn->procedure_expire = conn->procedure_reload;
   14b70:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   14b74:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	break;
   14b78:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   14b7c:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
   14b80:	f7ff bb59 	b.w	14236 <ull_conn_llcp+0x16>
			conn->tx_data = conn->tx_data->next;
   14b84:	6819      	ldr	r1, [r3, #0]
   14b86:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   14b8a:	2a00      	cmp	r2, #0
   14b8c:	f47f abcc 	bne.w	14328 <ull_conn_llcp+0x108>
			tx->next = conn->tx_head->next;
   14b90:	681a      	ldr	r2, [r3, #0]
   14b92:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   14b94:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   14b96:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   14b98:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   14b9c:	f7ff bbcc 	b.w	14338 <ull_conn_llcp+0x118>
		} else if (conn->llcp_conn_param.ack !=
   14ba0:	f894 8185 	ldrb.w	r8, [r4, #389]	; 0x185
   14ba4:	f894 7184 	ldrb.w	r7, [r4, #388]	; 0x184
   14ba8:	45b8      	cmp	r8, r7
   14baa:	f000 81d0 	beq.w	14f4e <ull_conn_llcp+0xd2e>
	conn_upd = conn_upd_curr;
   14bae:	4f25      	ldr	r7, [pc, #148]	; (14c44 <ull_conn_llcp+0xa24>)
   14bb0:	f8d7 8000 	ldr.w	r8, [r7]
	if (conn_upd && (conn_upd != conn)) {
   14bb4:	f1b8 0f00 	cmp.w	r8, #0
   14bb8:	f000 8408 	beq.w	153cc <ull_conn_llcp+0x11ac>
   14bbc:	4544      	cmp	r4, r8
   14bbe:	f47f ab42 	bne.w	14246 <ull_conn_llcp+0x26>
	switch (conn->llcp_conn_param.state) {
   14bc2:	f894 8186 	ldrb.w	r8, [r4, #390]	; 0x186
   14bc6:	f008 0807 	and.w	r8, r8, #7
   14bca:	f1b8 0f05 	cmp.w	r8, #5
   14bce:	f200 86ac 	bhi.w	1592a <ull_conn_llcp+0x170a>
   14bd2:	f20f 0908 	addw	r9, pc, #8
   14bd6:	f859 f028 	ldr.w	pc, [r9, r8, lsl #2]
   14bda:	bf00      	nop
   14bdc:	00014cc9 	.word	0x00014cc9
   14be0:	00014c49 	.word	0x00014c49
   14be4:	00014bf5 	.word	0x00014bf5
   14be8:	00014237 	.word	0x00014237
   14bec:	00014237 	.word	0x00014237
   14bf0:	00014237 	.word	0x00014237
	if (conn->llcp_enc.pause_tx) {
   14bf4:	0791      	lsls	r1, r2, #30
   14bf6:	f53f ab26 	bmi.w	14246 <ull_conn_llcp+0x26>
	rx = ll_pdu_rx_alloc();
   14bfa:	f7fb ff6b 	bl	10ad4 <ll_pdu_rx_alloc>
	if (!rx) {
   14bfe:	4601      	mov	r1, r0
   14c00:	2800      	cmp	r0, #0
   14c02:	d0b9      	beq.n	14b78 <ull_conn_llcp+0x958>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   14c04:	f894 0186 	ldrb.w	r0, [r4, #390]	; 0x186
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   14c08:	7f0b      	ldrb	r3, [r1, #28]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   14c0a:	2203      	movs	r2, #3
   14c0c:	f362 0002 	bfi	r0, r2, #0, #3
   14c10:	f884 0186 	strb.w	r0, [r4, #390]	; 0x186
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   14c14:	4313      	orrs	r3, r2
	rx->hdr.handle = conn->lll.handle;
   14c16:	8d20      	ldrh	r0, [r4, #40]	; 0x28
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   14c18:	710a      	strb	r2, [r1, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   14c1a:	2218      	movs	r2, #24
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   14c1c:	770b      	strb	r3, [r1, #28]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   14c1e:	774a      	strb	r2, [r1, #29]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   14c20:	f8b4 2188 	ldrh.w	r2, [r4, #392]	; 0x188
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
   14c24:	f8b4 318a 	ldrh.w	r3, [r4, #394]	; 0x18a
	rx->hdr.handle = conn->lll.handle;
   14c28:	80c8      	strh	r0, [r1, #6]
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
   14c2a:	f8b4 018c 	ldrh.w	r0, [r4, #396]	; 0x18c
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   14c2e:	840a      	strh	r2, [r1, #32]
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   14c30:	f8b4 218e 	ldrh.w	r2, [r4, #398]	; 0x18e
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
   14c34:	844b      	strh	r3, [r1, #34]	; 0x22
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   14c36:	230f      	movs	r3, #15
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
   14c38:	8488      	strh	r0, [r1, #36]	; 0x24
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   14c3a:	84ca      	strh	r2, [r1, #38]	; 0x26
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   14c3c:	77cb      	strb	r3, [r1, #31]
   14c3e:	e701      	b.n	14a44 <ull_conn_llcp+0x824>
   14c40:	200020f8 	.word	0x200020f8
   14c44:	20002074 	.word	0x20002074
	if (conn->llcp_conn_param.status) {
   14c48:	f894 8187 	ldrb.w	r8, [r4, #391]	; 0x187
   14c4c:	f1b8 0f00 	cmp.w	r8, #0
   14c50:	f040 8527 	bne.w	156a2 <ull_conn_llcp+0x1482>
	if (!conn->lll.role) {
   14c54:	2900      	cmp	r1, #0
   14c56:	f2c0 8548 	blt.w	156ea <ull_conn_llcp+0x14ca>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   14c5a:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
		if (conn->llcp_conn_param.preferred_periodicity) {
   14c5e:	f894 2190 	ldrb.w	r2, [r4, #400]	; 0x190
		conn->llcp_cu.win_offset_us = 0U;
   14c62:	f8c4 8118 	str.w	r8, [r4, #280]	; 0x118
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   14c66:	2105      	movs	r1, #5
   14c68:	f361 0302 	bfi	r3, r1, #0, #3
		conn->llcp_cu.win_size = 1U;
   14c6c:	2101      	movs	r1, #1
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   14c6e:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
		conn->llcp_cu.win_size = 1U;
   14c72:	f884 111c 	strb.w	r1, [r4, #284]	; 0x11c
		if (conn->llcp_conn_param.preferred_periodicity) {
   14c76:	2a00      	cmp	r2, #0
   14c78:	f000 85bf 	beq.w	157fa <ull_conn_llcp+0x15da>
				((conn->llcp_conn_param.interval_min /
   14c7c:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
   14c80:	fbb3 f3f2 	udiv	r3, r3, r2
				  conn->llcp_conn_param.preferred_periodicity) +
   14c84:	440b      	add	r3, r1
			conn->llcp_cu.interval =
   14c86:	fb13 f302 	smulbb	r3, r3, r2
   14c8a:	b29b      	uxth	r3, r3
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   14c8c:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   14c90:	f894 110e 	ldrb.w	r1, [r4, #270]	; 0x10e
   14c94:	f8a4 3110 	strh.w	r3, [r4, #272]	; 0x110
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   14c98:	f3c2 03c0 	ubfx	r3, r2, #3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   14c9c:	00db      	lsls	r3, r3, #3
   14c9e:	f021 020f 	bic.w	r2, r1, #15
   14ca2:	f043 0302 	orr.w	r3, r3, #2
   14ca6:	4313      	orrs	r3, r2
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   14ca8:	f8b4 118c 	ldrh.w	r1, [r4, #396]	; 0x18c
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   14cac:	f8b4 218e 	ldrh.w	r2, [r4, #398]	; 0x18e
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   14cb0:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
		conn->llcp_cu.ack--;
   14cb4:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
   14cb8:	f884 e10d 	strb.w	lr, [r4, #269]	; 0x10d
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   14cbc:	f8a4 1112 	strh.w	r1, [r4, #274]	; 0x112
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   14cc0:	f8a4 2114 	strh.w	r2, [r4, #276]	; 0x114
	if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   14cc4:	f7ff bac3 	b.w	1424e <ull_conn_llcp+0x2e>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   14cc8:	48e4      	ldr	r0, [pc, #912]	; (1505c <ull_conn_llcp+0xe3c>)
			event_counter = lll->event_counter +
   14cca:	f8b4 8032 	ldrh.w	r8, [r4, #50]	; 0x32
					lll->latency_prepare + lazy;
   14cce:	f8b4 902e 	ldrh.w	r9, [r4, #46]	; 0x2e
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   14cd2:	f7f7 ffbb 	bl	cc4c <mem_acquire>
	if (!tx) {
   14cd6:	4601      	mov	r1, r0
   14cd8:	2800      	cmp	r0, #0
   14cda:	f43f af4d 	beq.w	14b78 <ull_conn_llcp+0x958>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14cde:	7903      	ldrb	r3, [r0, #4]
	conn_upd_curr = conn;
   14ce0:	603c      	str	r4, [r7, #0]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14ce2:	f043 0303 	orr.w	r3, r3, #3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   14ce6:	2218      	movs	r2, #24
   14ce8:	7142      	strb	r2, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14cea:	7103      	strb	r3, [r0, #4]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   14cec:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
   14cf0:	f8b4 718a 	ldrh.w	r7, [r4, #394]	; 0x18a
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
   14cf4:	f8b4 c18c 	ldrh.w	ip, [r4, #396]	; 0x18c
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   14cf8:	810b      	strh	r3, [r1, #8]
	p->preferred_periodicity = 0U;
   14cfa:	2200      	movs	r2, #0
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   14cfc:	f8b4 318e 	ldrh.w	r3, [r4, #398]	; 0x18e
	p->preferred_periodicity = 0U;
   14d00:	740a      	strb	r2, [r1, #16]
			event_counter = lll->event_counter +
   14d02:	eb08 0009 	add.w	r0, r8, r9
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
   14d06:	814f      	strh	r7, [r1, #10]
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
   14d08:	4430      	add	r0, r6
	conn->procedure_expire = conn->procedure_reload;
   14d0a:	f8b4 70c6 	ldrh.w	r7, [r4, #198]	; 0xc6
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
   14d0e:	f8a1 c00c 	strh.w	ip, [r1, #12]
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   14d12:	81cb      	strh	r3, [r1, #14]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   14d14:	f04f 0c0f 	mov.w	ip, #15
	p->offset1 = sys_cpu_to_le16(0xffff);
   14d18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	p->offset0 = sys_cpu_to_le16(0x0000);
   14d1c:	74ca      	strb	r2, [r1, #19]
   14d1e:	750a      	strb	r2, [r1, #20]
	p->offset1 = sys_cpu_to_le16(0xffff);
   14d20:	754b      	strb	r3, [r1, #21]
   14d22:	758b      	strb	r3, [r1, #22]
	p->offset2 = sys_cpu_to_le16(0xffff);
   14d24:	75cb      	strb	r3, [r1, #23]
   14d26:	760b      	strb	r3, [r1, #24]
	p->offset3 = sys_cpu_to_le16(0xffff);
   14d28:	764b      	strb	r3, [r1, #25]
   14d2a:	768b      	strb	r3, [r1, #26]
	p->offset4 = sys_cpu_to_le16(0xffff);
   14d2c:	76cb      	strb	r3, [r1, #27]
   14d2e:	770b      	strb	r3, [r1, #28]
	p->offset5 = sys_cpu_to_le16(0xffff);
   14d30:	774b      	strb	r3, [r1, #29]
   14d32:	778b      	strb	r3, [r1, #30]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   14d34:	f881 c007 	strb.w	ip, [r1, #7]
	conn->procedure_expire = conn->procedure_reload;
   14d38:	f8a4 70c8 	strh.w	r7, [r4, #200]	; 0xc8
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
   14d3c:	f8a1 0011 	strh.w	r0, [r1, #17]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
   14d40:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   14d44:	2004      	movs	r0, #4
   14d46:	f360 0302 	bfi	r3, r0, #0, #3
   14d4a:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
	ctrl_tx_pause_enqueue(conn, tx, false);
   14d4e:	4620      	mov	r0, r4
   14d50:	f7fc fe42 	bl	119d8 <ctrl_tx_pause_enqueue>
   14d54:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   14d58:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
}
   14d5c:	f7ff ba6b 	b.w	14236 <ull_conn_llcp+0x16>
   14d60:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   14d64:	2a00      	cmp	r2, #0
   14d66:	f47f accc 	bne.w	14702 <ull_conn_llcp+0x4e2>
			tx->next = conn->tx_head;
   14d6a:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   14d6c:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   14d70:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   14d74:	e4cd      	b.n	14712 <ull_conn_llcp+0x4f2>
   14d76:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   14d7a:	2a00      	cmp	r2, #0
   14d7c:	f47f ad6e 	bne.w	1485c <ull_conn_llcp+0x63c>
			tx->next = conn->tx_head;
   14d80:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   14d82:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   14d86:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   14d8a:	e56f      	b.n	1486c <ull_conn_llcp+0x64c>
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   14d8c:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
   14d90:	2b00      	cmp	r3, #0
   14d92:	f43f ac02 	beq.w	1459a <ull_conn_llcp+0x37a>
			conn->slave.llcp_type = LLCP_NONE;
   14d96:	f884 20d9 	strb.w	r2, [r4, #217]	; 0xd9
   14d9a:	e402      	b.n	145a2 <ull_conn_llcp+0x382>
		conn->tx_data_last = tx;
   14d9c:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   14da0:	f7ff bb51 	b.w	14446 <ull_conn_llcp+0x226>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   14da4:	48ad      	ldr	r0, [pc, #692]	; (1505c <ull_conn_llcp+0xe3c>)
   14da6:	f7f7 ff51 	bl	cc4c <mem_acquire>
	if (tx) {
   14daa:	2800      	cmp	r0, #0
   14dac:	f43f aee4 	beq.w	14b78 <ull_conn_llcp+0x958>
		conn->llcp_feature.ack--;
   14db0:	f894 2121 	ldrb.w	r2, [r4, #289]	; 0x121
		conn->llcp_feature.features_conn = LL_FEAT;
   14db4:	f8df 82a8 	ldr.w	r8, [pc, #680]	; 15060 <ull_conn_llcp+0xe40>
   14db8:	f04f 0900 	mov.w	r9, #0
   14dbc:	e9c4 894a 	strd	r8, r9, [r4, #296]	; 0x128
		conn->llcp_feature.ack--;
   14dc0:	3a01      	subs	r2, #1
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
   14dc2:	2309      	movs	r3, #9
		conn->llcp_feature.ack--;
   14dc4:	f884 2121 	strb.w	r2, [r4, #289]	; 0x121
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
   14dc8:	7143      	strb	r3, [r0, #5]
		pdu->llctrl.opcode = !conn->lll.role ?
   14dca:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   14dce:	6087      	str	r7, [r0, #8]
   14dd0:	60c7      	str	r7, [r0, #12]
		sys_put_le64(conn->llcp_feature.features_conn,
   14dd2:	e9d4 134a 	ldrd	r1, r3, [r4, #296]	; 0x128
	sys_put_le16(val >> 16, &dst[2]);
   14dd6:	0c0a      	lsrs	r2, r1, #16
   14dd8:	0c1f      	lsrs	r7, r3, #16
	dst[0] = val;
   14dda:	7282      	strb	r2, [r0, #10]
	dst[1] = val >> 8;
   14ddc:	0a12      	lsrs	r2, r2, #8
   14dde:	f3c1 2e07 	ubfx	lr, r1, #8, #8
	dst[0] = val;
   14de2:	7303      	strb	r3, [r0, #12]
	dst[1] = val >> 8;
   14de4:	72c2      	strb	r2, [r0, #11]
   14de6:	f3c3 2307 	ubfx	r3, r3, #8, #8
   14dea:	0a3a      	lsrs	r2, r7, #8
	dst[0] = val;
   14dec:	7201      	strb	r1, [r0, #8]
	dst[1] = val >> 8;
   14dee:	73c2      	strb	r2, [r0, #15]
   14df0:	f880 e009 	strb.w	lr, [r0, #9]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   14df4:	7902      	ldrb	r2, [r0, #4]
	dst[0] = val;
   14df6:	7387      	strb	r7, [r0, #14]
	dst[1] = val >> 8;
   14df8:	7343      	strb	r3, [r0, #13]
	    conn->tx_head &&
   14dfa:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
		pdu->llctrl.opcode = !conn->lll.role ?
   14dfe:	f1bc 0f00 	cmp.w	ip, #0
   14e02:	bfac      	ite	ge
   14e04:	2108      	movge	r1, #8
   14e06:	210e      	movlt	r1, #14
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   14e08:	f042 0203 	orr.w	r2, r2, #3
		pdu->llctrl.opcode = !conn->lll.role ?
   14e0c:	71c1      	strb	r1, [r0, #7]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   14e0e:	7102      	strb	r2, [r0, #4]
	if (
   14e10:	2b00      	cmp	r3, #0
   14e12:	f000 813a 	beq.w	1508a <ull_conn_llcp+0xe6a>
	    !conn->llcp_enc.pause_tx &&
   14e16:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
   14e1a:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
	    conn->tx_head &&
   14e1e:	0789      	lsls	r1, r1, #30
   14e20:	f100 8135 	bmi.w	1508e <ull_conn_llcp+0xe6e>
	    !conn->llcp_phy.pause_tx &&
   14e24:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   14e28:	07cf      	lsls	r7, r1, #31
   14e2a:	f100 8130 	bmi.w	1508e <ull_conn_llcp+0xe6e>
		if (conn->tx_head == conn->tx_data) {
   14e2e:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   14e32:	428b      	cmp	r3, r1
   14e34:	f000 8391 	beq.w	1555a <ull_conn_llcp+0x133a>
		} else if (!conn->tx_ctrl) {
   14e38:	2a00      	cmp	r2, #0
   14e3a:	f000 83c5 	beq.w	155c8 <ull_conn_llcp+0x13a8>
	tx->next = conn->tx_ctrl_last->next;
   14e3e:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   14e42:	681a      	ldr	r2, [r3, #0]
   14e44:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   14e46:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   14e48:	6803      	ldr	r3, [r0, #0]
   14e4a:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
}
   14e4e:	e68c      	b.n	14b6a <ull_conn_llcp+0x94a>
		if (!conn->tx_ctrl) {
   14e50:	2a00      	cmp	r2, #0
   14e52:	f47f ad9c 	bne.w	1498e <ull_conn_llcp+0x76e>
			tx->next = conn->tx_head;
   14e56:	f8c0 c000 	str.w	ip, [r0]
				conn->tx_ctrl = tx;
   14e5a:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   14e5e:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   14e62:	e59d      	b.n	149a0 <ull_conn_llcp+0x780>
		ecb_encrypt(&conn->llcp_enc.ltk[0],
   14e64:	f104 097b 	add.w	r9, r4, #123	; 0x7b
   14e68:	464b      	mov	r3, r9
   14e6a:	4642      	mov	r2, r8
   14e6c:	f104 01f6 	add.w	r1, r4, #246	; 0xf6
   14e70:	f204 1071 	addw	r0, r4, #369	; 0x171
   14e74:	f004 fa7c 	bl	19370 <ecb_encrypt>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   14e78:	f8d4 2087 	ldr.w	r2, [r4, #135]	; 0x87
   14e7c:	f8c4 20a8 	str.w	r2, [r4, #168]	; 0xa8
   14e80:	f8d4 007b 	ldr.w	r0, [r4, #123]	; 0x7b
   14e84:	f8d4 107f 	ldr.w	r1, [r4, #127]	; 0x7f
   14e88:	f8d4 3083 	ldr.w	r3, [r4, #131]	; 0x83
   14e8c:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
   14e90:	4622      	mov	r2, r4
   14e92:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
   14e96:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
   14e9a:	f852 1f94 	ldr.w	r1, [r2, #148]!
		lll->ccm_rx.direction = 0;
   14e9e:	f894 0093 	ldrb.w	r0, [r4, #147]	; 0x93
   14ea2:	6852      	ldr	r2, [r2, #4]
		lll->enc_rx = 1;
   14ea4:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   14ea8:	f8c4 20b9 	str.w	r2, [r4, #185]	; 0xb9
		lll->ccm_tx.direction = 1;
   14eac:	f894 20b4 	ldrb.w	r2, [r4, #180]	; 0xb4
   14eb0:	f8c4 10b5 	str.w	r1, [r4, #181]	; 0xb5
		lll->enc_rx = 1;
   14eb4:	f043 0308 	orr.w	r3, r3, #8
		lll->ccm_rx.direction = 0;
   14eb8:	f368 0000 	bfi	r0, r8, #0, #1
		lll->ccm_tx.direction = 1;
   14ebc:	f042 0201 	orr.w	r2, r2, #1
		lll->ccm_rx.direction = 0;
   14ec0:	f884 0093 	strb.w	r0, [r4, #147]	; 0x93
		lll->enc_rx = 1;
   14ec4:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
		lll->ccm_rx.counter = 0;
   14ec8:	f884 808b 	strb.w	r8, [r4, #139]	; 0x8b
   14ecc:	f884 808c 	strb.w	r8, [r4, #140]	; 0x8c
   14ed0:	f884 808d 	strb.w	r8, [r4, #141]	; 0x8d
   14ed4:	f884 808e 	strb.w	r8, [r4, #142]	; 0x8e
   14ed8:	f884 808f 	strb.w	r8, [r4, #143]	; 0x8f
   14edc:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
   14ee0:	f884 8091 	strb.w	r8, [r4, #145]	; 0x91
   14ee4:	f884 8092 	strb.w	r8, [r4, #146]	; 0x92
		lll->ccm_tx.counter = 0;
   14ee8:	f8c4 80ac 	str.w	r8, [r4, #172]	; 0xac
		start_enc_rsp_send(conn, pdu_ctrl_tx);
   14eec:	4651      	mov	r1, sl
		lll->ccm_tx.counter = 0;
   14eee:	f8c4 80b0 	str.w	r8, [r4, #176]	; 0xb0
		lll->ccm_tx.direction = 1;
   14ef2:	f884 20b4 	strb.w	r2, [r4, #180]	; 0xb4
		start_enc_rsp_send(conn, pdu_ctrl_tx);
   14ef6:	4620      	mov	r0, r4
   14ef8:	f7fc ff70 	bl	11ddc <start_enc_rsp_send>
	    conn->tx_head &&
   14efc:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   14f00:	2b00      	cmp	r3, #0
   14f02:	f000 809f 	beq.w	15044 <ull_conn_llcp+0xe24>
	    !conn->llcp_enc.pause_tx &&
   14f06:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
   14f0a:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
	    conn->tx_head &&
   14f0e:	0788      	lsls	r0, r1, #30
   14f10:	f100 809a 	bmi.w	15048 <ull_conn_llcp+0xe28>
	    !conn->llcp_phy.pause_tx &&
   14f14:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   14f18:	07c9      	lsls	r1, r1, #31
   14f1a:	f100 8095 	bmi.w	15048 <ull_conn_llcp+0xe28>
		if (conn->tx_head == conn->tx_data) {
   14f1e:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   14f22:	428b      	cmp	r3, r1
   14f24:	f000 8327 	beq.w	15576 <ull_conn_llcp+0x1356>
		} else if (!conn->tx_ctrl) {
   14f28:	2a00      	cmp	r2, #0
   14f2a:	f000 83a4 	beq.w	15676 <ull_conn_llcp+0x1456>
	tx->next = conn->tx_ctrl_last->next;
   14f2e:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   14f32:	681a      	ldr	r2, [r3, #0]
   14f34:	603a      	str	r2, [r7, #0]
	conn->tx_ctrl_last->next = tx;
   14f36:	601f      	str	r7, [r3, #0]
	conn->tx_ctrl_last = tx;
   14f38:	683b      	ldr	r3, [r7, #0]
   14f3a:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
   14f3e:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
	if (!tx->next) {
   14f42:	2b00      	cmp	r3, #0
   14f44:	f47f ac49 	bne.w	147da <ull_conn_llcp+0x5ba>
		conn->tx_data_last = tx;
   14f48:	f8c4 71d4 	str.w	r7, [r4, #468]	; 0x1d4
   14f4c:	e445      	b.n	147da <ull_conn_llcp+0x5ba>
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   14f4e:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
   14f52:	f894 71ad 	ldrb.w	r7, [r4, #429]	; 0x1ad
   14f56:	4297      	cmp	r7, r2
   14f58:	f000 80c1 	beq.w	150de <ull_conn_llcp+0xebe>
	switch (conn->llcp_length.state) {
   14f5c:	f894 c1ae 	ldrb.w	ip, [r4, #430]	; 0x1ae
   14f60:	f00c 0107 	and.w	r1, ip, #7
   14f64:	2906      	cmp	r1, #6
   14f66:	f200 84dd 	bhi.w	15924 <ull_conn_llcp+0x1704>
   14f6a:	a701      	add	r7, pc, #4	; (adr r7, 14f70 <ull_conn_llcp+0xd50>)
   14f6c:	f857 f021 	ldr.w	pc, [r7, r1, lsl #2]
   14f70:	00014ad9 	.word	0x00014ad9
   14f74:	00014237 	.word	0x00014237
   14f78:	00014237 	.word	0x00014237
   14f7c:	00014237 	.word	0x00014237
   14f80:	00014f8d 	.word	0x00014f8d
   14f84:	00014f8d 	.word	0x00014f8d
   14f88:	00014237 	.word	0x00014237
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   14f8c:	f8b4 11b0 	ldrh.w	r1, [r4, #432]	; 0x1b0
   14f90:	f8a4 105a 	strh.w	r1, [r4, #90]	; 0x5a
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   14f94:	f00c 0107 	and.w	r1, ip, #7
		lll->max_rx_time = conn->llcp_length.rx_time;
   14f98:	f8b4 31b4 	ldrh.w	r3, [r4, #436]	; 0x1b4
		tx_octets = conn->llcp_length.tx_octets;
   14f9c:	f8b4 81b2 	ldrh.w	r8, [r4, #434]	; 0x1b2
		uint16_t tx_time = conn->llcp_length.tx_time;
   14fa0:	f8b4 71b6 	ldrh.w	r7, [r4, #438]	; 0x1b6
		lll->max_rx_time = conn->llcp_length.rx_time;
   14fa4:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   14fa8:	2904      	cmp	r1, #4
   14faa:	f000 82fb 	beq.w	155a4 <ull_conn_llcp+0x1384>
			conn->llcp_length.state =
   14fae:	4663      	mov	r3, ip
   14fb0:	2206      	movs	r2, #6
   14fb2:	f362 0302 	bfi	r3, r2, #0, #3
   14fb6:	f884 31ae 	strb.w	r3, [r4, #430]	; 0x1ae
		rx = conn->llcp_rx;
   14fba:	f8d4 9108 	ldr.w	r9, [r4, #264]	; 0x108
		LL_ASSERT(rx && rx->hdr.link);
   14fbe:	f1b9 0f00 	cmp.w	r9, #0
   14fc2:	f000 82ba 	beq.w	1553a <ull_conn_llcp+0x131a>
   14fc6:	f8d9 0000 	ldr.w	r0, [r9]
   14fca:	2800      	cmp	r0, #0
   14fcc:	f000 82b5 	beq.w	1553a <ull_conn_llcp+0x131a>
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   14fd0:	f899 301c 	ldrb.w	r3, [r9, #28]
		conn->llcp_rx = rx->hdr.link->mem;
   14fd4:	6842      	ldr	r2, [r0, #4]
		rx->hdr.handle = conn->lll.handle;
   14fd6:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
		conn->llcp_rx = rx->hdr.link->mem;
   14fda:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   14fde:	f043 0303 	orr.w	r3, r3, #3
   14fe2:	f889 301c 	strb.w	r3, [r9, #28]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   14fe6:	2203      	movs	r2, #3
		pdu_ctrl_rx->len =
   14fe8:	2309      	movs	r3, #9
   14fea:	f889 301d 	strb.w	r3, [r9, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   14fee:	f889 2004 	strb.w	r2, [r9, #4]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   14ff2:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   14ff6:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
   14ffa:	f8a9 2022 	strh.w	r2, [r9, #34]	; 0x22
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   14ffe:	2315      	movs	r3, #21
   15000:	f889 301f 	strb.w	r3, [r9, #31]
		rx->hdr.handle = conn->lll.handle;
   15004:	f8a9 c006 	strh.w	ip, [r9, #6]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   15008:	f8a9 1020 	strh.w	r1, [r9, #32]
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
   1500c:	f8a9 8024 	strh.w	r8, [r9, #36]	; 0x24
		ll_rx_put(rx->hdr.link, rx);
   15010:	4649      	mov	r1, r9
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   15012:	f8a9 7026 	strh.w	r7, [r9, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
   15016:	f7fb fd2f 	bl	10a78 <ll_rx_put>
		ll_rx_sched();
   1501a:	f7fb fd37 	bl	10a8c <ll_rx_sched>
	break;
   1501e:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   15022:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
   15026:	f7ff b906 	b.w	14236 <ull_conn_llcp+0x16>
   1502a:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   1502e:	2a00      	cmp	r2, #0
   15030:	f47f aa59 	bne.w	144e6 <ull_conn_llcp+0x2c6>
			tx->next = conn->tx_head;
   15034:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
   15038:	e9c4 8871 	strd	r8, r8, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   1503c:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
   15040:	f7ff ba5c 	b.w	144fc <ull_conn_llcp+0x2dc>
   15044:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   15048:	2a00      	cmp	r2, #0
   1504a:	f47f af70 	bne.w	14f2e <ull_conn_llcp+0xd0e>
			tx->next = conn->tx_head;
   1504e:	603b      	str	r3, [r7, #0]
				conn->tx_ctrl = tx;
   15050:	e9c4 7771 	strd	r7, r7, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   15054:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
   15058:	e771      	b.n	14f3e <ull_conn_llcp+0xd1e>
   1505a:	bf00      	nop
   1505c:	200020f8 	.word	0x200020f8
   15060:	0001417f 	.word	0x0001417f
		LL_ASSERT(rx && rx->hdr.link);
   15064:	4ad4      	ldr	r2, [pc, #848]	; (153b8 <ull_conn_llcp+0x1198>)
   15066:	49d5      	ldr	r1, [pc, #852]	; (153bc <ull_conn_llcp+0x119c>)
   15068:	48d5      	ldr	r0, [pc, #852]	; (153c0 <ull_conn_llcp+0x11a0>)
   1506a:	f640 635d 	movw	r3, #3677	; 0xe5d
   1506e:	f009 f989 	bl	1e384 <printk>
   15072:	4040      	eors	r0, r0
   15074:	f380 8811 	msr	BASEPRI, r0
   15078:	f04f 0003 	mov.w	r0, #3
   1507c:	df02      	svc	2
   1507e:	6838      	ldr	r0, [r7, #0]
   15080:	f8b4 c05a 	ldrh.w	ip, [r4, #90]	; 0x5a
   15084:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
   15088:	e417      	b.n	148ba <ull_conn_llcp+0x69a>
   1508a:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   1508e:	2a00      	cmp	r2, #0
   15090:	f47f aed5 	bne.w	14e3e <ull_conn_llcp+0xc1e>
			tx->next = conn->tx_head;
   15094:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   15096:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   1509a:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   1509e:	e564      	b.n	14b6a <ull_conn_llcp+0x94a>
			if (!conn->llcp_length.cache.tx_octets) {
   150a0:	f8b4 21b8 	ldrh.w	r2, [r4, #440]	; 0x1b8
   150a4:	2a00      	cmp	r2, #0
   150a6:	f040 8175 	bne.w	15394 <ull_conn_llcp+0x1174>
				conn->llcp_length.ack = conn->llcp_length.req;
   150aa:	f884 31ad 	strb.w	r3, [r4, #429]	; 0x1ad
				conn->procedure_expire = 0U;
   150ae:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
   150b2:	f7ff bbf9 	b.w	148a8 <ull_conn_llcp+0x688>
	    ((pdu_data_tx->llctrl.opcode !=
   150b6:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   150b8:	2a03      	cmp	r2, #3
   150ba:	f43f ad69 	beq.w	14b90 <ull_conn_llcp+0x970>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   150be:	2a0a      	cmp	r2, #10
   150c0:	f47f a8f9 	bne.w	142b6 <ull_conn_llcp+0x96>
   150c4:	e564      	b.n	14b90 <ull_conn_llcp+0x970>
		if (!conn->tx_ctrl) {
   150c6:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   150ca:	2b00      	cmp	r3, #0
   150cc:	f47f ab7a 	bne.w	147c4 <ull_conn_llcp+0x5a4>
			tx->next = conn->tx_head;
   150d0:	603a      	str	r2, [r7, #0]
				conn->tx_ctrl = tx;
   150d2:	e9c4 7771 	strd	r7, r7, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   150d6:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
   150da:	f7ff bb7a 	b.w	147d2 <ull_conn_llcp+0x5b2>
		} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   150de:	f894 21bc 	ldrb.w	r2, [r4, #444]	; 0x1bc
   150e2:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   150e6:	4293      	cmp	r3, r2
   150e8:	f43f a8ad 	beq.w	14246 <ull_conn_llcp+0x26>
	switch (conn->llcp_phy.state) {
   150ec:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   150f0:	f003 0703 	and.w	r7, r3, #3
   150f4:	2f03      	cmp	r7, #3
   150f6:	f000 8270 	beq.w	155da <ull_conn_llcp+0x13ba>
   150fa:	2f00      	cmp	r7, #0
   150fc:	f47f a8a2 	bne.w	14244 <ull_conn_llcp+0x24>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   15100:	48b0      	ldr	r0, [pc, #704]	; (153c4 <ull_conn_llcp+0x11a4>)
   15102:	f7f7 fda3 	bl	cc4c <mem_acquire>
		if (!tx) {
   15106:	4601      	mov	r1, r0
   15108:	2800      	cmp	r0, #0
   1510a:	f43f ad35 	beq.w	14b78 <ull_conn_llcp+0x958>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   1510e:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
		conn->phy_pref_tx = conn->llcp_phy.tx;
   15112:	f894 21c0 	ldrb.w	r2, [r4, #448]	; 0x1c0
		conn->lll.phy_flags = conn->llcp_phy.flags;
   15116:	f894 71bf 	ldrb.w	r7, [r4, #447]	; 0x1bf
   1511a:	f894 c060 	ldrb.w	ip, [r4, #96]	; 0x60
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   1511e:	2001      	movs	r0, #1
   15120:	f360 0301 	bfi	r3, r0, #0, #2
		conn->phy_pref_tx = conn->llcp_phy.tx;
   15124:	f3c3 0082 	ubfx	r0, r3, #2, #3
   15128:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
   1512c:	f3c3 1042 	ubfx	r0, r3, #5, #3
   15130:	f360 02c5 	bfi	r2, r0, #3, #3
		conn->lll.phy_flags = conn->llcp_phy.flags;
   15134:	f3c7 0740 	ubfx	r7, r7, #1, #1
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15138:	7908      	ldrb	r0, [r1, #4]
		conn->phy_pref_rx = conn->llcp_phy.rx;
   1513a:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
		conn->lll.phy_flags = conn->llcp_phy.flags;
   1513e:	f367 0cc3 	bfi	ip, r7, #3, #1
		conn->phy_pref_tx = conn->llcp_phy.tx;
   15142:	f3c3 0282 	ubfx	r2, r3, #2, #3
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   15146:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
		conn->lll.phy_flags = conn->llcp_phy.flags;
   1514a:	f884 c060 	strb.w	ip, [r4, #96]	; 0x60
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1514e:	f040 0003 	orr.w	r0, r0, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
   15152:	f3c3 1342 	ubfx	r3, r3, #5, #3
		pdu_ctrl_tx->len =
   15156:	2703      	movs	r7, #3
		pr->tx_phys = conn->llcp_phy.tx;
   15158:	720a      	strb	r2, [r1, #8]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   1515a:	2216      	movs	r2, #22
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1515c:	7108      	strb	r0, [r1, #4]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   1515e:	71ca      	strb	r2, [r1, #7]
		pr->rx_phys = conn->llcp_phy.rx;
   15160:	724b      	strb	r3, [r1, #9]
		pdu_ctrl_tx->len =
   15162:	714f      	strb	r7, [r1, #5]
	ctrl_tx_pause_enqueue(conn, tx, false);
   15164:	2200      	movs	r2, #0
   15166:	4620      	mov	r0, r4
   15168:	f7fc fc36 	bl	119d8 <ctrl_tx_pause_enqueue>
   1516c:	e500      	b.n	14b70 <ull_conn_llcp+0x950>
		start_enc_rsp_send(conn, pdu_ctrl_tx);
   1516e:	4651      	mov	r1, sl
   15170:	4620      	mov	r0, r4
   15172:	f7fc fe33 	bl	11ddc <start_enc_rsp_send>
	    conn->tx_head &&
   15176:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   1517a:	2b00      	cmp	r3, #0
   1517c:	f000 8088 	beq.w	15290 <ull_conn_llcp+0x1070>
	    !conn->llcp_enc.pause_tx &&
   15180:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
   15184:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
	    conn->tx_head &&
   15188:	0789      	lsls	r1, r1, #30
   1518a:	f100 8083 	bmi.w	15294 <ull_conn_llcp+0x1074>
	    !conn->llcp_phy.pause_tx &&
   1518e:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   15192:	07c8      	lsls	r0, r1, #31
   15194:	d47e      	bmi.n	15294 <ull_conn_llcp+0x1074>
		if (conn->tx_head == conn->tx_data) {
   15196:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   1519a:	428b      	cmp	r3, r1
   1519c:	f000 825f 	beq.w	1565e <ull_conn_llcp+0x143e>
		} else if (!conn->tx_ctrl) {
   151a0:	2a00      	cmp	r2, #0
   151a2:	f000 832e 	beq.w	15802 <ull_conn_llcp+0x15e2>
	tx->next = conn->tx_ctrl_last->next;
   151a6:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   151aa:	681a      	ldr	r2, [r3, #0]
   151ac:	603a      	str	r2, [r7, #0]
	conn->tx_ctrl_last->next = tx;
   151ae:	601f      	str	r7, [r3, #0]
	conn->tx_ctrl_last = tx;
   151b0:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
	if (!tx->next) {
   151b4:	683b      	ldr	r3, [r7, #0]
   151b6:	2b00      	cmp	r3, #0
   151b8:	f000 814b 	beq.w	15452 <ull_conn_llcp+0x1232>
		conn->llcp_enc.pause_rx = 0U;
   151bc:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
   151c0:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   151c4:	f023 0303 	bic.w	r3, r3, #3
   151c8:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
   151cc:	f7ff bb05 	b.w	147da <ull_conn_llcp+0x5ba>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   151d0:	230d      	movs	r3, #13
		p->error_code =	conn->llcp.encryption.error_code;
   151d2:	f887 8008 	strb.w	r8, [r7, #8]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   151d6:	71fb      	strb	r3, [r7, #7]
		p->error_code =	conn->llcp.encryption.error_code;
   151d8:	f04f 0902 	mov.w	r9, #2
   151dc:	f7ff bad4 	b.w	14788 <ull_conn_llcp+0x568>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   151e0:	4878      	ldr	r0, [pc, #480]	; (153c4 <ull_conn_llcp+0x11a4>)
   151e2:	f7f7 fd33 	bl	cc4c <mem_acquire>
		if (tx) {
   151e6:	2800      	cmp	r0, #0
   151e8:	f43f acc6 	beq.w	14b78 <ull_conn_llcp+0x958>
			conn->llcp_version.ack--;
   151ec:	f894 2139 	ldrb.w	r2, [r4, #313]	; 0x139
			conn->llcp_version.tx = 1U;
   151f0:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
			conn->llcp_version.ack--;
   151f4:	3a01      	subs	r2, #1
   151f6:	f884 2139 	strb.w	r2, [r4, #313]	; 0x139
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   151fa:	7902      	ldrb	r2, [r0, #4]
			conn->llcp_version.tx = 1U;
   151fc:	f043 0301 	orr.w	r3, r3, #1
			pdu->len =
   15200:	2106      	movs	r1, #6
			conn->llcp_version.tx = 1U;
   15202:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   15206:	f042 0203 	orr.w	r2, r2, #3
			pdu->len =
   1520a:	7141      	strb	r1, [r0, #5]
	    conn->tx_head &&
   1520c:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   15210:	7102      	strb	r2, [r0, #4]
			pdu->llctrl.version_ind.version_number =
   15212:	210b      	movs	r1, #11
			pdu->llctrl.version_ind.company_id = cid;
   15214:	f06f 020e 	mvn.w	r2, #14
			pdu->llctrl.opcode =
   15218:	270c      	movs	r7, #12
			pdu->llctrl.version_ind.version_number =
   1521a:	7201      	strb	r1, [r0, #8]
			pdu->llctrl.version_ind.company_id = cid;
   1521c:	7242      	strb	r2, [r0, #9]
   1521e:	2105      	movs	r1, #5
			pdu->llctrl.version_ind.sub_version_number = svn;
   15220:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
			pdu->llctrl.opcode =
   15224:	71c7      	strb	r7, [r0, #7]
			pdu->llctrl.version_ind.company_id = cid;
   15226:	7281      	strb	r1, [r0, #10]
			pdu->llctrl.version_ind.sub_version_number = svn;
   15228:	72c2      	strb	r2, [r0, #11]
   1522a:	7302      	strb	r2, [r0, #12]
	if (
   1522c:	2b00      	cmp	r3, #0
   1522e:	f000 8104 	beq.w	1543a <ull_conn_llcp+0x121a>
	    !conn->llcp_enc.pause_tx &&
   15232:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   15236:	0792      	lsls	r2, r2, #30
   15238:	f100 80ff 	bmi.w	1543a <ull_conn_llcp+0x121a>
	    !conn->llcp_phy.pause_tx &&
   1523c:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   15240:	07d7      	lsls	r7, r2, #31
   15242:	f100 80fa 	bmi.w	1543a <ull_conn_llcp+0x121a>
		if (conn->tx_head == conn->tx_data) {
   15246:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   1524a:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   1524c:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   15250:	f000 8295 	beq.w	1577e <ull_conn_llcp+0x155e>
		} else if (!conn->tx_ctrl) {
   15254:	2a00      	cmp	r2, #0
   15256:	f47f ac80 	bne.w	14b5a <ull_conn_llcp+0x93a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1525a:	791a      	ldrb	r2, [r3, #4]
   1525c:	f002 0203 	and.w	r2, r2, #3
   15260:	2a03      	cmp	r2, #3
   15262:	f000 8332 	beq.w	158ca <ull_conn_llcp+0x16aa>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   15266:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   1526a:	e476      	b.n	14b5a <ull_conn_llcp+0x93a>
		LL_ASSERT(0);
   1526c:	f640 435e 	movw	r3, #3166	; 0xc5e
		LL_ASSERT(0);
   15270:	4a51      	ldr	r2, [pc, #324]	; (153b8 <ull_conn_llcp+0x1198>)
   15272:	4955      	ldr	r1, [pc, #340]	; (153c8 <ull_conn_llcp+0x11a8>)
   15274:	4852      	ldr	r0, [pc, #328]	; (153c0 <ull_conn_llcp+0x11a0>)
   15276:	f009 f885 	bl	1e384 <printk>
   1527a:	4040      	eors	r0, r0
   1527c:	f380 8811 	msr	BASEPRI, r0
   15280:	f04f 0003 	mov.w	r0, #3
   15284:	df02      	svc	2
		break;
   15286:	e477      	b.n	14b78 <ull_conn_llcp+0x958>
		conn->tx_data_last = tx;
   15288:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   1528c:	f7ff bb8c 	b.w	149a8 <ull_conn_llcp+0x788>
   15290:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   15294:	2a00      	cmp	r2, #0
   15296:	d186      	bne.n	151a6 <ull_conn_llcp+0xf86>
			tx->next = conn->tx_head;
   15298:	603b      	str	r3, [r7, #0]
				conn->tx_ctrl = tx;
   1529a:	e9c4 7771 	strd	r7, r7, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   1529e:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
   152a2:	e787      	b.n	151b4 <ull_conn_llcp+0xf94>
		conn->tx_data_last = tx;
   152a4:	f8c4 81d4 	str.w	r8, [r4, #468]	; 0x1d4
   152a8:	f7ff b92b 	b.w	14502 <ull_conn_llcp+0x2e2>
   152ac:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
		conn->procedure_expire = conn->procedure_reload;
   152b0:	e45e      	b.n	14b70 <ull_conn_llcp+0x950>
			ecb_encrypt(&conn->llcp_enc.ltk[0],
   152b2:	f104 097b 	add.w	r9, r4, #123	; 0x7b
   152b6:	464b      	mov	r3, r9
   152b8:	4642      	mov	r2, r8
   152ba:	f104 01f6 	add.w	r1, r4, #246	; 0xf6
   152be:	f204 1071 	addw	r0, r4, #369	; 0x171
   152c2:	f004 f855 	bl	19370 <ecb_encrypt>
   152c6:	f8d4 2087 	ldr.w	r2, [r4, #135]	; 0x87
   152ca:	f8c4 20a8 	str.w	r2, [r4, #168]	; 0xa8
   152ce:	f8d4 007b 	ldr.w	r0, [r4, #123]	; 0x7b
   152d2:	f8d4 107f 	ldr.w	r1, [r4, #127]	; 0x7f
   152d6:	f8d4 3083 	ldr.w	r3, [r4, #131]	; 0x83
   152da:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
   152de:	4622      	mov	r2, r4
   152e0:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
   152e4:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
   152e8:	f852 1f94 	ldr.w	r1, [r2, #148]!
			lll->ccm_tx.direction = 0U;
   152ec:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
   152f0:	6852      	ldr	r2, [r2, #4]
   152f2:	f8c4 20b9 	str.w	r2, [r4, #185]	; 0xb9
   152f6:	f8c4 10b5 	str.w	r1, [r4, #181]	; 0xb5
			lll->enc_rx = 1U;
   152fa:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
			lll->ccm_rx.direction = 1U;
   152fe:	f894 1093 	ldrb.w	r1, [r4, #147]	; 0x93
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15302:	793b      	ldrb	r3, [r7, #4]
			lll->ccm_rx.counter = 0U;
   15304:	f884 808b 	strb.w	r8, [r4, #139]	; 0x8b
			lll->enc_rx = 1U;
   15308:	f042 0208 	orr.w	r2, r2, #8
			lll->ccm_rx.direction = 1U;
   1530c:	f041 0101 	orr.w	r1, r1, #1
			lll->ccm_tx.direction = 0U;
   15310:	f368 0000 	bfi	r0, r8, #0, #1
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   15314:	f04f 0c01 	mov.w	ip, #1
			lll->enc_rx = 1U;
   15318:	f884 207a 	strb.w	r2, [r4, #122]	; 0x7a
			lll->ccm_rx.counter = 0U;
   1531c:	f884 808c 	strb.w	r8, [r4, #140]	; 0x8c
   15320:	f884 808d 	strb.w	r8, [r4, #141]	; 0x8d
   15324:	f884 808e 	strb.w	r8, [r4, #142]	; 0x8e
   15328:	f884 808f 	strb.w	r8, [r4, #143]	; 0x8f
   1532c:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
   15330:	f884 8091 	strb.w	r8, [r4, #145]	; 0x91
   15334:	f884 8092 	strb.w	r8, [r4, #146]	; 0x92
			lll->ccm_tx.counter = 0U;
   15338:	f8c4 80ac 	str.w	r8, [r4, #172]	; 0xac
   1533c:	f8c4 80b0 	str.w	r8, [r4, #176]	; 0xb0
			lll->ccm_rx.direction = 1U;
   15340:	f884 1093 	strb.w	r1, [r4, #147]	; 0x93
			lll->ccm_tx.direction = 0U;
   15344:	f884 00b4 	strb.w	r0, [r4, #180]	; 0xb4
			pdu_ctrl_tx->llctrl.opcode =
   15348:	2205      	movs	r2, #5
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1534a:	f043 0303 	orr.w	r3, r3, #3
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   1534e:	f887 c005 	strb.w	ip, [r7, #5]
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15352:	713b      	strb	r3, [r7, #4]
			pdu_ctrl_tx->llctrl.opcode =
   15354:	71fa      	strb	r2, [r7, #7]
	    conn->tx_head &&
   15356:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
	if (
   1535a:	2a00      	cmp	r2, #0
   1535c:	d04c      	beq.n	153f8 <ull_conn_llcp+0x11d8>
	    !conn->llcp_enc.pause_tx &&
   1535e:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
	    conn->tx_head &&
   15362:	079b      	lsls	r3, r3, #30
   15364:	d448      	bmi.n	153f8 <ull_conn_llcp+0x11d8>
	    !conn->llcp_phy.pause_tx &&
   15366:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   1536a:	07d8      	lsls	r0, r3, #31
   1536c:	d444      	bmi.n	153f8 <ull_conn_llcp+0x11d8>
		if (conn->tx_head == conn->tx_data) {
   1536e:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   15372:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   15376:	428a      	cmp	r2, r1
   15378:	f000 824b 	beq.w	15812 <ull_conn_llcp+0x15f2>
		} else if (!conn->tx_ctrl) {
   1537c:	2b00      	cmp	r3, #0
   1537e:	f000 825c 	beq.w	1583a <ull_conn_llcp+0x161a>
	tx->next = conn->tx_ctrl_last->next;
   15382:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   15386:	681a      	ldr	r2, [r3, #0]
   15388:	603a      	str	r2, [r7, #0]
	conn->tx_ctrl_last->next = tx;
   1538a:	601f      	str	r7, [r3, #0]
	conn->tx_ctrl_last = tx;
   1538c:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
	if (!tx->next) {
   15390:	683b      	ldr	r3, [r7, #0]
   15392:	e5d4      	b.n	14f3e <ull_conn_llcp+0xd1e>
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   15394:	f894 01ae 	ldrb.w	r0, [r4, #430]	; 0x1ae
				conn->llcp_length.tx_time =
   15398:	f8b4 71ba 	ldrh.w	r7, [r4, #442]	; 0x1ba
				conn->llcp_length.tx_octets =
   1539c:	f8a4 21b2 	strh.w	r2, [r4, #434]	; 0x1b2
				conn->llcp_length.cache.tx_octets = 0;
   153a0:	2300      	movs	r3, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   153a2:	f363 0002 	bfi	r0, r3, #0, #3
   153a6:	f884 01ae 	strb.w	r0, [r4, #430]	; 0x1ae
				conn->llcp_length.cache.tx_octets = 0;
   153aa:	f8a4 31b8 	strh.w	r3, [r4, #440]	; 0x1b8
				conn->llcp_length.tx_time =
   153ae:	f8a4 71b6 	strh.w	r7, [r4, #438]	; 0x1b6
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   153b2:	f7ff ba79 	b.w	148a8 <ull_conn_llcp+0x688>
   153b6:	bf00      	nop
   153b8:	00024874 	.word	0x00024874
   153bc:	00024940 	.word	0x00024940
   153c0:	00024334 	.word	0x00024334
   153c4:	200020f8 	.word	0x200020f8
   153c8:	000243a4 	.word	0x000243a4
	switch (conn->llcp_conn_param.state) {
   153cc:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   153d0:	f003 0307 	and.w	r3, r3, #7
   153d4:	2b05      	cmp	r3, #5
   153d6:	f200 82a8 	bhi.w	1592a <ull_conn_llcp+0x170a>
   153da:	a001      	add	r0, pc, #4	; (adr r0, 153e0 <ull_conn_llcp+0x11c0>)
   153dc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   153e0:	00014cc9 	.word	0x00014cc9
   153e4:	00014c49 	.word	0x00014c49
   153e8:	00014bf5 	.word	0x00014bf5
   153ec:	00014247 	.word	0x00014247
   153f0:	00014247 	.word	0x00014247
   153f4:	00014247 	.word	0x00014247
		if (!conn->tx_ctrl) {
   153f8:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   153fc:	2b00      	cmp	r3, #0
   153fe:	d1c0      	bne.n	15382 <ull_conn_llcp+0x1162>
			tx->next = conn->tx_head;
   15400:	603a      	str	r2, [r7, #0]
				conn->tx_ctrl = tx;
   15402:	e9c4 7771 	strd	r7, r7, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   15406:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
   1540a:	e7c1      	b.n	15390 <ull_conn_llcp+0x1170>
			conn->tx_data = conn->tx_data->next;
   1540c:	681a      	ldr	r2, [r3, #0]
   1540e:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   15412:	2f00      	cmp	r7, #0
   15414:	f47f a80c 	bne.w	14430 <ull_conn_llcp+0x210>
			tx->next = conn->tx_head->next;
   15418:	681a      	ldr	r2, [r3, #0]
   1541a:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   1541c:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   1541e:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   15420:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   15424:	f7ff b80c 	b.w	14440 <ull_conn_llcp+0x220>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   15428:	791a      	ldrb	r2, [r3, #4]
   1542a:	f002 0203 	and.w	r2, r2, #3
   1542e:	2a03      	cmp	r2, #3
   15430:	d071      	beq.n	15516 <ull_conn_llcp+0x12f6>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   15432:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   15436:	f7fe bffb 	b.w	14430 <ull_conn_llcp+0x210>
		if (!conn->tx_ctrl) {
   1543a:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   1543e:	2a00      	cmp	r2, #0
   15440:	f47f ab8b 	bne.w	14b5a <ull_conn_llcp+0x93a>
			tx->next = conn->tx_head;
   15444:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   15446:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   1544a:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   1544e:	f7ff bb8b 	b.w	14b68 <ull_conn_llcp+0x948>
		conn->tx_data_last = tx;
   15452:	f8c4 71d4 	str.w	r7, [r4, #468]	; 0x1d4
   15456:	e6b1      	b.n	151bc <ull_conn_llcp+0xf9c>
			conn->tx_data = conn->tx_data->next;
   15458:	6819      	ldr	r1, [r3, #0]
   1545a:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1545e:	2a00      	cmp	r2, #0
   15460:	f47f a94f 	bne.w	14702 <ull_conn_llcp+0x4e2>
			tx->next = conn->tx_head->next;
   15464:	681a      	ldr	r2, [r3, #0]
   15466:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   15468:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   1546a:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   1546c:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   15470:	f7ff b94f 	b.w	14712 <ull_conn_llcp+0x4f2>
			conn->tx_data = conn->tx_data->next;
   15474:	6819      	ldr	r1, [r3, #0]
   15476:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1547a:	2a00      	cmp	r2, #0
   1547c:	f47f a9ee 	bne.w	1485c <ull_conn_llcp+0x63c>
			tx->next = conn->tx_head->next;
   15480:	681a      	ldr	r2, [r3, #0]
   15482:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   15484:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   15486:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   15488:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   1548c:	f7ff b9ee 	b.w	1486c <ull_conn_llcp+0x64c>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   15490:	791a      	ldrb	r2, [r3, #4]
   15492:	f002 0203 	and.w	r2, r2, #3
   15496:	2a03      	cmp	r2, #3
   15498:	f000 808e 	beq.w	155b8 <ull_conn_llcp+0x1398>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1549c:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   154a0:	f7ff b92f 	b.w	14702 <ull_conn_llcp+0x4e2>
			conn->tx_data = conn->tx_data->next;
   154a4:	6819      	ldr	r1, [r3, #0]
   154a6:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   154aa:	2a00      	cmp	r2, #0
   154ac:	f47f a81b 	bne.w	144e6 <ull_conn_llcp+0x2c6>
			tx->next = conn->tx_head->next;
   154b0:	681a      	ldr	r2, [r3, #0]
   154b2:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
   154b6:	f8c3 8000 	str.w	r8, [r3]
				conn->tx_ctrl = tx;
   154ba:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
   154be:	e9c4 8872 	strd	r8, r8, [r4, #456]	; 0x1c8
   154c2:	f7ff b81b 	b.w	144fc <ull_conn_llcp+0x2dc>
		if (!conn->tx_ctrl) {
   154c6:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   154ca:	2b00      	cmp	r3, #0
   154cc:	f47f ab45 	bne.w	14b5a <ull_conn_llcp+0x93a>
			tx->next = conn->tx_head;
   154d0:	6001      	str	r1, [r0, #0]
				conn->tx_ctrl = tx;
   154d2:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   154d6:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   154da:	f7ff bb45 	b.w	14b68 <ull_conn_llcp+0x948>
			conn->tx_data = conn->tx_data->next;
   154de:	f8dc 3000 	ldr.w	r3, [ip]
   154e2:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   154e6:	2a00      	cmp	r2, #0
   154e8:	f47f aa51 	bne.w	1498e <ull_conn_llcp+0x76e>
			tx->next = conn->tx_head->next;
   154ec:	f8dc 3000 	ldr.w	r3, [ip]
   154f0:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   154f2:	f8cc 0000 	str.w	r0, [ip]
				conn->tx_ctrl = tx;
   154f6:	f8d0 c000 	ldr.w	ip, [r0]
				conn->tx_ctrl_last = tx;
   154fa:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   154fe:	f7ff ba4f 	b.w	149a0 <ull_conn_llcp+0x780>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   15502:	791a      	ldrb	r2, [r3, #4]
   15504:	f002 0203 	and.w	r2, r2, #3
   15508:	2a03      	cmp	r2, #3
   1550a:	f000 8145 	beq.w	15798 <ull_conn_llcp+0x1578>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1550e:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   15512:	f7ff b9a3 	b.w	1485c <ull_conn_llcp+0x63c>
	    ((pdu_data_tx->llctrl.opcode !=
   15516:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   15518:	2a03      	cmp	r2, #3
   1551a:	f43f af7d 	beq.w	15418 <ull_conn_llcp+0x11f8>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1551e:	2a0a      	cmp	r2, #10
   15520:	d187      	bne.n	15432 <ull_conn_llcp+0x1212>
   15522:	e779      	b.n	15418 <ull_conn_llcp+0x11f8>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   15524:	f89c 3004 	ldrb.w	r3, [ip, #4]
   15528:	f003 0303 	and.w	r3, r3, #3
   1552c:	2b03      	cmp	r3, #3
   1552e:	f000 8153 	beq.w	157d8 <ull_conn_llcp+0x15b8>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   15532:	e9c4 cc72 	strd	ip, ip, [r4, #456]	; 0x1c8
   15536:	f7ff ba2a 	b.w	1498e <ull_conn_llcp+0x76e>
		LL_ASSERT(rx && rx->hdr.link);
   1553a:	4ad1      	ldr	r2, [pc, #836]	; (15880 <ull_conn_llcp+0x1660>)
   1553c:	49d1      	ldr	r1, [pc, #836]	; (15884 <ull_conn_llcp+0x1664>)
   1553e:	48d2      	ldr	r0, [pc, #840]	; (15888 <ull_conn_llcp+0x1668>)
   15540:	f640 635d 	movw	r3, #3677	; 0xe5d
   15544:	f008 ff1e 	bl	1e384 <printk>
   15548:	4040      	eors	r0, r0
   1554a:	f380 8811 	msr	BASEPRI, r0
   1554e:	f04f 0003 	mov.w	r0, #3
   15552:	df02      	svc	2
   15554:	f8d9 0000 	ldr.w	r0, [r9]
   15558:	e53a      	b.n	14fd0 <ull_conn_llcp+0xdb0>
			conn->tx_data = conn->tx_data->next;
   1555a:	6819      	ldr	r1, [r3, #0]
   1555c:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   15560:	2a00      	cmp	r2, #0
   15562:	f47f ac6c 	bne.w	14e3e <ull_conn_llcp+0xc1e>
			tx->next = conn->tx_head->next;
   15566:	681a      	ldr	r2, [r3, #0]
   15568:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   1556a:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   1556c:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   1556e:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   15572:	f7ff bafa 	b.w	14b6a <ull_conn_llcp+0x94a>
			conn->tx_data = conn->tx_data->next;
   15576:	6819      	ldr	r1, [r3, #0]
   15578:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1557c:	2a00      	cmp	r2, #0
   1557e:	f47f acd6 	bne.w	14f2e <ull_conn_llcp+0xd0e>
			tx->next = conn->tx_head->next;
   15582:	681a      	ldr	r2, [r3, #0]
   15584:	603a      	str	r2, [r7, #0]
			conn->tx_head->next = tx;
   15586:	601f      	str	r7, [r3, #0]
				conn->tx_ctrl = tx;
   15588:	683b      	ldr	r3, [r7, #0]
				conn->tx_ctrl_last = tx;
   1558a:	e9c4 7772 	strd	r7, r7, [r4, #456]	; 0x1c8
   1558e:	e4d6      	b.n	14f3e <ull_conn_llcp+0xd1e>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   15590:	791a      	ldrb	r2, [r3, #4]
   15592:	f002 0203 	and.w	r2, r2, #3
   15596:	2a03      	cmp	r2, #3
   15598:	f000 8127 	beq.w	157ea <ull_conn_llcp+0x15ca>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1559c:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   155a0:	f7fe bfa1 	b.w	144e6 <ull_conn_llcp+0x2c6>
			if (!conn->llcp_length.cache.tx_octets) {
   155a4:	f8b4 11b8 	ldrh.w	r1, [r4, #440]	; 0x1b8
   155a8:	2900      	cmp	r1, #0
   155aa:	f040 80fd 	bne.w	157a8 <ull_conn_llcp+0x1588>
				conn->llcp_length.ack = conn->llcp_length.req;
   155ae:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
				conn->procedure_expire = 0U;
   155b2:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
   155b6:	e500      	b.n	14fba <ull_conn_llcp+0xd9a>
	    ((pdu_data_tx->llctrl.opcode !=
   155b8:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   155ba:	2a03      	cmp	r2, #3
   155bc:	f43f af52 	beq.w	15464 <ull_conn_llcp+0x1244>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   155c0:	2a0a      	cmp	r2, #10
   155c2:	f47f af6b 	bne.w	1549c <ull_conn_llcp+0x127c>
   155c6:	e74d      	b.n	15464 <ull_conn_llcp+0x1244>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   155c8:	791a      	ldrb	r2, [r3, #4]
   155ca:	f002 0203 	and.w	r2, r2, #3
   155ce:	2a03      	cmp	r2, #3
   155d0:	f000 80fa 	beq.w	157c8 <ull_conn_llcp+0x15a8>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   155d4:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   155d8:	e431      	b.n	14e3e <ull_conn_llcp+0xc1e>
		if (conn->llcp_phy.tx & PHY_2M) {
   155da:	071f      	lsls	r7, r3, #28
		conn->llcp_phy.ack = conn->llcp_phy.req;
   155dc:	f884 21bd 	strb.w	r2, [r4, #445]	; 0x1bd
		if (conn->llcp_phy.tx & PHY_2M) {
   155e0:	f3c3 0282 	ubfx	r2, r3, #2, #3
   155e4:	f140 8142 	bpl.w	1586c <ull_conn_llcp+0x164c>
			conn->llcp_phy.tx = PHY_2M;
   155e8:	2202      	movs	r2, #2
   155ea:	f362 0384 	bfi	r3, r2, #2, #3
   155ee:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
		if (conn->llcp_phy.rx & PHY_2M) {
   155f2:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   155f6:	065f      	lsls	r7, r3, #25
   155f8:	ea4f 1253 	mov.w	r2, r3, lsr #5
   155fc:	f140 812e 	bpl.w	1585c <ull_conn_llcp+0x163c>
			conn->llcp_phy.rx = PHY_2M;
   15600:	2202      	movs	r2, #2
   15602:	f362 1347 	bfi	r3, r2, #5, #3
   15606:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
   1560a:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   1560e:	f894 c060 	ldrb.w	ip, [r4, #96]	; 0x60
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   15612:	f894 7061 	ldrb.w	r7, [r4, #97]	; 0x61
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   15616:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
   1561a:	f3c3 0182 	ubfx	r1, r3, #2, #3
   1561e:	f00c 0c07 	and.w	ip, ip, #7
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   15622:	f007 0707 	and.w	r7, r7, #7
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   15626:	f3c2 0280 	ubfx	r2, r2, #2, #1
			conn->llcp.phy_upd_ind.tx = 0U;
   1562a:	458c      	cmp	ip, r1
   1562c:	bf08      	it	eq
   1562e:	2100      	moveq	r1, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
   15630:	0052      	lsls	r2, r2, #1
			conn->llcp.phy_upd_ind.rx = 0U;
   15632:	ebb7 1f53 	cmp.w	r7, r3, lsr #5
		conn->llcp.phy_upd_ind.initiate = 1U;
   15636:	f042 0201 	orr.w	r2, r2, #1
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   1563a:	ea4f 1353 	mov.w	r3, r3, lsr #5
			conn->llcp.phy_upd_ind.rx = 0U;
   1563e:	bf08      	it	eq
   15640:	2300      	moveq	r3, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
   15642:	ea42 1243 	orr.w	r2, r2, r3, lsl #5
   15646:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
		conn->llcp_ack -= 2U;
   1564a:	1e83      	subs	r3, r0, #2
		conn->llcp_type = LLCP_PHY_UPD;
   1564c:	2106      	movs	r1, #6
		conn->llcp_ack -= 2U;
   1564e:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		conn->llcp.phy_upd_ind.initiate = 1U;
   15652:	f884 20e8 	strb.w	r2, [r4, #232]	; 0xe8
		conn->llcp_type = LLCP_PHY_UPD;
   15656:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   1565a:	f7fe be54 	b.w	14306 <ull_conn_llcp+0xe6>
			conn->tx_data = conn->tx_data->next;
   1565e:	6819      	ldr	r1, [r3, #0]
   15660:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   15664:	2a00      	cmp	r2, #0
   15666:	f47f ad9e 	bne.w	151a6 <ull_conn_llcp+0xf86>
			tx->next = conn->tx_head->next;
   1566a:	681a      	ldr	r2, [r3, #0]
   1566c:	603a      	str	r2, [r7, #0]
			conn->tx_head->next = tx;
   1566e:	601f      	str	r7, [r3, #0]
				conn->tx_ctrl_last = tx;
   15670:	e9c4 7772 	strd	r7, r7, [r4, #456]	; 0x1c8
   15674:	e59e      	b.n	151b4 <ull_conn_llcp+0xf94>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   15676:	791a      	ldrb	r2, [r3, #4]
   15678:	f002 0203 	and.w	r2, r2, #3
   1567c:	2a03      	cmp	r2, #3
   1567e:	f000 80d4 	beq.w	1582a <ull_conn_llcp+0x160a>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   15682:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   15686:	e452      	b.n	14f2e <ull_conn_llcp+0xd0e>
			conn->tx_data = conn->tx_data->next;
   15688:	6811      	ldr	r1, [r2, #0]
   1568a:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1568e:	2b00      	cmp	r3, #0
   15690:	f47f a898 	bne.w	147c4 <ull_conn_llcp+0x5a4>
			tx->next = conn->tx_head->next;
   15694:	6813      	ldr	r3, [r2, #0]
   15696:	603b      	str	r3, [r7, #0]
			conn->tx_head->next = tx;
   15698:	6017      	str	r7, [r2, #0]
				conn->tx_ctrl_last = tx;
   1569a:	e9c4 7772 	strd	r7, r7, [r4, #456]	; 0x1c8
   1569e:	f7ff b898 	b.w	147d2 <ull_conn_llcp+0x5b2>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   156a2:	487a      	ldr	r0, [pc, #488]	; (1588c <ull_conn_llcp+0x166c>)
   156a4:	f7f7 fad2 	bl	cc4c <mem_acquire>
		if (!tx) {
   156a8:	4601      	mov	r1, r0
   156aa:	2800      	cmp	r0, #0
   156ac:	f43f aa64 	beq.w	14b78 <ull_conn_llcp+0x958>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   156b0:	7903      	ldrb	r3, [r0, #4]
   156b2:	f043 0303 	orr.w	r3, r3, #3
   156b6:	710b      	strb	r3, [r1, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   156b8:	2011      	movs	r0, #17
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   156ba:	2203      	movs	r2, #3
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   156bc:	230f      	movs	r3, #15
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   156be:	71c8      	strb	r0, [r1, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   156c0:	714a      	strb	r2, [r1, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   156c2:	720b      	strb	r3, [r1, #8]
		rej->error_code = conn->llcp_conn_param.status;
   156c4:	f894 3187 	ldrb.w	r3, [r4, #391]	; 0x187
   156c8:	724b      	strb	r3, [r1, #9]
	ctrl_tx_pause_enqueue(conn, tx, false);
   156ca:	4620      	mov	r0, r4
   156cc:	2200      	movs	r2, #0
   156ce:	f7fc f983 	bl	119d8 <ctrl_tx_pause_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   156d2:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   156d6:	f884 3185 	strb.w	r3, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
   156da:	2300      	movs	r3, #0
   156dc:	603b      	str	r3, [r7, #0]
		return;
   156de:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
   156e2:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   156e6:	f7fe bda6 	b.w	14236 <ull_conn_llcp+0x16>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   156ea:	4868      	ldr	r0, [pc, #416]	; (1588c <ull_conn_llcp+0x166c>)
   156ec:	f7f7 faae 	bl	cc4c <mem_acquire>
	if (!tx) {
   156f0:	4601      	mov	r1, r0
   156f2:	2800      	cmp	r0, #0
   156f4:	f43f aa40 	beq.w	14b78 <ull_conn_llcp+0x958>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   156f8:	7903      	ldrb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
   156fa:	2218      	movs	r2, #24
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   156fc:	f043 0303 	orr.w	r3, r3, #3
   15700:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
   15702:	7142      	strb	r2, [r0, #5]
	rsp->interval_min =
   15704:	f8b4 2188 	ldrh.w	r2, [r4, #392]	; 0x188
	rsp->interval_max =
   15708:	f8b4 318a 	ldrh.w	r3, [r4, #394]	; 0x18a
	rsp->latency =
   1570c:	f8b4 018c 	ldrh.w	r0, [r4, #396]	; 0x18c
	rsp->interval_min =
   15710:	810a      	strh	r2, [r1, #8]
	rsp->timeout =
   15712:	f8b4 218e 	ldrh.w	r2, [r4, #398]	; 0x18e
	rsp->interval_max =
   15716:	814b      	strh	r3, [r1, #10]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
   15718:	2310      	movs	r3, #16
	rsp->latency =
   1571a:	8188      	strh	r0, [r1, #12]
	rsp->timeout =
   1571c:	81ca      	strh	r2, [r1, #14]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
   1571e:	71cb      	strb	r3, [r1, #7]
	rsp->preferred_periodicity =
   15720:	f894 3190 	ldrb.w	r3, [r4, #400]	; 0x190
   15724:	740b      	strb	r3, [r1, #16]
	rsp->reference_conn_event_count =
   15726:	f8b4 3192 	ldrh.w	r3, [r4, #402]	; 0x192
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
   1572a:	f8b4 0194 	ldrh.w	r0, [r4, #404]	; 0x194
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
   1572e:	f8b4 2196 	ldrh.w	r2, [r4, #406]	; 0x196
	rsp->reference_conn_event_count =
   15732:	f8a1 3011 	strh.w	r3, [r1, #17]
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
   15736:	f8b4 3198 	ldrh.w	r3, [r4, #408]	; 0x198
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
   1573a:	f8a1 0013 	strh.w	r0, [r1, #19]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
   1573e:	f8b4 019a 	ldrh.w	r0, [r4, #410]	; 0x19a
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
   15742:	f8a1 2015 	strh.w	r2, [r1, #21]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
   15746:	f8b4 219c 	ldrh.w	r2, [r4, #412]	; 0x19c
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
   1574a:	f8a1 3017 	strh.w	r3, [r1, #23]
	rsp->offset5 = sys_cpu_to_le16(conn->llcp_conn_param.offset5);
   1574e:	f8b4 319e 	ldrh.w	r3, [r4, #414]	; 0x19e
   15752:	f8a1 301d 	strh.w	r3, [r1, #29]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
   15756:	f8a1 0019 	strh.w	r0, [r1, #25]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
   1575a:	f8a1 201b 	strh.w	r2, [r1, #27]
	ctrl_tx_pause_enqueue(conn, tx, false);
   1575e:	4620      	mov	r0, r4
   15760:	4642      	mov	r2, r8
   15762:	f7fc f939 	bl	119d8 <ctrl_tx_pause_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   15766:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   1576a:	f884 3185 	strb.w	r3, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
   1576e:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
   15772:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   15776:	f8c7 8000 	str.w	r8, [r7]
}
   1577a:	f7fe bd5c 	b.w	14236 <ull_conn_llcp+0x16>
			conn->tx_data = conn->tx_data->next;
   1577e:	6819      	ldr	r1, [r3, #0]
   15780:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   15784:	2a00      	cmp	r2, #0
   15786:	f47f a9e8 	bne.w	14b5a <ull_conn_llcp+0x93a>
			tx->next = conn->tx_head->next;
   1578a:	681a      	ldr	r2, [r3, #0]
   1578c:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   1578e:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
   15790:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   15794:	f7ff b9e8 	b.w	14b68 <ull_conn_llcp+0x948>
	    ((pdu_data_tx->llctrl.opcode !=
   15798:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1579a:	2a03      	cmp	r2, #3
   1579c:	f43f ae70 	beq.w	15480 <ull_conn_llcp+0x1260>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   157a0:	2a0a      	cmp	r2, #10
   157a2:	f47f aeb4 	bne.w	1550e <ull_conn_llcp+0x12ee>
   157a6:	e66b      	b.n	15480 <ull_conn_llcp+0x1260>
				conn->llcp_length.cache.tx_octets = 0;
   157a8:	2200      	movs	r2, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   157aa:	4663      	mov	r3, ip
   157ac:	f362 0302 	bfi	r3, r2, #0, #3
				conn->llcp_length.tx_octets =
   157b0:	f8a4 11b2 	strh.w	r1, [r4, #434]	; 0x1b2
				conn->llcp_length.tx_time =
   157b4:	f8b4 11ba 	ldrh.w	r1, [r4, #442]	; 0x1ba
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   157b8:	f884 31ae 	strb.w	r3, [r4, #430]	; 0x1ae
				conn->llcp_length.cache.tx_octets = 0;
   157bc:	f8a4 21b8 	strh.w	r2, [r4, #440]	; 0x1b8
				conn->llcp_length.tx_time =
   157c0:	f8a4 11b6 	strh.w	r1, [r4, #438]	; 0x1b6
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   157c4:	f7ff bbf9 	b.w	14fba <ull_conn_llcp+0xd9a>
	    ((pdu_data_tx->llctrl.opcode !=
   157c8:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   157ca:	2a03      	cmp	r2, #3
   157cc:	f43f aecb 	beq.w	15566 <ull_conn_llcp+0x1346>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   157d0:	2a0a      	cmp	r2, #10
   157d2:	f47f aeff 	bne.w	155d4 <ull_conn_llcp+0x13b4>
   157d6:	e6c6      	b.n	15566 <ull_conn_llcp+0x1346>
	    ((pdu_data_tx->llctrl.opcode !=
   157d8:	f89c 3007 	ldrb.w	r3, [ip, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   157dc:	2b03      	cmp	r3, #3
   157de:	f43f ae85 	beq.w	154ec <ull_conn_llcp+0x12cc>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   157e2:	2b0a      	cmp	r3, #10
   157e4:	f47f aea5 	bne.w	15532 <ull_conn_llcp+0x1312>
   157e8:	e680      	b.n	154ec <ull_conn_llcp+0x12cc>
	    ((pdu_data_tx->llctrl.opcode !=
   157ea:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   157ec:	2a03      	cmp	r2, #3
   157ee:	f43f ae5f 	beq.w	154b0 <ull_conn_llcp+0x1290>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   157f2:	2a0a      	cmp	r2, #10
   157f4:	f47f aed2 	bne.w	1559c <ull_conn_llcp+0x137c>
   157f8:	e65a      	b.n	154b0 <ull_conn_llcp+0x1290>
				conn->llcp_conn_param.interval_max;
   157fa:	f8b4 318a 	ldrh.w	r3, [r4, #394]	; 0x18a
   157fe:	f7ff ba45 	b.w	14c8c <ull_conn_llcp+0xa6c>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   15802:	791a      	ldrb	r2, [r3, #4]
   15804:	f002 0203 	and.w	r2, r2, #3
   15808:	2a03      	cmp	r2, #3
   1580a:	d048      	beq.n	1589e <ull_conn_llcp+0x167e>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1580c:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   15810:	e4c9      	b.n	151a6 <ull_conn_llcp+0xf86>
			conn->tx_data = conn->tx_data->next;
   15812:	6811      	ldr	r1, [r2, #0]
   15814:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   15818:	2b00      	cmp	r3, #0
   1581a:	f47f adb2 	bne.w	15382 <ull_conn_llcp+0x1162>
			tx->next = conn->tx_head->next;
   1581e:	6813      	ldr	r3, [r2, #0]
   15820:	603b      	str	r3, [r7, #0]
			conn->tx_head->next = tx;
   15822:	6017      	str	r7, [r2, #0]
				conn->tx_ctrl_last = tx;
   15824:	e9c4 7772 	strd	r7, r7, [r4, #456]	; 0x1c8
   15828:	e5b2      	b.n	15390 <ull_conn_llcp+0x1170>
	    ((pdu_data_tx->llctrl.opcode !=
   1582a:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1582c:	2a03      	cmp	r2, #3
   1582e:	f43f aea8 	beq.w	15582 <ull_conn_llcp+0x1362>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   15832:	2a0a      	cmp	r2, #10
   15834:	f47f af25 	bne.w	15682 <ull_conn_llcp+0x1462>
   15838:	e6a3      	b.n	15582 <ull_conn_llcp+0x1362>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1583a:	7913      	ldrb	r3, [r2, #4]
   1583c:	f003 0303 	and.w	r3, r3, #3
   15840:	2b03      	cmp	r3, #3
   15842:	d03c      	beq.n	158be <ull_conn_llcp+0x169e>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   15844:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
   15848:	e59b      	b.n	15382 <ull_conn_llcp+0x1162>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1584a:	7913      	ldrb	r3, [r2, #4]
   1584c:	f003 0303 	and.w	r3, r3, #3
   15850:	2b03      	cmp	r3, #3
   15852:	d01d      	beq.n	15890 <ull_conn_llcp+0x1670>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   15854:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
   15858:	f7fe bfb4 	b.w	147c4 <ull_conn_llcp+0x5a4>
		} else if (conn->llcp_phy.rx & PHY_1M) {
   1585c:	07d1      	lsls	r1, r2, #31
   1585e:	d549      	bpl.n	158f4 <ull_conn_llcp+0x16d4>
			conn->llcp_phy.rx = PHY_1M;
   15860:	2201      	movs	r2, #1
   15862:	f362 1347 	bfi	r3, r2, #5, #3
   15866:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
   1586a:	e6ce      	b.n	1560a <ull_conn_llcp+0x13ea>
		} else if (conn->llcp_phy.tx & PHY_1M) {
   1586c:	07d1      	lsls	r1, r2, #31
			conn->llcp_phy.tx = PHY_1M;
   1586e:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
		} else if (conn->llcp_phy.tx & PHY_1M) {
   15872:	d548      	bpl.n	15906 <ull_conn_llcp+0x16e6>
			conn->llcp_phy.tx = PHY_1M;
   15874:	2201      	movs	r2, #1
   15876:	f362 0384 	bfi	r3, r2, #2, #3
   1587a:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
   1587e:	e6b8      	b.n	155f2 <ull_conn_llcp+0x13d2>
   15880:	00024874 	.word	0x00024874
   15884:	00024940 	.word	0x00024940
   15888:	00024334 	.word	0x00024334
   1588c:	200020f8 	.word	0x200020f8
	    ((pdu_data_tx->llctrl.opcode !=
   15890:	79d3      	ldrb	r3, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   15892:	2b03      	cmp	r3, #3
   15894:	f43f aefe 	beq.w	15694 <ull_conn_llcp+0x1474>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   15898:	2b0a      	cmp	r3, #10
   1589a:	d1db      	bne.n	15854 <ull_conn_llcp+0x1634>
   1589c:	e6fa      	b.n	15694 <ull_conn_llcp+0x1474>
	    ((pdu_data_tx->llctrl.opcode !=
   1589e:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   158a0:	2a03      	cmp	r2, #3
   158a2:	f43f aee2 	beq.w	1566a <ull_conn_llcp+0x144a>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   158a6:	2a0a      	cmp	r2, #10
   158a8:	d1b0      	bne.n	1580c <ull_conn_llcp+0x15ec>
   158aa:	e6de      	b.n	1566a <ull_conn_llcp+0x144a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   158ac:	790b      	ldrb	r3, [r1, #4]
   158ae:	f003 0303 	and.w	r3, r3, #3
   158b2:	2b03      	cmp	r3, #3
   158b4:	d030      	beq.n	15918 <ull_conn_llcp+0x16f8>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   158b6:	e9c4 1172 	strd	r1, r1, [r4, #456]	; 0x1c8
   158ba:	f7ff b94e 	b.w	14b5a <ull_conn_llcp+0x93a>
	    ((pdu_data_tx->llctrl.opcode !=
   158be:	79d3      	ldrb	r3, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   158c0:	2b03      	cmp	r3, #3
   158c2:	d0ac      	beq.n	1581e <ull_conn_llcp+0x15fe>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   158c4:	2b0a      	cmp	r3, #10
   158c6:	d1bd      	bne.n	15844 <ull_conn_llcp+0x1624>
   158c8:	e7a9      	b.n	1581e <ull_conn_llcp+0x15fe>
	    ((pdu_data_tx->llctrl.opcode !=
   158ca:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   158cc:	2a03      	cmp	r2, #3
   158ce:	f43f af5c 	beq.w	1578a <ull_conn_llcp+0x156a>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   158d2:	2a0a      	cmp	r2, #10
   158d4:	f47f acc7 	bne.w	15266 <ull_conn_llcp+0x1046>
   158d8:	e757      	b.n	1578a <ull_conn_llcp+0x156a>
			conn->tx_data = conn->tx_data->next;
   158da:	680a      	ldr	r2, [r1, #0]
   158dc:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   158e0:	2b00      	cmp	r3, #0
   158e2:	f47f a93a 	bne.w	14b5a <ull_conn_llcp+0x93a>
			tx->next = conn->tx_head->next;
   158e6:	680b      	ldr	r3, [r1, #0]
   158e8:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   158ea:	6008      	str	r0, [r1, #0]
				conn->tx_ctrl_last = tx;
   158ec:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   158f0:	f7ff b93a 	b.w	14b68 <ull_conn_llcp+0x948>
		} else if (conn->llcp_phy.rx & PHY_CODED) {
   158f4:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.rx = PHY_CODED;
   158f8:	bf18      	it	ne
   158fa:	2204      	movne	r2, #4
			conn->llcp_phy.rx = 0U;
   158fc:	f362 1347 	bfi	r3, r2, #5, #3
   15900:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
   15904:	e681      	b.n	1560a <ull_conn_llcp+0x13ea>
		} else if (conn->llcp_phy.tx & PHY_CODED) {
   15906:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.tx = PHY_CODED;
   1590a:	bf18      	it	ne
   1590c:	2204      	movne	r2, #4
			conn->llcp_phy.tx = 0U;
   1590e:	f362 0384 	bfi	r3, r2, #2, #3
   15912:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
   15916:	e66c      	b.n	155f2 <ull_conn_llcp+0x13d2>
	    ((pdu_data_tx->llctrl.opcode !=
   15918:	79cb      	ldrb	r3, [r1, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1591a:	2b03      	cmp	r3, #3
   1591c:	d0e3      	beq.n	158e6 <ull_conn_llcp+0x16c6>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1591e:	2b0a      	cmp	r3, #10
   15920:	d1c9      	bne.n	158b6 <ull_conn_llcp+0x1696>
   15922:	e7e0      	b.n	158e6 <ull_conn_llcp+0x16c6>
		LL_ASSERT(0);
   15924:	f640 6385 	movw	r3, #3717	; 0xe85
   15928:	e4a2      	b.n	15270 <ull_conn_llcp+0x1050>
		LL_ASSERT(0);
   1592a:	4a11      	ldr	r2, [pc, #68]	; (15970 <ull_conn_llcp+0x1750>)
   1592c:	4911      	ldr	r1, [pc, #68]	; (15974 <ull_conn_llcp+0x1754>)
   1592e:	4812      	ldr	r0, [pc, #72]	; (15978 <ull_conn_llcp+0x1758>)
   15930:	f640 5389 	movw	r3, #3465	; 0xd89
   15934:	f008 fd26 	bl	1e384 <printk>
   15938:	4040      	eors	r0, r0
   1593a:	f380 8811 	msr	BASEPRI, r0
   1593e:	f04f 0003 	mov.w	r0, #3
   15942:	df02      	svc	2
		break;
   15944:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   15948:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
   1594c:	f7fe bc73 	b.w	14236 <ull_conn_llcp+0x16>
		LL_ASSERT(0);
   15950:	4a07      	ldr	r2, [pc, #28]	; (15970 <ull_conn_llcp+0x1750>)
   15952:	4908      	ldr	r1, [pc, #32]	; (15974 <ull_conn_llcp+0x1754>)
   15954:	4808      	ldr	r0, [pc, #32]	; (15978 <ull_conn_llcp+0x1758>)
   15956:	f640 6385 	movw	r3, #3717	; 0xe85
   1595a:	f008 fd13 	bl	1e384 <printk>
   1595e:	4040      	eors	r0, r0
   15960:	f380 8811 	msr	BASEPRI, r0
   15964:	f04f 0003 	mov.w	r0, #3
   15968:	df02      	svc	2
		break;
   1596a:	f7fe bccc 	b.w	14306 <ull_conn_llcp+0xe6>
   1596e:	bf00      	nop
   15970:	00024874 	.word	0x00024874
   15974:	000243a4 	.word	0x000243a4
   15978:	00024334 	.word	0x00024334

0001597c <ull_conn_tx_demux>:
{
   1597c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15980:	4f24      	ldr	r7, [pc, #144]	; (15a14 <ull_conn_tx_demux+0x98>)
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15982:	4e25      	ldr	r6, [pc, #148]	; (15a18 <ull_conn_tx_demux+0x9c>)
   15984:	78fa      	ldrb	r2, [r7, #3]
{
   15986:	4604      	mov	r4, r0
	return (void *)(fifo + first * size);
   15988:	1d3d      	adds	r5, r7, #4
   1598a:	e021      	b.n	159d0 <ull_conn_tx_demux+0x54>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1598c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   15990:	4630      	mov	r0, r6
   15992:	f7f7 f98b 	bl	ccac <mem_get>
	if (conn->lll.handle != handle) {
   15996:	8d02      	ldrh	r2, [r0, #40]	; 0x28
   15998:	bb32      	cbnz	r2, 159e8 <ull_conn_tx_demux+0x6c>
			struct node_tx *tx = lll_tx->node;
   1599a:	f8d8 3004 	ldr.w	r3, [r8, #4]
			if (!conn->tx_data) {
   1599e:	f8d0 11d0 	ldr.w	r1, [r0, #464]	; 0x1d0
			tx->next = NULL;
   159a2:	601a      	str	r2, [r3, #0]
			if (!conn->tx_data) {
   159a4:	b369      	cbz	r1, 15a02 <ull_conn_tx_demux+0x86>
			if (conn->tx_data_last) {
   159a6:	f8d0 21d4 	ldr.w	r2, [r0, #468]	; 0x1d4
   159aa:	b102      	cbz	r2, 159ae <ull_conn_tx_demux+0x32>
				conn->tx_data_last->next = tx;
   159ac:	6013      	str	r3, [r2, #0]
			conn->tx_data_last = tx;
   159ae:	f8c0 31d4 	str.w	r3, [r0, #468]	; 0x1d4
		MFIFO_DEQUEUE(conn_tx);
   159b2:	78fa      	ldrb	r2, [r7, #3]
	uint8_t _first = *first; /* Copy read-index */
   159b4:	78bb      	ldrb	r3, [r7, #2]
   159b6:	7879      	ldrb	r1, [r7, #1]
	if (_first == last) {
   159b8:	429a      	cmp	r2, r3
   159ba:	d005      	beq.n	159c8 <ull_conn_tx_demux+0x4c>
	_first += 1U;
   159bc:	3301      	adds	r3, #1
   159be:	b2db      	uxtb	r3, r3
		_first = 0U;
   159c0:	4299      	cmp	r1, r3
   159c2:	bf08      	it	eq
   159c4:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   159c6:	70bb      	strb	r3, [r7, #2]
	} while (--count);
   159c8:	3c01      	subs	r4, #1
   159ca:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   159ce:	d016      	beq.n	159fe <ull_conn_tx_demux+0x82>
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   159d0:	78bb      	ldrb	r3, [r7, #2]
   159d2:	7839      	ldrb	r1, [r7, #0]
	if (first == last) {
   159d4:	4293      	cmp	r3, r2
   159d6:	d012      	beq.n	159fe <ull_conn_tx_demux+0x82>
	return (void *)(fifo + first * size);
   159d8:	fb13 f301 	smulbb	r3, r3, r1
		if (!lll_tx) {
   159dc:	eb15 0803 	adds.w	r8, r5, r3
   159e0:	d00d      	beq.n	159fe <ull_conn_tx_demux+0x82>
	if (handle >= CONFIG_BT_MAX_CONN) {
   159e2:	5aea      	ldrh	r2, [r5, r3]
   159e4:	2a00      	cmp	r2, #0
   159e6:	d0d1      	beq.n	1598c <ull_conn_tx_demux+0x10>
			struct node_tx *tx = lll_tx->node;
   159e8:	f8d8 1004 	ldr.w	r1, [r8, #4]
			p->ll_id = PDU_DATA_LLID_RESV;
   159ec:	790b      	ldrb	r3, [r1, #4]
   159ee:	f36f 0301 	bfc	r3, #0, #2
   159f2:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(0xFFFF, tx);
   159f4:	f64f 70ff 	movw	r0, #65535	; 0xffff
   159f8:	f7fb f884 	bl	10b04 <ll_tx_ack_put>
   159fc:	e7d9      	b.n	159b2 <ull_conn_tx_demux+0x36>
}
   159fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (!conn->tx_head) {
   15a02:	f8d0 21c4 	ldr.w	r2, [r0, #452]	; 0x1c4
				conn->tx_data = tx;
   15a06:	f8c0 31d0 	str.w	r3, [r0, #464]	; 0x1d0
				if (!conn->tx_head) {
   15a0a:	2a00      	cmp	r2, #0
   15a0c:	d1cb      	bne.n	159a6 <ull_conn_tx_demux+0x2a>
					conn->tx_head = tx;
   15a0e:	f8c0 31c4 	str.w	r3, [r0, #452]	; 0x1c4
			if (conn->tx_data_last) {
   15a12:	e7cc      	b.n	159ae <ull_conn_tx_demux+0x32>
   15a14:	200004bc 	.word	0x200004bc
   15a18:	20001078 	.word	0x20001078

00015a1c <conn_cleanup>:
	if (conn == conn_upd_curr) {
   15a1c:	4b3b      	ldr	r3, [pc, #236]	; (15b0c <conn_cleanup+0xf0>)
{
   15a1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (conn == conn_upd_curr) {
   15a22:	681a      	ldr	r2, [r3, #0]
	rx = conn->llcp_rx;
   15a24:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
	*((uint8_t *)rx->pdu) = reason;
   15a28:	f880 1160 	strb.w	r1, [r0, #352]	; 0x160
	if (conn == conn_upd_curr) {
   15a2c:	4282      	cmp	r2, r0
	conn_upd_curr = NULL;
   15a2e:	bf04      	itt	eq
   15a30:	2200      	moveq	r2, #0
   15a32:	601a      	streq	r2, [r3, #0]
	rx->hdr.handle = conn->lll.handle;
   15a34:	8d02      	ldrh	r2, [r0, #40]	; 0x28
   15a36:	f8a0 214a 	strh.w	r2, [r0, #330]	; 0x14a
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   15a3a:	2315      	movs	r3, #21
{
   15a3c:	b083      	sub	sp, #12
   15a3e:	4606      	mov	r6, r0
	struct lll_conn *lll = &conn->lll;
   15a40:	f100 0b1c 	add.w	fp, r0, #28
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   15a44:	f880 3148 	strb.w	r3, [r0, #328]	; 0x148
	while (rx) {
   15a48:	b144      	cbz	r4, 15a5c <conn_cleanup+0x40>
		hdr->type = NODE_RX_TYPE_RELEASE;
   15a4a:	2501      	movs	r5, #1
		rx = hdr->link->mem;
   15a4c:	6820      	ldr	r0, [r4, #0]
		hdr = &rx->hdr;
   15a4e:	4621      	mov	r1, r4
		rx = hdr->link->mem;
   15a50:	6844      	ldr	r4, [r0, #4]
		hdr->type = NODE_RX_TYPE_RELEASE;
   15a52:	710d      	strb	r5, [r1, #4]
		ll_rx_put(hdr->link, hdr);
   15a54:	f7fb f810 	bl	10a78 <ll_rx_put>
	while (rx) {
   15a58:	2c00      	cmp	r4, #0
   15a5a:	d1f7      	bne.n	15a4c <conn_cleanup+0x30>
	while (conn->tx_head) {
   15a5c:	f8d6 11c4 	ldr.w	r1, [r6, #452]	; 0x1c4
   15a60:	b381      	cbz	r1, 15ac4 <conn_cleanup+0xa8>
		link = mem_acquire(&mem_link_tx.free);
   15a62:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 15b20 <conn_cleanup+0x104>
		LL_ASSERT(link);
   15a66:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 15b18 <conn_cleanup+0xfc>
   15a6a:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 15b24 <conn_cleanup+0x108>
   15a6e:	f106 0768 	add.w	r7, r6, #104	; 0x68
   15a72:	e007      	b.n	15a84 <conn_cleanup+0x68>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   15a74:	4629      	mov	r1, r5
   15a76:	4620      	mov	r0, r4
   15a78:	463a      	mov	r2, r7
   15a7a:	f7f7 f949 	bl	cd10 <memq_enqueue>
	while (conn->tx_head) {
   15a7e:	f8d6 11c4 	ldr.w	r1, [r6, #452]	; 0x1c4
   15a82:	b1f9      	cbz	r1, 15ac4 <conn_cleanup+0xa8>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   15a84:	4630      	mov	r0, r6
   15a86:	f7fb ff2b 	bl	118e0 <tx_ull_dequeue>
   15a8a:	4605      	mov	r5, r0
		link = mem_acquire(&mem_link_tx.free);
   15a8c:	4640      	mov	r0, r8
   15a8e:	f7f7 f8dd 	bl	cc4c <mem_acquire>
		LL_ASSERT(link);
   15a92:	4604      	mov	r4, r0
   15a94:	2800      	cmp	r0, #0
   15a96:	d1ed      	bne.n	15a74 <conn_cleanup+0x58>
   15a98:	481d      	ldr	r0, [pc, #116]	; (15b10 <conn_cleanup+0xf4>)
   15a9a:	f240 739a 	movw	r3, #1946	; 0x79a
   15a9e:	4652      	mov	r2, sl
   15aa0:	4649      	mov	r1, r9
   15aa2:	f008 fc6f 	bl	1e384 <printk>
   15aa6:	4040      	eors	r0, r0
   15aa8:	f380 8811 	msr	BASEPRI, r0
   15aac:	f04f 0003 	mov.w	r0, #3
   15ab0:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   15ab2:	4629      	mov	r1, r5
   15ab4:	4620      	mov	r0, r4
   15ab6:	463a      	mov	r2, r7
   15ab8:	f7f7 f92a 	bl	cd10 <memq_enqueue>
	while (conn->tx_head) {
   15abc:	f8d6 11c4 	ldr.w	r1, [r6, #452]	; 0x1c4
   15ac0:	2900      	cmp	r1, #0
   15ac2:	d1df      	bne.n	15a84 <conn_cleanup+0x68>
				    TICKER_ID_CONN_BASE + lll->handle,
   15ac4:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   15ac8:	4b12      	ldr	r3, [pc, #72]	; (15b14 <conn_cleanup+0xf8>)
   15aca:	f8cd b000 	str.w	fp, [sp]
				    TICKER_ID_CONN_BASE + lll->handle,
   15ace:	3203      	adds	r2, #3
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   15ad0:	b2d2      	uxtb	r2, r2
   15ad2:	2101      	movs	r1, #1
   15ad4:	2000      	movs	r0, #0
   15ad6:	f7f8 fc95 	bl	e404 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   15ada:	f030 0302 	bics.w	r3, r0, #2
   15ade:	d00c      	beq.n	15afa <conn_cleanup+0xde>
   15ae0:	4a0d      	ldr	r2, [pc, #52]	; (15b18 <conn_cleanup+0xfc>)
   15ae2:	490e      	ldr	r1, [pc, #56]	; (15b1c <conn_cleanup+0x100>)
   15ae4:	480a      	ldr	r0, [pc, #40]	; (15b10 <conn_cleanup+0xf4>)
   15ae6:	f44f 63ec 	mov.w	r3, #1888	; 0x760
   15aea:	f008 fc4b 	bl	1e384 <printk>
   15aee:	4040      	eors	r0, r0
   15af0:	f380 8811 	msr	BASEPRI, r0
   15af4:	f04f 0003 	mov.w	r0, #3
   15af8:	df02      	svc	2
	lll->handle = 0xFFFF;
   15afa:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
   15afe:	20ff      	movs	r0, #255	; 0xff
	lll->handle = 0xFFFF;
   15b00:	8533      	strh	r3, [r6, #40]	; 0x28
}
   15b02:	b003      	add	sp, #12
   15b04:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ull_conn_tx_demux(UINT8_MAX);
   15b08:	f7ff bf38 	b.w	1597c <ull_conn_tx_demux>
   15b0c:	20002074 	.word	0x20002074
   15b10:	00024334 	.word	0x00024334
   15b14:	00011b99 	.word	0x00011b99
   15b18:	00024874 	.word	0x00024874
   15b1c:	00024954 	.word	0x00024954
   15b20:	200021ac 	.word	0x200021ac
   15b24:	000248cc 	.word	0x000248cc

00015b28 <ull_conn_done>:
{
   15b28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct lll_conn *lll = (void *)HDR_ULL2LLL(done->param);
   15b2c:	69c5      	ldr	r5, [r0, #28]
	if (unlikely(lll->handle == 0xFFFF)) {
   15b2e:	8b2a      	ldrh	r2, [r5, #24]
	struct ll_conn *conn = (void *)HDR_LLL2EVT(lll);
   15b30:	68ec      	ldr	r4, [r5, #12]
	if (unlikely(lll->handle == 0xFFFF)) {
   15b32:	f64f 73ff 	movw	r3, #65535	; 0xffff
   15b36:	429a      	cmp	r2, r3
{
   15b38:	b08b      	sub	sp, #44	; 0x2c
	if (unlikely(lll->handle == 0xFFFF)) {
   15b3a:	f000 8092 	beq.w	15c62 <ull_conn_done+0x13a>
	switch (done->extra.mic_state) {
   15b3e:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   15b42:	2b01      	cmp	r3, #1
   15b44:	4606      	mov	r6, r0
   15b46:	f000 80dd 	beq.w	15d04 <ull_conn_done+0x1dc>
   15b4a:	2b02      	cmp	r3, #2
   15b4c:	f000 80d0 	beq.w	15cf0 <ull_conn_done+0x1c8>
   15b50:	2b00      	cmp	r3, #0
   15b52:	f000 80b3 	beq.w	15cbc <ull_conn_done+0x194>
	reason_peer = conn->llcp_terminate.reason_peer;
   15b56:	f894 7143 	ldrb.w	r7, [r4, #323]	; 0x143
	if (reason_peer && (
   15b5a:	2f00      	cmp	r7, #0
   15b5c:	f040 80cb 	bne.w	15cf6 <ull_conn_done+0x1ce>
	latency_event = lll->latency_event;
   15b60:	f8b5 9020 	ldrh.w	r9, [r5, #32]
	if (done->extra.trx_cnt) {
   15b64:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
	ticks_drift_plus = 0U;
   15b66:	9709      	str	r7, [sp, #36]	; 0x24
	elapsed_event = latency_event + 1;
   15b68:	f109 0801 	add.w	r8, r9, #1
	ticks_drift_minus = 0U;
   15b6c:	9708      	str	r7, [sp, #32]
	elapsed_event = latency_event + 1;
   15b6e:	fa1f f888 	uxth.w	r8, r8
	if (done->extra.trx_cnt) {
   15b72:	2b00      	cmp	r3, #0
   15b74:	d078      	beq.n	15c68 <ull_conn_done+0x140>
		} else if (lll->role) {
   15b76:	f995 3029 	ldrsb.w	r3, [r5, #41]	; 0x29
   15b7a:	2b00      	cmp	r3, #0
   15b7c:	f2c0 8108 	blt.w	15d90 <ull_conn_done+0x268>
	if (done->extra.crc_valid) {
   15b80:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
		conn->connect_expire = 0U;
   15b84:	2200      	movs	r2, #0
   15b86:	f8a4 20c0 	strh.w	r2, [r4, #192]	; 0xc0
	if (done->extra.crc_valid) {
   15b8a:	2b00      	cmp	r3, #0
   15b8c:	f000 80c0 	beq.w	15d10 <ull_conn_done+0x1e8>
		conn->supervision_expire = 0U;
   15b90:	2300      	movs	r3, #0
   15b92:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
	if (conn->procedure_expire != 0U) {
   15b96:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   15b9a:	b133      	cbz	r3, 15baa <ull_conn_done+0x82>
		if (conn->procedure_expire > elapsed_event) {
   15b9c:	4543      	cmp	r3, r8
   15b9e:	f240 810d 	bls.w	15dbc <ull_conn_done+0x294>
			conn->procedure_expire -= elapsed_event;
   15ba2:	eba3 0308 	sub.w	r3, r3, r8
   15ba6:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	if (conn->apto_expire != 0U) {
   15baa:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
   15bae:	b133      	cbz	r3, 15bbe <ull_conn_done+0x96>
		if (conn->apto_expire > elapsed_event) {
   15bb0:	4543      	cmp	r3, r8
   15bb2:	f240 80d5 	bls.w	15d60 <ull_conn_done+0x238>
			conn->apto_expire -= elapsed_event;
   15bb6:	eba3 0308 	sub.w	r3, r3, r8
   15bba:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
	if (conn->appto_expire != 0U) {
   15bbe:	f8b4 20cc 	ldrh.w	r2, [r4, #204]	; 0xcc
   15bc2:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   15bc6:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
   15bca:	b15a      	cbz	r2, 15be4 <ull_conn_done+0xbc>
		if (conn->appto_expire > elapsed_event) {
   15bcc:	4542      	cmp	r2, r8
   15bce:	f200 80ab 	bhi.w	15d28 <ull_conn_done+0x200>
			if ((conn->procedure_expire == 0U) &&
   15bd2:	f8b4 20c8 	ldrh.w	r2, [r4, #200]	; 0xc8
			conn->appto_expire = 0U;
   15bd6:	2000      	movs	r0, #0
   15bd8:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
			if ((conn->procedure_expire == 0U) &&
   15bdc:	b912      	cbnz	r2, 15be4 <ull_conn_done+0xbc>
   15bde:	4299      	cmp	r1, r3
   15be0:	f000 8103 	beq.w	15dea <ull_conn_done+0x2c2>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   15be4:	1a5b      	subs	r3, r3, r1
   15be6:	f003 0303 	and.w	r3, r3, #3
   15bea:	2b02      	cmp	r3, #2
   15bec:	f000 80a6 	beq.w	15d3c <ull_conn_done+0x214>
	      (conn->llcp_type == LLCP_CHAN_MAP))) ||
   15bf0:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
   15bf4:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
   15bf8:	429a      	cmp	r2, r3
   15bfa:	f000 80c7 	beq.w	15d8c <ull_conn_done+0x264>
		lll->latency_event = 0U;
   15bfe:	2200      	movs	r2, #0
   15c00:	842a      	strh	r2, [r5, #32]
	if ((force) || (latency_event != lll->latency_event)) {
   15c02:	e9dd 4308 	ldrd	r4, r3, [sp, #32]
   15c06:	b917      	cbnz	r7, 15c0e <ull_conn_done+0xe6>
   15c08:	454a      	cmp	r2, r9
   15c0a:	f000 80a4 	beq.w	15d56 <ull_conn_done+0x22e>
		lazy = lll->latency_event + 1U;
   15c0e:	3201      	adds	r2, #1
   15c10:	b291      	uxth	r1, r2
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   15c12:	b913      	cbnz	r3, 15c1a <ull_conn_done+0xf2>
   15c14:	2c00      	cmp	r4, #0
   15c16:	f000 8084 	beq.w	15d22 <ull_conn_done+0x1fa>
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   15c1a:	7e2a      	ldrb	r2, [r5, #24]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   15c1c:	4e83      	ldr	r6, [pc, #524]	; (15e2c <ull_conn_done+0x304>)
		struct ll_conn *conn = lll->hdr.parent;
   15c1e:	68ed      	ldr	r5, [r5, #12]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   15c20:	9506      	str	r5, [sp, #24]
   15c22:	2000      	movs	r0, #0
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   15c24:	3203      	adds	r2, #3
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   15c26:	9103      	str	r1, [sp, #12]
   15c28:	e9cd 0001 	strd	r0, r0, [sp, #4]
   15c2c:	b2d2      	uxtb	r2, r2
   15c2e:	9704      	str	r7, [sp, #16]
   15c30:	9400      	str	r4, [sp, #0]
   15c32:	9605      	str	r6, [sp, #20]
   15c34:	2101      	movs	r1, #1
   15c36:	f7f8 fbcd 	bl	e3d4 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   15c3a:	f030 0302 	bics.w	r3, r0, #2
   15c3e:	d010      	beq.n	15c62 <ull_conn_done+0x13a>
   15c40:	f7fa ffd0 	bl	10be4 <ull_disable_mark_get>
   15c44:	4285      	cmp	r5, r0
   15c46:	d00c      	beq.n	15c62 <ull_conn_done+0x13a>
   15c48:	4a79      	ldr	r2, [pc, #484]	; (15e30 <ull_conn_done+0x308>)
   15c4a:	497a      	ldr	r1, [pc, #488]	; (15e34 <ull_conn_done+0x30c>)
   15c4c:	487a      	ldr	r0, [pc, #488]	; (15e38 <ull_conn_done+0x310>)
   15c4e:	f240 53af 	movw	r3, #1455	; 0x5af
   15c52:	f008 fb97 	bl	1e384 <printk>
   15c56:	4040      	eors	r0, r0
   15c58:	f380 8811 	msr	BASEPRI, r0
   15c5c:	f04f 0003 	mov.w	r0, #3
   15c60:	df02      	svc	2
}
   15c62:	b00b      	add	sp, #44	; 0x2c
   15c64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (done->extra.crc_valid) {
   15c68:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
   15c6c:	2b00      	cmp	r3, #0
   15c6e:	d18f      	bne.n	15b90 <ull_conn_done+0x68>
	else if (conn->connect_expire) {
   15c70:	f8b4 30c0 	ldrh.w	r3, [r4, #192]	; 0xc0
   15c74:	2b00      	cmp	r3, #0
   15c76:	d04b      	beq.n	15d10 <ull_conn_done+0x1e8>
		if (conn->connect_expire > elapsed_event) {
   15c78:	4543      	cmp	r3, r8
   15c7a:	f240 80bd 	bls.w	15df8 <ull_conn_done+0x2d0>
			conn->connect_expire -= elapsed_event;
   15c7e:	eba3 0308 	sub.w	r3, r3, r8
   15c82:	f8a4 30c0 	strh.w	r3, [r4, #192]	; 0xc0
   15c86:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
	if (conn->supervision_expire) {
   15c8a:	2b00      	cmp	r3, #0
   15c8c:	d083      	beq.n	15b96 <ull_conn_done+0x6e>
		if (conn->supervision_expire > elapsed_event) {
   15c8e:	4598      	cmp	r8, r3
   15c90:	f080 808f 	bcs.w	15db2 <ull_conn_done+0x28a>
			conn->supervision_expire -= elapsed_event;
   15c94:	eba3 0308 	sub.w	r3, r3, r8
   15c98:	b29b      	uxth	r3, r3
			lll->latency_event = 0U;
   15c9a:	2200      	movs	r2, #0
			if (conn->supervision_expire <= 6U) {
   15c9c:	2b06      	cmp	r3, #6
			conn->supervision_expire -= elapsed_event;
   15c9e:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
			lll->latency_event = 0U;
   15ca2:	842a      	strh	r2, [r5, #32]
			if (conn->supervision_expire <= 6U) {
   15ca4:	d908      	bls.n	15cb8 <ull_conn_done+0x190>
			else if (lll->role) {
   15ca6:	f995 3029 	ldrsb.w	r3, [r5, #41]	; 0x29
   15caa:	4293      	cmp	r3, r2
   15cac:	f6bf af73 	bge.w	15b96 <ull_conn_done+0x6e>
				if (latency_event) {
   15cb0:	f1b9 0f00 	cmp.w	r9, #0
   15cb4:	f000 808b 	beq.w	15dce <ull_conn_done+0x2a6>
				force = 1U;
   15cb8:	2701      	movs	r7, #1
   15cba:	e76c      	b.n	15b96 <ull_conn_done+0x6e>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   15cbc:	f895 306a 	ldrb.w	r3, [r5, #106]	; 0x6a
   15cc0:	0719      	lsls	r1, r3, #28
   15cc2:	d542      	bpl.n	15d4a <ull_conn_done+0x222>
					    (lll->latency + 6)) ?
   15cc4:	8bab      	ldrh	r3, [r5, #28]
			appto_reload_new = (conn->apto_reload >
   15cc6:	f8b4 20ce 	ldrh.w	r2, [r4, #206]	; 0xce
					    (lll->latency + 6)) ?
   15cca:	1d99      	adds	r1, r3, #6
			appto_reload_new = (conn->apto_reload >
   15ccc:	428a      	cmp	r2, r1
					   (conn->apto_reload -
   15cce:	bfc4      	itt	gt
   15cd0:	1ad3      	subgt	r3, r2, r3
   15cd2:	3b06      	subgt	r3, #6
			if (conn->appto_reload != appto_reload_new) {
   15cd4:	f8b4 10ca 	ldrh.w	r1, [r4, #202]	; 0xca
			appto_reload_new = (conn->apto_reload >
   15cd8:	bfcc      	ite	gt
   15cda:	b29b      	uxthgt	r3, r3
   15cdc:	4613      	movle	r3, r2
			if (conn->appto_reload != appto_reload_new) {
   15cde:	4299      	cmp	r1, r3
   15ce0:	d061      	beq.n	15da6 <ull_conn_done+0x27e>
				conn->appto_reload = appto_reload_new;
   15ce2:	f8a4 30ca 	strh.w	r3, [r4, #202]	; 0xca
				conn->appto_expire = conn->appto_reload;
   15ce6:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
				conn->apto_expire = conn->apto_reload;
   15cea:	f8a4 20d0 	strh.w	r2, [r4, #208]	; 0xd0
   15cee:	e732      	b.n	15b56 <ull_conn_done+0x2e>
		conn->llcp_terminate.reason_peer =
   15cf0:	273d      	movs	r7, #61	; 0x3d
   15cf2:	f884 7143 	strb.w	r7, [r4, #323]	; 0x143
		conn_cleanup(conn, reason_peer);
   15cf6:	4639      	mov	r1, r7
   15cf8:	4620      	mov	r0, r4
   15cfa:	f7ff fe8f 	bl	15a1c <conn_cleanup>
}
   15cfe:	b00b      	add	sp, #44	; 0x2c
   15d00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		conn->appto_expire = conn->apto_expire = 0U;
   15d04:	2300      	movs	r3, #0
   15d06:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
   15d0a:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
		break;
   15d0e:	e722      	b.n	15b56 <ull_conn_done+0x2e>
		if (!conn->supervision_expire) {
   15d10:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   15d14:	2b00      	cmp	r3, #0
   15d16:	d1ba      	bne.n	15c8e <ull_conn_done+0x166>
			conn->supervision_expire = conn->supervision_reload;
   15d18:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
   15d1c:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
   15d20:	e7b3      	b.n	15c8a <ull_conn_done+0x162>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   15d22:	b371      	cbz	r1, 15d82 <ull_conn_done+0x25a>
   15d24:	4623      	mov	r3, r4
   15d26:	e778      	b.n	15c1a <ull_conn_done+0xf2>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   15d28:	1a5b      	subs	r3, r3, r1
   15d2a:	f003 0303 	and.w	r3, r3, #3
			conn->appto_expire -= elapsed_event;
   15d2e:	eba2 0808 	sub.w	r8, r2, r8
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   15d32:	2b02      	cmp	r3, #2
			conn->appto_expire -= elapsed_event;
   15d34:	f8a4 80cc 	strh.w	r8, [r4, #204]	; 0xcc
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   15d38:	f47f af5a 	bne.w	15bf0 <ull_conn_done+0xc8>
   15d3c:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   15d40:	3b01      	subs	r3, #1
   15d42:	2b01      	cmp	r3, #1
   15d44:	f63f af54 	bhi.w	15bf0 <ull_conn_done+0xc8>
   15d48:	e759      	b.n	15bfe <ull_conn_done+0xd6>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   15d4a:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
   15d4e:	07da      	lsls	r2, r3, #31
   15d50:	f57f af01 	bpl.w	15b56 <ull_conn_done+0x2e>
   15d54:	e7b6      	b.n	15cc4 <ull_conn_done+0x19c>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   15d56:	b90b      	cbnz	r3, 15d5c <ull_conn_done+0x234>
   15d58:	2c00      	cmp	r4, #0
   15d5a:	d082      	beq.n	15c62 <ull_conn_done+0x13a>
	lazy = 0U;
   15d5c:	4639      	mov	r1, r7
   15d5e:	e75c      	b.n	15c1a <ull_conn_done+0xf2>
			rx = ll_pdu_rx_alloc();
   15d60:	f7fa feb8 	bl	10ad4 <ll_pdu_rx_alloc>
			if (rx) {
   15d64:	4601      	mov	r1, r0
   15d66:	b370      	cbz	r0, 15dc6 <ull_conn_done+0x29e>
				conn->apto_expire = 0U;
   15d68:	2300      	movs	r3, #0
				rx->handle = lll->handle;
   15d6a:	8b2a      	ldrh	r2, [r5, #24]
				conn->apto_expire = 0U;
   15d6c:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
				rx->type = NODE_RX_TYPE_APTO;
   15d70:	2318      	movs	r3, #24
				rx->handle = lll->handle;
   15d72:	80c2      	strh	r2, [r0, #6]
				rx->type = NODE_RX_TYPE_APTO;
   15d74:	7103      	strb	r3, [r0, #4]
				ll_rx_put(rx->link, rx);
   15d76:	6800      	ldr	r0, [r0, #0]
   15d78:	f7fa fe7e 	bl	10a78 <ll_rx_put>
				ll_rx_sched();
   15d7c:	f7fa fe86 	bl	10a8c <ll_rx_sched>
   15d80:	e71d      	b.n	15bbe <ull_conn_done+0x96>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   15d82:	2f00      	cmp	r7, #0
   15d84:	f43f af6d 	beq.w	15c62 <ull_conn_done+0x13a>
   15d88:	4623      	mov	r3, r4
   15d8a:	e746      	b.n	15c1a <ull_conn_done+0xf2>
   15d8c:	8c2a      	ldrh	r2, [r5, #32]
   15d8e:	e738      	b.n	15c02 <ull_conn_done+0xda>
			ull_drift_ticks_get(done, &ticks_drift_plus,
   15d90:	aa08      	add	r2, sp, #32
   15d92:	a909      	add	r1, sp, #36	; 0x24
   15d94:	4630      	mov	r0, r6
   15d96:	f7eb fa47 	bl	1228 <ull_drift_ticks_get>
			if (!conn->tx_head) {
   15d9a:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   15d9e:	b383      	cbz	r3, 15e02 <ull_conn_done+0x2da>
				lll->latency_event = 0;
   15da0:	2300      	movs	r3, #0
   15da2:	842b      	strh	r3, [r5, #32]
   15da4:	e6ec      	b.n	15b80 <ull_conn_done+0x58>
			if (conn->apto_expire == 0U) {
   15da6:	f8b4 10d0 	ldrh.w	r1, [r4, #208]	; 0xd0
   15daa:	2900      	cmp	r1, #0
   15dac:	f47f aed3 	bne.w	15b56 <ull_conn_done+0x2e>
   15db0:	e799      	b.n	15ce6 <ull_conn_done+0x1be>
			conn_cleanup(conn, BT_HCI_ERR_CONN_TIMEOUT);
   15db2:	4620      	mov	r0, r4
   15db4:	2108      	movs	r1, #8
   15db6:	f7ff fe31 	bl	15a1c <conn_cleanup>
			return;
   15dba:	e752      	b.n	15c62 <ull_conn_done+0x13a>
			conn_cleanup(conn, BT_HCI_ERR_LL_RESP_TIMEOUT);
   15dbc:	4620      	mov	r0, r4
   15dbe:	2122      	movs	r1, #34	; 0x22
   15dc0:	f7ff fe2c 	bl	15a1c <conn_cleanup>
			return;
   15dc4:	e74d      	b.n	15c62 <ull_conn_done+0x13a>
				conn->apto_expire = 1U;
   15dc6:	2301      	movs	r3, #1
   15dc8:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
   15dcc:	e6f7      	b.n	15bbe <ull_conn_done+0x96>
					force = conn->slave.force & 0x01;
   15dce:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
					conn->slave.force >>= 1U;
   15dd2:	085a      	lsrs	r2, r3, #1
					if (force) {
   15dd4:	f013 0301 	ands.w	r3, r3, #1
						conn->slave.force |= BIT(31);
   15dd8:	bf17      	itett	ne
   15dda:	f042 4200 	orrne.w	r2, r2, #2147483648	; 0x80000000
					conn->slave.force >>= 1U;
   15dde:	f8c4 20dc 	streq.w	r2, [r4, #220]	; 0xdc
						conn->slave.force |= BIT(31);
   15de2:	f8c4 20dc 	strne.w	r2, [r4, #220]	; 0xdc
					force = conn->slave.force & 0x01;
   15de6:	461f      	movne	r7, r3
   15de8:	e6d5      	b.n	15b96 <ull_conn_done+0x6e>
				conn->llcp_ack -= 2U;
   15dea:	1e8b      	subs	r3, r1, #2
				conn->llcp_type = LLCP_PING;
   15dec:	2205      	movs	r2, #5
				conn->llcp_ack -= 2U;
   15dee:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
				conn->llcp_type = LLCP_PING;
   15df2:	f884 20e6 	strb.w	r2, [r4, #230]	; 0xe6
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   15df6:	e6fb      	b.n	15bf0 <ull_conn_done+0xc8>
			conn_cleanup(conn, BT_HCI_ERR_CONN_FAIL_TO_ESTAB);
   15df8:	4620      	mov	r0, r4
   15dfa:	213e      	movs	r1, #62	; 0x3e
   15dfc:	f7ff fe0e 	bl	15a1c <conn_cleanup>
			return;
   15e00:	e72f      	b.n	15c62 <ull_conn_done+0x13a>
				ull_conn_tx_demux(UINT8_MAX);
   15e02:	20ff      	movs	r0, #255	; 0xff
   15e04:	f7ff fdba 	bl	1597c <ull_conn_tx_demux>
			if (conn->tx_head || memq_peek(lll->memq_tx.head,
   15e08:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   15e0c:	2b00      	cmp	r3, #0
   15e0e:	d1c7      	bne.n	15da0 <ull_conn_done+0x278>
   15e10:	e9d5 0115 	ldrd	r0, r1, [r5, #84]	; 0x54
   15e14:	463a      	mov	r2, r7
   15e16:	f7f6 ff83 	bl	cd20 <memq_peek>
   15e1a:	2800      	cmp	r0, #0
   15e1c:	d1c0      	bne.n	15da0 <ull_conn_done+0x278>
			} else if (lll->slave.latency_enabled) {
   15e1e:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   15e22:	075b      	lsls	r3, r3, #29
				lll->latency_event = lll->latency;
   15e24:	bf44      	itt	mi
   15e26:	8bab      	ldrhmi	r3, [r5, #28]
   15e28:	842b      	strhmi	r3, [r5, #32]
   15e2a:	e6a9      	b.n	15b80 <ull_conn_done+0x58>
   15e2c:	00011cad 	.word	0x00011cad
   15e30:	00024874 	.word	0x00024874
   15e34:	00024a08 	.word	0x00024a08
   15e38:	00024334 	.word	0x00024334

00015e3c <ull_conn_tx_lll_enqueue>:
	while (conn->tx_head &&
   15e3c:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
   15e40:	2b00      	cmp	r3, #0
   15e42:	f000 80be 	beq.w	15fc2 <ull_conn_tx_lll_enqueue+0x186>
   15e46:	3901      	subs	r1, #1
{
   15e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		link = mem_acquire(&mem_link_tx.free);
   15e4c:	f8df 8178 	ldr.w	r8, [pc, #376]	; 15fc8 <ull_conn_tx_lll_enqueue+0x18c>
		LL_ASSERT(link);
   15e50:	f8df a178 	ldr.w	sl, [pc, #376]	; 15fcc <ull_conn_tx_lll_enqueue+0x190>
   15e54:	f8df 9178 	ldr.w	r9, [pc, #376]	; 15fd0 <ull_conn_tx_lll_enqueue+0x194>
   15e58:	4604      	mov	r4, r0
   15e5a:	b2cd      	uxtb	r5, r1
   15e5c:	e010      	b.n	15e80 <ull_conn_tx_lll_enqueue+0x44>
		link = mem_acquire(&mem_link_tx.free);
   15e5e:	4640      	mov	r0, r8
   15e60:	f7f6 fef4 	bl	cc4c <mem_acquire>
		LL_ASSERT(link);
   15e64:	4607      	mov	r7, r0
   15e66:	b3b0      	cbz	r0, 15ed6 <ull_conn_tx_lll_enqueue+0x9a>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   15e68:	4631      	mov	r1, r6
   15e6a:	4638      	mov	r0, r7
   15e6c:	f104 0268 	add.w	r2, r4, #104	; 0x68
   15e70:	f7f6 ff4e 	bl	cd10 <memq_enqueue>
	while (conn->tx_head &&
   15e74:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   15e78:	3d01      	subs	r5, #1
   15e7a:	b2ed      	uxtb	r5, r5
   15e7c:	2b00      	cmp	r3, #0
   15e7e:	d05c      	beq.n	15f3a <ull_conn_tx_lll_enqueue+0xfe>
		 !conn->llcp_phy.pause_tx &&
   15e80:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
	while (conn->tx_head &&
   15e84:	07d1      	lsls	r1, r2, #31
   15e86:	d403      	bmi.n	15e90 <ull_conn_tx_lll_enqueue+0x54>
		 !conn->llcp_enc.pause_tx &&
   15e88:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
		 !conn->llcp_phy.pause_tx &&
   15e8c:	0792      	lsls	r2, r2, #30
   15e8e:	d53a      	bpl.n	15f06 <ull_conn_tx_lll_enqueue+0xca>
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   15e90:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   15e94:	4293      	cmp	r3, r2
   15e96:	d150      	bne.n	15f3a <ull_conn_tx_lll_enqueue+0xfe>
   15e98:	2dff      	cmp	r5, #255	; 0xff
   15e9a:	d04e      	beq.n	15f3a <ull_conn_tx_lll_enqueue+0xfe>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   15e9c:	f8d4 11c4 	ldr.w	r1, [r4, #452]	; 0x1c4
   15ea0:	4620      	mov	r0, r4
   15ea2:	f7fb fd1d 	bl	118e0 <tx_ull_dequeue>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   15ea6:	7903      	ldrb	r3, [r0, #4]
   15ea8:	f003 0303 	and.w	r3, r3, #3
   15eac:	2b03      	cmp	r3, #3
		tx = tx_ull_dequeue(conn, conn->tx_head);
   15eae:	4606      	mov	r6, r0
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   15eb0:	d1d5      	bne.n	15e5e <ull_conn_tx_lll_enqueue+0x22>
			ctrl_tx_pre_ack(conn, pdu_tx);
   15eb2:	79c3      	ldrb	r3, [r0, #7]
	switch (pdu_tx->llctrl.opcode) {
   15eb4:	2b0b      	cmp	r3, #11
   15eb6:	d042      	beq.n	15f3e <ull_conn_tx_lll_enqueue+0x102>
   15eb8:	d81b      	bhi.n	15ef2 <ull_conn_tx_lll_enqueue+0xb6>
   15eba:	2b04      	cmp	r3, #4
   15ebc:	d1cf      	bne.n	15e5e <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_enc.pause_tx = 1U;
   15ebe:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
   15ec2:	f043 0302 	orr.w	r3, r3, #2
   15ec6:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
		link = mem_acquire(&mem_link_tx.free);
   15eca:	4640      	mov	r0, r8
   15ecc:	f7f6 febe 	bl	cc4c <mem_acquire>
		LL_ASSERT(link);
   15ed0:	4607      	mov	r7, r0
   15ed2:	2800      	cmp	r0, #0
   15ed4:	d1c8      	bne.n	15e68 <ull_conn_tx_lll_enqueue+0x2c>
   15ed6:	483b      	ldr	r0, [pc, #236]	; (15fc4 <ull_conn_tx_lll_enqueue+0x188>)
   15ed8:	f240 6303 	movw	r3, #1539	; 0x603
   15edc:	4652      	mov	r2, sl
   15ede:	4649      	mov	r1, r9
   15ee0:	f008 fa50 	bl	1e384 <printk>
   15ee4:	4040      	eors	r0, r0
   15ee6:	f380 8811 	msr	BASEPRI, r0
   15eea:	f04f 0003 	mov.w	r0, #3
   15eee:	df02      	svc	2
   15ef0:	e7ba      	b.n	15e68 <ull_conn_tx_lll_enqueue+0x2c>
	switch (pdu_tx->llctrl.opcode) {
   15ef2:	3b16      	subs	r3, #22
   15ef4:	2b01      	cmp	r3, #1
   15ef6:	d8b2      	bhi.n	15e5e <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_phy.pause_tx = 1U;
   15ef8:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   15efc:	f043 0301 	orr.w	r3, r3, #1
   15f00:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
		break;
   15f04:	e7ab      	b.n	15e5e <ull_conn_tx_lll_enqueue+0x22>
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   15f06:	791a      	ldrb	r2, [r3, #4]
   15f08:	f002 0203 	and.w	r2, r2, #3
   15f0c:	2a03      	cmp	r2, #3
   15f0e:	d1c3      	bne.n	15e98 <ull_conn_tx_lll_enqueue+0x5c>
	    ((pdu_data_tx->llctrl.opcode ==
   15f10:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   15f12:	2a03      	cmp	r2, #3
   15f14:	d001      	beq.n	15f1a <ull_conn_tx_lll_enqueue+0xde>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   15f16:	2a0a      	cmp	r2, #10
   15f18:	d1be      	bne.n	15e98 <ull_conn_tx_lll_enqueue+0x5c>
		if (((conn->llcp_req != conn->llcp_ack) &&
   15f1a:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
   15f1e:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   15f22:	428a      	cmp	r2, r1
   15f24:	d010      	beq.n	15f48 <ull_conn_tx_lll_enqueue+0x10c>
   15f26:	f894 20e6 	ldrb.w	r2, [r4, #230]	; 0xe6
   15f2a:	2a03      	cmp	r2, #3
   15f2c:	d0b4      	beq.n	15e98 <ull_conn_tx_lll_enqueue+0x5c>
			if ((tx->next != NULL) &&
   15f2e:	681a      	ldr	r2, [r3, #0]
   15f30:	b11a      	cbz	r2, 15f3a <ull_conn_tx_lll_enqueue+0xfe>
   15f32:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   15f36:	428a      	cmp	r2, r1
   15f38:	d032      	beq.n	15fa0 <ull_conn_tx_lll_enqueue+0x164>
}
   15f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!conn->lll.role) {
   15f3e:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   15f42:	2b00      	cmp	r3, #0
   15f44:	da8b      	bge.n	15e5e <ull_conn_tx_lll_enqueue+0x22>
   15f46:	e7ba      	b.n	15ebe <ull_conn_tx_lll_enqueue+0x82>
		    ((conn->llcp_req == conn->llcp_ack) &&
   15f48:	f894 0121 	ldrb.w	r0, [r4, #289]	; 0x121
   15f4c:	f894 1120 	ldrb.w	r1, [r4, #288]	; 0x120
   15f50:	4288      	cmp	r0, r1
   15f52:	d1ec      	bne.n	15f2e <ull_conn_tx_lll_enqueue+0xf2>
		     ((conn->llcp_feature.ack != conn->llcp_feature.req) ||
   15f54:	f894 0139 	ldrb.w	r0, [r4, #313]	; 0x139
   15f58:	f894 1138 	ldrb.w	r1, [r4, #312]	; 0x138
   15f5c:	4288      	cmp	r0, r1
   15f5e:	d1e6      	bne.n	15f2e <ull_conn_tx_lll_enqueue+0xf2>
		      (conn->llcp_version.ack != conn->llcp_version.req) ||
   15f60:	f894 0185 	ldrb.w	r0, [r4, #389]	; 0x185
   15f64:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
   15f68:	4288      	cmp	r0, r1
   15f6a:	d1e0      	bne.n	15f2e <ull_conn_tx_lll_enqueue+0xf2>
		       conn->llcp_conn_param.req) ||
   15f6c:	f894 01ad 	ldrb.w	r0, [r4, #429]	; 0x1ad
   15f70:	f894 11ac 	ldrb.w	r1, [r4, #428]	; 0x1ac
   15f74:	4288      	cmp	r0, r1
   15f76:	d1da      	bne.n	15f2e <ull_conn_tx_lll_enqueue+0xf2>
		      (conn->llcp_phy.ack != conn->llcp_phy.req) ||
   15f78:	f894 01bd 	ldrb.w	r0, [r4, #445]	; 0x1bd
   15f7c:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   15f80:	4288      	cmp	r0, r1
   15f82:	d1d4      	bne.n	15f2e <ull_conn_tx_lll_enqueue+0xf2>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   15f84:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   15f88:	2101      	movs	r1, #1
   15f8a:	f361 0301 	bfi	r3, r1, #0, #2
			conn->llcp_ack -= 2U;
   15f8e:	3a02      	subs	r2, #2
			conn->llcp_type = LLCP_ENCRYPTION;
   15f90:	2103      	movs	r1, #3
			conn->llcp_ack -= 2U;
   15f92:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   15f96:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
			conn->llcp_type = LLCP_ENCRYPTION;
   15f9a:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
			conn->llcp_ack -= 2U;
   15f9e:	e77b      	b.n	15e98 <ull_conn_tx_lll_enqueue+0x5c>
				tx->next = conn->tx_ctrl_last->next;
   15fa0:	f8d4 11cc 	ldr.w	r1, [r4, #460]	; 0x1cc
				if (!conn->tx_data_last) {
   15fa4:	f8d4 01d4 	ldr.w	r0, [r4, #468]	; 0x1d4
				conn->tx_head = tx->next;
   15fa8:	f8c4 21c4 	str.w	r2, [r4, #452]	; 0x1c4
				tx->next = conn->tx_ctrl_last->next;
   15fac:	680a      	ldr	r2, [r1, #0]
   15fae:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl_last->next = tx;
   15fb0:	600b      	str	r3, [r1, #0]
				conn->tx_data = tx;
   15fb2:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
				if (!conn->tx_data_last) {
   15fb6:	2800      	cmp	r0, #0
   15fb8:	f47f af6e 	bne.w	15e98 <ull_conn_tx_lll_enqueue+0x5c>
					conn->tx_data_last = tx;
   15fbc:	f8c4 31d4 	str.w	r3, [r4, #468]	; 0x1d4
   15fc0:	e76a      	b.n	15e98 <ull_conn_tx_lll_enqueue+0x5c>
   15fc2:	4770      	bx	lr
   15fc4:	00024334 	.word	0x00024334
   15fc8:	200021ac 	.word	0x200021ac
   15fcc:	00024874 	.word	0x00024874
   15fd0:	000248cc 	.word	0x000248cc

00015fd4 <tx_demux>:
{
   15fd4:	b510      	push	{r4, lr}
   15fd6:	4604      	mov	r4, r0
	ull_conn_tx_demux(1);
   15fd8:	2001      	movs	r0, #1
   15fda:	f7ff fccf 	bl	1597c <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(param, 1);
   15fde:	4620      	mov	r0, r4
   15fe0:	2101      	movs	r1, #1
}
   15fe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ull_conn_tx_lll_enqueue(param, 1);
   15fe6:	f7ff bf29 	b.w	15e3c <ull_conn_tx_lll_enqueue>
   15fea:	bf00      	nop

00015fec <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
   15fec:	4901      	ldr	r1, [pc, #4]	; (15ff4 <ull_conn_link_tx_release+0x8>)
   15fee:	f7f6 be43 	b.w	cc78 <mem_release>
   15ff2:	bf00      	nop
   15ff4:	200021ac 	.word	0x200021ac

00015ff8 <ull_conn_ack_last_idx_get>:
	return mfifo_conn_ack.l;
   15ff8:	4b01      	ldr	r3, [pc, #4]	; (16000 <ull_conn_ack_last_idx_get+0x8>)
}
   15ffa:	78d8      	ldrb	r0, [r3, #3]
   15ffc:	4770      	bx	lr
   15ffe:	bf00      	nop
   16000:	20000478 	.word	0x20000478

00016004 <ull_conn_ack_peek>:
{
   16004:	b4f0      	push	{r4, r5, r6, r7}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   16006:	4b0b      	ldr	r3, [pc, #44]	; (16034 <ull_conn_ack_peek+0x30>)
   16008:	789c      	ldrb	r4, [r3, #2]
   1600a:	78de      	ldrb	r6, [r3, #3]
   1600c:	781f      	ldrb	r7, [r3, #0]
	if (first == last) {
   1600e:	42b4      	cmp	r4, r6
   16010:	d00d      	beq.n	1602e <ull_conn_ack_peek+0x2a>
	return (void *)(fifo + first * size);
   16012:	3304      	adds	r3, #4
   16014:	fb14 f407 	smulbb	r4, r4, r7
	if (!lll_tx) {
   16018:	4605      	mov	r5, r0
   1601a:	1918      	adds	r0, r3, r4
   1601c:	d005      	beq.n	1602a <ull_conn_ack_peek+0x26>
	*ack_last = mfifo_conn_ack.l;
   1601e:	702e      	strb	r6, [r5, #0]
	*handle = lll_tx->handle;
   16020:	5b1c      	ldrh	r4, [r3, r4]
	*tx = lll_tx->node;
   16022:	6843      	ldr	r3, [r0, #4]
	*handle = lll_tx->handle;
   16024:	800c      	strh	r4, [r1, #0]
	*tx = lll_tx->node;
   16026:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   16028:	6818      	ldr	r0, [r3, #0]
}
   1602a:	bcf0      	pop	{r4, r5, r6, r7}
   1602c:	4770      	bx	lr
		return NULL;
   1602e:	2000      	movs	r0, #0
   16030:	e7fb      	b.n	1602a <ull_conn_ack_peek+0x26>
   16032:	bf00      	nop
   16034:	20000478 	.word	0x20000478

00016038 <ull_conn_ack_by_last_peek>:
{
   16038:	b430      	push	{r4, r5}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
   1603a:	4b09      	ldr	r3, [pc, #36]	; (16060 <ull_conn_ack_by_last_peek+0x28>)
   1603c:	789c      	ldrb	r4, [r3, #2]
   1603e:	781d      	ldrb	r5, [r3, #0]
	if (first == last) {
   16040:	4284      	cmp	r4, r0
   16042:	d00b      	beq.n	1605c <ull_conn_ack_by_last_peek+0x24>
	return (void *)(fifo + first * size);
   16044:	3304      	adds	r3, #4
   16046:	fb14 f405 	smulbb	r4, r4, r5
	if (!lll_tx) {
   1604a:	1918      	adds	r0, r3, r4
   1604c:	d004      	beq.n	16058 <ull_conn_ack_by_last_peek+0x20>
	*handle = lll_tx->handle;
   1604e:	5b1c      	ldrh	r4, [r3, r4]
	*tx = lll_tx->node;
   16050:	6843      	ldr	r3, [r0, #4]
	*handle = lll_tx->handle;
   16052:	800c      	strh	r4, [r1, #0]
	*tx = lll_tx->node;
   16054:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   16056:	6818      	ldr	r0, [r3, #0]
}
   16058:	bc30      	pop	{r4, r5}
   1605a:	4770      	bx	lr
		return NULL;
   1605c:	2000      	movs	r0, #0
   1605e:	e7fb      	b.n	16058 <ull_conn_ack_by_last_peek+0x20>
   16060:	20000478 	.word	0x20000478

00016064 <ull_conn_ack_dequeue>:
{
   16064:	b410      	push	{r4}
	return MFIFO_DEQUEUE(conn_ack);
   16066:	4b0a      	ldr	r3, [pc, #40]	; (16090 <ull_conn_ack_dequeue+0x2c>)
	uint8_t _first = *first; /* Copy read-index */
   16068:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   1606a:	78da      	ldrb	r2, [r3, #3]
   1606c:	7818      	ldrb	r0, [r3, #0]
   1606e:	785c      	ldrb	r4, [r3, #1]
   16070:	428a      	cmp	r2, r1
   16072:	d00a      	beq.n	1608a <ull_conn_ack_dequeue+0x26>
	_first += 1U;
   16074:	1c4a      	adds	r2, r1, #1
   16076:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   16078:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   1607c:	4294      	cmp	r4, r2
   1607e:	bf08      	it	eq
   16080:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   16082:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   16084:	709a      	strb	r2, [r3, #2]
}
   16086:	bc10      	pop	{r4}
   16088:	4770      	bx	lr
		return NULL;
   1608a:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(conn_ack);
   1608c:	e7fb      	b.n	16086 <ull_conn_ack_dequeue+0x22>
   1608e:	bf00      	nop
   16090:	20000478 	.word	0x20000478

00016094 <ull_conn_lll_ack_enqueue>:
{
   16094:	b570      	push	{r4, r5, r6, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   16096:	4a13      	ldr	r2, [pc, #76]	; (160e4 <ull_conn_lll_ack_enqueue+0x50>)
   16098:	78d6      	ldrb	r6, [r2, #3]
	if (last == count) {
   1609a:	7855      	ldrb	r5, [r2, #1]
   1609c:	7894      	ldrb	r4, [r2, #2]
	last = last + 1;
   1609e:	1c73      	adds	r3, r6, #1
   160a0:	b2db      	uxtb	r3, r3
		last = 0U;
   160a2:	429d      	cmp	r5, r3
   160a4:	bf08      	it	eq
   160a6:	2300      	moveq	r3, #0
	if (last == first) {
   160a8:	429c      	cmp	r4, r3
   160aa:	d00a      	beq.n	160c2 <ull_conn_lll_ack_enqueue+0x2e>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   160ac:	4615      	mov	r5, r2
   160ae:	f815 4b04 	ldrb.w	r4, [r5], #4
   160b2:	fb14 f406 	smulbb	r4, r4, r6
	LL_ASSERT(lll_tx);
   160b6:	192e      	adds	r6, r5, r4
   160b8:	d003      	beq.n	160c2 <ull_conn_lll_ack_enqueue+0x2e>
	lll_tx->handle = handle;
   160ba:	5328      	strh	r0, [r5, r4]
	lll_tx->node = tx;
   160bc:	6071      	str	r1, [r6, #4]
	*last = idx; /* Commit: Update write index */
   160be:	70d3      	strb	r3, [r2, #3]
}
   160c0:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(lll_tx);
   160c2:	4a09      	ldr	r2, [pc, #36]	; (160e8 <ull_conn_lll_ack_enqueue+0x54>)
   160c4:	4909      	ldr	r1, [pc, #36]	; (160ec <ull_conn_lll_ack_enqueue+0x58>)
   160c6:	480a      	ldr	r0, [pc, #40]	; (160f0 <ull_conn_lll_ack_enqueue+0x5c>)
   160c8:	f240 6341 	movw	r3, #1601	; 0x641
   160cc:	f008 f95a 	bl	1e384 <printk>
   160d0:	4040      	eors	r0, r0
   160d2:	f380 8811 	msr	BASEPRI, r0
   160d6:	f04f 0003 	mov.w	r0, #3
   160da:	df02      	svc	2
	lll_tx->handle = handle;
   160dc:	2300      	movs	r3, #0
   160de:	801b      	strh	r3, [r3, #0]
   160e0:	deff      	udf	#255	; 0xff
   160e2:	bf00      	nop
   160e4:	20000478 	.word	0x20000478
   160e8:	00024874 	.word	0x00024874
   160ec:	000248bc 	.word	0x000248bc
   160f0:	00024334 	.word	0x00024334

000160f4 <ull_conn_tx_ack>:
{
   160f4:	b5f0      	push	{r4, r5, r6, r7, lr}
	LL_ASSERT(pdu_tx->len);
   160f6:	7953      	ldrb	r3, [r2, #5]
{
   160f8:	b083      	sub	sp, #12
   160fa:	4614      	mov	r4, r2
   160fc:	4605      	mov	r5, r0
   160fe:	460e      	mov	r6, r1
	LL_ASSERT(pdu_tx->len);
   16100:	b383      	cbz	r3, 16164 <ull_conn_tx_ack+0x70>
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   16102:	7923      	ldrb	r3, [r4, #4]
   16104:	f003 0203 	and.w	r2, r3, #3
   16108:	2a03      	cmp	r2, #3
   1610a:	d00d      	beq.n	16128 <ull_conn_tx_ack+0x34>
	} else if (handle == 0xFFFF) {
   1610c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   16110:	4295      	cmp	r5, r2
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
   16112:	bf04      	itt	eq
   16114:	f36f 0301 	bfceq	r3, #0, #2
   16118:	7123      	strbeq	r3, [r4, #4]
	ll_tx_ack_put(handle, tx);
   1611a:	4621      	mov	r1, r4
   1611c:	4628      	mov	r0, r5
}
   1611e:	b003      	add	sp, #12
   16120:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	ll_tx_ack_put(handle, tx);
   16124:	f7fa bcee 	b.w	10b04 <ll_tx_ack_put>
		if (handle != 0xFFFF) {
   16128:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1612c:	429d      	cmp	r5, r3
   1612e:	d127      	bne.n	16180 <ull_conn_tx_ack+0x8c>
		if (link->next == (void *)tx) {
   16130:	6833      	ldr	r3, [r6, #0]
   16132:	42a3      	cmp	r3, r4
   16134:	f000 80e3 	beq.w	162fe <ull_conn_tx_ack+0x20a>
			LL_ASSERT(!link->next);
   16138:	2b00      	cmp	r3, #0
   1613a:	d0ee      	beq.n	1611a <ull_conn_tx_ack+0x26>
   1613c:	4a83      	ldr	r2, [pc, #524]	; (1634c <ull_conn_tx_ack+0x258>)
   1613e:	4984      	ldr	r1, [pc, #528]	; (16350 <ull_conn_tx_ack+0x25c>)
   16140:	4884      	ldr	r0, [pc, #528]	; (16354 <ull_conn_tx_ack+0x260>)
   16142:	f240 6361 	movw	r3, #1633	; 0x661
   16146:	f008 f91d 	bl	1e384 <printk>
   1614a:	4040      	eors	r0, r0
   1614c:	f380 8811 	msr	BASEPRI, r0
   16150:	f04f 0003 	mov.w	r0, #3
   16154:	df02      	svc	2
	ll_tx_ack_put(handle, tx);
   16156:	4621      	mov	r1, r4
   16158:	4628      	mov	r0, r5
}
   1615a:	b003      	add	sp, #12
   1615c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	ll_tx_ack_put(handle, tx);
   16160:	f7fa bcd0 	b.w	10b04 <ll_tx_ack_put>
	LL_ASSERT(pdu_tx->len);
   16164:	4a79      	ldr	r2, [pc, #484]	; (1634c <ull_conn_tx_ack+0x258>)
   16166:	497c      	ldr	r1, [pc, #496]	; (16358 <ull_conn_tx_ack+0x264>)
   16168:	487a      	ldr	r0, [pc, #488]	; (16354 <ull_conn_tx_ack+0x260>)
   1616a:	f240 634e 	movw	r3, #1614	; 0x64e
   1616e:	f008 f909 	bl	1e384 <printk>
   16172:	4040      	eors	r0, r0
   16174:	f380 8811 	msr	BASEPRI, r0
   16178:	f04f 0003 	mov.w	r0, #3
   1617c:	df02      	svc	2
   1617e:	e7c0      	b.n	16102 <ull_conn_tx_ack+0xe>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   16180:	462a      	mov	r2, r5
   16182:	4876      	ldr	r0, [pc, #472]	; (1635c <ull_conn_tx_ack+0x268>)
   16184:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   16188:	f7f6 fd90 	bl	ccac <mem_get>
   1618c:	79e2      	ldrb	r2, [r4, #7]
   1618e:	3a02      	subs	r2, #2
   16190:	4603      	mov	r3, r0
	switch (pdu_tx->llctrl.opcode) {
   16192:	2a15      	cmp	r2, #21
   16194:	d8cc      	bhi.n	16130 <ull_conn_tx_ack+0x3c>
   16196:	a101      	add	r1, pc, #4	; (adr r1, 1619c <ull_conn_tx_ack+0xa8>)
   16198:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   1619c:	00016297 	.word	0x00016297
   161a0:	00016131 	.word	0x00016131
   161a4:	00016209 	.word	0x00016209
   161a8:	00016131 	.word	0x00016131
   161ac:	00016131 	.word	0x00016131
   161b0:	000161fb 	.word	0x000161fb
   161b4:	00016131 	.word	0x00016131
   161b8:	000161fb 	.word	0x000161fb
   161bc:	00016131 	.word	0x00016131
   161c0:	00016209 	.word	0x00016209
   161c4:	00016131 	.word	0x00016131
   161c8:	00016217 	.word	0x00016217
   161cc:	00016131 	.word	0x00016131
   161d0:	00016131 	.word	0x00016131
   161d4:	00016131 	.word	0x00016131
   161d8:	000161f5 	.word	0x000161f5
   161dc:	00016131 	.word	0x00016131
   161e0:	000161fb 	.word	0x000161fb
   161e4:	00016287 	.word	0x00016287
   161e8:	0001622b 	.word	0x0001622b
   161ec:	000162bb 	.word	0x000162bb
   161f0:	000162a5 	.word	0x000162a5
		if (pdu_tx->llctrl.reject_ext_ind.reject_opcode !=
   161f4:	7a22      	ldrb	r2, [r4, #8]
   161f6:	2a03      	cmp	r2, #3
   161f8:	d00d      	beq.n	16216 <ull_conn_tx_ack+0x122>
			conn->common.txn_lock = 0U;
   161fa:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
   161fe:	f36f 0241 	bfc	r2, #1, #1
   16202:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
			break;
   16206:	e793      	b.n	16130 <ull_conn_tx_ack+0x3c>
			conn->llcp_enc.pause_tx = 1U;
   16208:	f890 2166 	ldrb.w	r2, [r0, #358]	; 0x166
   1620c:	f042 0202 	orr.w	r2, r2, #2
   16210:	f880 2166 	strb.w	r2, [r0, #358]	; 0x166
		break;
   16214:	e78c      	b.n	16130 <ull_conn_tx_ack+0x3c>
		conn->llcp_enc.pause_rx = 0U;
   16216:	f893 2166 	ldrb.w	r2, [r3, #358]	; 0x166
		conn->procedure_expire = 0U;
   1621a:	2100      	movs	r1, #0
		conn->llcp_enc.pause_rx = 0U;
   1621c:	f022 0203 	bic.w	r2, r2, #3
   16220:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
		conn->procedure_expire = 0U;
   16224:	f8a3 10c8 	strh.w	r1, [r3, #200]	; 0xc8
		break;
   16228:	e782      	b.n	16130 <ull_conn_tx_ack+0x3c>
		conn->common.txn_lock = 0U;
   1622a:	f890 20d8 	ldrb.w	r2, [r0, #216]	; 0xd8
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   1622e:	f893 11ad 	ldrb.w	r1, [r3, #429]	; 0x1ad
   16232:	f890 01ac 	ldrb.w	r0, [r0, #428]	; 0x1ac
		conn->common.txn_lock = 0U;
   16236:	f36f 0241 	bfc	r2, #1, #1
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   1623a:	4281      	cmp	r1, r0
		conn->common.txn_lock = 0U;
   1623c:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   16240:	f43f af76 	beq.w	16130 <ull_conn_tx_ack+0x3c>
			switch (conn->llcp_length.state) {
   16244:	f893 11ae 	ldrb.w	r1, [r3, #430]	; 0x1ae
   16248:	f001 0207 	and.w	r2, r1, #7
   1624c:	2a03      	cmp	r2, #3
   1624e:	d005      	beq.n	1625c <ull_conn_tx_ack+0x168>
   16250:	3203      	adds	r2, #3
   16252:	f002 0207 	and.w	r2, r2, #7
   16256:	2a01      	cmp	r2, #1
   16258:	f63f af6a 	bhi.w	16130 <ull_conn_tx_ack+0x3c>
				conn->lll.max_tx_octets =
   1625c:	f8b3 21b2 	ldrh.w	r2, [r3, #434]	; 0x1b2
   16260:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
				if (conn->llcp_length.state ==
   16264:	f001 0207 	and.w	r2, r1, #7
				conn->lll.max_tx_time =
   16268:	f8b3 71b6 	ldrh.w	r7, [r3, #438]	; 0x1b6
   1626c:	f8a3 705c 	strh.w	r7, [r3, #92]	; 0x5c
				if (conn->llcp_length.state ==
   16270:	2a05      	cmp	r2, #5
   16272:	d057      	beq.n	16324 <ull_conn_tx_ack+0x230>
				if (!conn->llcp_length.cache.tx_octets) {
   16274:	f8b3 21b8 	ldrh.w	r2, [r3, #440]	; 0x1b8
   16278:	2a00      	cmp	r2, #0
   1627a:	d159      	bne.n	16330 <ull_conn_tx_ack+0x23c>
					conn->llcp_length.ack =
   1627c:	f883 01ad 	strb.w	r0, [r3, #429]	; 0x1ad
					conn->procedure_expire = 0U;
   16280:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
					break;
   16284:	e754      	b.n	16130 <ull_conn_tx_ack+0x3c>
		conn->llcp_length.state = LLCP_LENGTH_STATE_RSP_WAIT;
   16286:	f890 21ae 	ldrb.w	r2, [r0, #430]	; 0x1ae
   1628a:	2102      	movs	r1, #2
   1628c:	f361 0202 	bfi	r2, r1, #0, #3
   16290:	f880 21ae 	strb.w	r2, [r0, #430]	; 0x1ae
		break;
   16294:	e74c      	b.n	16130 <ull_conn_tx_ack+0x3c>
		uint8_t reason = (pdu_tx->llctrl.terminate_ind.error_code ==
   16296:	7a21      	ldrb	r1, [r4, #8]
   16298:	2913      	cmp	r1, #19
		conn_cleanup(conn, reason);
   1629a:	bf08      	it	eq
   1629c:	2116      	moveq	r1, #22
   1629e:	f7ff fbbd 	bl	15a1c <conn_cleanup>
	break;
   162a2:	e745      	b.n	16130 <ull_conn_tx_ack+0x3c>
		if (conn->lll.role) {
   162a4:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
   162a8:	2a00      	cmp	r2, #0
   162aa:	db2f      	blt.n	1630c <ull_conn_tx_ack+0x218>
		conn->llcp_phy.pause_tx = 0U;
   162ac:	f893 21bf 	ldrb.w	r2, [r3, #447]	; 0x1bf
   162b0:	f36f 0200 	bfc	r2, #0, #1
   162b4:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
		break;
   162b8:	e73a      	b.n	16130 <ull_conn_tx_ack+0x3c>
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   162ba:	f890 21be 	ldrb.w	r2, [r0, #446]	; 0x1be
		if (conn->lll.role) {
   162be:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   162c2:	2002      	movs	r0, #2
   162c4:	f360 0201 	bfi	r2, r0, #0, #2
		if (conn->lll.role) {
   162c8:	2900      	cmp	r1, #0
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   162ca:	f883 21be 	strb.w	r2, [r3, #446]	; 0x1be
		if (conn->lll.role) {
   162ce:	daed      	bge.n	162ac <ull_conn_tx_ack+0x1b8>
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   162d0:	4a23      	ldr	r2, [pc, #140]	; (16360 <ull_conn_tx_ack+0x26c>)
   162d2:	e892 0003 	ldmia.w	r2, {r0, r1}
   162d6:	aa02      	add	r2, sp, #8
   162d8:	e902 0003 	stmdb	r2, {r0, r1}
			phys = conn->llcp_phy.tx | lll->phy_tx;
   162dc:	f893 1060 	ldrb.w	r1, [r3, #96]	; 0x60
   162e0:	f893 21be 	ldrb.w	r2, [r3, #446]	; 0x1be
   162e4:	ea41 0292 	orr.w	r2, r1, r2, lsr #2
			lll->phy_tx_time = phy_tx_time[phys];
   162e8:	f002 0207 	and.w	r2, r2, #7
   162ec:	a802      	add	r0, sp, #8
   162ee:	4402      	add	r2, r0
   162f0:	f812 2c08 	ldrb.w	r2, [r2, #-8]
   162f4:	f362 1106 	bfi	r1, r2, #4, #3
   162f8:	f883 1060 	strb.w	r1, [r3, #96]	; 0x60
   162fc:	e7d6      	b.n	162ac <ull_conn_tx_ack+0x1b8>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   162fe:	4919      	ldr	r1, [pc, #100]	; (16364 <ull_conn_tx_ack+0x270>)
   16300:	4620      	mov	r0, r4
}
   16302:	b003      	add	sp, #12
   16304:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			mem_release(tx, &mem_conn_tx_ctrl.free);
   16308:	f7f6 bcb6 	b.w	cc78 <mem_release>
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   1630c:	4914      	ldr	r1, [pc, #80]	; (16360 <ull_conn_tx_ack+0x26c>)
				conn->common.txn_lock = 0U;
   1630e:	f890 20d8 	ldrb.w	r2, [r0, #216]	; 0xd8
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   16312:	c903      	ldmia	r1, {r0, r1}
   16314:	af02      	add	r7, sp, #8
				conn->common.txn_lock = 0U;
   16316:	f36f 0241 	bfc	r2, #1, #1
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   1631a:	e907 0003 	stmdb	r7, {r0, r1}
				conn->common.txn_lock = 0U;
   1631e:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
   16322:	e7db      	b.n	162dc <ull_conn_tx_ack+0x1e8>
					conn->llcp_length.state =
   16324:	2204      	movs	r2, #4
   16326:	f362 0102 	bfi	r1, r2, #0, #3
   1632a:	f883 11ae 	strb.w	r1, [r3, #430]	; 0x1ae
					break;
   1632e:	e6ff      	b.n	16130 <ull_conn_tx_ack+0x3c>
				conn->llcp_length.cache.tx_octets = 0;
   16330:	2000      	movs	r0, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   16332:	f360 0102 	bfi	r1, r0, #0, #3
				conn->llcp_length.tx_octets =
   16336:	f8a3 21b2 	strh.w	r2, [r3, #434]	; 0x1b2
				conn->llcp_length.tx_time =
   1633a:	f8b3 21ba 	ldrh.w	r2, [r3, #442]	; 0x1ba
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1633e:	f883 11ae 	strb.w	r1, [r3, #430]	; 0x1ae
				conn->llcp_length.cache.tx_octets = 0;
   16342:	f8a3 01b8 	strh.w	r0, [r3, #440]	; 0x1b8
				conn->llcp_length.tx_time =
   16346:	f8a3 21b6 	strh.w	r2, [r3, #438]	; 0x1b6
				break;
   1634a:	e6f1      	b.n	16130 <ull_conn_tx_ack+0x3c>
   1634c:	00024874 	.word	0x00024874
   16350:	00024a70 	.word	0x00024a70
   16354:	00024334 	.word	0x00024334
   16358:	00024a64 	.word	0x00024a64
   1635c:	20001078 	.word	0x20001078
   16360:	00024a7c 	.word	0x00024a7c
   16364:	200020f8 	.word	0x200020f8

00016368 <ull_conn_lll_max_tx_octets_get>:
	switch (lll->phy_tx_time) {
   16368:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
   1636c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
   16370:	f3c2 1202 	ubfx	r2, r2, #4, #3
   16374:	2a02      	cmp	r2, #2
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   16376:	bf14      	ite	ne
   16378:	08db      	lsrne	r3, r3, #3
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   1637a:	089b      	lsreq	r3, r3, #2
	if (lll->enc_tx) {
   1637c:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
	return max_tx_octets;
   16380:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   16382:	bf14      	ite	ne
   16384:	3b0a      	subne	r3, #10
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   16386:	3b0b      	subeq	r3, #11
   16388:	b29b      	uxth	r3, r3
	if (lll->enc_tx) {
   1638a:	06d2      	lsls	r2, r2, #27
		max_tx_octets -= 4U;
   1638c:	bf44      	itt	mi
   1638e:	3b04      	submi	r3, #4
   16390:	b29b      	uxthmi	r3, r3
}
   16392:	4298      	cmp	r0, r3
   16394:	bf28      	it	cs
   16396:	4618      	movcs	r0, r3
   16398:	4770      	bx	lr
   1639a:	bf00      	nop

0001639c <ticker_update_latency_cancel_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
}

static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *params)
{
   1639c:	b510      	push	{r4, lr}
   1639e:	460c      	mov	r4, r1
	struct ll_conn *conn = params;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   163a0:	b930      	cbnz	r0, 163b0 <ticker_update_latency_cancel_op_cb+0x14>

	conn->slave.latency_cancel = 0U;
   163a2:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   163a6:	f36f 0382 	bfc	r3, #2, #1
   163aa:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
}
   163ae:	bd10      	pop	{r4, pc}
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   163b0:	4a09      	ldr	r2, [pc, #36]	; (163d8 <ticker_update_latency_cancel_op_cb+0x3c>)
   163b2:	490a      	ldr	r1, [pc, #40]	; (163dc <ticker_update_latency_cancel_op_cb+0x40>)
   163b4:	480a      	ldr	r0, [pc, #40]	; (163e0 <ticker_update_latency_cancel_op_cb+0x44>)
   163b6:	f240 2343 	movw	r3, #579	; 0x243
   163ba:	f007 ffe3 	bl	1e384 <printk>
   163be:	4040      	eors	r0, r0
   163c0:	f380 8811 	msr	BASEPRI, r0
   163c4:	f04f 0003 	mov.w	r0, #3
   163c8:	df02      	svc	2
	conn->slave.latency_cancel = 0U;
   163ca:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   163ce:	f36f 0382 	bfc	r3, #2, #1
   163d2:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
}
   163d6:	bd10      	pop	{r4, pc}
   163d8:	00024a9c 	.word	0x00024a9c
   163dc:	00024ae0 	.word	0x00024ae0
   163e0:	00024334 	.word	0x00024334

000163e4 <ticker_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   163e4:	b900      	cbnz	r0, 163e8 <ticker_op_cb+0x4>
   163e6:	4770      	bx	lr
{
   163e8:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   163ea:	4a07      	ldr	r2, [pc, #28]	; (16408 <ticker_op_cb+0x24>)
   163ec:	4907      	ldr	r1, [pc, #28]	; (1640c <ticker_op_cb+0x28>)
   163ee:	4808      	ldr	r0, [pc, #32]	; (16410 <ticker_op_cb+0x2c>)
   163f0:	f240 233b 	movw	r3, #571	; 0x23b
   163f4:	f007 ffc6 	bl	1e384 <printk>
   163f8:	4040      	eors	r0, r0
   163fa:	f380 8811 	msr	BASEPRI, r0
   163fe:	f04f 0003 	mov.w	r0, #3
   16402:	df02      	svc	2
}
   16404:	bd08      	pop	{r3, pc}
   16406:	bf00      	nop
   16408:	00024a9c 	.word	0x00024a9c
   1640c:	000248d4 	.word	0x000248d4
   16410:	00024334 	.word	0x00024334

00016414 <ticker_op_stop_adv_cb.part.0>:
static void ticker_op_stop_adv_cb(uint32_t status, void *param)
   16414:	b508      	push	{r3, lr}
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   16416:	4a07      	ldr	r2, [pc, #28]	; (16434 <ticker_op_stop_adv_cb.part.0+0x20>)
   16418:	4907      	ldr	r1, [pc, #28]	; (16438 <ticker_op_stop_adv_cb.part.0+0x24>)
   1641a:	4808      	ldr	r0, [pc, #32]	; (1643c <ticker_op_stop_adv_cb.part.0+0x28>)
   1641c:	f240 2333 	movw	r3, #563	; 0x233
   16420:	f007 ffb0 	bl	1e384 <printk>
   16424:	4040      	eors	r0, r0
   16426:	f380 8811 	msr	BASEPRI, r0
   1642a:	f04f 0003 	mov.w	r0, #3
   1642e:	df02      	svc	2
}
   16430:	bd08      	pop	{r3, pc}
   16432:	bf00      	nop
   16434:	00024a9c 	.word	0x00024a9c
   16438:	00024af4 	.word	0x00024af4
   1643c:	00024334 	.word	0x00024334

00016440 <ticker_op_stop_adv_cb>:
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   16440:	2801      	cmp	r0, #1
   16442:	d000      	beq.n	16446 <ticker_op_stop_adv_cb+0x6>
   16444:	4770      	bx	lr
{
   16446:	b510      	push	{r4, lr}
   16448:	460c      	mov	r4, r1
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   1644a:	f7fa fbcb 	bl	10be4 <ull_disable_mark_get>
   1644e:	4284      	cmp	r4, r0
   16450:	d003      	beq.n	1645a <ticker_op_stop_adv_cb+0x1a>
}
   16452:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   16456:	f7ff bfdd 	b.w	16414 <ticker_op_stop_adv_cb.part.0>
   1645a:	bd10      	pop	{r4, pc}

0001645c <ull_slave_ticker_cb>:
{
   1645c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16460:	9c08      	ldr	r4, [sp, #32]
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   16462:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
   16466:	f64f 76ff 	movw	r6, #65535	; 0xffff
   1646a:	45b4      	cmp	ip, r6
   1646c:	d029      	beq.n	164c2 <ull_slave_ticker_cb+0x66>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   1646e:	4605      	mov	r5, r0
   16470:	4689      	mov	r9, r1
   16472:	4601      	mov	r1, r0
   16474:	4620      	mov	r0, r4
   16476:	461f      	mov	r7, r3
   16478:	4690      	mov	r8, r2
   1647a:	f7fd fed1 	bl	14220 <ull_conn_llcp>
		if (ret) {
   1647e:	bb00      	cbnz	r0, 164c2 <ull_slave_ticker_cb+0x66>
	return ++hdr->ref;
   16480:	7c20      	ldrb	r0, [r4, #16]
   16482:	3001      	adds	r0, #1
   16484:	b2c0      	uxtb	r0, r0
   16486:	7420      	strb	r0, [r4, #16]
	LL_ASSERT(ref);
   16488:	b358      	cbz	r0, 164e2 <ull_slave_ticker_cb+0x86>
	p.ticks_at_expire = ticks_at_expire;
   1648a:	4e1d      	ldr	r6, [pc, #116]	; (16500 <ull_slave_ticker_cb+0xa4>)
	mfy.param = &p;
   1648c:	4b1d      	ldr	r3, [pc, #116]	; (16504 <ull_slave_ticker_cb+0xa8>)
	p.ticks_at_expire = ticks_at_expire;
   1648e:	6035      	str	r5, [r6, #0]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   16490:	2200      	movs	r2, #0
	p.param = &conn->lll;
   16492:	f104 0c1c 	add.w	ip, r4, #28
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   16496:	4611      	mov	r1, r2
   16498:	2001      	movs	r0, #1
	mfy.param = &p;
   1649a:	609e      	str	r6, [r3, #8]
	p.remainder = remainder;
   1649c:	f8c6 9004 	str.w	r9, [r6, #4]
	p.lazy = lazy;
   164a0:	f8a6 8008 	strh.w	r8, [r6, #8]
	p.force = force;
   164a4:	72b7      	strb	r7, [r6, #10]
	p.param = &conn->lll;
   164a6:	f8c6 c00c 	str.w	ip, [r6, #12]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   164aa:	f7f6 fca5 	bl	cdf8 <mayfly_enqueue>
	LL_ASSERT(!err);
   164ae:	b950      	cbnz	r0, 164c6 <ull_slave_ticker_cb+0x6a>
	ull_conn_tx_demux(UINT8_MAX);
   164b0:	20ff      	movs	r0, #255	; 0xff
   164b2:	f7ff fa63 	bl	1597c <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   164b6:	4620      	mov	r0, r4
   164b8:	21ff      	movs	r1, #255	; 0xff
}
   164ba:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   164be:	f7ff bcbd 	b.w	15e3c <ull_conn_tx_lll_enqueue>
}
   164c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(!err);
   164c6:	4a10      	ldr	r2, [pc, #64]	; (16508 <ull_slave_ticker_cb+0xac>)
   164c8:	4910      	ldr	r1, [pc, #64]	; (1650c <ull_slave_ticker_cb+0xb0>)
   164ca:	4811      	ldr	r0, [pc, #68]	; (16510 <ull_slave_ticker_cb+0xb4>)
   164cc:	f240 13f7 	movw	r3, #503	; 0x1f7
   164d0:	f007 ff58 	bl	1e384 <printk>
   164d4:	4040      	eors	r0, r0
   164d6:	f380 8811 	msr	BASEPRI, r0
   164da:	f04f 0003 	mov.w	r0, #3
   164de:	df02      	svc	2
   164e0:	e7e6      	b.n	164b0 <ull_slave_ticker_cb+0x54>
	LL_ASSERT(ref);
   164e2:	4a09      	ldr	r2, [pc, #36]	; (16508 <ull_slave_ticker_cb+0xac>)
   164e4:	490b      	ldr	r1, [pc, #44]	; (16514 <ull_slave_ticker_cb+0xb8>)
   164e6:	480a      	ldr	r0, [pc, #40]	; (16510 <ull_slave_ticker_cb+0xb4>)
   164e8:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
   164ec:	f007 ff4a 	bl	1e384 <printk>
   164f0:	4040      	eors	r0, r0
   164f2:	f380 8811 	msr	BASEPRI, r0
   164f6:	f04f 0003 	mov.w	r0, #3
   164fa:	df02      	svc	2
   164fc:	e7c5      	b.n	1648a <ull_slave_ticker_cb+0x2e>
   164fe:	bf00      	nop
   16500:	200021f0 	.word	0x200021f0
   16504:	20000500 	.word	0x20000500
   16508:	00024a9c 	.word	0x00024a9c
   1650c:	000245cc 	.word	0x000245cc
   16510:	00024334 	.word	0x00024334
   16514:	000247a8 	.word	0x000247a8

00016518 <ull_slave_latency_cancel>:
	if (conn->lll.latency_event && !conn->slave.latency_cancel) {
   16518:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   1651a:	b123      	cbz	r3, 16526 <ull_slave_latency_cancel+0xe>
   1651c:	f890 20d8 	ldrb.w	r2, [r0, #216]	; 0xd8
   16520:	f012 0304 	ands.w	r3, r2, #4
   16524:	d000      	beq.n	16528 <ull_slave_latency_cancel+0x10>
   16526:	4770      	bx	lr
{
   16528:	b530      	push	{r4, r5, lr}
   1652a:	b089      	sub	sp, #36	; 0x24
		conn->slave.latency_cancel = 1U;
   1652c:	f042 0204 	orr.w	r2, r2, #4
				      (TICKER_ID_CONN_BASE + handle),
   16530:	3103      	adds	r1, #3
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   16532:	4d11      	ldr	r5, [pc, #68]	; (16578 <ull_slave_latency_cancel+0x60>)
		conn->slave.latency_cancel = 1U;
   16534:	f880 20d8 	strb.w	r2, [r0, #216]	; 0xd8
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   16538:	2401      	movs	r4, #1
   1653a:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1653e:	b2ca      	uxtb	r2, r1
   16540:	9006      	str	r0, [sp, #24]
   16542:	9304      	str	r3, [sp, #16]
   16544:	9300      	str	r3, [sp, #0]
   16546:	4618      	mov	r0, r3
   16548:	9505      	str	r5, [sp, #20]
   1654a:	9403      	str	r4, [sp, #12]
   1654c:	2103      	movs	r1, #3
   1654e:	f7f7 ff41 	bl	e3d4 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   16552:	f030 0302 	bics.w	r3, r0, #2
   16556:	d00c      	beq.n	16572 <ull_slave_latency_cancel+0x5a>
   16558:	4a08      	ldr	r2, [pc, #32]	; (1657c <ull_slave_latency_cancel+0x64>)
   1655a:	4909      	ldr	r1, [pc, #36]	; (16580 <ull_slave_latency_cancel+0x68>)
   1655c:	4809      	ldr	r0, [pc, #36]	; (16584 <ull_slave_latency_cancel+0x6c>)
   1655e:	f44f 73de 	mov.w	r3, #444	; 0x1bc
   16562:	f007 ff0f 	bl	1e384 <printk>
   16566:	4040      	eors	r0, r0
   16568:	f380 8811 	msr	BASEPRI, r0
   1656c:	f04f 0003 	mov.w	r0, #3
   16570:	df02      	svc	2
}
   16572:	b009      	add	sp, #36	; 0x24
   16574:	bd30      	pop	{r4, r5, pc}
   16576:	bf00      	nop
   16578:	0001639d 	.word	0x0001639d
   1657c:	00024a9c 	.word	0x00024a9c
   16580:	00024954 	.word	0x00024954
   16584:	00024334 	.word	0x00024334

00016588 <ll_start_enc_req_send>:
{
   16588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1658a:	460d      	mov	r5, r1
   1658c:	4614      	mov	r4, r2
	conn = ll_connected_get(handle);
   1658e:	f7fb fef9 	bl	12384 <ll_connected_get>
	if (!conn) {
   16592:	2800      	cmp	r0, #0
   16594:	d046      	beq.n	16624 <ll_start_enc_req_send+0x9c>
	if (error_code) {
   16596:	4603      	mov	r3, r0
   16598:	b9ed      	cbnz	r5, 165d6 <ll_start_enc_req_send+0x4e>
		if ((conn->llcp_req == conn->llcp_ack) ||
   1659a:	f890 10e4 	ldrb.w	r1, [r0, #228]	; 0xe4
   1659e:	f890 20e5 	ldrb.w	r2, [r0, #229]	; 0xe5
   165a2:	4291      	cmp	r1, r2
   165a4:	d035      	beq.n	16612 <ll_start_enc_req_send+0x8a>
   165a6:	f890 20e6 	ldrb.w	r2, [r0, #230]	; 0xe6
   165aa:	2a03      	cmp	r2, #3
   165ac:	d131      	bne.n	16612 <ll_start_enc_req_send+0x8a>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   165ae:	f8b0 20f4 	ldrh.w	r2, [r0, #244]	; 0xf4
   165b2:	6827      	ldr	r7, [r4, #0]
   165b4:	68e0      	ldr	r0, [r4, #12]
   165b6:	6866      	ldr	r6, [r4, #4]
   165b8:	68a1      	ldr	r1, [r4, #8]
   165ba:	f8c3 1179 	str.w	r1, [r3, #377]	; 0x179
   165be:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
   165c2:	f8c3 017d 	str.w	r0, [r3, #381]	; 0x17d
   165c6:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
   165ca:	f8c3 7171 	str.w	r7, [r3, #369]	; 0x171
   165ce:	f8c3 6175 	str.w	r6, [r3, #373]	; 0x175
	return 0;
   165d2:	4628      	mov	r0, r5
}
   165d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (conn->llcp_enc.refresh == 0U) {
   165d6:	f890 0166 	ldrb.w	r0, [r0, #358]	; 0x166
   165da:	f010 0004 	ands.w	r0, r0, #4
   165de:	d112      	bne.n	16606 <ll_start_enc_req_send+0x7e>
			if ((conn->llcp_req == conn->llcp_ack) ||
   165e0:	f893 10e4 	ldrb.w	r1, [r3, #228]	; 0xe4
   165e4:	f893 20e5 	ldrb.w	r2, [r3, #229]	; 0xe5
   165e8:	4291      	cmp	r1, r2
   165ea:	d012      	beq.n	16612 <ll_start_enc_req_send+0x8a>
   165ec:	f893 20e6 	ldrb.w	r2, [r3, #230]	; 0xe6
   165f0:	2a03      	cmp	r2, #3
   165f2:	d10e      	bne.n	16612 <ll_start_enc_req_send+0x8a>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   165f4:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
			conn->llcp.encryption.error_code = error_code;
   165f8:	f883 50f5 	strb.w	r5, [r3, #245]	; 0xf5
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   165fc:	f360 0201 	bfi	r2, r0, #0, #2
   16600:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
}
   16604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			    conn->llcp_terminate.req) {
   16606:	f893 1140 	ldrb.w	r1, [r3, #320]	; 0x140
			if (conn->llcp_terminate.ack !=
   1660a:	f893 2141 	ldrb.w	r2, [r3, #321]	; 0x141
   1660e:	428a      	cmp	r2, r1
   16610:	d001      	beq.n	16616 <ll_start_enc_req_send+0x8e>
				return BT_HCI_ERR_CMD_DISALLOWED;
   16612:	200c      	movs	r0, #12
}
   16614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			conn->llcp_terminate.req++;
   16616:	3201      	adds	r2, #1
   16618:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
			conn->llcp_terminate.reason_own = error_code;
   1661c:	f883 5142 	strb.w	r5, [r3, #322]	; 0x142
	return 0;
   16620:	2000      	movs	r0, #0
}
   16622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   16624:	2002      	movs	r0, #2
}
   16626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00016628 <lll_chan_sel_1>:
#endif /* CONFIG_BT_CTLR_CHAN_SEL_2 */

#if defined(CONFIG_BT_CONN)
uint8_t lll_chan_sel_1(uint8_t *chan_use, uint8_t hop, uint16_t latency, uint8_t *chan_map,
		    uint8_t chan_count)
{
   16628:	b470      	push	{r4, r5, r6}
   1662a:	4605      	mov	r5, r0
	uint8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   1662c:	7800      	ldrb	r0, [r0, #0]
   1662e:	4c1b      	ldr	r4, [pc, #108]	; (1669c <lll_chan_sel_1+0x74>)
   16630:	fb02 1101 	mla	r1, r2, r1, r1
   16634:	180a      	adds	r2, r1, r0
   16636:	fb84 0102 	smull	r0, r1, r4, r2
   1663a:	4411      	add	r1, r2
   1663c:	1149      	asrs	r1, r1, #5
   1663e:	eb01 04c1 	add.w	r4, r1, r1, lsl #3
   16642:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   16646:	1a51      	subs	r1, r2, r1
   16648:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   1664a:	08c2      	lsrs	r2, r0, #3
	*chan_use = chan_next;
   1664c:	7028      	strb	r0, [r5, #0]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   1664e:	5c9c      	ldrb	r4, [r3, r2]
{
   16650:	f89d 500c 	ldrb.w	r5, [sp, #12]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   16654:	f001 0107 	and.w	r1, r1, #7
   16658:	410c      	asrs	r4, r1
   1665a:	f014 0401 	ands.w	r4, r4, #1
   1665e:	d11b      	bne.n	16698 <lll_chan_sel_1+0x70>
		uint8_t chan_index;

		chan_index = chan_next % chan_count;
   16660:	fbb0 f2f5 	udiv	r2, r0, r5
   16664:	fb05 0212 	mls	r2, r5, r2, r0
   16668:	b2d2      	uxtb	r2, r2
	uint8_t chan_next;
	uint8_t byte_count;

	chan_next = 0U;
	byte_count = 5U;
	while (byte_count--) {
   1666a:	1e5d      	subs	r5, r3, #1
   1666c:	1d1e      	adds	r6, r3, #4
		uint8_t bite;
		uint8_t bit_count;

		bite = *chan_map;
   1666e:	f104 0108 	add.w	r1, r4, #8
   16672:	f815 3f01 	ldrb.w	r3, [r5, #1]!
		bit_count = 8U;
		while (bit_count--) {
   16676:	4620      	mov	r0, r4
   16678:	b2cc      	uxtb	r4, r1
			if (bite & 0x01) {
   1667a:	f013 0f01 	tst.w	r3, #1
				if (chan_index == 0U) {
					break;
				}
				chan_index--;
			}
			chan_next++;
   1667e:	f100 0101 	add.w	r1, r0, #1
			bite >>= 1;
   16682:	ea4f 0353 	mov.w	r3, r3, lsr #1
			if (bite & 0x01) {
   16686:	d002      	beq.n	1668e <lll_chan_sel_1+0x66>
				if (chan_index == 0U) {
   16688:	b132      	cbz	r2, 16698 <lll_chan_sel_1+0x70>
				chan_index--;
   1668a:	3a01      	subs	r2, #1
   1668c:	b2d2      	uxtb	r2, r2
			chan_next++;
   1668e:	b2c8      	uxtb	r0, r1
		while (bit_count--) {
   16690:	4284      	cmp	r4, r0
   16692:	d1f2      	bne.n	1667a <lll_chan_sel_1+0x52>
	while (byte_count--) {
   16694:	42b5      	cmp	r5, r6
   16696:	d1ea      	bne.n	1666e <lll_chan_sel_1+0x46>
}
   16698:	bc70      	pop	{r4, r5, r6}
   1669a:	4770      	bx	lr
   1669c:	dd67c8a7 	.word	0xdd67c8a7

000166a0 <lll_chan_id>:
{
   166a0:	b410      	push	{r4}
	uint16_t aa_ls = ((uint16_t)access_addr[1] << 8) | access_addr[0];
   166a2:	7844      	ldrb	r4, [r0, #1]
	uint16_t aa_ms = ((uint16_t)access_addr[3] << 8) | access_addr[2];
   166a4:	78c1      	ldrb	r1, [r0, #3]
   166a6:	7883      	ldrb	r3, [r0, #2]
	uint16_t aa_ls = ((uint16_t)access_addr[1] << 8) | access_addr[0];
   166a8:	7802      	ldrb	r2, [r0, #0]
	uint16_t aa_ms = ((uint16_t)access_addr[3] << 8) | access_addr[2];
   166aa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	uint16_t aa_ls = ((uint16_t)access_addr[1] << 8) | access_addr[0];
   166ae:	ea42 2004 	orr.w	r0, r2, r4, lsl #8
}
   166b2:	4058      	eors	r0, r3
   166b4:	bc10      	pop	{r4}
   166b6:	4770      	bx	lr

000166b8 <lll_chan_sel_2>:
{
   166b8:	b5f0      	push	{r4, r5, r6, r7, lr}
/* Attribution:
 * http://graphics.stanford.edu/%7Eseander/bithacks.html#ReverseByteWith32Bits
 */
static uint8_t chan_rev_8(uint8_t b)
{
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   166ba:	4f2f      	ldr	r7, [pc, #188]	; (16778 <lll_chan_sel_2+0xc0>)
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   166bc:	4e2f      	ldr	r6, [pc, #188]	; (1677c <lll_chan_sel_2+0xc4>)
static uint16_t chan_prn(uint16_t counter, uint16_t chan_id)
{
	uint8_t iterate;
	uint16_t prn_e;

	prn_e = counter ^ chan_id;
   166be:	ea80 0501 	eor.w	r5, r0, r1
   166c2:	2403      	movs	r4, #3
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   166c4:	0a28      	lsrs	r0, r5, #8
   166c6:	b2ed      	uxtb	r5, r5
   166c8:	eb00 2080 	add.w	r0, r0, r0, lsl #10
   166cc:	eb05 2585 	add.w	r5, r5, r5, lsl #10
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   166d0:	ea06 1e40 	and.w	lr, r6, r0, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   166d4:	ea07 0c40 	and.w	ip, r7, r0, lsl #1
   166d8:	ea07 0045 	and.w	r0, r7, r5, lsl #1
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   166dc:	ea06 1545 	and.w	r5, r6, r5, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   166e0:	ea4c 0c0e 	orr.w	ip, ip, lr
   166e4:	4328      	orrs	r0, r5
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   166e6:	eb00 2500 	add.w	r5, r0, r0, lsl #8
   166ea:	eb0c 2e0c 	add.w	lr, ip, ip, lsl #8
   166ee:	eb00 2005 	add.w	r0, r0, r5, lsl #8
   166f2:	eb0c 2c0e 	add.w	ip, ip, lr, lsl #8
   166f6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   166fa:	f3c0 4007 	ubfx	r0, r0, #16, #8
   166fe:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   16702:	eb00 1000 	add.w	r0, r0, r0, lsl #4
   16706:	3c01      	subs	r4, #1
   16708:	4408      	add	r0, r1

	for (iterate = 0U; iterate < 3; iterate++) {
   1670a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   1670e:	b285      	uxth	r5, r0
	for (iterate = 0U; iterate < 3; iterate++) {
   16710:	d1d8      	bne.n	166c4 <lll_chan_sel_2+0xc>
	chan_next = prn_e % 37;
   16712:	481b      	ldr	r0, [pc, #108]	; (16780 <lll_chan_sel_2+0xc8>)
		prn_e = chan_perm(prn_e);
		prn_e = chan_mam(prn_e, chan_id);
	}

	prn_e ^= chan_id;
   16714:	4069      	eors	r1, r5
	chan_next = prn_e % 37;
   16716:	fba0 5001 	umull	r5, r0, r0, r1
   1671a:	1a0d      	subs	r5, r1, r0
   1671c:	eb00 0055 	add.w	r0, r0, r5, lsr #1
   16720:	0940      	lsrs	r0, r0, #5
   16722:	eb00 05c0 	add.w	r5, r0, r0, lsl #3
   16726:	eb00 0085 	add.w	r0, r0, r5, lsl #2
   1672a:	1a08      	subs	r0, r1, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   1672c:	f3c0 05c4 	ubfx	r5, r0, #3, #5
   16730:	f000 0607 	and.w	r6, r0, #7
   16734:	5d55      	ldrb	r5, [r2, r5]
   16736:	4135      	asrs	r5, r6
   16738:	07ed      	lsls	r5, r5, #31
	chan_next = prn_e % 37;
   1673a:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   1673c:	d41a      	bmi.n	16774 <lll_chan_sel_2+0xbc>
		chan_index = ((uint32_t)chan_count * prn_e) >> 16;
   1673e:	fb01 f303 	mul.w	r3, r1, r3
   16742:	1e56      	subs	r6, r2, #1
   16744:	f3c3 4307 	ubfx	r3, r3, #16, #8
	while (byte_count--) {
   16748:	3204      	adds	r2, #4
		bite = *chan_map;
   1674a:	f104 0508 	add.w	r5, r4, #8
   1674e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		while (bit_count--) {
   16752:	4620      	mov	r0, r4
   16754:	b2ec      	uxtb	r4, r5
			if (bite & 0x01) {
   16756:	f011 0f01 	tst.w	r1, #1
			chan_next++;
   1675a:	f100 0501 	add.w	r5, r0, #1
			bite >>= 1;
   1675e:	ea4f 0151 	mov.w	r1, r1, lsr #1
			if (bite & 0x01) {
   16762:	d002      	beq.n	1676a <lll_chan_sel_2+0xb2>
				if (chan_index == 0U) {
   16764:	b133      	cbz	r3, 16774 <lll_chan_sel_2+0xbc>
				chan_index--;
   16766:	3b01      	subs	r3, #1
   16768:	b2db      	uxtb	r3, r3
			chan_next++;
   1676a:	b2e8      	uxtb	r0, r5
		while (bit_count--) {
   1676c:	42a0      	cmp	r0, r4
   1676e:	d1f2      	bne.n	16756 <lll_chan_sel_2+0x9e>
	while (byte_count--) {
   16770:	42b2      	cmp	r2, r6
   16772:	d1ea      	bne.n	1674a <lll_chan_sel_2+0x92>
}
   16774:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16776:	bf00      	nop
   16778:	00022110 	.word	0x00022110
   1677c:	00088440 	.word	0x00088440
   16780:	bacf914d 	.word	0xbacf914d

00016784 <wl_find>:
		wl[i].taken = 0U;
	}
}

static uint8_t wl_find(uint8_t addr_type, uint8_t *addr, uint8_t *free)
{
   16784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16788:	4688      	mov	r8, r1
	int i;

	if (free) {
   1678a:	4615      	mov	r5, r2
   1678c:	b10a      	cbz	r2, 16792 <wl_find+0xe>
		*free = FILTER_IDX_NONE;
   1678e:	23ff      	movs	r3, #255	; 0xff
   16790:	7013      	strb	r3, [r2, #0]
   16792:	4e17      	ldr	r6, [pc, #92]	; (167f0 <wl_find+0x6c>)
	}

	for (i = 0; i < WL_SIZE; i++) {
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   16794:	f000 0701 	and.w	r7, r0, #1
   16798:	f106 0902 	add.w	r9, r6, #2
{
   1679c:	2400      	movs	r4, #0
   1679e:	e004      	b.n	167aa <wl_find+0x26>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   167a0:	42ba      	cmp	r2, r7
   167a2:	d014      	beq.n	167ce <wl_find+0x4a>
	for (i = 0; i < WL_SIZE; i++) {
   167a4:	3401      	adds	r4, #1
   167a6:	2c08      	cmp	r4, #8
   167a8:	d00e      	beq.n	167c8 <wl_find+0x44>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   167aa:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   167ae:	07d9      	lsls	r1, r3, #31
   167b0:	f3c3 0240 	ubfx	r2, r3, #1, #1
   167b4:	d4f4      	bmi.n	167a0 <wl_find+0x1c>
			return i;
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   167b6:	2d00      	cmp	r5, #0
   167b8:	d0f4      	beq.n	167a4 <wl_find+0x20>
   167ba:	782b      	ldrb	r3, [r5, #0]
   167bc:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   167be:	bf08      	it	eq
   167c0:	702c      	strbeq	r4, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
   167c2:	3401      	adds	r4, #1
   167c4:	2c08      	cmp	r4, #8
   167c6:	d1f0      	bne.n	167aa <wl_find+0x26>
		}
	}

	return FILTER_IDX_NONE;
   167c8:	20ff      	movs	r0, #255	; 0xff
}
   167ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   167ce:	2206      	movs	r2, #6
   167d0:	4641      	mov	r1, r8
   167d2:	eb09 00c4 	add.w	r0, r9, r4, lsl #3
   167d6:	f00c ff36 	bl	23646 <memcmp>
   167da:	b130      	cbz	r0, 167ea <wl_find+0x66>
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   167dc:	2d00      	cmp	r5, #0
   167de:	d0e1      	beq.n	167a4 <wl_find+0x20>
   167e0:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   167e4:	07db      	lsls	r3, r3, #31
   167e6:	d4dd      	bmi.n	167a4 <wl_find+0x20>
   167e8:	e7e7      	b.n	167ba <wl_find+0x36>
			return i;
   167ea:	b2e0      	uxtb	r0, r4
   167ec:	e7ed      	b.n	167ca <wl_find+0x46>
   167ee:	bf00      	nop
   167f0:	20002430 	.word	0x20002430

000167f4 <filter_insert>:
}
#endif /* !CONFIG_BT_CTLR_PRIVACY */

static void filter_insert(struct lll_filter *filter, int index, uint8_t addr_type,
			   uint8_t *bdaddr)
{
   167f4:	b430      	push	{r4, r5}
	filter->enable_bitmask |= BIT(index);
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   167f6:	7845      	ldrb	r5, [r0, #1]
	filter->enable_bitmask |= BIT(index);
   167f8:	7804      	ldrb	r4, [r0, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   167fa:	408a      	lsls	r2, r1
   167fc:	4315      	orrs	r5, r2
	filter->enable_bitmask |= BIT(index);
   167fe:	2201      	movs	r2, #1
   16800:	408a      	lsls	r2, r1
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   16802:	eb01 0141 	add.w	r1, r1, r1, lsl #1
	filter->enable_bitmask |= BIT(index);
   16806:	4314      	orrs	r4, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   16808:	0049      	lsls	r1, r1, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1680a:	7045      	strb	r5, [r0, #1]
	filter->enable_bitmask |= BIT(index);
   1680c:	7004      	strb	r4, [r0, #0]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1680e:	3102      	adds	r1, #2
   16810:	681a      	ldr	r2, [r3, #0]
   16812:	5042      	str	r2, [r0, r1]
   16814:	4401      	add	r1, r0
   16816:	889b      	ldrh	r3, [r3, #4]
   16818:	808b      	strh	r3, [r1, #4]
}
   1681a:	bc30      	pop	{r4, r5}
   1681c:	4770      	bx	lr
   1681e:	bf00      	nop

00016820 <wl_update>:
{
   16820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16824:	4d16      	ldr	r5, [pc, #88]	; (16880 <wl_update+0x60>)
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   16826:	f8df 8060 	ldr.w	r8, [pc, #96]	; 16888 <wl_update+0x68>
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   1682a:	4f16      	ldr	r7, [pc, #88]	; (16884 <wl_update+0x64>)
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   1682c:	f8df 905c 	ldr.w	r9, [pc, #92]	; 1688c <wl_update+0x6c>
   16830:	1eae      	subs	r6, r5, #2
{
   16832:	2400      	movs	r4, #0
		if (!wl[i].taken) {
   16834:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   16838:	f013 0f01 	tst.w	r3, #1
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   1683c:	4621      	mov	r1, r4
   1683e:	462b      	mov	r3, r5
   16840:	4638      	mov	r0, r7
		if (!wl[i].taken) {
   16842:	d015      	beq.n	16870 <wl_update+0x50>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   16844:	f898 2000 	ldrb.w	r2, [r8]
   16848:	b162      	cbz	r2, 16864 <wl_update+0x44>
		j = wl[i].rl_idx;
   1684a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   1684e:	2a07      	cmp	r2, #7
   16850:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
   16854:	d806      	bhi.n	16864 <wl_update+0x44>
   16856:	f819 203c 	ldrb.w	r2, [r9, ip, lsl #3]
   1685a:	f012 0f04 	tst.w	r2, #4
   1685e:	d001      	beq.n	16864 <wl_update+0x44>
   16860:	06d2      	lsls	r2, r2, #27
   16862:	d505      	bpl.n	16870 <wl_update+0x50>
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   16864:	f816 2034 	ldrb.w	r2, [r6, r4, lsl #3]
   16868:	f3c2 0240 	ubfx	r2, r2, #1, #1
   1686c:	f7ff ffc2 	bl	167f4 <filter_insert>
	for (i = 0U; i < WL_SIZE; i++) {
   16870:	3401      	adds	r4, #1
   16872:	2c08      	cmp	r4, #8
   16874:	f105 0508 	add.w	r5, r5, #8
   16878:	d1dc      	bne.n	16834 <wl_update+0x14>
}
   1687a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1687e:	bf00      	nop
   16880:	20002432 	.word	0x20002432
   16884:	20002470 	.word	0x20002470
   16888:	200031bd 	.word	0x200031bd
   1688c:	200022b8 	.word	0x200022b8

00016890 <rl_update>:
{
   16890:	b570      	push	{r4, r5, r6, lr}
   16892:	4d0c      	ldr	r5, [pc, #48]	; (168c4 <rl_update+0x34>)
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   16894:	480c      	ldr	r0, [pc, #48]	; (168c8 <rl_update+0x38>)
   16896:	1c6e      	adds	r6, r5, #1
{
   16898:	2400      	movs	r4, #0
   1689a:	e002      	b.n	168a2 <rl_update+0x12>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1689c:	3401      	adds	r4, #1
   1689e:	2c08      	cmp	r4, #8
   168a0:	d00f      	beq.n	168c2 <rl_update+0x32>
		if (rl[i].taken) {
   168a2:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   168a6:	00d3      	lsls	r3, r2, #3
   168a8:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
   168ac:	07d1      	lsls	r1, r2, #31
   168ae:	d5f5      	bpl.n	1689c <rl_update+0xc>
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   168b0:	4621      	mov	r1, r4
   168b2:	4433      	add	r3, r6
   168b4:	f3c2 1280 	ubfx	r2, r2, #6, #1
   168b8:	3401      	adds	r4, #1
   168ba:	f7ff ff9b 	bl	167f4 <filter_insert>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   168be:	2c08      	cmp	r4, #8
   168c0:	d1ef      	bne.n	168a2 <rl_update+0x12>
}
   168c2:	bd70      	pop	{r4, r5, r6, pc}
   168c4:	200022b8 	.word	0x200022b8
   168c8:	200023f8 	.word	0x200023f8

000168cc <ll_wl_size_get>:
}
   168cc:	2008      	movs	r0, #8
   168ce:	4770      	bx	lr

000168d0 <ll_wl_clear>:
{
   168d0:	b510      	push	{r4, lr}
	if (ull_adv_filter_pol_get(0)) {
   168d2:	2000      	movs	r0, #0
   168d4:	f7fa ff44 	bl	11760 <ull_adv_filter_pol_get>
   168d8:	b9d8      	cbnz	r0, 16912 <ll_wl_clear+0x42>
   168da:	4a0f      	ldr	r2, [pc, #60]	; (16918 <ll_wl_clear+0x48>)
			rl[j].wl = 0U;
   168dc:	4c0f      	ldr	r4, [pc, #60]	; (1691c <ll_wl_clear+0x4c>)
		uint8_t j = wl[i].rl_idx;
   168de:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
   168e2:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   168e4:	2b07      	cmp	r3, #7
			rl[j].wl = 0U;
   168e6:	eb03 0183 	add.w	r1, r3, r3, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   168ea:	d805      	bhi.n	168f8 <ll_wl_clear+0x28>
			rl[j].wl = 0U;
   168ec:	f814 3031 	ldrb.w	r3, [r4, r1, lsl #3]
   168f0:	f36f 1345 	bfc	r3, #5, #1
   168f4:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
		wl[i].taken = 0U;
   168f8:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   168fc:	f36f 0300 	bfc	r3, #0, #1
   16900:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   16904:	3001      	adds	r0, #1
   16906:	2808      	cmp	r0, #8
   16908:	d1e9      	bne.n	168de <ll_wl_clear+0xe>
	wl_anon = 0U;
   1690a:	4b05      	ldr	r3, [pc, #20]	; (16920 <ll_wl_clear+0x50>)
   1690c:	2000      	movs	r0, #0
   1690e:	7018      	strb	r0, [r3, #0]
}
   16910:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   16912:	200c      	movs	r0, #12
}
   16914:	bd10      	pop	{r4, pc}
   16916:	bf00      	nop
   16918:	20002430 	.word	0x20002430
   1691c:	200022b8 	.word	0x200022b8
   16920:	200031be 	.word	0x200031be

00016924 <ll_wl_remove>:
{
   16924:	b538      	push	{r3, r4, r5, lr}
   16926:	4605      	mov	r5, r0
	if (ull_adv_filter_pol_get(0)) {
   16928:	2000      	movs	r0, #0
   1692a:	f7fa ff19 	bl	11760 <ull_adv_filter_pol_get>
   1692e:	bb30      	cbnz	r0, 1697e <ll_wl_remove+0x5a>
   16930:	4604      	mov	r4, r0
	if (addr->type == ADDR_TYPE_ANON) {
   16932:	7828      	ldrb	r0, [r5, #0]
   16934:	28ff      	cmp	r0, #255	; 0xff
   16936:	d01e      	beq.n	16976 <ll_wl_remove+0x52>
	uint8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   16938:	1c69      	adds	r1, r5, #1
   1693a:	4622      	mov	r2, r4
   1693c:	f7ff ff22 	bl	16784 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   16940:	2807      	cmp	r0, #7
   16942:	d901      	bls.n	16948 <ll_wl_remove+0x24>
   16944:	2002      	movs	r0, #2
}
   16946:	bd38      	pop	{r3, r4, r5, pc}
		uint8_t j = wl[i].rl_idx;
   16948:	4a0e      	ldr	r2, [pc, #56]	; (16984 <ll_wl_remove+0x60>)
   1694a:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
   1694e:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   16950:	2b07      	cmp	r3, #7
   16952:	d808      	bhi.n	16966 <ll_wl_remove+0x42>
			rl[j].wl = 0U;
   16954:	490c      	ldr	r1, [pc, #48]	; (16988 <ll_wl_remove+0x64>)
   16956:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1695a:	f811 5033 	ldrb.w	r5, [r1, r3, lsl #3]
   1695e:	f364 1545 	bfi	r5, r4, #5, #1
   16962:	f801 5033 	strb.w	r5, [r1, r3, lsl #3]
		wl[i].taken = 0U;
   16966:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   1696a:	f36f 0300 	bfc	r3, #0, #1
   1696e:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
		return 0;
   16972:	2000      	movs	r0, #0
}
   16974:	bd38      	pop	{r3, r4, r5, pc}
		wl_anon = 0U;
   16976:	4b05      	ldr	r3, [pc, #20]	; (1698c <ll_wl_remove+0x68>)
   16978:	701c      	strb	r4, [r3, #0]
		return 0;
   1697a:	4620      	mov	r0, r4
}
   1697c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1697e:	200c      	movs	r0, #12
}
   16980:	bd38      	pop	{r3, r4, r5, pc}
   16982:	bf00      	nop
   16984:	20002430 	.word	0x20002430
   16988:	200022b8 	.word	0x200022b8
   1698c:	200031be 	.word	0x200031be

00016990 <ll_rl_id_addr_get>:
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   16990:	2807      	cmp	r0, #7
{
   16992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16996:	4604      	mov	r4, r0
   16998:	460e      	mov	r6, r1
   1699a:	4615      	mov	r5, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   1699c:	d819      	bhi.n	169d2 <ll_rl_id_addr_get+0x42>
	LL_ASSERT(rl[rl_idx].taken);
   1699e:	4f1a      	ldr	r7, [pc, #104]	; (16a08 <ll_rl_id_addr_get+0x78>)
   169a0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   169a4:	ea4f 0884 	mov.w	r8, r4, lsl #2
   169a8:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   169ac:	07db      	lsls	r3, r3, #31
   169ae:	d51d      	bpl.n	169ec <ll_rl_id_addr_get+0x5c>
	*id_addr_type = rl[rl_idx].id_addr_type;
   169b0:	44a0      	add	r8, r4
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   169b2:	2028      	movs	r0, #40	; 0x28
	*id_addr_type = rl[rl_idx].id_addr_type;
   169b4:	f817 3038 	ldrb.w	r3, [r7, r8, lsl #3]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   169b8:	fb00 7404 	mla	r4, r0, r4, r7
	*id_addr_type = rl[rl_idx].id_addr_type;
   169bc:	f3c3 1380 	ubfx	r3, r3, #6, #1
   169c0:	7033      	strb	r3, [r6, #0]
   169c2:	f8d4 3001 	ldr.w	r3, [r4, #1]
   169c6:	602b      	str	r3, [r5, #0]
   169c8:	f8b4 3005 	ldrh.w	r3, [r4, #5]
   169cc:	80ab      	strh	r3, [r5, #4]
}
   169ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   169d2:	4a0e      	ldr	r2, [pc, #56]	; (16a0c <ll_rl_id_addr_get+0x7c>)
   169d4:	490e      	ldr	r1, [pc, #56]	; (16a10 <ll_rl_id_addr_get+0x80>)
   169d6:	480f      	ldr	r0, [pc, #60]	; (16a14 <ll_rl_id_addr_get+0x84>)
   169d8:	23f3      	movs	r3, #243	; 0xf3
   169da:	f007 fcd3 	bl	1e384 <printk>
   169de:	4040      	eors	r0, r0
   169e0:	f380 8811 	msr	BASEPRI, r0
   169e4:	f04f 0003 	mov.w	r0, #3
   169e8:	df02      	svc	2
   169ea:	e7d8      	b.n	1699e <ll_rl_id_addr_get+0xe>
	LL_ASSERT(rl[rl_idx].taken);
   169ec:	4a07      	ldr	r2, [pc, #28]	; (16a0c <ll_rl_id_addr_get+0x7c>)
   169ee:	490a      	ldr	r1, [pc, #40]	; (16a18 <ll_rl_id_addr_get+0x88>)
   169f0:	4808      	ldr	r0, [pc, #32]	; (16a14 <ll_rl_id_addr_get+0x84>)
   169f2:	23f4      	movs	r3, #244	; 0xf4
   169f4:	f007 fcc6 	bl	1e384 <printk>
   169f8:	4040      	eors	r0, r0
   169fa:	f380 8811 	msr	BASEPRI, r0
   169fe:	f04f 0003 	mov.w	r0, #3
   16a02:	df02      	svc	2
   16a04:	e7d4      	b.n	169b0 <ll_rl_id_addr_get+0x20>
   16a06:	bf00      	nop
   16a08:	200022b8 	.word	0x200022b8
   16a0c:	00024b4c 	.word	0x00024b4c
   16a10:	00024b90 	.word	0x00024b90
   16a14:	00024334 	.word	0x00024334
   16a18:	00024b9c 	.word	0x00024b9c

00016a1c <ll_rl_size_get>:
   16a1c:	2008      	movs	r0, #8
   16a1e:	4770      	bx	lr

00016a20 <ll_rl_clear>:
{
   16a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   16a22:	2000      	movs	r0, #0
   16a24:	f7fa fe90 	bl	11748 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   16a28:	bb98      	cbnz	r0, 16a92 <ll_rl_clear+0x72>
		rl[i].taken = 0U;
   16a2a:	4b1b      	ldr	r3, [pc, #108]	; (16a98 <ll_rl_clear+0x78>)
	peer_irk_count = 0U;
   16a2c:	491b      	ldr	r1, [pc, #108]	; (16a9c <ll_rl_clear+0x7c>)
		rl[i].taken = 0U;
   16a2e:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   16a32:	f893 c000 	ldrb.w	ip, [r3]
   16a36:	f893 7028 	ldrb.w	r7, [r3, #40]	; 0x28
   16a3a:	f893 6078 	ldrb.w	r6, [r3, #120]	; 0x78
   16a3e:	f893 50a0 	ldrb.w	r5, [r3, #160]	; 0xa0
   16a42:	f893 40c8 	ldrb.w	r4, [r3, #200]	; 0xc8
	peer_irk_count = 0U;
   16a46:	7008      	strb	r0, [r1, #0]
		rl[i].taken = 0U;
   16a48:	f360 0200 	bfi	r2, r0, #0, #1
   16a4c:	f893 10f0 	ldrb.w	r1, [r3, #240]	; 0xf0
   16a50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
   16a54:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
   16a58:	f360 0c00 	bfi	ip, r0, #0, #1
   16a5c:	f360 0700 	bfi	r7, r0, #0, #1
   16a60:	f360 0600 	bfi	r6, r0, #0, #1
   16a64:	f360 0500 	bfi	r5, r0, #0, #1
   16a68:	f360 0400 	bfi	r4, r0, #0, #1
   16a6c:	f360 0100 	bfi	r1, r0, #0, #1
   16a70:	f360 0200 	bfi	r2, r0, #0, #1
   16a74:	f883 c000 	strb.w	ip, [r3]
   16a78:	f883 7028 	strb.w	r7, [r3, #40]	; 0x28
   16a7c:	f883 6078 	strb.w	r6, [r3, #120]	; 0x78
   16a80:	f883 50a0 	strb.w	r5, [r3, #160]	; 0xa0
   16a84:	f883 40c8 	strb.w	r4, [r3, #200]	; 0xc8
   16a88:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
   16a8c:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
}
   16a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   16a92:	200c      	movs	r0, #12
}
   16a94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16a96:	bf00      	nop
   16a98:	200022b8 	.word	0x200022b8
   16a9c:	200031bc 	.word	0x200031bc

00016aa0 <ll_rl_enable>:
{
   16aa0:	b510      	push	{r4, lr}
   16aa2:	4604      	mov	r4, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   16aa4:	2000      	movs	r0, #0
   16aa6:	f7fa fe4f 	bl	11748 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   16aaa:	b958      	cbnz	r0, 16ac4 <ll_rl_enable+0x24>
	switch (enable) {
   16aac:	b134      	cbz	r4, 16abc <ll_rl_enable+0x1c>
   16aae:	2c01      	cmp	r4, #1
   16ab0:	d001      	beq.n	16ab6 <ll_rl_enable+0x16>
   16ab2:	2012      	movs	r0, #18
}
   16ab4:	bd10      	pop	{r4, pc}
		rl_enable = 1U;
   16ab6:	4b04      	ldr	r3, [pc, #16]	; (16ac8 <ll_rl_enable+0x28>)
   16ab8:	701c      	strb	r4, [r3, #0]
}
   16aba:	bd10      	pop	{r4, pc}
		rl_enable = 0U;
   16abc:	4b02      	ldr	r3, [pc, #8]	; (16ac8 <ll_rl_enable+0x28>)
   16abe:	701c      	strb	r4, [r3, #0]
	return 0;
   16ac0:	4620      	mov	r0, r4
}
   16ac2:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   16ac4:	200c      	movs	r0, #12
}
   16ac6:	bd10      	pop	{r4, pc}
   16ac8:	200031bd 	.word	0x200031bd

00016acc <ll_rl_timeout_set>:
	rpa_timeout_ms = timeout * 1000U;
   16acc:	4a03      	ldr	r2, [pc, #12]	; (16adc <ll_rl_timeout_set+0x10>)
   16ace:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   16ad2:	fb03 f300 	mul.w	r3, r3, r0
   16ad6:	6013      	str	r3, [r2, #0]
}
   16ad8:	4770      	bx	lr
   16ada:	bf00      	nop
   16adc:	2000242c 	.word	0x2000242c

00016ae0 <ull_filter_adv_scan_state_cb>:
{
   16ae0:	b510      	push	{r4, lr}
	if (bm) {
   16ae2:	b1a8      	cbz	r0, 16b10 <ull_filter_adv_scan_state_cb+0x30>
	k_delayed_work_submit(&rpa_work, K_MSEC(rpa_timeout_ms));
   16ae4:	4b0e      	ldr	r3, [pc, #56]	; (16b20 <ull_filter_adv_scan_state_cb+0x40>)
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
   16ae6:	681a      	ldr	r2, [r3, #0]
   16ae8:	f240 30e7 	movw	r0, #999	; 0x3e7
   16aec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   16af0:	2100      	movs	r1, #0
   16af2:	fbe3 0102 	umlal	r0, r1, r3, r2
   16af6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16afa:	2300      	movs	r3, #0
   16afc:	f7e9 ff9e 	bl	a3c <__aeabi_uldivmod>
}
   16b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   16b04:	4602      	mov	r2, r0
   16b06:	460b      	mov	r3, r1
	return k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   16b08:	4806      	ldr	r0, [pc, #24]	; (16b24 <ull_filter_adv_scan_state_cb+0x44>)
   16b0a:	4907      	ldr	r1, [pc, #28]	; (16b28 <ull_filter_adv_scan_state_cb+0x48>)
   16b0c:	f007 b87c 	b.w	1dc08 <k_work_reschedule_for_queue>
	return k_work_delayable_busy_get(dwork) != 0;
   16b10:	4805      	ldr	r0, [pc, #20]	; (16b28 <ull_filter_adv_scan_state_cb+0x48>)
   16b12:	f00c fb96 	bl	23242 <k_work_delayable_busy_get>
   16b16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	int rc = k_work_cancel_delayable(&work->work);
   16b1a:	4803      	ldr	r0, [pc, #12]	; (16b28 <ull_filter_adv_scan_state_cb+0x48>)
   16b1c:	f00c bba5 	b.w	2326a <k_work_cancel_delayable>
   16b20:	2000242c 	.word	0x2000242c
   16b24:	20001390 	.word	0x20001390
   16b28:	20001260 	.word	0x20001260

00016b2c <ull_filter_adv_update>:
{
   16b2c:	b508      	push	{r3, lr}

static void filter_clear(struct lll_filter *filter)
{
	filter->enable_bitmask = 0;
   16b2e:	4b09      	ldr	r3, [pc, #36]	; (16b54 <ull_filter_adv_update+0x28>)
   16b30:	2200      	movs	r2, #0
   16b32:	801a      	strh	r2, [r3, #0]
	if (adv_fp &&
   16b34:	b930      	cbnz	r0, 16b44 <ull_filter_adv_update+0x18>
	if (rl_enable &&
   16b36:	4b08      	ldr	r3, [pc, #32]	; (16b58 <ull_filter_adv_update+0x2c>)
	filter->enable_bitmask = 0;
   16b38:	4a08      	ldr	r2, [pc, #32]	; (16b5c <ull_filter_adv_update+0x30>)
	if (rl_enable &&
   16b3a:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
   16b3c:	2100      	movs	r1, #0
   16b3e:	8011      	strh	r1, [r2, #0]
	if (rl_enable &&
   16b40:	b91b      	cbnz	r3, 16b4a <ull_filter_adv_update+0x1e>
}
   16b42:	bd08      	pop	{r3, pc}
		wl_update();
   16b44:	f7ff fe6c 	bl	16820 <wl_update>
   16b48:	e7f5      	b.n	16b36 <ull_filter_adv_update+0xa>
}
   16b4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
   16b4e:	f7ff be9f 	b.w	16890 <rl_update>
   16b52:	bf00      	nop
   16b54:	20002470 	.word	0x20002470
   16b58:	200031bd 	.word	0x200031bd
   16b5c:	200023f8 	.word	0x200023f8

00016b60 <ull_filter_rpa_update>:
{
   16b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b64:	4682      	mov	sl, r0
   16b66:	b087      	sub	sp, #28
	return z_impl_k_uptime_ticks();
   16b68:	f00c fbd7 	bl	2331a <z_impl_k_uptime_ticks>
   16b6c:	0142      	lsls	r2, r0, #5
   16b6e:	014b      	lsls	r3, r1, #5
   16b70:	ebb2 0800 	subs.w	r8, r2, r0
   16b74:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
   16b78:	eb63 0301 	sbc.w	r3, r3, r1
   16b7c:	009b      	lsls	r3, r3, #2
   16b7e:	ea4f 0288 	mov.w	r2, r8, lsl #2
   16b82:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
   16b86:	eb12 0800 	adds.w	r8, r2, r0
   16b8a:	eb43 0101 	adc.w	r1, r3, r1
   16b8e:	00c9      	lsls	r1, r1, #3
   16b90:	ea41 7158 	orr.w	r1, r1, r8, lsr #29
   16b94:	ea4f 03c8 	mov.w	r3, r8, lsl #3
   16b98:	ea4f 38d3 	mov.w	r8, r3, lsr #15
   16b9c:	0bc8      	lsrs	r0, r1, #15
   16b9e:	ea48 4841 	orr.w	r8, r8, r1, lsl #17
   16ba2:	9001      	str	r0, [sp, #4]
	bool all = timeout || (rpa_last_ms == -1) ||
   16ba4:	f1ba 0f00 	cmp.w	sl, #0
   16ba8:	d117      	bne.n	16bda <ull_filter_rpa_update+0x7a>
   16baa:	4b5d      	ldr	r3, [pc, #372]	; (16d20 <ull_filter_rpa_update+0x1c0>)
   16bac:	e9d3 2300 	ldrd	r2, r3, [r3]
   16bb0:	1c59      	adds	r1, r3, #1
   16bb2:	bf08      	it	eq
   16bb4:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   16bb8:	d00f      	beq.n	16bda <ull_filter_rpa_update+0x7a>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   16bba:	495a      	ldr	r1, [pc, #360]	; (16d24 <ull_filter_rpa_update+0x1c4>)
   16bbc:	6809      	ldr	r1, [r1, #0]
   16bbe:	ebb8 0402 	subs.w	r4, r8, r2
   16bc2:	eb60 0503 	sbc.w	r5, r0, r3
   16bc6:	2300      	movs	r3, #0
	bool all = timeout || (rpa_last_ms == -1) ||
   16bc8:	428c      	cmp	r4, r1
   16bca:	eb75 0303 	sbcs.w	r3, r5, r3
   16bce:	bfac      	ite	ge
   16bd0:	f04f 0901 	movge.w	r9, #1
   16bd4:	f04f 0900 	movlt.w	r9, #0
   16bd8:	e001      	b.n	16bde <ull_filter_rpa_update+0x7e>
   16bda:	f04f 0901 	mov.w	r9, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   16bde:	4e52      	ldr	r6, [pc, #328]	; (16d28 <ull_filter_rpa_update+0x1c8>)
   16be0:	f8df b158 	ldr.w	fp, [pc, #344]	; 16d3c <ull_filter_rpa_update+0x1dc>
   16be4:	f1a6 0717 	sub.w	r7, r6, #23
	bool all = timeout || (rpa_last_ms == -1) ||
   16be8:	2400      	movs	r4, #0
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   16bea:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   16bee:	00a5      	lsls	r5, r4, #2
   16bf0:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   16bf4:	07da      	lsls	r2, r3, #31
   16bf6:	d515      	bpl.n	16c24 <ull_filter_rpa_update+0xc4>
   16bf8:	f1b9 0f00 	cmp.w	r9, #0
   16bfc:	d101      	bne.n	16c02 <ull_filter_rpa_update+0xa2>
   16bfe:	0798      	lsls	r0, r3, #30
   16c00:	d410      	bmi.n	16c24 <ull_filter_rpa_update+0xc4>
			if (rl[i].pirk) {
   16c02:	192b      	adds	r3, r5, r4
   16c04:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   16c08:	0759      	lsls	r1, r3, #29
   16c0a:	d432      	bmi.n	16c72 <ull_filter_rpa_update+0x112>
			if (rl[i].lirk) {
   16c0c:	192b      	adds	r3, r5, r4
   16c0e:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   16c12:	071a      	lsls	r2, r3, #28
   16c14:	d419      	bmi.n	16c4a <ull_filter_rpa_update+0xea>
			rl[i].rpas_ready = 1U;
   16c16:	4425      	add	r5, r4
   16c18:	f817 3035 	ldrb.w	r3, [r7, r5, lsl #3]
   16c1c:	f043 0302 	orr.w	r3, r3, #2
   16c20:	f807 3035 	strb.w	r3, [r7, r5, lsl #3]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   16c24:	3401      	adds	r4, #1
   16c26:	2c08      	cmp	r4, #8
   16c28:	f106 0628 	add.w	r6, r6, #40	; 0x28
   16c2c:	d1dd      	bne.n	16bea <ull_filter_rpa_update+0x8a>
	if (all) {
   16c2e:	f1b9 0f00 	cmp.w	r9, #0
   16c32:	d004      	beq.n	16c3e <ull_filter_rpa_update+0xde>
		rpa_last_ms = now;
   16c34:	4b3a      	ldr	r3, [pc, #232]	; (16d20 <ull_filter_rpa_update+0x1c0>)
   16c36:	9a01      	ldr	r2, [sp, #4]
   16c38:	f8c3 8000 	str.w	r8, [r3]
   16c3c:	605a      	str	r2, [r3, #4]
	if (timeout) {
   16c3e:	f1ba 0f00 	cmp.w	sl, #0
   16c42:	d139      	bne.n	16cb8 <ull_filter_rpa_update+0x158>
}
   16c44:	b007      	add	sp, #28
   16c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   16c4a:	a902      	add	r1, sp, #8
   16c4c:	f1a6 0010 	sub.w	r0, r6, #16
   16c50:	f009 fd0f 	bl	20672 <bt_rpa_create>
				LL_ASSERT(!err);
   16c54:	2800      	cmp	r0, #0
   16c56:	d155      	bne.n	16d04 <ull_filter_rpa_update+0x1a4>
				bt_addr_copy(&local_rpas[i], &rpa);
   16c58:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   16c5c:	eb0b 0342 	add.w	r3, fp, r2, lsl #1
   16c60:	9802      	ldr	r0, [sp, #8]
   16c62:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   16c66:	f84b 0012 	str.w	r0, [fp, r2, lsl #1]
				rl[i].local_rpa = &local_rpas[i];
   16c6a:	f8c6 300d 	str.w	r3, [r6, #13]
   16c6e:	8099      	strh	r1, [r3, #4]
   16c70:	e7d1      	b.n	16c16 <ull_filter_rpa_update+0xb6>
	psrc += length - 1;
   16c72:	7833      	ldrb	r3, [r6, #0]
   16c74:	4a2d      	ldr	r2, [pc, #180]	; (16d2c <ull_filter_rpa_update+0x1cc>)
   16c76:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   16c7a:	320f      	adds	r2, #15
	for (; length > 0; length--) {
   16c7c:	f10d 0307 	add.w	r3, sp, #7
   16c80:	f10d 0017 	add.w	r0, sp, #23
		*pdst++ = *psrc--;
   16c84:	f812 1901 	ldrb.w	r1, [r2], #-1
   16c88:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   16c8c:	4283      	cmp	r3, r0
   16c8e:	d1f9      	bne.n	16c84 <ull_filter_rpa_update+0x124>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   16c90:	1df1      	adds	r1, r6, #7
   16c92:	a802      	add	r0, sp, #8
   16c94:	f009 fced 	bl	20672 <bt_rpa_create>
				LL_ASSERT(!err);
   16c98:	2800      	cmp	r0, #0
   16c9a:	d0b7      	beq.n	16c0c <ull_filter_rpa_update+0xac>
   16c9c:	4a24      	ldr	r2, [pc, #144]	; (16d30 <ull_filter_rpa_update+0x1d0>)
   16c9e:	4925      	ldr	r1, [pc, #148]	; (16d34 <ull_filter_rpa_update+0x1d4>)
   16ca0:	4825      	ldr	r0, [pc, #148]	; (16d38 <ull_filter_rpa_update+0x1d8>)
   16ca2:	f240 2323 	movw	r3, #547	; 0x223
   16ca6:	f007 fb6d 	bl	1e384 <printk>
   16caa:	4040      	eors	r0, r0
   16cac:	f380 8811 	msr	BASEPRI, r0
   16cb0:	f04f 0003 	mov.w	r0, #3
   16cb4:	df02      	svc	2
   16cb6:	e7a9      	b.n	16c0c <ull_filter_rpa_update+0xac>
		adv = ull_adv_is_enabled_get(0);
   16cb8:	2000      	movs	r0, #0
   16cba:	f7fa fd37 	bl	1172c <ull_adv_is_enabled_get>
		if (adv) {
   16cbe:	4604      	mov	r4, r0
   16cc0:	2800      	cmp	r0, #0
   16cc2:	d0bf      	beq.n	16c44 <ull_filter_rpa_update+0xe4>
	if (adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   16cc4:	f890 304a 	ldrb.w	r3, [r0, #74]	; 0x4a
   16cc8:	075b      	lsls	r3, r3, #29
   16cca:	d5bb      	bpl.n	16c44 <ull_filter_rpa_update+0xe4>
	if (adv->lll.rl_idx >= ARRAY_SIZE(rl)) {
   16ccc:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
   16cd0:	2b07      	cmp	r3, #7
   16cd2:	d8b7      	bhi.n	16c44 <ull_filter_rpa_update+0xe4>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   16cd4:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   16cd8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   16cdc:	a902      	add	r1, sp, #8
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   16cde:	6add      	ldr	r5, [r3, #44]	; 0x2c
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   16ce0:	3028      	adds	r0, #40	; 0x28
   16ce2:	f001 f9cd 	bl	18080 <lll_adv_pdu_alloc>
	memcpy(pdu, prev, PDU_AC_LL_HEADER_SIZE + prev->len);
   16ce6:	786a      	ldrb	r2, [r5, #1]
   16ce8:	4629      	mov	r1, r5
   16cea:	3202      	adds	r2, #2
   16cec:	4605      	mov	r5, r0
   16cee:	f00c fcb8 	bl	23662 <memcpy>
	ull_adv_pdu_update_addrs(adv, pdu);
   16cf2:	4629      	mov	r1, r5
   16cf4:	4620      	mov	r0, r4
   16cf6:	f7fa fdc3 	bl	11880 <ull_adv_pdu_update_addrs>
	pdu->last = idx;
   16cfa:	f89d 3008 	ldrb.w	r3, [sp, #8]
   16cfe:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
   16d02:	e79f      	b.n	16c44 <ull_filter_rpa_update+0xe4>
				LL_ASSERT(!err);
   16d04:	4a0a      	ldr	r2, [pc, #40]	; (16d30 <ull_filter_rpa_update+0x1d0>)
   16d06:	490b      	ldr	r1, [pc, #44]	; (16d34 <ull_filter_rpa_update+0x1d4>)
   16d08:	480b      	ldr	r0, [pc, #44]	; (16d38 <ull_filter_rpa_update+0x1d8>)
   16d0a:	f44f 730c 	mov.w	r3, #560	; 0x230
   16d0e:	f007 fb39 	bl	1e384 <printk>
   16d12:	4040      	eors	r0, r0
   16d14:	f380 8811 	msr	BASEPRI, r0
   16d18:	f04f 0003 	mov.w	r0, #3
   16d1c:	df02      	svc	2
   16d1e:	e79b      	b.n	16c58 <ull_filter_rpa_update+0xf8>
   16d20:	20001258 	.word	0x20001258
   16d24:	2000242c 	.word	0x2000242c
   16d28:	200022cf 	.word	0x200022cf
   16d2c:	20002238 	.word	0x20002238
   16d30:	00024b4c 	.word	0x00024b4c
   16d34:	000245cc 	.word	0x000245cc
   16d38:	00024334 	.word	0x00024334
   16d3c:	20002200 	.word	0x20002200

00016d40 <rpa_timeout>:
{
   16d40:	b510      	push	{r4, lr}
	ull_filter_rpa_update(true);
   16d42:	2001      	movs	r0, #1
   16d44:	f7ff ff0c 	bl	16b60 <ull_filter_rpa_update>
	k_delayed_work_submit(&rpa_work, K_MSEC(rpa_timeout_ms));
   16d48:	4b0a      	ldr	r3, [pc, #40]	; (16d74 <rpa_timeout+0x34>)
   16d4a:	681a      	ldr	r2, [r3, #0]
   16d4c:	f240 30e7 	movw	r0, #999	; 0x3e7
   16d50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   16d54:	2100      	movs	r1, #0
   16d56:	fbe3 0102 	umlal	r0, r1, r3, r2
   16d5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16d5e:	2300      	movs	r3, #0
   16d60:	f7e9 fe6c 	bl	a3c <__aeabi_uldivmod>
}
   16d64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   16d68:	4602      	mov	r2, r0
   16d6a:	460b      	mov	r3, r1
	return k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   16d6c:	4802      	ldr	r0, [pc, #8]	; (16d78 <rpa_timeout+0x38>)
   16d6e:	4903      	ldr	r1, [pc, #12]	; (16d7c <rpa_timeout+0x3c>)
   16d70:	f006 bf4a 	b.w	1dc08 <k_work_reschedule_for_queue>
   16d74:	2000242c 	.word	0x2000242c
   16d78:	20001390 	.word	0x20001390
   16d7c:	20001260 	.word	0x20001260

00016d80 <ull_filter_adva_get>:
{
   16d80:	b570      	push	{r4, r5, r6, lr}
	uint8_t idx = adv->lll.rl_idx;
   16d82:	f890 4026 	ldrb.w	r4, [r0, #38]	; 0x26
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
   16d86:	2c07      	cmp	r4, #7
   16d88:	d810      	bhi.n	16dac <ull_filter_adva_get+0x2c>
   16d8a:	4d10      	ldr	r5, [pc, #64]	; (16dcc <ull_filter_adva_get+0x4c>)
   16d8c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   16d90:	00a6      	lsls	r6, r4, #2
   16d92:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   16d96:	071a      	lsls	r2, r3, #28
   16d98:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   16d9c:	d505      	bpl.n	16daa <ull_filter_adva_get+0x2a>
		LL_ASSERT(rl[idx].rpas_ready);
   16d9e:	079b      	lsls	r3, r3, #30
   16da0:	d506      	bpl.n	16db0 <ull_filter_adva_get+0x30>
		return rl[idx].local_rpa->val;
   16da2:	4434      	add	r4, r6
   16da4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   16da8:	6a68      	ldr	r0, [r5, #36]	; 0x24
}
   16daa:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   16dac:	2000      	movs	r0, #0
}
   16dae:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(rl[idx].rpas_ready);
   16db0:	4a07      	ldr	r2, [pc, #28]	; (16dd0 <ull_filter_adva_get+0x50>)
   16db2:	4908      	ldr	r1, [pc, #32]	; (16dd4 <ull_filter_adva_get+0x54>)
   16db4:	4808      	ldr	r0, [pc, #32]	; (16dd8 <ull_filter_adva_get+0x58>)
   16db6:	f240 2356 	movw	r3, #598	; 0x256
   16dba:	f007 fae3 	bl	1e384 <printk>
   16dbe:	4040      	eors	r0, r0
   16dc0:	f380 8811 	msr	BASEPRI, r0
   16dc4:	f04f 0003 	mov.w	r0, #3
   16dc8:	df02      	svc	2
   16dca:	e7ea      	b.n	16da2 <ull_filter_adva_get+0x22>
   16dcc:	200022b8 	.word	0x200022b8
   16dd0:	00024b4c 	.word	0x00024b4c
   16dd4:	00024bb0 	.word	0x00024bb0
   16dd8:	00024334 	.word	0x00024334

00016ddc <ull_filter_tgta_get>:
	uint8_t idx = adv->lll.rl_idx;
   16ddc:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
	if (idx < ARRAY_SIZE(rl) && rl[idx].pirk) {
   16de0:	2b07      	cmp	r3, #7
   16de2:	d80e      	bhi.n	16e02 <ull_filter_tgta_get+0x26>
   16de4:	4908      	ldr	r1, [pc, #32]	; (16e08 <ull_filter_tgta_get+0x2c>)
   16de6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   16dea:	f811 2032 	ldrb.w	r2, [r1, r2, lsl #3]
   16dee:	f3c2 0080 	ubfx	r0, r2, #2, #1
   16df2:	0752      	lsls	r2, r2, #29
   16df4:	d506      	bpl.n	16e04 <ull_filter_tgta_get+0x28>
		return rl[idx].peer_rpa.val;
   16df6:	2028      	movs	r0, #40	; 0x28
   16df8:	fb00 1303 	mla	r3, r0, r3, r1
   16dfc:	f103 001e 	add.w	r0, r3, #30
   16e00:	4770      	bx	lr
	return NULL;
   16e02:	2000      	movs	r0, #0
}
   16e04:	4770      	bx	lr
   16e06:	bf00      	nop
   16e08:	200022b8 	.word	0x200022b8

00016e0c <ull_filter_rl_find>:
{
   16e0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e10:	468b      	mov	fp, r1
	if (free) {
   16e12:	4616      	mov	r6, r2
   16e14:	b10a      	cbz	r2, 16e1a <ull_filter_rl_find+0xe>
		*free = FILTER_IDX_NONE;
   16e16:	23ff      	movs	r3, #255	; 0xff
   16e18:	7013      	strb	r3, [r2, #0]
   16e1a:	f8df 8064 	ldr.w	r8, [pc, #100]	; 16e80 <ull_filter_rl_find+0x74>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   16e1e:	f000 0901 	and.w	r9, r0, #1
   16e22:	f108 0a01 	add.w	sl, r8, #1
{
   16e26:	2400      	movs	r4, #0
   16e28:	e004      	b.n	16e34 <ull_filter_rl_find+0x28>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   16e2a:	454a      	cmp	r2, r9
   16e2c:	d019      	beq.n	16e62 <ull_filter_rl_find+0x56>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   16e2e:	3401      	adds	r4, #1
   16e30:	2c08      	cmp	r4, #8
   16e32:	d012      	beq.n	16e5a <ull_filter_rl_find+0x4e>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   16e34:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   16e38:	00e8      	lsls	r0, r5, #3
   16e3a:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   16e3e:	07d9      	lsls	r1, r3, #31
   16e40:	f3c3 1280 	ubfx	r2, r3, #6, #1
   16e44:	b2e7      	uxtb	r7, r4
   16e46:	d4f0      	bmi.n	16e2a <ull_filter_rl_find+0x1e>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   16e48:	2e00      	cmp	r6, #0
   16e4a:	d0f0      	beq.n	16e2e <ull_filter_rl_find+0x22>
   16e4c:	7833      	ldrb	r3, [r6, #0]
   16e4e:	3401      	adds	r4, #1
   16e50:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   16e52:	bf08      	it	eq
   16e54:	7037      	strbeq	r7, [r6, #0]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   16e56:	2c08      	cmp	r4, #8
   16e58:	d1ec      	bne.n	16e34 <ull_filter_rl_find+0x28>
	return FILTER_IDX_NONE;
   16e5a:	27ff      	movs	r7, #255	; 0xff
}
   16e5c:	4638      	mov	r0, r7
   16e5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   16e62:	4450      	add	r0, sl
   16e64:	2206      	movs	r2, #6
   16e66:	4659      	mov	r1, fp
   16e68:	f00c fbed 	bl	23646 <memcmp>
   16e6c:	2800      	cmp	r0, #0
   16e6e:	d0f5      	beq.n	16e5c <ull_filter_rl_find+0x50>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   16e70:	2e00      	cmp	r6, #0
   16e72:	d0dc      	beq.n	16e2e <ull_filter_rl_find+0x22>
   16e74:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   16e78:	07db      	lsls	r3, r3, #31
   16e7a:	d4d8      	bmi.n	16e2e <ull_filter_rl_find+0x22>
   16e7c:	e7e6      	b.n	16e4c <ull_filter_rl_find+0x40>
   16e7e:	bf00      	nop
   16e80:	200022b8 	.word	0x200022b8

00016e84 <ll_wl_add>:
{
   16e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16e88:	4605      	mov	r5, r0
   16e8a:	b082      	sub	sp, #8
	if (ull_adv_filter_pol_get(0)) {
   16e8c:	2000      	movs	r0, #0
   16e8e:	f7fa fc67 	bl	11760 <ull_adv_filter_pol_get>
   16e92:	2800      	cmp	r0, #0
   16e94:	d13e      	bne.n	16f14 <ll_wl_add+0x90>
   16e96:	4604      	mov	r4, r0
	if (addr->type == ADDR_TYPE_ANON) {
   16e98:	7828      	ldrb	r0, [r5, #0]
   16e9a:	28ff      	cmp	r0, #255	; 0xff
   16e9c:	d033      	beq.n	16f06 <ll_wl_add+0x82>
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   16e9e:	f105 0801 	add.w	r8, r5, #1
   16ea2:	4641      	mov	r1, r8
   16ea4:	f10d 0207 	add.w	r2, sp, #7
   16ea8:	f7ff fc6c 	bl	16784 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   16eac:	2807      	cmp	r0, #7
   16eae:	d926      	bls.n	16efe <ll_wl_add+0x7a>
	} else if (j >= ARRAY_SIZE(wl)) {
   16eb0:	f89d 6007 	ldrb.w	r6, [sp, #7]
   16eb4:	2e07      	cmp	r6, #7
   16eb6:	d83e      	bhi.n	16f36 <ll_wl_add+0xb2>
	wl[i].id_addr_type = id_addr->type & 0x1;
   16eb8:	4f21      	ldr	r7, [pc, #132]	; (16f40 <ll_wl_add+0xbc>)
   16eba:	782a      	ldrb	r2, [r5, #0]
   16ebc:	f817 3036 	ldrb.w	r3, [r7, r6, lsl #3]
   16ec0:	f362 0341 	bfi	r3, r2, #1, #1
   16ec4:	f807 3036 	strb.w	r3, [r7, r6, lsl #3]
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   16ec8:	2302      	movs	r3, #2
   16eca:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   16ece:	f8d5 2001 	ldr.w	r2, [r5, #1]
   16ed2:	50fa      	str	r2, [r7, r3]
   16ed4:	443b      	add	r3, r7
   16ed6:	f8b5 2005 	ldrh.w	r2, [r5, #5]
   16eda:	809a      	strh	r2, [r3, #4]
	j = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   16edc:	7828      	ldrb	r0, [r5, #0]
   16ede:	4622      	mov	r2, r4
   16ee0:	4641      	mov	r1, r8
   16ee2:	f7ff ff93 	bl	16e0c <ull_filter_rl_find>
	if (j < ARRAY_SIZE(rl)) {
   16ee6:	2807      	cmp	r0, #7
   16ee8:	d918      	bls.n	16f1c <ll_wl_add+0x98>
		wl[i].rl_idx = FILTER_IDX_NONE;
   16eea:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
   16eee:	22ff      	movs	r2, #255	; 0xff
   16ef0:	705a      	strb	r2, [r3, #1]
	wl[i].taken = 1U;
   16ef2:	f817 3036 	ldrb.w	r3, [r7, r6, lsl #3]
   16ef6:	f043 0301 	orr.w	r3, r3, #1
   16efa:	f807 3036 	strb.w	r3, [r7, r6, lsl #3]
	return 0;
   16efe:	2000      	movs	r0, #0
}
   16f00:	b002      	add	sp, #8
   16f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		wl_anon = 1U;
   16f06:	4b0f      	ldr	r3, [pc, #60]	; (16f44 <ll_wl_add+0xc0>)
   16f08:	2201      	movs	r2, #1
		return 0;
   16f0a:	4620      	mov	r0, r4
		wl_anon = 1U;
   16f0c:	701a      	strb	r2, [r3, #0]
}
   16f0e:	b002      	add	sp, #8
   16f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   16f14:	200c      	movs	r0, #12
}
   16f16:	b002      	add	sp, #8
   16f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rl[j].wl = 1U;
   16f1c:	490a      	ldr	r1, [pc, #40]	; (16f48 <ll_wl_add+0xc4>)
   16f1e:	eb00 0480 	add.w	r4, r0, r0, lsl #2
		wl[i].rl_idx = j;
   16f22:	eb07 02c6 	add.w	r2, r7, r6, lsl #3
		rl[j].wl = 1U;
   16f26:	f811 3034 	ldrb.w	r3, [r1, r4, lsl #3]
		wl[i].rl_idx = j;
   16f2a:	7050      	strb	r0, [r2, #1]
		rl[j].wl = 1U;
   16f2c:	f043 0320 	orr.w	r3, r3, #32
   16f30:	f801 3034 	strb.w	r3, [r1, r4, lsl #3]
   16f34:	e7dd      	b.n	16ef2 <ll_wl_add+0x6e>
   16f36:	2007      	movs	r0, #7
}
   16f38:	b002      	add	sp, #8
   16f3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16f3e:	bf00      	nop
   16f40:	20002430 	.word	0x20002430
   16f44:	200031be 	.word	0x200031be
   16f48:	200022b8 	.word	0x200022b8

00016f4c <ll_rl_add>:
{
   16f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16f50:	4606      	mov	r6, r0
   16f52:	b085      	sub	sp, #20
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   16f54:	2000      	movs	r0, #0
{
   16f56:	460d      	mov	r5, r1
   16f58:	4617      	mov	r7, r2
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   16f5a:	f7fa fbf5 	bl	11748 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   16f5e:	2800      	cmp	r0, #0
   16f60:	f040 8099 	bne.w	17096 <ll_rl_add+0x14a>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, &j);
   16f64:	46b1      	mov	r9, r6
   16f66:	f10d 020f 	add.w	r2, sp, #15
   16f6a:	f819 0b01 	ldrb.w	r0, [r9], #1
   16f6e:	4649      	mov	r1, r9
   16f70:	f7ff ff4c 	bl	16e0c <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   16f74:	2807      	cmp	r0, #7
   16f76:	f240 80a0 	bls.w	170ba <ll_rl_add+0x16e>
	} else if (j >= ARRAY_SIZE(rl)) {
   16f7a:	f89d 800f 	ldrb.w	r8, [sp, #15]
   16f7e:	f1b8 0f07 	cmp.w	r8, #7
   16f82:	f200 808c 	bhi.w	1709e <ll_rl_add+0x152>
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   16f86:	eb08 0288 	add.w	r2, r8, r8, lsl #2
   16f8a:	00d2      	lsls	r2, r2, #3
   16f8c:	4c4d      	ldr	r4, [pc, #308]	; (170c4 <ll_rl_add+0x178>)
   16f8e:	f8d9 1000 	ldr.w	r1, [r9]
   16f92:	9201      	str	r2, [sp, #4]
   16f94:	1c53      	adds	r3, r2, #1
	rl[i].id_addr_type = id_addr->type & 0x1;
   16f96:	eb08 0a88 	add.w	sl, r8, r8, lsl #2
   16f9a:	50e1      	str	r1, [r4, r3]
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   16f9c:	4423      	add	r3, r4
   16f9e:	f8b9 1004 	ldrh.w	r1, [r9, #4]
   16fa2:	8099      	strh	r1, [r3, #4]
	rl[i].id_addr_type = id_addr->type & 0x1;
   16fa4:	7831      	ldrb	r1, [r6, #0]
   16fa6:	f814 303a 	ldrb.w	r3, [r4, sl, lsl #3]
   16faa:	4693      	mov	fp, r2
   16fac:	f361 1386 	bfi	r3, r1, #6, #1
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   16fb0:	4628      	mov	r0, r5
   16fb2:	2110      	movs	r1, #16
	rl[i].id_addr_type = id_addr->type & 0x1;
   16fb4:	54a3      	strb	r3, [r4, r2]
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   16fb6:	f7f5 fe91 	bl	ccdc <mem_nz>
   16fba:	f814 300b 	ldrb.w	r3, [r4, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   16fbe:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   16fc0:	f360 0382 	bfi	r3, r0, #2, #1
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   16fc4:	4638      	mov	r0, r7
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   16fc6:	f804 300b 	strb.w	r3, [r4, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   16fca:	f7f5 fe87 	bl	ccdc <mem_nz>
   16fce:	f814 300b 	ldrb.w	r3, [r4, fp]
	if (rl[i].pirk) {
   16fd2:	9a01      	ldr	r2, [sp, #4]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   16fd4:	f000 0001 	and.w	r0, r0, #1
   16fd8:	f360 03c3 	bfi	r3, r0, #3, #1
	if (rl[i].pirk) {
   16fdc:	f013 0f04 	tst.w	r3, #4
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   16fe0:	f804 300b 	strb.w	r3, [r4, fp]
	rl[i].id_addr_type = id_addr->type & 0x1;
   16fe4:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
   16fe8:	ea4f 0b88 	mov.w	fp, r8, lsl #2
	if (rl[i].pirk) {
   16fec:	d01a      	beq.n	17024 <ll_rl_add+0xd8>
		rl[i].pirk_idx = peer_irk_count;
   16fee:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 170d0 <ll_rl_add+0x184>
		peer_irk_rl_ids[peer_irk_count] = i;
   16ff2:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 170d4 <ll_rl_add+0x188>
		rl[i].pirk_idx = peer_irk_count;
   16ff6:	f89e 1000 	ldrb.w	r1, [lr]
   16ffa:	4b33      	ldr	r3, [pc, #204]	; (170c8 <ll_rl_add+0x17c>)
		peer_irk_rl_ids[peer_irk_count] = i;
   16ffc:	f80c 8001 	strb.w	r8, [ip, r1]
		rl[i].pirk_idx = peer_irk_count;
   17000:	f88a 1017 	strb.w	r1, [sl, #23]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, IRK_SIZE);
   17004:	eb03 1c01 	add.w	ip, r3, r1, lsl #4
   17008:	3101      	adds	r1, #1
	psrc += length - 1;
   1700a:	f105 030f 	add.w	r3, r5, #15
   1700e:	f88e 1000 	strb.w	r1, [lr]
	for (; length > 0; length--) {
   17012:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   17016:	3d01      	subs	r5, #1
		*pdst++ = *psrc--;
   17018:	f813 1901 	ldrb.w	r1, [r3], #-1
   1701c:	f80c 1f01 	strb.w	r1, [ip, #1]!
	for (; length > 0; length--) {
   17020:	429d      	cmp	r5, r3
   17022:	d1f9      	bne.n	17018 <ll_rl_add+0xcc>
	if (rl[i].lirk) {
   17024:	b198      	cbz	r0, 1704e <ll_rl_add+0x102>
		memcpy(rl[i].local_irk, lirk, IRK_SIZE);
   17026:	1dd3      	adds	r3, r2, #7
   17028:	6838      	ldr	r0, [r7, #0]
   1702a:	f8d7 e004 	ldr.w	lr, [r7, #4]
   1702e:	f8d7 c008 	ldr.w	ip, [r7, #8]
   17032:	68fd      	ldr	r5, [r7, #12]
   17034:	50e0      	str	r0, [r4, r3]
		rl[i].local_rpa = NULL;
   17036:	eb0b 0108 	add.w	r1, fp, r8
		memcpy(rl[i].local_irk, lirk, IRK_SIZE);
   1703a:	4423      	add	r3, r4
		rl[i].local_rpa = NULL;
   1703c:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
   17040:	2000      	movs	r0, #0
   17042:	f8c3 e004 	str.w	lr, [r3, #4]
   17046:	f8c3 c008 	str.w	ip, [r3, #8]
   1704a:	60dd      	str	r5, [r3, #12]
   1704c:	6248      	str	r0, [r1, #36]	; 0x24
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   1704e:	f102 0318 	add.w	r3, r2, #24
   17052:	18e2      	adds	r2, r4, r3
__ssp_bos_icheck3(memset, void *, int)
   17054:	2700      	movs	r7, #0
   17056:	50e7      	str	r7, [r4, r3]
   17058:	eb0b 0508 	add.w	r5, fp, r8
   1705c:	8097      	strh	r7, [r2, #4]
	rl[i].rpas_ready = 0U;
   1705e:	f814 3035 	ldrb.w	r3, [r4, r5, lsl #3]
   17062:	00ed      	lsls	r5, r5, #3
   17064:	f023 0312 	bic.w	r3, r3, #18
   17068:	5563      	strb	r3, [r4, r5]
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   1706a:	4649      	mov	r1, r9
   1706c:	7830      	ldrb	r0, [r6, #0]
   1706e:	463a      	mov	r2, r7
   17070:	f7ff fb88 	bl	16784 <wl_find>
	if (j < ARRAY_SIZE(wl)) {
   17074:	2807      	cmp	r0, #7
   17076:	d916      	bls.n	170a6 <ll_rl_add+0x15a>
		rl[i].wl = 0U;
   17078:	5d63      	ldrb	r3, [r4, r5]
   1707a:	f367 1345 	bfi	r3, r7, #5, #1
   1707e:	5563      	strb	r3, [r4, r5]
	rl[i].taken = 1U;
   17080:	44d8      	add	r8, fp
	return 0;
   17082:	2000      	movs	r0, #0
	rl[i].taken = 1U;
   17084:	f814 3038 	ldrb.w	r3, [r4, r8, lsl #3]
   17088:	f043 0301 	orr.w	r3, r3, #1
   1708c:	f804 3038 	strb.w	r3, [r4, r8, lsl #3]
}
   17090:	b005      	add	sp, #20
   17092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   17096:	200c      	movs	r0, #12
}
   17098:	b005      	add	sp, #20
   1709a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1709e:	2007      	movs	r0, #7
}
   170a0:	b005      	add	sp, #20
   170a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		wl[j].rl_idx = i;
   170a6:	4a09      	ldr	r2, [pc, #36]	; (170cc <ll_rl_add+0x180>)
		rl[i].wl = 1U;
   170a8:	5d63      	ldrb	r3, [r4, r5]
		wl[j].rl_idx = i;
   170aa:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
		rl[i].wl = 1U;
   170ae:	f043 0320 	orr.w	r3, r3, #32
   170b2:	5563      	strb	r3, [r4, r5]
		wl[j].rl_idx = i;
   170b4:	f880 8001 	strb.w	r8, [r0, #1]
		rl[i].wl = 1U;
   170b8:	e7e2      	b.n	17080 <ll_rl_add+0x134>
		return BT_HCI_ERR_INVALID_PARAM;
   170ba:	2012      	movs	r0, #18
}
   170bc:	b005      	add	sp, #20
   170be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   170c2:	bf00      	nop
   170c4:	200022b8 	.word	0x200022b8
   170c8:	20002238 	.word	0x20002238
   170cc:	20002430 	.word	0x20002430
   170d0:	200031bc 	.word	0x200031bc
   170d4:	20002230 	.word	0x20002230

000170d8 <ll_rl_remove>:
{
   170d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   170dc:	b083      	sub	sp, #12
   170de:	4605      	mov	r5, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   170e0:	2000      	movs	r0, #0
{
   170e2:	9500      	str	r5, [sp, #0]
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   170e4:	f7fa fb30 	bl	11748 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   170e8:	2800      	cmp	r0, #0
   170ea:	d160      	bne.n	171ae <ll_rl_remove+0xd6>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   170ec:	462f      	mov	r7, r5
   170ee:	4602      	mov	r2, r0
   170f0:	4604      	mov	r4, r0
   170f2:	f817 0b01 	ldrb.w	r0, [r7], #1
   170f6:	9500      	str	r5, [sp, #0]
   170f8:	4639      	mov	r1, r7
   170fa:	f7ff fe87 	bl	16e0c <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   170fe:	2807      	cmp	r0, #7
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   17100:	4606      	mov	r6, r0
	if (i < ARRAY_SIZE(rl)) {
   17102:	d903      	bls.n	1710c <ll_rl_remove+0x34>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   17104:	2002      	movs	r0, #2
}
   17106:	b003      	add	sp, #12
   17108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (rl[i].pirk) {
   1710c:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 171cc <ll_rl_remove+0xf4>
   17110:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   17114:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   17118:	f818 3033 	ldrb.w	r3, [r8, r3, lsl #3]
   1711c:	075d      	lsls	r5, r3, #29
   1711e:	ea4f 0980 	mov.w	r9, r0, lsl #2
   17122:	d52c      	bpl.n	1717e <ll_rl_remove+0xa6>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   17124:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 171d0 <ll_rl_remove+0xf8>
   17128:	f89e c000 	ldrb.w	ip, [lr]
   1712c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
			if (pj && pi != pj) {
   17130:	f01c 0bff 	ands.w	fp, ip, #255	; 0xff
   17134:	d021      	beq.n	1717a <ll_rl_remove+0xa2>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   17136:	7dd3      	ldrb	r3, [r2, #23]
   17138:	9301      	str	r3, [sp, #4]
			if (pj && pi != pj) {
   1713a:	455b      	cmp	r3, fp
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   1713c:	461d      	mov	r5, r3
			if (pj && pi != pj) {
   1713e:	d01c      	beq.n	1717a <ll_rl_remove+0xa2>
				memcpy(peer_irks[pi], peer_irks[pj], IRK_SIZE);
   17140:	f8df a090 	ldr.w	sl, [pc, #144]	; 171d4 <ll_rl_remove+0xfc>
   17144:	eb0a 130b 	add.w	r3, sl, fp, lsl #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   17148:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1714a:	eb0a 1a05 	add.w	sl, sl, r5, lsl #4
   1714e:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
   17152:	9d00      	ldr	r5, [sp, #0]
					if (rl[k].taken && rl[k].pirk &&
   17154:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   17158:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   1715c:	f818 3033 	ldrb.w	r3, [r8, r3, lsl #3]
   17160:	07d8      	lsls	r0, r3, #31
   17162:	b2e1      	uxtb	r1, r4
   17164:	f104 0401 	add.w	r4, r4, #1
   17168:	d504      	bpl.n	17174 <ll_rl_remove+0x9c>
   1716a:	075b      	lsls	r3, r3, #29
   1716c:	d502      	bpl.n	17174 <ll_rl_remove+0x9c>
   1716e:	7dd3      	ldrb	r3, [r2, #23]
   17170:	455b      	cmp	r3, fp
   17172:	d020      	beq.n	171b6 <ll_rl_remove+0xde>
				for (k = 0U;
   17174:	2c08      	cmp	r4, #8
   17176:	d1ed      	bne.n	17154 <ll_rl_remove+0x7c>
   17178:	9500      	str	r5, [sp, #0]
			peer_irk_count--;
   1717a:	f88e c000 	strb.w	ip, [lr]
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   1717e:	9b00      	ldr	r3, [sp, #0]
   17180:	4639      	mov	r1, r7
   17182:	7818      	ldrb	r0, [r3, #0]
   17184:	2200      	movs	r2, #0
   17186:	f7ff fafd 	bl	16784 <wl_find>
		if (j < ARRAY_SIZE(wl)) {
   1718a:	2807      	cmp	r0, #7
   1718c:	d804      	bhi.n	17198 <ll_rl_remove+0xc0>
			wl[j].rl_idx = FILTER_IDX_NONE;
   1718e:	4b0d      	ldr	r3, [pc, #52]	; (171c4 <ll_rl_remove+0xec>)
   17190:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   17194:	23ff      	movs	r3, #255	; 0xff
   17196:	7043      	strb	r3, [r0, #1]
		rl[i].taken = 0U;
   17198:	444e      	add	r6, r9
		return 0;
   1719a:	2000      	movs	r0, #0
		rl[i].taken = 0U;
   1719c:	f818 3036 	ldrb.w	r3, [r8, r6, lsl #3]
   171a0:	f36f 0300 	bfc	r3, #0, #1
   171a4:	f808 3036 	strb.w	r3, [r8, r6, lsl #3]
}
   171a8:	b003      	add	sp, #12
   171aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   171ae:	200c      	movs	r0, #12
}
   171b0:	b003      	add	sp, #12
   171b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						rl[k].pirk_idx = pi;
   171b6:	9801      	ldr	r0, [sp, #4]
						peer_irk_rl_ids[pi] = k;
   171b8:	4b03      	ldr	r3, [pc, #12]	; (171c8 <ll_rl_remove+0xf0>)
   171ba:	9500      	str	r5, [sp, #0]
   171bc:	5419      	strb	r1, [r3, r0]
						rl[k].pirk_idx = pi;
   171be:	75d0      	strb	r0, [r2, #23]
						break;
   171c0:	e7db      	b.n	1717a <ll_rl_remove+0xa2>
   171c2:	bf00      	nop
   171c4:	20002430 	.word	0x20002430
   171c8:	20002230 	.word	0x20002230
   171cc:	200022b8 	.word	0x200022b8
   171d0:	200031bc 	.word	0x200031bc
   171d4:	20002238 	.word	0x20002238

000171d8 <ll_rl_crpa_set>:
{
   171d8:	b538      	push	{r3, r4, r5, lr}
   171da:	461c      	mov	r4, r3
	if ((crpa[5] & 0xc0) == 0x40) {
   171dc:	795b      	ldrb	r3, [r3, #5]
   171de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   171e2:	2b40      	cmp	r3, #64	; 0x40
   171e4:	d000      	beq.n	171e8 <ll_rl_crpa_set+0x10>
}
   171e6:	bd38      	pop	{r3, r4, r5, pc}
		if (id_addr) {
   171e8:	b119      	cbz	r1, 171f2 <ll_rl_crpa_set+0x1a>
			rl_idx = ull_filter_rl_find(id_addr_type, id_addr, NULL);
   171ea:	2200      	movs	r2, #0
   171ec:	f7ff fe0e 	bl	16e0c <ull_filter_rl_find>
   171f0:	4602      	mov	r2, r0
		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   171f2:	2a07      	cmp	r2, #7
   171f4:	d8f7      	bhi.n	171e6 <ll_rl_crpa_set+0xe>
   171f6:	4b08      	ldr	r3, [pc, #32]	; (17218 <ll_rl_crpa_set+0x40>)
   171f8:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   171fc:	f813 1031 	ldrb.w	r1, [r3, r1, lsl #3]
   17200:	07c9      	lsls	r1, r1, #31
   17202:	d5f0      	bpl.n	171e6 <ll_rl_crpa_set+0xe>
			memcpy(rl[rl_idx].curr_rpa.val, crpa,
   17204:	2028      	movs	r0, #40	; 0x28
   17206:	2118      	movs	r1, #24
   17208:	fb10 1202 	smlabb	r2, r0, r2, r1
   1720c:	6820      	ldr	r0, [r4, #0]
   1720e:	5098      	str	r0, [r3, r2]
   17210:	4413      	add	r3, r2
   17212:	88a2      	ldrh	r2, [r4, #4]
   17214:	809a      	strh	r2, [r3, #4]
}
   17216:	bd38      	pop	{r3, r4, r5, pc}
   17218:	200022b8 	.word	0x200022b8

0001721c <ll_rl_crpa_get>:
{
   1721c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1721e:	4603      	mov	r3, r0
{
   17220:	460d      	mov	r5, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   17222:	f813 0b01 	ldrb.w	r0, [r3], #1
   17226:	2200      	movs	r2, #0
   17228:	4619      	mov	r1, r3
   1722a:	f7ff fdef 	bl	16e0c <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl) &&
   1722e:	2807      	cmp	r0, #7
   17230:	d901      	bls.n	17236 <ll_rl_crpa_get+0x1a>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   17232:	2002      	movs	r0, #2
}
   17234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   17236:	4f09      	ldr	r7, [pc, #36]	; (1725c <ll_rl_crpa_get+0x40>)
   17238:	2428      	movs	r4, #40	; 0x28
   1723a:	2318      	movs	r3, #24
   1723c:	fb14 3400 	smlabb	r4, r4, r0, r3
   17240:	193e      	adds	r6, r7, r4
   17242:	4630      	mov	r0, r6
   17244:	2106      	movs	r1, #6
   17246:	f7f5 fd49 	bl	ccdc <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   1724a:	2800      	cmp	r0, #0
   1724c:	d0f1      	beq.n	17232 <ll_rl_crpa_get+0x16>
   1724e:	5938      	ldr	r0, [r7, r4]
   17250:	6028      	str	r0, [r5, #0]
   17252:	88b3      	ldrh	r3, [r6, #4]
   17254:	80ab      	strh	r3, [r5, #4]
		return 0;
   17256:	2000      	movs	r0, #0
}
   17258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1725a:	bf00      	nop
   1725c:	200022b8 	.word	0x200022b8

00017260 <ll_rl_lrpa_get>:
{
   17260:	b510      	push	{r4, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   17262:	4603      	mov	r3, r0
{
   17264:	460c      	mov	r4, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   17266:	f813 0b01 	ldrb.w	r0, [r3], #1
   1726a:	2200      	movs	r2, #0
   1726c:	4619      	mov	r1, r3
   1726e:	f7ff fdcd 	bl	16e0c <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   17272:	2807      	cmp	r0, #7
   17274:	d901      	bls.n	1727a <ll_rl_lrpa_get+0x1a>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   17276:	2002      	movs	r0, #2
}
   17278:	bd10      	pop	{r4, pc}
		bt_addr_copy(lrpa, rl[i].local_rpa);
   1727a:	4b06      	ldr	r3, [pc, #24]	; (17294 <ll_rl_lrpa_get+0x34>)
   1727c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   17280:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
		return 0;
   17284:	2000      	movs	r0, #0
   17286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   17288:	681a      	ldr	r2, [r3, #0]
   1728a:	6022      	str	r2, [r4, #0]
   1728c:	889b      	ldrh	r3, [r3, #4]
   1728e:	80a3      	strh	r3, [r4, #4]
}
   17290:	bd10      	pop	{r4, pc}
   17292:	bf00      	nop
   17294:	200022b8 	.word	0x200022b8

00017298 <ll_priv_mode_set>:
{
   17298:	b570      	push	{r4, r5, r6, lr}
   1729a:	4605      	mov	r5, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1729c:	2000      	movs	r0, #0
{
   1729e:	460e      	mov	r6, r1
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   172a0:	f7fa fa52 	bl	11748 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   172a4:	b968      	cbnz	r0, 172c2 <ll_priv_mode_set+0x2a>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   172a6:	4629      	mov	r1, r5
   172a8:	4602      	mov	r2, r0
   172aa:	4604      	mov	r4, r0
   172ac:	f811 0b01 	ldrb.w	r0, [r1], #1
   172b0:	f7ff fdac 	bl	16e0c <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   172b4:	2807      	cmp	r0, #7
   172b6:	d81c      	bhi.n	172f2 <ll_priv_mode_set+0x5a>
		switch (mode) {
   172b8:	b186      	cbz	r6, 172dc <ll_priv_mode_set+0x44>
   172ba:	2e01      	cmp	r6, #1
   172bc:	d003      	beq.n	172c6 <ll_priv_mode_set+0x2e>
   172be:	2012      	movs	r0, #18
}
   172c0:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   172c2:	200c      	movs	r0, #12
}
   172c4:	bd70      	pop	{r4, r5, r6, pc}
			rl[i].dev = 1U;
   172c6:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   172ca:	490b      	ldr	r1, [pc, #44]	; (172f8 <ll_priv_mode_set+0x60>)
   172cc:	f811 2033 	ldrb.w	r2, [r1, r3, lsl #3]
   172d0:	f042 0210 	orr.w	r2, r2, #16
   172d4:	f801 2033 	strb.w	r2, [r1, r3, lsl #3]
	return 0;
   172d8:	4620      	mov	r0, r4
}
   172da:	bd70      	pop	{r4, r5, r6, pc}
			rl[i].dev = 0U;
   172dc:	4b06      	ldr	r3, [pc, #24]	; (172f8 <ll_priv_mode_set+0x60>)
   172de:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   172e2:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
   172e6:	f366 1204 	bfi	r2, r6, #4, #1
   172ea:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
	return 0;
   172ee:	4630      	mov	r0, r6
}
   172f0:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   172f2:	2002      	movs	r0, #2
}
   172f4:	bd70      	pop	{r4, r5, r6, pc}
   172f6:	bf00      	nop
   172f8:	200022b8 	.word	0x200022b8

000172fc <ull_filter_reset>:
	wl_anon = 0U;
   172fc:	4a33      	ldr	r2, [pc, #204]	; (173cc <ull_filter_reset+0xd0>)
   172fe:	4934      	ldr	r1, [pc, #208]	; (173d0 <ull_filter_reset+0xd4>)
{
   17300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	wl_anon = 0U;
   17302:	2300      	movs	r3, #0
   17304:	4c33      	ldr	r4, [pc, #204]	; (173d4 <ull_filter_reset+0xd8>)
   17306:	7013      	strb	r3, [r2, #0]
		uint8_t j = wl[i].rl_idx;
   17308:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   1730c:	7852      	ldrb	r2, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   1730e:	2a07      	cmp	r2, #7
			rl[j].wl = 0U;
   17310:	eb02 0582 	add.w	r5, r2, r2, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   17314:	d805      	bhi.n	17322 <ull_filter_reset+0x26>
			rl[j].wl = 0U;
   17316:	f811 2035 	ldrb.w	r2, [r1, r5, lsl #3]
   1731a:	f36f 1245 	bfc	r2, #5, #1
   1731e:	f801 2035 	strb.w	r2, [r1, r5, lsl #3]
		wl[i].taken = 0U;
   17322:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   17326:	f36f 0200 	bfc	r2, #0, #1
   1732a:	f804 2033 	strb.w	r2, [r4, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   1732e:	3301      	adds	r3, #1
   17330:	2b08      	cmp	r3, #8
   17332:	d1e9      	bne.n	17308 <ull_filter_reset+0xc>
		rl[i].taken = 0U;
   17334:	780f      	ldrb	r7, [r1, #0]
   17336:	f891 5028 	ldrb.w	r5, [r1, #40]	; 0x28
   1733a:	f891 4050 	ldrb.w	r4, [r1, #80]	; 0x50
   1733e:	f891 2078 	ldrb.w	r2, [r1, #120]	; 0x78
   17342:	f891 60a0 	ldrb.w	r6, [r1, #160]	; 0xa0
	rl_enable = 0U;
   17346:	2300      	movs	r3, #0
		rl[i].taken = 0U;
   17348:	f363 0700 	bfi	r7, r3, #0, #1
   1734c:	700f      	strb	r7, [r1, #0]
	rl_enable = 0U;
   1734e:	4f22      	ldr	r7, [pc, #136]	; (173d8 <ull_filter_reset+0xdc>)
		rl[i].taken = 0U;
   17350:	f363 0500 	bfi	r5, r3, #0, #1
   17354:	f363 0400 	bfi	r4, r3, #0, #1
   17358:	f363 0200 	bfi	r2, r3, #0, #1
	rl_enable = 0U;
   1735c:	703b      	strb	r3, [r7, #0]
		rl[i].taken = 0U;
   1735e:	f881 5028 	strb.w	r5, [r1, #40]	; 0x28
	peer_irk_count = 0U;
   17362:	4f1e      	ldr	r7, [pc, #120]	; (173dc <ull_filter_reset+0xe0>)
		rl[i].taken = 0U;
   17364:	f891 50c8 	ldrb.w	r5, [r1, #200]	; 0xc8
   17368:	f881 4050 	strb.w	r4, [r1, #80]	; 0x50
   1736c:	f881 2078 	strb.w	r2, [r1, #120]	; 0x78
   17370:	f891 40f0 	ldrb.w	r4, [r1, #240]	; 0xf0
   17374:	f891 2118 	ldrb.w	r2, [r1, #280]	; 0x118
	peer_irk_count = 0U;
   17378:	703b      	strb	r3, [r7, #0]
		rl[i].taken = 0U;
   1737a:	f363 0600 	bfi	r6, r3, #0, #1
   1737e:	f363 0500 	bfi	r5, r3, #0, #1
   17382:	f363 0400 	bfi	r4, r3, #0, #1
   17386:	f363 0200 	bfi	r2, r3, #0, #1
   1738a:	f881 60a0 	strb.w	r6, [r1, #160]	; 0xa0
	rpa_last_ms = -1;
   1738e:	4b14      	ldr	r3, [pc, #80]	; (173e0 <ull_filter_reset+0xe4>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   17390:	4e14      	ldr	r6, [pc, #80]	; (173e4 <ull_filter_reset+0xe8>)
   17392:	4f15      	ldr	r7, [pc, #84]	; (173e8 <ull_filter_reset+0xec>)
		rl[i].taken = 0U;
   17394:	f881 50c8 	strb.w	r5, [r1, #200]	; 0xc8
   17398:	f881 40f0 	strb.w	r4, [r1, #240]	; 0xf0
	rpa_last_ms = -1;
   1739c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   173a0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   173a4:	e9c3 4500 	strd	r4, r5, [r3]
		rl[i].taken = 0U;
   173a8:	f881 2118 	strb.w	r2, [r1, #280]	; 0x118
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   173ac:	6037      	str	r7, [r6, #0]
	if (init) {
   173ae:	b128      	cbz	r0, 173bc <ull_filter_reset+0xc0>
}
   173b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_work_init_delayable(&work->work, handler);
   173b4:	490d      	ldr	r1, [pc, #52]	; (173ec <ull_filter_reset+0xf0>)
   173b6:	480e      	ldr	r0, [pc, #56]	; (173f0 <ull_filter_reset+0xf4>)
   173b8:	f00b bf37 	b.w	2322a <k_work_init_delayable>
	return k_work_delayable_busy_get(dwork) != 0;
   173bc:	480c      	ldr	r0, [pc, #48]	; (173f0 <ull_filter_reset+0xf4>)
   173be:	f00b ff40 	bl	23242 <k_work_delayable_busy_get>
   173c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	int rc = k_work_cancel_delayable(&work->work);
   173c6:	480a      	ldr	r0, [pc, #40]	; (173f0 <ull_filter_reset+0xf4>)
   173c8:	f00b bf4f 	b.w	2326a <k_work_cancel_delayable>
   173cc:	200031be 	.word	0x200031be
   173d0:	200022b8 	.word	0x200022b8
   173d4:	20002430 	.word	0x20002430
   173d8:	200031bd 	.word	0x200031bd
   173dc:	200031bc 	.word	0x200031bc
   173e0:	20001258 	.word	0x20001258
   173e4:	2000242c 	.word	0x2000242c
   173e8:	000dbba0 	.word	0x000dbba0
   173ec:	00016d41 	.word	0x00016d41
   173f0:	20001260 	.word	0x20001260

000173f4 <ull_filter_lll_lrpa_used>:
	return rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk;
   173f4:	2807      	cmp	r0, #7
   173f6:	d807      	bhi.n	17408 <ull_filter_lll_lrpa_used+0x14>
   173f8:	4b04      	ldr	r3, [pc, #16]	; (1740c <ull_filter_lll_lrpa_used+0x18>)
   173fa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   173fe:	f813 0030 	ldrb.w	r0, [r3, r0, lsl #3]
   17402:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   17406:	4770      	bx	lr
   17408:	2000      	movs	r0, #0
}
   1740a:	4770      	bx	lr
   1740c:	200022b8 	.word	0x200022b8

00017410 <ull_filter_lll_irks_get>:
	*count = peer_irk_count;
   17410:	4b02      	ldr	r3, [pc, #8]	; (1741c <ull_filter_lll_irks_get+0xc>)
   17412:	781b      	ldrb	r3, [r3, #0]
   17414:	7003      	strb	r3, [r0, #0]
}
   17416:	4802      	ldr	r0, [pc, #8]	; (17420 <ull_filter_lll_irks_get+0x10>)
   17418:	4770      	bx	lr
   1741a:	bf00      	nop
   1741c:	200031bc 	.word	0x200031bc
   17420:	20002238 	.word	0x20002238

00017424 <ull_filter_lll_rl_irk_idx>:
{
   17424:	b510      	push	{r4, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   17426:	4b20      	ldr	r3, [pc, #128]	; (174a8 <ull_filter_lll_rl_irk_idx+0x84>)
   17428:	781b      	ldrb	r3, [r3, #0]
   1742a:	4283      	cmp	r3, r0
{
   1742c:	4604      	mov	r4, r0
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1742e:	d90c      	bls.n	1744a <ull_filter_lll_rl_irk_idx+0x26>
	i = peer_irk_rl_ids[irkmatch_id];
   17430:	4b1e      	ldr	r3, [pc, #120]	; (174ac <ull_filter_lll_rl_irk_idx+0x88>)
   17432:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   17434:	2c07      	cmp	r4, #7
   17436:	d819      	bhi.n	1746c <ull_filter_lll_rl_irk_idx+0x48>
	LL_ASSERT(rl[i].taken);
   17438:	4b1d      	ldr	r3, [pc, #116]	; (174b0 <ull_filter_lll_rl_irk_idx+0x8c>)
   1743a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1743e:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   17442:	07db      	lsls	r3, r3, #31
   17444:	d520      	bpl.n	17488 <ull_filter_lll_rl_irk_idx+0x64>
}
   17446:	4620      	mov	r0, r4
   17448:	bd10      	pop	{r4, pc}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1744a:	4a1a      	ldr	r2, [pc, #104]	; (174b4 <ull_filter_lll_rl_irk_idx+0x90>)
   1744c:	491a      	ldr	r1, [pc, #104]	; (174b8 <ull_filter_lll_rl_irk_idx+0x94>)
   1744e:	481b      	ldr	r0, [pc, #108]	; (174bc <ull_filter_lll_rl_irk_idx+0x98>)
   17450:	f240 23c6 	movw	r3, #710	; 0x2c6
   17454:	f006 ff96 	bl	1e384 <printk>
   17458:	4040      	eors	r0, r0
   1745a:	f380 8811 	msr	BASEPRI, r0
   1745e:	f04f 0003 	mov.w	r0, #3
   17462:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   17464:	4b11      	ldr	r3, [pc, #68]	; (174ac <ull_filter_lll_rl_irk_idx+0x88>)
   17466:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   17468:	2c07      	cmp	r4, #7
   1746a:	d9e5      	bls.n	17438 <ull_filter_lll_rl_irk_idx+0x14>
   1746c:	4a11      	ldr	r2, [pc, #68]	; (174b4 <ull_filter_lll_rl_irk_idx+0x90>)
   1746e:	4914      	ldr	r1, [pc, #80]	; (174c0 <ull_filter_lll_rl_irk_idx+0x9c>)
   17470:	4812      	ldr	r0, [pc, #72]	; (174bc <ull_filter_lll_rl_irk_idx+0x98>)
   17472:	f44f 7332 	mov.w	r3, #712	; 0x2c8
   17476:	f006 ff85 	bl	1e384 <printk>
   1747a:	4040      	eors	r0, r0
   1747c:	f380 8811 	msr	BASEPRI, r0
   17480:	f04f 0003 	mov.w	r0, #3
   17484:	df02      	svc	2
   17486:	e7d7      	b.n	17438 <ull_filter_lll_rl_irk_idx+0x14>
	LL_ASSERT(rl[i].taken);
   17488:	4a0a      	ldr	r2, [pc, #40]	; (174b4 <ull_filter_lll_rl_irk_idx+0x90>)
   1748a:	490e      	ldr	r1, [pc, #56]	; (174c4 <ull_filter_lll_rl_irk_idx+0xa0>)
   1748c:	480b      	ldr	r0, [pc, #44]	; (174bc <ull_filter_lll_rl_irk_idx+0x98>)
   1748e:	f240 23c9 	movw	r3, #713	; 0x2c9
   17492:	f006 ff77 	bl	1e384 <printk>
   17496:	4040      	eors	r0, r0
   17498:	f380 8811 	msr	BASEPRI, r0
   1749c:	f04f 0003 	mov.w	r0, #3
   174a0:	df02      	svc	2
}
   174a2:	4620      	mov	r0, r4
   174a4:	bd10      	pop	{r4, pc}
   174a6:	bf00      	nop
   174a8:	200031bc 	.word	0x200031bc
   174ac:	20002230 	.word	0x20002230
   174b0:	200022b8 	.word	0x200022b8
   174b4:	00024b4c 	.word	0x00024b4c
   174b8:	00024d30 	.word	0x00024d30
   174bc:	00024334 	.word	0x00024334
   174c0:	00024d50 	.word	0x00024d50
   174c4:	00024d24 	.word	0x00024d24

000174c8 <ull_filter_lll_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   174c8:	2807      	cmp	r0, #7
   174ca:	d823      	bhi.n	17514 <ull_filter_lll_irk_whitelisted+0x4c>
{
   174cc:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(rl[rl_idx].taken);
   174ce:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   174d2:	4e11      	ldr	r6, [pc, #68]	; (17518 <ull_filter_lll_irk_whitelisted+0x50>)
   174d4:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   174d8:	07db      	lsls	r3, r3, #31
   174da:	4604      	mov	r4, r0
   174dc:	ea4f 0580 	mov.w	r5, r0, lsl #2
   174e0:	d505      	bpl.n	174ee <ull_filter_lll_irk_whitelisted+0x26>
	return rl[rl_idx].wl;
   174e2:	442c      	add	r4, r5
   174e4:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   174e8:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   174ec:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   174ee:	4a0b      	ldr	r2, [pc, #44]	; (1751c <ull_filter_lll_irk_whitelisted+0x54>)
   174f0:	490b      	ldr	r1, [pc, #44]	; (17520 <ull_filter_lll_irk_whitelisted+0x58>)
   174f2:	480c      	ldr	r0, [pc, #48]	; (17524 <ull_filter_lll_irk_whitelisted+0x5c>)
   174f4:	f44f 7335 	mov.w	r3, #724	; 0x2d4
   174f8:	f006 ff44 	bl	1e384 <printk>
   174fc:	4040      	eors	r0, r0
   174fe:	f380 8811 	msr	BASEPRI, r0
   17502:	f04f 0003 	mov.w	r0, #3
   17506:	df02      	svc	2
	return rl[rl_idx].wl;
   17508:	442c      	add	r4, r5
   1750a:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   1750e:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   17512:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   17514:	2000      	movs	r0, #0
}
   17516:	4770      	bx	lr
   17518:	200022b8 	.word	0x200022b8
   1751c:	00024b4c 	.word	0x00024b4c
   17520:	00024b9c 	.word	0x00024b9c
   17524:	00024334 	.word	0x00024334

00017528 <ull_filter_lll_get>:
		return &wl_filter;
   17528:	4a03      	ldr	r2, [pc, #12]	; (17538 <ull_filter_lll_get+0x10>)
   1752a:	4b04      	ldr	r3, [pc, #16]	; (1753c <ull_filter_lll_get+0x14>)
}
   1752c:	2800      	cmp	r0, #0
   1752e:	bf0c      	ite	eq
   17530:	4610      	moveq	r0, r2
   17532:	4618      	movne	r0, r3
   17534:	4770      	bx	lr
   17536:	bf00      	nop
   17538:	200023f8 	.word	0x200023f8
   1753c:	20002470 	.word	0x20002470

00017540 <ull_filter_lll_rl_addr_allowed>:
	if (*rl_idx != FILTER_IDX_NONE) {
   17540:	7813      	ldrb	r3, [r2, #0]
   17542:	2bff      	cmp	r3, #255	; 0xff
   17544:	d11c      	bne.n	17580 <ull_filter_lll_rl_addr_allowed+0x40>
{
   17546:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1754a:	4d19      	ldr	r5, [pc, #100]	; (175b0 <ull_filter_lll_rl_addr_allowed+0x70>)
   1754c:	4606      	mov	r6, r0
	if (*rl_idx != FILTER_IDX_NONE) {
   1754e:	2300      	movs	r3, #0
   17550:	1faf      	subs	r7, r5, #6
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   17552:	eb03 0483 	add.w	r4, r3, r3, lsl #2
   17556:	fa5f fe83 	uxtb.w	lr, r3
   1755a:	f817 4034 	ldrb.w	r4, [r7, r4, lsl #3]
   1755e:	f014 0001 	ands.w	r0, r4, #1
   17562:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   17566:	d003      	beq.n	17570 <ull_filter_lll_rl_addr_allowed+0x30>
   17568:	f3c4 1480 	ubfx	r4, r4, #6, #1
   1756c:	42b4      	cmp	r4, r6
   1756e:	d009      	beq.n	17584 <ull_filter_lll_rl_addr_allowed+0x44>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   17570:	3301      	adds	r3, #1
   17572:	2b08      	cmp	r3, #8
   17574:	f105 0528 	add.w	r5, r5, #40	; 0x28
   17578:	d1eb      	bne.n	17552 <ull_filter_lll_rl_addr_allowed+0x12>
		return true;
   1757a:	2001      	movs	r0, #1
}
   1757c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return true;
   17580:	2001      	movs	r0, #1
}
   17582:	4770      	bx	lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   17584:	1fac      	subs	r4, r5, #6
   17586:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
				if (addr[j] != id_addr[j]) {
   1758a:	f814 af01 	ldrb.w	sl, [r4, #1]!
   1758e:	f818 9f01 	ldrb.w	r9, [r8, #1]!
   17592:	45ca      	cmp	sl, r9
   17594:	d1ec      	bne.n	17570 <ull_filter_lll_rl_addr_allowed+0x30>
			for (j = 0U; j < BDADDR_SIZE; j++) {
   17596:	42ac      	cmp	r4, r5
   17598:	d1f7      	bne.n	1758a <ull_filter_lll_rl_addr_allowed+0x4a>
				return !rl[i].pirk || rl[i].dev;
   1759a:	4463      	add	r3, ip
				*rl_idx = i;
   1759c:	f882 e000 	strb.w	lr, [r2]
				return !rl[i].pirk || rl[i].dev;
   175a0:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   175a4:	075a      	lsls	r2, r3, #29
   175a6:	d5e9      	bpl.n	1757c <ull_filter_lll_rl_addr_allowed+0x3c>
   175a8:	f3c3 1000 	ubfx	r0, r3, #4, #1
   175ac:	e7e6      	b.n	1757c <ull_filter_lll_rl_addr_allowed+0x3c>
   175ae:	bf00      	nop
   175b0:	200022be 	.word	0x200022be

000175b4 <ull_filter_lll_rl_enabled>:
	return rl_enable;
   175b4:	4b02      	ldr	r3, [pc, #8]	; (175c0 <ull_filter_lll_rl_enabled+0xc>)
   175b6:	7818      	ldrb	r0, [r3, #0]
}
   175b8:	3800      	subs	r0, #0
   175ba:	bf18      	it	ne
   175bc:	2001      	movne	r0, #1
   175be:	4770      	bx	lr
   175c0:	200031bd 	.word	0x200031bd

000175c4 <radio_nrf5_isr>:
static void mfy_ticker_job_idle_get(void *param);
static void ticker_op_job_disable(uint32_t status, void *op_context);
#endif
#endif /* CONFIG_BT_CTLR_LOW_LAT */

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   175c4:	4668      	mov	r0, sp
   175c6:	f020 0107 	bic.w	r1, r0, #7
   175ca:	468d      	mov	sp, r1
   175cc:	b501      	push	{r0, lr}
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_radio();

	isr_radio();
   175ce:	f001 ff55 	bl	1947c <isr_radio>

	ISR_DIRECT_PM();
   175d2:	f7ed ffe9 	bl	55a8 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   175d6:	f7ee faf5 	bl	5bc4 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   175da:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   175de:	4685      	mov	sp, r0
   175e0:	4770      	bx	lr
   175e2:	bf00      	nop

000175e4 <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(const void *arg)
{
   175e4:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	lll_prof_enter_ull_high();

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   175e6:	4b09      	ldr	r3, [pc, #36]	; (1760c <rtc0_nrf5_isr+0x28>)
   175e8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   175ec:	b93a      	cbnz	r2, 175fe <rtc0_nrf5_isr+0x1a>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;

		ticker_trigger(0);
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
   175ee:	2001      	movs	r0, #1
   175f0:	f7f5 fc56 	bl	cea0 <mayfly_run>

	lll_prof_exit_ull_low();
#endif

	DEBUG_TICKER_ISR(0);
}
   175f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   175f8:	2002      	movs	r0, #2
   175fa:	f7f5 bc51 	b.w	cea0 <mayfly_run>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   175fe:	2000      	movs	r0, #0
   17600:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
   17604:	f7f6 fe08 	bl	e218 <ticker_trigger>
   17608:	e7f1      	b.n	175ee <rtc0_nrf5_isr+0xa>
   1760a:	bf00      	nop
   1760c:	4000b000 	.word	0x4000b000

00017610 <swi_lll_nrf5_isr>:
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_lll();

	mayfly_run(TICKER_USER_ID_LLL);
   17610:	2000      	movs	r0, #0
   17612:	f7f5 bc45 	b.w	cea0 <mayfly_run>
   17616:	bf00      	nop

00017618 <isr_race>:
}

static void isr_race(void *param)
{
	/* NOTE: lll_disable could have a race with ... */
	radio_status_reset();
   17618:	f002 b850 	b.w	196bc <radio_status_reset>

0001761c <ticker_stop_op_cb>:
	/* NOTE: this callback is present only for addition of debug messages
	 * when needed, else can be dispensed with.
	 */
	ARG_UNUSED(param);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1761c:	2801      	cmp	r0, #1
   1761e:	d800      	bhi.n	17622 <ticker_stop_op_cb+0x6>
   17620:	4770      	bx	lr
{
   17622:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   17624:	4a06      	ldr	r2, [pc, #24]	; (17640 <ticker_stop_op_cb+0x24>)
   17626:	4907      	ldr	r1, [pc, #28]	; (17644 <ticker_stop_op_cb+0x28>)
   17628:	4807      	ldr	r0, [pc, #28]	; (17648 <ticker_stop_op_cb+0x2c>)
   1762a:	f240 23d5 	movw	r3, #725	; 0x2d5
   1762e:	f006 fea9 	bl	1e384 <printk>
   17632:	4040      	eors	r0, r0
   17634:	f380 8811 	msr	BASEPRI, r0
   17638:	f04f 0003 	mov.w	r0, #3
   1763c:	df02      	svc	2
		  (status == TICKER_STATUS_FAILURE));
}
   1763e:	bd08      	pop	{r3, pc}
   17640:	00024d6c 	.word	0x00024d6c
   17644:	00024db4 	.word	0x00024db4
   17648:	00024334 	.word	0x00024334

0001764c <ticker_start_op_cb>:
	/* NOTE: this callback is present only for addition of debug messages
	 * when needed, else can be dispensed with.
	 */
	ARG_UNUSED(param);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1764c:	2801      	cmp	r0, #1
   1764e:	d800      	bhi.n	17652 <ticker_start_op_cb+0x6>
   17650:	4770      	bx	lr
{
   17652:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   17654:	4a06      	ldr	r2, [pc, #24]	; (17670 <ticker_start_op_cb+0x24>)
   17656:	4907      	ldr	r1, [pc, #28]	; (17674 <ticker_start_op_cb+0x28>)
   17658:	4807      	ldr	r0, [pc, #28]	; (17678 <ticker_start_op_cb+0x2c>)
   1765a:	f44f 7338 	mov.w	r3, #736	; 0x2e0
   1765e:	f006 fe91 	bl	1e384 <printk>
   17662:	4040      	eors	r0, r0
   17664:	f380 8811 	msr	BASEPRI, r0
   17668:	f04f 0003 	mov.w	r0, #3
   1766c:	df02      	svc	2
		  (status == TICKER_STATUS_FAILURE));
}
   1766e:	bd08      	pop	{r3, pc}
   17670:	00024d6c 	.word	0x00024d6c
   17674:	00024db4 	.word	0x00024db4
   17678:	00024334 	.word	0x00024334

0001767c <preempt_ticker_start.isra.0>:

static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   1767c:	b530      	push	{r4, r5, lr}
	preempt_to = MAX(evt->ticks_active_to_start,
			 evt->ticks_xtal_to_start) -
			 evt->ticks_preempt_to_start;

	/* Setup pre empt timeout */
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1767e:	2200      	movs	r2, #0
static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   17680:	b08b      	sub	sp, #44	; 0x2c
	evt = HDR_LLL2EVT(prepare_param->param);
   17682:	680b      	ldr	r3, [r1, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   17684:	4c15      	ldr	r4, [pc, #84]	; (176dc <preempt_ticker_start.isra.0+0x60>)
   17686:	4916      	ldr	r1, [pc, #88]	; (176e0 <preempt_ticker_start.isra.0+0x64>)
   17688:	9208      	str	r2, [sp, #32]
   1768a:	e9cd 2203 	strd	r2, r2, [sp, #12]
   1768e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   17692:	9206      	str	r2, [sp, #24]
   17694:	9407      	str	r4, [sp, #28]
   17696:	9105      	str	r1, [sp, #20]
	preempt_to = MAX(evt->ticks_active_to_start,
   17698:	e9d3 5400 	ldrd	r5, r4, [r3]
   1769c:	6899      	ldr	r1, [r3, #8]
   1769e:	42a5      	cmp	r5, r4
   176a0:	bf2c      	ite	cs
   176a2:	ebc1 0105 	rsbcs	r1, r1, r5
   176a6:	ebc1 0104 	rsbcc	r1, r1, r4
static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   176aa:	4603      	mov	r3, r0
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   176ac:	9100      	str	r1, [sp, #0]
   176ae:	4610      	mov	r0, r2
   176b0:	4611      	mov	r1, r2
   176b2:	f7f6 fe1f 	bl	e2f4 <ticker_start>
			   TICKER_NULL_REMAINDER,
			   TICKER_NULL_LAZY,
			   TICKER_NULL_SLOT,
			   preempt_ticker_cb, NULL,
			   ticker_start_op_cb, NULL);
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   176b6:	2802      	cmp	r0, #2
   176b8:	d801      	bhi.n	176be <preempt_ticker_start.isra.0+0x42>
		  (ret == TICKER_STATUS_FAILURE) ||
		  (ret == TICKER_STATUS_BUSY));
}
   176ba:	b00b      	add	sp, #44	; 0x2c
   176bc:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   176be:	4a09      	ldr	r2, [pc, #36]	; (176e4 <preempt_ticker_start.isra.0+0x68>)
   176c0:	4909      	ldr	r1, [pc, #36]	; (176e8 <preempt_ticker_start.isra.0+0x6c>)
   176c2:	480a      	ldr	r0, [pc, #40]	; (176ec <preempt_ticker_start.isra.0+0x70>)
   176c4:	f240 23fe 	movw	r3, #766	; 0x2fe
   176c8:	f006 fe5c 	bl	1e384 <printk>
   176cc:	4040      	eors	r0, r0
   176ce:	f380 8811 	msr	BASEPRI, r0
   176d2:	f04f 0003 	mov.w	r0, #3
   176d6:	df02      	svc	2
}
   176d8:	b00b      	add	sp, #44	; 0x2c
   176da:	bd30      	pop	{r4, r5, pc}
   176dc:	0001764d 	.word	0x0001764d
   176e0:	00017829 	.word	0x00017829
   176e4:	00024d6c 	.word	0x00024d6c
   176e8:	00024dd4 	.word	0x00024dd4
   176ec:	00024334 	.word	0x00024334

000176f0 <preempt>:
			     0, &mfy);
	LL_ASSERT(!ret);
}

static void preempt(void *param)
{
   176f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	lll_prepare_cb_t resume_cb;
	struct lll_event *next;
	uint8_t idx;
	int ret;

	if (!event.curr.abort_cb || !event.curr.param) {
   176f2:	4e48      	ldr	r6, [pc, #288]	; (17814 <preempt+0x124>)
   176f4:	68b3      	ldr	r3, [r6, #8]
{
   176f6:	b089      	sub	sp, #36	; 0x24
	if (!event.curr.abort_cb || !event.curr.param) {
   176f8:	b1ab      	cbz	r3, 17726 <preempt+0x36>
   176fa:	6833      	ldr	r3, [r6, #0]
   176fc:	b19b      	cbz	r3, 17726 <preempt+0x36>
		return;
	}

	idx = UINT8_MAX;
   176fe:	23ff      	movs	r3, #255	; 0xff
	next = ull_prepare_dequeue_iter(&idx);
   17700:	f10d 000a 	add.w	r0, sp, #10
	idx = UINT8_MAX;
   17704:	f88d 300a 	strb.w	r3, [sp, #10]
	next = ull_prepare_dequeue_iter(&idx);
   17708:	f7f9 fba8 	bl	10e5c <ull_prepare_dequeue_iter>
	if (!next) {
   1770c:	4604      	mov	r4, r0
   1770e:	b150      	cbz	r0, 17726 <preempt+0x36>
		return;
	}

	while (next && (next->is_aborted || next->is_resume)) {
   17710:	7f23      	ldrb	r3, [r4, #28]
   17712:	f013 0503 	ands.w	r5, r3, #3
		next = ull_prepare_dequeue_iter(&idx);
   17716:	f10d 000a 	add.w	r0, sp, #10
	while (next && (next->is_aborted || next->is_resume)) {
   1771a:	d006      	beq.n	1772a <preempt+0x3a>
		next = ull_prepare_dequeue_iter(&idx);
   1771c:	f7f9 fb9e 	bl	10e5c <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
   17720:	4604      	mov	r4, r0
   17722:	2800      	cmp	r0, #0
   17724:	d1f4      	bne.n	17710 <preempt+0x20>
			return;
		}
	} while (next->is_aborted || next->is_resume);

	preempt_ticker_start(&next->prepare_param);
}
   17726:	b009      	add	sp, #36	; 0x24
   17728:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = event.curr.is_abort_cb(next->prepare_param.param,
   1772a:	e9d6 1300 	ldrd	r1, r3, [r6]
   1772e:	68e0      	ldr	r0, [r4, #12]
   17730:	aa03      	add	r2, sp, #12
   17732:	4798      	blx	r3
	if (!ret) {
   17734:	4607      	mov	r7, r0
   17736:	2800      	cmp	r0, #0
   17738:	d062      	beq.n	17800 <preempt+0x110>
	event.curr.abort_cb(NULL, event.curr.param);
   1773a:	68b3      	ldr	r3, [r6, #8]
   1773c:	6831      	ldr	r1, [r6, #0]
   1773e:	4628      	mov	r0, r5
   17740:	4798      	blx	r3
	if (ret == -EAGAIN) {
   17742:	f117 0f0b 	cmn.w	r7, #11
   17746:	d019      	beq.n	1777c <preempt+0x8c>
		LL_ASSERT(ret == -ECANCELED);
   17748:	378c      	adds	r7, #140	; 0x8c
   1774a:	d010      	beq.n	1776e <preempt+0x7e>
   1774c:	4a32      	ldr	r2, [pc, #200]	; (17818 <preempt+0x128>)
   1774e:	4933      	ldr	r1, [pc, #204]	; (1781c <preempt+0x12c>)
   17750:	4833      	ldr	r0, [pc, #204]	; (17820 <preempt+0x130>)
   17752:	f240 3351 	movw	r3, #849	; 0x351
   17756:	f006 fe15 	bl	1e384 <printk>
   1775a:	4040      	eors	r0, r0
   1775c:	f380 8811 	msr	BASEPRI, r0
   17760:	f04f 0003 	mov.w	r0, #3
   17764:	df02      	svc	2
   17766:	e002      	b.n	1776e <preempt+0x7e>
	} while (next->is_aborted || next->is_resume);
   17768:	7f03      	ldrb	r3, [r0, #28]
   1776a:	079b      	lsls	r3, r3, #30
   1776c:	d042      	beq.n	177f4 <preempt+0x104>
		next = ull_prepare_dequeue_iter(&idx);
   1776e:	f10d 000a 	add.w	r0, sp, #10
   17772:	f7f9 fb73 	bl	10e5c <ull_prepare_dequeue_iter>
		if (!next) {
   17776:	2800      	cmp	r0, #0
   17778:	d1f6      	bne.n	17768 <preempt+0x78>
   1777a:	e7d4      	b.n	17726 <preempt+0x36>
		iter_idx = UINT8_MAX;
   1777c:	24ff      	movs	r4, #255	; 0xff
		iter = ull_prepare_dequeue_iter(&iter_idx);
   1777e:	f10d 000b 	add.w	r0, sp, #11
		iter_idx = UINT8_MAX;
   17782:	f88d 400b 	strb.w	r4, [sp, #11]
		iter = ull_prepare_dequeue_iter(&iter_idx);
   17786:	f7f9 fb69 	bl	10e5c <ull_prepare_dequeue_iter>
		while (iter) {
   1778a:	bb58      	cbnz	r0, 177e4 <preempt+0xf4>
	struct lll_prepare_param prepare_param = {0};
   1778c:	2100      	movs	r1, #0
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1778e:	2301      	movs	r3, #1
	prepare_param.param = event.curr.param;
   17790:	6834      	ldr	r4, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   17792:	9300      	str	r3, [sp, #0]
	struct lll_prepare_param prepare_param = {0};
   17794:	e9cd 1104 	strd	r1, r1, [sp, #16]
   17798:	9106      	str	r1, [sp, #24]
	event.curr.param = NULL;
   1779a:	6031      	str	r1, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1779c:	9b03      	ldr	r3, [sp, #12]
	prepare_param.param = event.curr.param;
   1779e:	9407      	str	r4, [sp, #28]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   177a0:	e9d6 0101 	ldrd	r0, r1, [r6, #4]
   177a4:	aa04      	add	r2, sp, #16
   177a6:	f7f9 fb0d 	bl	10dc4 <ull_prepare_enqueue>
		LL_ASSERT(!ret);
   177aa:	2800      	cmp	r0, #0
   177ac:	d0df      	beq.n	1776e <preempt+0x7e>
   177ae:	4a1a      	ldr	r2, [pc, #104]	; (17818 <preempt+0x128>)
   177b0:	491c      	ldr	r1, [pc, #112]	; (17824 <preempt+0x134>)
   177b2:	481b      	ldr	r0, [pc, #108]	; (17820 <preempt+0x130>)
   177b4:	f240 334f 	movw	r3, #847	; 0x34f
   177b8:	f006 fde4 	bl	1e384 <printk>
   177bc:	4040      	eors	r0, r0
   177be:	f380 8811 	msr	BASEPRI, r0
   177c2:	f04f 0003 	mov.w	r0, #3
   177c6:	df02      	svc	2
   177c8:	e7d1      	b.n	1776e <preempt+0x7e>
				iter->is_aborted = 1;
   177ca:	f043 0302 	orr.w	r3, r3, #2
   177ce:	7703      	strb	r3, [r0, #28]
				iter->abort_cb(&iter->prepare_param,
   177d0:	6983      	ldr	r3, [r0, #24]
   177d2:	4798      	blx	r3
				idx = UINT8_MAX;
   177d4:	f88d 400a 	strb.w	r4, [sp, #10]
			iter = ull_prepare_dequeue_iter(&iter_idx);
   177d8:	f10d 000b 	add.w	r0, sp, #11
   177dc:	f7f9 fb3e 	bl	10e5c <ull_prepare_dequeue_iter>
		while (iter) {
   177e0:	2800      	cmp	r0, #0
   177e2:	d0d3      	beq.n	1778c <preempt+0x9c>
			if (!iter->is_aborted &&
   177e4:	7f03      	ldrb	r3, [r0, #28]
   177e6:	079a      	lsls	r2, r3, #30
   177e8:	d4f6      	bmi.n	177d8 <preempt+0xe8>
			    event.curr.param == iter->prepare_param.param) {
   177ea:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
   177ec:	6831      	ldr	r1, [r6, #0]
   177ee:	4291      	cmp	r1, r2
   177f0:	d1f2      	bne.n	177d8 <preempt+0xe8>
   177f2:	e7ea      	b.n	177ca <preempt+0xda>
	preempt_ticker_start(&next->prepare_param);
   177f4:	68c1      	ldr	r1, [r0, #12]
   177f6:	6800      	ldr	r0, [r0, #0]
   177f8:	f7ff ff40 	bl	1767c <preempt_ticker_start.isra.0>
}
   177fc:	b009      	add	sp, #36	; 0x24
   177fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next->is_aborted = 1;
   17800:	7f23      	ldrb	r3, [r4, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   17802:	69a2      	ldr	r2, [r4, #24]
   17804:	68e1      	ldr	r1, [r4, #12]
		next->is_aborted = 1;
   17806:	f043 0302 	orr.w	r3, r3, #2
   1780a:	7723      	strb	r3, [r4, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   1780c:	4620      	mov	r0, r4
   1780e:	4790      	blx	r2
		goto preempt_next;
   17810:	e7ad      	b.n	1776e <preempt+0x7e>
   17812:	bf00      	nop
   17814:	200024a8 	.word	0x200024a8
   17818:	00024d6c 	.word	0x00024d6c
   1781c:	00024dfc 	.word	0x00024dfc
   17820:	00024334 	.word	0x00024334
   17824:	000246c8 	.word	0x000246c8

00017828 <preempt_ticker_cb>:
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   17828:	2200      	movs	r2, #0
{
   1782a:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1782c:	4611      	mov	r1, r2
   1782e:	4b0a      	ldr	r3, [pc, #40]	; (17858 <preempt_ticker_cb+0x30>)
   17830:	2001      	movs	r0, #1
   17832:	f7f5 fae1 	bl	cdf8 <mayfly_enqueue>
	LL_ASSERT(!ret);
   17836:	b900      	cbnz	r0, 1783a <preempt_ticker_cb+0x12>
}
   17838:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   1783a:	4a08      	ldr	r2, [pc, #32]	; (1785c <preempt_ticker_cb+0x34>)
   1783c:	4908      	ldr	r1, [pc, #32]	; (17860 <preempt_ticker_cb+0x38>)
   1783e:	4809      	ldr	r0, [pc, #36]	; (17864 <preempt_ticker_cb+0x3c>)
   17840:	f44f 7343 	mov.w	r3, #780	; 0x30c
   17844:	f006 fd9e 	bl	1e384 <printk>
   17848:	4040      	eors	r0, r0
   1784a:	f380 8811 	msr	BASEPRI, r0
   1784e:	f04f 0003 	mov.w	r0, #3
   17852:	df02      	svc	2
}
   17854:	bd08      	pop	{r3, pc}
   17856:	bf00      	nop
   17858:	20000510 	.word	0x20000510
   1785c:	00024d6c 	.word	0x00024d6c
   17860:	000246c8 	.word	0x000246c8
   17864:	00024334 	.word	0x00024334

00017868 <lll_init>:
{
   17868:	b510      	push	{r4, lr}
   1786a:	4816      	ldr	r0, [pc, #88]	; (178c4 <lll_init+0x5c>)
   1786c:	f005 f8f0 	bl	1ca50 <z_impl_device_get_binding>
	dev_entropy = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   17870:	4b15      	ldr	r3, [pc, #84]	; (178c8 <lll_init+0x60>)
   17872:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
   17874:	b310      	cbz	r0, 178bc <lll_init+0x54>
	event.curr.abort_cb = NULL;
   17876:	4b15      	ldr	r3, [pc, #84]	; (178cc <lll_init+0x64>)
   17878:	2400      	movs	r4, #0
   1787a:	609c      	str	r4, [r3, #8]
	err = lll_clock_init();
   1787c:	f000 fa9a 	bl	17db4 <lll_clock_init>
	if (err < 0) {
   17880:	2800      	cmp	r0, #0
   17882:	db1a      	blt.n	178ba <lll_init+0x52>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   17884:	4622      	mov	r2, r4
   17886:	4621      	mov	r1, r4
   17888:	2001      	movs	r0, #1
   1788a:	f7ed fe75 	bl	5578 <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
   1788e:	4622      	mov	r2, r4
   17890:	2101      	movs	r1, #1
   17892:	200b      	movs	r0, #11
   17894:	f7ed fe70 	bl	5578 <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
   17898:	4622      	mov	r2, r4
   1789a:	4621      	mov	r1, r4
   1789c:	2018      	movs	r0, #24
   1789e:	f7ed fe6b 	bl	5578 <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
   178a2:	2001      	movs	r0, #1
   178a4:	f7ed fe36 	bl	5514 <arch_irq_enable>
	irq_enable(RTC0_IRQn);
   178a8:	200b      	movs	r0, #11
   178aa:	f7ed fe33 	bl	5514 <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
   178ae:	2018      	movs	r0, #24
   178b0:	f7ed fe30 	bl	5514 <arch_irq_enable>
	radio_setup();
   178b4:	f001 fe12 	bl	194dc <radio_setup>
	return 0;
   178b8:	4620      	mov	r0, r4
}
   178ba:	bd10      	pop	{r4, pc}
		return -ENODEV;
   178bc:	f06f 0012 	mvn.w	r0, #18
}
   178c0:	bd10      	pop	{r4, pc}
   178c2:	bf00      	nop
   178c4:	00024e08 	.word	0x00024e08
   178c8:	200024a4 	.word	0x200024a4
   178cc:	200024a8 	.word	0x200024a8

000178d0 <lll_csrand_get>:
	return entropy_get_entropy(dev_entropy, buf, len);
   178d0:	4a04      	ldr	r2, [pc, #16]	; (178e4 <lll_csrand_get+0x14>)
{
   178d2:	b410      	push	{r4}
   178d4:	4603      	mov	r3, r0
	return entropy_get_entropy(dev_entropy, buf, len);
   178d6:	6810      	ldr	r0, [r2, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   178d8:	6884      	ldr	r4, [r0, #8]
   178da:	b28a      	uxth	r2, r1
   178dc:	4619      	mov	r1, r3
   178de:	6823      	ldr	r3, [r4, #0]
}
   178e0:	bc10      	pop	{r4}
   178e2:	4718      	bx	r3
   178e4:	200024a4 	.word	0x200024a4

000178e8 <lll_csrand_isr_get>:
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   178e8:	4b08      	ldr	r3, [pc, #32]	; (1790c <lll_csrand_isr_get+0x24>)
   178ea:	681b      	ldr	r3, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   178ec:	689a      	ldr	r2, [r3, #8]
{
   178ee:	b410      	push	{r4}
   178f0:	6854      	ldr	r4, [r2, #4]
   178f2:	b134      	cbz	r4, 17902 <lll_csrand_isr_get+0x1a>
   178f4:	b28a      	uxth	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   178f6:	46a4      	mov	ip, r4
   178f8:	4601      	mov	r1, r0
}
   178fa:	bc10      	pop	{r4}
   178fc:	4618      	mov	r0, r3
   178fe:	2300      	movs	r3, #0
   17900:	4760      	bx	ip
   17902:	f06f 0085 	mvn.w	r0, #133	; 0x85
   17906:	bc10      	pop	{r4}
   17908:	4770      	bx	lr
   1790a:	bf00      	nop
   1790c:	200024a4 	.word	0x200024a4

00017910 <lll_rand_isr_get>:
   17910:	f7ff bfea 	b.w	178e8 <lll_csrand_isr_get>

00017914 <lll_reset>:
}
   17914:	2000      	movs	r0, #0
   17916:	4770      	bx	lr

00017918 <lll_disable>:
{
   17918:	b530      	push	{r4, r5, lr}
	if (!param || (param == event.curr.param)) {
   1791a:	4604      	mov	r4, r0
{
   1791c:	b083      	sub	sp, #12
	if (!param || (param == event.curr.param)) {
   1791e:	b378      	cbz	r0, 17980 <lll_disable+0x68>
   17920:	4b23      	ldr	r3, [pc, #140]	; (179b0 <lll_disable+0x98>)
   17922:	681a      	ldr	r2, [r3, #0]
   17924:	4282      	cmp	r2, r0
   17926:	d025      	beq.n	17974 <lll_disable+0x5c>
		idx = UINT8_MAX;
   17928:	25ff      	movs	r5, #255	; 0xff
		next = ull_prepare_dequeue_iter(&idx);
   1792a:	f10d 0007 	add.w	r0, sp, #7
		idx = UINT8_MAX;
   1792e:	f88d 5007 	strb.w	r5, [sp, #7]
		next = ull_prepare_dequeue_iter(&idx);
   17932:	f7f9 fa93 	bl	10e5c <ull_prepare_dequeue_iter>
		while (next) {
   17936:	b938      	cbnz	r0, 17948 <lll_disable+0x30>
   17938:	e01a      	b.n	17970 <lll_disable+0x58>
			    (!param || (param == next->prepare_param.param))) {
   1793a:	428c      	cmp	r4, r1
   1793c:	d00a      	beq.n	17954 <lll_disable+0x3c>
			next = ull_prepare_dequeue_iter(&idx);
   1793e:	f10d 0007 	add.w	r0, sp, #7
   17942:	f7f9 fa8b 	bl	10e5c <ull_prepare_dequeue_iter>
		while (next) {
   17946:	b198      	cbz	r0, 17970 <lll_disable+0x58>
			if (!next->is_aborted &&
   17948:	7f03      	ldrb	r3, [r0, #28]
   1794a:	079b      	lsls	r3, r3, #30
   1794c:	d4f7      	bmi.n	1793e <lll_disable+0x26>
				next->is_aborted = 1;
   1794e:	68c1      	ldr	r1, [r0, #12]
			if (!next->is_aborted &&
   17950:	2c00      	cmp	r4, #0
   17952:	d1f2      	bne.n	1793a <lll_disable+0x22>
				next->is_aborted = 1;
   17954:	7f03      	ldrb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   17956:	6982      	ldr	r2, [r0, #24]
				next->is_aborted = 1;
   17958:	f043 0302 	orr.w	r3, r3, #2
   1795c:	7703      	strb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   1795e:	4790      	blx	r2
			next = ull_prepare_dequeue_iter(&idx);
   17960:	f10d 0007 	add.w	r0, sp, #7
				idx = UINT8_MAX;
   17964:	f88d 5007 	strb.w	r5, [sp, #7]
			next = ull_prepare_dequeue_iter(&idx);
   17968:	f7f9 fa78 	bl	10e5c <ull_prepare_dequeue_iter>
		while (next) {
   1796c:	2800      	cmp	r0, #0
   1796e:	d1eb      	bne.n	17948 <lll_disable+0x30>
}
   17970:	b003      	add	sp, #12
   17972:	bd30      	pop	{r4, r5, pc}
		if (event.curr.abort_cb && event.curr.param) {
   17974:	689b      	ldr	r3, [r3, #8]
   17976:	b16b      	cbz	r3, 17994 <lll_disable+0x7c>
   17978:	4621      	mov	r1, r4
			event.curr.abort_cb(NULL, event.curr.param);
   1797a:	2000      	movs	r0, #0
   1797c:	4798      	blx	r3
   1797e:	e7d3      	b.n	17928 <lll_disable+0x10>
		if (event.curr.abort_cb && event.curr.param) {
   17980:	4a0b      	ldr	r2, [pc, #44]	; (179b0 <lll_disable+0x98>)
   17982:	6893      	ldr	r3, [r2, #8]
   17984:	2b00      	cmp	r3, #0
   17986:	d0cf      	beq.n	17928 <lll_disable+0x10>
   17988:	6811      	ldr	r1, [r2, #0]
   1798a:	2900      	cmp	r1, #0
   1798c:	d0cc      	beq.n	17928 <lll_disable+0x10>
			event.curr.abort_cb(NULL, event.curr.param);
   1798e:	2000      	movs	r0, #0
   17990:	4798      	blx	r3
   17992:	e7c9      	b.n	17928 <lll_disable+0x10>
			LL_ASSERT(!param);
   17994:	4a07      	ldr	r2, [pc, #28]	; (179b4 <lll_disable+0x9c>)
   17996:	4908      	ldr	r1, [pc, #32]	; (179b8 <lll_disable+0xa0>)
   17998:	4808      	ldr	r0, [pc, #32]	; (179bc <lll_disable+0xa4>)
   1799a:	23fc      	movs	r3, #252	; 0xfc
   1799c:	f006 fcf2 	bl	1e384 <printk>
   179a0:	4040      	eors	r0, r0
   179a2:	f380 8811 	msr	BASEPRI, r0
   179a6:	f04f 0003 	mov.w	r0, #3
   179aa:	df02      	svc	2
   179ac:	e7bc      	b.n	17928 <lll_disable+0x10>
   179ae:	bf00      	nop
   179b0:	200024a8 	.word	0x200024a8
   179b4:	00024d6c 	.word	0x00024d6c
   179b8:	00024e0c 	.word	0x00024e0c
   179bc:	00024334 	.word	0x00024334

000179c0 <lll_prepare_done>:
}
   179c0:	2000      	movs	r0, #0
   179c2:	4770      	bx	lr

000179c4 <lll_done>:
{
   179c4:	b538      	push	{r3, r4, r5, lr}
   179c6:	4604      	mov	r4, r0
	next = ull_prepare_dequeue_get();
   179c8:	f7f9 fa3a 	bl	10e40 <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
   179cc:	b15c      	cbz	r4, 179e6 <lll_done+0x22>
   179ce:	b318      	cbz	r0, 17a18 <lll_done+0x54>
			ull = HDR_ULL(((struct lll_hdr *)param)->parent);
   179d0:	6824      	ldr	r4, [r4, #0]
   179d2:	3410      	adds	r4, #16
	ull_prepare_dequeue(TICKER_USER_ID_LLL);
   179d4:	2000      	movs	r0, #0
   179d6:	f7f9 fa5f 	bl	10e98 <ull_prepare_dequeue>
	evdone = ull_event_done(ull);
   179da:	4620      	mov	r0, r4
   179dc:	f7f9 fac8 	bl	10f70 <ull_event_done>
	LL_ASSERT(evdone);
   179e0:	b158      	cbz	r0, 179fa <lll_done+0x36>
}
   179e2:	2000      	movs	r0, #0
   179e4:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(event.curr.abort_cb);
   179e6:	4d1a      	ldr	r5, [pc, #104]	; (17a50 <lll_done+0x8c>)
   179e8:	68ab      	ldr	r3, [r5, #8]
   179ea:	b31b      	cbz	r3, 17a34 <lll_done+0x70>
		param = event.curr.param;
   179ec:	682c      	ldr	r4, [r5, #0]
		event.curr.abort_cb = NULL;
   179ee:	2300      	movs	r3, #0
   179f0:	60ab      	str	r3, [r5, #8]
		event.curr.param = NULL;
   179f2:	602b      	str	r3, [r5, #0]
		if (param) {
   179f4:	2c00      	cmp	r4, #0
   179f6:	d1eb      	bne.n	179d0 <lll_done+0xc>
   179f8:	e7ec      	b.n	179d4 <lll_done+0x10>
	LL_ASSERT(evdone);
   179fa:	4a16      	ldr	r2, [pc, #88]	; (17a54 <lll_done+0x90>)
   179fc:	4916      	ldr	r1, [pc, #88]	; (17a58 <lll_done+0x94>)
   179fe:	4817      	ldr	r0, [pc, #92]	; (17a5c <lll_done+0x98>)
   17a00:	f240 1361 	movw	r3, #353	; 0x161
   17a04:	f006 fcbe 	bl	1e384 <printk>
   17a08:	4040      	eors	r0, r0
   17a0a:	f380 8811 	msr	BASEPRI, r0
   17a0e:	f04f 0003 	mov.w	r0, #3
   17a12:	df02      	svc	2
}
   17a14:	2000      	movs	r0, #0
   17a16:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(!param || next);
   17a18:	4a0e      	ldr	r2, [pc, #56]	; (17a54 <lll_done+0x90>)
   17a1a:	4911      	ldr	r1, [pc, #68]	; (17a60 <lll_done+0x9c>)
   17a1c:	480f      	ldr	r0, [pc, #60]	; (17a5c <lll_done+0x98>)
   17a1e:	f240 1337 	movw	r3, #311	; 0x137
   17a22:	f006 fcaf 	bl	1e384 <printk>
   17a26:	4040      	eors	r0, r0
   17a28:	f380 8811 	msr	BASEPRI, r0
   17a2c:	f04f 0003 	mov.w	r0, #3
   17a30:	df02      	svc	2
   17a32:	e7cd      	b.n	179d0 <lll_done+0xc>
		LL_ASSERT(event.curr.abort_cb);
   17a34:	4a07      	ldr	r2, [pc, #28]	; (17a54 <lll_done+0x90>)
   17a36:	490b      	ldr	r1, [pc, #44]	; (17a64 <lll_done+0xa0>)
   17a38:	4808      	ldr	r0, [pc, #32]	; (17a5c <lll_done+0x98>)
   17a3a:	f240 133d 	movw	r3, #317	; 0x13d
   17a3e:	f006 fca1 	bl	1e384 <printk>
   17a42:	4040      	eors	r0, r0
   17a44:	f380 8811 	msr	BASEPRI, r0
   17a48:	f04f 0003 	mov.w	r0, #3
   17a4c:	df02      	svc	2
   17a4e:	e7cd      	b.n	179ec <lll_done+0x28>
   17a50:	200024a8 	.word	0x200024a8
   17a54:	00024d6c 	.word	0x00024d6c
   17a58:	00024e38 	.word	0x00024e38
   17a5c:	00024334 	.word	0x00024334
   17a60:	00024e14 	.word	0x00024e14
   17a64:	00024e24 	.word	0x00024e24

00017a68 <lll_is_abort_cb>:
}
   17a68:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   17a6c:	4770      	bx	lr
   17a6e:	bf00      	nop

00017a70 <lll_evt_offset_get>:
	} else if (evt->ticks_xtal_to_start & XON_BITMASK) {
   17a70:	e9d0 2300 	ldrd	r2, r3, [r0]
   17a74:	2a00      	cmp	r2, #0
   17a76:	db04      	blt.n	17a82 <lll_evt_offset_get+0x12>
		return MAX(evt->ticks_active_to_start,
   17a78:	429a      	cmp	r2, r3
   17a7a:	bf38      	it	cc
   17a7c:	461a      	movcc	r2, r3
   17a7e:	4610      	mov	r0, r2
}
   17a80:	4770      	bx	lr
		return MAX(evt->ticks_active_to_start,
   17a82:	6880      	ldr	r0, [r0, #8]
   17a84:	4298      	cmp	r0, r3
   17a86:	bf38      	it	cc
   17a88:	4618      	movcc	r0, r3
   17a8a:	4770      	bx	lr

00017a8c <lll_preempt_calc>:
{
   17a8c:	b510      	push	{r4, lr}
   17a8e:	4614      	mov	r4, r2
	ticks_now = ticker_ticks_now_get();
   17a90:	f7f6 fcfe 	bl	e490 <ticker_ticks_now_get>
	diff = ticks_now - ticks_at_event;
   17a94:	1b02      	subs	r2, r0, r4
	if (diff & BIT(HAL_TICKER_CNTR_MSBIT)) {
   17a96:	0213      	lsls	r3, r2, #8
   17a98:	d405      	bmi.n	17aa6 <lll_preempt_calc+0x1a>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
   17a9a:	1cd0      	adds	r0, r2, #3
	if (diff > HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US)) {
   17a9c:	2809      	cmp	r0, #9
   17a9e:	bf94      	ite	ls
   17aa0:	2000      	movls	r0, #0
   17aa2:	2001      	movhi	r0, #1
}
   17aa4:	bd10      	pop	{r4, pc}
		return 0;
   17aa6:	2000      	movs	r0, #0
}
   17aa8:	bd10      	pop	{r4, pc}
   17aaa:	bf00      	nop

00017aac <lll_chan_set>:
	switch (chan) {
   17aac:	2826      	cmp	r0, #38	; 0x26
{
   17aae:	b510      	push	{r4, lr}
   17ab0:	4604      	mov	r4, r0
	switch (chan) {
   17ab2:	d01c      	beq.n	17aee <lll_chan_set+0x42>
   17ab4:	2827      	cmp	r0, #39	; 0x27
   17ab6:	d012      	beq.n	17ade <lll_chan_set+0x32>
   17ab8:	2825      	cmp	r0, #37	; 0x25
   17aba:	d008      	beq.n	17ace <lll_chan_set+0x22>
		if (chan < 11) {
   17abc:	280a      	cmp	r0, #10
   17abe:	d91e      	bls.n	17afe <lll_chan_set+0x52>
		} else if (chan < 40) {
   17ac0:	2827      	cmp	r0, #39	; 0x27
   17ac2:	d821      	bhi.n	17b08 <lll_chan_set+0x5c>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   17ac4:	3003      	adds	r0, #3
   17ac6:	0040      	lsls	r0, r0, #1
   17ac8:	f001 fd64 	bl	19594 <radio_freq_chan_set>
   17acc:	e002      	b.n	17ad4 <lll_chan_set+0x28>
		radio_freq_chan_set(2);
   17ace:	2002      	movs	r0, #2
   17ad0:	f001 fd60 	bl	19594 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   17ad4:	4620      	mov	r0, r4
}
   17ad6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   17ada:	f001 bd61 	b.w	195a0 <radio_whiten_iv_set>
		radio_freq_chan_set(80);
   17ade:	2050      	movs	r0, #80	; 0x50
   17ae0:	f001 fd58 	bl	19594 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   17ae4:	4620      	mov	r0, r4
}
   17ae6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   17aea:	f001 bd59 	b.w	195a0 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   17aee:	201a      	movs	r0, #26
   17af0:	f001 fd50 	bl	19594 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   17af4:	4620      	mov	r0, r4
}
   17af6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   17afa:	f001 bd51 	b.w	195a0 <radio_whiten_iv_set>
			radio_freq_chan_set(4 + (chan * 2U));
   17afe:	3002      	adds	r0, #2
   17b00:	0040      	lsls	r0, r0, #1
   17b02:	f001 fd47 	bl	19594 <radio_freq_chan_set>
   17b06:	e7e5      	b.n	17ad4 <lll_chan_set+0x28>
			LL_ASSERT(0);
   17b08:	4a06      	ldr	r2, [pc, #24]	; (17b24 <lll_chan_set+0x78>)
   17b0a:	4907      	ldr	r1, [pc, #28]	; (17b28 <lll_chan_set+0x7c>)
   17b0c:	4807      	ldr	r0, [pc, #28]	; (17b2c <lll_chan_set+0x80>)
   17b0e:	f240 13cd 	movw	r3, #461	; 0x1cd
   17b12:	f006 fc37 	bl	1e384 <printk>
   17b16:	4040      	eors	r0, r0
   17b18:	f380 8811 	msr	BASEPRI, r0
   17b1c:	f04f 0003 	mov.w	r0, #3
   17b20:	df02      	svc	2
   17b22:	e7d7      	b.n	17ad4 <lll_chan_set+0x28>
   17b24:	00024d6c 	.word	0x00024d6c
   17b28:	000243a4 	.word	0x000243a4
   17b2c:	00024334 	.word	0x00024334

00017b30 <lll_radio_rx_ready_delay_get>:
	return radio_rx_ready_delay_get(phy, flags);
   17b30:	f001 bd9e 	b.w	19670 <radio_rx_ready_delay_get>

00017b34 <lll_isr_tx_status_reset>:
{
   17b34:	b508      	push	{r3, lr}
	radio_status_reset();
   17b36:	f001 fdc1 	bl	196bc <radio_status_reset>
}
   17b3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_status_reset();
   17b3e:	f001 be7d 	b.w	1983c <radio_tmr_status_reset>
   17b42:	bf00      	nop

00017b44 <lll_isr_rx_status_reset>:
{
   17b44:	b508      	push	{r3, lr}
	radio_status_reset();
   17b46:	f001 fdb9 	bl	196bc <radio_status_reset>
	radio_tmr_status_reset();
   17b4a:	f001 fe77 	bl	1983c <radio_tmr_status_reset>
}
   17b4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   17b52:	f001 be23 	b.w	1979c <radio_rssi_status_reset>
   17b56:	bf00      	nop

00017b58 <lll_isr_status_reset>:
{
   17b58:	b508      	push	{r3, lr}
	radio_status_reset();
   17b5a:	f001 fdaf 	bl	196bc <radio_status_reset>
	radio_tmr_status_reset();
   17b5e:	f001 fe6d 	bl	1983c <radio_tmr_status_reset>
	radio_filter_status_reset();
   17b62:	f001 fe53 	bl	1980c <radio_filter_status_reset>
	radio_ar_status_reset();
   17b66:	f002 f839 	bl	19bdc <radio_ar_status_reset>
}
   17b6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   17b6e:	f001 be15 	b.w	1979c <radio_rssi_status_reset>
   17b72:	bf00      	nop

00017b74 <lll_isr_cleanup>:
{
   17b74:	b508      	push	{r3, lr}
   17b76:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   17b78:	4815      	ldr	r0, [pc, #84]	; (17bd0 <lll_isr_cleanup+0x5c>)
   17b7a:	f001 fc8f 	bl	1949c <radio_isr_set>
	if (!radio_is_idle()) {
   17b7e:	f001 fdbd 	bl	196fc <radio_is_idle>
   17b82:	b150      	cbz	r0, 17b9a <lll_isr_cleanup+0x26>
	radio_tmr_stop();
   17b84:	f001 fefc 	bl	19980 <radio_tmr_stop>
	err = lll_hfclock_off();
   17b88:	f000 f958 	bl	17e3c <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   17b8c:	2800      	cmp	r0, #0
   17b8e:	db0c      	blt.n	17baa <lll_isr_cleanup+0x36>
}
   17b90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   17b94:	2000      	movs	r0, #0
   17b96:	f7ff bf15 	b.w	179c4 <lll_done>
		radio_disable();
   17b9a:	f001 fd77 	bl	1968c <radio_disable>
	radio_tmr_stop();
   17b9e:	f001 feef 	bl	19980 <radio_tmr_stop>
	err = lll_hfclock_off();
   17ba2:	f000 f94b 	bl	17e3c <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   17ba6:	2800      	cmp	r0, #0
   17ba8:	daf2      	bge.n	17b90 <lll_isr_cleanup+0x1c>
   17baa:	4a0a      	ldr	r2, [pc, #40]	; (17bd4 <lll_isr_cleanup+0x60>)
   17bac:	490a      	ldr	r1, [pc, #40]	; (17bd8 <lll_isr_cleanup+0x64>)
   17bae:	480b      	ldr	r0, [pc, #44]	; (17bdc <lll_isr_cleanup+0x68>)
   17bb0:	f44f 730c 	mov.w	r3, #560	; 0x230
   17bb4:	f006 fbe6 	bl	1e384 <printk>
   17bb8:	4040      	eors	r0, r0
   17bba:	f380 8811 	msr	BASEPRI, r0
   17bbe:	f04f 0003 	mov.w	r0, #3
   17bc2:	df02      	svc	2
	lll_done(NULL);
   17bc4:	2000      	movs	r0, #0
}
   17bc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   17bca:	f7ff befb 	b.w	179c4 <lll_done>
   17bce:	bf00      	nop
   17bd0:	00017619 	.word	0x00017619
   17bd4:	00024d6c 	.word	0x00024d6c
   17bd8:	00024e40 	.word	0x00024e40
   17bdc:	00024334 	.word	0x00024334

00017be0 <lll_isr_abort>:
{
   17be0:	b510      	push	{r4, lr}
   17be2:	4604      	mov	r4, r0
	lll_isr_status_reset();
   17be4:	f7ff ffb8 	bl	17b58 <lll_isr_status_reset>
	lll_isr_cleanup(param);
   17be8:	4620      	mov	r0, r4
}
   17bea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   17bee:	f7ff bfc1 	b.w	17b74 <lll_isr_cleanup>
   17bf2:	bf00      	nop

00017bf4 <lll_isr_early_abort>:
{
   17bf4:	b508      	push	{r3, lr}
   17bf6:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   17bf8:	4813      	ldr	r0, [pc, #76]	; (17c48 <lll_isr_early_abort+0x54>)
   17bfa:	f001 fc4f 	bl	1949c <radio_isr_set>
	if (!radio_is_idle()) {
   17bfe:	f001 fd7d 	bl	196fc <radio_is_idle>
   17c02:	b140      	cbz	r0, 17c16 <lll_isr_early_abort+0x22>
	err = lll_hfclock_off();
   17c04:	f000 f91a 	bl	17e3c <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   17c08:	2800      	cmp	r0, #0
   17c0a:	db0a      	blt.n	17c22 <lll_isr_early_abort+0x2e>
}
   17c0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   17c10:	2000      	movs	r0, #0
   17c12:	f7ff bed7 	b.w	179c4 <lll_done>
		radio_disable();
   17c16:	f001 fd39 	bl	1968c <radio_disable>
	err = lll_hfclock_off();
   17c1a:	f000 f90f 	bl	17e3c <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   17c1e:	2800      	cmp	r0, #0
   17c20:	daf4      	bge.n	17c0c <lll_isr_early_abort+0x18>
   17c22:	4a0a      	ldr	r2, [pc, #40]	; (17c4c <lll_isr_early_abort+0x58>)
   17c24:	490a      	ldr	r1, [pc, #40]	; (17c50 <lll_isr_early_abort+0x5c>)
   17c26:	480b      	ldr	r0, [pc, #44]	; (17c54 <lll_isr_early_abort+0x60>)
   17c28:	f240 233f 	movw	r3, #575	; 0x23f
   17c2c:	f006 fbaa 	bl	1e384 <printk>
   17c30:	4040      	eors	r0, r0
   17c32:	f380 8811 	msr	BASEPRI, r0
   17c36:	f04f 0003 	mov.w	r0, #3
   17c3a:	df02      	svc	2
	lll_done(NULL);
   17c3c:	2000      	movs	r0, #0
}
   17c3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   17c42:	f7ff bebf 	b.w	179c4 <lll_done>
   17c46:	bf00      	nop
   17c48:	00017619 	.word	0x00017619
   17c4c:	00024d6c 	.word	0x00024d6c
   17c50:	00024e40 	.word	0x00024e40
   17c54:	00024334 	.word	0x00024334

00017c58 <lll_prepare_resolve>:
{
   17c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17c5c:	b084      	sub	sp, #16
   17c5e:	4605      	mov	r5, r0
	idx = UINT8_MAX;
   17c60:	f04f 0cff 	mov.w	ip, #255	; 0xff
	p = ull_prepare_dequeue_iter(&idx);
   17c64:	f10d 000f 	add.w	r0, sp, #15
{
   17c68:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
	idx = UINT8_MAX;
   17c6c:	f88d c00f 	strb.w	ip, [sp, #15]
{
   17c70:	460e      	mov	r6, r1
   17c72:	4617      	mov	r7, r2
   17c74:	461c      	mov	r4, r3
	p = ull_prepare_dequeue_iter(&idx);
   17c76:	f7f9 f8f1 	bl	10e5c <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   17c7a:	b918      	cbnz	r0, 17c84 <lll_prepare_resolve+0x2c>
   17c7c:	e01c      	b.n	17cb8 <lll_prepare_resolve+0x60>
		p = ull_prepare_dequeue_iter(&idx);
   17c7e:	f7f9 f8ed 	bl	10e5c <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   17c82:	b1c8      	cbz	r0, 17cb8 <lll_prepare_resolve+0x60>
   17c84:	7f03      	ldrb	r3, [r0, #28]
   17c86:	079b      	lsls	r3, r3, #30
		p = ull_prepare_dequeue_iter(&idx);
   17c88:	f10d 000f 	add.w	r0, sp, #15
	while (p && (p->is_aborted || p->is_resume)) {
   17c8c:	d1f7      	bne.n	17c7e <lll_prepare_resolve+0x26>
	    event.curr.abort_cb ||
   17c8e:	4b2c      	ldr	r3, [pc, #176]	; (17d40 <lll_prepare_resolve+0xe8>)
	if ((!is_dequeue && !is_done_sync()) ||
   17c90:	689a      	ldr	r2, [r3, #8]
   17c92:	b9a2      	cbnz	r2, 17cbe <lll_prepare_resolve+0x66>
	    (p && is_resume)) {
   17c94:	f1b8 0f00 	cmp.w	r8, #0
   17c98:	d033      	beq.n	17d02 <lll_prepare_resolve+0xaa>
		err = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   17c9a:	f8cd 8000 	str.w	r8, [sp]
   17c9e:	463b      	mov	r3, r7
   17ca0:	4631      	mov	r1, r6
   17ca2:	4628      	mov	r0, r5
   17ca4:	4622      	mov	r2, r4
   17ca6:	f7f9 f88d 	bl	10dc4 <ull_prepare_enqueue>
		LL_ASSERT(!err);
   17caa:	b9c8      	cbnz	r0, 17ce0 <lll_prepare_resolve+0x88>
		return -EINPROGRESS;
   17cac:	f06f 0476 	mvn.w	r4, #118	; 0x76
}
   17cb0:	4620      	mov	r0, r4
   17cb2:	b004      	add	sp, #16
   17cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    event.curr.abort_cb ||
   17cb8:	4b21      	ldr	r3, [pc, #132]	; (17d40 <lll_prepare_resolve+0xe8>)
	if ((!is_dequeue && !is_done_sync()) ||
   17cba:	689a      	ldr	r2, [r3, #8]
   17cbc:	b30a      	cbz	r2, 17d02 <lll_prepare_resolve+0xaa>
		err = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   17cbe:	f8cd 8000 	str.w	r8, [sp]
   17cc2:	463b      	mov	r3, r7
   17cc4:	4631      	mov	r1, r6
   17cc6:	4628      	mov	r0, r5
   17cc8:	4622      	mov	r2, r4
   17cca:	f7f9 f87b 	bl	10dc4 <ull_prepare_enqueue>
		LL_ASSERT(!err);
   17cce:	b938      	cbnz	r0, 17ce0 <lll_prepare_resolve+0x88>
		if (is_resume) {
   17cd0:	f1b8 0f00 	cmp.w	r8, #0
   17cd4:	d1ea      	bne.n	17cac <lll_prepare_resolve+0x54>
		preempt_ticker_start(prepare_param);
   17cd6:	68e1      	ldr	r1, [r4, #12]
   17cd8:	6820      	ldr	r0, [r4, #0]
   17cda:	f7ff fccf 	bl	1767c <preempt_ticker_start.isra.0>
   17cde:	e7e5      	b.n	17cac <lll_prepare_resolve+0x54>
		LL_ASSERT(!err);
   17ce0:	4a18      	ldr	r2, [pc, #96]	; (17d44 <lll_prepare_resolve+0xec>)
   17ce2:	4919      	ldr	r1, [pc, #100]	; (17d48 <lll_prepare_resolve+0xf0>)
   17ce4:	4819      	ldr	r0, [pc, #100]	; (17d4c <lll_prepare_resolve+0xf4>)
   17ce6:	f240 237a 	movw	r3, #634	; 0x27a
   17cea:	f006 fb4b 	bl	1e384 <printk>
   17cee:	4040      	eors	r0, r0
   17cf0:	f380 8811 	msr	BASEPRI, r0
   17cf4:	f04f 0003 	mov.w	r0, #3
   17cf8:	df02      	svc	2
		if (is_resume) {
   17cfa:	f1b8 0f00 	cmp.w	r8, #0
   17cfe:	d1d5      	bne.n	17cac <lll_prepare_resolve+0x54>
   17d00:	e7e9      	b.n	17cd6 <lll_prepare_resolve+0x7e>
	event.curr.param = prepare_param->param;
   17d02:	68e2      	ldr	r2, [r4, #12]
   17d04:	601a      	str	r2, [r3, #0]
	event.curr.abort_cb = abort_cb;
   17d06:	e9c3 5601 	strd	r5, r6, [r3, #4]
	err = prepare_cb(prepare_param);
   17d0a:	4620      	mov	r0, r4
   17d0c:	47b8      	blx	r7
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   17d0e:	2200      	movs	r2, #0
   17d10:	4b0f      	ldr	r3, [pc, #60]	; (17d50 <lll_prepare_resolve+0xf8>)
   17d12:	9200      	str	r2, [sp, #0]
	err = prepare_cb(prepare_param);
   17d14:	4604      	mov	r4, r0
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   17d16:	4611      	mov	r1, r2
   17d18:	4610      	mov	r0, r2
   17d1a:	f7f6 fb73 	bl	e404 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   17d1e:	2802      	cmp	r0, #2
   17d20:	d9c6      	bls.n	17cb0 <lll_prepare_resolve+0x58>
   17d22:	4a08      	ldr	r2, [pc, #32]	; (17d44 <lll_prepare_resolve+0xec>)
   17d24:	490b      	ldr	r1, [pc, #44]	; (17d54 <lll_prepare_resolve+0xfc>)
   17d26:	4809      	ldr	r0, [pc, #36]	; (17d4c <lll_prepare_resolve+0xf4>)
   17d28:	f44f 732d 	mov.w	r3, #692	; 0x2b4
   17d2c:	f006 fb2a 	bl	1e384 <printk>
   17d30:	4040      	eors	r0, r0
   17d32:	f380 8811 	msr	BASEPRI, r0
   17d36:	f04f 0003 	mov.w	r0, #3
   17d3a:	df02      	svc	2
   17d3c:	e7b8      	b.n	17cb0 <lll_prepare_resolve+0x58>
   17d3e:	bf00      	nop
   17d40:	200024a8 	.word	0x200024a8
   17d44:	00024d6c 	.word	0x00024d6c
   17d48:	000245cc 	.word	0x000245cc
   17d4c:	00024334 	.word	0x00024334
   17d50:	0001761d 	.word	0x0001761d
   17d54:	00024dd4 	.word	0x00024dd4

00017d58 <clock_ready>:
	z_impl_k_sem_give(sem);
   17d58:	f101 0010 	add.w	r0, r1, #16
   17d5c:	f005 bcde 	b.w	1d71c <z_impl_k_sem_give>

00017d60 <blocking_on>:

	k_sem_give(&clk_state->sem);
}

static int blocking_on(struct onoff_manager *mgr, uint32_t timeout)
{
   17d60:	b530      	push	{r4, r5, lr}
   17d62:	4604      	mov	r4, r0
   17d64:	b08b      	sub	sp, #44	; 0x2c
   17d66:	460d      	mov	r5, r1
	return z_impl_k_sem_init(sem, initial_count, limit);
   17d68:	2201      	movs	r2, #1
   17d6a:	2100      	movs	r1, #0
   17d6c:	a804      	add	r0, sp, #16
   17d6e:	f00b f9ae 	bl	230ce <z_impl_k_sem_init>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   17d72:	2300      	movs	r3, #0
   17d74:	4a0e      	ldr	r2, [pc, #56]	; (17db0 <blocking_on+0x50>)
   17d76:	9303      	str	r3, [sp, #12]
	struct lll_clock_state state;
	int err;

	k_sem_init(&state.sem, 0, 1);
	sys_notify_init_callback(&state.cli.notify, clock_ready);
	err = onoff_request(mgr, &state.cli);
   17d78:	4620      	mov	r0, r4
   17d7a:	2303      	movs	r3, #3
   17d7c:	4669      	mov	r1, sp
   17d7e:	9201      	str	r2, [sp, #4]
   17d80:	9302      	str	r3, [sp, #8]
   17d82:	f006 fb7b 	bl	1e47c <onoff_request>
	if (err < 0) {
   17d86:	2800      	cmp	r0, #0
   17d88:	db10      	blt.n	17dac <blocking_on+0x4c>
   17d8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   17d8e:	f240 30e7 	movw	r0, #999	; 0x3e7
   17d92:	2100      	movs	r1, #0
   17d94:	fbe3 0105 	umlal	r0, r1, r3, r5
   17d98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17d9c:	2300      	movs	r3, #0
   17d9e:	f7e8 fe4d 	bl	a3c <__aeabi_uldivmod>
   17da2:	4602      	mov	r2, r0
   17da4:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   17da6:	a804      	add	r0, sp, #16
   17da8:	f005 fcde 	bl	1d768 <z_impl_k_sem_take>
		return err;
	}

	return k_sem_take(&state.sem, K_MSEC(timeout));
}
   17dac:	b00b      	add	sp, #44	; 0x2c
   17dae:	bd30      	pop	{r4, r5, pc}
   17db0:	00017d59 	.word	0x00017d59

00017db4 <lll_clock_init>:

int lll_clock_init(void)
{
   17db4:	b510      	push	{r4, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   17db6:	2001      	movs	r0, #1
   17db8:	f7ec ff48 	bl	4c4c <z_nrf_clock_control_get_onoff>
	*notify = (struct sys_notify){
   17dbc:	4904      	ldr	r1, [pc, #16]	; (17dd0 <lll_clock_init+0x1c>)
   17dbe:	2401      	movs	r4, #1
   17dc0:	2300      	movs	r3, #0
   17dc2:	608c      	str	r4, [r1, #8]
   17dc4:	60cb      	str	r3, [r1, #12]

	sys_notify_init_spinwait(&lf_cli.notify);

	return onoff_request(mgr, &lf_cli);
}
   17dc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17dca:	604b      	str	r3, [r1, #4]
	return onoff_request(mgr, &lf_cli);
   17dcc:	f006 bb56 	b.w	1e47c <onoff_request>
   17dd0:	200024c0 	.word	0x200024c0

00017dd4 <lll_clock_wait>:
{
	struct onoff_manager *mgr;
	static bool done;
	int err;

	if (done) {
   17dd4:	4b0c      	ldr	r3, [pc, #48]	; (17e08 <lll_clock_wait+0x34>)
   17dd6:	781a      	ldrb	r2, [r3, #0]
   17dd8:	b10a      	cbz	r2, 17dde <lll_clock_wait+0xa>
		return 0;
   17dda:	2000      	movs	r0, #0
	if (err != ONOFF_STATE_ON) {
		return -EIO;
	}

	return 0;
}
   17ddc:	4770      	bx	lr
{
   17dde:	b510      	push	{r4, lr}
	done = true;
   17de0:	2001      	movs	r0, #1
   17de2:	7018      	strb	r0, [r3, #0]
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   17de4:	f7ec ff32 	bl	4c4c <z_nrf_clock_control_get_onoff>
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   17de8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   17dec:	4604      	mov	r4, r0
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   17dee:	f7ff ffb7 	bl	17d60 <blocking_on>
	if (err) {
   17df2:	b938      	cbnz	r0, 17e04 <lll_clock_wait+0x30>
	err = onoff_release(mgr);
   17df4:	4620      	mov	r0, r4
   17df6:	f006 fb8a 	bl	1e50e <onoff_release>
	if (err != ONOFF_STATE_ON) {
   17dfa:	2802      	cmp	r0, #2
		return 0;
   17dfc:	bf0c      	ite	eq
   17dfe:	2000      	moveq	r0, #0
		return -EIO;
   17e00:	f06f 0004 	mvnne.w	r0, #4
}
   17e04:	bd10      	pop	{r4, pc}
   17e06:	bf00      	nop
   17e08:	200031bf 	.word	0x200031bf

00017e0c <lll_hfclock_on>:

int lll_hfclock_on(void)
{
   17e0c:	b508      	push	{r3, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   17e0e:	4b0a      	ldr	r3, [pc, #40]	; (17e38 <lll_hfclock_on+0x2c>)
   17e10:	f3bf 8f5b 	dmb	ish
   17e14:	e853 2f00 	ldrex	r2, [r3]
   17e18:	1c51      	adds	r1, r2, #1
   17e1a:	e843 1000 	strex	r0, r1, [r3]
   17e1e:	2800      	cmp	r0, #0
   17e20:	d1f8      	bne.n	17e14 <lll_hfclock_on+0x8>
   17e22:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&hf_refcnt) > 0) {
   17e26:	2a00      	cmp	r2, #0
   17e28:	dd01      	ble.n	17e2e <lll_hfclock_on+0x22>

	z_nrf_clock_bt_ctlr_hf_request();
	DEBUG_RADIO_XTAL(1);

	return 0;
}
   17e2a:	2000      	movs	r0, #0
   17e2c:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_request();
   17e2e:	f7ec ff15 	bl	4c5c <z_nrf_clock_bt_ctlr_hf_request>
}
   17e32:	2000      	movs	r0, #0
   17e34:	bd08      	pop	{r3, pc}
   17e36:	bf00      	nop
   17e38:	200024bc 	.word	0x200024bc

00017e3c <lll_hfclock_off>:

	return err;
}

int lll_hfclock_off(void)
{
   17e3c:	b508      	push	{r3, lr}
	if (hf_refcnt < 1) {
   17e3e:	4b0d      	ldr	r3, [pc, #52]	; (17e74 <lll_hfclock_off+0x38>)
   17e40:	681a      	ldr	r2, [r3, #0]
   17e42:	2a00      	cmp	r2, #0
   17e44:	dd12      	ble.n	17e6c <lll_hfclock_off+0x30>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   17e46:	f3bf 8f5b 	dmb	ish
   17e4a:	e853 2f00 	ldrex	r2, [r3]
   17e4e:	1e51      	subs	r1, r2, #1
   17e50:	e843 1000 	strex	r0, r1, [r3]
   17e54:	2800      	cmp	r0, #0
   17e56:	d1f8      	bne.n	17e4a <lll_hfclock_off+0xe>
   17e58:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_dec(&hf_refcnt) > 1) {
   17e5c:	2a01      	cmp	r2, #1
   17e5e:	dd01      	ble.n	17e64 <lll_hfclock_off+0x28>
		return 0;
   17e60:	2000      	movs	r0, #0

	z_nrf_clock_bt_ctlr_hf_release();
	DEBUG_RADIO_XTAL(0);

	return 0;
}
   17e62:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_release();
   17e64:	f7ec ff10 	bl	4c88 <z_nrf_clock_bt_ctlr_hf_release>
	return 0;
   17e68:	2000      	movs	r0, #0
}
   17e6a:	bd08      	pop	{r3, pc}
		return -EALREADY;
   17e6c:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   17e70:	bd08      	pop	{r3, pc}
   17e72:	bf00      	nop
   17e74:	200024bc 	.word	0x200024bc

00017e78 <lll_clock_ppm_local_get>:
}

uint32_t lll_clock_ppm_local_get(void)
{
	return sca_ppm_lut[CLOCK_CONTROL_NRF_K32SRC_ACCURACY];
}
   17e78:	2014      	movs	r0, #20
   17e7a:	4770      	bx	lr

00017e7c <lll_clock_ppm_get>:

uint32_t lll_clock_ppm_get(uint8_t sca)
{
	return sca_ppm_lut[sca];
   17e7c:	4b01      	ldr	r3, [pc, #4]	; (17e84 <lll_clock_ppm_get+0x8>)
}
   17e7e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   17e82:	4770      	bx	lr
   17e84:	00024e6c 	.word	0x00024e6c

00017e88 <isr_abort>:

	lll_isr_cleanup(param);
}

static void isr_abort(void *param)
{
   17e88:	b510      	push	{r4, lr}
   17e8a:	4604      	mov	r4, r0
	/* Clear radio status and events */
	lll_isr_status_reset();
   17e8c:	f7ff fe64 	bl	17b58 <lll_isr_status_reset>

	radio_filter_disable();
   17e90:	f001 fcb2 	bl	197f8 <radio_filter_disable>

	lll_isr_cleanup(param);
   17e94:	4620      	mov	r0, r4
}
   17e96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   17e9a:	f7ff be6b 	b.w	17b74 <lll_isr_cleanup>
   17e9e:	bf00      	nop

00017ea0 <isr_tx>:
{
   17ea0:	b530      	push	{r4, r5, lr}
   17ea2:	b083      	sub	sp, #12
   17ea4:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   17ea6:	f7ff fe45 	bl	17b34 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   17eaa:	2096      	movs	r0, #150	; 0x96
   17eac:	f001 fcd6 	bl	1985c <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(phy_p, 0, phy_p, 0);
   17eb0:	2300      	movs	r3, #0
   17eb2:	461a      	mov	r2, r3
   17eb4:	4619      	mov	r1, r3
   17eb6:	4618      	mov	r0, r3
   17eb8:	f001 fc56 	bl	19768 <radio_switch_complete_and_tx>
	radio_pkt_rx_set(radio_pkt_scratch_get());
   17ebc:	f001 fc42 	bl	19744 <radio_pkt_scratch_get>
   17ec0:	f001 fbc8 	bl	19654 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   17ec4:	f001 fc06 	bl	196d4 <radio_is_ready>
   17ec8:	b9d8      	cbnz	r0, 17f02 <isr_tx+0x62>
	radio_isr_set(isr_rx, param);
   17eca:	481e      	ldr	r0, [pc, #120]	; (17f44 <isr_tx+0xa4>)
   17ecc:	4621      	mov	r1, r4
   17ece:	f001 fae5 	bl	1949c <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   17ed2:	f7ff fb6f 	bl	175b4 <ull_filter_lll_rl_enabled>
   17ed6:	bb48      	cbnz	r0, 17f2c <isr_tx+0x8c>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   17ed8:	f001 fdae 	bl	19a38 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   17edc:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   17ede:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   17ee0:	4608      	mov	r0, r1
   17ee2:	f001 fbc7 	bl	19674 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   17ee6:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   17ee8:	4605      	mov	r5, r0
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   17eea:	4608      	mov	r0, r1
   17eec:	f001 fbbe 	bl	1966c <radio_tx_chain_delay_get>
   17ef0:	442c      	add	r4, r5
   17ef2:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   17ef4:	1a20      	subs	r0, r4, r0
   17ef6:	f001 fd57 	bl	199a8 <radio_tmr_hcto_configure>
	radio_tmr_end_capture();
   17efa:	f001 fd8f 	bl	19a1c <radio_tmr_end_capture>
}
   17efe:	b003      	add	sp, #12
   17f00:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!radio_is_ready());
   17f02:	4a11      	ldr	r2, [pc, #68]	; (17f48 <isr_tx+0xa8>)
   17f04:	4911      	ldr	r1, [pc, #68]	; (17f4c <isr_tx+0xac>)
   17f06:	4812      	ldr	r0, [pc, #72]	; (17f50 <isr_tx+0xb0>)
   17f08:	f240 33b9 	movw	r3, #953	; 0x3b9
   17f0c:	f006 fa3a 	bl	1e384 <printk>
   17f10:	4040      	eors	r0, r0
   17f12:	f380 8811 	msr	BASEPRI, r0
   17f16:	f04f 0003 	mov.w	r0, #3
   17f1a:	df02      	svc	2
	radio_isr_set(isr_rx, param);
   17f1c:	4809      	ldr	r0, [pc, #36]	; (17f44 <isr_tx+0xa4>)
   17f1e:	4621      	mov	r1, r4
   17f20:	f001 fabc 	bl	1949c <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   17f24:	f7ff fb46 	bl	175b4 <ull_filter_lll_rl_enabled>
   17f28:	2800      	cmp	r0, #0
   17f2a:	d0d5      	beq.n	17ed8 <isr_tx+0x38>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   17f2c:	f10d 0007 	add.w	r0, sp, #7
   17f30:	f7ff fa6e 	bl	17410 <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   17f34:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   17f36:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   17f38:	f89d 0007 	ldrb.w	r0, [sp, #7]
   17f3c:	f001 fe16 	bl	19b6c <radio_ar_configure>
   17f40:	e7ca      	b.n	17ed8 <isr_tx+0x38>
   17f42:	bf00      	nop
   17f44:	00018695 	.word	0x00018695
   17f48:	00024e7c 	.word	0x00024e7c
   17f4c:	00024ec8 	.word	0x00024ec8
   17f50:	00024334 	.word	0x00024334

00017f54 <is_abort_cb>:
	if (next != curr) {
   17f54:	4281      	cmp	r1, r0
{
   17f56:	b508      	push	{r3, lr}
	if (next != curr) {
   17f58:	d00e      	beq.n	17f78 <is_abort_cb+0x24>
		} else if (lll->is_hdcd) {
   17f5a:	7a0b      	ldrb	r3, [r1, #8]
   17f5c:	07db      	lsls	r3, r3, #31
   17f5e:	d402      	bmi.n	17f66 <is_abort_cb+0x12>
			return -ECANCELED;
   17f60:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   17f64:	bd08      	pop	{r3, pc}
			*resume_cb = resume_prepare_cb;
   17f66:	4b13      	ldr	r3, [pc, #76]	; (17fb4 <is_abort_cb+0x60>)
   17f68:	6013      	str	r3, [r2, #0]
			err = lll_hfclock_on();
   17f6a:	f7ff ff4f 	bl	17e0c <lll_hfclock_on>
			LL_ASSERT(err >= 0);
   17f6e:	2800      	cmp	r0, #0
   17f70:	db0f      	blt.n	17f92 <is_abort_cb+0x3e>
   17f72:	f06f 000a 	mvn.w	r0, #10
}
   17f76:	bd08      	pop	{r3, pc}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
}

static inline struct pdu_adv *lll_adv_data_curr_get(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   17f78:	7b0b      	ldrb	r3, [r1, #12]
   17f7a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   17f7e:	690b      	ldr	r3, [r1, #16]
   17f80:	781b      	ldrb	r3, [r3, #0]
   17f82:	f003 030f 	and.w	r3, r3, #15
   17f86:	2b01      	cmp	r3, #1
		return 0;
   17f88:	bf14      	ite	ne
   17f8a:	f06f 008b 	mvnne.w	r0, #139	; 0x8b
   17f8e:	2000      	moveq	r0, #0
}
   17f90:	bd08      	pop	{r3, pc}
			LL_ASSERT(err >= 0);
   17f92:	4a09      	ldr	r2, [pc, #36]	; (17fb8 <is_abort_cb+0x64>)
   17f94:	4909      	ldr	r1, [pc, #36]	; (17fbc <is_abort_cb+0x68>)
   17f96:	480a      	ldr	r0, [pc, #40]	; (17fc0 <is_abort_cb+0x6c>)
   17f98:	f240 3377 	movw	r3, #887	; 0x377
   17f9c:	f006 f9f2 	bl	1e384 <printk>
   17fa0:	4040      	eors	r0, r0
   17fa2:	f380 8811 	msr	BASEPRI, r0
   17fa6:	f04f 0003 	mov.w	r0, #3
   17faa:	df02      	svc	2
   17fac:	f06f 000a 	mvn.w	r0, #10
}
   17fb0:	bd08      	pop	{r3, pc}
   17fb2:	bf00      	nop
   17fb4:	00018461 	.word	0x00018461
   17fb8:	00024e7c 	.word	0x00024e7c
   17fbc:	00024e40 	.word	0x00024e40
   17fc0:	00024334 	.word	0x00024334

00017fc4 <abort_cb>:
{
   17fc4:	b510      	push	{r4, lr}
	if (!prepare_param) {
   17fc6:	b1d8      	cbz	r0, 18000 <abort_cb+0x3c>
	err = lll_hfclock_off();
   17fc8:	460c      	mov	r4, r1
   17fca:	f7ff ff37 	bl	17e3c <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   17fce:	2800      	cmp	r0, #0
   17fd0:	db04      	blt.n	17fdc <abort_cb+0x18>
	lll_done(param);
   17fd2:	4620      	mov	r0, r4
}
   17fd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   17fd8:	f7ff bcf4 	b.w	179c4 <lll_done>
	LL_ASSERT(err >= 0);
   17fdc:	4a0c      	ldr	r2, [pc, #48]	; (18010 <abort_cb+0x4c>)
   17fde:	490d      	ldr	r1, [pc, #52]	; (18014 <abort_cb+0x50>)
   17fe0:	480d      	ldr	r0, [pc, #52]	; (18018 <abort_cb+0x54>)
   17fe2:	f240 339d 	movw	r3, #925	; 0x39d
   17fe6:	f006 f9cd 	bl	1e384 <printk>
   17fea:	4040      	eors	r0, r0
   17fec:	f380 8811 	msr	BASEPRI, r0
   17ff0:	f04f 0003 	mov.w	r0, #3
   17ff4:	df02      	svc	2
	lll_done(param);
   17ff6:	4620      	mov	r0, r4
}
   17ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   17ffc:	f7ff bce2 	b.w	179c4 <lll_done>
		radio_isr_set(isr_abort, param);
   18000:	4806      	ldr	r0, [pc, #24]	; (1801c <abort_cb+0x58>)
   18002:	f001 fa4b 	bl	1949c <radio_isr_set>
}
   18006:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   1800a:	f001 bb3f 	b.w	1968c <radio_disable>
   1800e:	bf00      	nop
   18010:	00024e7c 	.word	0x00024e7c
   18014:	00024e40 	.word	0x00024e40
   18018:	00024334 	.word	0x00024334
   1801c:	00017e89 	.word	0x00017e89

00018020 <lll_adv_init>:
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   18020:	4b08      	ldr	r3, [pc, #32]	; (18044 <lll_adv_init+0x24>)
{
   18022:	b510      	push	{r4, lr}
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   18024:	1d18      	adds	r0, r3, #4
   18026:	2205      	movs	r2, #5
   18028:	2128      	movs	r1, #40	; 0x28
   1802a:	f7f4 fdef 	bl	cc0c <mem_init>
	MFIFO_INIT(pdu_free);
   1802e:	4b06      	ldr	r3, [pc, #24]	; (18048 <lll_adv_init+0x28>)
   18030:	2400      	movs	r4, #0
   18032:	805c      	strh	r4, [r3, #2]
	return z_impl_k_sem_init(sem, initial_count, limit);
   18034:	2203      	movs	r2, #3
   18036:	4621      	mov	r1, r4
   18038:	4804      	ldr	r0, [pc, #16]	; (1804c <lll_adv_init+0x2c>)
   1803a:	f00b f848 	bl	230ce <z_impl_k_sem_init>
}
   1803e:	4620      	mov	r0, r4
   18040:	bd10      	pop	{r4, pc}
   18042:	bf00      	nop
   18044:	200024d0 	.word	0x200024d0
   18048:	20000520 	.word	0x20000520
   1804c:	2000259c 	.word	0x2000259c

00018050 <lll_adv_reset>:
   18050:	f7ff bfe6 	b.w	18020 <lll_adv_init>

00018054 <lll_adv_data_init>:
{
   18054:	b510      	push	{r4, lr}
   18056:	4604      	mov	r4, r0
	p = mem_acquire(&mem_pdu.free);
   18058:	4805      	ldr	r0, [pc, #20]	; (18070 <lll_adv_data_init+0x1c>)
   1805a:	f7f4 fdf7 	bl	cc4c <mem_acquire>
	if (!p) {
   1805e:	b120      	cbz	r0, 1806a <lll_adv_data_init+0x16>
   18060:	4603      	mov	r3, r0
	p->len = 0U;
   18062:	2000      	movs	r0, #0
   18064:	7058      	strb	r0, [r3, #1]
	pdu->pdu[0] = (void *)p;
   18066:	6063      	str	r3, [r4, #4]
}
   18068:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   1806a:	f06f 000b 	mvn.w	r0, #11
}
   1806e:	bd10      	pop	{r4, pc}
   18070:	200024d0 	.word	0x200024d0

00018074 <lll_adv_data_reset>:
{
   18074:	4603      	mov	r3, r0
	pdu->first = 0U;
   18076:	2000      	movs	r0, #0
   18078:	7018      	strb	r0, [r3, #0]
	pdu->last = 0U;
   1807a:	7058      	strb	r0, [r3, #1]
	pdu->pdu[1] = NULL;
   1807c:	6098      	str	r0, [r3, #8]
}
   1807e:	4770      	bx	lr

00018080 <lll_adv_pdu_alloc>:
{
   18080:	b570      	push	{r4, r5, r6, lr}
	first = pdu->first;
   18082:	7802      	ldrb	r2, [r0, #0]
	last = pdu->last;
   18084:	7843      	ldrb	r3, [r0, #1]
	if (first == last) {
   18086:	429a      	cmp	r2, r3
   18088:	d004      	beq.n	18094 <lll_adv_pdu_alloc+0x14>
		pdu->last = first;
   1808a:	b2d4      	uxtb	r4, r2
   1808c:	7044      	strb	r4, [r0, #1]
		first_latest = pdu->first;
   1808e:	7802      	ldrb	r2, [r0, #0]
		if (first_latest != first) {
   18090:	4294      	cmp	r4, r2
   18092:	d003      	beq.n	1809c <lll_adv_pdu_alloc+0x1c>
		last++;
   18094:	3301      	adds	r3, #1
   18096:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
   18098:	2b02      	cmp	r3, #2
   1809a:	d007      	beq.n	180ac <lll_adv_pdu_alloc+0x2c>
	*idx = last;
   1809c:	461c      	mov	r4, r3
   1809e:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   180a2:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   180a4:	6865      	ldr	r5, [r4, #4]
	if (p) {
   180a6:	b14d      	cbz	r5, 180bc <lll_adv_pdu_alloc+0x3c>
}
   180a8:	4628      	mov	r0, r5
   180aa:	bd70      	pop	{r4, r5, r6, pc}
{
   180ac:	2400      	movs	r4, #0
			last = 0U;
   180ae:	4623      	mov	r3, r4
	*idx = last;
   180b0:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   180b4:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   180b6:	6865      	ldr	r5, [r4, #4]
	if (p) {
   180b8:	2d00      	cmp	r5, #0
   180ba:	d1f5      	bne.n	180a8 <lll_adv_pdu_alloc+0x28>
	p = MFIFO_DEQUEUE_PEEK(pdu_free);
   180bc:	4e34      	ldr	r6, [pc, #208]	; (18190 <lll_adv_pdu_alloc+0x110>)
   180be:	78b2      	ldrb	r2, [r6, #2]
	if (first == last) {
   180c0:	78f1      	ldrb	r1, [r6, #3]
   180c2:	7833      	ldrb	r3, [r6, #0]
   180c4:	4291      	cmp	r1, r2
   180c6:	d003      	beq.n	180d0 <lll_adv_pdu_alloc+0x50>
	return *((void **)(fifo + first * size));
   180c8:	fb02 6303 	mla	r3, r2, r3, r6
   180cc:	685d      	ldr	r5, [r3, #4]
	if (p) {
   180ce:	b93d      	cbnz	r5, 180e0 <lll_adv_pdu_alloc+0x60>
	p = mem_acquire(&mem_pdu.free);
   180d0:	4830      	ldr	r0, [pc, #192]	; (18194 <lll_adv_pdu_alloc+0x114>)
   180d2:	f7f4 fdbb 	bl	cc4c <mem_acquire>
	if (p) {
   180d6:	4605      	mov	r5, r0
   180d8:	b1a8      	cbz	r0, 18106 <lll_adv_pdu_alloc+0x86>
	pdu->pdu[last] = (void *)p;
   180da:	6065      	str	r5, [r4, #4]
}
   180dc:	4628      	mov	r0, r5
   180de:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_sem_take(sem, timeout);
   180e0:	482d      	ldr	r0, [pc, #180]	; (18198 <lll_adv_pdu_alloc+0x118>)
   180e2:	2200      	movs	r2, #0
   180e4:	2300      	movs	r3, #0
   180e6:	f005 fb3f 	bl	1d768 <z_impl_k_sem_take>
		LL_ASSERT(!err);
   180ea:	2800      	cmp	r0, #0
   180ec:	d134      	bne.n	18158 <lll_adv_pdu_alloc+0xd8>
	uint8_t _first = *first; /* Copy read-index */
   180ee:	78b3      	ldrb	r3, [r6, #2]
	if (_first == last) {
   180f0:	78f2      	ldrb	r2, [r6, #3]
		MFIFO_DEQUEUE(pdu_free);
   180f2:	7871      	ldrb	r1, [r6, #1]
   180f4:	429a      	cmp	r2, r3
   180f6:	d0f0      	beq.n	180da <lll_adv_pdu_alloc+0x5a>
	_first += 1U;
   180f8:	3301      	adds	r3, #1
   180fa:	b2db      	uxtb	r3, r3
		_first = 0U;
   180fc:	4299      	cmp	r1, r3
   180fe:	bf08      	it	eq
   18100:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   18102:	70b3      	strb	r3, [r6, #2]

	return mem;
   18104:	e7e9      	b.n	180da <lll_adv_pdu_alloc+0x5a>
   18106:	4824      	ldr	r0, [pc, #144]	; (18198 <lll_adv_pdu_alloc+0x118>)
   18108:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1810c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18110:	f005 fb2a 	bl	1d768 <z_impl_k_sem_take>
	LL_ASSERT(!err);
   18114:	2800      	cmp	r0, #0
   18116:	d12d      	bne.n	18174 <lll_adv_pdu_alloc+0xf4>
	uint8_t _first = *first; /* Copy read-index */
   18118:	78b3      	ldrb	r3, [r6, #2]
	if (_first == last) {
   1811a:	78f1      	ldrb	r1, [r6, #3]
	p = MFIFO_DEQUEUE(pdu_free);
   1811c:	7832      	ldrb	r2, [r6, #0]
   1811e:	7870      	ldrb	r0, [r6, #1]
   18120:	4299      	cmp	r1, r3
   18122:	d00a      	beq.n	1813a <lll_adv_pdu_alloc+0xba>
	mem = *((void **)(fifo + _first * size));
   18124:	fb03 6202 	mla	r2, r3, r2, r6
	_first += 1U;
   18128:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   1812a:	6855      	ldr	r5, [r2, #4]
	_first += 1U;
   1812c:	b2db      	uxtb	r3, r3
		_first = 0U;
   1812e:	4298      	cmp	r0, r3
   18130:	bf08      	it	eq
   18132:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   18134:	70b3      	strb	r3, [r6, #2]
	LL_ASSERT(p);
   18136:	2d00      	cmp	r5, #0
   18138:	d1cf      	bne.n	180da <lll_adv_pdu_alloc+0x5a>
   1813a:	4a18      	ldr	r2, [pc, #96]	; (1819c <lll_adv_pdu_alloc+0x11c>)
   1813c:	4918      	ldr	r1, [pc, #96]	; (181a0 <lll_adv_pdu_alloc+0x120>)
   1813e:	4819      	ldr	r0, [pc, #100]	; (181a4 <lll_adv_pdu_alloc+0x124>)
   18140:	f240 2382 	movw	r3, #642	; 0x282
   18144:	f006 f91e 	bl	1e384 <printk>
   18148:	4040      	eors	r0, r0
   1814a:	f380 8811 	msr	BASEPRI, r0
   1814e:	f04f 0003 	mov.w	r0, #3
   18152:	df02      	svc	2
   18154:	2500      	movs	r5, #0
   18156:	e7c0      	b.n	180da <lll_adv_pdu_alloc+0x5a>
		LL_ASSERT(!err);
   18158:	4a10      	ldr	r2, [pc, #64]	; (1819c <lll_adv_pdu_alloc+0x11c>)
   1815a:	4913      	ldr	r1, [pc, #76]	; (181a8 <lll_adv_pdu_alloc+0x128>)
   1815c:	4811      	ldr	r0, [pc, #68]	; (181a4 <lll_adv_pdu_alloc+0x124>)
   1815e:	f240 236f 	movw	r3, #623	; 0x26f
   18162:	f006 f90f 	bl	1e384 <printk>
   18166:	4040      	eors	r0, r0
   18168:	f380 8811 	msr	BASEPRI, r0
   1816c:	f04f 0003 	mov.w	r0, #3
   18170:	df02      	svc	2
   18172:	e7bc      	b.n	180ee <lll_adv_pdu_alloc+0x6e>
	LL_ASSERT(!err);
   18174:	4a09      	ldr	r2, [pc, #36]	; (1819c <lll_adv_pdu_alloc+0x11c>)
   18176:	490c      	ldr	r1, [pc, #48]	; (181a8 <lll_adv_pdu_alloc+0x128>)
   18178:	480a      	ldr	r0, [pc, #40]	; (181a4 <lll_adv_pdu_alloc+0x124>)
   1817a:	f240 237f 	movw	r3, #639	; 0x27f
   1817e:	f006 f901 	bl	1e384 <printk>
   18182:	4040      	eors	r0, r0
   18184:	f380 8811 	msr	BASEPRI, r0
   18188:	f04f 0003 	mov.w	r0, #3
   1818c:	df02      	svc	2
   1818e:	e7c3      	b.n	18118 <lll_adv_pdu_alloc+0x98>
   18190:	20000520 	.word	0x20000520
   18194:	200024d0 	.word	0x200024d0
   18198:	2000259c 	.word	0x2000259c
   1819c:	00024e7c 	.word	0x00024e7c
   181a0:	00024edc 	.word	0x00024edc
   181a4:	00024334 	.word	0x00024334
   181a8:	000245cc 	.word	0x000245cc

000181ac <lll_adv_pdu_latest_get>:
{
   181ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   181ae:	4604      	mov	r4, r0
	first = pdu->first;
   181b0:	7803      	ldrb	r3, [r0, #0]
	if (first != pdu->last) {
   181b2:	7840      	ldrb	r0, [r0, #1]
   181b4:	4298      	cmp	r0, r3
   181b6:	d029      	beq.n	1820c <lll_adv_pdu_latest_get+0x60>
		if (!MFIFO_ENQUEUE_IDX_GET(pdu_free, &free_idx)) {
   181b8:	4d16      	ldr	r5, [pc, #88]	; (18214 <lll_adv_pdu_latest_get+0x68>)
   181ba:	b2da      	uxtb	r2, r3
	last = last + 1;
   181bc:	78eb      	ldrb	r3, [r5, #3]
	if (last == count) {
   181be:	786e      	ldrb	r6, [r5, #1]
   181c0:	78a8      	ldrb	r0, [r5, #2]
	last = last + 1;
   181c2:	3301      	adds	r3, #1
   181c4:	b2db      	uxtb	r3, r3
		last = 0U;
   181c6:	429e      	cmp	r6, r3
   181c8:	bf08      	it	eq
   181ca:	2300      	moveq	r3, #0
	if (last == first) {
   181cc:	4298      	cmp	r0, r3
   181ce:	d01f      	beq.n	18210 <lll_adv_pdu_latest_get+0x64>
		first += 1U;
   181d0:	1c50      	adds	r0, r2, #1
   181d2:	b2c0      	uxtb	r0, r0
		if (first == DOUBLE_BUFFER_SIZE) {
   181d4:	2802      	cmp	r0, #2
   181d6:	bf04      	itt	eq
   181d8:	2600      	moveq	r6, #0
			first = 0U;
   181da:	4630      	moveq	r0, r6
		*is_modified = 1U;
   181dc:	f04f 0701 	mov.w	r7, #1
		pdu->first = first;
   181e0:	7020      	strb	r0, [r4, #0]
		*is_modified = 1U;
   181e2:	700f      	strb	r7, [r1, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   181e4:	7829      	ldrb	r1, [r5, #0]
   181e6:	bf18      	it	ne
   181e8:	4606      	movne	r6, r0
   181ea:	78e8      	ldrb	r0, [r5, #3]
   181ec:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   181f0:	fb00 5101 	mla	r1, r0, r1, r5
		pdu->pdu[pdu_idx] = NULL;
   181f4:	2700      	movs	r7, #0
		p = pdu->pdu[pdu_idx];
   181f6:	6850      	ldr	r0, [r2, #4]
		pdu->pdu[pdu_idx] = NULL;
   181f8:	6057      	str	r7, [r2, #4]
   181fa:	6048      	str	r0, [r1, #4]
	*last = idx; /* Commit: Update write index */
   181fc:	70eb      	strb	r3, [r5, #3]
	z_impl_k_sem_give(sem);
   181fe:	4806      	ldr	r0, [pc, #24]	; (18218 <lll_adv_pdu_latest_get+0x6c>)
   18200:	f005 fa8c 	bl	1d71c <z_impl_k_sem_give>
	return (void *)pdu->pdu[first];
   18204:	eb04 0486 	add.w	r4, r4, r6, lsl #2
   18208:	6860      	ldr	r0, [r4, #4]
}
   1820a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1820c:	4606      	mov	r6, r0
   1820e:	e7f9      	b.n	18204 <lll_adv_pdu_latest_get+0x58>
			return NULL;
   18210:	2000      	movs	r0, #0
}
   18212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18214:	20000520 	.word	0x20000520
   18218:	2000259c 	.word	0x2000259c

0001821c <chan_prepare>:
{
	struct pdu_adv *pdu;
	uint8_t chan;
	uint8_t upd;

	chan = find_lsb_set(lll->chan_map_curr);
   1821c:	7a03      	ldrb	r3, [r0, #8]
{
   1821e:	b570      	push	{r4, r5, r6, lr}
	chan = find_lsb_set(lll->chan_map_curr);
   18220:	f3c3 1302 	ubfx	r3, r3, #4, #3
   18224:	2b00      	cmp	r3, #0
{
   18226:	4604      	mov	r4, r0
   18228:	fa93 f0a3 	rbit	r0, r3
   1822c:	fab0 f080 	clz	r0, r0
   18230:	bf08      	it	eq
   18232:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
	LL_ASSERT(chan);
   18236:	1c45      	adds	r5, r0, #1
{
   18238:	b082      	sub	sp, #8
	LL_ASSERT(chan);
   1823a:	d047      	beq.n	182cc <chan_prepare+0xb0>

	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   1823c:	7a22      	ldrb	r2, [r4, #8]
   1823e:	1e59      	subs	r1, r3, #1
   18240:	400b      	ands	r3, r1
   18242:	f363 1206 	bfi	r2, r3, #4, #3

	lll_chan_set(36 + chan);
   18246:	f105 0024 	add.w	r0, r5, #36	; 0x24
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   1824a:	7222      	strb	r2, [r4, #8]
	lll_chan_set(36 + chan);
   1824c:	f7ff fc2e 	bl	17aac <lll_chan_set>

	/* FIXME: get latest only when primary PDU without Aux PDUs */
	upd = 0U;
   18250:	2300      	movs	r3, #0
#endif /* CONFIG_BT_CTLR_ADV_EXT_PDU_EXTRA_DATA_MEMORY */

static inline struct pdu_adv *lll_adv_data_latest_get(struct lll_adv *lll,
						      uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->adv_data, is_modified);
   18252:	f10d 0107 	add.w	r1, sp, #7
   18256:	f104 000c 	add.w	r0, r4, #12
   1825a:	f88d 3007 	strb.w	r3, [sp, #7]
   1825e:	f7ff ffa5 	bl	181ac <lll_adv_pdu_latest_get>
	pdu = lll_adv_data_latest_get(lll, &upd);
	LL_ASSERT(pdu);
   18262:	4605      	mov	r5, r0
   18264:	2800      	cmp	r0, #0
   18266:	d042      	beq.n	182ee <chan_prepare+0xd2>

	radio_pkt_tx_set(pdu);
   18268:	4628      	mov	r0, r5
   1826a:	f001 f9f9 	bl	19660 <radio_pkt_tx_set>

	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   1826e:	782b      	ldrb	r3, [r5, #0]
   18270:	f003 030f 	and.w	r3, r3, #15
   18274:	2b02      	cmp	r3, #2
   18276:	d020      	beq.n	182ba <chan_prepare+0x9e>
}

static inline struct pdu_adv *lll_adv_scan_rsp_latest_get(struct lll_adv *lll,
							  uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
   18278:	f10d 0107 	add.w	r1, sp, #7
   1827c:	f104 0018 	add.w	r0, r4, #24
   18280:	f7ff ff94 	bl	181ac <lll_adv_pdu_latest_get>
	    (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) ||
	     (pdu->type != PDU_ADV_TYPE_EXT_IND))) {
		struct pdu_adv *scan_pdu;

		scan_pdu = lll_adv_scan_rsp_latest_get(lll, &upd);
		LL_ASSERT(scan_pdu);
   18284:	4606      	mov	r6, r0
   18286:	2800      	cmp	r0, #0
   18288:	d03f      	beq.n	1830a <chan_prepare+0xee>

#if defined(CONFIG_BT_CTLR_PRIVACY)
		if (upd) {
   1828a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1828e:	b963      	cbnz	r3, 182aa <chan_prepare+0x8e>
#else
		ARG_UNUSED(scan_pdu);
		ARG_UNUSED(upd);
#endif /* !CONFIG_BT_CTLR_PRIVACY */

		radio_isr_set(isr_tx, lll);
   18290:	4621      	mov	r1, r4
   18292:	4825      	ldr	r0, [pc, #148]	; (18328 <chan_prepare+0x10c>)
   18294:	f001 f902 	bl	1949c <radio_isr_set>
		radio_tmr_tifs_set(EVENT_IFS_US);
   18298:	2096      	movs	r0, #150	; 0x96
   1829a:	f001 fadf 	bl	1985c <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   1829e:	2000      	movs	r0, #0
   182a0:	f001 fa54 	bl	1974c <radio_switch_complete_and_rx>
		radio_isr_set(isr_done, lll);
		radio_switch_complete_and_disable();
	}

	return pdu;
}
   182a4:	4628      	mov	r0, r5
   182a6:	b002      	add	sp, #8
   182a8:	bd70      	pop	{r4, r5, r6, pc}
   182aa:	462b      	mov	r3, r5
   182ac:	f853 2f02 	ldr.w	r2, [r3, #2]!
   182b0:	f8c6 2002 	str.w	r2, [r6, #2]
   182b4:	889b      	ldrh	r3, [r3, #4]
   182b6:	80f3      	strh	r3, [r6, #6]
   182b8:	e7ea      	b.n	18290 <chan_prepare+0x74>
		radio_isr_set(isr_done, lll);
   182ba:	481c      	ldr	r0, [pc, #112]	; (1832c <chan_prepare+0x110>)
   182bc:	4621      	mov	r1, r4
   182be:	f001 f8ed 	bl	1949c <radio_isr_set>
		radio_switch_complete_and_disable();
   182c2:	f001 fa5d 	bl	19780 <radio_switch_complete_and_disable>
}
   182c6:	4628      	mov	r0, r5
   182c8:	b002      	add	sp, #8
   182ca:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(chan);
   182cc:	4a18      	ldr	r2, [pc, #96]	; (18330 <chan_prepare+0x114>)
   182ce:	4919      	ldr	r1, [pc, #100]	; (18334 <chan_prepare+0x118>)
   182d0:	4819      	ldr	r0, [pc, #100]	; (18338 <chan_prepare+0x11c>)
   182d2:	f240 43a6 	movw	r3, #1190	; 0x4a6
   182d6:	f006 f855 	bl	1e384 <printk>
   182da:	4040      	eors	r0, r0
   182dc:	f380 8811 	msr	BASEPRI, r0
   182e0:	f04f 0003 	mov.w	r0, #3
   182e4:	df02      	svc	2
   182e6:	7a23      	ldrb	r3, [r4, #8]
   182e8:	f3c3 1302 	ubfx	r3, r3, #4, #3
   182ec:	e7a6      	b.n	1823c <chan_prepare+0x20>
	LL_ASSERT(pdu);
   182ee:	4a10      	ldr	r2, [pc, #64]	; (18330 <chan_prepare+0x114>)
   182f0:	4912      	ldr	r1, [pc, #72]	; (1833c <chan_prepare+0x120>)
   182f2:	4811      	ldr	r0, [pc, #68]	; (18338 <chan_prepare+0x11c>)
   182f4:	f240 43af 	movw	r3, #1199	; 0x4af
   182f8:	f006 f844 	bl	1e384 <printk>
   182fc:	4040      	eors	r0, r0
   182fe:	f380 8811 	msr	BASEPRI, r0
   18302:	f04f 0003 	mov.w	r0, #3
   18306:	df02      	svc	2
   18308:	e7ae      	b.n	18268 <chan_prepare+0x4c>
		LL_ASSERT(scan_pdu);
   1830a:	4a09      	ldr	r2, [pc, #36]	; (18330 <chan_prepare+0x114>)
   1830c:	490c      	ldr	r1, [pc, #48]	; (18340 <chan_prepare+0x124>)
   1830e:	480a      	ldr	r0, [pc, #40]	; (18338 <chan_prepare+0x11c>)
   18310:	f240 43b9 	movw	r3, #1209	; 0x4b9
   18314:	f006 f836 	bl	1e384 <printk>
   18318:	4040      	eors	r0, r0
   1831a:	f380 8811 	msr	BASEPRI, r0
   1831e:	f04f 0003 	mov.w	r0, #3
   18322:	df02      	svc	2
   18324:	e7b1      	b.n	1828a <chan_prepare+0x6e>
   18326:	bf00      	nop
   18328:	00017ea1 	.word	0x00017ea1
   1832c:	00018489 	.word	0x00018489
   18330:	00024e7c 	.word	0x00024e7c
   18334:	00024b44 	.word	0x00024b44
   18338:	00024334 	.word	0x00024334
   1833c:	00024ee0 	.word	0x00024ee0
   18340:	00024ee4 	.word	0x00024ee4

00018344 <prepare_cb>:
{
   18344:	b5f0      	push	{r4, r5, r6, r7, lr}
	lll = p->param;
   18346:	68c4      	ldr	r4, [r0, #12]
	if (unlikely(lll->conn &&
   18348:	6863      	ldr	r3, [r4, #4]
{
   1834a:	b083      	sub	sp, #12
   1834c:	4605      	mov	r5, r0
	if (unlikely(lll->conn &&
   1834e:	2b00      	cmp	r3, #0
   18350:	d16d      	bne.n	1842e <prepare_cb+0xea>
	radio_reset();
   18352:	f001 f8e5 	bl	19520 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   18356:	2000      	movs	r0, #0
   18358:	f001 f916 	bl	19588 <radio_tx_power_set>
	radio_phy_set(0, 0);
   1835c:	2100      	movs	r1, #0
   1835e:	4608      	mov	r0, r1
   18360:	f001 f902 	bl	19568 <radio_phy_set>
	radio_pkt_configure(8, PDU_AC_LEG_PAYLOAD_SIZE_MAX, 0);
   18364:	2200      	movs	r2, #0
   18366:	2125      	movs	r1, #37	; 0x25
   18368:	2008      	movs	r0, #8
   1836a:	f001 f945 	bl	195f8 <radio_pkt_configure>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   1836e:	4b35      	ldr	r3, [pc, #212]	; (18444 <prepare_cb+0x100>)
   18370:	9301      	str	r3, [sp, #4]
	radio_aa_set((uint8_t *)&aa);
   18372:	a801      	add	r0, sp, #4
   18374:	f001 f926 	bl	195c4 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   18378:	4933      	ldr	r1, [pc, #204]	; (18448 <prepare_cb+0x104>)
   1837a:	f240 605b 	movw	r0, #1627	; 0x65b
   1837e:	f001 f9c7 	bl	19710 <radio_crc_configure>
	lll->chan_map_curr = lll->chan_map;
   18382:	7a23      	ldrb	r3, [r4, #8]
   18384:	f3c3 0242 	ubfx	r2, r3, #1, #3
   18388:	f362 1306 	bfi	r3, r2, #4, #3
   1838c:	7223      	strb	r3, [r4, #8]
	pdu = chan_prepare(lll);
   1838e:	4620      	mov	r0, r4
   18390:	f7ff ff44 	bl	1821c <chan_prepare>
	if (ull_filter_lll_rl_enabled()) {
   18394:	f7ff f90e 	bl	175b4 <ull_filter_lll_rl_enabled>
   18398:	bb98      	cbnz	r0, 18402 <prepare_cb+0xbe>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER) && lll->filter_policy) {
   1839a:	7a63      	ldrb	r3, [r4, #9]
   1839c:	079b      	lsls	r3, r3, #30
   1839e:	d127      	bne.n	183f0 <prepare_cb+0xac>
	evt = HDR_LLL2EVT(lll);
   183a0:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   183a2:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   183a4:	4638      	mov	r0, r7
   183a6:	f7ff fb63 	bl	17a70 <lll_evt_offset_get>
   183aa:	4406      	add	r6, r0
	start_us = radio_tmr_start(1, ticks_at_start, remainder);
   183ac:	686a      	ldr	r2, [r5, #4]
   183ae:	f106 0109 	add.w	r1, r6, #9
   183b2:	2001      	movs	r0, #1
   183b4:	f001 fa5e 	bl	19874 <radio_tmr_start>
	radio_tmr_end_capture();
   183b8:	f001 fb30 	bl	19a1c <radio_tmr_end_capture>
				   ull_adv_lll_handle_get(lll)),
   183bc:	4620      	mov	r0, r4
   183be:	f7f9 f9a7 	bl	11710 <ull_adv_lll_handle_get>
	if (lll_preempt_calc(evt, (TICKER_ID_ADV_BASE +
   183c2:	1c81      	adds	r1, r0, #2
   183c4:	4632      	mov	r2, r6
   183c6:	b2c9      	uxtb	r1, r1
   183c8:	4638      	mov	r0, r7
   183ca:	f7ff fb5f 	bl	17a8c <lll_preempt_calc>
   183ce:	b930      	cbnz	r0, 183de <prepare_cb+0x9a>
		ret = lll_prepare_done(lll);
   183d0:	4620      	mov	r0, r4
   183d2:	f7ff faf5 	bl	179c0 <lll_prepare_done>
		LL_ASSERT(!ret);
   183d6:	b9d0      	cbnz	r0, 1840e <prepare_cb+0xca>
}
   183d8:	2000      	movs	r0, #0
   183da:	b003      	add	sp, #12
   183dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_isr_set(isr_abort, lll);
   183de:	481b      	ldr	r0, [pc, #108]	; (1844c <prepare_cb+0x108>)
   183e0:	4621      	mov	r1, r4
   183e2:	f001 f85b 	bl	1949c <radio_isr_set>
		radio_disable();
   183e6:	f001 f951 	bl	1968c <radio_disable>
}
   183ea:	2000      	movs	r0, #0
   183ec:	b003      	add	sp, #12
   183ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct lll_filter *wl = ull_filter_lll_get(true);
   183f0:	2001      	movs	r0, #1
   183f2:	f7ff f899 	bl	17528 <ull_filter_lll_get>
		radio_filter_configure(wl->enable_bitmask,
   183f6:	7841      	ldrb	r1, [r0, #1]
   183f8:	1c82      	adds	r2, r0, #2
   183fa:	7800      	ldrb	r0, [r0, #0]
   183fc:	f001 f9e0 	bl	197c0 <radio_filter_configure>
   18400:	e7ce      	b.n	183a0 <prepare_cb+0x5c>
			ull_filter_lll_get(!!(lll->filter_policy));
   18402:	7a60      	ldrb	r0, [r4, #9]
   18404:	f010 0003 	ands.w	r0, r0, #3
   18408:	bf18      	it	ne
   1840a:	2001      	movne	r0, #1
   1840c:	e7f1      	b.n	183f2 <prepare_cb+0xae>
		LL_ASSERT(!ret);
   1840e:	4a10      	ldr	r2, [pc, #64]	; (18450 <prepare_cb+0x10c>)
   18410:	4910      	ldr	r1, [pc, #64]	; (18454 <prepare_cb+0x110>)
   18412:	4811      	ldr	r0, [pc, #68]	; (18458 <prepare_cb+0x114>)
   18414:	f240 334e 	movw	r3, #846	; 0x34e
   18418:	f005 ffb4 	bl	1e384 <printk>
   1841c:	4040      	eors	r0, r0
   1841e:	f380 8811 	msr	BASEPRI, r0
   18422:	f04f 0003 	mov.w	r0, #3
   18426:	df02      	svc	2
}
   18428:	2000      	movs	r0, #0
   1842a:	b003      	add	sp, #12
   1842c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (unlikely(lll->conn &&
   1842e:	f893 3020 	ldrb.w	r3, [r3, #32]
   18432:	079a      	lsls	r2, r3, #30
   18434:	d08d      	beq.n	18352 <prepare_cb+0xe>
		radio_isr_set(lll_isr_early_abort, lll);
   18436:	4809      	ldr	r0, [pc, #36]	; (1845c <prepare_cb+0x118>)
   18438:	4621      	mov	r1, r4
   1843a:	f001 f82f 	bl	1949c <radio_isr_set>
		radio_disable();
   1843e:	f001 f925 	bl	1968c <radio_disable>
		return 0;
   18442:	e7c9      	b.n	183d8 <prepare_cb+0x94>
   18444:	8e89bed6 	.word	0x8e89bed6
   18448:	00555555 	.word	0x00555555
   1844c:	00017e89 	.word	0x00017e89
   18450:	00024e7c 	.word	0x00024e7c
   18454:	000246c8 	.word	0x000246c8
   18458:	00024334 	.word	0x00024334
   1845c:	00017bf5 	.word	0x00017bf5

00018460 <resume_prepare_cb>:
	evt = HDR_LLL2EVT(p->param);
   18460:	68c3      	ldr	r3, [r0, #12]
{
   18462:	b570      	push	{r4, r5, r6, lr}
	evt = HDR_LLL2EVT(p->param);
   18464:	681e      	ldr	r6, [r3, #0]
{
   18466:	4604      	mov	r4, r0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   18468:	f7f6 f812 	bl	e490 <ticker_ticks_now_get>
   1846c:	4605      	mov	r5, r0
   1846e:	4630      	mov	r0, r6
   18470:	f7ff fafe 	bl	17a70 <lll_evt_offset_get>
	p->remainder = 0;
   18474:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   18476:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   18478:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   1847c:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   1847e:	4620      	mov	r0, r4
}
   18480:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   18484:	f7ff bf5e 	b.w	18344 <prepare_cb>

00018488 <isr_done>:
{
   18488:	b510      	push	{r4, lr}
   1848a:	4604      	mov	r4, r0
	lll_isr_status_reset();
   1848c:	f7ff fb64 	bl	17b58 <lll_isr_status_reset>
	if (!IS_ENABLED(CONFIG_BT_CTLR_LOW_LAT) && lll->is_hdcd &&
   18490:	7a23      	ldrb	r3, [r4, #8]
   18492:	f003 0271 	and.w	r2, r3, #113	; 0x71
   18496:	2a01      	cmp	r2, #1
   18498:	d105      	bne.n	184a6 <isr_done+0x1e>
		lll->chan_map_curr = lll->chan_map;
   1849a:	f3c3 0242 	ubfx	r2, r3, #1, #3
   1849e:	f362 1306 	bfi	r3, r2, #4, #3
   184a2:	7223      	strb	r3, [r4, #8]
   184a4:	b2db      	uxtb	r3, r3
	if (lll->chan_map_curr &&
   184a6:	f013 0f70 	tst.w	r3, #112	; 0x70
   184aa:	d005      	beq.n	184b8 <isr_done+0x30>
	    (!lll->conn || !lll->conn->slave.cancelled) &&
   184ac:	6863      	ldr	r3, [r4, #4]
   184ae:	b153      	cbz	r3, 184c6 <isr_done+0x3e>
   184b0:	f893 3020 	ldrb.w	r3, [r3, #32]
   184b4:	079b      	lsls	r3, r3, #30
   184b6:	d506      	bpl.n	184c6 <isr_done+0x3e>
	radio_filter_disable();
   184b8:	f001 f99e 	bl	197f8 <radio_filter_disable>
	lll_isr_cleanup(param);
   184bc:	4620      	mov	r0, r4
}
   184be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   184c2:	f7ff bb57 	b.w	17b74 <lll_isr_cleanup>
		pdu = chan_prepare(lll);
   184c6:	4620      	mov	r0, r4
   184c8:	f7ff fea8 	bl	1821c <chan_prepare>
		radio_tx_enable();
   184cc:	f001 f8d8 	bl	19680 <radio_tx_enable>
}
   184d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_tmr_end_capture();
   184d4:	f001 baa2 	b.w	19a1c <radio_tmr_end_capture>

000184d8 <lll_adv_prepare>:
{
   184d8:	b510      	push	{r4, lr}
   184da:	b082      	sub	sp, #8
   184dc:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   184de:	f7ff fc95 	bl	17e0c <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   184e2:	2800      	cmp	r0, #0
   184e4:	db1a      	blt.n	1851c <lll_adv_prepare+0x44>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   184e6:	4a14      	ldr	r2, [pc, #80]	; (18538 <lll_adv_prepare+0x60>)
   184e8:	4914      	ldr	r1, [pc, #80]	; (1853c <lll_adv_prepare+0x64>)
   184ea:	4815      	ldr	r0, [pc, #84]	; (18540 <lll_adv_prepare+0x68>)
   184ec:	9400      	str	r4, [sp, #0]
   184ee:	2300      	movs	r3, #0
   184f0:	f7f8 fd6c 	bl	10fcc <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   184f4:	b108      	cbz	r0, 184fa <lll_adv_prepare+0x22>
   184f6:	3077      	adds	r0, #119	; 0x77
   184f8:	d101      	bne.n	184fe <lll_adv_prepare+0x26>
}
   184fa:	b002      	add	sp, #8
   184fc:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   184fe:	4a11      	ldr	r2, [pc, #68]	; (18544 <lll_adv_prepare+0x6c>)
   18500:	4911      	ldr	r1, [pc, #68]	; (18548 <lll_adv_prepare+0x70>)
   18502:	4812      	ldr	r0, [pc, #72]	; (1854c <lll_adv_prepare+0x74>)
   18504:	f44f 73f4 	mov.w	r3, #488	; 0x1e8
   18508:	f005 ff3c 	bl	1e384 <printk>
   1850c:	4040      	eors	r0, r0
   1850e:	f380 8811 	msr	BASEPRI, r0
   18512:	f04f 0003 	mov.w	r0, #3
   18516:	df02      	svc	2
}
   18518:	b002      	add	sp, #8
   1851a:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   1851c:	4a09      	ldr	r2, [pc, #36]	; (18544 <lll_adv_prepare+0x6c>)
   1851e:	490c      	ldr	r1, [pc, #48]	; (18550 <lll_adv_prepare+0x78>)
   18520:	480a      	ldr	r0, [pc, #40]	; (1854c <lll_adv_prepare+0x74>)
   18522:	f240 13e5 	movw	r3, #485	; 0x1e5
   18526:	f005 ff2d 	bl	1e384 <printk>
   1852a:	4040      	eors	r0, r0
   1852c:	f380 8811 	msr	BASEPRI, r0
   18530:	f04f 0003 	mov.w	r0, #3
   18534:	df02      	svc	2
   18536:	e7d6      	b.n	184e6 <lll_adv_prepare+0xe>
   18538:	00018345 	.word	0x00018345
   1853c:	00017fc5 	.word	0x00017fc5
   18540:	00017f55 	.word	0x00017f55
   18544:	00024e7c 	.word	0x00024e7c
   18548:	00024ef0 	.word	0x00024ef0
   1854c:	00024334 	.word	0x00024334
   18550:	00024e40 	.word	0x00024e40

00018554 <lll_adv_scan_req_check>:
{
   18554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return ((((lll->filter_policy & 0x01) == 0) &&
   18558:	7a45      	ldrb	r5, [r0, #9]
{
   1855a:	f89d 8020 	ldrb.w	r8, [sp, #32]
   1855e:	4617      	mov	r7, r2
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   18560:	07ea      	lsls	r2, r5, #31
{
   18562:	4689      	mov	r9, r1
   18564:	461e      	mov	r6, r3
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   18566:	d50a      	bpl.n	1857e <lll_adv_scan_req_check+0x2a>
		(((lll->filter_policy & 0x01) != 0) &&
   18568:	f1b8 0f00 	cmp.w	r8, #0
   1856c:	d017      	beq.n	1859e <lll_adv_scan_req_check+0x4a>
}

static bool isr_rx_sr_adva_check(uint8_t tx_addr, uint8_t *addr,
				 struct pdu_adv *sr)
{
	return (tx_addr == sr->rx_addr) &&
   1856e:	f899 3000 	ldrb.w	r3, [r9]
   18572:	ebb7 1fd3 	cmp.w	r7, r3, lsr #7
   18576:	d019      	beq.n	185ac <lll_adv_scan_req_check+0x58>
{
   18578:	2000      	movs	r0, #0
}
   1857a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1857e:	4604      	mov	r4, r0
		 ull_filter_lll_rl_addr_allowed(sr->tx_addr,
   18580:	f811 0b02 	ldrb.w	r0, [r1], #2
   18584:	9a09      	ldr	r2, [sp, #36]	; 0x24
   18586:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1858a:	f7fe ffd9 	bl	17540 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & 0x01) == 0) &&
   1858e:	2800      	cmp	r0, #0
   18590:	d1ed      	bne.n	1856e <lll_adv_scan_req_check+0x1a>
		(((lll->filter_policy & 0x01) != 0) &&
   18592:	7a63      	ldrb	r3, [r4, #9]
						rl_idx)) ||
   18594:	07db      	lsls	r3, r3, #31
   18596:	d5ef      	bpl.n	18578 <lll_adv_scan_req_check+0x24>
		(((lll->filter_policy & 0x01) != 0) &&
   18598:	f1b8 0f00 	cmp.w	r8, #0
   1859c:	d1e7      	bne.n	1856e <lll_adv_scan_req_check+0x1a>
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   1859e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   185a0:	7818      	ldrb	r0, [r3, #0]
   185a2:	f7fe ff91 	bl	174c8 <ull_filter_lll_irk_whitelisted>
   185a6:	2800      	cmp	r0, #0
   185a8:	d1e1      	bne.n	1856e <lll_adv_scan_req_check+0x1a>
   185aa:	e7e5      	b.n	18578 <lll_adv_scan_req_check+0x24>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   185ac:	f109 0108 	add.w	r1, r9, #8
   185b0:	4630      	mov	r0, r6
   185b2:	2206      	movs	r2, #6
   185b4:	f00b f847 	bl	23646 <memcmp>
	return (tx_addr == sr->rx_addr) &&
   185b8:	fab0 f080 	clz	r0, r0
   185bc:	0940      	lsrs	r0, r0, #5
}
   185be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   185c2:	bf00      	nop

000185c4 <lll_adv_connect_ind_check>:
{
   185c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   185c8:	461f      	mov	r7, r3
	if (tgt_addr) {
   185ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
{
   185cc:	f89d 8020 	ldrb.w	r8, [sp, #32]
   185d0:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
   185d4:	4605      	mov	r5, r0
   185d6:	460c      	mov	r4, r1
   185d8:	4692      	mov	sl, r2
	if (tgt_addr) {
   185da:	b9fb      	cbnz	r3, 1861c <lll_adv_connect_ind_check+0x58>
	return ((((lll->filter_policy & 0x02) == 0) &&
   185dc:	7a43      	ldrb	r3, [r0, #9]
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   185de:	079a      	lsls	r2, r3, #30
   185e0:	d507      	bpl.n	185f2 <lll_adv_connect_ind_check+0x2e>
		(((lll->filter_policy & 0x02) != 0) &&
   185e2:	b1a6      	cbz	r6, 1860e <lll_adv_connect_ind_check+0x4a>
}

static inline bool isr_rx_ci_adva_check(uint8_t tx_addr, uint8_t *addr,
					struct pdu_adv *ci)
{
	return (tx_addr == ci->rx_addr) &&
   185e4:	7823      	ldrb	r3, [r4, #0]
   185e6:	ebba 1fd3 	cmp.w	sl, r3, lsr #7
   185ea:	d03a      	beq.n	18662 <lll_adv_connect_ind_check+0x9e>
   185ec:	2000      	movs	r0, #0
}
   185ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		 ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   185f2:	f811 0b02 	ldrb.w	r0, [r1], #2
   185f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   185f8:	f3c0 1080 	ubfx	r0, r0, #6, #1
   185fc:	f7fe ffa0 	bl	17540 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & 0x02) == 0) &&
   18600:	2800      	cmp	r0, #0
   18602:	d1ef      	bne.n	185e4 <lll_adv_connect_ind_check+0x20>
		(((lll->filter_policy & 0x02) != 0) &&
   18604:	7a6b      	ldrb	r3, [r5, #9]
						rl_idx)) ||
   18606:	079b      	lsls	r3, r3, #30
   18608:	d5f0      	bpl.n	185ec <lll_adv_connect_ind_check+0x28>
		(((lll->filter_policy & 0x02) != 0) &&
   1860a:	2e00      	cmp	r6, #0
   1860c:	d1ea      	bne.n	185e4 <lll_adv_connect_ind_check+0x20>
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   1860e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   18610:	7818      	ldrb	r0, [r3, #0]
   18612:	f7fe ff59 	bl	174c8 <ull_filter_lll_irk_whitelisted>
   18616:	2800      	cmp	r0, #0
   18618:	d1e4      	bne.n	185e4 <lll_adv_connect_ind_check+0x20>
   1861a:	e7e7      	b.n	185ec <lll_adv_connect_ind_check+0x28>
						      ci->connect_ind.init_addr,
   1861c:	4689      	mov	r9, r1
		return ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   1861e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   18620:	f819 0b02 	ldrb.w	r0, [r9], #2
   18624:	f3c0 1080 	ubfx	r0, r0, #6, #1
   18628:	4649      	mov	r1, r9
   1862a:	f7fe ff89 	bl	17540 <ull_filter_lll_rl_addr_allowed>
		       isr_rx_ci_adva_check(tx_addr, addr, ci) &&
   1862e:	2800      	cmp	r0, #0
   18630:	d0dc      	beq.n	185ec <lll_adv_connect_ind_check+0x28>
	return (tx_addr == ci->rx_addr) &&
   18632:	7823      	ldrb	r3, [r4, #0]
   18634:	ebba 1fd3 	cmp.w	sl, r3, lsr #7
   18638:	d1d8      	bne.n	185ec <lll_adv_connect_ind_check+0x28>
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   1863a:	4638      	mov	r0, r7
   1863c:	2206      	movs	r2, #6
   1863e:	f104 0108 	add.w	r1, r4, #8
   18642:	f00b f800 	bl	23646 <memcmp>
	return (tx_addr == ci->rx_addr) &&
   18646:	2800      	cmp	r0, #0
   18648:	d1d0      	bne.n	185ec <lll_adv_connect_ind_check+0x28>
		       isr_rx_ci_tgta_check(lll, rx_addr, tgt_addr, ci,
   1864a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1864c:	7818      	ldrb	r0, [r3, #0]
	if (rl_idx != FILTER_IDX_NONE && lll->rl_idx != FILTER_IDX_NONE) {
   1864e:	28ff      	cmp	r0, #255	; 0xff
   18650:	d011      	beq.n	18676 <lll_adv_connect_ind_check+0xb2>
   18652:	7aab      	ldrb	r3, [r5, #10]
   18654:	2bff      	cmp	r3, #255	; 0xff
   18656:	d00e      	beq.n	18676 <lll_adv_connect_ind_check+0xb2>
		return rl_idx == lll->rl_idx;
   18658:	1ac0      	subs	r0, r0, r3
   1865a:	fab0 f080 	clz	r0, r0
   1865e:	0940      	lsrs	r0, r0, #5
   18660:	e7c5      	b.n	185ee <lll_adv_connect_ind_check+0x2a>
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   18662:	f104 0108 	add.w	r1, r4, #8
   18666:	4638      	mov	r0, r7
   18668:	2206      	movs	r2, #6
   1866a:	f00a ffec 	bl	23646 <memcmp>
	return (tx_addr == ci->rx_addr) &&
   1866e:	fab0 f080 	clz	r0, r0
   18672:	0940      	lsrs	r0, r0, #5
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   18674:	e7bb      	b.n	185ee <lll_adv_connect_ind_check+0x2a>
	return (rx_addr == ci->tx_addr) &&
   18676:	7823      	ldrb	r3, [r4, #0]
   18678:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1867c:	4543      	cmp	r3, r8
   1867e:	d1b5      	bne.n	185ec <lll_adv_connect_ind_check+0x28>
	       !memcmp(tgt_addr, ci->connect_ind.init_addr, BDADDR_SIZE);
   18680:	9809      	ldr	r0, [sp, #36]	; 0x24
   18682:	4649      	mov	r1, r9
   18684:	2206      	movs	r2, #6
   18686:	f00a ffde 	bl	23646 <memcmp>
	return (rx_addr == ci->tx_addr) &&
   1868a:	fab0 f080 	clz	r0, r0
   1868e:	0940      	lsrs	r0, r0, #5
   18690:	e7ad      	b.n	185ee <lll_adv_connect_ind_check+0x2a>
   18692:	bf00      	nop

00018694 <isr_rx>:
{
   18694:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18698:	b089      	sub	sp, #36	; 0x24
   1869a:	4605      	mov	r5, r0
	trx_done = radio_is_done();
   1869c:	f001 f824 	bl	196e8 <radio_is_done>
	if (trx_done) {
   186a0:	f010 0fff 	tst.w	r0, #255	; 0xff
   186a4:	d10a      	bne.n	186bc <isr_rx+0x28>
	lll_isr_status_reset();
   186a6:	f7ff fa57 	bl	17b58 <lll_isr_status_reset>
	radio_isr_set(isr_done, param);
   186aa:	487d      	ldr	r0, [pc, #500]	; (188a0 <isr_rx+0x20c>)
   186ac:	4629      	mov	r1, r5
   186ae:	f000 fef5 	bl	1949c <radio_isr_set>
	radio_disable();
   186b2:	f000 ffeb 	bl	1968c <radio_disable>
}
   186b6:	b009      	add	sp, #36	; 0x24
   186b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		crc_ok = radio_crc_is_valid();
   186bc:	f001 f834 	bl	19728 <radio_crc_is_valid>
   186c0:	4607      	mov	r7, r0
		devmatch_ok = radio_filter_has_match();
   186c2:	f001 f8ab 	bl	1981c <radio_filter_has_match>
   186c6:	4681      	mov	r9, r0
		devmatch_id = radio_filter_match_get();
   186c8:	f001 f8b2 	bl	19830 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
   186cc:	f001 fa9c 	bl	19c08 <radio_ar_has_match>
   186d0:	4604      	mov	r4, r0
		irkmatch_id = radio_ar_match_get();
   186d2:	f001 fa7d 	bl	19bd0 <radio_ar_match_get>
   186d6:	4680      	mov	r8, r0
		rssi_ready = radio_rssi_is_ready();
   186d8:	f001 f868 	bl	197ac <radio_rssi_is_ready>
	lll_isr_status_reset();
   186dc:	f7ff fa3c 	bl	17b58 <lll_isr_status_reset>
	if (crc_ok) {
   186e0:	f017 0fff 	tst.w	r7, #255	; 0xff
   186e4:	d0e1      	beq.n	186aa <isr_rx+0x16>
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   186e6:	f014 07ff 	ands.w	r7, r4, #255	; 0xff
   186ea:	f040 808b 	bne.w	18804 <isr_rx+0x170>
   186ee:	20ff      	movs	r0, #255	; 0xff
   186f0:	f88d 001f 	strb.w	r0, [sp, #31]
	pdu_rx = (void *)radio_pkt_scratch_get();
   186f4:	f001 f826 	bl	19744 <radio_pkt_scratch_get>
   186f8:	7b2b      	ldrb	r3, [r5, #12]
   186fa:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   186fe:	4604      	mov	r4, r0
   18700:	6919      	ldr	r1, [r3, #16]
	addr = pdu_adv->adv_ind.addr;
   18702:	460b      	mov	r3, r1
		devmatch_ok = radio_filter_has_match();
   18704:	fa5f f989 	uxtb.w	r9, r9
	tx_addr = pdu_adv->tx_addr;
   18708:	f813 0b02 	ldrb.w	r0, [r3], #2
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   1870c:	f000 0c0f 	and.w	ip, r0, #15
   18710:	f1bc 0f01 	cmp.w	ip, #1
		tgt_addr = pdu_adv->direct_ind.tgt_addr;
   18714:	bf08      	it	eq
   18716:	f101 0808 	addeq.w	r8, r1, #8
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1871a:	7821      	ldrb	r1, [r4, #0]
   1871c:	f001 010f 	and.w	r1, r1, #15
		tgt_addr = NULL;
   18720:	bf18      	it	ne
   18722:	f04f 0800 	movne.w	r8, #0
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   18726:	2903      	cmp	r1, #3
	tx_addr = pdu_adv->tx_addr;
   18728:	f3c0 1280 	ubfx	r2, r0, #6, #1
	rx_addr = pdu_adv->rx_addr;
   1872c:	ea4f 16d0 	mov.w	r6, r0, lsr #7
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   18730:	d06f      	beq.n	18812 <isr_rx+0x17e>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   18732:	2905      	cmp	r1, #5
   18734:	d1b9      	bne.n	186aa <isr_rx+0x16>
   18736:	7861      	ldrb	r1, [r4, #1]
   18738:	2922      	cmp	r1, #34	; 0x22
   1873a:	d1b6      	bne.n	186aa <isr_rx+0x16>
		   lll->conn && !lll->conn->slave.cancelled &&
   1873c:	6869      	ldr	r1, [r5, #4]
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
   1873e:	2900      	cmp	r1, #0
   18740:	d0b3      	beq.n	186aa <isr_rx+0x16>
		   lll->conn && !lll->conn->slave.cancelled &&
   18742:	f891 1020 	ldrb.w	r1, [r1, #32]
   18746:	0789      	lsls	r1, r1, #30
   18748:	d4af      	bmi.n	186aa <isr_rx+0x16>
		   lll_adv_connect_ind_check(lll, pdu_rx, tx_addr, addr,
   1874a:	f10d 011f 	add.w	r1, sp, #31
   1874e:	9103      	str	r1, [sp, #12]
   18750:	e9cd 8901 	strd	r8, r9, [sp, #4]
   18754:	9600      	str	r6, [sp, #0]
   18756:	4621      	mov	r1, r4
   18758:	4628      	mov	r0, r5
   1875a:	f7ff ff33 	bl	185c4 <lll_adv_connect_ind_check>
		   lll->conn && !lll->conn->slave.cancelled &&
   1875e:	2800      	cmp	r0, #0
   18760:	d0a3      	beq.n	186aa <isr_rx+0x16>
			rx = ull_pdu_rx_alloc_peek(4);
   18762:	2004      	movs	r0, #4
   18764:	f7f8 fae0 	bl	10d28 <ull_pdu_rx_alloc_peek>
		if (!rx) {
   18768:	2800      	cmp	r0, #0
   1876a:	d09e      	beq.n	186aa <isr_rx+0x16>
		radio_isr_set(isr_abort, lll);
   1876c:	484d      	ldr	r0, [pc, #308]	; (188a4 <isr_rx+0x210>)
   1876e:	4629      	mov	r1, r5
   18770:	f000 fe94 	bl	1949c <radio_isr_set>
		radio_disable();
   18774:	f000 ff8a 	bl	1968c <radio_disable>
		LL_ASSERT(!radio_is_ready());
   18778:	f000 ffac 	bl	196d4 <radio_is_ready>
   1877c:	2800      	cmp	r0, #0
   1877e:	d161      	bne.n	18844 <isr_rx+0x1b0>
		lll->conn->slave.initiated = 1;
   18780:	686a      	ldr	r2, [r5, #4]
   18782:	f892 3020 	ldrb.w	r3, [r2, #32]
   18786:	f043 0301 	orr.w	r3, r3, #1
   1878a:	f882 3020 	strb.w	r3, [r2, #32]
		rx = ull_pdu_rx_alloc();
   1878e:	f7f8 fae9 	bl	10d64 <ull_pdu_rx_alloc>
		rx->hdr.handle = 0xffff;
   18792:	f64f 73ff 	movw	r3, #65535	; 0xffff
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   18796:	2214      	movs	r2, #20
		rx->hdr.handle = 0xffff;
   18798:	80c3      	strh	r3, [r0, #6]
		rx = ull_pdu_rx_alloc();
   1879a:	4606      	mov	r6, r0
   1879c:	4621      	mov	r1, r4
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1879e:	7102      	strb	r2, [r0, #4]
   187a0:	f100 031c 	add.w	r3, r0, #28
   187a4:	f104 0e20 	add.w	lr, r4, #32
   187a8:	680c      	ldr	r4, [r1, #0]
   187aa:	6848      	ldr	r0, [r1, #4]
   187ac:	688a      	ldr	r2, [r1, #8]
   187ae:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   187b2:	f8c3 c00c 	str.w	ip, [r3, #12]
   187b6:	3110      	adds	r1, #16
   187b8:	4571      	cmp	r1, lr
   187ba:	601c      	str	r4, [r3, #0]
   187bc:	6058      	str	r0, [r3, #4]
   187be:	609a      	str	r2, [r3, #8]
   187c0:	f103 0310 	add.w	r3, r3, #16
   187c4:	d1f0      	bne.n	187a8 <isr_rx+0x114>
   187c6:	680a      	ldr	r2, [r1, #0]
   187c8:	601a      	str	r2, [r3, #0]
		ftr->param = lll;
   187ca:	60b5      	str	r5, [r6, #8]
		ftr->ticks_anchor = radio_tmr_start_get();
   187cc:	f001 f8d2 	bl	19974 <radio_tmr_start_get>
   187d0:	6130      	str	r0, [r6, #16]
		ftr->radio_end_us = radio_tmr_end_get() -
   187d2:	f001 f92b 	bl	19a2c <radio_tmr_end_get>
				    radio_tx_chain_delay_get(0, 0);
   187d6:	2100      	movs	r1, #0
		ftr->radio_end_us = radio_tmr_end_get() -
   187d8:	4604      	mov	r4, r0
				    radio_tx_chain_delay_get(0, 0);
   187da:	4608      	mov	r0, r1
   187dc:	f000 ff46 	bl	1966c <radio_tx_chain_delay_get>
		ftr->radio_end_us = radio_tmr_end_get() -
   187e0:	1a24      	subs	r4, r4, r0
   187e2:	6174      	str	r4, [r6, #20]
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   187e4:	b19f      	cbz	r7, 1880e <isr_rx+0x17a>
   187e6:	f89d 301f 	ldrb.w	r3, [sp, #31]
   187ea:	76b3      	strb	r3, [r6, #26]
			ftr->extra = ull_pdu_rx_alloc();
   187ec:	f7f8 faba 	bl	10d64 <ull_pdu_rx_alloc>
		ull_rx_put(rx->hdr.link, rx);
   187f0:	4631      	mov	r1, r6
			ftr->extra = ull_pdu_rx_alloc();
   187f2:	60f0      	str	r0, [r6, #12]
		ull_rx_put(rx->hdr.link, rx);
   187f4:	6830      	ldr	r0, [r6, #0]
   187f6:	f7f8 facd 	bl	10d94 <ull_rx_put>
		ull_rx_sched();
   187fa:	f7f8 fadb 	bl	10db4 <ull_rx_sched>
}
   187fe:	b009      	add	sp, #36	; 0x24
   18800:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   18804:	fa5f f088 	uxtb.w	r0, r8
   18808:	f7fe fe0c 	bl	17424 <ull_filter_lll_rl_irk_idx>
   1880c:	e770      	b.n	186f0 <isr_rx+0x5c>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   1880e:	23ff      	movs	r3, #255	; 0xff
   18810:	e7eb      	b.n	187ea <isr_rx+0x156>
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   18812:	7861      	ldrb	r1, [r4, #1]
   18814:	290c      	cmp	r1, #12
   18816:	f47f af48 	bne.w	186aa <isr_rx+0x16>
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
   1881a:	f1b8 0f00 	cmp.w	r8, #0
   1881e:	f47f af44 	bne.w	186aa <isr_rx+0x16>
	    lll_adv_scan_req_check(lll, pdu_rx, tx_addr, addr, devmatch_ok,
   18822:	f10d 011f 	add.w	r1, sp, #31
   18826:	e9cd 9100 	strd	r9, r1, [sp]
   1882a:	4628      	mov	r0, r5
   1882c:	4621      	mov	r1, r4
   1882e:	e9cd 2304 	strd	r2, r3, [sp, #16]
   18832:	f7ff fe8f 	bl	18554 <lll_adv_scan_req_check>
	    (tgt_addr == NULL) &&
   18836:	b998      	cbnz	r0, 18860 <isr_rx+0x1cc>
   18838:	7821      	ldrb	r1, [r4, #0]
   1883a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1883e:	f001 010f 	and.w	r1, r1, #15
   18842:	e776      	b.n	18732 <isr_rx+0x9e>
		LL_ASSERT(!radio_is_ready());
   18844:	4a18      	ldr	r2, [pc, #96]	; (188a8 <isr_rx+0x214>)
   18846:	4919      	ldr	r1, [pc, #100]	; (188ac <isr_rx+0x218>)
   18848:	4819      	ldr	r0, [pc, #100]	; (188b0 <isr_rx+0x21c>)
   1884a:	f240 5345 	movw	r3, #1349	; 0x545
   1884e:	f005 fd99 	bl	1e384 <printk>
   18852:	4040      	eors	r0, r0
   18854:	f380 8811 	msr	BASEPRI, r0
   18858:	f04f 0003 	mov.w	r0, #3
   1885c:	df02      	svc	2
   1885e:	e78f      	b.n	18780 <isr_rx+0xec>
		radio_isr_set(isr_done, lll);
   18860:	4629      	mov	r1, r5
   18862:	480f      	ldr	r0, [pc, #60]	; (188a0 <isr_rx+0x20c>)
   18864:	f000 fe1a 	bl	1949c <radio_isr_set>
		radio_switch_complete_and_disable();
   18868:	f000 ff8a 	bl	19780 <radio_switch_complete_and_disable>
}

static inline struct pdu_adv *lll_adv_scan_rsp_curr_get(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.first];
   1886c:	7e2b      	ldrb	r3, [r5, #24]
   1886e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
		radio_pkt_tx_set(lll_adv_scan_rsp_curr_get(lll));
   18872:	69e8      	ldr	r0, [r5, #28]
   18874:	f000 fef4 	bl	19660 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   18878:	f000 ff2c 	bl	196d4 <radio_is_ready>
   1887c:	2800      	cmp	r0, #0
   1887e:	f43f af1a 	beq.w	186b6 <isr_rx+0x22>
   18882:	4a09      	ldr	r2, [pc, #36]	; (188a8 <isr_rx+0x214>)
   18884:	4909      	ldr	r1, [pc, #36]	; (188ac <isr_rx+0x218>)
   18886:	480a      	ldr	r0, [pc, #40]	; (188b0 <isr_rx+0x21c>)
   18888:	f240 43fe 	movw	r3, #1278	; 0x4fe
   1888c:	f005 fd7a 	bl	1e384 <printk>
   18890:	4040      	eors	r0, r0
   18892:	f380 8811 	msr	BASEPRI, r0
   18896:	f04f 0003 	mov.w	r0, #3
   1889a:	df02      	svc	2
		if (!err) {
   1889c:	e70b      	b.n	186b6 <isr_rx+0x22>
   1889e:	bf00      	nop
   188a0:	00018489 	.word	0x00018489
   188a4:	00017e89 	.word	0x00017e89
   188a8:	00024e7c 	.word	0x00024e7c
   188ac:	00024ec8 	.word	0x00024ec8
   188b0:	00024334 	.word	0x00024334

000188b4 <isr_done>:
{
	return 0;
}

static void isr_done(void *param)
{
   188b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   188b6:	4605      	mov	r5, r0
	struct event_done_extra *e;

	lll_isr_status_reset();
   188b8:	f7ff f94e 	bl	17b58 <lll_isr_status_reset>

	e = ull_event_done_extra_get();
   188bc:	f7f8 fb48 	bl	10f50 <ull_event_done_extra_get>
	LL_ASSERT(e);
   188c0:	4604      	mov	r4, r0
   188c2:	2800      	cmp	r0, #0
   188c4:	d033      	beq.n	1892e <isr_done+0x7a>

	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
	e->trx_cnt = trx_cnt;
   188c6:	4b21      	ldr	r3, [pc, #132]	; (1894c <isr_done+0x98>)
	e->crc_valid = crc_valid;
   188c8:	4921      	ldr	r1, [pc, #132]	; (18950 <isr_done+0x9c>)

#if defined(CONFIG_BT_CTLR_LE_ENC)
	e->mic_state = mic_state;
   188ca:	4a22      	ldr	r2, [pc, #136]	; (18954 <isr_done+0xa0>)
	e->trx_cnt = trx_cnt;
   188cc:	881b      	ldrh	r3, [r3, #0]
	e->crc_valid = crc_valid;
   188ce:	7808      	ldrb	r0, [r1, #0]
	e->mic_state = mic_state;
   188d0:	7811      	ldrb	r1, [r2, #0]
	e->trx_cnt = trx_cnt;
   188d2:	80a3      	strh	r3, [r4, #4]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   188d4:	2201      	movs	r2, #1
	e->crc_valid = crc_valid;
   188d6:	71a0      	strb	r0, [r4, #6]
	e->mic_state = mic_state;
   188d8:	71e1      	strb	r1, [r4, #7]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   188da:	7022      	strb	r2, [r4, #0]
#endif /* CONFIG_BT_CTLR_LE_ENC */

#if defined(CONFIG_BT_PERIPHERAL)
	if (trx_cnt) {
   188dc:	b11b      	cbz	r3, 188e6 <isr_done+0x32>
		struct lll_conn *lll = param;

		if (lll->role) {
   188de:	f995 301d 	ldrsb.w	r3, [r5, #29]
   188e2:	2b00      	cmp	r3, #0
   188e4:	db04      	blt.n	188f0 <isr_done+0x3c>
			lll->slave.window_size_event_us = 0;
		}
	}
#endif /* CONFIG_BT_PERIPHERAL */

	lll_isr_cleanup(param);
   188e6:	4628      	mov	r0, r5
}
   188e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   188ec:	f7ff b942 	b.w	17b74 <lll_isr_cleanup>
				addr_us_get(lll->phy_rx);
   188f0:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
   188f4:	f003 0307 	and.w	r3, r3, #7
#define RANGE_DISTANCE 1000 /* meters */
#define RANGE_DELAY_US (2 * RANGE_DISTANCE * 4 / 1000)

static inline uint32_t addr_us_get(uint8_t phy)
{
	switch (phy) {
   188f8:	2b02      	cmp	r3, #2
   188fa:	d016      	beq.n	1892a <isr_done+0x76>
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
	case BIT(2):
		return 376;
   188fc:	2b04      	cmp	r3, #4
   188fe:	bf14      	ite	ne
   18900:	2728      	movne	r7, #40	; 0x28
   18902:	f44f 77bc 	moveq.w	r7, #376	; 0x178
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   18906:	f001 f87d 	bl	19a04 <radio_tmr_aa_restore>
   1890a:	4606      	mov	r6, r0
   1890c:	f001 f880 	bl	19a10 <radio_tmr_ready_get>
			e->drift.window_widening_event_us =
   18910:	6b2a      	ldr	r2, [r5, #48]	; 0x30
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   18912:	1a36      	subs	r6, r6, r0
			lll->slave.window_widening_event_us = 0;
   18914:	2300      	movs	r3, #0
			e->drift.preamble_to_addr_us = preamble_to_addr_us;
   18916:	e9c4 2703 	strd	r2, r7, [r4, #12]
			e->drift.start_to_address_actual_us =
   1891a:	60a6      	str	r6, [r4, #8]
	lll_isr_cleanup(param);
   1891c:	4628      	mov	r0, r5
			lll->slave.window_widening_event_us = 0;
   1891e:	632b      	str	r3, [r5, #48]	; 0x30
			lll->slave.window_size_event_us = 0;
   18920:	63ab      	str	r3, [r5, #56]	; 0x38
}
   18922:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   18926:	f7ff b925 	b.w	17b74 <lll_isr_cleanup>
	switch (phy) {
   1892a:	2718      	movs	r7, #24
   1892c:	e7eb      	b.n	18906 <isr_done+0x52>
	LL_ASSERT(e);
   1892e:	4a0a      	ldr	r2, [pc, #40]	; (18958 <isr_done+0xa4>)
   18930:	490a      	ldr	r1, [pc, #40]	; (1895c <isr_done+0xa8>)
   18932:	480b      	ldr	r0, [pc, #44]	; (18960 <isr_done+0xac>)
   18934:	f44f 731d 	mov.w	r3, #628	; 0x274
   18938:	f005 fd24 	bl	1e384 <printk>
   1893c:	4040      	eors	r0, r0
   1893e:	f380 8811 	msr	BASEPRI, r0
   18942:	f04f 0003 	mov.w	r0, #3
   18946:	df02      	svc	2
   18948:	e7bd      	b.n	188c6 <isr_done+0x12>
   1894a:	bf00      	nop
   1894c:	20002c3c 	.word	0x20002c3c
   18950:	200031c1 	.word	0x200031c1
   18954:	200031c2 	.word	0x200031c2
   18958:	00024f14 	.word	0x00024f14
   1895c:	000247ec 	.word	0x000247ec
   18960:	00024334 	.word	0x00024334

00018964 <lll_conn_init>:
{
   18964:	b508      	push	{r3, lr}

static void empty_tx_init(void)
{
	struct pdu_data *p;

	p = (void *)radio_pkt_empty_get();
   18966:	f000 fee9 	bl	1973c <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1896a:	7803      	ldrb	r3, [r0, #0]
   1896c:	2201      	movs	r2, #1
   1896e:	f362 0301 	bfi	r3, r2, #0, #2
   18972:	7003      	strb	r3, [r0, #0]
}
   18974:	2000      	movs	r0, #0
   18976:	bd08      	pop	{r3, pc}

00018978 <lll_conn_reset>:
}
   18978:	2000      	movs	r0, #0
   1897a:	4770      	bx	lr

0001897c <lll_conn_flush>:
}
   1897c:	4770      	bx	lr
   1897e:	bf00      	nop

00018980 <lll_conn_prepare_reset>:
	crc_valid = 0U;
   18980:	4805      	ldr	r0, [pc, #20]	; (18998 <lll_conn_prepare_reset+0x18>)
	crc_expire = 0U;
   18982:	4906      	ldr	r1, [pc, #24]	; (1899c <lll_conn_prepare_reset+0x1c>)
	mic_state = LLL_CONN_MIC_NONE;
   18984:	4a06      	ldr	r2, [pc, #24]	; (189a0 <lll_conn_prepare_reset+0x20>)
{
   18986:	b410      	push	{r4}
	trx_cnt = 0U;
   18988:	2300      	movs	r3, #0
   1898a:	4c06      	ldr	r4, [pc, #24]	; (189a4 <lll_conn_prepare_reset+0x24>)
	crc_valid = 0U;
   1898c:	7003      	strb	r3, [r0, #0]
	crc_expire = 0U;
   1898e:	700b      	strb	r3, [r1, #0]
	mic_state = LLL_CONN_MIC_NONE;
   18990:	7013      	strb	r3, [r2, #0]
	trx_cnt = 0U;
   18992:	8023      	strh	r3, [r4, #0]
}
   18994:	bc10      	pop	{r4}
   18996:	4770      	bx	lr
   18998:	200031c1 	.word	0x200031c1
   1899c:	200031c0 	.word	0x200031c0
   189a0:	200031c2 	.word	0x200031c2
   189a4:	20002c3c 	.word	0x20002c3c

000189a8 <lll_conn_abort_cb>:
{
   189a8:	b510      	push	{r4, lr}
	if (!prepare_param) {
   189aa:	b1d0      	cbz	r0, 189e2 <lll_conn_abort_cb+0x3a>
	err = lll_hfclock_off();
   189ac:	460c      	mov	r4, r1
   189ae:	f7ff fa45 	bl	17e3c <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   189b2:	2800      	cmp	r0, #0
   189b4:	db04      	blt.n	189c0 <lll_conn_abort_cb+0x18>
	lll_done(param);
   189b6:	4620      	mov	r0, r4
}
   189b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   189bc:	f7ff b802 	b.w	179c4 <lll_done>
	LL_ASSERT(err >= 0);
   189c0:	4a0b      	ldr	r2, [pc, #44]	; (189f0 <lll_conn_abort_cb+0x48>)
   189c2:	490c      	ldr	r1, [pc, #48]	; (189f4 <lll_conn_abort_cb+0x4c>)
   189c4:	480c      	ldr	r0, [pc, #48]	; (189f8 <lll_conn_abort_cb+0x50>)
   189c6:	239c      	movs	r3, #156	; 0x9c
   189c8:	f005 fcdc 	bl	1e384 <printk>
   189cc:	4040      	eors	r0, r0
   189ce:	f380 8811 	msr	BASEPRI, r0
   189d2:	f04f 0003 	mov.w	r0, #3
   189d6:	df02      	svc	2
	lll_done(param);
   189d8:	4620      	mov	r0, r4
}
   189da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   189de:	f7fe bff1 	b.w	179c4 <lll_done>
		radio_isr_set(isr_done, param);
   189e2:	4806      	ldr	r0, [pc, #24]	; (189fc <lll_conn_abort_cb+0x54>)
   189e4:	f000 fd5a 	bl	1949c <radio_isr_set>
}
   189e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   189ec:	f000 be4e 	b.w	1968c <radio_disable>
   189f0:	00024f14 	.word	0x00024f14
   189f4:	00024e40 	.word	0x00024e40
   189f8:	00024334 	.word	0x00024334
   189fc:	000188b5 	.word	0x000188b5

00018a00 <lll_conn_rx_pkt_set>:
{
   18a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18a02:	4605      	mov	r5, r0
	node_rx = ull_pdu_rx_alloc_peek(1);
   18a04:	2001      	movs	r0, #1
   18a06:	f7f8 f98f 	bl	10d28 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   18a0a:	4604      	mov	r4, r0
   18a0c:	b348      	cbz	r0, 18a62 <lll_conn_rx_pkt_set+0x62>
	phy = lll->phy_rx;
   18a0e:	f895 6045 	ldrb.w	r6, [r5, #69]	; 0x45
	max_rx_octets = lll->max_rx_octets;
   18a12:	8fef      	ldrh	r7, [r5, #62]	; 0x3e
	phy = lll->phy_rx;
   18a14:	f006 0607 	and.w	r6, r6, #7
	radio_phy_set(phy, 0);
   18a18:	4630      	mov	r0, r6
   18a1a:	2100      	movs	r1, #0
   18a1c:	f000 fda4 	bl	19568 <radio_phy_set>
	} else if (lll->enc_rx) {
   18a20:	f895 305e 	ldrb.w	r3, [r5, #94]	; 0x5e
   18a24:	0072      	lsls	r2, r6, #1
   18a26:	071b      	lsls	r3, r3, #28
   18a28:	f104 041c 	add.w	r4, r4, #28
   18a2c:	f042 0201 	orr.w	r2, r2, #1
   18a30:	d50e      	bpl.n	18a50 <lll_conn_rx_pkt_set+0x50>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
   18a32:	1d39      	adds	r1, r7, #4
   18a34:	b2c9      	uxtb	r1, r1
   18a36:	2008      	movs	r0, #8
   18a38:	f000 fdde 	bl	195f8 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   18a3c:	4622      	mov	r2, r4
   18a3e:	4631      	mov	r1, r6
   18a40:	f105 005f 	add.w	r0, r5, #95	; 0x5f
   18a44:	f000 fffe 	bl	19a44 <radio_ccm_rx_pkt_set>
}
   18a48:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   18a4c:	f000 be02 	b.w	19654 <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
   18a50:	b2f9      	uxtb	r1, r7
   18a52:	2008      	movs	r0, #8
   18a54:	f000 fdd0 	bl	195f8 <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   18a58:	4620      	mov	r0, r4
}
   18a5a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(node_rx->pdu);
   18a5e:	f000 bdf9 	b.w	19654 <radio_pkt_rx_set>
	LL_ASSERT(node_rx);
   18a62:	4a07      	ldr	r2, [pc, #28]	; (18a80 <lll_conn_rx_pkt_set+0x80>)
   18a64:	4907      	ldr	r1, [pc, #28]	; (18a84 <lll_conn_rx_pkt_set+0x84>)
   18a66:	4808      	ldr	r0, [pc, #32]	; (18a88 <lll_conn_rx_pkt_set+0x88>)
   18a68:	f240 13d9 	movw	r3, #473	; 0x1d9
   18a6c:	f005 fc8a 	bl	1e384 <printk>
   18a70:	4040      	eors	r0, r0
   18a72:	f380 8811 	msr	BASEPRI, r0
   18a76:	f04f 0003 	mov.w	r0, #3
   18a7a:	df02      	svc	2
   18a7c:	e7c7      	b.n	18a0e <lll_conn_rx_pkt_set+0xe>
   18a7e:	bf00      	nop
   18a80:	00024f14 	.word	0x00024f14
   18a84:	00024f60 	.word	0x00024f60
   18a88:	00024334 	.word	0x00024334

00018a8c <lll_conn_isr_tx>:
{
   18a8c:	b538      	push	{r3, r4, r5, lr}
   18a8e:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   18a90:	f7ff f850 	bl	17b34 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   18a94:	2096      	movs	r0, #150	; 0x96
   18a96:	f000 fee1 	bl	1985c <radio_tmr_tifs_set>
				     lll->phy_flags);
   18a9a:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
	radio_switch_complete_and_tx(lll->phy_rx, 0,
   18a9e:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   18aa2:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   18aa6:	f000 0007 	and.w	r0, r0, #7
   18aaa:	f002 0207 	and.w	r2, r2, #7
   18aae:	2100      	movs	r1, #0
   18ab0:	f000 fe5a 	bl	19768 <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   18ab4:	4620      	mov	r0, r4
   18ab6:	f7ff ffa3 	bl	18a00 <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   18aba:	f000 fe0b 	bl	196d4 <radio_is_ready>
   18abe:	bb58      	cbnz	r0, 18b18 <lll_conn_isr_tx+0x8c>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 +
   18ac0:	f000 ffba 	bl	19a38 <radio_tmr_tifs_base_get>
   18ac4:	4605      	mov	r5, r0
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   18ac6:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   18aca:	2101      	movs	r1, #1
   18acc:	f000 0007 	and.w	r0, r0, #7
   18ad0:	f000 fdd0 	bl	19674 <radio_rx_chain_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   18ad4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   18ad8:	f003 0307 	and.w	r3, r3, #7
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   18adc:	4405      	add	r5, r0
   18ade:	2b02      	cmp	r3, #2
   18ae0:	f105 05a3 	add.w	r5, r5, #163	; 0xa3
   18ae4:	d016      	beq.n	18b14 <lll_conn_isr_tx+0x88>
		return 376;
   18ae6:	2b04      	cmp	r3, #4
   18ae8:	bf14      	ite	ne
   18aea:	2328      	movne	r3, #40	; 0x28
   18aec:	f44f 73bc 	moveq.w	r3, #376	; 0x178
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   18af0:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
   18af4:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   18af8:	f000 0007 	and.w	r0, r0, #7
	hcto += addr_us_get(lll->phy_rx);
   18afc:	441d      	add	r5, r3
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   18afe:	f000 fdb5 	bl	1966c <radio_tx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   18b02:	1a28      	subs	r0, r5, r0
   18b04:	f000 ff50 	bl	199a8 <radio_tmr_hcto_configure>
	radio_isr_set(lll_conn_isr_rx, param);
   18b08:	4621      	mov	r1, r4
   18b0a:	480a      	ldr	r0, [pc, #40]	; (18b34 <lll_conn_isr_tx+0xa8>)
}
   18b0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   18b10:	f000 bcc4 	b.w	1949c <radio_isr_set>
	switch (phy) {
   18b14:	2318      	movs	r3, #24
   18b16:	e7eb      	b.n	18af0 <lll_conn_isr_tx+0x64>
	LL_ASSERT(!radio_is_ready());
   18b18:	4a07      	ldr	r2, [pc, #28]	; (18b38 <lll_conn_isr_tx+0xac>)
   18b1a:	4908      	ldr	r1, [pc, #32]	; (18b3c <lll_conn_isr_tx+0xb0>)
   18b1c:	4808      	ldr	r0, [pc, #32]	; (18b40 <lll_conn_isr_tx+0xb4>)
   18b1e:	f240 13a5 	movw	r3, #421	; 0x1a5
   18b22:	f005 fc2f 	bl	1e384 <printk>
   18b26:	4040      	eors	r0, r0
   18b28:	f380 8811 	msr	BASEPRI, r0
   18b2c:	f04f 0003 	mov.w	r0, #3
   18b30:	df02      	svc	2
   18b32:	e7c5      	b.n	18ac0 <lll_conn_isr_tx+0x34>
   18b34:	00018c7d 	.word	0x00018c7d
   18b38:	00024f14 	.word	0x00024f14
   18b3c:	00024ec8 	.word	0x00024ec8
   18b40:	00024334 	.word	0x00024334

00018b44 <lll_conn_tx_pkt_set>:
{
   18b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18b46:	460f      	mov	r7, r1
	phy = lll->phy_tx;
   18b48:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
	max_tx_octets = lll->max_tx_octets;
   18b4c:	8f86      	ldrh	r6, [r0, #60]	; 0x3c
	phy = lll->phy_tx;
   18b4e:	f001 0407 	and.w	r4, r1, #7
{
   18b52:	4605      	mov	r5, r0
	radio_phy_set(phy, flags);
   18b54:	f3c1 01c0 	ubfx	r1, r1, #3, #1
   18b58:	4620      	mov	r0, r4
   18b5a:	f000 fd05 	bl	19568 <radio_phy_set>
	} else if (lll->enc_tx) {
   18b5e:	f895 305e 	ldrb.w	r3, [r5, #94]	; 0x5e
   18b62:	0062      	lsls	r2, r4, #1
   18b64:	06db      	lsls	r3, r3, #27
   18b66:	f042 0201 	orr.w	r2, r2, #1
   18b6a:	b2f1      	uxtb	r1, r6
   18b6c:	d50d      	bpl.n	18b8a <lll_conn_tx_pkt_set+0x46>
		radio_pkt_configure(8, (max_tx_octets + 4U),
   18b6e:	3104      	adds	r1, #4
   18b70:	b2c9      	uxtb	r1, r1
   18b72:	2008      	movs	r0, #8
   18b74:	f000 fd40 	bl	195f8 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx,
   18b78:	4639      	mov	r1, r7
   18b7a:	f105 0080 	add.w	r0, r5, #128	; 0x80
   18b7e:	f000 ff9f 	bl	19ac0 <radio_ccm_tx_pkt_set>
}
   18b82:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx,
   18b86:	f000 bd6b 	b.w	19660 <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
   18b8a:	2008      	movs	r0, #8
   18b8c:	f000 fd34 	bl	195f8 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   18b90:	4638      	mov	r0, r7
}
   18b92:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
   18b96:	f000 bd63 	b.w	19660 <radio_pkt_tx_set>
   18b9a:	bf00      	nop

00018b9c <lll_conn_pdu_tx_prep>:
{
   18b9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18ba0:	4604      	mov	r4, r0
   18ba2:	b083      	sub	sp, #12
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   18ba4:	aa01      	add	r2, sp, #4
   18ba6:	6c80      	ldr	r0, [r0, #72]	; 0x48
{
   18ba8:	4689      	mov	r9, r1
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   18baa:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   18bac:	f7f4 f8b8 	bl	cd20 <memq_peek>
	if (lll->empty || !link) {
   18bb0:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   18bb4:	075a      	lsls	r2, r3, #29
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   18bb6:	4606      	mov	r6, r0
	if (lll->empty || !link) {
   18bb8:	d432      	bmi.n	18c20 <lll_conn_pdu_tx_prep+0x84>
   18bba:	2800      	cmp	r0, #0
   18bbc:	d04e      	beq.n	18c5c <lll_conn_pdu_tx_prep+0xc0>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   18bbe:	9a01      	ldr	r2, [sp, #4]
   18bc0:	f894 705d 	ldrb.w	r7, [r4, #93]	; 0x5d
		if (!lll->packet_tx_head_len) {
   18bc4:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   18bc8:	f102 0804 	add.w	r8, r2, #4
   18bcc:	eb08 0507 	add.w	r5, r8, r7
		if (!lll->packet_tx_head_len) {
   18bd0:	b913      	cbnz	r3, 18bd8 <lll_conn_pdu_tx_prep+0x3c>
			lll->packet_tx_head_len = p->len;
   18bd2:	786b      	ldrb	r3, [r5, #1]
   18bd4:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
		if (lll->packet_tx_head_offset) {
   18bd8:	b137      	cbz	r7, 18be8 <lll_conn_pdu_tx_prep+0x4c>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   18bda:	f818 2007 	ldrb.w	r2, [r8, r7]
   18bde:	2101      	movs	r1, #1
   18be0:	f361 0201 	bfi	r2, r1, #0, #2
   18be4:	f808 2007 	strb.w	r2, [r8, r7]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   18be8:	1bdb      	subs	r3, r3, r7
   18bea:	706b      	strb	r3, [r5, #1]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   18bec:	4620      	mov	r0, r4
   18bee:	f7fd fbbb 	bl	16368 <ull_conn_lll_max_tx_octets_get>
		if (p->len > max_tx_octets) {
   18bf2:	786b      	ldrb	r3, [r5, #1]
   18bf4:	4283      	cmp	r3, r0
   18bf6:	d924      	bls.n	18c42 <lll_conn_pdu_tx_prep+0xa6>
			p->len = max_tx_octets;
   18bf8:	7068      	strb	r0, [r5, #1]
			p->md = 1U;
   18bfa:	f818 3007 	ldrb.w	r3, [r8, r7]
   18bfe:	f043 0310 	orr.w	r3, r3, #16
   18c02:	f808 3007 	strb.w	r3, [r8, r7]
		p->rfu = 0U;
   18c06:	f818 3007 	ldrb.w	r3, [r8, r7]
		p->resv = 0U;
   18c0a:	2200      	movs	r2, #0
		p->rfu = 0U;
   18c0c:	f36f 1347 	bfc	r3, #5, #3
   18c10:	f808 3007 	strb.w	r3, [r8, r7]
		p->resv = 0U;
   18c14:	70aa      	strb	r2, [r5, #2]
	*pdu_data_tx = p;
   18c16:	f8c9 5000 	str.w	r5, [r9]
}
   18c1a:	b003      	add	sp, #12
   18c1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		lll->empty = 1U;
   18c20:	f043 0304 	orr.w	r3, r3, #4
   18c24:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		p = (void *)radio_pkt_empty_get();
   18c28:	f000 fd88 	bl	1973c <radio_pkt_empty_get>
   18c2c:	4605      	mov	r5, r0
		if (link || FORCE_MD_CNT_GET()) {
   18c2e:	b1e6      	cbz	r6, 18c6a <lll_conn_pdu_tx_prep+0xce>
			p->md = 1U;
   18c30:	7803      	ldrb	r3, [r0, #0]
   18c32:	f043 0310 	orr.w	r3, r3, #16
   18c36:	7003      	strb	r3, [r0, #0]
	*pdu_data_tx = p;
   18c38:	f8c9 5000 	str.w	r5, [r9]
}
   18c3c:	b003      	add	sp, #12
   18c3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((link->next != lll->memq_tx.tail) ||
   18c42:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   18c44:	6832      	ldr	r2, [r6, #0]
   18c46:	429a      	cmp	r2, r3
			p->md = 1U;
   18c48:	f818 3007 	ldrb.w	r3, [r8, r7]
   18c4c:	bf14      	ite	ne
   18c4e:	f043 0310 	orrne.w	r3, r3, #16
			p->md = 0U;
   18c52:	f36f 1304 	bfceq	r3, #4, #1
   18c56:	f808 3007 	strb.w	r3, [r8, r7]
   18c5a:	e7d4      	b.n	18c06 <lll_conn_pdu_tx_prep+0x6a>
		lll->empty = 1U;
   18c5c:	f043 0304 	orr.w	r3, r3, #4
   18c60:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		p = (void *)radio_pkt_empty_get();
   18c64:	f000 fd6a 	bl	1973c <radio_pkt_empty_get>
   18c68:	4605      	mov	r5, r0
			p->md = 0U;
   18c6a:	782b      	ldrb	r3, [r5, #0]
   18c6c:	f36f 1304 	bfc	r3, #4, #1
   18c70:	702b      	strb	r3, [r5, #0]
	*pdu_data_tx = p;
   18c72:	f8c9 5000 	str.w	r5, [r9]
}
   18c76:	b003      	add	sp, #12
   18c78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00018c7c <lll_conn_isr_rx>:
{
   18c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   18c7e:	b083      	sub	sp, #12
   18c80:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   18c82:	f000 fd31 	bl	196e8 <radio_is_done>
	if (trx_done) {
   18c86:	f010 0fff 	tst.w	r0, #255	; 0xff
   18c8a:	d109      	bne.n	18ca0 <lll_conn_isr_rx+0x24>
	lll_isr_rx_status_reset();
   18c8c:	f7fe ff5a 	bl	17b44 <lll_isr_rx_status_reset>
		radio_isr_set(isr_done, param);
   18c90:	48b7      	ldr	r0, [pc, #732]	; (18f70 <lll_conn_isr_rx+0x2f4>)
   18c92:	4621      	mov	r1, r4
   18c94:	f000 fc02 	bl	1949c <radio_isr_set>
		radio_disable();
   18c98:	f000 fcf8 	bl	1968c <radio_disable>
}
   18c9c:	b003      	add	sp, #12
   18c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		crc_ok = radio_crc_is_valid();
   18ca0:	f000 fd42 	bl	19728 <radio_crc_is_valid>
   18ca4:	b2c5      	uxtb	r5, r0
		rssi_ready = radio_rssi_is_ready();
   18ca6:	f000 fd81 	bl	197ac <radio_rssi_is_ready>
	lll_isr_rx_status_reset();
   18caa:	f7fe ff4b 	bl	17b44 <lll_isr_rx_status_reset>
	trx_cnt++;
   18cae:	4ab1      	ldr	r2, [pc, #708]	; (18f74 <lll_conn_isr_rx+0x2f8>)
   18cb0:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   18cb2:	2001      	movs	r0, #1
	trx_cnt++;
   18cb4:	4403      	add	r3, r0
   18cb6:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   18cb8:	f7f8 f836 	bl	10d28 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   18cbc:	4606      	mov	r6, r0
   18cbe:	2800      	cmp	r0, #0
   18cc0:	f000 80bb 	beq.w	18e3a <lll_conn_isr_rx+0x1be>
	if (crc_ok) {
   18cc4:	2d00      	cmp	r5, #0
   18cc6:	d155      	bne.n	18d74 <lll_conn_isr_rx+0xf8>
		if (crc_expire == 0U) {
   18cc8:	4bab      	ldr	r3, [pc, #684]	; (18f78 <lll_conn_isr_rx+0x2fc>)
   18cca:	781f      	ldrb	r7, [r3, #0]
   18ccc:	2f00      	cmp	r7, #0
   18cce:	f040 80a3 	bne.w	18e18 <lll_conn_isr_rx+0x19c>
		crc_expire--;
   18cd2:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   18cd4:	a901      	add	r1, sp, #4
   18cd6:	4620      	mov	r0, r4
		crc_expire--;
   18cd8:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   18cda:	f7ff ff5f 	bl	18b9c <lll_conn_pdu_tx_prep>
		radio_tmr_tifs_set(EVENT_IFS_US);
   18cde:	2096      	movs	r0, #150	; 0x96
   18ce0:	f000 fdbc 	bl	1985c <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(lll->phy_rx);
   18ce4:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   18ce8:	f000 0007 	and.w	r0, r0, #7
   18cec:	f000 fd2e 	bl	1974c <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   18cf0:	48a2      	ldr	r0, [pc, #648]	; (18f7c <lll_conn_isr_rx+0x300>)
   18cf2:	4621      	mov	r1, r4
   18cf4:	f000 fbd2 	bl	1949c <radio_isr_set>
		radio_tmr_end_capture();
   18cf8:	f000 fe90 	bl	19a1c <radio_tmr_end_capture>
	pdu_data_tx->sn = lll->sn;
   18cfc:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
   18d00:	9901      	ldr	r1, [sp, #4]
	pdu_data_tx->nesn = lll->nesn;
   18d02:	f3c2 0340 	ubfx	r3, r2, #1, #1
   18d06:	7808      	ldrb	r0, [r1, #0]
	pdu_data_tx->sn = lll->sn;
   18d08:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   18d0c:	009b      	lsls	r3, r3, #2
   18d0e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   18d12:	f020 020c 	bic.w	r2, r0, #12
   18d16:	4313      	orrs	r3, r2
   18d18:	700b      	strb	r3, [r1, #0]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   18d1a:	4620      	mov	r0, r4
   18d1c:	f7ff ff12 	bl	18b44 <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   18d20:	f000 fcd8 	bl	196d4 <radio_is_ready>
   18d24:	2800      	cmp	r0, #0
   18d26:	f040 80b7 	bne.w	18e98 <lll_conn_isr_rx+0x21c>
	if (!radio_tmr_aa_restore()) {
   18d2a:	f000 fe6b 	bl	19a04 <radio_tmr_aa_restore>
   18d2e:	b170      	cbz	r0, 18d4e <lll_conn_isr_rx+0xd2>
	if (tx_release) {
   18d30:	b19d      	cbz	r5, 18d5a <lll_conn_isr_rx+0xde>
		LL_ASSERT(lll->handle != 0xFFFF);
   18d32:	89a0      	ldrh	r0, [r4, #12]
   18d34:	f64f 73ff 	movw	r3, #65535	; 0xffff
   18d38:	4298      	cmp	r0, r3
   18d3a:	f000 80bb 	beq.w	18eb4 <lll_conn_isr_rx+0x238>
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   18d3e:	4629      	mov	r1, r5
   18d40:	f7fd f9a8 	bl	16094 <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   18d44:	b95f      	cbnz	r7, 18d5e <lll_conn_isr_rx+0xe2>
		ull_rx_sched();
   18d46:	f7f8 f835 	bl	10db4 <ull_rx_sched>
}
   18d4a:	b003      	add	sp, #12
   18d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_tmr_aa_save(radio_tmr_aa_get());
   18d4e:	f000 fe4d 	bl	199ec <radio_tmr_aa_get>
   18d52:	f000 fe51 	bl	199f8 <radio_tmr_aa_save>
	if (tx_release) {
   18d56:	2d00      	cmp	r5, #0
   18d58:	d1eb      	bne.n	18d32 <lll_conn_isr_rx+0xb6>
	if (is_rx_enqueue) {
   18d5a:	2f00      	cmp	r7, #0
   18d5c:	d09e      	beq.n	18c9c <lll_conn_isr_rx+0x20>
		ull_pdu_rx_alloc();
   18d5e:	f7f8 f801 	bl	10d64 <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   18d62:	2303      	movs	r3, #3
   18d64:	7133      	strb	r3, [r6, #4]
		node_rx->hdr.handle = lll->handle;
   18d66:	89a3      	ldrh	r3, [r4, #12]
		ull_rx_put(node_rx->hdr.link, node_rx);
   18d68:	6830      	ldr	r0, [r6, #0]
		node_rx->hdr.handle = lll->handle;
   18d6a:	80f3      	strh	r3, [r6, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   18d6c:	4631      	mov	r1, r6
   18d6e:	f7f8 f811 	bl	10d94 <ull_rx_put>
	if (is_ull_rx) {
   18d72:	e7e8      	b.n	18d46 <lll_conn_isr_rx+0xca>
	if (pdu_data_rx->nesn != lll->sn) {
   18d74:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   18d78:	7f32      	ldrb	r2, [r6, #28]
   18d7a:	f003 0101 	and.w	r1, r3, #1
   18d7e:	f3c2 0080 	ubfx	r0, r2, #2, #1
   18d82:	4288      	cmp	r0, r1
   18d84:	d069      	beq.n	18e5a <lll_conn_isr_rx+0x1de>
		if (lll->role) {
   18d86:	f994 201d 	ldrsb.w	r2, [r4, #29]
		lll->sn++;
   18d8a:	f081 0101 	eor.w	r1, r1, #1
   18d8e:	f361 0300 	bfi	r3, r1, #0, #1
		if (lll->role) {
   18d92:	2a00      	cmp	r2, #0
		lll->sn++;
   18d94:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		if (lll->role) {
   18d98:	da05      	bge.n	18da6 <lll_conn_isr_rx+0x12a>
			lll->slave.latency_enabled = 1;
   18d9a:	f894 3020 	ldrb.w	r3, [r4, #32]
   18d9e:	f043 0304 	orr.w	r3, r3, #4
   18da2:	f884 3020 	strb.w	r3, [r4, #32]
		if (!lll->empty) {
   18da6:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   18daa:	075a      	lsls	r2, r3, #29
   18dac:	f100 8091 	bmi.w	18ed2 <lll_conn_isr_rx+0x256>
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   18db0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   18db4:	aa01      	add	r2, sp, #4
   18db6:	f7f3 ffb3 	bl	cd20 <memq_peek>
		if (link) {
   18dba:	4605      	mov	r5, r0
   18dbc:	2800      	cmp	r0, #0
   18dbe:	f000 808f 	beq.w	18ee0 <lll_conn_isr_rx+0x264>
					       lll->packet_tx_head_offset);
   18dc2:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
			pdu_data_tx_len = pdu_data_tx->len;
   18dc6:	9b01      	ldr	r3, [sp, #4]
   18dc8:	4413      	add	r3, r2
   18dca:	7959      	ldrb	r1, [r3, #5]
			if (pdu_data_tx_len != 0U) {
   18dcc:	b151      	cbz	r1, 18de4 <lll_conn_isr_rx+0x168>
				if (lll->enc_tx) {
   18dce:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   18dd2:	06df      	lsls	r7, r3, #27
   18dd4:	d506      	bpl.n	18de4 <lll_conn_isr_rx+0x168>
					lll->ccm_tx.counter++;
   18dd6:	e9d4 3024 	ldrd	r3, r0, [r4, #144]	; 0x90
   18dda:	3301      	adds	r3, #1
   18ddc:	f140 0000 	adc.w	r0, r0, #0
   18de0:	e9c4 3024 	strd	r3, r0, [r4, #144]	; 0x90
			if (offset < lll->packet_tx_head_len) {
   18de4:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   18de8:	440a      	add	r2, r1
   18dea:	b2d2      	uxtb	r2, r2
			if (offset < lll->packet_tx_head_len) {
   18dec:	429a      	cmp	r2, r3
   18dee:	d37b      	bcc.n	18ee8 <lll_conn_isr_rx+0x26c>
			} else if (offset == lll->packet_tx_head_len) {
   18df0:	f000 8095 	beq.w	18f1e <lll_conn_isr_rx+0x2a2>
				LL_ASSERT(0);
   18df4:	4a62      	ldr	r2, [pc, #392]	; (18f80 <lll_conn_isr_rx+0x304>)
   18df6:	4963      	ldr	r1, [pc, #396]	; (18f84 <lll_conn_isr_rx+0x308>)
   18df8:	4863      	ldr	r0, [pc, #396]	; (18f88 <lll_conn_isr_rx+0x30c>)
   18dfa:	f44f 7340 	mov.w	r3, #768	; 0x300
   18dfe:	f005 fac1 	bl	1e384 <printk>
   18e02:	4040      	eors	r0, r0
   18e04:	f380 8811 	msr	BASEPRI, r0
   18e08:	f04f 0003 	mov.w	r0, #3
   18e0c:	df02      	svc	2
	tx_release = NULL;
   18e0e:	2500      	movs	r5, #0
   18e10:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   18e14:	7f32      	ldrb	r2, [r6, #28]
   18e16:	e021      	b.n	18e5c <lll_conn_isr_rx+0x1e0>
		crc_expire--;
   18e18:	3f01      	subs	r7, #1
   18e1a:	b2ff      	uxtb	r7, r7
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   18e1c:	a901      	add	r1, sp, #4
   18e1e:	4620      	mov	r0, r4
		crc_expire--;
   18e20:	701f      	strb	r7, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   18e22:	f7ff febb 	bl	18b9c <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   18e26:	2f00      	cmp	r7, #0
   18e28:	f040 80ef 	bne.w	1900a <lll_conn_isr_rx+0x38e>
		radio_isr_set(isr_done, param);
   18e2c:	4850      	ldr	r0, [pc, #320]	; (18f70 <lll_conn_isr_rx+0x2f4>)
   18e2e:	4621      	mov	r1, r4
   18e30:	f000 fb34 	bl	1949c <radio_isr_set>
			radio_switch_complete_and_disable();
   18e34:	f000 fca4 	bl	19780 <radio_switch_complete_and_disable>
   18e38:	e760      	b.n	18cfc <lll_conn_isr_rx+0x80>
	LL_ASSERT(node_rx);
   18e3a:	4a51      	ldr	r2, [pc, #324]	; (18f80 <lll_conn_isr_rx+0x304>)
   18e3c:	4953      	ldr	r1, [pc, #332]	; (18f8c <lll_conn_isr_rx+0x310>)
   18e3e:	4852      	ldr	r0, [pc, #328]	; (18f88 <lll_conn_isr_rx+0x30c>)
   18e40:	23d1      	movs	r3, #209	; 0xd1
   18e42:	f005 fa9f 	bl	1e384 <printk>
   18e46:	4040      	eors	r0, r0
   18e48:	f380 8811 	msr	BASEPRI, r0
   18e4c:	f04f 0003 	mov.w	r0, #3
   18e50:	df02      	svc	2
	if (crc_ok) {
   18e52:	2d00      	cmp	r5, #0
   18e54:	f43f af38 	beq.w	18cc8 <lll_conn_isr_rx+0x4c>
   18e58:	e78c      	b.n	18d74 <lll_conn_isr_rx+0xf8>
	tx_release = NULL;
   18e5a:	2500      	movs	r5, #0
	if ((pdu_data_rx->sn == lll->nesn) &&
   18e5c:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   18e60:	f3c3 0340 	ubfx	r3, r3, #1, #1
   18e64:	429a      	cmp	r2, r3
   18e66:	d046      	beq.n	18ef6 <lll_conn_isr_rx+0x27a>
	is_rx_enqueue = 0U;
   18e68:	2700      	movs	r7, #0
		crc_expire = 0U;
   18e6a:	4a43      	ldr	r2, [pc, #268]	; (18f78 <lll_conn_isr_rx+0x2fc>)
		crc_valid = 1U;
   18e6c:	4b48      	ldr	r3, [pc, #288]	; (18f90 <lll_conn_isr_rx+0x314>)
		crc_expire = 0U;
   18e6e:	2100      	movs	r1, #0
   18e70:	7011      	strb	r1, [r2, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   18e72:	4620      	mov	r0, r4
		crc_valid = 1U;
   18e74:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   18e76:	a901      	add	r1, sp, #4
		crc_valid = 1U;
   18e78:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   18e7a:	f7ff fe8f 	bl	18b9c <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   18e7e:	7f33      	ldrb	r3, [r6, #28]
   18e80:	06d9      	lsls	r1, r3, #27
   18e82:	f53f af2c 	bmi.w	18cde <lll_conn_isr_rx+0x62>
			      (pdu_data_tx->md == 0) &&
   18e86:	9b01      	ldr	r3, [sp, #4]
   18e88:	781a      	ldrb	r2, [r3, #0]
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   18e8a:	06d2      	lsls	r2, r2, #27
   18e8c:	f53f af27 	bmi.w	18cde <lll_conn_isr_rx+0x62>
			      (pdu_data_tx->md == 0) &&
   18e90:	785b      	ldrb	r3, [r3, #1]
   18e92:	2b00      	cmp	r3, #0
   18e94:	d0ca      	beq.n	18e2c <lll_conn_isr_rx+0x1b0>
   18e96:	e722      	b.n	18cde <lll_conn_isr_rx+0x62>
	LL_ASSERT(!radio_is_ready());
   18e98:	4a39      	ldr	r2, [pc, #228]	; (18f80 <lll_conn_isr_rx+0x304>)
   18e9a:	493e      	ldr	r1, [pc, #248]	; (18f94 <lll_conn_isr_rx+0x318>)
   18e9c:	483a      	ldr	r0, [pc, #232]	; (18f88 <lll_conn_isr_rx+0x30c>)
   18e9e:	f240 133d 	movw	r3, #317	; 0x13d
   18ea2:	f005 fa6f 	bl	1e384 <printk>
   18ea6:	4040      	eors	r0, r0
   18ea8:	f380 8811 	msr	BASEPRI, r0
   18eac:	f04f 0003 	mov.w	r0, #3
   18eb0:	df02      	svc	2
   18eb2:	e73a      	b.n	18d2a <lll_conn_isr_rx+0xae>
		LL_ASSERT(lll->handle != 0xFFFF);
   18eb4:	4a32      	ldr	r2, [pc, #200]	; (18f80 <lll_conn_isr_rx+0x304>)
   18eb6:	4938      	ldr	r1, [pc, #224]	; (18f98 <lll_conn_isr_rx+0x31c>)
   18eb8:	4833      	ldr	r0, [pc, #204]	; (18f88 <lll_conn_isr_rx+0x30c>)
   18eba:	f44f 73a6 	mov.w	r3, #332	; 0x14c
   18ebe:	f005 fa61 	bl	1e384 <printk>
   18ec2:	4040      	eors	r0, r0
   18ec4:	f380 8811 	msr	BASEPRI, r0
   18ec8:	f04f 0003 	mov.w	r0, #3
   18ecc:	df02      	svc	2
   18ece:	89a0      	ldrh	r0, [r4, #12]
   18ed0:	e735      	b.n	18d3e <lll_conn_isr_rx+0xc2>
			lll->empty = 0;
   18ed2:	f36f 0382 	bfc	r3, #2, #1
   18ed6:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
			pdu_data_tx = (void *)radio_pkt_empty_get();
   18eda:	f000 fc2f 	bl	1973c <radio_pkt_empty_get>
	tx_release = NULL;
   18ede:	2500      	movs	r5, #0
   18ee0:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   18ee4:	7f32      	ldrb	r2, [r6, #28]
   18ee6:	e7b9      	b.n	18e5c <lll_conn_isr_rx+0x1e0>
				lll->packet_tx_head_offset = offset;
   18ee8:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
   18eec:	7f32      	ldrb	r2, [r6, #28]
   18eee:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
	tx_release = NULL;
   18ef2:	2500      	movs	r5, #0
   18ef4:	e7b2      	b.n	18e5c <lll_conn_isr_rx+0x1e0>
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   18ef6:	2003      	movs	r0, #3
   18ef8:	f7f7 ff16 	bl	10d28 <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   18efc:	2800      	cmp	r0, #0
   18efe:	d0b3      	beq.n	18e68 <lll_conn_isr_rx+0x1ec>
		lll->nesn++;
   18f00:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   18f04:	f083 0302 	eor.w	r3, r3, #2
   18f08:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		if (pdu_data_rx->len != 0) {
   18f0c:	7f73      	ldrb	r3, [r6, #29]
   18f0e:	2b00      	cmp	r3, #0
   18f10:	d0aa      	beq.n	18e68 <lll_conn_isr_rx+0x1ec>
			if (lll->enc_rx) {
   18f12:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   18f16:	0718      	lsls	r0, r3, #28
   18f18:	d412      	bmi.n	18f40 <lll_conn_isr_rx+0x2c4>
			*is_rx_enqueue = 1U;
   18f1a:	2701      	movs	r7, #1
   18f1c:	e7a5      	b.n	18e6a <lll_conn_isr_rx+0x1ee>
				lll->packet_tx_head_len = 0;
   18f1e:	2200      	movs	r2, #0
   18f20:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
				memq_dequeue(lll->memq_tx.tail,
   18f24:	f104 0148 	add.w	r1, r4, #72	; 0x48
   18f28:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   18f2a:	f7f3 ff01 	bl	cd30 <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   18f2e:	9901      	ldr	r1, [sp, #4]
   18f30:	7f32      	ldrb	r2, [r6, #28]
   18f32:	680b      	ldr	r3, [r1, #0]
   18f34:	602b      	str	r3, [r5, #0]
				tx->next = link;
   18f36:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   18f3a:	600d      	str	r5, [r1, #0]
				FORCE_MD_CNT_SET();
   18f3c:	460d      	mov	r5, r1
   18f3e:	e78d      	b.n	18e5c <lll_conn_isr_rx+0x1e0>
				done = radio_ccm_is_done();
   18f40:	f000 fde8 	bl	19b14 <radio_ccm_is_done>
				LL_ASSERT(done);
   18f44:	2800      	cmp	r0, #0
   18f46:	d052      	beq.n	18fee <lll_conn_isr_rx+0x372>
				bool mic_failure = !radio_ccm_mic_is_valid();
   18f48:	f000 fe06 	bl	19b58 <radio_ccm_mic_is_valid>
				if (mic_failure &&
   18f4c:	2800      	cmp	r0, #0
   18f4e:	d13e      	bne.n	18fce <lll_conn_isr_rx+0x352>
				    lll->ccm_rx.counter == 0 &&
   18f50:	f8d4 206f 	ldr.w	r2, [r4, #111]	; 0x6f
   18f54:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
				if (mic_failure &&
   18f58:	4313      	orrs	r3, r2
   18f5a:	d104      	bne.n	18f66 <lll_conn_isr_rx+0x2ea>
				    (pdu_data_rx->ll_id ==
   18f5c:	7f33      	ldrb	r3, [r6, #28]
				    lll->ccm_rx.counter == 0 &&
   18f5e:	f003 0303 	and.w	r3, r3, #3
   18f62:	2b03      	cmp	r3, #3
   18f64:	d01c      	beq.n	18fa0 <lll_conn_isr_rx+0x324>
					mic_state = LLL_CONN_MIC_FAIL;
   18f66:	4b0d      	ldr	r3, [pc, #52]	; (18f9c <lll_conn_isr_rx+0x320>)
   18f68:	2202      	movs	r2, #2
   18f6a:	701a      	strb	r2, [r3, #0]
	is_rx_enqueue = 0U;
   18f6c:	2700      	movs	r7, #0
   18f6e:	e6dc      	b.n	18d2a <lll_conn_isr_rx+0xae>
   18f70:	000188b5 	.word	0x000188b5
   18f74:	20002c3c 	.word	0x20002c3c
   18f78:	200031c0 	.word	0x200031c0
   18f7c:	00018a8d 	.word	0x00018a8d
   18f80:	00024f14 	.word	0x00024f14
   18f84:	000243a4 	.word	0x000243a4
   18f88:	00024334 	.word	0x00024334
   18f8c:	00024f60 	.word	0x00024f60
   18f90:	200031c1 	.word	0x200031c1
   18f94:	00024ec8 	.word	0x00024ec8
   18f98:	00024f70 	.word	0x00024f70
   18f9c:	200031c2 	.word	0x200031c2
						radio_pkt_scratch_get();
   18fa0:	f000 fbd0 	bl	19744 <radio_pkt_scratch_get>
					if (ctrl_pdu_len_check(
   18fa4:	7842      	ldrb	r2, [r0, #1]
   18fa6:	2a27      	cmp	r2, #39	; 0x27
						radio_pkt_scratch_get();
   18fa8:	4601      	mov	r1, r0
					if (ctrl_pdu_len_check(
   18faa:	d8dc      	bhi.n	18f66 <lll_conn_isr_rx+0x2ea>
   18fac:	3203      	adds	r2, #3
   18fae:	f106 001c 	add.w	r0, r6, #28
   18fb2:	f00a fb56 	bl	23662 <memcpy>
						lll->ccm_rx.counter--;
   18fb6:	f8d4 306f 	ldr.w	r3, [r4, #111]	; 0x6f
   18fba:	f8d4 2073 	ldr.w	r2, [r4, #115]	; 0x73
   18fbe:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
   18fc2:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   18fc6:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
   18fca:	f8c4 2073 	str.w	r2, [r4, #115]	; 0x73
				lll->ccm_rx.counter++;
   18fce:	f8d4 306f 	ldr.w	r3, [r4, #111]	; 0x6f
   18fd2:	f8d4 2073 	ldr.w	r2, [r4, #115]	; 0x73
				mic_state = LLL_CONN_MIC_PASS;
   18fd6:	490e      	ldr	r1, [pc, #56]	; (19010 <lll_conn_isr_rx+0x394>)
				lll->ccm_rx.counter++;
   18fd8:	3301      	adds	r3, #1
						lll->ccm_rx.counter--;
   18fda:	f104 006f 	add.w	r0, r4, #111	; 0x6f
				lll->ccm_rx.counter++;
   18fde:	f142 0200 	adc.w	r2, r2, #0
				mic_state = LLL_CONN_MIC_PASS;
   18fe2:	2701      	movs	r7, #1
				lll->ccm_rx.counter++;
   18fe4:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
				mic_state = LLL_CONN_MIC_PASS;
   18fe8:	700f      	strb	r7, [r1, #0]
				lll->ccm_rx.counter++;
   18fea:	6042      	str	r2, [r0, #4]
		if (err) {
   18fec:	e73d      	b.n	18e6a <lll_conn_isr_rx+0x1ee>
				LL_ASSERT(done);
   18fee:	4a09      	ldr	r2, [pc, #36]	; (19014 <lll_conn_isr_rx+0x398>)
   18ff0:	4909      	ldr	r1, [pc, #36]	; (19018 <lll_conn_isr_rx+0x39c>)
   18ff2:	480a      	ldr	r0, [pc, #40]	; (1901c <lll_conn_isr_rx+0x3a0>)
   18ff4:	f240 331b 	movw	r3, #795	; 0x31b
   18ff8:	f005 f9c4 	bl	1e384 <printk>
   18ffc:	4040      	eors	r0, r0
   18ffe:	f380 8811 	msr	BASEPRI, r0
   19002:	f04f 0003 	mov.w	r0, #3
   19006:	df02      	svc	2
   19008:	e79e      	b.n	18f48 <lll_conn_isr_rx+0x2cc>
	is_rx_enqueue = 0U;
   1900a:	462f      	mov	r7, r5
   1900c:	e667      	b.n	18cde <lll_conn_isr_rx+0x62>
   1900e:	bf00      	nop
   19010:	200031c2 	.word	0x200031c2
   19014:	00024f14 	.word	0x00024f14
   19018:	00024f68 	.word	0x00024f68
   1901c:	00024334 	.word	0x00024334

00019020 <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   19020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t remainder;
	uint32_t hcto;

	DEBUG_RADIO_START_S(1);

	lll = p->param;
   19024:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   19026:	89a2      	ldrh	r2, [r4, #12]
   19028:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1902c:	429a      	cmp	r2, r3
{
   1902e:	b082      	sub	sp, #8
	if (unlikely(lll->handle == 0xFFFF)) {
   19030:	f000 80c0 	beq.w	191b4 <prepare_cb+0x194>

		return 0;
	}

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   19034:	4605      	mov	r5, r0
   19036:	f7ff fca3 	bl	18980 <lll_conn_prepare_reset>

	/* Deduce the latency */
	lll->latency_event = lll->latency_prepare - 1;
   1903a:	8a61      	ldrh	r1, [r4, #18]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   1903c:	8ae6      	ldrh	r6, [r4, #22]
	lll->event_counter = lll->event_counter + lll->latency_prepare;

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;

	if (lll->data_chan_sel) {
   1903e:	7f63      	ldrb	r3, [r4, #29]
	lll->latency_event = lll->latency_prepare - 1;
   19040:	1e48      	subs	r0, r1, #1
	lll->event_counter = lll->event_counter + lll->latency_prepare;
   19042:	4431      	add	r1, r6
	lll->latency_prepare = 0;
   19044:	2200      	movs	r2, #0
	lll->latency_event = lll->latency_prepare - 1;
   19046:	b280      	uxth	r0, r0
	lll->event_counter = lll->event_counter + lll->latency_prepare;
   19048:	82e1      	strh	r1, [r4, #22]
	if (lll->data_chan_sel) {
   1904a:	0659      	lsls	r1, r3, #25
	lll->latency_prepare = 0;
   1904c:	8262      	strh	r2, [r4, #18]
	lll->latency_event = lll->latency_prepare - 1;
   1904e:	82a0      	strh	r0, [r4, #20]
	if (lll->data_chan_sel) {
   19050:	f104 0218 	add.w	r2, r4, #24
   19054:	f100 808d 	bmi.w	19172 <prepare_cb+0x152>
#else /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
		data_chan_use = 0;
		LL_ASSERT(0);
#endif /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
	} else {
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   19058:	f003 063f 	and.w	r6, r3, #63	; 0x3f
   1905c:	7fa1      	ldrb	r1, [r4, #30]
   1905e:	9600      	str	r6, [sp, #0]
   19060:	4613      	mov	r3, r2
   19062:	4602      	mov	r2, r0
   19064:	f104 001f 	add.w	r0, r4, #31
   19068:	f7fd fade 	bl	16628 <lll_chan_sel_1>
   1906c:	4607      	mov	r7, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* current window widening */
	lll->slave.window_widening_event_us +=
   1906e:	e9d4 610b 	ldrd	r6, r1, [r4, #44]	; 0x2c
		lll->slave.window_widening_prepare_us;
	lll->slave.window_widening_prepare_us = 0;
	if (lll->slave.window_widening_event_us >
	    lll->slave.window_widening_max_us) {
   19072:	6aa2      	ldr	r2, [r4, #40]	; 0x28
		lll->slave.window_widening_event_us =
			lll->slave.window_widening_max_us;
	}

	/* current window size */
	lll->slave.window_size_event_us +=
   19074:	e9d4 030d 	ldrd	r0, r3, [r4, #52]	; 0x34
	lll->slave.window_widening_event_us +=
   19078:	4431      	add	r1, r6
		lll->slave.window_widening_event_us =
   1907a:	428a      	cmp	r2, r1
   1907c:	bf28      	it	cs
   1907e:	460a      	movcs	r2, r1
	lll->slave.window_size_event_us +=
   19080:	4403      	add	r3, r0
	lll->slave.window_widening_prepare_us = 0;
   19082:	2600      	movs	r6, #0
		lll->slave.window_widening_event_us =
   19084:	6322      	str	r2, [r4, #48]	; 0x30
	lll->slave.window_size_event_us +=
   19086:	63a3      	str	r3, [r4, #56]	; 0x38
	lll->slave.window_widening_prepare_us = 0;
   19088:	62e6      	str	r6, [r4, #44]	; 0x2c
		lll->slave.window_size_prepare_us;
	lll->slave.window_size_prepare_us = 0;
   1908a:	6366      	str	r6, [r4, #52]	; 0x34

	/* Start setting up Radio h/w */
	radio_reset();
   1908c:	f000 fa48 	bl	19520 <radio_reset>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   19090:	4630      	mov	r0, r6
   19092:	f000 fa79 	bl	19588 <radio_tx_power_set>
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */

	lll_conn_rx_pkt_set(lll);
   19096:	4620      	mov	r0, r4
   19098:	f7ff fcb2 	bl	18a00 <lll_conn_rx_pkt_set>

	radio_aa_set(lll->access_addr);
   1909c:	1d20      	adds	r0, r4, #4
   1909e:	f000 fa91 	bl	195c4 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
			    (((uint32_t)lll->crc_init[2] << 16) |
			     ((uint32_t)lll->crc_init[1] << 8) |
   190a2:	7a63      	ldrb	r3, [r4, #9]
			    (((uint32_t)lll->crc_init[2] << 16) |
   190a4:	7aa2      	ldrb	r2, [r4, #10]
			     ((uint32_t)lll->crc_init[0])));
   190a6:	7a21      	ldrb	r1, [r4, #8]
			     ((uint32_t)lll->crc_init[1] << 8) |
   190a8:	021b      	lsls	r3, r3, #8
			    (((uint32_t)lll->crc_init[2] << 16) |
   190aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   190ae:	4319      	orrs	r1, r3
   190b0:	f240 605b 	movw	r0, #1627	; 0x65b
   190b4:	f000 fb2c 	bl	19710 <radio_crc_configure>

	lll_chan_set(data_chan_use);
   190b8:	4638      	mov	r0, r7
   190ba:	f7fe fcf7 	bl	17aac <lll_chan_set>

	radio_isr_set(lll_conn_isr_rx, lll);
   190be:	4621      	mov	r1, r4
   190c0:	4841      	ldr	r0, [pc, #260]	; (191c8 <prepare_cb+0x1a8>)
   190c2:	f000 f9eb 	bl	1949c <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   190c6:	2096      	movs	r0, #150	; 0x96
   190c8:	f000 fbc8 	bl	1985c <radio_tmr_tifs_set>

#if defined(CONFIG_BT_CTLR_PHY)
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx,
				     lll->phy_flags);
   190cc:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx,
   190d0:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   190d4:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   190d8:	4631      	mov	r1, r6
   190da:	f002 0207 	and.w	r2, r2, #7
   190de:	f000 0007 	and.w	r0, r0, #7
   190e2:	f000 fb41 	bl	19768 <radio_switch_complete_and_tx>
#else /* !CONFIG_BT_CTLR_PHY */
	radio_switch_complete_and_tx(0, 0, 0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	ticks_at_event = p->ticks_at_expire;
	evt = HDR_LLL2EVT(lll);
   190e6:	f8d4 8000 	ldr.w	r8, [r4]
	ticks_at_event = p->ticks_at_expire;
   190ea:	682f      	ldr	r7, [r5, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   190ec:	4640      	mov	r0, r8
   190ee:	f7fe fcbf 	bl	17a70 <lll_evt_offset_get>
   190f2:	4407      	add	r7, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = p->remainder;
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   190f4:	686a      	ldr	r2, [r5, #4]
   190f6:	f107 0109 	add.w	r1, r7, #9
   190fa:	4630      	mov	r0, r6
   190fc:	f000 fbba 	bl	19874 <radio_tmr_start>
   19100:	4605      	mov	r5, r0

	radio_tmr_aa_capture();
   19102:	f000 fc5f 	bl	199c4 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   19106:	4630      	mov	r0, r6
   19108:	f000 fc76 	bl	199f8 <radio_tmr_aa_save>

	hcto = remainder_us +
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   1910c:	6b22      	ldr	r2, [r4, #48]	; 0x30
	hcto = remainder_us +
   1910e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		 lll->slave.window_widening_event_us) << 1) +
	       lll->slave.window_size_event_us;

#if defined(CONFIG_BT_CTLR_PHY)
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   19110:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   19114:	3230      	adds	r2, #48	; 0x30
	hcto = remainder_us +
   19116:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   1911a:	f000 0007 	and.w	r0, r0, #7
   1911e:	2101      	movs	r1, #1
	hcto = remainder_us +
   19120:	441d      	add	r5, r3
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   19122:	f000 faa5 	bl	19670 <radio_rx_ready_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   19126:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
   1912a:	f002 0207 	and.w	r2, r2, #7
   1912e:	2a02      	cmp	r2, #2
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   19130:	4405      	add	r5, r0
   19132:	d03d      	beq.n	191b0 <prepare_cb+0x190>
		return 40;
   19134:	2a04      	cmp	r2, #4
   19136:	bf0c      	ite	eq
   19138:	f44f 73bc 	moveq.w	r3, #376	; 0x178
   1913c:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1913e:	4610      	mov	r0, r2
   19140:	2101      	movs	r1, #1
	hcto += addr_us_get(lll->phy_rx);
   19142:	441d      	add	r5, r3
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   19144:	f000 fa96 	bl	19674 <radio_rx_chain_delay_get>
	hcto += radio_rx_ready_delay_get(0, 0);
	hcto += addr_us_get(0);
	hcto += radio_rx_chain_delay_get(0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	radio_tmr_hcto_configure(hcto);
   19148:	4428      	add	r0, r5
   1914a:	f000 fc2d 	bl	199a8 <radio_tmr_hcto_configure>
#endif /* CONFIG_BT_CTLR_CONN_RSSI */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(evt, (TICKER_ID_CONN_BASE + lll->handle),
   1914e:	7b21      	ldrb	r1, [r4, #12]
   19150:	3103      	adds	r1, #3
   19152:	463a      	mov	r2, r7
   19154:	4640      	mov	r0, r8
   19156:	b2c9      	uxtb	r1, r1
   19158:	f7fe fc98 	bl	17a8c <lll_preempt_calc>
   1915c:	b190      	cbz	r0, 19184 <prepare_cb+0x164>
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   1915e:	481b      	ldr	r0, [pc, #108]	; (191cc <prepare_cb+0x1ac>)
   19160:	4621      	mov	r1, r4
   19162:	f000 f99b 	bl	1949c <radio_isr_set>
		radio_disable();
   19166:	f000 fa91 	bl	1968c <radio_disable>
	}

	DEBUG_RADIO_START_S(1);

	return 0;
}
   1916a:	2000      	movs	r0, #0
   1916c:	b002      	add	sp, #8
   1916e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	event_counter = lll->event_counter + lll->latency_event;
   19172:	4430      	add	r0, r6
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   19174:	8be1      	ldrh	r1, [r4, #30]
   19176:	b280      	uxth	r0, r0
   19178:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1917c:	f7fd fa9c 	bl	166b8 <lll_chan_sel_2>
   19180:	4607      	mov	r7, r0
   19182:	e774      	b.n	1906e <prepare_cb+0x4e>
		ret = lll_prepare_done(lll);
   19184:	4620      	mov	r0, r4
   19186:	f7fe fc1b 	bl	179c0 <lll_prepare_done>
		LL_ASSERT(!ret);
   1918a:	2800      	cmp	r0, #0
   1918c:	d0ed      	beq.n	1916a <prepare_cb+0x14a>
   1918e:	4a10      	ldr	r2, [pc, #64]	; (191d0 <prepare_cb+0x1b0>)
   19190:	4910      	ldr	r1, [pc, #64]	; (191d4 <prepare_cb+0x1b4>)
   19192:	4811      	ldr	r0, [pc, #68]	; (191d8 <prepare_cb+0x1b8>)
   19194:	f44f 7387 	mov.w	r3, #270	; 0x10e
   19198:	f005 f8f4 	bl	1e384 <printk>
   1919c:	4040      	eors	r0, r0
   1919e:	f380 8811 	msr	BASEPRI, r0
   191a2:	f04f 0003 	mov.w	r0, #3
   191a6:	df02      	svc	2
}
   191a8:	2000      	movs	r0, #0
   191aa:	b002      	add	sp, #8
   191ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (phy) {
   191b0:	2318      	movs	r3, #24
   191b2:	e7c4      	b.n	1913e <prepare_cb+0x11e>
		radio_isr_set(lll_isr_early_abort, lll);
   191b4:	4809      	ldr	r0, [pc, #36]	; (191dc <prepare_cb+0x1bc>)
   191b6:	4621      	mov	r1, r4
   191b8:	f000 f970 	bl	1949c <radio_isr_set>
		radio_disable();
   191bc:	f000 fa66 	bl	1968c <radio_disable>
}
   191c0:	2000      	movs	r0, #0
   191c2:	b002      	add	sp, #8
   191c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   191c8:	00018c7d 	.word	0x00018c7d
   191cc:	00017be1 	.word	0x00017be1
   191d0:	00024f9c 	.word	0x00024f9c
   191d4:	000246c8 	.word	0x000246c8
   191d8:	00024334 	.word	0x00024334
   191dc:	00017bf5 	.word	0x00017bf5

000191e0 <lll_slave_prepare>:
{
   191e0:	b570      	push	{r4, r5, r6, lr}
   191e2:	b082      	sub	sp, #8
   191e4:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   191e6:	f7fe fe11 	bl	17e0c <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   191ea:	2800      	cmp	r0, #0
   191ec:	db29      	blt.n	19242 <lll_slave_prepare+0x62>
	lll = p->param;
   191ee:	68e1      	ldr	r1, [r4, #12]
	elapsed = p->lazy + 1;
   191f0:	8923      	ldrh	r3, [r4, #8]
	    lll->slave.window_widening_periodic_us * elapsed;
   191f2:	6a48      	ldr	r0, [r1, #36]	; 0x24
	lll->slave.window_widening_prepare_us +=
   191f4:	6acd      	ldr	r5, [r1, #44]	; 0x2c
	lll->latency_prepare += elapsed;
   191f6:	8a4e      	ldrh	r6, [r1, #18]
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   191f8:	4a18      	ldr	r2, [pc, #96]	; (1925c <lll_slave_prepare+0x7c>)
	elapsed = p->lazy + 1;
   191fa:	3301      	adds	r3, #1
   191fc:	b29b      	uxth	r3, r3
	lll->slave.window_widening_prepare_us +=
   191fe:	fb00 5503 	mla	r5, r0, r3, r5
	    lll->slave.window_widening_max_us) {
   19202:	6a88      	ldr	r0, [r1, #40]	; 0x28
		lll->slave.window_widening_prepare_us =
   19204:	42a8      	cmp	r0, r5
   19206:	bf28      	it	cs
   19208:	4628      	movcs	r0, r5
	lll->latency_prepare += elapsed;
   1920a:	4433      	add	r3, r6
		lll->slave.window_widening_prepare_us =
   1920c:	62c8      	str	r0, [r1, #44]	; 0x2c
	lll->latency_prepare += elapsed;
   1920e:	824b      	strh	r3, [r1, #18]
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   19210:	4813      	ldr	r0, [pc, #76]	; (19260 <lll_slave_prepare+0x80>)
   19212:	4914      	ldr	r1, [pc, #80]	; (19264 <lll_slave_prepare+0x84>)
   19214:	9400      	str	r4, [sp, #0]
   19216:	2300      	movs	r3, #0
   19218:	f7f7 fed8 	bl	10fcc <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1921c:	b108      	cbz	r0, 19222 <lll_slave_prepare+0x42>
   1921e:	3077      	adds	r0, #119	; 0x77
   19220:	d101      	bne.n	19226 <lll_slave_prepare+0x46>
}
   19222:	b002      	add	sp, #8
   19224:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   19226:	4a10      	ldr	r2, [pc, #64]	; (19268 <lll_slave_prepare+0x88>)
   19228:	4910      	ldr	r1, [pc, #64]	; (1926c <lll_slave_prepare+0x8c>)
   1922a:	4811      	ldr	r0, [pc, #68]	; (19270 <lll_slave_prepare+0x90>)
   1922c:	235f      	movs	r3, #95	; 0x5f
   1922e:	f005 f8a9 	bl	1e384 <printk>
   19232:	4040      	eors	r0, r0
   19234:	f380 8811 	msr	BASEPRI, r0
   19238:	f04f 0003 	mov.w	r0, #3
   1923c:	df02      	svc	2
}
   1923e:	b002      	add	sp, #8
   19240:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(err >= 0);
   19242:	4a09      	ldr	r2, [pc, #36]	; (19268 <lll_slave_prepare+0x88>)
   19244:	490b      	ldr	r1, [pc, #44]	; (19274 <lll_slave_prepare+0x94>)
   19246:	480a      	ldr	r0, [pc, #40]	; (19270 <lll_slave_prepare+0x90>)
   19248:	2348      	movs	r3, #72	; 0x48
   1924a:	f005 f89b 	bl	1e384 <printk>
   1924e:	4040      	eors	r0, r0
   19250:	f380 8811 	msr	BASEPRI, r0
   19254:	f04f 0003 	mov.w	r0, #3
   19258:	df02      	svc	2
   1925a:	e7c8      	b.n	191ee <lll_slave_prepare+0xe>
   1925c:	00019021 	.word	0x00019021
   19260:	00017a69 	.word	0x00017a69
   19264:	000189a9 	.word	0x000189a9
   19268:	00024f9c 	.word	0x00024f9c
   1926c:	00024ef0 	.word	0x00024ef0
   19270:	00024334 	.word	0x00024334
   19274:	00024e40 	.word	0x00024e40

00019278 <cntr_init>:

static uint8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   19278:	4b05      	ldr	r3, [pc, #20]	; (19290 <cntr_init+0x18>)
    p_reg->EVTENSET = mask;
   1927a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1927e:	2100      	movs	r1, #0
   19280:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   19284:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   19288:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   1928c:	4770      	bx	lr
   1928e:	bf00      	nop
   19290:	4000b000 	.word	0x4000b000

00019294 <cntr_start>:

uint32_t cntr_start(void)
{
	if (_refcount++) {
   19294:	4b05      	ldr	r3, [pc, #20]	; (192ac <cntr_start+0x18>)
   19296:	7818      	ldrb	r0, [r3, #0]
   19298:	1c42      	adds	r2, r0, #1
   1929a:	701a      	strb	r2, [r3, #0]
   1929c:	b918      	cbnz	r0, 192a6 <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1929e:	4b04      	ldr	r3, [pc, #16]	; (192b0 <cntr_start+0x1c>)
   192a0:	2201      	movs	r2, #1
   192a2:	601a      	str	r2, [r3, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   192a4:	4770      	bx	lr
		return 1;
   192a6:	2001      	movs	r0, #1
}
   192a8:	4770      	bx	lr
   192aa:	bf00      	nop
   192ac:	200031c3 	.word	0x200031c3
   192b0:	4000b000 	.word	0x4000b000

000192b4 <cntr_stop>:

uint32_t cntr_stop(void)
{
   192b4:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   192b6:	4c0d      	ldr	r4, [pc, #52]	; (192ec <cntr_stop+0x38>)
   192b8:	7820      	ldrb	r0, [r4, #0]
   192ba:	b148      	cbz	r0, 192d0 <cntr_stop+0x1c>

	if (--_refcount) {
   192bc:	3801      	subs	r0, #1
   192be:	b2c0      	uxtb	r0, r0
   192c0:	7020      	strb	r0, [r4, #0]
   192c2:	b918      	cbnz	r0, 192cc <cntr_stop+0x18>
   192c4:	4b0a      	ldr	r3, [pc, #40]	; (192f0 <cntr_stop+0x3c>)
   192c6:	2201      	movs	r2, #1
   192c8:	601a      	str	r2, [r3, #0]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   192ca:	bd10      	pop	{r4, pc}
		return 1;
   192cc:	2001      	movs	r0, #1
}
   192ce:	bd10      	pop	{r4, pc}
	LL_ASSERT(_refcount);
   192d0:	4a08      	ldr	r2, [pc, #32]	; (192f4 <cntr_stop+0x40>)
   192d2:	4909      	ldr	r1, [pc, #36]	; (192f8 <cntr_stop+0x44>)
   192d4:	4809      	ldr	r0, [pc, #36]	; (192fc <cntr_stop+0x48>)
   192d6:	232d      	movs	r3, #45	; 0x2d
   192d8:	f005 f854 	bl	1e384 <printk>
   192dc:	4040      	eors	r0, r0
   192de:	f380 8811 	msr	BASEPRI, r0
   192e2:	f04f 0003 	mov.w	r0, #3
   192e6:	df02      	svc	2
   192e8:	7820      	ldrb	r0, [r4, #0]
   192ea:	e7e7      	b.n	192bc <cntr_stop+0x8>
   192ec:	200031c3 	.word	0x200031c3
   192f0:	4000b004 	.word	0x4000b004
   192f4:	00024ffc 	.word	0x00024ffc
   192f8:	00025048 	.word	0x00025048
   192fc:	00024334 	.word	0x00024334

00019300 <cntr_cnt_get>:
     return p_reg->COUNTER;
   19300:	4b01      	ldr	r3, [pc, #4]	; (19308 <cntr_cnt_get+0x8>)
   19302:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

uint32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   19306:	4770      	bx	lr
   19308:	4000b000 	.word	0x4000b000

0001930c <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   1930c:	4b02      	ldr	r3, [pc, #8]	; (19318 <cntr_cmp_set+0xc>)
   1930e:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   19312:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   19316:	4770      	bx	lr
   19318:	4000b000 	.word	0x4000b000

0001931c <do_ecb>:
	uint8_t clear_text[16];
	uint8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   1931c:	b4f0      	push	{r4, r5, r6, r7}
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   1931e:	4b12      	ldr	r3, [pc, #72]	; (19368 <do_ecb+0x4c>)

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19320:	4d12      	ldr	r5, [pc, #72]	; (1936c <do_ecb+0x50>)
   19322:	2601      	movs	r6, #1
   19324:	4634      	mov	r4, r6
		NRF_ECB->EVENTS_ENDECB = 0;
   19326:	2100      	movs	r1, #0
   19328:	602c      	str	r4, [r5, #0]
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   1932a:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   1932e:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   19332:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   19336:	601c      	str	r4, [r3, #0]
}
   19338:	e005      	b.n	19346 <do_ecb+0x2a>
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1933a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1933e:	b932      	cbnz	r2, 1934e <do_ecb+0x32>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   19340:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   19344:	b11a      	cbz	r2, 1934e <do_ecb+0x32>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   19346:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   1934a:	2a00      	cmp	r2, #0
   1934c:	d0f5      	beq.n	1933a <do_ecb+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1934e:	602e      	str	r6, [r5, #0]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   19350:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   19354:	2a00      	cmp	r2, #0
   19356:	d1e7      	bne.n	19328 <do_ecb+0xc>
   19358:	f8d3 7504 	ldr.w	r7, [r3, #1284]	; 0x504
   1935c:	2f00      	cmp	r7, #0
   1935e:	d0e3      	beq.n	19328 <do_ecb+0xc>

	NRF_ECB->ECBDATAPTR = 0;
}
   19360:	bcf0      	pop	{r4, r5, r6, r7}
	NRF_ECB->ECBDATAPTR = 0;
   19362:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   19366:	4770      	bx	lr
   19368:	4000e000 	.word	0x4000e000
   1936c:	4000e004 	.word	0x4000e004

00019370 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(uint8_t const *const key_le, uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le, uint8_t * const cipher_text_be)
{
   19370:	b570      	push	{r4, r5, r6, lr}
   19372:	b08c      	sub	sp, #48	; 0x30
   19374:	460e      	mov	r6, r1
   19376:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   19378:	4601      	mov	r1, r0
   1937a:	2210      	movs	r2, #16
   1937c:	4668      	mov	r0, sp
{
   1937e:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   19380:	f7f3 fc9e 	bl	ccc0 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   19384:	2210      	movs	r2, #16
   19386:	eb0d 0002 	add.w	r0, sp, r2
   1938a:	4631      	mov	r1, r6
   1938c:	f7f3 fc98 	bl	ccc0 <mem_rcopy>

	do_ecb(&ecb);
   19390:	4668      	mov	r0, sp
   19392:	f7ff ffc3 	bl	1931c <do_ecb>

	if (cipher_text_le) {
   19396:	b125      	cbz	r5, 193a2 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   19398:	4628      	mov	r0, r5
   1939a:	2210      	movs	r2, #16
   1939c:	a908      	add	r1, sp, #32
   1939e:	f7f3 fc8f 	bl	ccc0 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   193a2:	b12c      	cbz	r4, 193b0 <ecb_encrypt+0x40>
   193a4:	ad08      	add	r5, sp, #32
   193a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   193a8:	6020      	str	r0, [r4, #0]
   193aa:	6061      	str	r1, [r4, #4]
   193ac:	60a2      	str	r2, [r4, #8]
   193ae:	60e3      	str	r3, [r4, #12]
		memcpy(cipher_text_be, &ecb.cipher_text[0],
			 sizeof(ecb.cipher_text));
	}
}
   193b0:	b00c      	add	sp, #48	; 0x30
   193b2:	bd70      	pop	{r4, r5, r6, pc}

000193b4 <sw_switch.isra.0>:
#endif

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static uint8_t sw_tifs_toggle;

static void sw_switch(uint8_t dir, uint8_t phy_curr, uint8_t flags_curr, uint8_t phy_next,
   193b4:	b4f0      	push	{r4, r5, r6, r7}
		      uint8_t flags_next)
{
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   193b6:	4e2a      	ldr	r6, [pc, #168]	; (19460 <sw_switch.isra.0+0xac>)
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   193b8:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 19474 <sw_switch.isra.0+0xc0>
   193bc:	7834      	ldrb	r4, [r6, #0]
   193be:	4b29      	ldr	r3, [pc, #164]	; (19464 <sw_switch.isra.0+0xb0>)
   193c0:	f8cc 3568 	str.w	r3, [ip, #1384]	; 0x568
   193c4:	f104 030c 	add.w	r3, r4, #12
   193c8:	b2db      	uxtb	r3, r3
   193ca:	00db      	lsls	r3, r3, #3
	 * (TX/RX).
	 */
	nrf_ppi_event_endpoint_setup(
		NRF_PPI,
		radio_enable_ppi,
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   193cc:	4f26      	ldr	r7, [pc, #152]	; (19468 <sw_switch.isra.0+0xb4>)
   193ce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   193d2:	00e5      	lsls	r5, r4, #3
   193d4:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   193d8:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   193dc:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   193e0:	eb07 0784 	add.w	r7, r7, r4, lsl #2
    p_reg->CH[(uint32_t) channel].TEP = tep;
   193e4:	f8cc 556c 	str.w	r5, [ip, #1388]	; 0x56c
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   193e8:	b225      	sxth	r5, r4

NRF_STATIC_INLINE void nrf_ppi_event_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                    nrf_ppi_channel_t channel,
                                                    uint32_t          eep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   193ea:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	uint8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	uint32_t delay;

	hal_radio_sw_switch_setup(cc, ppi, sw_tifs_toggle);

	if (dir) {
   193ee:	b388      	cbz	r0, 19454 <sw_switch.isra.0+0xa0>
	}
}

static inline uint32_t hal_radio_tx_ready_delay_ns_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
   193f0:	f24a 17b8 	movw	r7, #41400	; 0xa1b8
   193f4:	f649 6c34 	movw	ip, #40500	; 0x9e34
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_NS;
   193f8:	f242 40b8 	movw	r0, #9400	; 0x24b8
	switch (phy) {
   193fc:	2a02      	cmp	r2, #2
   193fe:	bf14      	ite	ne
   19400:	463a      	movne	r2, r7
   19402:	4662      	moveq	r2, ip
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_NS;
   19404:	f241 3788 	movw	r7, #5000	; 0x1388
   19408:	2902      	cmp	r1, #2
   1940a:	bf14      	ite	ne
   1940c:	4601      	movne	r1, r0
   1940e:	4639      	moveq	r1, r7
		/* TX */

		/* Calculate delay with respect to current (RX) and next
		 * (TX) PHY. If RX PHY is LE Coded, assume S8 coding scheme.
		 */
		delay = HAL_RADIO_NS2US_ROUND(
   19410:	4816      	ldr	r0, [pc, #88]	; (1946c <sw_switch.isra.0+0xb8>)

NRF_STATIC_INLINE void nrf_ppi_task_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                   nrf_ppi_channel_t channel,
                                                   uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].TEP = tep;
   19412:	4f17      	ldr	r7, [pc, #92]	; (19470 <sw_switch.isra.0+0xbc>)
   19414:	f8c3 7514 	str.w	r7, [r3, #1300]	; 0x514
   19418:	440a      	add	r2, r1
   1941a:	fba0 3202 	umull	r3, r2, r0, r2
   1941e:	0992      	lsrs	r2, r2, #6
		}
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
   19420:	00ab      	lsls	r3, r5, #2
   19422:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   19426:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1U;
   1942a:	3401      	adds	r4, #1
		SW_SWITCH_TIMER->CC[cc]) {
   1942c:	f8d3 1540 	ldr.w	r1, [r3, #1344]	; 0x540
	if (delay <
   19430:	4291      	cmp	r1, r2
				 SW_SWITCH_TIMER->CC[cc] - delay);
   19432:	bf8a      	itet	hi
   19434:	f8d3 1540 	ldrhi.w	r1, [r3, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   19438:	2201      	movls	r2, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   1943a:	1a8a      	subhi	r2, r1, r2
   1943c:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    p_reg->CHENSET = mask;
   19440:	4b0c      	ldr	r3, [pc, #48]	; (19474 <sw_switch.isra.0+0xc0>)
	sw_tifs_toggle &= 1;
   19442:	f004 0401 	and.w	r4, r4, #1
   19446:	f44f 6210 	mov.w	r2, #2304	; 0x900
   1944a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   1944e:	7034      	strb	r4, [r6, #0]
}
   19450:	bcf0      	pop	{r4, r5, r6, r7}
   19452:	4770      	bx	lr
    p_reg->CH[(uint32_t) channel].TEP = tep;
   19454:	4a08      	ldr	r2, [pc, #32]	; (19478 <sw_switch.isra.0+0xc4>)
   19456:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
		delay = HAL_RADIO_NS2US_CEIL(
   1945a:	2228      	movs	r2, #40	; 0x28
{
	nrf_ppi_task_endpoint_setup(
		NRF_PPI,
		ppi,
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_TASK_RX);
}
   1945c:	e7e0      	b.n	19420 <sw_switch.isra.0+0x6c>
   1945e:	bf00      	nop
   19460:	200031c4 	.word	0x200031c4
   19464:	4000110c 	.word	0x4000110c
   19468:	40009140 	.word	0x40009140
   1946c:	10624dd3 	.word	0x10624dd3
   19470:	40001000 	.word	0x40001000
   19474:	4001f000 	.word	0x4001f000
   19478:	40001004 	.word	0x40001004

0001947c <isr_radio>:
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   1947c:	4b04      	ldr	r3, [pc, #16]	; (19490 <isr_radio+0x14>)
   1947e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   19482:	b123      	cbz	r3, 1948e <isr_radio+0x12>
		isr_cb(isr_cb_param);
   19484:	4a03      	ldr	r2, [pc, #12]	; (19494 <isr_radio+0x18>)
   19486:	4b04      	ldr	r3, [pc, #16]	; (19498 <isr_radio+0x1c>)
   19488:	6810      	ldr	r0, [r2, #0]
   1948a:	681b      	ldr	r3, [r3, #0]
   1948c:	4718      	bx	r3
}
   1948e:	4770      	bx	lr
   19490:	40001000 	.word	0x40001000
   19494:	200027d0 	.word	0x200027d0
   19498:	200027cc 	.word	0x200027cc

0001949c <radio_isr_set>:
{
   1949c:	b538      	push	{r3, r4, r5, lr}
   1949e:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   194a0:	2001      	movs	r0, #1
{
   194a2:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   194a4:	f7ec f846 	bl	5534 <arch_irq_disable>
	isr_cb_param = param;
   194a8:	4a08      	ldr	r2, [pc, #32]	; (194cc <radio_isr_set+0x30>)
	isr_cb = cb;
   194aa:	4809      	ldr	r0, [pc, #36]	; (194d0 <radio_isr_set+0x34>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   194ac:	4b09      	ldr	r3, [pc, #36]	; (194d4 <radio_isr_set+0x38>)
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   194ae:	490a      	ldr	r1, [pc, #40]	; (194d8 <radio_isr_set+0x3c>)
	isr_cb_param = param;
   194b0:	6015      	str	r5, [r2, #0]
   194b2:	2510      	movs	r5, #16
   194b4:	2202      	movs	r2, #2
	isr_cb = cb;
   194b6:	6004      	str	r4, [r0, #0]
   194b8:	f8c1 5304 	str.w	r5, [r1, #772]	; 0x304
	irq_enable(RADIO_IRQn);
   194bc:	2001      	movs	r0, #1
   194be:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   194c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   194c6:	f7ec b825 	b.w	5514 <arch_irq_enable>
   194ca:	bf00      	nop
   194cc:	200027d0 	.word	0x200027d0
   194d0:	200027cc 	.word	0x200027cc
   194d4:	e000e100 	.word	0xe000e100
   194d8:	40001000 	.word	0x40001000

000194dc <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   194dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   194e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   194e4:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   194e6:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   194ea:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   194ee:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   194f2:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   194f6:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   194fa:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   194fe:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   19502:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   19506:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   1950a:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   1950e:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   19512:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   19516:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   1951a:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
}
   1951e:	4770      	bx	lr

00019520 <radio_reset>:
{
   19520:	b510      	push	{r4, lr}
	irq_disable(RADIO_IRQn);
   19522:	2001      	movs	r0, #1
   19524:	f7ec f806 	bl	5534 <arch_irq_disable>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (uint32_t) radio_power;
   19528:	4b0c      	ldr	r3, [pc, #48]	; (1955c <radio_reset+0x3c>)
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   1952a:	490d      	ldr	r1, [pc, #52]	; (19560 <radio_reset+0x40>)
static inline void hal_radio_sw_switch_ppi_group_setup(void)
{
	/* Include the appropriate PPI channels in the two PPI Groups. */
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || \
	!defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   1952c:	4a0d      	ldr	r2, [pc, #52]	; (19564 <radio_reset+0x44>)
   1952e:	2400      	movs	r4, #0
   19530:	2001      	movs	r0, #1
   19532:	f8c3 4ffc 	str.w	r4, [r3, #4092]	; 0xffc
   19536:	f8c3 0ffc 	str.w	r0, [r3, #4092]	; 0xffc
   1953a:	680b      	ldr	r3, [r1, #0]
					 0xfffffffe) | 0x01000000;
   1953c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   19540:	f023 0301 	bic.w	r3, r3, #1
   19544:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   19548:	f44f 5490 	mov.w	r4, #4608	; 0x1200
		BIT(HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) |
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PPI(0));
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1954c:	f44f 5010 	mov.w	r0, #9216	; 0x2400
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   19550:	600b      	str	r3, [r1, #0]
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   19552:	f8c2 4800 	str.w	r4, [r2, #2048]	; 0x800
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   19556:	f8c2 0804 	str.w	r0, [r2, #2052]	; 0x804
}
   1955a:	bd10      	pop	{r4, pc}
   1955c:	40001000 	.word	0x40001000
   19560:	40001774 	.word	0x40001774
   19564:	4001f000 	.word	0x4001f000

00019568 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   19568:	4b06      	ldr	r3, [pc, #24]	; (19584 <radio_phy_set+0x1c>)
	switch (phy) {
   1956a:	2802      	cmp	r0, #2
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   1956c:	bf14      	ite	ne
   1956e:	2203      	movne	r2, #3
   19570:	2204      	moveq	r2, #4
   19572:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   19576:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   1957a:	f042 0201 	orr.w	r2, r2, #1
   1957e:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   19582:	4770      	bx	lr
   19584:	40001000 	.word	0x40001000

00019588 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (uint32_t)power;
   19588:	4b01      	ldr	r3, [pc, #4]	; (19590 <radio_tx_power_set+0x8>)
   1958a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   1958e:	4770      	bx	lr
   19590:	40001000 	.word	0x40001000

00019594 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   19594:	4b01      	ldr	r3, [pc, #4]	; (1959c <radio_freq_chan_set+0x8>)
   19596:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   1959a:	4770      	bx	lr
   1959c:	40001000 	.word	0x40001000

000195a0 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   195a0:	4b07      	ldr	r3, [pc, #28]	; (195c0 <radio_whiten_iv_set+0x20>)
   195a2:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   195a6:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   195aa:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   195ae:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   195b2:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   195b6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   195ba:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   195be:	4770      	bx	lr
   195c0:	40001000 	.word	0x40001000

000195c4 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   195c4:	4a0b      	ldr	r2, [pc, #44]	; (195f4 <radio_aa_set+0x30>)
   195c6:	2100      	movs	r1, #0
	NRF_RADIO->RXADDRESSES =
   195c8:	2301      	movs	r3, #1
{
   195ca:	b410      	push	{r4}
	NRF_RADIO->TXADDRESS =
   195cc:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   195d0:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   195d4:	78c3      	ldrb	r3, [r0, #3]
   195d6:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   195da:	7843      	ldrb	r3, [r0, #1]
   195dc:	7884      	ldrb	r4, [r0, #2]
   195de:	7801      	ldrb	r1, [r0, #0]
   195e0:	041b      	lsls	r3, r3, #16
   195e2:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
   195e6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
}
   195ea:	bc10      	pop	{r4}
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   195ec:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   195f0:	4770      	bx	lr
   195f2:	bf00      	nop
   195f4:	40001000 	.word	0x40001000

000195f8 <radio_pkt_configure>:
	switch (phy) {
   195f8:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   195fc:	2b02      	cmp	r3, #2
{
   195fe:	b410      	push	{r4}
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   19600:	bf14      	ite	ne
   19602:	2400      	movne	r4, #0
   19604:	f04f 7480 	moveq.w	r4, #16777216	; 0x1000000
	if (dc) {
   19608:	07d3      	lsls	r3, r2, #31
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1960a:	f1c0 0308 	rsb	r3, r0, #8
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   1960e:	bf48      	it	mi
   19610:	f444 1480 	orrmi.w	r4, r4, #1048576	; 0x100000
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   19614:	041b      	lsls	r3, r3, #16
			   ((((uint32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   19616:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   1961a:	4320      	orrs	r0, r4
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1961c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   19620:	4a0a      	ldr	r2, [pc, #40]	; (1964c <radio_pkt_configure+0x54>)
}
   19622:	bc10      	pop	{r4}
			    RADIO_PCNF0_S1LEN_Msk) |
   19624:	4303      	orrs	r3, r0
   19626:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   1962a:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   1962e:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   19632:	4807      	ldr	r0, [pc, #28]	; (19650 <radio_pkt_configure+0x58>)
   19634:	4018      	ands	r0, r3
   19636:	f8c2 0518 	str.w	r0, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((uint32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   1963a:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   1963e:	4319      	orrs	r1, r3
   19640:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   19644:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
}
   19648:	4770      	bx	lr
   1964a:	bf00      	nop
   1964c:	40001000 	.word	0x40001000
   19650:	fef80000 	.word	0xfef80000

00019654 <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
   19654:	4b01      	ldr	r3, [pc, #4]	; (1965c <radio_pkt_rx_set+0x8>)
   19656:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   1965a:	4770      	bx	lr
   1965c:	40001000 	.word	0x40001000

00019660 <radio_pkt_tx_set>:
   19660:	4b01      	ldr	r3, [pc, #4]	; (19668 <radio_pkt_tx_set+0x8>)
   19662:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   19666:	4770      	bx	lr
   19668:	40001000 	.word	0x40001000

0001966c <radio_tx_chain_delay_get>:
}
   1966c:	2001      	movs	r0, #1
   1966e:	4770      	bx	lr

00019670 <radio_rx_ready_delay_get>:
}
   19670:	2029      	movs	r0, #41	; 0x29
   19672:	4770      	bx	lr

00019674 <radio_rx_chain_delay_get>:
	switch (phy) {
   19674:	2802      	cmp	r0, #2
}
   19676:	bf14      	ite	ne
   19678:	200a      	movne	r0, #10
   1967a:	2005      	moveq	r0, #5
   1967c:	4770      	bx	lr
   1967e:	bf00      	nop

00019680 <radio_tx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19680:	4b01      	ldr	r3, [pc, #4]	; (19688 <radio_tx_enable+0x8>)
   19682:	2201      	movs	r2, #1
   19684:	601a      	str	r2, [r3, #0]
}
   19686:	4770      	bx	lr
   19688:	40001000 	.word	0x40001000

0001968c <radio_disable>:
{
   1968c:	b430      	push	{r4, r5}
    p_reg->CHENCLR = mask;
   1968e:	4a08      	ldr	r2, [pc, #32]	; (196b0 <radio_disable+0x24>)
	NRF_RADIO->SHORTS = 0;
   19690:	4808      	ldr	r0, [pc, #32]	; (196b4 <radio_disable+0x28>)
   19692:	4909      	ldr	r1, [pc, #36]	; (196b8 <radio_disable+0x2c>)
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   19694:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   19696:	f44f 6510 	mov.w	r5, #2304	; 0x900
   1969a:	2400      	movs	r4, #0
   1969c:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   196a0:	6053      	str	r3, [r2, #4]
   196a2:	60d3      	str	r3, [r2, #12]
   196a4:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
}
   196a8:	bc30      	pop	{r4, r5}
   196aa:	600b      	str	r3, [r1, #0]
   196ac:	4770      	bx	lr
   196ae:	bf00      	nop
   196b0:	4001f000 	.word	0x4001f000
   196b4:	40001000 	.word	0x40001000
   196b8:	40001010 	.word	0x40001010

000196bc <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   196bc:	4b04      	ldr	r3, [pc, #16]	; (196d0 <radio_status_reset+0x14>)
   196be:	2200      	movs	r2, #0
   196c0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   196c4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   196c8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   196cc:	4770      	bx	lr
   196ce:	bf00      	nop
   196d0:	40001000 	.word	0x40001000

000196d4 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   196d4:	4b03      	ldr	r3, [pc, #12]	; (196e4 <radio_is_ready+0x10>)
   196d6:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   196da:	3800      	subs	r0, #0
   196dc:	bf18      	it	ne
   196de:	2001      	movne	r0, #1
   196e0:	4770      	bx	lr
   196e2:	bf00      	nop
   196e4:	40001000 	.word	0x40001000

000196e8 <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   196e8:	4b03      	ldr	r3, [pc, #12]	; (196f8 <radio_is_done+0x10>)
   196ea:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   196ee:	3800      	subs	r0, #0
   196f0:	bf18      	it	ne
   196f2:	2001      	movne	r0, #1
   196f4:	4770      	bx	lr
   196f6:	bf00      	nop
   196f8:	40001000 	.word	0x40001000

000196fc <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
   196fc:	4b03      	ldr	r3, [pc, #12]	; (1970c <radio_is_idle+0x10>)
   196fe:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   19702:	fab0 f080 	clz	r0, r0
   19706:	0940      	lsrs	r0, r0, #5
   19708:	4770      	bx	lr
   1970a:	bf00      	nop
   1970c:	40001000 	.word	0x40001000

00019710 <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
   19710:	4b04      	ldr	r3, [pc, #16]	; (19724 <radio_crc_configure+0x14>)
   19712:	f240 1203 	movw	r2, #259	; 0x103
   19716:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
   1971a:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   1971e:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   19722:	4770      	bx	lr
   19724:	40001000 	.word	0x40001000

00019728 <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
   19728:	4b03      	ldr	r3, [pc, #12]	; (19738 <radio_crc_is_valid+0x10>)
   1972a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1972e:	3800      	subs	r0, #0
   19730:	bf18      	it	ne
   19732:	2001      	movne	r0, #1
   19734:	4770      	bx	lr
   19736:	bf00      	nop
   19738:	40001000 	.word	0x40001000

0001973c <radio_pkt_empty_get>:
}
   1973c:	4800      	ldr	r0, [pc, #0]	; (19740 <radio_pkt_empty_get+0x4>)
   1973e:	4770      	bx	lr
   19740:	200026c4 	.word	0x200026c4

00019744 <radio_pkt_scratch_get>:
}
   19744:	4800      	ldr	r0, [pc, #0]	; (19748 <radio_pkt_scratch_get+0x4>)
   19746:	4770      	bx	lr
   19748:	200026c8 	.word	0x200026c8

0001974c <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1974c:	4b05      	ldr	r3, [pc, #20]	; (19764 <radio_switch_complete_and_rx+0x18>)
{
   1974e:	b410      	push	{r4}
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
   19750:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   19752:	2403      	movs	r4, #3
{
   19754:	4602      	mov	r2, r0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   19756:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
   1975a:	4608      	mov	r0, r1
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1975c:	bc10      	pop	{r4}
	sw_switch(0, 0, 0, phy_rx, 0);
   1975e:	f7ff be29 	b.w	193b4 <sw_switch.isra.0>
   19762:	bf00      	nop
   19764:	40001000 	.word	0x40001000

00019768 <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   19768:	4b04      	ldr	r3, [pc, #16]	; (1977c <radio_switch_complete_and_tx+0x14>)
{
   1976a:	b410      	push	{r4}
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1976c:	2403      	movs	r4, #3
{
   1976e:	4601      	mov	r1, r0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   19770:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   19774:	2001      	movs	r0, #1
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   19776:	bc10      	pop	{r4}
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   19778:	f7ff be1c 	b.w	193b4 <sw_switch.isra.0>
   1977c:	40001000 	.word	0x40001000

00019780 <radio_switch_complete_and_disable>:

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   19780:	4904      	ldr	r1, [pc, #16]	; (19794 <radio_switch_complete_and_disable+0x14>)
    p_reg->CHENCLR = mask;
   19782:	4b05      	ldr	r3, [pc, #20]	; (19798 <radio_switch_complete_and_disable+0x18>)
   19784:	2003      	movs	r0, #3
   19786:	f44f 6210 	mov.w	r2, #2304	; 0x900
   1978a:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   1978e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   19792:	4770      	bx	lr
   19794:	40001000 	.word	0x40001000
   19798:	4001f000 	.word	0x4001f000

0001979c <radio_rssi_status_reset>:
	return NRF_RADIO->RSSISAMPLE;
}

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   1979c:	4b02      	ldr	r3, [pc, #8]	; (197a8 <radio_rssi_status_reset+0xc>)
   1979e:	2200      	movs	r2, #0
   197a0:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   197a4:	4770      	bx	lr
   197a6:	bf00      	nop
   197a8:	40001000 	.word	0x40001000

000197ac <radio_rssi_is_ready>:

uint32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   197ac:	4b03      	ldr	r3, [pc, #12]	; (197bc <radio_rssi_is_ready+0x10>)
   197ae:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   197b2:	3800      	subs	r0, #0
   197b4:	bf18      	it	ne
   197b6:	2001      	movne	r0, #1
   197b8:	4770      	bx	lr
   197ba:	bf00      	nop
   197bc:	40001000 	.word	0x40001000

000197c0 <radio_filter_configure>:

void radio_filter_configure(uint8_t bitmask_enable, uint8_t bitmask_addr_type,
			    uint8_t *bdaddr)
{
   197c0:	b430      	push	{r4, r5}
   197c2:	2400      	movs	r4, #0
	uint8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   197c4:	00a3      	lsls	r3, r4, #2
   197c6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   197ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
			((uint32_t)bdaddr[2] << 16) |
			((uint32_t)bdaddr[1] << 8) |
   197ce:	6815      	ldr	r5, [r2, #0]
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   197d0:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((uint32_t)bdaddr[5] << 8) | bdaddr[4];
   197d4:	3401      	adds	r4, #1
   197d6:	8895      	ldrh	r5, [r2, #4]
   197d8:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
   197dc:	2c08      	cmp	r4, #8
		bdaddr += 6;
   197de:	f102 0206 	add.w	r2, r2, #6
	for (index = 0U; index < 8; index++) {
   197e2:	d1ef      	bne.n	197c4 <radio_filter_configure+0x4>
	}

	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   197e4:	4b03      	ldr	r3, [pc, #12]	; (197f4 <radio_filter_configure+0x34>)
   197e6:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
}
   197ea:	bc30      	pop	{r4, r5}
	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   197ec:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   197f0:	4770      	bx	lr
   197f2:	bf00      	nop
   197f4:	40001000 	.word	0x40001000

000197f8 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   197f8:	4a03      	ldr	r2, [pc, #12]	; (19808 <radio_filter_disable+0x10>)
   197fa:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   197fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   19802:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   19806:	4770      	bx	lr
   19808:	40001000 	.word	0x40001000

0001980c <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   1980c:	4b02      	ldr	r3, [pc, #8]	; (19818 <radio_filter_status_reset+0xc>)
   1980e:	2200      	movs	r2, #0
   19810:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   19814:	4770      	bx	lr
   19816:	bf00      	nop
   19818:	40001000 	.word	0x40001000

0001981c <radio_filter_has_match>:

uint32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   1981c:	4b03      	ldr	r3, [pc, #12]	; (1982c <radio_filter_has_match+0x10>)
   1981e:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   19822:	3800      	subs	r0, #0
   19824:	bf18      	it	ne
   19826:	2001      	movne	r0, #1
   19828:	4770      	bx	lr
   1982a:	bf00      	nop
   1982c:	40001000 	.word	0x40001000

00019830 <radio_filter_match_get>:

uint32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   19830:	4b01      	ldr	r3, [pc, #4]	; (19838 <radio_filter_match_get+0x8>)
   19832:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   19836:	4770      	bx	lr
   19838:	40001000 	.word	0x40001000

0001983c <radio_tmr_status_reset>:
    p_reg->EVTENCLR = mask;
   1983c:	4904      	ldr	r1, [pc, #16]	; (19850 <radio_tmr_status_reset+0x14>)
   1983e:	4b05      	ldr	r3, [pc, #20]	; (19854 <radio_tmr_status_reset+0x18>)
   19840:	4a05      	ldr	r2, [pc, #20]	; (19858 <radio_tmr_status_reset+0x1c>)
   19842:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   19846:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
   1984a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			BIT(HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI) |
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   1984e:	4770      	bx	lr
   19850:	4000b000 	.word	0x4000b000
   19854:	4001f000 	.word	0x4001f000
   19858:	0e7000c0 	.word	0x0e7000c0

0001985c <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(uint32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   1985c:	4b03      	ldr	r3, [pc, #12]	; (1986c <radio_tmr_tifs_set+0x10>)
   1985e:	4a04      	ldr	r2, [pc, #16]	; (19870 <radio_tmr_tifs_set+0x14>)
   19860:	781b      	ldrb	r3, [r3, #0]
   19862:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   19866:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1986a:	4770      	bx	lr
   1986c:	200031c4 	.word	0x200031c4
   19870:	40009000 	.word	0x40009000

00019874 <radio_tmr_start>:

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
   19874:	b4f0      	push	{r4, r5, r6, r7}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   19876:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   1987a:	4d31      	ldr	r5, [pc, #196]	; (19940 <radio_tmr_start+0xcc>)
   1987c:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   19880:	42ab      	cmp	r3, r5
{
   19882:	4604      	mov	r4, r0
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   19884:	d906      	bls.n	19894 <radio_tmr_start+0x20>
		ticks_start--;
		remainder += 30517578UL;
   19886:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
   1988a:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
   1988e:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
		ticks_start--;
   19892:	3901      	subs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19894:	4d2b      	ldr	r5, [pc, #172]	; (19944 <radio_tmr_start+0xd0>)
	}
	remainder /= 1000000UL;

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   19896:	4b2c      	ldr	r3, [pc, #176]	; (19948 <radio_tmr_start+0xd4>)
	remainder /= 1000000UL;
   19898:	482c      	ldr	r0, [pc, #176]	; (1994c <radio_tmr_start+0xd8>)
   1989a:	2601      	movs	r6, #1
   1989c:	602e      	str	r6, [r5, #0]
	EVENT_TIMER->MODE = 0;
   1989e:	2600      	movs	r6, #0
   198a0:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
    p_reg->CC[ch] = cc_val;
   198a4:	4d2a      	ldr	r5, [pc, #168]	; (19950 <radio_tmr_start+0xdc>)
	remainder /= 1000000UL;
   198a6:	fba0 0202 	umull	r0, r2, r0, r2
	EVENT_TIMER->PRESCALER = 4;
   198aa:	2604      	movs	r6, #4
   198ac:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
	remainder /= 1000000UL;
   198b0:	0c90      	lsrs	r0, r2, #18
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   198b2:	2602      	movs	r6, #2
   198b4:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
    p_reg->CH[(uint32_t) channel].EEP = eep;
   198b8:	4a26      	ldr	r2, [pc, #152]	; (19954 <radio_tmr_start+0xe0>)
    p_reg->CC[cc_channel] = cc_value;
   198ba:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   198be:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   198c2:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   198c6:	f8c5 1344 	str.w	r1, [r5, #836]	; 0x344
   198ca:	4923      	ldr	r1, [pc, #140]	; (19958 <radio_tmr_start+0xe4>)
   198cc:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    p_reg->CHENSET = mask;
   198d0:	2140      	movs	r1, #64	; 0x40
    p_reg->CH[(uint32_t) channel].TEP = tep;
   198d2:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    p_reg->CHENSET = mask;
   198d6:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
	nrf_ppi_channels_disable(
   198da:	b354      	cbz	r4, 19932 <radio_tmr_start+0xbe>
    p_reg->CHENCLR = mask;
   198dc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   198e0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_ppi_channels_enable(
   198e4:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
    p_reg->CHENSET = mask;
   198e8:	4b1a      	ldr	r3, [pc, #104]	; (19954 <radio_tmr_start+0xe0>)
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   198ea:	4a1c      	ldr	r2, [pc, #112]	; (1995c <radio_tmr_start+0xe8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   198ec:	491c      	ldr	r1, [pc, #112]	; (19960 <radio_tmr_start+0xec>)
   198ee:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
   198f2:	2500      	movs	r5, #0
   198f4:	2401      	movs	r4, #1
	SW_SWITCH_TIMER->PRESCALER = 4;
   198f6:	2604      	movs	r6, #4
   198f8:	600c      	str	r4, [r1, #0]
	SW_SWITCH_TIMER->MODE = 0;
   198fa:	f8c2 5504 	str.w	r5, [r2, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   198fe:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   19902:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508
   19906:	6014      	str	r4, [r2, #0]
    p_reg->CH[(uint32_t) channel].TEP = tep;
   19908:	f502 32b0 	add.w	r2, r2, #90112	; 0x16000
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1990c:	4f15      	ldr	r7, [pc, #84]	; (19964 <radio_tmr_start+0xf0>)
   1990e:	4e16      	ldr	r6, [pc, #88]	; (19968 <radio_tmr_start+0xf4>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   19910:	4d16      	ldr	r5, [pc, #88]	; (1996c <radio_tmr_start+0xf8>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   19912:	4c17      	ldr	r4, [pc, #92]	; (19970 <radio_tmr_start+0xfc>)
   19914:	f8c3 7550 	str.w	r7, [r3, #1360]	; 0x550
    p_reg->CH[(uint32_t) channel].TEP = tep;
   19918:	320c      	adds	r2, #12
   1991a:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1991e:	f8c3 6558 	str.w	r6, [r3, #1368]	; 0x558
    p_reg->CH[(uint32_t) channel].TEP = tep;
   19922:	f8c3 555c 	str.w	r5, [r3, #1372]	; 0x55c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   19926:	f8c3 4560 	str.w	r4, [r3, #1376]	; 0x560
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   1992a:	bcf0      	pop	{r4, r5, r6, r7}
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1992c:	f8c3 2564 	str.w	r2, [r3, #1380]	; 0x564
   19930:	4770      	bx	lr
    p_reg->CHENCLR = mask;
   19932:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   19936:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   1993a:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
   1993e:	e7d3      	b.n	198e8 <radio_tmr_start+0x74>
   19940:	7ff0bdbf 	.word	0x7ff0bdbf
   19944:	4000800c 	.word	0x4000800c
   19948:	40008000 	.word	0x40008000
   1994c:	431bde83 	.word	0x431bde83
   19950:	4000b000 	.word	0x4000b000
   19954:	4001f000 	.word	0x4001f000
   19958:	4000b148 	.word	0x4000b148
   1995c:	40009000 	.word	0x40009000
   19960:	4000900c 	.word	0x4000900c
   19964:	4000110c 	.word	0x4000110c
   19968:	40009140 	.word	0x40009140
   1996c:	4001f004 	.word	0x4001f004
   19970:	40009144 	.word	0x40009144

00019974 <radio_tmr_start_get>:
    return p_reg->CC[ch];
   19974:	4b01      	ldr	r3, [pc, #4]	; (1997c <radio_tmr_start_get+0x8>)
   19976:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

uint32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   1997a:	4770      	bx	lr
   1997c:	4000b000 	.word	0x4000b000

00019980 <radio_tmr_stop>:

void radio_tmr_stop(void)
{
   19980:	b410      	push	{r4}
   19982:	4805      	ldr	r0, [pc, #20]	; (19998 <radio_tmr_stop+0x18>)
   19984:	4c05      	ldr	r4, [pc, #20]	; (1999c <radio_tmr_stop+0x1c>)
   19986:	4906      	ldr	r1, [pc, #24]	; (199a0 <radio_tmr_stop+0x20>)
   19988:	4a06      	ldr	r2, [pc, #24]	; (199a4 <radio_tmr_stop+0x24>)
   1998a:	2301      	movs	r3, #1
   1998c:	6023      	str	r3, [r4, #0]
   1998e:	6003      	str	r3, [r0, #0]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   19990:	bc10      	pop	{r4}
   19992:	600b      	str	r3, [r1, #0]
   19994:	6013      	str	r3, [r2, #0]
   19996:	4770      	bx	lr
   19998:	40008010 	.word	0x40008010
   1999c:	40008004 	.word	0x40008004
   199a0:	40009004 	.word	0x40009004
   199a4:	40009010 	.word	0x40009010

000199a8 <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   199a8:	4904      	ldr	r1, [pc, #16]	; (199bc <radio_tmr_hcto_configure+0x14>)
    p_reg->CHENSET = mask;
   199aa:	4b05      	ldr	r3, [pc, #20]	; (199c0 <radio_tmr_hcto_configure+0x18>)
   199ac:	f8c1 0544 	str.w	r0, [r1, #1348]	; 0x544
   199b0:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   199b4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   199b8:	4770      	bx	lr
   199ba:	bf00      	nop
   199bc:	40008000 	.word	0x40008000
   199c0:	4001f000 	.word	0x4001f000

000199c4 <radio_tmr_aa_capture>:
    p_reg->CH[(uint32_t) channel].EEP = eep;
   199c4:	4b05      	ldr	r3, [pc, #20]	; (199dc <radio_tmr_aa_capture+0x18>)
   199c6:	4806      	ldr	r0, [pc, #24]	; (199e0 <radio_tmr_aa_capture+0x1c>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   199c8:	4906      	ldr	r1, [pc, #24]	; (199e4 <radio_tmr_aa_capture+0x20>)
    p_reg->CHENSET = mask;
   199ca:	4a07      	ldr	r2, [pc, #28]	; (199e8 <radio_tmr_aa_capture+0x24>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   199cc:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    p_reg->CH[(uint32_t) channel].TEP = tep;
   199d0:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
    p_reg->CHENSET = mask;
   199d4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_ready_time_capture_ppi_config();
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_READY_TIME_CAPTURE_PPI) |
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}
   199d8:	4770      	bx	lr
   199da:	bf00      	nop
   199dc:	4001f000 	.word	0x4001f000
   199e0:	40001100 	.word	0x40001100
   199e4:	40008040 	.word	0x40008040
   199e8:	04000080 	.word	0x04000080

000199ec <radio_tmr_aa_get>:

uint32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   199ec:	4b01      	ldr	r3, [pc, #4]	; (199f4 <radio_tmr_aa_get+0x8>)
   199ee:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   199f2:	4770      	bx	lr
   199f4:	40008000 	.word	0x40008000

000199f8 <radio_tmr_aa_save>:

static uint32_t radio_tmr_aa;

void radio_tmr_aa_save(uint32_t aa)
{
	radio_tmr_aa = aa;
   199f8:	4b01      	ldr	r3, [pc, #4]	; (19a00 <radio_tmr_aa_save+0x8>)
   199fa:	6018      	str	r0, [r3, #0]
}
   199fc:	4770      	bx	lr
   199fe:	bf00      	nop
   19a00:	200027d4 	.word	0x200027d4

00019a04 <radio_tmr_aa_restore>:

uint32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
   19a04:	4b01      	ldr	r3, [pc, #4]	; (19a0c <radio_tmr_aa_restore+0x8>)
}
   19a06:	6818      	ldr	r0, [r3, #0]
   19a08:	4770      	bx	lr
   19a0a:	bf00      	nop
   19a0c:	200027d4 	.word	0x200027d4

00019a10 <radio_tmr_ready_get>:

uint32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   19a10:	4b01      	ldr	r3, [pc, #4]	; (19a18 <radio_tmr_ready_get+0x8>)
   19a12:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   19a16:	4770      	bx	lr
   19a18:	40008000 	.word	0x40008000

00019a1c <radio_tmr_end_capture>:
   19a1c:	4b02      	ldr	r3, [pc, #8]	; (19a28 <radio_tmr_end_capture+0xc>)
   19a1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   19a22:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504

void radio_tmr_end_capture(void)
{
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
}
   19a26:	4770      	bx	lr
   19a28:	4001f000 	.word	0x4001f000

00019a2c <radio_tmr_end_get>:
uint32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   19a2c:	4b01      	ldr	r3, [pc, #4]	; (19a34 <radio_tmr_end_get+0x8>)
   19a2e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   19a32:	4770      	bx	lr
   19a34:	40008000 	.word	0x40008000

00019a38 <radio_tmr_tifs_base_get>:
   19a38:	4b01      	ldr	r3, [pc, #4]	; (19a40 <radio_tmr_tifs_base_get+0x8>)
   19a3a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   19a3e:	4770      	bx	lr
   19a40:	40008000 	.word	0x40008000

00019a44 <radio_ccm_rx_pkt_set>:
#endif /* CONFIG_BT_CTLR_GPIO_PA_PIN || CONFIG_BT_CTLR_GPIO_LNA_PIN */

static uint8_t MALIGN(4) _ccm_scratch[(HAL_RADIO_PDU_LEN_MAX - 4) + 16];

void *radio_ccm_rx_pkt_set(struct ccm *ccm, uint8_t phy, void *pkt)
{
   19a44:	b4f0      	push	{r4, r5, r6, r7}
			 CCM_MODE_DATARATE_Pos) &
			CCM_MODE_DATARATE_Msk;
		break;

	case PHY_2M:
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   19a46:	f8df c074 	ldr.w	ip, [pc, #116]	; 19abc <radio_ccm_rx_pkt_set+0x78>
   19a4a:	4d17      	ldr	r5, [pc, #92]	; (19aa8 <radio_ccm_rx_pkt_set+0x64>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   19a4c:	4b17      	ldr	r3, [pc, #92]	; (19aac <radio_ccm_rx_pkt_set+0x68>)
	}

#if !defined(CONFIG_SOC_COMPATIBLE_NRF52832) && \
	(!defined(CONFIG_BT_CTLR_DATA_LENGTH_MAX) || \
	 (CONFIG_BT_CTLR_DATA_LENGTH_MAX < ((HAL_RADIO_PDU_LEN_MAX) - 4)))
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   19a4e:	4f18      	ldr	r7, [pc, #96]	; (19ab0 <radio_ccm_rx_pkt_set+0x6c>)
#endif
#endif /* !CONFIG_SOC_SERIES_NRF51X */

	NRF_CCM->MODE = mode;
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   19a50:	4e18      	ldr	r6, [pc, #96]	; (19ab4 <radio_ccm_rx_pkt_set+0x70>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   19a52:	2400      	movs	r4, #0
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   19a54:	2902      	cmp	r1, #2
   19a56:	bf08      	it	eq
   19a58:	4665      	moveq	r5, ip
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   19a5a:	2102      	movs	r1, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   19a5c:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   19a60:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   19a64:	f8d7 1518 	ldr.w	r1, [r7, #1304]	; 0x518
   19a68:	f507 37f0 	add.w	r7, r7, #122880	; 0x1e000
   19a6c:	b2c9      	uxtb	r1, r1
	NRF_CCM->MAXPACKETSIZE = max_len;
   19a6e:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
	NRF_CCM->MODE = mode;
   19a72:	f8c3 5504 	str.w	r5, [r3, #1284]	; 0x504
   19a76:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   19a7a:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->OUTPTR = (uint32_t)pkt;
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   19a7e:	4d0e      	ldr	r5, [pc, #56]	; (19ab8 <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   19a80:	f8c3 650c 	str.w	r6, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (uint32_t)pkt;
   19a84:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                            nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19a88:	2201      	movs	r2, #1
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   19a8a:	f8c3 5514 	str.w	r5, [r3, #1300]	; 0x514
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_CRYPT_PPI));

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   19a8e:	4630      	mov	r0, r6
	NRF_CCM->SHORTS = 0;
   19a90:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   19a94:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   19a98:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   19a9c:	f8c7 1504 	str.w	r1, [r7, #1284]	; 0x504
}
   19aa0:	bcf0      	pop	{r4, r5, r6, r7}
   19aa2:	601a      	str	r2, [r3, #0]
   19aa4:	4770      	bx	lr
   19aa6:	bf00      	nop
   19aa8:	01000001 	.word	0x01000001
   19aac:	4000f000 	.word	0x4000f000
   19ab0:	40001000 	.word	0x40001000
   19ab4:	200026c8 	.word	0x200026c8
   19ab8:	200025b8 	.word	0x200025b8
   19abc:	01010001 	.word	0x01010001

00019ac0 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
   19ac0:	b470      	push	{r4, r5, r6}
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   19ac2:	4b10      	ldr	r3, [pc, #64]	; (19b04 <radio_ccm_tx_pkt_set+0x44>)
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)pkt;
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   19ac4:	4d10      	ldr	r5, [pc, #64]	; (19b08 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->MODE = mode;
   19ac6:	4e11      	ldr	r6, [pc, #68]	; (19b0c <radio_ccm_tx_pkt_set+0x4c>)
{
   19ac8:	4604      	mov	r4, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   19aca:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   19acc:	2002      	movs	r0, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   19ace:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   19ad2:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
	NRF_CCM->MODE = mode;
   19ad6:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   19ada:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   19ade:	4e0c      	ldr	r6, [pc, #48]	; (19b10 <radio_ccm_tx_pkt_set+0x50>)
	NRF_CCM->INPTR = (uint32_t)pkt;
   19ae0:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   19ae4:	2401      	movs	r4, #1
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   19ae6:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
	NRF_CCM->EVENTS_ERROR = 0;

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   19aea:	4628      	mov	r0, r5
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   19aec:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   19af0:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   19af4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   19af8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   19afc:	601c      	str	r4, [r3, #0]
}
   19afe:	bc70      	pop	{r4, r5, r6}
   19b00:	4770      	bx	lr
   19b02:	bf00      	nop
   19b04:	4000f000 	.word	0x4000f000
   19b08:	200026c8 	.word	0x200026c8
   19b0c:	01010000 	.word	0x01010000
   19b10:	200025b8 	.word	0x200025b8

00019b14 <radio_ccm_is_done>:
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   19b14:	4a0e      	ldr	r2, [pc, #56]	; (19b50 <radio_ccm_is_done+0x3c>)
   19b16:	2302      	movs	r3, #2
   19b18:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

uint32_t radio_ccm_is_done(void)
{
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   19b1c:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   19b20:	b933      	cbnz	r3, 19b30 <radio_ccm_is_done+0x1c>
		__WFE();
   19b22:	bf20      	wfe
		__SEV();
   19b24:	bf40      	sev
		__WFE();
   19b26:	bf20      	wfe
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   19b28:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   19b2c:	2b00      	cmp	r3, #0
   19b2e:	d0f8      	beq.n	19b22 <radio_ccm_is_done+0xe>
}

NRF_STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   19b30:	4b07      	ldr	r3, [pc, #28]	; (19b50 <radio_ccm_is_done+0x3c>)
   19b32:	4a08      	ldr	r2, [pc, #32]	; (19b54 <radio_ccm_is_done+0x40>)
   19b34:	2002      	movs	r0, #2
   19b36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   19b3a:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   19b3e:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(nrfx_get_irq_number(NRF_CCM));

	return (NRF_CCM->EVENTS_ERROR == 0);
   19b42:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   19b46:	fab0 f080 	clz	r0, r0
   19b4a:	0940      	lsrs	r0, r0, #5
   19b4c:	4770      	bx	lr
   19b4e:	bf00      	nop
   19b50:	4000f000 	.word	0x4000f000
   19b54:	e000e100 	.word	0xe000e100

00019b58 <radio_ccm_mic_is_valid>:

uint32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   19b58:	4b03      	ldr	r3, [pc, #12]	; (19b68 <radio_ccm_mic_is_valid+0x10>)
   19b5a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   19b5e:	3800      	subs	r0, #0
   19b60:	bf18      	it	ne
   19b62:	2001      	movne	r0, #1
   19b64:	4770      	bx	lr
   19b66:	bf00      	nop
   19b68:	4000f000 	.word	0x4000f000

00019b6c <radio_ar_configure>:
	if (IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) &&
	    ((flags & BIT(1)) || (!(flags & BIT(0)) && (phy > PHY_1M)))) {
		addrptr = NRF_RADIO->PACKETPTR + 1;
		bcc = 80;
	} else {
		addrptr = NRF_RADIO->PACKETPTR - 1;
   19b6c:	4a14      	ldr	r2, [pc, #80]	; (19bc0 <radio_ar_configure+0x54>)
	/* For Coded PHY adjust for CI and TERM1 */
	if (IS_ENABLED(CONFIG_BT_CTLR_PHY_CODED) && (phy == PHY_CODED)) {
		bcc += 5;
	}

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   19b6e:	4b15      	ldr	r3, [pc, #84]	; (19bc4 <radio_ar_configure+0x58>)
{
   19b70:	b470      	push	{r4, r5, r6}
		addrptr = NRF_RADIO->PACKETPTR - 1;
   19b72:	f8d2 5504 	ldr.w	r5, [r2, #1284]	; 0x504
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (uint32_t)irk;
	NRF_AAR->ADDRPTR = addrptr;
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   19b76:	4e14      	ldr	r6, [pc, #80]	; (19bc8 <radio_ar_configure+0x5c>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   19b78:	2403      	movs	r4, #3
   19b7a:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
		addrptr = NRF_RADIO->PACKETPTR - 1;
   19b7e:	3d01      	subs	r5, #1
	NRF_AAR->NIRK = nirk;
   19b80:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504

	NRF_AAR->EVENTS_END = 0;
   19b84:	2400      	movs	r4, #0
    p_reg->BCC = radio_bcc;
   19b86:	2040      	movs	r0, #64	; 0x40
	NRF_AAR->IRKPTR = (uint32_t)irk;
   19b88:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
	NRF_AAR->ADDRPTR = addrptr;
   19b8c:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   19b90:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
	NRF_AAR->EVENTS_END = 0;
   19b94:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   19b98:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   19b9c:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   19ba0:	f8c2 0560 	str.w	r0, [r2, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   19ba4:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   19ba8:	4908      	ldr	r1, [pc, #32]	; (19bcc <radio_ar_configure+0x60>)
   19baa:	4303      	orrs	r3, r0
   19bac:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   19bb0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	NRF_RADIO->EVENTS_BCMATCH = 0;
   19bb4:	f8c2 4128 	str.w	r4, [r2, #296]	; 0x128
	radio_bc_configure(bcc);
	radio_bc_status_reset();

	hal_trigger_aar_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}
   19bb8:	bc70      	pop	{r4, r5, r6}
   19bba:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
   19bbe:	4770      	bx	lr
   19bc0:	40001000 	.word	0x40001000
   19bc4:	4000f000 	.word	0x4000f000
   19bc8:	200025b4 	.word	0x200025b4
   19bcc:	4001f000 	.word	0x4001f000

00019bd0 <radio_ar_match_get>:

uint32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   19bd0:	4b01      	ldr	r3, [pc, #4]	; (19bd8 <radio_ar_match_get+0x8>)
   19bd2:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   19bd6:	4770      	bx	lr
   19bd8:	4000f000 	.word	0x4000f000

00019bdc <radio_ar_status_reset>:

void radio_ar_status_reset(void)
{
   19bdc:	b410      	push	{r4}
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   19bde:	4807      	ldr	r0, [pc, #28]	; (19bfc <radio_ar_status_reset+0x20>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   19be0:	4c07      	ldr	r4, [pc, #28]	; (19c00 <radio_ar_status_reset+0x24>)
    p_reg->CHENCLR = mask;
   19be2:	4a08      	ldr	r2, [pc, #32]	; (19c04 <radio_ar_status_reset+0x28>)
   19be4:	2300      	movs	r3, #0
   19be6:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   19bea:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   19bee:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;

	hal_radio_nrf_ppi_channels_disable(BIT(HAL_TRIGGER_AAR_PPI));
}
   19bf2:	bc10      	pop	{r4}
   19bf4:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
   19bf8:	4770      	bx	lr
   19bfa:	bf00      	nop
   19bfc:	4000f000 	.word	0x4000f000
   19c00:	40001000 	.word	0x40001000
   19c04:	4001f000 	.word	0x4001f000

00019c08 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   19c08:	4b08      	ldr	r3, [pc, #32]	; (19c2c <radio_ar_has_match+0x24>)
   19c0a:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

uint32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   19c0e:	b160      	cbz	r0, 19c2a <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   19c10:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   19c14:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   19c18:	b138      	cbz	r0, 19c2a <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   19c1a:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   19c1e:	b120      	cbz	r0, 19c2a <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   19c20:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   19c24:	fab0 f080 	clz	r0, r0
   19c28:	0940      	lsrs	r0, r0, #5
}
   19c2a:	4770      	bx	lr
   19c2c:	40001000 	.word	0x40001000

00019c30 <mayfly_enable_cb>:

void mayfly_enable_cb(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   19c30:	2902      	cmp	r1, #2
{
   19c32:	b510      	push	{r4, lr}
   19c34:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   19c36:	d00b      	beq.n	19c50 <mayfly_enable_cb+0x20>
   19c38:	4a0a      	ldr	r2, [pc, #40]	; (19c64 <mayfly_enable_cb+0x34>)
   19c3a:	490b      	ldr	r1, [pc, #44]	; (19c68 <mayfly_enable_cb+0x38>)
   19c3c:	480b      	ldr	r0, [pc, #44]	; (19c6c <mayfly_enable_cb+0x3c>)
   19c3e:	231e      	movs	r3, #30
   19c40:	f004 fba0 	bl	1e384 <printk>
   19c44:	4040      	eors	r0, r0
   19c46:	f380 8811 	msr	BASEPRI, r0
   19c4a:	f04f 0003 	mov.w	r0, #3
   19c4e:	df02      	svc	2

	if (enable) {
		irq_enable(HAL_SWI_JOB_IRQ);
   19c50:	200b      	movs	r0, #11
	if (enable) {
   19c52:	b11c      	cbz	r4, 19c5c <mayfly_enable_cb+0x2c>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
   19c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(HAL_SWI_JOB_IRQ);
   19c58:	f7eb bc5c 	b.w	5514 <arch_irq_enable>
}
   19c5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(HAL_SWI_JOB_IRQ);
   19c60:	f7eb bc68 	b.w	5534 <arch_irq_disable>
   19c64:	00025078 	.word	0x00025078
   19c68:	000250c8 	.word	0x000250c8
   19c6c:	00024334 	.word	0x00024334

00019c70 <mayfly_is_enabled>:

uint32_t mayfly_is_enabled(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   19c70:	b129      	cbz	r1, 19c7e <mayfly_is_enabled+0xe>
   19c72:	3901      	subs	r1, #1
   19c74:	2901      	cmp	r1, #1
   19c76:	d805      	bhi.n	19c84 <mayfly_is_enabled+0x14>
	case MAYFLY_CALL_ID_LLL:
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);

	case MAYFLY_CALL_ID_WORKER:
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   19c78:	200b      	movs	r0, #11
   19c7a:	f7eb bc6f 	b.w	555c <arch_irq_is_enabled>
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   19c7e:	2018      	movs	r0, #24
   19c80:	f7eb bc6c 	b.w	555c <arch_irq_is_enabled>
{
   19c84:	b508      	push	{r3, lr}

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   19c86:	4a07      	ldr	r2, [pc, #28]	; (19ca4 <mayfly_is_enabled+0x34>)
   19c88:	4907      	ldr	r1, [pc, #28]	; (19ca8 <mayfly_is_enabled+0x38>)
   19c8a:	4808      	ldr	r0, [pc, #32]	; (19cac <mayfly_is_enabled+0x3c>)
   19c8c:	2336      	movs	r3, #54	; 0x36
   19c8e:	f004 fb79 	bl	1e384 <printk>
   19c92:	4040      	eors	r0, r0
   19c94:	f380 8811 	msr	BASEPRI, r0
   19c98:	f04f 0003 	mov.w	r0, #3
   19c9c:	df02      	svc	2
		break;
	}

	return 0;
}
   19c9e:	2000      	movs	r0, #0
   19ca0:	bd08      	pop	{r3, pc}
   19ca2:	bf00      	nop
   19ca4:	00025078 	.word	0x00025078
   19ca8:	000243a4 	.word	0x000243a4
   19cac:	00024334 	.word	0x00024334

00019cb0 <mayfly_prio_is_equal>:
#endif
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   19cb0:	4288      	cmp	r0, r1
   19cb2:	d00b      	beq.n	19ccc <mayfly_prio_is_equal+0x1c>
	return (caller_id == callee_id) ||
   19cb4:	2801      	cmp	r0, #1
   19cb6:	d003      	beq.n	19cc0 <mayfly_prio_is_equal+0x10>
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   19cb8:	2802      	cmp	r0, #2
   19cba:	d009      	beq.n	19cd0 <mayfly_prio_is_equal+0x20>
   19cbc:	2000      	movs	r0, #0
#endif
	       0;
}
   19cbe:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   19cc0:	f1a1 0002 	sub.w	r0, r1, #2
   19cc4:	fab0 f080 	clz	r0, r0
   19cc8:	0940      	lsrs	r0, r0, #5
   19cca:	4770      	bx	lr
   19ccc:	2001      	movs	r0, #1
   19cce:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   19cd0:	f1a1 0001 	sub.w	r0, r1, #1
   19cd4:	fab0 f080 	clz	r0, r0
   19cd8:	0940      	lsrs	r0, r0, #5
   19cda:	4770      	bx	lr

00019cdc <mayfly_pend>:

void mayfly_pend(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   19cdc:	2901      	cmp	r1, #1
{
   19cde:	b508      	push	{r3, lr}
	switch (callee_id) {
   19ce0:	d00f      	beq.n	19d02 <mayfly_pend+0x26>
   19ce2:	2902      	cmp	r1, #2
   19ce4:	d00d      	beq.n	19d02 <mayfly_pend+0x26>
   19ce6:	b191      	cbz	r1, 19d0e <mayfly_pend+0x32>
	case MAYFLY_CALL_ID_JOB:
		hal_swi_job_pend();
		break;

	default:
		LL_ASSERT(0);
   19ce8:	4a0c      	ldr	r2, [pc, #48]	; (19d1c <mayfly_pend+0x40>)
   19cea:	490d      	ldr	r1, [pc, #52]	; (19d20 <mayfly_pend+0x44>)
   19cec:	480d      	ldr	r0, [pc, #52]	; (19d24 <mayfly_pend+0x48>)
   19cee:	2367      	movs	r3, #103	; 0x67
   19cf0:	f004 fb48 	bl	1e384 <printk>
   19cf4:	4040      	eors	r0, r0
   19cf6:	f380 8811 	msr	BASEPRI, r0
   19cfa:	f04f 0003 	mov.w	r0, #3
   19cfe:	df02      	svc	2
		break;
	}
}
   19d00:	bd08      	pop	{r3, pc}
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   19d02:	4b09      	ldr	r3, [pc, #36]	; (19d28 <mayfly_pend+0x4c>)
   19d04:	f44f 6200 	mov.w	r2, #2048	; 0x800
   19d08:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   19d0c:	bd08      	pop	{r3, pc}
   19d0e:	4b06      	ldr	r3, [pc, #24]	; (19d28 <mayfly_pend+0x4c>)
   19d10:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   19d14:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   19d18:	bd08      	pop	{r3, pc}
   19d1a:	bf00      	nop
   19d1c:	00025078 	.word	0x00025078
   19d20:	000243a4 	.word	0x000243a4
   19d24:	00024334 	.word	0x00024334
   19d28:	e000e100 	.word	0xe000e100

00019d2c <hal_ticker_instance0_caller_id_get>:

uint8_t hal_ticker_instance0_caller_id_get(uint8_t user_id)
{
	uint8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   19d2c:	2803      	cmp	r0, #3
{
   19d2e:	b510      	push	{r4, lr}
   19d30:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   19d32:	d804      	bhi.n	19d3e <hal_ticker_instance0_caller_id_get+0x12>

	caller_id = caller_id_lut[user_id];
   19d34:	4b11      	ldr	r3, [pc, #68]	; (19d7c <hal_ticker_instance0_caller_id_get+0x50>)
   19d36:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   19d38:	b18c      	cbz	r4, 19d5e <hal_ticker_instance0_caller_id_get+0x32>

	return caller_id;
}
   19d3a:	4620      	mov	r0, r4
   19d3c:	bd10      	pop	{r4, pc}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   19d3e:	4a10      	ldr	r2, [pc, #64]	; (19d80 <hal_ticker_instance0_caller_id_get+0x54>)
   19d40:	4910      	ldr	r1, [pc, #64]	; (19d84 <hal_ticker_instance0_caller_id_get+0x58>)
   19d42:	4811      	ldr	r0, [pc, #68]	; (19d88 <hal_ticker_instance0_caller_id_get+0x5c>)
   19d44:	232b      	movs	r3, #43	; 0x2b
   19d46:	f004 fb1d 	bl	1e384 <printk>
   19d4a:	4040      	eors	r0, r0
   19d4c:	f380 8811 	msr	BASEPRI, r0
   19d50:	f04f 0003 	mov.w	r0, #3
   19d54:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   19d56:	4b09      	ldr	r3, [pc, #36]	; (19d7c <hal_ticker_instance0_caller_id_get+0x50>)
   19d58:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   19d5a:	2c00      	cmp	r4, #0
   19d5c:	d1ed      	bne.n	19d3a <hal_ticker_instance0_caller_id_get+0xe>
   19d5e:	4a08      	ldr	r2, [pc, #32]	; (19d80 <hal_ticker_instance0_caller_id_get+0x54>)
   19d60:	490a      	ldr	r1, [pc, #40]	; (19d8c <hal_ticker_instance0_caller_id_get+0x60>)
   19d62:	4809      	ldr	r0, [pc, #36]	; (19d88 <hal_ticker_instance0_caller_id_get+0x5c>)
   19d64:	232e      	movs	r3, #46	; 0x2e
   19d66:	f004 fb0d 	bl	1e384 <printk>
   19d6a:	4040      	eors	r0, r0
   19d6c:	f380 8811 	msr	BASEPRI, r0
   19d70:	f04f 0003 	mov.w	r0, #3
   19d74:	df02      	svc	2
}
   19d76:	4620      	mov	r0, r4
   19d78:	bd10      	pop	{r4, pc}
   19d7a:	bf00      	nop
   19d7c:	00025180 	.word	0x00025180
   19d80:	000250ec 	.word	0x000250ec
   19d84:	0002513c 	.word	0x0002513c
   19d88:	00024334 	.word	0x00024334
   19d8c:	0002515c 	.word	0x0002515c

00019d90 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   19d90:	3801      	subs	r0, #1
{
   19d92:	b510      	push	{r4, lr}
   19d94:	461c      	mov	r4, r3
   19d96:	2804      	cmp	r0, #4
   19d98:	d855      	bhi.n	19e46 <hal_ticker_instance0_sched+0xb6>
   19d9a:	e8df f000 	tbb	[pc, r0]
   19d9e:	1a12      	.short	0x1a12
   19da0:	1e16      	.short	0x1e16
   19da2:	03          	.byte	0x03
   19da3:	00          	.byte	0x00
			break;
		}
		break;

	case TICKER_CALL_ID_PROGRAM:
		switch (callee_id) {
   19da4:	2904      	cmp	r1, #4
   19da6:	d01e      	beq.n	19de6 <hal_ticker_instance0_sched+0x56>
				       &m);
		}
		break;

		default:
			LL_ASSERT(0);
   19da8:	23ba      	movs	r3, #186	; 0xba
			break;
		}
		break;

	default:
		LL_ASSERT(0);
   19daa:	4a28      	ldr	r2, [pc, #160]	; (19e4c <hal_ticker_instance0_sched+0xbc>)
   19dac:	4928      	ldr	r1, [pc, #160]	; (19e50 <hal_ticker_instance0_sched+0xc0>)
   19dae:	4829      	ldr	r0, [pc, #164]	; (19e54 <hal_ticker_instance0_sched+0xc4>)
   19db0:	f004 fae8 	bl	1e384 <printk>
   19db4:	4040      	eors	r0, r0
   19db6:	f380 8811 	msr	BASEPRI, r0
   19dba:	f04f 0003 	mov.w	r0, #3
   19dbe:	df02      	svc	2
		break;
	}
}
   19dc0:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   19dc2:	2904      	cmp	r1, #4
   19dc4:	d01f      	beq.n	19e06 <hal_ticker_instance0_sched+0x76>
			LL_ASSERT(0);
   19dc6:	234e      	movs	r3, #78	; 0x4e
   19dc8:	e7ef      	b.n	19daa <hal_ticker_instance0_sched+0x1a>
		switch (callee_id) {
   19dca:	2904      	cmp	r1, #4
   19dcc:	d013      	beq.n	19df6 <hal_ticker_instance0_sched+0x66>
			LL_ASSERT(0);
   19dce:	237c      	movs	r3, #124	; 0x7c
   19dd0:	e7eb      	b.n	19daa <hal_ticker_instance0_sched+0x1a>
		switch (callee_id) {
   19dd2:	2903      	cmp	r1, #3
   19dd4:	d01f      	beq.n	19e16 <hal_ticker_instance0_sched+0x86>
			LL_ASSERT(0);
   19dd6:	2365      	movs	r3, #101	; 0x65
   19dd8:	e7e7      	b.n	19daa <hal_ticker_instance0_sched+0x1a>
		switch (callee_id) {
   19dda:	2903      	cmp	r1, #3
   19ddc:	d02b      	beq.n	19e36 <hal_ticker_instance0_sched+0xa6>
   19dde:	2904      	cmp	r1, #4
   19de0:	d021      	beq.n	19e26 <hal_ticker_instance0_sched+0x96>
			LL_ASSERT(0);
   19de2:	23a2      	movs	r3, #162	; 0xa2
   19de4:	e7e1      	b.n	19daa <hal_ticker_instance0_sched+0x1a>
			m.param = instance;
   19de6:	4b1c      	ldr	r3, [pc, #112]	; (19e58 <hal_ticker_instance0_sched+0xc8>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   19de8:	2102      	movs	r1, #2
			m.param = instance;
   19dea:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   19dec:	2003      	movs	r0, #3
}
   19dee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   19df2:	f7f3 b801 	b.w	cdf8 <mayfly_enqueue>
			m.param = instance;
   19df6:	4b19      	ldr	r3, [pc, #100]	; (19e5c <hal_ticker_instance0_sched+0xcc>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   19df8:	2102      	movs	r1, #2
			m.param = instance;
   19dfa:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   19dfc:	2001      	movs	r0, #1
}
   19dfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   19e02:	f7f2 bff9 	b.w	cdf8 <mayfly_enqueue>
			m.param = instance;
   19e06:	4b16      	ldr	r3, [pc, #88]	; (19e60 <hal_ticker_instance0_sched+0xd0>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   19e08:	2102      	movs	r1, #2
			m.param = instance;
   19e0a:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   19e0c:	2000      	movs	r0, #0
}
   19e0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   19e12:	f7f2 bff1 	b.w	cdf8 <mayfly_enqueue>
			m.param = instance;
   19e16:	4b13      	ldr	r3, [pc, #76]	; (19e64 <hal_ticker_instance0_sched+0xd4>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   19e18:	2101      	movs	r1, #1
			m.param = instance;
   19e1a:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   19e1c:	4608      	mov	r0, r1
}
   19e1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   19e22:	f7f2 bfe9 	b.w	cdf8 <mayfly_enqueue>
			m.param = instance;
   19e26:	4b10      	ldr	r3, [pc, #64]	; (19e68 <hal_ticker_instance0_sched+0xd8>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   19e28:	2102      	movs	r1, #2
			m.param = instance;
   19e2a:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   19e2c:	4608      	mov	r0, r1
}
   19e2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   19e32:	f7f2 bfe1 	b.w	cdf8 <mayfly_enqueue>
			m.param = instance;
   19e36:	4b0d      	ldr	r3, [pc, #52]	; (19e6c <hal_ticker_instance0_sched+0xdc>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   19e38:	2101      	movs	r1, #1
			m.param = instance;
   19e3a:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   19e3c:	2002      	movs	r0, #2
}
   19e3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   19e42:	f7f2 bfd9 	b.w	cdf8 <mayfly_enqueue>
		LL_ASSERT(0);
   19e46:	23c0      	movs	r3, #192	; 0xc0
   19e48:	e7af      	b.n	19daa <hal_ticker_instance0_sched+0x1a>
   19e4a:	bf00      	nop
   19e4c:	000250ec 	.word	0x000250ec
   19e50:	000243a4 	.word	0x000243a4
   19e54:	00024334 	.word	0x00024334
   19e58:	20000584 	.word	0x20000584
   19e5c:	20000554 	.word	0x20000554
   19e60:	20000534 	.word	0x20000534
   19e64:	20000544 	.word	0x20000544
   19e68:	20000574 	.word	0x20000574
   19e6c:	20000564 	.word	0x20000564

00019e70 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(uint32_t value)
{
   19e70:	4601      	mov	r1, r0
	cntr_cmp_set(0, value);
   19e72:	2000      	movs	r0, #0
   19e74:	f7ff ba4a 	b.w	1930c <cntr_cmp_set>

00019e78 <hci_vendor_read_static_addr>:
				 uint8_t size)
{
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   19e78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   19e7c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   19e80:	3201      	adds	r2, #1
   19e82:	d008      	beq.n	19e96 <hci_vendor_read_static_addr+0x1e>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   19e84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   19e88:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   19e8c:	f013 0301 	ands.w	r3, r3, #1
   19e90:	d10f      	bne.n	19eb2 <hci_vendor_read_static_addr+0x3a>
		}

		return 1;
	}

	return 0;
   19e92:	2000      	movs	r0, #0
   19e94:	4770      	bx	lr
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   19e96:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   19e9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   19e9e:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   19ea0:	4293      	cmp	r3, r2
   19ea2:	d0f6      	beq.n	19e92 <hci_vendor_read_static_addr+0x1a>
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   19ea4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   19ea8:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   19eac:	f013 0301 	ands.w	r3, r3, #1
   19eb0:	d0ef      	beq.n	19e92 <hci_vendor_read_static_addr+0x1a>
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   19eb2:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
	sys_put_le16(val >> 16, &dst[2]);
   19eb6:	0c19      	lsrs	r1, r3, #16
{
   19eb8:	b410      	push	{r4}
	dst[0] = val;
   19eba:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   19ebc:	0a0c      	lsrs	r4, r1, #8
   19ebe:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   19ec2:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
   19ec4:	70c4      	strb	r4, [r0, #3]
   19ec6:	7043      	strb	r3, [r0, #1]
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   19ec8:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
	dst[0] = val;
   19ecc:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
   19ece:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   19ed2:	f063 033f 	orn	r3, r3, #63	; 0x3f
   19ed6:	7143      	strb	r3, [r0, #5]
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   19ed8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   19edc:	3301      	adds	r3, #1
   19ede:	d035      	beq.n	19f4c <hci_vendor_read_static_addr+0xd4>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   19ee0:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   19ee4:	3301      	adds	r3, #1
   19ee6:	d031      	beq.n	19f4c <hci_vendor_read_static_addr+0xd4>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   19ee8:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   19eec:	3301      	adds	r3, #1
   19eee:	d02d      	beq.n	19f4c <hci_vendor_read_static_addr+0xd4>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   19ef0:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   19ef4:	3301      	adds	r3, #1
   19ef6:	d029      	beq.n	19f4c <hci_vendor_read_static_addr+0xd4>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   19ef8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	dst[0] = val;
   19efc:	7183      	strb	r3, [r0, #6]
	sys_put_le16(val >> 16, &dst[2]);
   19efe:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   19f00:	0a0c      	lsrs	r4, r1, #8
   19f02:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   19f06:	7201      	strb	r1, [r0, #8]
	dst[1] = val >> 8;
   19f08:	7244      	strb	r4, [r0, #9]
   19f0a:	71c3      	strb	r3, [r0, #7]
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   19f0c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
	dst[0] = val;
   19f10:	7283      	strb	r3, [r0, #10]
	sys_put_le16(val >> 16, &dst[2]);
   19f12:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   19f14:	0a0c      	lsrs	r4, r1, #8
   19f16:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   19f1a:	7301      	strb	r1, [r0, #12]
	dst[1] = val >> 8;
   19f1c:	7344      	strb	r4, [r0, #13]
   19f1e:	72c3      	strb	r3, [r0, #11]
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   19f20:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
	dst[0] = val;
   19f24:	7383      	strb	r3, [r0, #14]
	sys_put_le16(val >> 16, &dst[2]);
   19f26:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   19f28:	0a0c      	lsrs	r4, r1, #8
   19f2a:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   19f2e:	7401      	strb	r1, [r0, #16]
	dst[1] = val >> 8;
   19f30:	7444      	strb	r4, [r0, #17]
   19f32:	73c3      	strb	r3, [r0, #15]
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   19f34:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	dst[0] = val;
   19f38:	7483      	strb	r3, [r0, #18]
	sys_put_le16(val >> 16, &dst[2]);
   19f3a:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   19f3c:	0a11      	lsrs	r1, r2, #8
   19f3e:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   19f42:	7502      	strb	r2, [r0, #20]
	dst[1] = val >> 8;
   19f44:	7541      	strb	r1, [r0, #21]
   19f46:	74c3      	strb	r3, [r0, #19]
		return 1;
   19f48:	2001      	movs	r0, #1
}
   19f4a:	e009      	b.n	19f60 <hci_vendor_read_static_addr+0xe8>
__ssp_bos_icheck3(memset, void *, int)
   19f4c:	2300      	movs	r3, #0
   19f4e:	f8c0 3006 	str.w	r3, [r0, #6]
   19f52:	f8c0 300a 	str.w	r3, [r0, #10]
   19f56:	f8c0 300e 	str.w	r3, [r0, #14]
   19f5a:	f8c0 3012 	str.w	r3, [r0, #18]
   19f5e:	2001      	movs	r0, #1
}
   19f60:	bc10      	pop	{r4}
   19f62:	4770      	bx	lr

00019f64 <hci_vendor_read_key_hierarchy_roots>:
   19f64:	2300      	movs	r3, #0
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   19f66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   19f6a:	6003      	str	r3, [r0, #0]
   19f6c:	6043      	str	r3, [r0, #4]
   19f6e:	6083      	str	r3, [r0, #8]
   19f70:	60c3      	str	r3, [r0, #12]
   19f72:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   19f76:	3301      	adds	r3, #1
   19f78:	d036      	beq.n	19fe8 <hci_vendor_read_key_hierarchy_roots+0x84>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   19f7a:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   19f7e:	3301      	adds	r3, #1
   19f80:	d032      	beq.n	19fe8 <hci_vendor_read_key_hierarchy_roots+0x84>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   19f82:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   19f86:	3301      	adds	r3, #1
   19f88:	d02e      	beq.n	19fe8 <hci_vendor_read_key_hierarchy_roots+0x84>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   19f8a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   19f8e:	3301      	adds	r3, #1
   19f90:	d02a      	beq.n	19fe8 <hci_vendor_read_key_hierarchy_roots+0x84>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   19f92:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	dst[0] = val;
   19f96:	700b      	strb	r3, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
   19f98:	0c18      	lsrs	r0, r3, #16
{
   19f9a:	b410      	push	{r4}
	dst[1] = val >> 8;
   19f9c:	f3c3 2307 	ubfx	r3, r3, #8, #8
   19fa0:	0a04      	lsrs	r4, r0, #8
	dst[0] = val;
   19fa2:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
   19fa4:	70cc      	strb	r4, [r1, #3]
   19fa6:	704b      	strb	r3, [r1, #1]
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   19fa8:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
	dst[0] = val;
   19fac:	710b      	strb	r3, [r1, #4]
	sys_put_le16(val >> 16, &dst[2]);
   19fae:	0c18      	lsrs	r0, r3, #16
	dst[1] = val >> 8;
   19fb0:	0a04      	lsrs	r4, r0, #8
   19fb2:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   19fb6:	7188      	strb	r0, [r1, #6]
	dst[1] = val >> 8;
   19fb8:	71cc      	strb	r4, [r1, #7]
   19fba:	714b      	strb	r3, [r1, #5]
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   19fbc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
	dst[0] = val;
   19fc0:	720b      	strb	r3, [r1, #8]
	sys_put_le16(val >> 16, &dst[2]);
   19fc2:	0c18      	lsrs	r0, r3, #16
	dst[1] = val >> 8;
   19fc4:	0a04      	lsrs	r4, r0, #8
   19fc6:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   19fca:	7288      	strb	r0, [r1, #10]
	dst[1] = val >> 8;
   19fcc:	72cc      	strb	r4, [r1, #11]
   19fce:	724b      	strb	r3, [r1, #9]
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   19fd0:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
	dst[0] = val;
   19fd4:	730b      	strb	r3, [r1, #12]
	sys_put_le16(val >> 16, &dst[2]);
   19fd6:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   19fd8:	0a10      	lsrs	r0, r2, #8
   19fda:	f3c3 2307 	ubfx	r3, r3, #8, #8
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   19fde:	bc10      	pop	{r4}
	dst[0] = val;
   19fe0:	738a      	strb	r2, [r1, #14]
	dst[1] = val >> 8;
   19fe2:	73c8      	strb	r0, [r1, #15]
   19fe4:	734b      	strb	r3, [r1, #13]
   19fe6:	4770      	bx	lr
   19fe8:	2300      	movs	r3, #0
   19fea:	600b      	str	r3, [r1, #0]
   19fec:	604b      	str	r3, [r1, #4]
   19fee:	608b      	str	r3, [r1, #8]
   19ff0:	60cb      	str	r3, [r1, #12]
   19ff2:	4770      	bx	lr

00019ff4 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   19ff4:	4b02      	ldr	r3, [pc, #8]	; (1a000 <net_buf_pool_get+0xc>)
   19ff6:	2228      	movs	r2, #40	; 0x28
   19ff8:	fb02 3000 	mla	r0, r2, r0, r3
   19ffc:	4770      	bx	lr
   19ffe:	bf00      	nop
   1a000:	200008e0 	.word	0x200008e0

0001a004 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1a004:	7983      	ldrb	r3, [r0, #6]

	return buf - pool->__bufs;
   1a006:	4a05      	ldr	r2, [pc, #20]	; (1a01c <net_buf_id+0x18>)
   1a008:	2128      	movs	r1, #40	; 0x28
   1a00a:	fb01 2303 	mla	r3, r1, r3, r2
   1a00e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a010:	1ac0      	subs	r0, r0, r3
}
   1a012:	4b03      	ldr	r3, [pc, #12]	; (1a020 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   1a014:	10c0      	asrs	r0, r0, #3
}
   1a016:	4358      	muls	r0, r3
   1a018:	4770      	bx	lr
   1a01a:	bf00      	nop
   1a01c:	200008e0 	.word	0x200008e0
   1a020:	aaaaaaab 	.word	0xaaaaaaab

0001a024 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1a024:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1a026:	4a0a      	ldr	r2, [pc, #40]	; (1a050 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1a028:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1a02a:	2428      	movs	r4, #40	; 0x28
   1a02c:	fb04 2303 	mla	r3, r4, r3, r2

	*size = MIN(fixed->data_size, *size);
   1a030:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1a032:	6a1b      	ldr	r3, [r3, #32]
   1a034:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1a036:	6823      	ldr	r3, [r4, #0]
   1a038:	429a      	cmp	r2, r3
   1a03a:	bf94      	ite	ls
   1a03c:	600a      	strls	r2, [r1, #0]
   1a03e:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1a040:	f7ff ffe0 	bl	1a004 <net_buf_id>
   1a044:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   1a048:	fb02 3000 	mla	r0, r2, r0, r3
   1a04c:	bd10      	pop	{r4, pc}
   1a04e:	bf00      	nop
   1a050:	200008e0 	.word	0x200008e0

0001a054 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1a054:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1a058:	4605      	mov	r5, r0
   1a05a:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1a05c:	4610      	mov	r0, r2
   1a05e:	4619      	mov	r1, r3
{
   1a060:	4616      	mov	r6, r2
   1a062:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1a064:	f009 f95b 	bl	2331e <sys_clock_timeout_end_calc>
   1a068:	4680      	mov	r8, r0
   1a06a:	4689      	mov	r9, r1
	__asm__ volatile(
   1a06c:	f04f 0320 	mov.w	r3, #32
   1a070:	f3ef 8a11 	mrs	sl, BASEPRI
   1a074:	f383 8811 	msr	BASEPRI, r3
   1a078:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1a07c:	8b6b      	ldrh	r3, [r5, #26]
   1a07e:	2b00      	cmp	r3, #0
   1a080:	d054      	beq.n	1a12c <net_buf_alloc_len+0xd8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1a082:	8b2a      	ldrh	r2, [r5, #24]
   1a084:	429a      	cmp	r2, r3
   1a086:	d93d      	bls.n	1a104 <net_buf_alloc_len+0xb0>
	return z_impl_k_queue_get(queue, timeout);
   1a088:	2200      	movs	r2, #0
   1a08a:	2300      	movs	r3, #0
   1a08c:	4628      	mov	r0, r5
   1a08e:	f002 ff8f 	bl	1cfb0 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1a092:	4604      	mov	r4, r0
   1a094:	2800      	cmp	r0, #0
   1a096:	d035      	beq.n	1a104 <net_buf_alloc_len+0xb0>
	__asm__ volatile(
   1a098:	f38a 8811 	msr	BASEPRI, sl
   1a09c:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1a0a0:	9b01      	ldr	r3, [sp, #4]
   1a0a2:	2b00      	cmp	r3, #0
   1a0a4:	d052      	beq.n	1a14c <net_buf_alloc_len+0xf8>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1a0a6:	ea56 0307 	orrs.w	r3, r6, r7
   1a0aa:	d010      	beq.n	1a0ce <net_buf_alloc_len+0x7a>
   1a0ac:	1c7b      	adds	r3, r7, #1
   1a0ae:	bf08      	it	eq
   1a0b0:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   1a0b4:	d00b      	beq.n	1a0ce <net_buf_alloc_len+0x7a>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   1a0b6:	f003 ff47 	bl	1df48 <sys_clock_tick_get>
   1a0ba:	ebb8 0600 	subs.w	r6, r8, r0
   1a0be:	eb69 0701 	sbc.w	r7, r9, r1
   1a0c2:	2e00      	cmp	r6, #0
   1a0c4:	f177 0300 	sbcs.w	r3, r7, #0
   1a0c8:	bfbc      	itt	lt
   1a0ca:	2600      	movlt	r6, #0
   1a0cc:	2700      	movlt	r7, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1a0ce:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1a0d0:	f8df 8090 	ldr.w	r8, [pc, #144]	; 1a164 <net_buf_alloc_len+0x110>
   1a0d4:	2228      	movs	r2, #40	; 0x28
   1a0d6:	fb02 8303 	mla	r3, r2, r3, r8
   1a0da:	a901      	add	r1, sp, #4
   1a0dc:	6a1b      	ldr	r3, [r3, #32]
   1a0de:	681b      	ldr	r3, [r3, #0]
   1a0e0:	4632      	mov	r2, r6
   1a0e2:	681d      	ldr	r5, [r3, #0]
   1a0e4:	4620      	mov	r0, r4
   1a0e6:	463b      	mov	r3, r7
   1a0e8:	47a8      	blx	r5
   1a0ea:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1a0ec:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1a0ee:	bb70      	cbnz	r0, 1a14e <net_buf_alloc_len+0xfa>
	k_lifo_put(&pool->free, buf);
   1a0f0:	79a0      	ldrb	r0, [r4, #6]
   1a0f2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1a0f6:	4621      	mov	r1, r4
   1a0f8:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
   1a0fc:	f008 fe89 	bl	22e12 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1a100:	462c      	mov	r4, r5
}
   1a102:	e01f      	b.n	1a144 <net_buf_alloc_len+0xf0>
		uninit_count = pool->uninit_count--;
   1a104:	8b68      	ldrh	r0, [r5, #26]
   1a106:	1e43      	subs	r3, r0, #1
   1a108:	836b      	strh	r3, [r5, #26]
   1a10a:	f38a 8811 	msr	BASEPRI, sl
   1a10e:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   1a112:	8b2c      	ldrh	r4, [r5, #24]
   1a114:	1a24      	subs	r4, r4, r0
   1a116:	6a68      	ldr	r0, [r5, #36]	; 0x24
   1a118:	2318      	movs	r3, #24
   1a11a:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
   1a11e:	4811      	ldr	r0, [pc, #68]	; (1a164 <net_buf_alloc_len+0x110>)
   1a120:	4b11      	ldr	r3, [pc, #68]	; (1a168 <net_buf_alloc_len+0x114>)
   1a122:	1a2d      	subs	r5, r5, r0
   1a124:	10ed      	asrs	r5, r5, #3
   1a126:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   1a128:	71a5      	strb	r5, [r4, #6]
		goto success;
   1a12a:	e7b9      	b.n	1a0a0 <net_buf_alloc_len+0x4c>
   1a12c:	f38a 8811 	msr	BASEPRI, sl
   1a130:	f3bf 8f6f 	isb	sy
   1a134:	4632      	mov	r2, r6
   1a136:	463b      	mov	r3, r7
   1a138:	4628      	mov	r0, r5
   1a13a:	f002 ff39 	bl	1cfb0 <z_impl_k_queue_get>
	if (!buf) {
   1a13e:	4604      	mov	r4, r0
   1a140:	2800      	cmp	r0, #0
   1a142:	d1ad      	bne.n	1a0a0 <net_buf_alloc_len+0x4c>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1a144:	4620      	mov	r0, r4
   1a146:	b002      	add	sp, #8
   1a148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf->__buf = NULL;
   1a14c:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   1a14e:	2300      	movs	r3, #0
	buf->ref   = 1U;
   1a150:	2201      	movs	r2, #1
	buf->frags = NULL;
   1a152:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   1a154:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   1a156:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   1a158:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   1a15a:	6923      	ldr	r3, [r4, #16]
   1a15c:	81e2      	strh	r2, [r4, #14]
   1a15e:	60a3      	str	r3, [r4, #8]
	return buf;
   1a160:	e7f0      	b.n	1a144 <net_buf_alloc_len+0xf0>
   1a162:	bf00      	nop
   1a164:	200008e0 	.word	0x200008e0
   1a168:	cccccccd 	.word	0xcccccccd

0001a16c <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1a16c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a170:	4d17      	ldr	r5, [pc, #92]	; (1a1d0 <net_buf_unref+0x64>)
   1a172:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1a174:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   1a176:	2728      	movs	r7, #40	; 0x28
	while (buf) {
   1a178:	b90c      	cbnz	r4, 1a17e <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1a17a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   1a17e:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   1a180:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   1a184:	3b01      	subs	r3, #1
   1a186:	b2db      	uxtb	r3, r3
   1a188:	7123      	strb	r3, [r4, #4]
   1a18a:	2b00      	cmp	r3, #0
   1a18c:	d1f5      	bne.n	1a17a <net_buf_unref+0xe>
		if (buf->__buf) {
   1a18e:	6921      	ldr	r1, [r4, #16]
   1a190:	b159      	cbz	r1, 1a1aa <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1a192:	7963      	ldrb	r3, [r4, #5]
   1a194:	079b      	lsls	r3, r3, #30
   1a196:	d407      	bmi.n	1a1a8 <net_buf_unref+0x3c>
	pool->alloc->cb->unref(buf, data);
   1a198:	79a3      	ldrb	r3, [r4, #6]
   1a19a:	fb07 5303 	mla	r3, r7, r3, r5
   1a19e:	4620      	mov	r0, r4
   1a1a0:	6a1b      	ldr	r3, [r3, #32]
   1a1a2:	681b      	ldr	r3, [r3, #0]
   1a1a4:	689b      	ldr	r3, [r3, #8]
   1a1a6:	4798      	blx	r3
			buf->__buf = NULL;
   1a1a8:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   1a1aa:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1a1ac:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   1a1ae:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   1a1b2:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   1a1b4:	69db      	ldr	r3, [r3, #28]
   1a1b6:	b11b      	cbz	r3, 1a1c0 <net_buf_unref+0x54>
			pool->destroy(buf);
   1a1b8:	4620      	mov	r0, r4
   1a1ba:	4798      	blx	r3
{
   1a1bc:	4644      	mov	r4, r8
   1a1be:	e7db      	b.n	1a178 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   1a1c0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1a1c4:	4621      	mov	r1, r4
   1a1c6:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
   1a1ca:	f008 fe22 	bl	22e12 <k_queue_prepend>
}
   1a1ce:	e7f5      	b.n	1a1bc <net_buf_unref+0x50>
   1a1d0:	200008e0 	.word	0x200008e0

0001a1d4 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1a1d4:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   1a1d6:	4b09      	ldr	r3, [pc, #36]	; (1a1fc <gpio_nrfx_init+0x28>)
   1a1d8:	781a      	ldrb	r2, [r3, #0]
   1a1da:	b96a      	cbnz	r2, 1a1f8 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   1a1dc:	2101      	movs	r1, #1
   1a1de:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1a1e0:	2006      	movs	r0, #6
   1a1e2:	2105      	movs	r1, #5
   1a1e4:	f7eb f9c8 	bl	5578 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   1a1e8:	2006      	movs	r0, #6
   1a1ea:	f7eb f993 	bl	5514 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1a1ee:	4b04      	ldr	r3, [pc, #16]	; (1a200 <gpio_nrfx_init+0x2c>)
   1a1f0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1a1f4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   1a1f8:	2000      	movs	r0, #0
   1a1fa:	bd08      	pop	{r3, pc}
   1a1fc:	200031c5 	.word	0x200031c5
   1a200:	40006000 	.word	0x40006000

0001a204 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1a204:	4b2b      	ldr	r3, [pc, #172]	; (1a2b4 <gpio_nrfx_config+0xb0>)
{
   1a206:	b5f0      	push	{r4, r5, r6, r7, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1a208:	6844      	ldr	r4, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1a20a:	482b      	ldr	r0, [pc, #172]	; (1a2b8 <gpio_nrfx_config+0xb4>)
   1a20c:	4013      	ands	r3, r2
   1a20e:	4283      	cmp	r3, r0
   1a210:	d041      	beq.n	1a296 <gpio_nrfx_config+0x92>
   1a212:	d80d      	bhi.n	1a230 <gpio_nrfx_config+0x2c>
   1a214:	2b06      	cmp	r3, #6
   1a216:	d015      	beq.n	1a244 <gpio_nrfx_config+0x40>
   1a218:	d805      	bhi.n	1a226 <gpio_nrfx_config+0x22>
   1a21a:	b19b      	cbz	r3, 1a244 <gpio_nrfx_config+0x40>
   1a21c:	2b02      	cmp	r3, #2
   1a21e:	d03c      	beq.n	1a29a <gpio_nrfx_config+0x96>
   1a220:	f06f 0015 	mvn.w	r0, #21
   1a224:	e036      	b.n	1a294 <gpio_nrfx_config+0x90>
   1a226:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1a22a:	d1f9      	bne.n	1a220 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
   1a22c:	2301      	movs	r3, #1
   1a22e:	e009      	b.n	1a244 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1a230:	4822      	ldr	r0, [pc, #136]	; (1a2bc <gpio_nrfx_config+0xb8>)
   1a232:	4283      	cmp	r3, r0
   1a234:	d033      	beq.n	1a29e <gpio_nrfx_config+0x9a>
   1a236:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   1a23a:	d032      	beq.n	1a2a2 <gpio_nrfx_config+0x9e>
   1a23c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   1a240:	d1ee      	bne.n	1a220 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
   1a242:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   1a244:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
   1a246:	bf54      	ite	pl
   1a248:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
   1a24c:	2603      	movmi	r6, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1a24e:	f482 7580 	eor.w	r5, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   1a252:	0597      	lsls	r7, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   1a254:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1a258:	f3c5 2500 	ubfx	r5, r5, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   1a25c:	d507      	bpl.n	1a26e <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1a25e:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1a262:	6867      	ldr	r7, [r4, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1a264:	d01f      	beq.n	1a2a6 <gpio_nrfx_config+0xa2>
			nrf_gpio_port_out_set(reg, BIT(pin));
   1a266:	2201      	movs	r2, #1
   1a268:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   1a26a:	f8c7 2508 	str.w	r2, [r7, #1288]	; 0x508
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   1a26e:	7a22      	ldrb	r2, [r4, #8]
        case 1: return NRF_P1;
   1a270:	4c13      	ldr	r4, [pc, #76]	; (1a2c0 <gpio_nrfx_config+0xbc>)
   1a272:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   1a274:	f001 011f 	and.w	r1, r1, #31
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1a278:	ea40 0245 	orr.w	r2, r0, r5, lsl #1
        case 1: return NRF_P1;
   1a27c:	bf18      	it	ne
   1a27e:	f04f 44a0 	movne.w	r4, #1342177280	; 0x50000000
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1a282:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1a286:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1a28a:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1a28e:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
	return 0;
   1a292:	2000      	movs	r0, #0
}
   1a294:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   1a296:	2307      	movs	r3, #7
   1a298:	e7d4      	b.n	1a244 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
   1a29a:	2304      	movs	r3, #4
   1a29c:	e7d2      	b.n	1a244 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
   1a29e:	2305      	movs	r3, #5
   1a2a0:	e7d0      	b.n	1a244 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
   1a2a2:	2303      	movs	r3, #3
   1a2a4:	e7ce      	b.n	1a244 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   1a2a6:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   1a2a8:	bf42      	ittt	mi
   1a2aa:	2201      	movmi	r2, #1
   1a2ac:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
   1a2ae:	f8c7 250c 	strmi.w	r2, [r7, #1292]	; 0x50c
}
   1a2b2:	e7dc      	b.n	1a26e <gpio_nrfx_config+0x6a>
   1a2b4:	00f00006 	.word	0x00f00006
   1a2b8:	00100006 	.word	0x00100006
   1a2bc:	00400002 	.word	0x00400002
   1a2c0:	50000300 	.word	0x50000300

0001a2c4 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
   1a2c4:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
   1a2c8:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
   1a2ca:	4b08      	ldr	r3, [pc, #32]	; (1a2ec <nrf_gpio_cfg_sense_set+0x28>)
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1a2cc:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
   1a2ce:	bf18      	it	ne
   1a2d0:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1a2d4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   1a2d8:	f8d3 2700 	ldr.w	r2, [r3, #1792]	; 0x700
   1a2dc:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1a2e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   1a2e4:	f8c3 2700 	str.w	r2, [r3, #1792]	; 0x700
}
   1a2e8:	4770      	bx	lr
   1a2ea:	bf00      	nop
   1a2ec:	50000300 	.word	0x50000300

0001a2f0 <check_level_trigger_pins>:
{
   1a2f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct gpio_nrfx_data *data = get_port_data(port);
   1a2f4:	6903      	ldr	r3, [r0, #16]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   1a2f6:	f8d0 a004 	ldr.w	sl, [r0, #4]
	uint32_t out = data->pin_int_en;
   1a2fa:	68de      	ldr	r6, [r3, #12]
        case 1: return NRF_P1;
   1a2fc:	f8df b07c 	ldr.w	fp, [pc, #124]	; 1a37c <check_level_trigger_pins+0x8c>
{
   1a300:	4688      	mov	r8, r1
	out &= ~data->trig_edge & ~data->double_edge;
   1a302:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   1a306:	430a      	orrs	r2, r1
   1a308:	ea26 0602 	bic.w	r6, r6, r2
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
   1a30c:	f8da 2004 	ldr.w	r2, [sl, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   1a310:	691b      	ldr	r3, [r3, #16]
    return p_reg->IN;
   1a312:	f8d2 5510 	ldr.w	r5, [r2, #1296]	; 0x510
   1a316:	405d      	eors	r5, r3
	uint32_t out = pin_states & level_pins;
   1a318:	ea26 0505 	bic.w	r5, r6, r5
	uint32_t check_pins = level_pins;
   1a31c:	4637      	mov	r7, r6
	uint32_t bit = 1U << pin;
   1a31e:	2401      	movs	r4, #1
	uint32_t pin = 0U;
   1a320:	f04f 0900 	mov.w	r9, #0
	while (check_pins) {
   1a324:	b917      	cbnz	r7, 1a32c <check_level_trigger_pins+0x3c>
}
   1a326:	4628      	mov	r0, r5
   1a328:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (check_pins & bit) {
   1a32c:	423c      	tst	r4, r7
   1a32e:	d021      	beq.n	1a374 <check_level_trigger_pins+0x84>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1a330:	f89a 3008 	ldrb.w	r3, [sl, #8]
   1a334:	f009 001f 	and.w	r0, r9, #31
			if (!(level_pins & bit)) {
   1a338:	4234      	tst	r4, r6
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1a33a:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
			if (!(level_pins & bit)) {
   1a33e:	d114      	bne.n	1a36a <check_level_trigger_pins+0x7a>
    return pin_number >> 5;
   1a340:	0942      	lsrs	r2, r0, #5
        case 1: return NRF_P1;
   1a342:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   1a344:	f000 031f 	and.w	r3, r0, #31
        case 1: return NRF_P1;
   1a348:	bf14      	ite	ne
   1a34a:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
   1a34e:	465a      	moveq	r2, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1a350:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1a354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   1a358:	f3c3 4301 	ubfx	r3, r3, #16, #2
				if (high) {
   1a35c:	2b02      	cmp	r3, #2
					*sense_levels |= bit;
   1a35e:	bf02      	ittt	eq
   1a360:	f8d8 3000 	ldreq.w	r3, [r8]
   1a364:	4323      	orreq	r3, r4
   1a366:	f8c8 3000 	streq.w	r3, [r8]
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1a36a:	2100      	movs	r1, #0
   1a36c:	f7ff ffaa 	bl	1a2c4 <nrf_gpio_cfg_sense_set>
			check_pins &= ~bit;
   1a370:	ea27 0704 	bic.w	r7, r7, r4
		++pin;
   1a374:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
   1a378:	0064      	lsls	r4, r4, #1
   1a37a:	e7d3      	b.n	1a324 <check_level_trigger_pins+0x34>
   1a37c:	50000300 	.word	0x50000300

0001a380 <gpio_nrfx_pin_interrupt_configure>:
{
   1a380:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a382:	460e      	mov	r6, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1a384:	6841      	ldr	r1, [r0, #4]
	struct gpio_nrfx_data *data = get_port_data(port);
   1a386:	6907      	ldr	r7, [r0, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1a388:	7a09      	ldrb	r1, [r1, #8]
   1a38a:	f006 051f 	and.w	r5, r6, #31
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
   1a38e:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   1a392:	ea45 1541 	orr.w	r5, r5, r1, lsl #5
   1a396:	d110      	bne.n	1a3ba <gpio_nrfx_pin_interrupt_configure+0x3a>
    return pin_number >> 5;
   1a398:	0968      	lsrs	r0, r5, #5
        case 1: return NRF_P1;
   1a39a:	2801      	cmp	r0, #1
    *p_pin = pin_number & 0x1F;
   1a39c:	f005 011f 	and.w	r1, r5, #31
        case 1: return NRF_P1;
   1a3a0:	485d      	ldr	r0, [pc, #372]	; (1a518 <gpio_nrfx_pin_interrupt_configure+0x198>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1a3a2:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
        case 1: return NRF_P1;
   1a3a6:	bf18      	it	ne
   1a3a8:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1a3ac:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1a3b0:	07c8      	lsls	r0, r1, #31
   1a3b2:	d507      	bpl.n	1a3c4 <gpio_nrfx_pin_interrupt_configure+0x44>
		return -ENOTSUP;
   1a3b4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1a3b8:	e093      	b.n	1a4e2 <gpio_nrfx_pin_interrupt_configure+0x162>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1a3ba:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   1a3be:	68f9      	ldr	r1, [r7, #12]
   1a3c0:	f000 8091 	beq.w	1a4e6 <gpio_nrfx_pin_interrupt_configure+0x166>
   1a3c4:	68f8      	ldr	r0, [r7, #12]
   1a3c6:	2101      	movs	r1, #1
   1a3c8:	40b1      	lsls	r1, r6
   1a3ca:	4301      	orrs	r1, r0
   1a3cc:	6978      	ldr	r0, [r7, #20]
   1a3ce:	60f9      	str	r1, [r7, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1a3d0:	2101      	movs	r1, #1
   1a3d2:	40b1      	lsls	r1, r6
   1a3d4:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   1a3d8:	69ba      	ldr	r2, [r7, #24]
   1a3da:	bf0c      	ite	eq
   1a3dc:	4308      	orreq	r0, r1
   1a3de:	4388      	bicne	r0, r1
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   1a3e0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   1a3e4:	bf0c      	ite	eq
   1a3e6:	430a      	orreq	r2, r1
   1a3e8:	438a      	bicne	r2, r1
   1a3ea:	61ba      	str	r2, [r7, #24]
   1a3ec:	693a      	ldr	r2, [r7, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1a3ee:	6178      	str	r0, [r7, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   1a3f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
   1a3f4:	bf0c      	ite	eq
   1a3f6:	4311      	orreq	r1, r2
   1a3f8:	ea22 0101 	bicne.w	r1, r2, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   1a3fc:	4a47      	ldr	r2, [pc, #284]	; (1a51c <gpio_nrfx_pin_interrupt_configure+0x19c>)
   1a3fe:	6139      	str	r1, [r7, #16]
   1a400:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1a404:	2000      	movs	r0, #0
   1a406:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1a408:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   1a40c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
   1a410:	f3c1 2105 	ubfx	r1, r1, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   1a414:	428d      	cmp	r5, r1
   1a416:	d16b      	bne.n	1a4f0 <gpio_nrfx_pin_interrupt_configure+0x170>
		    && (intenset & BIT(i))) {
   1a418:	fa23 f100 	lsr.w	r1, r3, r0
   1a41c:	07c9      	lsls	r1, r1, #31
   1a41e:	d567      	bpl.n	1a4f0 <gpio_nrfx_pin_interrupt_configure+0x170>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   1a420:	0083      	lsls	r3, r0, #2
   1a422:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1a426:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1a42a:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   1a42e:	f021 0101 	bic.w	r1, r1, #1
   1a432:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   1a436:	2301      	movs	r3, #1
   1a438:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   1a43a:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   1a43e:	b2c0      	uxtb	r0, r0
   1a440:	f002 f93e 	bl	1c6c0 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1a444:	4628      	mov	r0, r5
   1a446:	2100      	movs	r1, #0
   1a448:	f7ff ff3c 	bl	1a2c4 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   1a44c:	68f8      	ldr	r0, [r7, #12]
   1a44e:	40f0      	lsrs	r0, r6
   1a450:	f010 0001 	ands.w	r0, r0, #1
   1a454:	d045      	beq.n	1a4e2 <gpio_nrfx_pin_interrupt_configure+0x162>
		if (data->trig_edge & BIT(pin)) {
   1a456:	6978      	ldr	r0, [r7, #20]
   1a458:	40f0      	lsrs	r0, r6
   1a45a:	f010 0401 	ands.w	r4, r0, #1
   1a45e:	d04e      	beq.n	1a4fe <gpio_nrfx_pin_interrupt_configure+0x17e>
				if (data->double_edge & BIT(pin)) {
   1a460:	69bb      	ldr	r3, [r7, #24]
   1a462:	40f3      	lsrs	r3, r6
   1a464:	07db      	lsls	r3, r3, #31
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   1a466:	bf5f      	itttt	pl
   1a468:	6939      	ldrpl	r1, [r7, #16]
   1a46a:	fa21 f606 	lsrpl.w	r6, r1, r6
   1a46e:	f006 0601 	andpl.w	r6, r6, #1
   1a472:	f1c6 0602 	rsbpl	r6, r6, #2
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   1a476:	f10d 0007 	add.w	r0, sp, #7
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   1a47a:	bf54      	ite	pl
   1a47c:	b2f6      	uxtbpl	r6, r6
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
   1a47e:	2603      	movmi	r6, #3
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   1a480:	f002 f940 	bl	1c704 <nrfx_gpiote_channel_alloc>
   1a484:	4b26      	ldr	r3, [pc, #152]	; (1a520 <gpio_nrfx_pin_interrupt_configure+0x1a0>)
   1a486:	4298      	cmp	r0, r3
   1a488:	d136      	bne.n	1a4f8 <gpio_nrfx_pin_interrupt_configure+0x178>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   1a48a:	f89d 1007 	ldrb.w	r1, [sp, #7]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1a48e:	008b      	lsls	r3, r1, #2
   1a490:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1a494:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1a498:	022d      	lsls	r5, r5, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1a49a:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1a49e:	f422 324f 	bic.w	r2, r2, #211968	; 0x33c00
   1a4a2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   1a4a6:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1a4aa:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1a4ae:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
   1a4b2:	4315      	orrs	r5, r2
    return ((uint32_t)p_reg + event);
   1a4b4:	008a      	lsls	r2, r1, #2
   1a4b6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1a4ba:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1a4be:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1a4c2:	2000      	movs	r0, #0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1a4c4:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1a4c8:	6010      	str	r0, [r2, #0]
   1a4ca:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1a4cc:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1a4d0:	f042 0201 	orr.w	r2, r2, #1
   1a4d4:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->INTENSET = mask;
   1a4d8:	4a10      	ldr	r2, [pc, #64]	; (1a51c <gpio_nrfx_pin_interrupt_configure+0x19c>)
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   1a4da:	2301      	movs	r3, #1
   1a4dc:	408b      	lsls	r3, r1
   1a4de:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1a4e2:	b003      	add	sp, #12
   1a4e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1a4e6:	2001      	movs	r0, #1
   1a4e8:	40b0      	lsls	r0, r6
   1a4ea:	ea21 0100 	bic.w	r1, r1, r0
   1a4ee:	e76d      	b.n	1a3cc <gpio_nrfx_pin_interrupt_configure+0x4c>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1a4f0:	3001      	adds	r0, #1
   1a4f2:	2808      	cmp	r0, #8
   1a4f4:	d188      	bne.n	1a408 <gpio_nrfx_pin_interrupt_configure+0x88>
   1a4f6:	e7a5      	b.n	1a444 <gpio_nrfx_pin_interrupt_configure+0xc4>
		return -ENODEV;
   1a4f8:	f06f 0012 	mvn.w	r0, #18
   1a4fc:	e7f1      	b.n	1a4e2 <gpio_nrfx_pin_interrupt_configure+0x162>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1a4fe:	6939      	ldr	r1, [r7, #16]
   1a500:	40f1      	lsrs	r1, r6
   1a502:	f001 0101 	and.w	r1, r1, #1
   1a506:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1a50a:	4628      	mov	r0, r5
   1a50c:	b2c9      	uxtb	r1, r1
   1a50e:	f7ff fed9 	bl	1a2c4 <nrf_gpio_cfg_sense_set>
	int res = 0;
   1a512:	4620      	mov	r0, r4
   1a514:	e7e5      	b.n	1a4e2 <gpio_nrfx_pin_interrupt_configure+0x162>
   1a516:	bf00      	nop
   1a518:	50000300 	.word	0x50000300
   1a51c:	40006000 	.word	0x40006000
   1a520:	0bad0000 	.word	0x0bad0000

0001a524 <gpiote_event_handler>:
{
   1a524:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   1a526:	2400      	movs	r4, #0
{
   1a528:	b085      	sub	sp, #20
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   1a52a:	e9cd 4400 	strd	r4, r4, [sp]
	uint32_t sense_levels[GPIO_COUNT] = {0};
   1a52e:	e9cd 4402 	strd	r4, r4, [sp, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a532:	4e26      	ldr	r6, [pc, #152]	; (1a5cc <gpiote_event_handler+0xa8>)
   1a534:	6835      	ldr	r5, [r6, #0]
	if (port_event) {
   1a536:	b15d      	cbz	r5, 1a550 <gpiote_event_handler+0x2c>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)),
   1a538:	a902      	add	r1, sp, #8
   1a53a:	4825      	ldr	r0, [pc, #148]	; (1a5d0 <gpiote_event_handler+0xac>)
   1a53c:	f7ff fed8 	bl	1a2f0 <check_level_trigger_pins>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
   1a540:	a903      	add	r1, sp, #12
		fired_triggers[0] =
   1a542:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
   1a544:	4823      	ldr	r0, [pc, #140]	; (1a5d4 <gpiote_event_handler+0xb0>)
   1a546:	f7ff fed3 	bl	1a2f0 <check_level_trigger_pins>
		fired_triggers[1] =
   1a54a:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1a54c:	6034      	str	r4, [r6, #0]
   1a54e:	6833      	ldr	r3, [r6, #0]
    return p_reg->INTENSET & mask;
   1a550:	4c21      	ldr	r4, [pc, #132]	; (1a5d8 <gpiote_event_handler+0xb4>)
{
   1a552:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   1a554:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1a556:	4694      	mov	ip, r2
    return p_reg->INTENSET & mask;
   1a558:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
   1a55c:	fa06 f102 	lsl.w	r1, r6, r2
   1a560:	4219      	tst	r1, r3
   1a562:	d01b      	beq.n	1a59c <gpiote_event_handler+0x78>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a564:	0091      	lsls	r1, r2, #2
   1a566:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1a56a:	f501 41c2 	add.w	r1, r1, #24832	; 0x6100
   1a56e:	680b      	ldr	r3, [r1, #0]
   1a570:	b1a3      	cbz	r3, 1a59c <gpiote_event_handler+0x78>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1a572:	f502 73a2 	add.w	r3, r2, #324	; 0x144
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   1a576:	af04      	add	r7, sp, #16
   1a578:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1a57c:	f8c1 c000 	str.w	ip, [r1]
   1a580:	f3c3 3040 	ubfx	r0, r3, #13, #1
   1a584:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   1a588:	f3c3 2304 	ubfx	r3, r3, #8, #5
   1a58c:	f850 7c10 	ldr.w	r7, [r0, #-16]
   1a590:	fa06 f303 	lsl.w	r3, r6, r3
   1a594:	433b      	orrs	r3, r7
   1a596:	f840 3c10 	str.w	r3, [r0, #-16]
   1a59a:	680b      	ldr	r3, [r1, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1a59c:	3201      	adds	r2, #1
   1a59e:	2a08      	cmp	r2, #8
   1a5a0:	d1da      	bne.n	1a558 <gpiote_event_handler+0x34>
	if (fired_triggers[0]) {
   1a5a2:	9a00      	ldr	r2, [sp, #0]
   1a5a4:	b11a      	cbz	r2, 1a5ae <gpiote_event_handler+0x8a>
	gpio_fire_callbacks(list, port, pins);
   1a5a6:	490a      	ldr	r1, [pc, #40]	; (1a5d0 <gpiote_event_handler+0xac>)
   1a5a8:	480c      	ldr	r0, [pc, #48]	; (1a5dc <gpiote_event_handler+0xb8>)
   1a5aa:	f008 f886 	bl	226ba <gpio_fire_callbacks>
	if (fired_triggers[1]) {
   1a5ae:	9a01      	ldr	r2, [sp, #4]
   1a5b0:	b11a      	cbz	r2, 1a5ba <gpiote_event_handler+0x96>
	gpio_fire_callbacks(list, port, pins);
   1a5b2:	4908      	ldr	r1, [pc, #32]	; (1a5d4 <gpiote_event_handler+0xb0>)
   1a5b4:	480a      	ldr	r0, [pc, #40]	; (1a5e0 <gpiote_event_handler+0xbc>)
   1a5b6:	f008 f880 	bl	226ba <gpio_fire_callbacks>
	if (port_event) {
   1a5ba:	b12d      	cbz	r5, 1a5c8 <gpiote_event_handler+0xa4>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
   1a5bc:	4804      	ldr	r0, [pc, #16]	; (1a5d0 <gpiote_event_handler+0xac>)
   1a5be:	f008 f8e6 	bl	2278e <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   1a5c2:	4804      	ldr	r0, [pc, #16]	; (1a5d4 <gpiote_event_handler+0xb0>)
   1a5c4:	f008 f8e3 	bl	2278e <cfg_level_pins>
}
   1a5c8:	b005      	add	sp, #20
   1a5ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a5cc:	4000617c 	.word	0x4000617c
   1a5d0:	20000750 	.word	0x20000750
   1a5d4:	20000768 	.word	0x20000768
   1a5d8:	40006000 	.word	0x40006000
   1a5dc:	20002814 	.word	0x20002814
   1a5e0:	20002830 	.word	0x20002830

0001a5e4 <spi_1_init>:
#ifdef CONFIG_SPI_0_NRF_SPI
SPI_NRFX_SPI_DEVICE(0);
#endif

#ifdef CONFIG_SPI_1_NRF_SPI
SPI_NRFX_SPI_DEVICE(1);
   1a5e4:	b538      	push	{r3, r4, r5, lr}
   1a5e6:	4604      	mov	r4, r0
   1a5e8:	2200      	movs	r2, #0
   1a5ea:	2101      	movs	r1, #1
   1a5ec:	2004      	movs	r0, #4
   1a5ee:	f7ea ffc3 	bl	5578 <z_arm_irq_priority_set>
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   1a5f2:	6923      	ldr	r3, [r4, #16]
	result = nrfx_spi_init(&get_dev_config(dev)->spi,
   1a5f4:	4a0e      	ldr	r2, [pc, #56]	; (1a630 <spi_1_init+0x4c>)
	dev_data->dev = dev;
   1a5f6:	65dc      	str	r4, [r3, #92]	; 0x5c
	result = nrfx_spi_init(&get_dev_config(dev)->spi,
   1a5f8:	6860      	ldr	r0, [r4, #4]
   1a5fa:	f100 0108 	add.w	r1, r0, #8
   1a5fe:	f002 f8c7 	bl	1c790 <nrfx_spi_init>
	if (result != NRFX_SUCCESS) {
   1a602:	4b0c      	ldr	r3, [pc, #48]	; (1a634 <spi_1_init+0x50>)
   1a604:	4298      	cmp	r0, r3
   1a606:	d011      	beq.n	1a62c <spi_1_init+0x48>
   1a608:	4b0b      	ldr	r3, [pc, #44]	; (1a638 <spi_1_init+0x54>)
   1a60a:	4a0c      	ldr	r2, [pc, #48]	; (1a63c <spi_1_init+0x58>)
		LOG_ERR("Failed to initialize device: %s", dev->name);
   1a60c:	6821      	ldr	r1, [r4, #0]
   1a60e:	480c      	ldr	r0, [pc, #48]	; (1a640 <spi_1_init+0x5c>)
   1a610:	1ad2      	subs	r2, r2, r3
   1a612:	08d2      	lsrs	r2, r2, #3
   1a614:	0192      	lsls	r2, r2, #6
   1a616:	f042 0201 	orr.w	r2, r2, #1
   1a61a:	f004 fa9a 	bl	1eb52 <log_1>
		return -EBUSY;
   1a61e:	f06f 050f 	mvn.w	r5, #15
SPI_NRFX_SPI_DEVICE(1);
   1a622:	6920      	ldr	r0, [r4, #16]
   1a624:	f008 f90e 	bl	22844 <spi_context_unlock_unconditionally>
   1a628:	4628      	mov	r0, r5
   1a62a:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
   1a62c:	2500      	movs	r5, #0
   1a62e:	e7f8      	b.n	1a622 <spi_1_init+0x3e>
   1a630:	0001a945 	.word	0x0001a945
   1a634:	0bad0000 	.word	0x0bad0000
   1a638:	0002393c 	.word	0x0002393c
   1a63c:	00023a94 	.word	0x00023a94
   1a640:	000271c3 	.word	0x000271c3

0001a644 <transfer_next_chunk>:
{
   1a644:	b530      	push	{r4, r5, lr}
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   1a646:	6905      	ldr	r5, [r0, #16]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   1a648:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   1a64a:	6dab      	ldr	r3, [r5, #88]	; 0x58
{
   1a64c:	b085      	sub	sp, #20
   1a64e:	b982      	cbnz	r2, 1a672 <transfer_next_chunk+0x2e>
	if (chunk_len > 0) {
   1a650:	bb73      	cbnz	r3, 1a6b0 <transfer_next_chunk+0x6c>
	int error = 0;
   1a652:	461c      	mov	r4, r3
	_spi_context_cs_control(ctx, on, false);
   1a654:	2200      	movs	r2, #0
   1a656:	4611      	mov	r1, r2
   1a658:	4628      	mov	r0, r5
   1a65a:	f008 f8ce 	bl	227fa <_spi_context_cs_control.isra.0>
	ctx->sync_status = status;
   1a65e:	63ac      	str	r4, [r5, #56]	; 0x38
	z_impl_k_sem_give(sem);
   1a660:	f105 0020 	add.w	r0, r5, #32
   1a664:	f003 f85a 	bl	1d71c <z_impl_k_sem_give>
	dev_data->busy = false;
   1a668:	2300      	movs	r3, #0
   1a66a:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
}
   1a66e:	b005      	add	sp, #20
   1a670:	bd30      	pop	{r4, r5, pc}
		return ctx->rx_len;
	} else if (!ctx->rx_len) {
   1a672:	4611      	mov	r1, r2
   1a674:	b113      	cbz	r3, 1a67c <transfer_next_chunk+0x38>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
   1a676:	429a      	cmp	r2, r3
   1a678:	bf28      	it	cs
   1a67a:	4619      	movcs	r1, r3
		xfer.p_tx_buffer = ctx->tx_buf;
   1a67c:	6cec      	ldr	r4, [r5, #76]	; 0x4c
		dev_data->chunk_len = chunk_len;
   1a67e:	6629      	str	r1, [r5, #96]	; 0x60
		xfer.p_tx_buffer = ctx->tx_buf;
   1a680:	9400      	str	r4, [sp, #0]
	return !!(ctx->tx_buf && ctx->tx_len);
   1a682:	b1bc      	cbz	r4, 1a6b4 <transfer_next_chunk+0x70>
   1a684:	2a00      	cmp	r2, #0
   1a686:	bf18      	it	ne
   1a688:	460a      	movne	r2, r1
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1a68a:	9201      	str	r2, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   1a68c:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   1a68e:	9202      	str	r2, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   1a690:	b192      	cbz	r2, 1a6b8 <transfer_next_chunk+0x74>
   1a692:	2b00      	cmp	r3, #0
   1a694:	bf18      	it	ne
   1a696:	460b      	movne	r3, r1
		result = nrfx_spi_xfer(&get_dev_config(dev)->spi, &xfer, 0);
   1a698:	6840      	ldr	r0, [r0, #4]
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1a69a:	9303      	str	r3, [sp, #12]
		result = nrfx_spi_xfer(&get_dev_config(dev)->spi, &xfer, 0);
   1a69c:	2200      	movs	r2, #0
   1a69e:	4669      	mov	r1, sp
   1a6a0:	f002 f918 	bl	1c8d4 <nrfx_spi_xfer>
		if (result == NRFX_SUCCESS) {
   1a6a4:	4b05      	ldr	r3, [pc, #20]	; (1a6bc <transfer_next_chunk+0x78>)
   1a6a6:	4298      	cmp	r0, r3
   1a6a8:	d0e1      	beq.n	1a66e <transfer_next_chunk+0x2a>
		error = -EIO;
   1a6aa:	f06f 0404 	mvn.w	r4, #4
   1a6ae:	e7d1      	b.n	1a654 <transfer_next_chunk+0x10>
   1a6b0:	4619      	mov	r1, r3
   1a6b2:	e7e3      	b.n	1a67c <transfer_next_chunk+0x38>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1a6b4:	4622      	mov	r2, r4
   1a6b6:	e7e8      	b.n	1a68a <transfer_next_chunk+0x46>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1a6b8:	4613      	mov	r3, r2
   1a6ba:	e7ed      	b.n	1a698 <transfer_next_chunk+0x54>
   1a6bc:	0bad0000 	.word	0x0bad0000

0001a6c0 <spi_nrfx_transceive>:
{
   1a6c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a6c4:	461e      	mov	r6, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1a6c6:	888b      	ldrh	r3, [r1, #4]
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   1a6c8:	6904      	ldr	r4, [r0, #16]
   1a6ca:	045b      	lsls	r3, r3, #17
{
   1a6cc:	4680      	mov	r8, r0
   1a6ce:	460d      	mov	r5, r1
   1a6d0:	4617      	mov	r7, r2
   1a6d2:	d42d      	bmi.n	1a730 <spi_nrfx_transceive+0x70>
	return z_impl_k_sem_take(sem, timeout);
   1a6d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1a6d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a6dc:	f104 0008 	add.w	r0, r4, #8
   1a6e0:	f003 f842 	bl	1d768 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   1a6e4:	6065      	str	r5, [r4, #4]
	struct spi_context *ctx = &get_dev_data(dev)->ctx;
   1a6e6:	f8d8 2010 	ldr.w	r2, [r8, #16]
	if (spi_context_configured(ctx, spi_cfg)) {
   1a6ea:	6813      	ldr	r3, [r2, #0]
   1a6ec:	429d      	cmp	r5, r3
   1a6ee:	f000 80b3 	beq.w	1a858 <spi_nrfx_transceive+0x198>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   1a6f2:	88ab      	ldrh	r3, [r5, #4]
   1a6f4:	07d8      	lsls	r0, r3, #31
   1a6f6:	d522      	bpl.n	1a73e <spi_nrfx_transceive+0x7e>
   1a6f8:	4a83      	ldr	r2, [pc, #524]	; (1a908 <spi_nrfx_transceive+0x248>)
   1a6fa:	4b84      	ldr	r3, [pc, #528]	; (1a90c <spi_nrfx_transceive+0x24c>)
		LOG_ERR("Slave mode is not supported on %s",
   1a6fc:	f8d8 1000 	ldr.w	r1, [r8]
   1a700:	4883      	ldr	r0, [pc, #524]	; (1a910 <spi_nrfx_transceive+0x250>)
   1a702:	1ad2      	subs	r2, r2, r3
   1a704:	08d2      	lsrs	r2, r2, #3
   1a706:	0192      	lsls	r2, r2, #6
   1a708:	f042 0201 	orr.w	r2, r2, #1
   1a70c:	f004 fa21 	bl	1eb52 <log_1>
		return -EINVAL;
   1a710:	f06f 0515 	mvn.w	r5, #21
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
   1a714:	6823      	ldr	r3, [r4, #0]
   1a716:	889b      	ldrh	r3, [r3, #4]
   1a718:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
   1a71c:	d104      	bne.n	1a728 <spi_nrfx_transceive+0x68>
		ctx->owner = NULL;
   1a71e:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   1a720:	f104 0008 	add.w	r0, r4, #8
   1a724:	f002 fffa 	bl	1d71c <z_impl_k_sem_give>
}
   1a728:	4628      	mov	r0, r5
   1a72a:	b003      	add	sp, #12
   1a72c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1a730:	6923      	ldr	r3, [r4, #16]
   1a732:	2b00      	cmp	r3, #0
   1a734:	d1ce      	bne.n	1a6d4 <spi_nrfx_transceive+0x14>
		(k_sem_count_get(&ctx->lock) == 0) &&
   1a736:	6863      	ldr	r3, [r4, #4]
   1a738:	4299      	cmp	r1, r3
   1a73a:	d1cb      	bne.n	1a6d4 <spi_nrfx_transceive+0x14>
   1a73c:	e7d3      	b.n	1a6e6 <spi_nrfx_transceive+0x26>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
   1a73e:	0719      	lsls	r1, r3, #28
   1a740:	d50a      	bpl.n	1a758 <spi_nrfx_transceive+0x98>
   1a742:	4971      	ldr	r1, [pc, #452]	; (1a908 <spi_nrfx_transceive+0x248>)
   1a744:	4b71      	ldr	r3, [pc, #452]	; (1a90c <spi_nrfx_transceive+0x24c>)
		LOG_ERR("Loopback mode is not supported");
   1a746:	4873      	ldr	r0, [pc, #460]	; (1a914 <spi_nrfx_transceive+0x254>)
   1a748:	1ac9      	subs	r1, r1, r3
   1a74a:	08c9      	lsrs	r1, r1, #3
   1a74c:	0189      	lsls	r1, r1, #6
   1a74e:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Word sizes other than 8 bits"
   1a752:	f004 f9f1 	bl	1eb38 <log_0>
   1a756:	e7db      	b.n	1a710 <spi_nrfx_transceive+0x50>
	if ((spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
   1a758:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
   1a75c:	d008      	beq.n	1a770 <spi_nrfx_transceive+0xb0>
   1a75e:	496a      	ldr	r1, [pc, #424]	; (1a908 <spi_nrfx_transceive+0x248>)
   1a760:	4b6a      	ldr	r3, [pc, #424]	; (1a90c <spi_nrfx_transceive+0x24c>)
		LOG_ERR("Only single line mode is supported");
   1a762:	486d      	ldr	r0, [pc, #436]	; (1a918 <spi_nrfx_transceive+0x258>)
   1a764:	1ac9      	subs	r1, r1, r3
   1a766:	08c9      	lsrs	r1, r1, #3
   1a768:	0189      	lsls	r1, r1, #6
   1a76a:	f041 0101 	orr.w	r1, r1, #1
   1a76e:	e7f0      	b.n	1a752 <spi_nrfx_transceive+0x92>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   1a770:	f3c3 1345 	ubfx	r3, r3, #5, #6
   1a774:	2b08      	cmp	r3, #8
   1a776:	d008      	beq.n	1a78a <spi_nrfx_transceive+0xca>
   1a778:	4963      	ldr	r1, [pc, #396]	; (1a908 <spi_nrfx_transceive+0x248>)
   1a77a:	4b64      	ldr	r3, [pc, #400]	; (1a90c <spi_nrfx_transceive+0x24c>)
		LOG_ERR("Word sizes other than 8 bits"
   1a77c:	4867      	ldr	r0, [pc, #412]	; (1a91c <spi_nrfx_transceive+0x25c>)
   1a77e:	1ac9      	subs	r1, r1, r3
   1a780:	08c9      	lsrs	r1, r1, #3
   1a782:	0189      	lsls	r1, r1, #6
   1a784:	f041 0101 	orr.w	r1, r1, #1
   1a788:	e7e3      	b.n	1a752 <spi_nrfx_transceive+0x92>
	if (spi_cfg->frequency < 125000) {
   1a78a:	6829      	ldr	r1, [r5, #0]
   1a78c:	4b64      	ldr	r3, [pc, #400]	; (1a920 <spi_nrfx_transceive+0x260>)
   1a78e:	4299      	cmp	r1, r3
   1a790:	d808      	bhi.n	1a7a4 <spi_nrfx_transceive+0xe4>
   1a792:	495d      	ldr	r1, [pc, #372]	; (1a908 <spi_nrfx_transceive+0x248>)
   1a794:	4b5d      	ldr	r3, [pc, #372]	; (1a90c <spi_nrfx_transceive+0x24c>)
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   1a796:	4863      	ldr	r0, [pc, #396]	; (1a924 <spi_nrfx_transceive+0x264>)
   1a798:	1ac9      	subs	r1, r1, r3
   1a79a:	08c9      	lsrs	r1, r1, #3
   1a79c:	0189      	lsls	r1, r1, #6
   1a79e:	f041 0101 	orr.w	r1, r1, #1
   1a7a2:	e7d6      	b.n	1a752 <spi_nrfx_transceive+0x92>
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
   1a7a4:	68ab      	ldr	r3, [r5, #8]
	const nrfx_spi_t *spi = &get_dev_config(dev)->spi;
   1a7a6:	f8d8 9004 	ldr.w	r9, [r8, #4]
	ctx->config = spi_cfg;
   1a7aa:	6015      	str	r5, [r2, #0]
   1a7ac:	2b00      	cmp	r3, #0
   1a7ae:	d07d      	beq.n	1a8ac <spi_nrfx_transceive+0x1ec>
   1a7b0:	6818      	ldr	r0, [r3, #0]
   1a7b2:	2800      	cmp	r0, #0
   1a7b4:	d07a      	beq.n	1a8ac <spi_nrfx_transceive+0x1ec>
				   ctx->config->cs->gpio_dt_flags |
   1a7b6:	f893 a009 	ldrb.w	sl, [r3, #9]
		gpio_pin_configure(ctx->config->cs->gpio_dev,
   1a7ba:	7a19      	ldrb	r1, [r3, #8]
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
   1a7bc:	f8d0 b010 	ldr.w	fp, [r0, #16]
		 != (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH),
		 "Output cannot be initialized low and high");

	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1a7c0:	f01a 0f01 	tst.w	sl, #1
   1a7c4:	bf0c      	ite	eq
   1a7c6:	f44a 5ab0 	orreq.w	sl, sl, #5632	; 0x1600
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1a7ca:	f48a 5ad0 	eorne.w	sl, sl, #6656	; 0x1a00
	return api->pin_configure(port, pin, flags);
   1a7ce:	6883      	ldr	r3, [r0, #8]
   1a7d0:	9101      	str	r1, [sp, #4]
   1a7d2:	681b      	ldr	r3, [r3, #0]
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   1a7d4:	f42a 5280 	bic.w	r2, sl, #4096	; 0x1000
	return api->pin_configure(port, pin, flags);
   1a7d8:	4798      	blx	r3
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_config(port, pin, flags);
	if (ret != 0) {
   1a7da:	b968      	cbnz	r0, 1a7f8 <spi_nrfx_transceive+0x138>
		return ret;
	}

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1a7dc:	9901      	ldr	r1, [sp, #4]
   1a7de:	f8db 2000 	ldr.w	r2, [fp]
   1a7e2:	2301      	movs	r3, #1
   1a7e4:	fa03 f101 	lsl.w	r1, r3, r1
   1a7e8:	f01a 0f01 	tst.w	sl, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1a7ec:	bf14      	ite	ne
   1a7ee:	4311      	orrne	r1, r2
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1a7f0:	ea22 0101 	biceq.w	r1, r2, r1
   1a7f4:	f8cb 1000 	str.w	r1, [fp]
	nrf_spi_configure(spi->p_reg,
   1a7f8:	88a9      	ldrh	r1, [r5, #4]
   1a7fa:	f8d9 2000 	ldr.w	r2, [r9]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   1a7fe:	0788      	lsls	r0, r1, #30
   1a800:	f001 0304 	and.w	r3, r1, #4
   1a804:	d55d      	bpl.n	1a8c2 <spi_nrfx_transceive+0x202>
			return NRF_SPI_MODE_2;
   1a806:	2b00      	cmp	r3, #0
   1a808:	bf14      	ite	ne
   1a80a:	2303      	movne	r3, #3
   1a80c:	2302      	moveq	r3, #2
                                         nrf_spi_mode_t      spi_mode,
                                         nrf_spi_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPI_BIT_ORDER_MSB_FIRST ?
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
    switch (spi_mode)
   1a80e:	2b02      	cmp	r3, #2
	if (operation & SPI_TRANSFER_LSB) {
   1a810:	f3c1 1100 	ubfx	r1, r1, #4, #1
   1a814:	d059      	beq.n	1a8ca <spi_nrfx_transceive+0x20a>
   1a816:	2b03      	cmp	r3, #3
   1a818:	d05a      	beq.n	1a8d0 <spi_nrfx_transceive+0x210>
   1a81a:	2b01      	cmp	r3, #1
   1a81c:	d101      	bne.n	1a822 <spi_nrfx_transceive+0x162>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Leading    << SPI_CONFIG_CPHA_Pos);
        break;

    case NRF_SPI_MODE_1:
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
   1a81e:	f041 0102 	orr.w	r1, r1, #2
	if (frequency < 250000) {
   1a822:	4b41      	ldr	r3, [pc, #260]	; (1a928 <spi_nrfx_transceive+0x268>)
    case NRF_SPI_MODE_3:
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Trailing   << SPI_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   1a824:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
	nrf_spi_frequency_set(spi->p_reg,
   1a828:	6829      	ldr	r1, [r5, #0]
	if (frequency < 250000) {
   1a82a:	4299      	cmp	r1, r3
   1a82c:	d953      	bls.n	1a8d6 <spi_nrfx_transceive+0x216>
	} else if (frequency < 500000) {
   1a82e:	4b3f      	ldr	r3, [pc, #252]	; (1a92c <spi_nrfx_transceive+0x26c>)
   1a830:	4299      	cmp	r1, r3
   1a832:	d953      	bls.n	1a8dc <spi_nrfx_transceive+0x21c>
	} else if (frequency < 1000000) {
   1a834:	4b3e      	ldr	r3, [pc, #248]	; (1a930 <spi_nrfx_transceive+0x270>)
   1a836:	4299      	cmp	r1, r3
   1a838:	d953      	bls.n	1a8e2 <spi_nrfx_transceive+0x222>
	} else if (frequency < 2000000) {
   1a83a:	4b3e      	ldr	r3, [pc, #248]	; (1a934 <spi_nrfx_transceive+0x274>)
   1a83c:	4299      	cmp	r1, r3
   1a83e:	d953      	bls.n	1a8e8 <spi_nrfx_transceive+0x228>
	} else if (frequency < 4000000) {
   1a840:	4b3d      	ldr	r3, [pc, #244]	; (1a938 <spi_nrfx_transceive+0x278>)
   1a842:	4299      	cmp	r1, r3
   1a844:	d953      	bls.n	1a8ee <spi_nrfx_transceive+0x22e>
		return NRF_SPI_FREQ_8M;
   1a846:	4b3d      	ldr	r3, [pc, #244]	; (1a93c <spi_nrfx_transceive+0x27c>)
   1a848:	4299      	cmp	r1, r3
   1a84a:	bf34      	ite	cc
   1a84c:	f04f 4180 	movcc.w	r1, #1073741824	; 0x40000000
   1a850:	f04f 4100 	movcs.w	r1, #2147483648	; 0x80000000
    p_reg->FREQUENCY = (uint32_t)frequency;
   1a854:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
		dev_data->busy = true;
   1a858:	2301      	movs	r3, #1
   1a85a:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	if (tx_bufs) {
   1a85e:	2f00      	cmp	r7, #0
   1a860:	d048      	beq.n	1a8f4 <spi_nrfx_transceive+0x234>
		ctx->current_tx = tx_bufs->buffers;
   1a862:	683b      	ldr	r3, [r7, #0]
		ctx->tx_count = tx_bufs->count;
   1a864:	687a      	ldr	r2, [r7, #4]
		ctx->current_tx = tx_bufs->buffers;
   1a866:	63e3      	str	r3, [r4, #60]	; 0x3c
		ctx->tx_count = tx_bufs->count;
   1a868:	6422      	str	r2, [r4, #64]	; 0x40
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   1a86a:	681a      	ldr	r2, [r3, #0]
		ctx->tx_len = ctx->current_tx->len / dfs;
   1a86c:	685b      	ldr	r3, [r3, #4]
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   1a86e:	64e2      	str	r2, [r4, #76]	; 0x4c
		ctx->tx_len = ctx->current_tx->len / dfs;
   1a870:	6523      	str	r3, [r4, #80]	; 0x50
	if (rx_bufs) {
   1a872:	2e00      	cmp	r6, #0
   1a874:	d043      	beq.n	1a8fe <spi_nrfx_transceive+0x23e>
		ctx->current_rx = rx_bufs->buffers;
   1a876:	6833      	ldr	r3, [r6, #0]
		ctx->rx_count = rx_bufs->count;
   1a878:	6872      	ldr	r2, [r6, #4]
		ctx->current_rx = rx_bufs->buffers;
   1a87a:	6463      	str	r3, [r4, #68]	; 0x44
		ctx->rx_count = rx_bufs->count;
   1a87c:	64a2      	str	r2, [r4, #72]	; 0x48
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   1a87e:	681a      	ldr	r2, [r3, #0]
		ctx->rx_len = ctx->current_rx->len / dfs;
   1a880:	685b      	ldr	r3, [r3, #4]
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   1a882:	6562      	str	r2, [r4, #84]	; 0x54
		ctx->rx_len = ctx->current_rx->len / dfs;
   1a884:	65a3      	str	r3, [r4, #88]	; 0x58
	ctx->sync_status = 0;
   1a886:	2200      	movs	r2, #0
   1a888:	63a2      	str	r2, [r4, #56]	; 0x38
	_spi_context_cs_control(ctx, on, false);
   1a88a:	2101      	movs	r1, #1
   1a88c:	4620      	mov	r0, r4
   1a88e:	f007 ffb4 	bl	227fa <_spi_context_cs_control.isra.0>
		transfer_next_chunk(dev);
   1a892:	4640      	mov	r0, r8
   1a894:	f7ff fed6 	bl	1a644 <transfer_next_chunk>
	return z_impl_k_sem_take(sem, timeout);
   1a898:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1a89c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a8a0:	f104 0020 	add.w	r0, r4, #32
   1a8a4:	f002 ff60 	bl	1d768 <z_impl_k_sem_take>
	status = ctx->sync_status;
   1a8a8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	return status;
   1a8aa:	e733      	b.n	1a714 <spi_nrfx_transceive+0x54>
   1a8ac:	4b17      	ldr	r3, [pc, #92]	; (1a90c <spi_nrfx_transceive+0x24c>)
   1a8ae:	4916      	ldr	r1, [pc, #88]	; (1a908 <spi_nrfx_transceive+0x248>)
		LOG_INF("CS control inhibited (no GPIO device)");
   1a8b0:	4823      	ldr	r0, [pc, #140]	; (1a940 <spi_nrfx_transceive+0x280>)
   1a8b2:	1ac9      	subs	r1, r1, r3
   1a8b4:	08c9      	lsrs	r1, r1, #3
   1a8b6:	0189      	lsls	r1, r1, #6
   1a8b8:	f041 0103 	orr.w	r1, r1, #3
   1a8bc:	f004 f93c 	bl	1eb38 <log_0>
   1a8c0:	e79a      	b.n	1a7f8 <spi_nrfx_transceive+0x138>
			return NRF_SPI_MODE_0;
   1a8c2:	3b00      	subs	r3, #0
   1a8c4:	bf18      	it	ne
   1a8c6:	2301      	movne	r3, #1
   1a8c8:	e7a1      	b.n	1a80e <spi_nrfx_transceive+0x14e>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   1a8ca:	f041 0104 	orr.w	r1, r1, #4
        break;
   1a8ce:	e7a8      	b.n	1a822 <spi_nrfx_transceive+0x162>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   1a8d0:	f041 0106 	orr.w	r1, r1, #6
        break;
   1a8d4:	e7a5      	b.n	1a822 <spi_nrfx_transceive+0x162>
		return NRF_SPI_FREQ_125K;
   1a8d6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   1a8da:	e7bb      	b.n	1a854 <spi_nrfx_transceive+0x194>
		return NRF_SPI_FREQ_250K;
   1a8dc:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   1a8e0:	e7b8      	b.n	1a854 <spi_nrfx_transceive+0x194>
		return NRF_SPI_FREQ_500K;
   1a8e2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   1a8e6:	e7b5      	b.n	1a854 <spi_nrfx_transceive+0x194>
		return NRF_SPI_FREQ_1M;
   1a8e8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   1a8ec:	e7b2      	b.n	1a854 <spi_nrfx_transceive+0x194>
		return NRF_SPI_FREQ_2M;
   1a8ee:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   1a8f2:	e7af      	b.n	1a854 <spi_nrfx_transceive+0x194>
		ctx->tx_count = 0;
   1a8f4:	e9c4 770f 	strd	r7, r7, [r4, #60]	; 0x3c
		ctx->tx_len = 0;
   1a8f8:	e9c4 7713 	strd	r7, r7, [r4, #76]	; 0x4c
   1a8fc:	e7b9      	b.n	1a872 <spi_nrfx_transceive+0x1b2>
		ctx->rx_count = 0;
   1a8fe:	e9c4 6611 	strd	r6, r6, [r4, #68]	; 0x44
		ctx->rx_len = 0;
   1a902:	e9c4 6615 	strd	r6, r6, [r4, #84]	; 0x54
   1a906:	e7be      	b.n	1a886 <spi_nrfx_transceive+0x1c6>
   1a908:	00023a94 	.word	0x00023a94
   1a90c:	0002393c 	.word	0x0002393c
   1a910:	000271e3 	.word	0x000271e3
   1a914:	00027205 	.word	0x00027205
   1a918:	00027224 	.word	0x00027224
   1a91c:	00027247 	.word	0x00027247
   1a920:	0001e847 	.word	0x0001e847
   1a924:	00027276 	.word	0x00027276
   1a928:	0003d08f 	.word	0x0003d08f
   1a92c:	0007a11f 	.word	0x0007a11f
   1a930:	000f423f 	.word	0x000f423f
   1a934:	001e847f 	.word	0x001e847f
   1a938:	003d08ff 	.word	0x003d08ff
   1a93c:	007a1200 	.word	0x007a1200
   1a940:	000272a7 	.word	0x000272a7

0001a944 <event_handler>:
{
   1a944:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
   1a946:	7803      	ldrb	r3, [r0, #0]
{
   1a948:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
   1a94a:	2b00      	cmp	r3, #0
   1a94c:	d14e      	bne.n	1a9ec <event_handler+0xa8>
	if (!ctx->tx_len) {
   1a94e:	6d0b      	ldr	r3, [r1, #80]	; 0x50
   1a950:	b163      	cbz	r3, 1a96c <event_handler+0x28>
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   1a952:	6e0a      	ldr	r2, [r1, #96]	; 0x60
	if (len > ctx->tx_len) {
   1a954:	429a      	cmp	r2, r3
   1a956:	d91d      	bls.n	1a994 <event_handler+0x50>
   1a958:	4925      	ldr	r1, [pc, #148]	; (1a9f0 <event_handler+0xac>)
   1a95a:	4b26      	ldr	r3, [pc, #152]	; (1a9f4 <event_handler+0xb0>)
		LOG_ERR("Update exceeds current buffer");
   1a95c:	4826      	ldr	r0, [pc, #152]	; (1a9f8 <event_handler+0xb4>)
   1a95e:	1ac9      	subs	r1, r1, r3
   1a960:	08c9      	lsrs	r1, r1, #3
   1a962:	0189      	lsls	r1, r1, #6
   1a964:	f041 0101 	orr.w	r1, r1, #1
   1a968:	f004 f8e6 	bl	1eb38 <log_0>
	if (!ctx->rx_len) {
   1a96c:	6da3      	ldr	r3, [r4, #88]	; 0x58
   1a96e:	b163      	cbz	r3, 1a98a <event_handler+0x46>
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   1a970:	6e22      	ldr	r2, [r4, #96]	; 0x60
	if (len > ctx->rx_len) {
   1a972:	429a      	cmp	r2, r3
   1a974:	d924      	bls.n	1a9c0 <event_handler+0x7c>
   1a976:	491e      	ldr	r1, [pc, #120]	; (1a9f0 <event_handler+0xac>)
   1a978:	4b1e      	ldr	r3, [pc, #120]	; (1a9f4 <event_handler+0xb0>)
		LOG_ERR("Update exceeds current buffer");
   1a97a:	481f      	ldr	r0, [pc, #124]	; (1a9f8 <event_handler+0xb4>)
   1a97c:	1ac9      	subs	r1, r1, r3
   1a97e:	08c9      	lsrs	r1, r1, #3
   1a980:	0189      	lsls	r1, r1, #6
   1a982:	f041 0101 	orr.w	r1, r1, #1
   1a986:	f004 f8d7 	bl	1eb38 <log_0>
		transfer_next_chunk(dev_data->dev);
   1a98a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
}
   1a98c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
   1a990:	f7ff be58 	b.w	1a644 <transfer_next_chunk>
	ctx->tx_len -= len;
   1a994:	1a9b      	subs	r3, r3, r2
   1a996:	650b      	str	r3, [r1, #80]	; 0x50
	if (!ctx->tx_len) {
   1a998:	b963      	cbnz	r3, 1a9b4 <event_handler+0x70>
		ctx->tx_count--;
   1a99a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   1a99c:	3b01      	subs	r3, #1
   1a99e:	640b      	str	r3, [r1, #64]	; 0x40
		if (ctx->tx_count) {
   1a9a0:	b163      	cbz	r3, 1a9bc <event_handler+0x78>
			ctx->current_tx++;
   1a9a2:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   1a9a4:	f103 0208 	add.w	r2, r3, #8
   1a9a8:	63ca      	str	r2, [r1, #60]	; 0x3c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   1a9aa:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
   1a9ac:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   1a9ae:	64ca      	str	r2, [r1, #76]	; 0x4c
			ctx->tx_len = ctx->current_tx->len / dfs;
   1a9b0:	650b      	str	r3, [r1, #80]	; 0x50
   1a9b2:	e7db      	b.n	1a96c <event_handler+0x28>
	} else if (ctx->tx_buf) {
   1a9b4:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
   1a9b6:	2b00      	cmp	r3, #0
   1a9b8:	d0d8      	beq.n	1a96c <event_handler+0x28>
		ctx->tx_buf += dfs * len;
   1a9ba:	4413      	add	r3, r2
   1a9bc:	64e3      	str	r3, [r4, #76]	; 0x4c
   1a9be:	e7d5      	b.n	1a96c <event_handler+0x28>
	ctx->rx_len -= len;
   1a9c0:	1a9b      	subs	r3, r3, r2
   1a9c2:	65a3      	str	r3, [r4, #88]	; 0x58
	if (!ctx->rx_len) {
   1a9c4:	b963      	cbnz	r3, 1a9e0 <event_handler+0x9c>
		ctx->rx_count--;
   1a9c6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1a9c8:	3b01      	subs	r3, #1
   1a9ca:	64a3      	str	r3, [r4, #72]	; 0x48
		if (ctx->rx_count) {
   1a9cc:	b163      	cbz	r3, 1a9e8 <event_handler+0xa4>
			ctx->current_rx++;
   1a9ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1a9d0:	f103 0208 	add.w	r2, r3, #8
   1a9d4:	6462      	str	r2, [r4, #68]	; 0x44
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   1a9d6:	689a      	ldr	r2, [r3, #8]
			ctx->rx_len = ctx->current_rx->len / dfs;
   1a9d8:	68db      	ldr	r3, [r3, #12]
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   1a9da:	6562      	str	r2, [r4, #84]	; 0x54
			ctx->rx_len = ctx->current_rx->len / dfs;
   1a9dc:	65a3      	str	r3, [r4, #88]	; 0x58
   1a9de:	e7d4      	b.n	1a98a <event_handler+0x46>
	} else if (ctx->rx_buf) {
   1a9e0:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1a9e2:	2b00      	cmp	r3, #0
   1a9e4:	d0d1      	beq.n	1a98a <event_handler+0x46>
		ctx->rx_buf += dfs * len;
   1a9e6:	4413      	add	r3, r2
   1a9e8:	6563      	str	r3, [r4, #84]	; 0x54
   1a9ea:	e7ce      	b.n	1a98a <event_handler+0x46>
}
   1a9ec:	bd10      	pop	{r4, pc}
   1a9ee:	bf00      	nop
   1a9f0:	00023a94 	.word	0x00023a94
   1a9f4:	0002393c 	.word	0x0002393c
   1a9f8:	000272cd 	.word	0x000272cd

0001a9fc <timer_callback>:
	return k_work_submit_to_queue(&k_sys_work_q, work);
   1a9fc:	4901      	ldr	r1, [pc, #4]	; (1aa04 <timer_callback+0x8>)
   1a9fe:	4802      	ldr	r0, [pc, #8]	; (1aa08 <timer_callback+0xc>)
   1aa00:	f008 bbf6 	b.w	231f0 <k_work_submit_to_queue>
   1aa04:	200005fc 	.word	0x200005fc
   1aa08:	20001390 	.word	0x20001390

0001aa0c <RtcGetTimerElapsedTime>:
{
	return k_uptime_get_32();
}

uint32_t RtcGetTimerElapsedTime(void)
{
   1aa0c:	b508      	push	{r3, lr}
	return (uint32_t)k_uptime_get();
   1aa0e:	f007 ff3d 	bl	2288c <k_uptime_get>
	return (k_uptime_get_32() - saved_time);
   1aa12:	4b02      	ldr	r3, [pc, #8]	; (1aa1c <RtcGetTimerElapsedTime+0x10>)
   1aa14:	681b      	ldr	r3, [r3, #0]
}
   1aa16:	1ac0      	subs	r0, r0, r3
   1aa18:	bd08      	pop	{r3, pc}
   1aa1a:	bf00      	nop
   1aa1c:	2000284c 	.word	0x2000284c

0001aa20 <RtcStopAlarm>:
	z_impl_k_timer_stop(timer);
   1aa20:	4801      	ldr	r0, [pc, #4]	; (1aa28 <RtcStopAlarm+0x8>)
   1aa22:	f008 bcb1 	b.w	23388 <z_impl_k_timer_stop>
   1aa26:	bf00      	nop
   1aa28:	200007b0 	.word	0x200007b0

0001aa2c <RtcSetAlarm>:
{
	k_timer_stop(&lora_timer);
}

void RtcSetAlarm(uint32_t timeout)
{
   1aa2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1aa2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1aa32:	f240 34e7 	movw	r4, #999	; 0x3e7
   1aa36:	2500      	movs	r5, #0
   1aa38:	fbe1 4500 	umlal	r4, r5, r1, r0
   1aa3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1aa40:	2300      	movs	r3, #0
   1aa42:	4620      	mov	r0, r4
   1aa44:	4629      	mov	r1, r5
   1aa46:	f7e5 fff9 	bl	a3c <__aeabi_uldivmod>
   1aa4a:	4602      	mov	r2, r0
   1aa4c:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   1aa4e:	2100      	movs	r1, #0
   1aa50:	2000      	movs	r0, #0
   1aa52:	e9cd 0100 	strd	r0, r1, [sp]
   1aa56:	4802      	ldr	r0, [pc, #8]	; (1aa60 <RtcSetAlarm+0x34>)
   1aa58:	f003 fab8 	bl	1dfcc <z_impl_k_timer_start>
	k_timer_start(&lora_timer, K_MSEC(timeout), K_NO_WAIT);
}
   1aa5c:	b003      	add	sp, #12
   1aa5e:	bd30      	pop	{r4, r5, pc}
   1aa60:	200007b0 	.word	0x200007b0

0001aa64 <RtcSetTimerContext>:

uint32_t RtcSetTimerContext(void)
{
   1aa64:	b508      	push	{r3, lr}
   1aa66:	f007 ff11 	bl	2288c <k_uptime_get>
	saved_time = k_uptime_get_32();
   1aa6a:	4b01      	ldr	r3, [pc, #4]	; (1aa70 <RtcSetTimerContext+0xc>)
   1aa6c:	6018      	str	r0, [r3, #0]

	return saved_time;
}
   1aa6e:	bd08      	pop	{r3, pc}
   1aa70:	2000284c 	.word	0x2000284c

0001aa74 <RtcGetTimerContext>:

/* For us, 1 tick = 1 milli second. So no need to do any conversion here */
uint32_t RtcGetTimerContext(void)
{
	return saved_time;
}
   1aa74:	4b01      	ldr	r3, [pc, #4]	; (1aa7c <RtcGetTimerContext+0x8>)
   1aa76:	6818      	ldr	r0, [r3, #0]
   1aa78:	4770      	bx	lr
   1aa7a:	bf00      	nop
   1aa7c:	2000284c 	.word	0x2000284c

0001aa80 <sx12xx_ev_tx_done>:
	k_sem_give(&dev_data.data_sem);
}

static void sx12xx_ev_tx_done(void)
{
	Radio.Sleep();
   1aa80:	4b01      	ldr	r3, [pc, #4]	; (1aa88 <sx12xx_ev_tx_done+0x8>)
   1aa82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1aa84:	4718      	bx	r3
   1aa86:	bf00      	nop
   1aa88:	000251ec 	.word	0x000251ec

0001aa8c <sx12xx_ev_rx_done>:
{
   1aa8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1aa8e:	461c      	mov	r4, r3
	Radio.Sleep();
   1aa90:	4b08      	ldr	r3, [pc, #32]	; (1aab4 <sx12xx_ev_rx_done+0x28>)
   1aa92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
   1aa94:	4607      	mov	r7, r0
   1aa96:	460e      	mov	r6, r1
   1aa98:	4615      	mov	r5, r2
	Radio.Sleep();
   1aa9a:	4798      	blx	r3
	dev_data.rx_buf = payload;
   1aa9c:	4806      	ldr	r0, [pc, #24]	; (1aab8 <sx12xx_ev_rx_done+0x2c>)
   1aa9e:	6347      	str	r7, [r0, #52]	; 0x34
	dev_data.rx_len = size;
   1aaa0:	f880 6038 	strb.w	r6, [r0, #56]	; 0x38
	dev_data.rssi = rssi;
   1aaa4:	8745      	strh	r5, [r0, #58]	; 0x3a
	dev_data.snr = snr;
   1aaa6:	f880 4039 	strb.w	r4, [r0, #57]	; 0x39
}
   1aaaa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_impl_k_sem_give(sem);
   1aaae:	f002 be35 	b.w	1d71c <z_impl_k_sem_give>
   1aab2:	bf00      	nop
   1aab4:	000251ec 	.word	0x000251ec
   1aab8:	20002850 	.word	0x20002850

0001aabc <__sx12xx_configure_pin>:
{
   1aabc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1aac0:	4606      	mov	r6, r0
   1aac2:	460f      	mov	r7, r1
   1aac4:	4690      	mov	r8, r2
   1aac6:	461c      	mov	r4, r3
   1aac8:	4608      	mov	r0, r1
   1aaca:	f001 ffc1 	bl	1ca50 <z_impl_device_get_binding>
   1aace:	4605      	mov	r5, r0
	*dev = device_get_binding(controller);
   1aad0:	6030      	str	r0, [r6, #0]
	if (!(*dev)) {
   1aad2:	b980      	cbnz	r0, 1aaf6 <__sx12xx_configure_pin+0x3a>
   1aad4:	4b2f      	ldr	r3, [pc, #188]	; (1ab94 <__sx12xx_configure_pin+0xd8>)
   1aad6:	4a30      	ldr	r2, [pc, #192]	; (1ab98 <__sx12xx_configure_pin+0xdc>)
		LOG_ERR("Cannot get pointer to %s device", controller);
   1aad8:	4830      	ldr	r0, [pc, #192]	; (1ab9c <__sx12xx_configure_pin+0xe0>)
   1aada:	1ad2      	subs	r2, r2, r3
   1aadc:	08d2      	lsrs	r2, r2, #3
   1aade:	0192      	lsls	r2, r2, #6
   1aae0:	f042 0201 	orr.w	r2, r2, #1
   1aae4:	4639      	mov	r1, r7
   1aae6:	f004 f834 	bl	1eb52 <log_1>
		return -EIO;
   1aaea:	f06f 0604 	mvn.w	r6, #4
}
   1aaee:	4630      	mov	r0, r6
   1aaf0:	b002      	add	sp, #8
   1aaf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   1aaf6:	04e6      	lsls	r6, r4, #19
	const struct gpio_driver_api *api =
   1aaf8:	f8d0 a008 	ldr.w	sl, [r0, #8]
	struct gpio_driver_data *data =
   1aafc:	f8d0 9010 	ldr.w	r9, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   1ab00:	d506      	bpl.n	1ab10 <__sx12xx_configure_pin+0x54>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
   1ab02:	f414 6f40 	tst.w	r4, #3072	; 0xc00
   1ab06:	d003      	beq.n	1ab10 <__sx12xx_configure_pin+0x54>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1ab08:	07e0      	lsls	r0, r4, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1ab0a:	bf48      	it	mi
   1ab0c:	f484 6440 	eormi.w	r4, r4, #3072	; 0xc00
	return api->pin_configure(port, pin, flags);
   1ab10:	68ab      	ldr	r3, [r5, #8]
   1ab12:	f424 5280 	bic.w	r2, r4, #4096	; 0x1000
   1ab16:	681b      	ldr	r3, [r3, #0]
   1ab18:	4641      	mov	r1, r8
   1ab1a:	4628      	mov	r0, r5
   1ab1c:	4798      	blx	r3
	if (ret != 0) {
   1ab1e:	4606      	mov	r6, r0
   1ab20:	bb38      	cbnz	r0, 1ab72 <__sx12xx_configure_pin+0xb6>
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1ab22:	f8d9 2000 	ldr.w	r2, [r9]
   1ab26:	2301      	movs	r3, #1
   1ab28:	07e1      	lsls	r1, r4, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1ab2a:	fa03 f308 	lsl.w	r3, r3, r8
   1ab2e:	bf4c      	ite	mi
   1ab30:	431a      	orrmi	r2, r3
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1ab32:	439a      	bicpl	r2, r3
	}
	if (((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U)
   1ab34:	f414 4fc0 	tst.w	r4, #24576	; 0x6000
   1ab38:	f8c9 2000 	str.w	r2, [r9]
   1ab3c:	d0d7      	beq.n	1aaee <__sx12xx_configure_pin+0x32>
	    && (api->pin_interrupt_configure != NULL)) {
   1ab3e:	f8da 2018 	ldr.w	r2, [sl, #24]
   1ab42:	2a00      	cmp	r2, #0
   1ab44:	d0d3      	beq.n	1aaee <__sx12xx_configure_pin+0x32>
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   1ab46:	0420      	lsls	r0, r4, #16
	const struct gpio_driver_api *api =
   1ab48:	68a9      	ldr	r1, [r5, #8]
		flags &= ~GPIO_INT_DEBOUNCE;
   1ab4a:	f424 2201 	bic.w	r2, r4, #528384	; 0x81000
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   1ab4e:	d505      	bpl.n	1ab5c <__sx12xx_configure_pin+0xa0>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   1ab50:	6928      	ldr	r0, [r5, #16]
   1ab52:	6800      	ldr	r0, [r0, #0]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   1ab54:	4203      	tst	r3, r0
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   1ab56:	bf18      	it	ne
   1ab58:	f482 22c0 	eorne.w	r2, r2, #393216	; 0x60000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   1ab5c:	698c      	ldr	r4, [r1, #24]
   1ab5e:	f402 23c0 	and.w	r3, r2, #393216	; 0x60000
   1ab62:	4641      	mov	r1, r8
   1ab64:	f402 32b0 	and.w	r2, r2, #90112	; 0x16000
   1ab68:	4628      	mov	r0, r5
   1ab6a:	47a0      	blx	r4
	if (err) {
   1ab6c:	2800      	cmp	r0, #0
   1ab6e:	d0be      	beq.n	1aaee <__sx12xx_configure_pin+0x32>
   1ab70:	4606      	mov	r6, r0
   1ab72:	4a08      	ldr	r2, [pc, #32]	; (1ab94 <__sx12xx_configure_pin+0xd8>)
   1ab74:	4b08      	ldr	r3, [pc, #32]	; (1ab98 <__sx12xx_configure_pin+0xdc>)
		LOG_ERR("Cannot configure gpio %s %d: %d", controller, pin,
   1ab76:	480a      	ldr	r0, [pc, #40]	; (1aba0 <__sx12xx_configure_pin+0xe4>)
   1ab78:	1a9b      	subs	r3, r3, r2
   1ab7a:	08db      	lsrs	r3, r3, #3
   1ab7c:	019b      	lsls	r3, r3, #6
   1ab7e:	f043 0301 	orr.w	r3, r3, #1
   1ab82:	f8ad 3000 	strh.w	r3, [sp]
   1ab86:	4642      	mov	r2, r8
   1ab88:	4633      	mov	r3, r6
   1ab8a:	4639      	mov	r1, r7
   1ab8c:	f004 f80e 	bl	1ebac <log_3>
		return err;
   1ab90:	e7ad      	b.n	1aaee <__sx12xx_configure_pin+0x32>
   1ab92:	bf00      	nop
   1ab94:	0002393c 	.word	0x0002393c
   1ab98:	00023aa4 	.word	0x00023aa4
   1ab9c:	000272fe 	.word	0x000272fe
   1aba0:	0002731e 	.word	0x0002731e

0001aba4 <sx12xx_lora_send>:
}

int sx12xx_lora_send(const struct device *dev, uint8_t *data,
		     uint32_t data_len)
{
   1aba4:	b570      	push	{r4, r5, r6, lr}
	Radio.SetMaxPayloadLength(MODEM_LORA, data_len);
   1aba6:	4e06      	ldr	r6, [pc, #24]	; (1abc0 <sx12xx_lora_send+0x1c>)
   1aba8:	b2d4      	uxtb	r4, r2
   1abaa:	6d73      	ldr	r3, [r6, #84]	; 0x54
{
   1abac:	460d      	mov	r5, r1
	Radio.SetMaxPayloadLength(MODEM_LORA, data_len);
   1abae:	2001      	movs	r0, #1
   1abb0:	4621      	mov	r1, r4
   1abb2:	4798      	blx	r3

	Radio.Send(data, data_len);
   1abb4:	4628      	mov	r0, r5
   1abb6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1abb8:	4621      	mov	r1, r4
   1abba:	4798      	blx	r3

	return 0;
}
   1abbc:	2000      	movs	r0, #0
   1abbe:	bd70      	pop	{r4, r5, r6, pc}
   1abc0:	000251ec 	.word	0x000251ec

0001abc4 <sx12xx_lora_recv>:

int sx12xx_lora_recv(const struct device *dev, uint8_t *data, uint8_t size,
		     k_timeout_t timeout, int16_t *rssi, int8_t *snr)
{
   1abc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int ret;

	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
   1abc8:	4c1e      	ldr	r4, [pc, #120]	; (1ac44 <sx12xx_lora_recv+0x80>)
{
   1abca:	460f      	mov	r7, r1
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
   1abcc:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1abce:	21ff      	movs	r1, #255	; 0xff
   1abd0:	2001      	movs	r0, #1
{
   1abd2:	4616      	mov	r6, r2
   1abd4:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	; 0x28
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
   1abd8:	4798      	blx	r3
	Radio.Rx(0);
   1abda:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1abdc:	2000      	movs	r0, #0
   1abde:	4798      	blx	r3
	return z_impl_k_sem_take(sem, timeout);
   1abe0:	4c19      	ldr	r4, [pc, #100]	; (1ac48 <sx12xx_lora_recv+0x84>)
   1abe2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   1abe6:	4620      	mov	r0, r4
   1abe8:	f002 fdbe 	bl	1d768 <z_impl_k_sem_take>

	ret = k_sem_take(&dev_data.data_sem, timeout);
	if (ret < 0) {
   1abec:	1e05      	subs	r5, r0, #0
   1abee:	da0c      	bge.n	1ac0a <sx12xx_lora_recv+0x46>
   1abf0:	4916      	ldr	r1, [pc, #88]	; (1ac4c <sx12xx_lora_recv+0x88>)
   1abf2:	4b17      	ldr	r3, [pc, #92]	; (1ac50 <sx12xx_lora_recv+0x8c>)
		LOG_ERR("Receive timeout!");
   1abf4:	4817      	ldr	r0, [pc, #92]	; (1ac54 <sx12xx_lora_recv+0x90>)
   1abf6:	1ac9      	subs	r1, r1, r3
   1abf8:	08c9      	lsrs	r1, r1, #3
   1abfa:	0189      	lsls	r1, r1, #6
   1abfc:	f041 0101 	orr.w	r1, r1, #1
   1ac00:	f003 ff9a 	bl	1eb38 <log_0>
	if (snr != NULL) {
		*snr = dev_data.snr;
	}

	return dev_data.rx_len;
}
   1ac04:	4628      	mov	r0, r5
   1ac06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (dev_data.rx_len > size)
   1ac0a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1ac0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1ac10:	42b3      	cmp	r3, r6
		dev_data.rx_len = size;
   1ac12:	bf88      	it	hi
   1ac14:	f884 6038 	strbhi.w	r6, [r4, #56]	; 0x38
   1ac18:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   1ac1c:	4638      	mov	r0, r7
   1ac1e:	f008 fd20 	bl	23662 <memcpy>
	if (rssi != NULL) {
   1ac22:	f1b9 0f00 	cmp.w	r9, #0
   1ac26:	d003      	beq.n	1ac30 <sx12xx_lora_recv+0x6c>
		*rssi = dev_data.rssi;
   1ac28:	f9b4 303a 	ldrsh.w	r3, [r4, #58]	; 0x3a
   1ac2c:	f8a9 3000 	strh.w	r3, [r9]
	if (snr != NULL) {
   1ac30:	f1b8 0f00 	cmp.w	r8, #0
   1ac34:	d003      	beq.n	1ac3e <sx12xx_lora_recv+0x7a>
		*snr = dev_data.snr;
   1ac36:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1ac3a:	f888 3000 	strb.w	r3, [r8]
	return dev_data.rx_len;
   1ac3e:	f894 5038 	ldrb.w	r5, [r4, #56]	; 0x38
   1ac42:	e7df      	b.n	1ac04 <sx12xx_lora_recv+0x40>
   1ac44:	000251ec 	.word	0x000251ec
   1ac48:	20002850 	.word	0x20002850
   1ac4c:	00023aa4 	.word	0x00023aa4
   1ac50:	0002393c 	.word	0x0002393c
   1ac54:	0002733e 	.word	0x0002733e

0001ac58 <sx12xx_lora_config>:

int sx12xx_lora_config(const struct device *dev,
		       struct lora_modem_config *config)
{
   1ac58:	b5f0      	push	{r4, r5, r6, r7, lr}
	Radio.SetChannel(config->frequency);
   1ac5a:	4e19      	ldr	r6, [pc, #100]	; (1acc0 <sx12xx_lora_config+0x68>)
   1ac5c:	6808      	ldr	r0, [r1, #0]
   1ac5e:	68f3      	ldr	r3, [r6, #12]
{
   1ac60:	460c      	mov	r4, r1
   1ac62:	b08b      	sub	sp, #44	; 0x2c
	Radio.SetChannel(config->frequency);
   1ac64:	4798      	blx	r3

	if (config->tx) {
   1ac66:	7ae5      	ldrb	r5, [r4, #11]
   1ac68:	7921      	ldrb	r1, [r4, #4]
   1ac6a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
   1ac6e:	79a3      	ldrb	r3, [r4, #6]
   1ac70:	7967      	ldrb	r7, [r4, #5]
   1ac72:	b1a5      	cbz	r5, 1ac9e <sx12xx_lora_config+0x46>
		Radio.SetTxConfig(MODEM_LORA, config->tx_power, 0,
   1ac74:	2200      	movs	r2, #0
   1ac76:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
   1ac7a:	e9cd 2007 	strd	r2, r0, [sp, #28]
   1ac7e:	2001      	movs	r0, #1
   1ac80:	e9cd 3c01 	strd	r3, ip, [sp, #4]
   1ac84:	e9cd 2205 	strd	r2, r2, [sp, #20]
   1ac88:	e9cd 2003 	strd	r2, r0, [sp, #12]
   1ac8c:	9700      	str	r7, [sp, #0]
   1ac8e:	460b      	mov	r3, r1
   1ac90:	69f5      	ldr	r5, [r6, #28]
   1ac92:	f994 100a 	ldrsb.w	r1, [r4, #10]
   1ac96:	47a8      	blx	r5
				  0, config->preamble_len, 10, false, 0,
				  false, 0, 0, false, true);
	}

	return 0;
}
   1ac98:	2000      	movs	r0, #0
   1ac9a:	b00b      	add	sp, #44	; 0x2c
   1ac9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Radio.SetRxConfig(MODEM_LORA, config->bandwidth,
   1ac9e:	2001      	movs	r0, #1
   1aca0:	220a      	movs	r2, #10
   1aca2:	e9cd c201 	strd	ip, r2, [sp, #4]
   1aca6:	e9cd 5008 	strd	r5, r0, [sp, #32]
   1acaa:	e9cd 5506 	strd	r5, r5, [sp, #24]
   1acae:	e9cd 5504 	strd	r5, r5, [sp, #16]
   1acb2:	69b4      	ldr	r4, [r6, #24]
   1acb4:	9503      	str	r5, [sp, #12]
   1acb6:	9500      	str	r5, [sp, #0]
   1acb8:	463a      	mov	r2, r7
   1acba:	47a0      	blx	r4
   1acbc:	e7ec      	b.n	1ac98 <sx12xx_lora_config+0x40>
   1acbe:	bf00      	nop
   1acc0:	000251ec 	.word	0x000251ec

0001acc4 <sx12xx_lora_test_cw>:

int sx12xx_lora_test_cw(const struct device *dev, uint32_t frequency,
			int8_t tx_power,
			uint16_t duration)
{
   1acc4:	b510      	push	{r4, lr}
   1acc6:	4608      	mov	r0, r1
   1acc8:	4611      	mov	r1, r2
	Radio.SetTxContinuousWave(frequency, tx_power, duration);
   1acca:	4a03      	ldr	r2, [pc, #12]	; (1acd8 <sx12xx_lora_test_cw+0x14>)
   1accc:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   1acce:	461a      	mov	r2, r3
   1acd0:	47a0      	blx	r4
	return 0;
}
   1acd2:	2000      	movs	r0, #0
   1acd4:	bd10      	pop	{r4, pc}
   1acd6:	bf00      	nop
   1acd8:	000251ec 	.word	0x000251ec

0001acdc <sx12xx_init>:

int sx12xx_init(const struct device *dev)
{
   1acdc:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1acde:	4c0a      	ldr	r4, [pc, #40]	; (1ad08 <sx12xx_init+0x2c>)
	k_sem_init(&dev_data.data_sem, 0, K_SEM_MAX_LIMIT);

	dev_data.events.TxDone = sx12xx_ev_tx_done;
	dev_data.events.RxDone = sx12xx_ev_rx_done;
	Radio.Init(&dev_data.events);
   1ace0:	4d0a      	ldr	r5, [pc, #40]	; (1ad0c <sx12xx_init+0x30>)
   1ace2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ace6:	2100      	movs	r1, #0
   1ace8:	4620      	mov	r0, r4
   1acea:	f008 f9f0 	bl	230ce <z_impl_k_sem_init>
	dev_data.events.TxDone = sx12xx_ev_tx_done;
   1acee:	4b08      	ldr	r3, [pc, #32]	; (1ad10 <sx12xx_init+0x34>)
   1acf0:	61a3      	str	r3, [r4, #24]
	dev_data.events.RxDone = sx12xx_ev_rx_done;
   1acf2:	4b08      	ldr	r3, [pc, #32]	; (1ad14 <sx12xx_init+0x38>)
   1acf4:	6223      	str	r3, [r4, #32]
	Radio.Init(&dev_data.events);
   1acf6:	f104 0018 	add.w	r0, r4, #24
   1acfa:	682b      	ldr	r3, [r5, #0]
   1acfc:	4798      	blx	r3
	 * The required `lora_config` call before transmission or reception
	 * will bring the radio out of sleep mode before it is used. The radio
	 * is automatically placed back into sleep mode upon TX or RX
	 * completion.
	 */
	Radio.Sleep();
   1acfe:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1ad00:	4798      	blx	r3

	return 0;
}
   1ad02:	2000      	movs	r0, #0
   1ad04:	bd38      	pop	{r3, r4, r5, pc}
   1ad06:	bf00      	nop
   1ad08:	20002850 	.word	0x20002850
   1ad0c:	000251ec 	.word	0x000251ec
   1ad10:	0001aa81 	.word	0x0001aa81
   1ad14:	0001aa8d 	.word	0x0001aa8d

0001ad18 <sx127x_dio_work_handle>:
	k_sleep(K_MSEC(6));
}

static void sx127x_dio_work_handle(struct k_work *work)
{
	int dio = work - dev_data.dio_work;
   1ad18:	4b03      	ldr	r3, [pc, #12]	; (1ad28 <sx127x_dio_work_handle+0x10>)
   1ad1a:	1ac0      	subs	r0, r0, r3
   1ad1c:	1100      	asrs	r0, r0, #4

	(*DioIrq[dio])(NULL);
   1ad1e:	4b03      	ldr	r3, [pc, #12]	; (1ad2c <sx127x_dio_work_handle+0x14>)
   1ad20:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1ad24:	2000      	movs	r0, #0
   1ad26:	4718      	bx	r3
   1ad28:	200028f4 	.word	0x200028f4
   1ad2c:	2000060c 	.word	0x2000060c

0001ad30 <sx127x_irq_callback>:
}

static void sx127x_irq_callback(const struct device *dev,
				struct gpio_callback *cb, uint32_t pins)
{
   1ad30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ad34:	4d11      	ldr	r5, [pc, #68]	; (1ad7c <sx127x_irq_callback+0x4c>)

	pin = find_lsb_set(pins) - 1;

	for (i = 0; i < SX127X_MAX_DIO; i++) {
		if (dev == dev_data.dio_dev[i] &&
		    pin == sx127x_dios[i].pin) {
   1ad36:	f8df 8048 	ldr.w	r8, [pc, #72]	; 1ad80 <sx127x_irq_callback+0x50>
	return k_work_submit_to_queue(&k_sys_work_q, work);
   1ad3a:	f8df a048 	ldr.w	sl, [pc, #72]	; 1ad84 <sx127x_irq_callback+0x54>
   1ad3e:	fa92 f7a2 	rbit	r7, r2
   1ad42:	2a00      	cmp	r2, #0
   1ad44:	fab7 f787 	clz	r7, r7
{
   1ad48:	4606      	mov	r6, r0
   1ad4a:	bf08      	it	eq
   1ad4c:	f04f 37ff 	moveq.w	r7, #4294967295	; 0xffffffff
	for (i = 0; i < SX127X_MAX_DIO; i++) {
   1ad50:	2400      	movs	r4, #0
   1ad52:	f105 0914 	add.w	r9, r5, #20
		if (dev == dev_data.dio_dev[i] &&
   1ad56:	f855 3b04 	ldr.w	r3, [r5], #4
   1ad5a:	42b3      	cmp	r3, r6
   1ad5c:	d109      	bne.n	1ad72 <sx127x_irq_callback+0x42>
		    pin == sx127x_dios[i].pin) {
   1ad5e:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
   1ad62:	791b      	ldrb	r3, [r3, #4]
		if (dev == dev_data.dio_dev[i] &&
   1ad64:	42bb      	cmp	r3, r7
   1ad66:	d104      	bne.n	1ad72 <sx127x_irq_callback+0x42>
   1ad68:	eb09 1104 	add.w	r1, r9, r4, lsl #4
   1ad6c:	4650      	mov	r0, sl
   1ad6e:	f008 fa3f 	bl	231f0 <k_work_submit_to_queue>
	for (i = 0; i < SX127X_MAX_DIO; i++) {
   1ad72:	3401      	adds	r4, #1
   1ad74:	2c05      	cmp	r4, #5
   1ad76:	d1ee      	bne.n	1ad56 <sx127x_irq_callback+0x26>
			k_work_submit(&dev_data.dio_work[i]);
		}
	}
}
   1ad78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ad7c:	200028e0 	.word	0x200028e0
   1ad80:	00025258 	.word	0x00025258
   1ad84:	20001390 	.word	0x20001390

0001ad88 <SX1276Reset>:
{
   1ad88:	b510      	push	{r4, lr}
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 1);
   1ad8a:	4c09      	ldr	r4, [pc, #36]	; (1adb0 <SX1276Reset+0x28>)
   1ad8c:	2101      	movs	r1, #1
   1ad8e:	6820      	ldr	r0, [r4, #0]
   1ad90:	f007 fdcb 	bl	2292a <gpio_pin_set.constprop.0>
	return z_impl_k_sleep(timeout);
   1ad94:	2100      	movs	r1, #0
   1ad96:	2021      	movs	r0, #33	; 0x21
   1ad98:	f002 fc24 	bl	1d5e4 <z_impl_k_sleep>
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 0);
   1ad9c:	6820      	ldr	r0, [r4, #0]
   1ad9e:	2100      	movs	r1, #0
   1ada0:	f007 fdc3 	bl	2292a <gpio_pin_set.constprop.0>
   1ada4:	20c5      	movs	r0, #197	; 0xc5
}
   1ada6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1adaa:	2100      	movs	r1, #0
   1adac:	f002 bc1a 	b.w	1d5e4 <z_impl_k_sleep>
   1adb0:	200028cc 	.word	0x200028cc

0001adb4 <SX1276IoIrqInit>:

void SX127xIoIrqInit(DioIrqHandler **irqHandlers)
{
   1adb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1adb8:	4c37      	ldr	r4, [pc, #220]	; (1ae98 <SX1276IoIrqInit+0xe4>)
   1adba:	4e38      	ldr	r6, [pc, #224]	; (1ae9c <SX1276IoIrqInit+0xe8>)
   1adbc:	4d38      	ldr	r5, [pc, #224]	; (1aea0 <SX1276IoIrqInit+0xec>)
   1adbe:	f100 0310 	add.w	r3, r0, #16
   1adc2:	f1a0 0804 	sub.w	r8, r0, #4
   1adc6:	f1a4 0914 	sub.w	r9, r4, #20
   1adca:	9301      	str	r3, [sp, #4]
	unsigned int i;
	static struct gpio_callback callbacks[SX127X_MAX_DIO];

	/* Setup DIO gpios */
	for (i = 0; i < SX127X_MAX_DIO; i++) {
		if (!irqHandlers[i]) {
   1adcc:	f858 3f04 	ldr.w	r3, [r8, #4]!
   1add0:	2b00      	cmp	r3, #0
   1add2:	d053      	beq.n	1ae7c <SX1276IoIrqInit+0xc8>
			continue;
		}

		dev_data.dio_dev[i] = device_get_binding(sx127x_dios[i].port);
   1add4:	682f      	ldr	r7, [r5, #0]
   1add6:	4638      	mov	r0, r7
   1add8:	f001 fe3a 	bl	1ca50 <z_impl_device_get_binding>
   1addc:	6020      	str	r0, [r4, #0]
		if (dev_data.dio_dev[i] == NULL) {
   1adde:	b968      	cbnz	r0, 1adfc <SX1276IoIrqInit+0x48>
   1ade0:	4b30      	ldr	r3, [pc, #192]	; (1aea4 <SX1276IoIrqInit+0xf0>)
   1ade2:	4a31      	ldr	r2, [pc, #196]	; (1aea8 <SX1276IoIrqInit+0xf4>)
			LOG_ERR("Cannot get pointer to %s device",
   1ade4:	4831      	ldr	r0, [pc, #196]	; (1aeac <SX1276IoIrqInit+0xf8>)
   1ade6:	1ad2      	subs	r2, r2, r3
   1ade8:	08d2      	lsrs	r2, r2, #3
   1adea:	0192      	lsls	r2, r2, #6
   1adec:	f042 0201 	orr.w	r2, r2, #1
   1adf0:	4639      	mov	r1, r7
		gpio_pin_interrupt_configure(dev_data.dio_dev[i],
					     sx127x_dios[i].pin,
					     GPIO_INT_EDGE_TO_ACTIVE);
	}

}
   1adf2:	b003      	add	sp, #12
   1adf4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			LOG_ERR("Cannot get pointer to %s device",
   1adf8:	f003 beab 	b.w	1eb52 <log_1>
		k_work_init(&dev_data.dio_work[i], sx127x_dio_work_handle);
   1adfc:	f109 0028 	add.w	r0, r9, #40	; 0x28
   1ae00:	492b      	ldr	r1, [pc, #172]	; (1aeb0 <SX1276IoIrqInit+0xfc>)
   1ae02:	f008 f9ec 	bl	231de <k_work_init>
		gpio_pin_configure(dev_data.dio_dev[i], sx127x_dios[i].pin,
   1ae06:	6820      	ldr	r0, [r4, #0]
   1ae08:	792f      	ldrb	r7, [r5, #4]
				   | sx127x_dios[i].flags);
   1ae0a:	f895 b005 	ldrb.w	fp, [r5, #5]
	struct gpio_driver_data *data =
   1ae0e:	f8d0 a010 	ldr.w	sl, [r0, #16]
	return api->pin_configure(port, pin, flags);
   1ae12:	6883      	ldr	r3, [r0, #8]
   1ae14:	f44b 2200 	orr.w	r2, fp, #524288	; 0x80000
   1ae18:	681b      	ldr	r3, [r3, #0]
   1ae1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   1ae1e:	4639      	mov	r1, r7
   1ae20:	4798      	blx	r3
	if (ret != 0) {
   1ae22:	b950      	cbnz	r0, 1ae3a <SX1276IoIrqInit+0x86>
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1ae24:	f8da 3000 	ldr.w	r3, [sl]
   1ae28:	2201      	movs	r2, #1
   1ae2a:	40ba      	lsls	r2, r7
   1ae2c:	f01b 0f01 	tst.w	fp, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1ae30:	bf14      	ite	ne
   1ae32:	4313      	orrne	r3, r2
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1ae34:	4393      	biceq	r3, r2
   1ae36:	f8ca 3000 	str.w	r3, [sl]
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   1ae3a:	4b1e      	ldr	r3, [pc, #120]	; (1aeb4 <SX1276IoIrqInit+0x100>)
		if (gpio_add_callback(dev_data.dio_dev[i], &callbacks[i]) < 0) {
   1ae3c:	6820      	ldr	r0, [r4, #0]
   1ae3e:	6073      	str	r3, [r6, #4]
				   BIT(sx127x_dios[i].pin));
   1ae40:	2201      	movs	r2, #1
   1ae42:	fa02 f307 	lsl.w	r3, r2, r7
	callback->pin_mask = pin_mask;
   1ae46:	60b3      	str	r3, [r6, #8]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   1ae48:	6883      	ldr	r3, [r0, #8]
   1ae4a:	69db      	ldr	r3, [r3, #28]
   1ae4c:	b963      	cbnz	r3, 1ae68 <SX1276IoIrqInit+0xb4>
   1ae4e:	4b15      	ldr	r3, [pc, #84]	; (1aea4 <SX1276IoIrqInit+0xf0>)
   1ae50:	4915      	ldr	r1, [pc, #84]	; (1aea8 <SX1276IoIrqInit+0xf4>)
			LOG_ERR("Could not set gpio callback.");
   1ae52:	4819      	ldr	r0, [pc, #100]	; (1aeb8 <SX1276IoIrqInit+0x104>)
   1ae54:	1ac9      	subs	r1, r1, r3
   1ae56:	08c9      	lsrs	r1, r1, #3
   1ae58:	0189      	lsls	r1, r1, #6
   1ae5a:	f041 0101 	orr.w	r1, r1, #1
}
   1ae5e:	b003      	add	sp, #12
   1ae60:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			LOG_ERR("Could not set gpio callback.");
   1ae64:	f003 be68 	b.w	1eb38 <log_0>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   1ae68:	4631      	mov	r1, r6
   1ae6a:	4798      	blx	r3
		if (gpio_add_callback(dev_data.dio_dev[i], &callbacks[i]) < 0) {
   1ae6c:	2800      	cmp	r0, #0
   1ae6e:	dbee      	blt.n	1ae4e <SX1276IoIrqInit+0x9a>
		gpio_pin_interrupt_configure(dev_data.dio_dev[i],
   1ae70:	6820      	ldr	r0, [r4, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   1ae72:	f44f 22b8 	mov.w	r2, #376832	; 0x5c000
   1ae76:	4639      	mov	r1, r7
   1ae78:	f007 fd41 	bl	228fe <z_impl_gpio_pin_interrupt_configure>
	for (i = 0; i < SX127X_MAX_DIO; i++) {
   1ae7c:	9b01      	ldr	r3, [sp, #4]
   1ae7e:	4598      	cmp	r8, r3
   1ae80:	f104 0404 	add.w	r4, r4, #4
   1ae84:	f106 060c 	add.w	r6, r6, #12
   1ae88:	f109 0910 	add.w	r9, r9, #16
   1ae8c:	f105 0508 	add.w	r5, r5, #8
   1ae90:	d19c      	bne.n	1adcc <SX1276IoIrqInit+0x18>
}
   1ae92:	b003      	add	sp, #12
   1ae94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ae98:	200028e0 	.word	0x200028e0
   1ae9c:	20002890 	.word	0x20002890
   1aea0:	00025258 	.word	0x00025258
   1aea4:	0002393c 	.word	0x0002393c
   1aea8:	00023a9c 	.word	0x00023a9c
   1aeac:	000272fe 	.word	0x000272fe
   1aeb0:	0001ad19 	.word	0x0001ad19
   1aeb4:	0001ad31 	.word	0x0001ad31
   1aeb8:	0002735d 	.word	0x0002735d

0001aebc <sx127x_read>:

	return spi_write(dev_data.spi, &dev_data.spi_cfg, &tx);
}

int sx127x_read(uint8_t reg_addr, uint8_t *data, uint8_t len)
{
   1aebc:	b510      	push	{r4, lr}
   1aebe:	b08a      	sub	sp, #40	; 0x28
	const struct spi_buf buf[2] = {
   1aec0:	f10d 0307 	add.w	r3, sp, #7
   1aec4:	9306      	str	r3, [sp, #24]
   1aec6:	2301      	movs	r3, #1
   1aec8:	e9cd 3107 	strd	r3, r1, [sp, #28]
		return spi_transceive(dev_data.spi, &dev_data.spi_cfg, &tx, &rx);
   1aecc:	4909      	ldr	r1, [pc, #36]	; (1aef4 <sx127x_read+0x38>)
	return sx127x_transceive(reg_addr, false, data, len);
   1aece:	9209      	str	r2, [sp, #36]	; 0x24
	struct spi_buf_set tx = {
   1aed0:	2302      	movs	r3, #2
   1aed2:	aa06      	add	r2, sp, #24
   1aed4:	f88d 0007 	strb.w	r0, [sp, #7]
		const struct spi_buf_set rx = {
   1aed8:	e9cd 3203 	strd	r3, r2, [sp, #12]
		return spi_transceive(dev_data.spi, &dev_data.spi_cfg, &tx, &rx);
   1aedc:	6848      	ldr	r0, [r1, #4]
	struct spi_buf_set tx = {
   1aede:	9202      	str	r2, [sp, #8]
		const struct spi_buf_set rx = {
   1aee0:	9305      	str	r3, [sp, #20]
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
   1aee2:	6883      	ldr	r3, [r0, #8]
   1aee4:	aa02      	add	r2, sp, #8
   1aee6:	681c      	ldr	r4, [r3, #0]
   1aee8:	3108      	adds	r1, #8
   1aeea:	ab04      	add	r3, sp, #16
   1aeec:	47a0      	blx	r4
}
   1aeee:	b00a      	add	sp, #40	; 0x28
   1aef0:	bd10      	pop	{r4, pc}
   1aef2:	bf00      	nop
   1aef4:	200028cc 	.word	0x200028cc

0001aef8 <SX1276ReadBuffer>:
		LOG_ERR("Unable to write address: 0x%x", addr);
	}
}

void SX127xReadBuffer(uint16_t addr, uint8_t *buffer, uint8_t size)
{
   1aef8:	b510      	push	{r4, lr}
   1aefa:	4604      	mov	r4, r0
	int ret;

	ret = sx127x_read(addr, buffer, size);
   1aefc:	b2c0      	uxtb	r0, r0
   1aefe:	f7ff ffdd 	bl	1aebc <sx127x_read>
	if (ret < 0) {
   1af02:	2800      	cmp	r0, #0
   1af04:	da0c      	bge.n	1af20 <SX1276ReadBuffer+0x28>
   1af06:	4a07      	ldr	r2, [pc, #28]	; (1af24 <SX1276ReadBuffer+0x2c>)
   1af08:	4b07      	ldr	r3, [pc, #28]	; (1af28 <SX1276ReadBuffer+0x30>)
		LOG_ERR("Unable to read address: 0x%x", addr);
   1af0a:	4808      	ldr	r0, [pc, #32]	; (1af2c <SX1276ReadBuffer+0x34>)
   1af0c:	1ad2      	subs	r2, r2, r3
   1af0e:	08d2      	lsrs	r2, r2, #3
   1af10:	0192      	lsls	r2, r2, #6
   1af12:	4621      	mov	r1, r4
   1af14:	f042 0201 	orr.w	r2, r2, #1
	}
}
   1af18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("Unable to read address: 0x%x", addr);
   1af1c:	f003 be19 	b.w	1eb52 <log_1>
}
   1af20:	bd10      	pop	{r4, pc}
   1af22:	bf00      	nop
   1af24:	00023a9c 	.word	0x00023a9c
   1af28:	0002393c 	.word	0x0002393c
   1af2c:	0002737a 	.word	0x0002737a

0001af30 <sx127x_lora_init>:

	return 0;
}

static int sx127x_lora_init(const struct device *dev)
{
   1af30:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1af32:	4606      	mov	r6, r0
   1af34:	4839      	ldr	r0, [pc, #228]	; (1b01c <sx127x_lora_init+0xec>)
	static struct spi_cs_control spi_cs;
#endif
	int ret;
	uint8_t regval;

	dev_data.spi = device_get_binding(DT_INST_BUS_LABEL(0));
   1af36:	4d3a      	ldr	r5, [pc, #232]	; (1b020 <sx127x_lora_init+0xf0>)
   1af38:	f001 fd8a 	bl	1ca50 <z_impl_device_get_binding>
   1af3c:	6068      	str	r0, [r5, #4]
	if (!dev_data.spi) {
   1af3e:	b978      	cbnz	r0, 1af60 <sx127x_lora_init+0x30>
   1af40:	4b38      	ldr	r3, [pc, #224]	; (1b024 <sx127x_lora_init+0xf4>)
   1af42:	4a39      	ldr	r2, [pc, #228]	; (1b028 <sx127x_lora_init+0xf8>)
		LOG_ERR("Cannot get pointer to %s device",
   1af44:	4935      	ldr	r1, [pc, #212]	; (1b01c <sx127x_lora_init+0xec>)
   1af46:	4839      	ldr	r0, [pc, #228]	; (1b02c <sx127x_lora_init+0xfc>)
   1af48:	1ad2      	subs	r2, r2, r3
   1af4a:	08d2      	lsrs	r2, r2, #3
   1af4c:	0192      	lsls	r2, r2, #6
   1af4e:	f042 0201 	orr.w	r2, r2, #1
   1af52:	f003 fdfe 	bl	1eb52 <log_1>
			DT_INST_BUS_LABEL(0));
		return -EINVAL;
   1af56:	f06f 0415 	mvn.w	r4, #21
		LOG_ERR("Failed to initialize SX12xx common");
		return ret;
	}

	return 0;
}
   1af5a:	4620      	mov	r0, r4
   1af5c:	b002      	add	sp, #8
   1af5e:	bd70      	pop	{r4, r5, r6, pc}
	dev_data.spi_cfg.operation = SPI_WORD_SET(8) | SPI_TRANSFER_MSB;
   1af60:	4a33      	ldr	r2, [pc, #204]	; (1b030 <sx127x_lora_init+0x100>)
   1af62:	f44f 7380 	mov.w	r3, #256	; 0x100
   1af66:	e9c5 2302 	strd	r2, r3, [r5, #8]
   1af6a:	4832      	ldr	r0, [pc, #200]	; (1b034 <sx127x_lora_init+0x104>)
   1af6c:	f001 fd70 	bl	1ca50 <z_impl_device_get_binding>
	spi_cs.gpio_dev = device_get_binding(DT_INST_SPI_DEV_CS_GPIOS_LABEL(0));
   1af70:	4b31      	ldr	r3, [pc, #196]	; (1b038 <sx127x_lora_init+0x108>)
   1af72:	6018      	str	r0, [r3, #0]
	if (!spi_cs.gpio_dev) {
   1af74:	b968      	cbnz	r0, 1af92 <sx127x_lora_init+0x62>
   1af76:	4a2c      	ldr	r2, [pc, #176]	; (1b028 <sx127x_lora_init+0xf8>)
   1af78:	4b2a      	ldr	r3, [pc, #168]	; (1b024 <sx127x_lora_init+0xf4>)
		LOG_ERR("Cannot get pointer to %s device",
   1af7a:	492e      	ldr	r1, [pc, #184]	; (1b034 <sx127x_lora_init+0x104>)
   1af7c:	482b      	ldr	r0, [pc, #172]	; (1b02c <sx127x_lora_init+0xfc>)
   1af7e:	1ad2      	subs	r2, r2, r3
   1af80:	08d2      	lsrs	r2, r2, #3
   1af82:	0192      	lsls	r2, r2, #6
   1af84:	f042 0201 	orr.w	r2, r2, #1
   1af88:	f003 fde3 	bl	1eb52 <log_1>
		return -EIO;
   1af8c:	f06f 0404 	mvn.w	r4, #4
   1af90:	e7e3      	b.n	1af5a <sx127x_lora_init+0x2a>
	spi_cs.delay = 0U;
   1af92:	2200      	movs	r2, #0
   1af94:	605a      	str	r2, [r3, #4]
	spi_cs.gpio_pin = GPIO_CS_PIN;
   1af96:	f240 1209 	movw	r2, #265	; 0x109
   1af9a:	811a      	strh	r2, [r3, #8]
	dev_data.spi_cfg.cs = &spi_cs;
   1af9c:	612b      	str	r3, [r5, #16]
	ret = sx12xx_configure_pin(reset, GPIO_OUTPUT_ACTIVE);
   1af9e:	4925      	ldr	r1, [pc, #148]	; (1b034 <sx127x_lora_init+0x104>)
   1afa0:	f641 2311 	movw	r3, #6673	; 0x1a11
   1afa4:	2208      	movs	r2, #8
   1afa6:	4628      	mov	r0, r5
   1afa8:	f7ff fd88 	bl	1aabc <__sx12xx_configure_pin>
	if (ret) {
   1afac:	4604      	mov	r4, r0
   1afae:	2800      	cmp	r0, #0
   1afb0:	d1d3      	bne.n	1af5a <sx127x_lora_init+0x2a>
   1afb2:	2100      	movs	r1, #0
   1afb4:	f640 40cd 	movw	r0, #3277	; 0xccd
   1afb8:	f002 fb14 	bl	1d5e4 <z_impl_k_sleep>
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 0);
   1afbc:	6828      	ldr	r0, [r5, #0]
   1afbe:	4621      	mov	r1, r4
   1afc0:	f007 fcb3 	bl	2292a <gpio_pin_set.constprop.0>
   1afc4:	2100      	movs	r1, #0
   1afc6:	f640 40cd 	movw	r0, #3277	; 0xccd
   1afca:	f002 fb0b 	bl	1d5e4 <z_impl_k_sleep>
	ret = sx127x_read(REG_VERSION, &regval, 1);
   1afce:	2201      	movs	r2, #1
   1afd0:	f10d 0107 	add.w	r1, sp, #7
   1afd4:	2042      	movs	r0, #66	; 0x42
   1afd6:	f7ff ff71 	bl	1aebc <sx127x_read>
	if (ret < 0) {
   1afda:	4d13      	ldr	r5, [pc, #76]	; (1b028 <sx127x_lora_init+0xf8>)
   1afdc:	4b11      	ldr	r3, [pc, #68]	; (1b024 <sx127x_lora_init+0xf4>)
   1afde:	1aed      	subs	r5, r5, r3
   1afe0:	08ed      	lsrs	r5, r5, #3
   1afe2:	2800      	cmp	r0, #0
   1afe4:	ea4f 1585 	mov.w	r5, r5, lsl #6
   1afe8:	da05      	bge.n	1aff6 <sx127x_lora_init+0xc6>
		LOG_ERR("Unable to read version info");
   1afea:	4814      	ldr	r0, [pc, #80]	; (1b03c <sx127x_lora_init+0x10c>)
   1afec:	f045 0101 	orr.w	r1, r5, #1
   1aff0:	f003 fda2 	bl	1eb38 <log_0>
   1aff4:	e7ca      	b.n	1af8c <sx127x_lora_init+0x5c>
	LOG_INF("SX127x version 0x%02x found", regval);
   1aff6:	f89d 1007 	ldrb.w	r1, [sp, #7]
   1affa:	4811      	ldr	r0, [pc, #68]	; (1b040 <sx127x_lora_init+0x110>)
   1affc:	f045 0203 	orr.w	r2, r5, #3
   1b000:	f003 fda7 	bl	1eb52 <log_1>
	ret = sx12xx_init(dev);
   1b004:	4630      	mov	r0, r6
   1b006:	f7ff fe69 	bl	1acdc <sx12xx_init>
	if (ret < 0) {
   1b00a:	1e06      	subs	r6, r0, #0
   1b00c:	daa5      	bge.n	1af5a <sx127x_lora_init+0x2a>
		LOG_ERR("Failed to initialize SX12xx common");
   1b00e:	480d      	ldr	r0, [pc, #52]	; (1b044 <sx127x_lora_init+0x114>)
   1b010:	f045 0101 	orr.w	r1, r5, #1
   1b014:	f003 fd90 	bl	1eb38 <log_0>
		return ret;
   1b018:	4634      	mov	r4, r6
   1b01a:	e79e      	b.n	1af5a <sx127x_lora_init+0x2a>
   1b01c:	000272eb 	.word	0x000272eb
   1b020:	200028cc 	.word	0x200028cc
   1b024:	0002393c 	.word	0x0002393c
   1b028:	00023a9c 	.word	0x00023a9c
   1b02c:	000272fe 	.word	0x000272fe
   1b030:	000f4240 	.word	0x000f4240
   1b034:	000271b5 	.word	0x000271b5
   1b038:	20002944 	.word	0x20002944
   1b03c:	00027397 	.word	0x00027397
   1b040:	000273b3 	.word	0x000273b3
   1b044:	000273cf 	.word	0x000273cf

0001b048 <sx127x_write>:
{
   1b048:	b510      	push	{r4, lr}
   1b04a:	b088      	sub	sp, #32
	const struct spi_buf buf[2] = {
   1b04c:	f10d 0307 	add.w	r3, sp, #7
   1b050:	9304      	str	r3, [sp, #16]
   1b052:	2301      	movs	r3, #1
   1b054:	e9cd 3105 	strd	r3, r1, [sp, #20]
	struct spi_buf_set tx = {
   1b058:	ab04      	add	r3, sp, #16
	return spi_write(dev_data.spi, &dev_data.spi_cfg, &tx);
   1b05a:	4909      	ldr	r1, [pc, #36]	; (1b080 <sx127x_write+0x38>)
	struct spi_buf_set tx = {
   1b05c:	9302      	str	r3, [sp, #8]
	return sx127x_transceive(reg_addr | BIT(7), true, data, len);
   1b05e:	f060 007f 	orn	r0, r0, #127	; 0x7f
	struct spi_buf_set tx = {
   1b062:	2302      	movs	r3, #2
   1b064:	f88d 0007 	strb.w	r0, [sp, #7]
	return sx127x_transceive(reg_addr | BIT(7), true, data, len);
   1b068:	9207      	str	r2, [sp, #28]
	return spi_write(dev_data.spi, &dev_data.spi_cfg, &tx);
   1b06a:	6848      	ldr	r0, [r1, #4]
	struct spi_buf_set tx = {
   1b06c:	9303      	str	r3, [sp, #12]
   1b06e:	6883      	ldr	r3, [r0, #8]
   1b070:	aa02      	add	r2, sp, #8
   1b072:	681c      	ldr	r4, [r3, #0]
   1b074:	3108      	adds	r1, #8
   1b076:	2300      	movs	r3, #0
   1b078:	47a0      	blx	r4
}
   1b07a:	b008      	add	sp, #32
   1b07c:	bd10      	pop	{r4, pc}
   1b07e:	bf00      	nop
   1b080:	200028cc 	.word	0x200028cc

0001b084 <SX1276WriteBuffer>:
{
   1b084:	b510      	push	{r4, lr}
   1b086:	4604      	mov	r4, r0
	ret = sx127x_write(addr, buffer, size);
   1b088:	b2c0      	uxtb	r0, r0
   1b08a:	f7ff ffdd 	bl	1b048 <sx127x_write>
	if (ret < 0) {
   1b08e:	2800      	cmp	r0, #0
   1b090:	da0c      	bge.n	1b0ac <SX1276WriteBuffer+0x28>
   1b092:	4a07      	ldr	r2, [pc, #28]	; (1b0b0 <SX1276WriteBuffer+0x2c>)
   1b094:	4b07      	ldr	r3, [pc, #28]	; (1b0b4 <SX1276WriteBuffer+0x30>)
		LOG_ERR("Unable to write address: 0x%x", addr);
   1b096:	4808      	ldr	r0, [pc, #32]	; (1b0b8 <SX1276WriteBuffer+0x34>)
   1b098:	1ad2      	subs	r2, r2, r3
   1b09a:	08d2      	lsrs	r2, r2, #3
   1b09c:	0192      	lsls	r2, r2, #6
   1b09e:	4621      	mov	r1, r4
   1b0a0:	f042 0201 	orr.w	r2, r2, #1
}
   1b0a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("Unable to write address: 0x%x", addr);
   1b0a8:	f003 bd53 	b.w	1eb52 <log_1>
}
   1b0ac:	bd10      	pop	{r4, pc}
   1b0ae:	bf00      	nop
   1b0b0:	00023a9c 	.word	0x00023a9c
   1b0b4:	0002393c 	.word	0x0002393c
   1b0b8:	000273f2 	.word	0x000273f2

0001b0bc <SX1276SetRfTxPower>:
{
   1b0bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t pa_config = 0;
   1b0be:	2300      	movs	r3, #0
{
   1b0c0:	4605      	mov	r5, r0
	ret = sx127x_read(REG_PADAC, &pa_dac, 1);
   1b0c2:	2201      	movs	r2, #1
   1b0c4:	f10d 0107 	add.w	r1, sp, #7
   1b0c8:	204d      	movs	r0, #77	; 0x4d
	uint8_t pa_config = 0;
   1b0ca:	f88d 3006 	strb.w	r3, [sp, #6]
	uint8_t pa_dac = 0;
   1b0ce:	f88d 3007 	strb.w	r3, [sp, #7]
	ret = sx127x_read(REG_PADAC, &pa_dac, 1);
   1b0d2:	f7ff fef3 	bl	1aebc <sx127x_read>
	if (ret < 0) {
   1b0d6:	2800      	cmp	r0, #0
   1b0d8:	da0b      	bge.n	1b0f2 <SX1276SetRfTxPower+0x36>
   1b0da:	4928      	ldr	r1, [pc, #160]	; (1b17c <SX1276SetRfTxPower+0xc0>)
   1b0dc:	4b28      	ldr	r3, [pc, #160]	; (1b180 <SX1276SetRfTxPower+0xc4>)
		LOG_ERR("Unable to read PA dac");
   1b0de:	4829      	ldr	r0, [pc, #164]	; (1b184 <SX1276SetRfTxPower+0xc8>)
   1b0e0:	1ac9      	subs	r1, r1, r3
   1b0e2:	08c9      	lsrs	r1, r1, #3
   1b0e4:	0189      	lsls	r1, r1, #6
   1b0e6:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Unable to write PA dac");
   1b0ea:	f003 fd25 	bl	1eb38 <log_0>
}
   1b0ee:	b003      	add	sp, #12
   1b0f0:	bd30      	pop	{r4, r5, pc}
	pa_dac &= ~SX127X_PADAC_20DBM_MASK;
   1b0f2:	2d14      	cmp	r5, #20
   1b0f4:	4629      	mov	r1, r5
   1b0f6:	bfa8      	it	ge
   1b0f8:	2114      	movge	r1, #20
   1b0fa:	2902      	cmp	r1, #2
   1b0fc:	f89d 4007 	ldrb.w	r4, [sp, #7]
		pa_config |= SX127X_PACONFIG_PASELECT_PABOOST;
   1b100:	f99d 2006 	ldrsb.w	r2, [sp, #6]
   1b104:	bfb8      	it	lt
   1b106:	2102      	movlt	r1, #2
		if (power > 17) {
   1b108:	2d11      	cmp	r5, #17
	pa_dac &= ~SX127X_PADAC_20DBM_MASK;
   1b10a:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
			pa_config |= (power - 5) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
   1b10e:	bfcc      	ite	gt
   1b110:	3905      	subgt	r1, #5
			pa_config |= (power - 2) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
   1b112:	3902      	suble	r1, #2
   1b114:	f062 037f 	orn	r3, r2, #127	; 0x7f
			pa_dac |= SX127X_PADAC_20DBM_ON;
   1b118:	bfcc      	ite	gt
   1b11a:	f044 0407 	orrgt.w	r4, r4, #7
			pa_dac |= SX127X_PADAC_20DBM_OFF;
   1b11e:	f044 0404 	orrle.w	r4, r4, #4
			pa_config |= (power - 2) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
   1b122:	ea43 0301 	orr.w	r3, r3, r1
	ret = sx127x_write(REG_PACONFIG, &pa_config, 1);
   1b126:	f04f 0201 	mov.w	r2, #1
   1b12a:	f10d 0106 	add.w	r1, sp, #6
   1b12e:	f04f 0009 	mov.w	r0, #9
			pa_dac |= SX127X_PADAC_20DBM_ON;
   1b132:	bfcc      	ite	gt
   1b134:	f88d 4007 	strbgt.w	r4, [sp, #7]
			pa_dac |= SX127X_PADAC_20DBM_OFF;
   1b138:	f88d 4007 	strble.w	r4, [sp, #7]
			pa_config |= (power - 2) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
   1b13c:	f88d 3006 	strb.w	r3, [sp, #6]
	ret = sx127x_write(REG_PACONFIG, &pa_config, 1);
   1b140:	f7ff ff82 	bl	1b048 <sx127x_write>
	if (ret < 0) {
   1b144:	2800      	cmp	r0, #0
   1b146:	da08      	bge.n	1b15a <SX1276SetRfTxPower+0x9e>
   1b148:	490c      	ldr	r1, [pc, #48]	; (1b17c <SX1276SetRfTxPower+0xc0>)
   1b14a:	4b0d      	ldr	r3, [pc, #52]	; (1b180 <SX1276SetRfTxPower+0xc4>)
		LOG_ERR("Unable to write PA config");
   1b14c:	480e      	ldr	r0, [pc, #56]	; (1b188 <SX1276SetRfTxPower+0xcc>)
   1b14e:	1ac9      	subs	r1, r1, r3
   1b150:	08c9      	lsrs	r1, r1, #3
   1b152:	0189      	lsls	r1, r1, #6
   1b154:	f041 0101 	orr.w	r1, r1, #1
   1b158:	e7c7      	b.n	1b0ea <SX1276SetRfTxPower+0x2e>
	ret = sx127x_write(REG_PADAC, &pa_dac, 1);
   1b15a:	2201      	movs	r2, #1
   1b15c:	f10d 0107 	add.w	r1, sp, #7
   1b160:	204d      	movs	r0, #77	; 0x4d
   1b162:	f7ff ff71 	bl	1b048 <sx127x_write>
	if (ret < 0) {
   1b166:	2800      	cmp	r0, #0
   1b168:	dac1      	bge.n	1b0ee <SX1276SetRfTxPower+0x32>
   1b16a:	4904      	ldr	r1, [pc, #16]	; (1b17c <SX1276SetRfTxPower+0xc0>)
   1b16c:	4b04      	ldr	r3, [pc, #16]	; (1b180 <SX1276SetRfTxPower+0xc4>)
		LOG_ERR("Unable to write PA dac");
   1b16e:	4807      	ldr	r0, [pc, #28]	; (1b18c <SX1276SetRfTxPower+0xd0>)
   1b170:	1ac9      	subs	r1, r1, r3
   1b172:	08c9      	lsrs	r1, r1, #3
   1b174:	0189      	lsls	r1, r1, #6
   1b176:	f041 0101 	orr.w	r1, r1, #1
   1b17a:	e7b6      	b.n	1b0ea <SX1276SetRfTxPower+0x2e>
   1b17c:	00023a9c 	.word	0x00023a9c
   1b180:	0002393c 	.word	0x0002393c
   1b184:	00027410 	.word	0x00027410
   1b188:	00027426 	.word	0x00027426
   1b18c:	00027440 	.word	0x00027440

0001b190 <GetFskBandwidthRegValue>:
{
   1b190:	b510      	push	{r4, lr}
   1b192:	4b09      	ldr	r3, [pc, #36]	; (1b1b8 <GetFskBandwidthRegValue+0x28>)
   1b194:	2200      	movs	r2, #0
   1b196:	4619      	mov	r1, r3
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
   1b198:	681c      	ldr	r4, [r3, #0]
   1b19a:	4284      	cmp	r4, r0
   1b19c:	d806      	bhi.n	1b1ac <GetFskBandwidthRegValue+0x1c>
   1b19e:	689c      	ldr	r4, [r3, #8]
   1b1a0:	4284      	cmp	r4, r0
   1b1a2:	d903      	bls.n	1b1ac <GetFskBandwidthRegValue+0x1c>
            return FskBandwidths[i].RegValue;
   1b1a4:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   1b1a8:	7910      	ldrb	r0, [r2, #4]
}
   1b1aa:	bd10      	pop	{r4, pc}
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
   1b1ac:	3201      	adds	r2, #1
   1b1ae:	2a15      	cmp	r2, #21
   1b1b0:	f103 0308 	add.w	r3, r3, #8
   1b1b4:	d1f0      	bne.n	1b198 <GetFskBandwidthRegValue+0x8>
    while( 1 );
   1b1b6:	e7fe      	b.n	1b1b6 <GetFskBandwidthRegValue+0x26>
   1b1b8:	00025290 	.word	0x00025290

0001b1bc <SX1276OnDio4Irq>:
    }
}

void SX1276OnDio4Irq( void* context )
{
    switch( SX1276.Settings.Modem )
   1b1bc:	4b05      	ldr	r3, [pc, #20]	; (1b1d4 <SX1276OnDio4Irq+0x18>)
   1b1be:	f893 20e1 	ldrb.w	r2, [r3, #225]	; 0xe1
   1b1c2:	b92a      	cbnz	r2, 1b1d0 <SX1276OnDio4Irq+0x14>
    {
    case MODEM_FSK:
        {
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
   1b1c4:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
   1b1c8:	b912      	cbnz	r2, 1b1d0 <SX1276OnDio4Irq+0x14>
            {
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
   1b1ca:	2201      	movs	r2, #1
   1b1cc:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    case MODEM_LORA:
        break;
    default:
        break;
    }
}
   1b1d0:	4770      	bx	lr
   1b1d2:	bf00      	nop
   1b1d4:	20002984 	.word	0x20002984

0001b1d8 <SX1276GetStatus>:
}
   1b1d8:	4b01      	ldr	r3, [pc, #4]	; (1b1e0 <SX1276GetStatus+0x8>)
   1b1da:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
   1b1de:	4770      	bx	lr
   1b1e0:	20002984 	.word	0x20002984

0001b1e4 <SX1276ReadRssi>:
{
   1b1e4:	b508      	push	{r3, lr}
    switch( modem )
   1b1e6:	b120      	cbz	r0, 1b1f2 <SX1276ReadRssi+0xe>
   1b1e8:	2801      	cmp	r0, #1
   1b1ea:	d00a      	beq.n	1b202 <SX1276ReadRssi+0x1e>
   1b1ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1b1f0:	bd08      	pop	{r3, pc}
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
   1b1f2:	2011      	movs	r0, #17
   1b1f4:	f007 fbb8 	bl	22968 <SX1276Read>
   1b1f8:	f3c0 0047 	ubfx	r0, r0, #1, #8
   1b1fc:	4240      	negs	r0, r0
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
   1b1fe:	b200      	sxth	r0, r0
   1b200:	e7f6      	b.n	1b1f0 <SX1276ReadRssi+0xc>
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
   1b202:	4b08      	ldr	r3, [pc, #32]	; (1b224 <SX1276ReadRssi+0x40>)
   1b204:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
   1b208:	4b07      	ldr	r3, [pc, #28]	; (1b228 <SX1276ReadRssi+0x44>)
   1b20a:	429a      	cmp	r2, r3
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
   1b20c:	f04f 001b 	mov.w	r0, #27
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
   1b210:	d903      	bls.n	1b21a <SX1276ReadRssi+0x36>
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
   1b212:	f007 fba9 	bl	22968 <SX1276Read>
   1b216:	389d      	subs	r0, #157	; 0x9d
   1b218:	e7f1      	b.n	1b1fe <SX1276ReadRssi+0x1a>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
   1b21a:	f007 fba5 	bl	22968 <SX1276Read>
   1b21e:	38a4      	subs	r0, #164	; 0xa4
   1b220:	e7ed      	b.n	1b1fe <SX1276ReadRssi+0x1a>
   1b222:	bf00      	nop
   1b224:	20002984 	.word	0x20002984
   1b228:	1f4add40 	.word	0x1f4add40

0001b22c <SX1276SetSleep>:
{
   1b22c:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
   1b22e:	480a      	ldr	r0, [pc, #40]	; (1b258 <SX1276SetSleep+0x2c>)
   1b230:	f000 fdc8 	bl	1bdc4 <TimerStop>
    TimerStop( &TxTimeoutTimer );
   1b234:	4809      	ldr	r0, [pc, #36]	; (1b25c <SX1276SetSleep+0x30>)
   1b236:	f000 fdc5 	bl	1bdc4 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
   1b23a:	4809      	ldr	r0, [pc, #36]	; (1b260 <SX1276SetSleep+0x34>)
   1b23c:	f000 fdc2 	bl	1bdc4 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
   1b240:	2000      	movs	r0, #0
   1b242:	f007 fb9c 	bl	2297e <SX1276SetOpMode>
    SX1276SetBoardTcxo( false );
   1b246:	2000      	movs	r0, #0
   1b248:	f007 fb81 	bl	2294e <SX1276SetBoardTcxo>
    SX1276.Settings.State = RF_IDLE;
   1b24c:	4b05      	ldr	r3, [pc, #20]	; (1b264 <SX1276SetSleep+0x38>)
   1b24e:	2200      	movs	r2, #0
   1b250:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
   1b254:	bd08      	pop	{r3, pc}
   1b256:	bf00      	nop
   1b258:	2000296c 	.word	0x2000296c
   1b25c:	20002ac8 	.word	0x20002ac8
   1b260:	20002954 	.word	0x20002954
   1b264:	20002984 	.word	0x20002984

0001b268 <SX1276SetStby>:
{
   1b268:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
   1b26a:	4808      	ldr	r0, [pc, #32]	; (1b28c <SX1276SetStby+0x24>)
   1b26c:	f000 fdaa 	bl	1bdc4 <TimerStop>
    TimerStop( &TxTimeoutTimer );
   1b270:	4807      	ldr	r0, [pc, #28]	; (1b290 <SX1276SetStby+0x28>)
   1b272:	f000 fda7 	bl	1bdc4 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
   1b276:	4807      	ldr	r0, [pc, #28]	; (1b294 <SX1276SetStby+0x2c>)
   1b278:	f000 fda4 	bl	1bdc4 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_STANDBY );
   1b27c:	2001      	movs	r0, #1
   1b27e:	f007 fb7e 	bl	2297e <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
   1b282:	4b05      	ldr	r3, [pc, #20]	; (1b298 <SX1276SetStby+0x30>)
   1b284:	2200      	movs	r2, #0
   1b286:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
   1b28a:	bd08      	pop	{r3, pc}
   1b28c:	2000296c 	.word	0x2000296c
   1b290:	20002ac8 	.word	0x20002ac8
   1b294:	20002954 	.word	0x20002954
   1b298:	20002984 	.word	0x20002984

0001b29c <SX1276SetRx>:
{
   1b29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    switch( SX1276.Settings.Modem )
   1b29e:	4c81      	ldr	r4, [pc, #516]	; (1b4a4 <SX1276SetRx+0x208>)
{
   1b2a0:	4606      	mov	r6, r0
    TimerStop( &TxTimeoutTimer );
   1b2a2:	4881      	ldr	r0, [pc, #516]	; (1b4a8 <SX1276SetRx+0x20c>)
   1b2a4:	f000 fd8e 	bl	1bdc4 <TimerStop>
    switch( SX1276.Settings.Modem )
   1b2a8:	f894 50e1 	ldrb.w	r5, [r4, #225]	; 0xe1
   1b2ac:	b32d      	cbz	r5, 1b2fa <SX1276SetRx+0x5e>
   1b2ae:	2d01      	cmp	r5, #1
   1b2b0:	d04a      	beq.n	1b348 <SX1276SetRx+0xac>
   1b2b2:	2700      	movs	r7, #0
    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
   1b2b4:	487d      	ldr	r0, [pc, #500]	; (1b4ac <SX1276SetRx+0x210>)
   1b2b6:	f44f 7280 	mov.w	r2, #256	; 0x100
   1b2ba:	2100      	movs	r1, #0
   1b2bc:	f008 f9df 	bl	2367e <memset>
    SX1276.Settings.State = RF_RX_RUNNING;
   1b2c0:	2301      	movs	r3, #1
   1b2c2:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    if( timeout != 0 )
   1b2c6:	b136      	cbz	r6, 1b2d6 <SX1276SetRx+0x3a>
        TimerSetValue( &RxTimeoutTimer, timeout );
   1b2c8:	4879      	ldr	r0, [pc, #484]	; (1b4b0 <SX1276SetRx+0x214>)
   1b2ca:	4631      	mov	r1, r6
   1b2cc:	f007 fbe4 	bl	22a98 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
   1b2d0:	4877      	ldr	r0, [pc, #476]	; (1b4b0 <SX1276SetRx+0x214>)
   1b2d2:	f000 fd01 	bl	1bcd8 <TimerStart>
    if( SX1276.Settings.Modem == MODEM_FSK )
   1b2d6:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   1b2da:	2b00      	cmp	r3, #0
   1b2dc:	f040 80d9 	bne.w	1b492 <SX1276SetRx+0x1f6>
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
   1b2e0:	2005      	movs	r0, #5
   1b2e2:	f007 fb4c 	bl	2297e <SX1276SetOpMode>
        TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
   1b2e6:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
   1b2ea:	4872      	ldr	r0, [pc, #456]	; (1b4b4 <SX1276SetRx+0x218>)
   1b2ec:	f007 fbd4 	bl	22a98 <TimerSetValue>
}
   1b2f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        TimerStart( &RxTimeoutSyncWord );
   1b2f4:	486f      	ldr	r0, [pc, #444]	; (1b4b4 <SX1276SetRx+0x218>)
   1b2f6:	f000 bcef 	b.w	1bcd8 <TimerStart>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
   1b2fa:	2040      	movs	r0, #64	; 0x40
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
   1b2fc:	f894 7102 	ldrb.w	r7, [r4, #258]	; 0x102
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
   1b300:	f007 fb32 	bl	22968 <SX1276Read>
                                                                            RF_DIOMAPPING1_DIO0_00 |
   1b304:	f000 0103 	and.w	r1, r0, #3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
   1b308:	f041 010c 	orr.w	r1, r1, #12
   1b30c:	2040      	movs	r0, #64	; 0x40
   1b30e:	f007 fb20 	bl	22952 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
   1b312:	2041      	movs	r0, #65	; 0x41
   1b314:	f007 fb28 	bl	22968 <SX1276Read>
   1b318:	f060 013e 	orn	r1, r0, #62	; 0x3e
   1b31c:	b2c9      	uxtb	r1, r1
   1b31e:	2041      	movs	r0, #65	; 0x41
   1b320:	f007 fb17 	bl	22952 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
   1b324:	2035      	movs	r0, #53	; 0x35
   1b326:	f007 fb1f 	bl	22968 <SX1276Read>
   1b32a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   1b32e:	f884 011a 	strb.w	r0, [r4, #282]	; 0x11a
            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
   1b332:	211e      	movs	r1, #30
   1b334:	200d      	movs	r0, #13
   1b336:	f007 fb0c 	bl	22952 <SX1276Write>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
   1b33a:	f8a4 510c 	strh.w	r5, [r4, #268]	; 0x10c
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
   1b33e:	f8a4 5118 	strh.w	r5, [r4, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = 0;
   1b342:	f8a4 5116 	strh.w	r5, [r4, #278]	; 0x116
        break;
   1b346:	e7b5      	b.n	1b2b4 <SX1276SetRx+0x18>
            if( SX1276.Settings.LoRa.IqInverted == true )
   1b348:	f894 3131 	ldrb.w	r3, [r4, #305]	; 0x131
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
   1b34c:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
   1b34e:	b33b      	cbz	r3, 1b3a0 <SX1276SetRx+0x104>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
   1b350:	f007 fb0a 	bl	22968 <SX1276Read>
   1b354:	f040 0141 	orr.w	r1, r0, #65	; 0x41
   1b358:	b2c9      	uxtb	r1, r1
   1b35a:	2033      	movs	r0, #51	; 0x33
   1b35c:	f007 faf9 	bl	22952 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
   1b360:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
   1b362:	203b      	movs	r0, #59	; 0x3b
   1b364:	f007 faf5 	bl	22952 <SX1276Write>
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
   1b368:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   1b36c:	2b08      	cmp	r3, #8
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
   1b36e:	f04f 0031 	mov.w	r0, #49	; 0x31
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
   1b372:	d87d      	bhi.n	1b470 <SX1276SetRx+0x1d4>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
   1b374:	f007 faf8 	bl	22968 <SX1276Read>
   1b378:	f000 017f 	and.w	r1, r0, #127	; 0x7f
   1b37c:	2031      	movs	r0, #49	; 0x31
   1b37e:	f007 fae8 	bl	22952 <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
   1b382:	2100      	movs	r1, #0
   1b384:	2030      	movs	r0, #48	; 0x30
   1b386:	f007 fae4 	bl	22952 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
   1b38a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   1b38e:	2b08      	cmp	r3, #8
   1b390:	d81c      	bhi.n	1b3cc <SX1276SetRx+0x130>
   1b392:	e8df f003 	tbb	[pc, r3]
   1b396:	3610      	.short	0x3610
   1b398:	5e544a40 	.word	0x5e544a40
   1b39c:	6868      	.short	0x6868
   1b39e:	68          	.byte	0x68
   1b39f:	00          	.byte	0x00
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
   1b3a0:	f007 fae2 	bl	22968 <SX1276Read>
   1b3a4:	f000 01be 	and.w	r1, r0, #190	; 0xbe
   1b3a8:	f041 0101 	orr.w	r1, r1, #1
   1b3ac:	2033      	movs	r0, #51	; 0x33
   1b3ae:	f007 fad0 	bl	22952 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
   1b3b2:	211d      	movs	r1, #29
   1b3b4:	e7d5      	b.n	1b362 <SX1276SetRx+0xc6>
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
   1b3b6:	202f      	movs	r0, #47	; 0x2f
   1b3b8:	2148      	movs	r1, #72	; 0x48
   1b3ba:	f007 faca 	bl	22952 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
   1b3be:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
   1b3c2:	f500 50f4 	add.w	r0, r0, #7808	; 0x1e80
   1b3c6:	3002      	adds	r0, #2
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
   1b3c8:	f7e6 ff16 	bl	21f8 <SX1276SetChannel>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
   1b3cc:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
   1b3d0:	f894 7132 	ldrb.w	r7, [r4, #306]	; 0x132
            if( SX1276.Settings.LoRa.FreqHopOn == true )
   1b3d4:	2b00      	cmp	r3, #0
   1b3d6:	d052      	beq.n	1b47e <SX1276SetRx+0x1e2>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
   1b3d8:	211d      	movs	r1, #29
   1b3da:	2011      	movs	r0, #17
   1b3dc:	f007 fab9 	bl	22952 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
   1b3e0:	2040      	movs	r0, #64	; 0x40
   1b3e2:	f007 fac1 	bl	22968 <SX1276Read>
   1b3e6:	f000 0133 	and.w	r1, r0, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
   1b3ea:	2040      	movs	r0, #64	; 0x40
   1b3ec:	f007 fab1 	bl	22952 <SX1276Write>
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
   1b3f0:	2100      	movs	r1, #0
   1b3f2:	200f      	movs	r0, #15
   1b3f4:	f007 faad 	bl	22952 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
   1b3f8:	2100      	movs	r1, #0
   1b3fa:	200d      	movs	r0, #13
   1b3fc:	f007 faa9 	bl	22952 <SX1276Write>
        break;
   1b400:	e758      	b.n	1b2b4 <SX1276SetRx+0x18>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
   1b402:	202f      	movs	r0, #47	; 0x2f
   1b404:	2144      	movs	r1, #68	; 0x44
   1b406:	f007 faa4 	bl	22952 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
   1b40a:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
   1b40e:	f500 5022 	add.w	r0, r0, #10368	; 0x2880
   1b412:	3034      	adds	r0, #52	; 0x34
   1b414:	e7d8      	b.n	1b3c8 <SX1276SetRx+0x12c>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
   1b416:	202f      	movs	r0, #47	; 0x2f
   1b418:	2144      	movs	r1, #68	; 0x44
   1b41a:	f007 fa9a 	bl	22952 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
   1b41e:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
   1b422:	f500 5074 	add.w	r0, r0, #15616	; 0x3d00
   1b426:	3004      	adds	r0, #4
   1b428:	e7ce      	b.n	1b3c8 <SX1276SetRx+0x12c>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
   1b42a:	202f      	movs	r0, #47	; 0x2f
   1b42c:	2144      	movs	r1, #68	; 0x44
   1b42e:	f007 fa90 	bl	22952 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
   1b432:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
   1b436:	f500 40a2 	add.w	r0, r0, #20736	; 0x5100
   1b43a:	305e      	adds	r0, #94	; 0x5e
   1b43c:	e7c4      	b.n	1b3c8 <SX1276SetRx+0x12c>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
   1b43e:	202f      	movs	r0, #47	; 0x2f
   1b440:	2144      	movs	r1, #68	; 0x44
   1b442:	f007 fa86 	bl	22952 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
   1b446:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
   1b44a:	f500 40f4 	add.w	r0, r0, #31232	; 0x7a00
   1b44e:	3012      	adds	r0, #18
   1b450:	e7ba      	b.n	1b3c8 <SX1276SetRx+0x12c>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
   1b452:	202f      	movs	r0, #47	; 0x2f
   1b454:	2144      	movs	r1, #68	; 0x44
   1b456:	f007 fa7c 	bl	22952 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
   1b45a:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
   1b45e:	f500 4022 	add.w	r0, r0, #41472	; 0xa200
   1b462:	30c6      	adds	r0, #198	; 0xc6
   1b464:	e7b0      	b.n	1b3c8 <SX1276SetRx+0x12c>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
   1b466:	2140      	movs	r1, #64	; 0x40
   1b468:	202f      	movs	r0, #47	; 0x2f
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
   1b46a:	f007 fa72 	bl	22952 <SX1276Write>
   1b46e:	e7ad      	b.n	1b3cc <SX1276SetRx+0x130>
   1b470:	f007 fa7a 	bl	22968 <SX1276Read>
   1b474:	f060 017f 	orn	r1, r0, #127	; 0x7f
   1b478:	b2c9      	uxtb	r1, r1
   1b47a:	2031      	movs	r0, #49	; 0x31
   1b47c:	e7f5      	b.n	1b46a <SX1276SetRx+0x1ce>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
   1b47e:	211f      	movs	r1, #31
   1b480:	2011      	movs	r0, #17
   1b482:	f007 fa66 	bl	22952 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
   1b486:	2040      	movs	r0, #64	; 0x40
   1b488:	f007 fa6e 	bl	22968 <SX1276Read>
   1b48c:	f000 013f 	and.w	r1, r0, #63	; 0x3f
   1b490:	e7ab      	b.n	1b3ea <SX1276SetRx+0x14e>
        if( rxContinuous == true )
   1b492:	b127      	cbz	r7, 1b49e <SX1276SetRx+0x202>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
   1b494:	2005      	movs	r0, #5
}
   1b496:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
   1b49a:	f007 ba70 	b.w	2297e <SX1276SetOpMode>
   1b49e:	2006      	movs	r0, #6
   1b4a0:	e7f9      	b.n	1b496 <SX1276SetRx+0x1fa>
   1b4a2:	bf00      	nop
   1b4a4:	20002984 	.word	0x20002984
   1b4a8:	20002ac8 	.word	0x20002ac8
   1b4ac:	200031c6 	.word	0x200031c6
   1b4b0:	2000296c 	.word	0x2000296c
   1b4b4:	20002954 	.word	0x20002954

0001b4b8 <SX1276SetTx>:
{
   1b4b8:	b510      	push	{r4, lr}
   1b4ba:	4604      	mov	r4, r0
    TimerStop( &RxTimeoutTimer );
   1b4bc:	4826      	ldr	r0, [pc, #152]	; (1b558 <SX1276SetTx+0xa0>)
   1b4be:	f000 fc81 	bl	1bdc4 <TimerStop>
    TimerSetValue( &TxTimeoutTimer, timeout );
   1b4c2:	4621      	mov	r1, r4
    switch( SX1276.Settings.Modem )
   1b4c4:	4c25      	ldr	r4, [pc, #148]	; (1b55c <SX1276SetTx+0xa4>)
    TimerSetValue( &TxTimeoutTimer, timeout );
   1b4c6:	4826      	ldr	r0, [pc, #152]	; (1b560 <SX1276SetTx+0xa8>)
   1b4c8:	f007 fae6 	bl	22a98 <TimerSetValue>
    switch( SX1276.Settings.Modem )
   1b4cc:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   1b4d0:	b163      	cbz	r3, 1b4ec <SX1276SetTx+0x34>
   1b4d2:	2b01      	cmp	r3, #1
   1b4d4:	d024      	beq.n	1b520 <SX1276SetTx+0x68>
    TimerStart( &TxTimeoutTimer );
   1b4d6:	4822      	ldr	r0, [pc, #136]	; (1b560 <SX1276SetTx+0xa8>)
    SX1276.Settings.State = RF_TX_RUNNING;
   1b4d8:	2302      	movs	r3, #2
   1b4da:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    TimerStart( &TxTimeoutTimer );
   1b4de:	f000 fbfb 	bl	1bcd8 <TimerStart>
}
   1b4e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
   1b4e6:	2003      	movs	r0, #3
   1b4e8:	f007 ba49 	b.w	2297e <SX1276SetOpMode>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
   1b4ec:	2040      	movs	r0, #64	; 0x40
   1b4ee:	f007 fa3b 	bl	22968 <SX1276Read>
                                                                            RF_DIOMAPPING1_DIO1_MASK &
   1b4f2:	f000 0103 	and.w	r1, r0, #3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
   1b4f6:	f041 0110 	orr.w	r1, r1, #16
   1b4fa:	2040      	movs	r0, #64	; 0x40
   1b4fc:	f007 fa29 	bl	22952 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
   1b500:	2041      	movs	r0, #65	; 0x41
   1b502:	f007 fa31 	bl	22968 <SX1276Read>
   1b506:	f000 013e 	and.w	r1, r0, #62	; 0x3e
   1b50a:	2041      	movs	r0, #65	; 0x41
   1b50c:	f007 fa21 	bl	22952 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
   1b510:	2035      	movs	r0, #53	; 0x35
   1b512:	f007 fa29 	bl	22968 <SX1276Read>
   1b516:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   1b51a:	f884 011a 	strb.w	r0, [r4, #282]	; 0x11a
        break;
   1b51e:	e7da      	b.n	1b4d6 <SX1276SetTx+0x1e>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
   1b520:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
   1b524:	b173      	cbz	r3, 1b544 <SX1276SetTx+0x8c>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
   1b526:	21f5      	movs	r1, #245	; 0xf5
   1b528:	2011      	movs	r0, #17
   1b52a:	f007 fa12 	bl	22952 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
   1b52e:	2040      	movs	r0, #64	; 0x40
   1b530:	f007 fa1a 	bl	22968 <SX1276Read>
   1b534:	f000 0133 	and.w	r1, r0, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
   1b538:	f041 0140 	orr.w	r1, r1, #64	; 0x40
   1b53c:	2040      	movs	r0, #64	; 0x40
   1b53e:	f007 fa08 	bl	22952 <SX1276Write>
   1b542:	e7c8      	b.n	1b4d6 <SX1276SetTx+0x1e>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
   1b544:	21f7      	movs	r1, #247	; 0xf7
   1b546:	2011      	movs	r0, #17
   1b548:	f007 fa03 	bl	22952 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
   1b54c:	2040      	movs	r0, #64	; 0x40
   1b54e:	f007 fa0b 	bl	22968 <SX1276Read>
   1b552:	f000 013f 	and.w	r1, r0, #63	; 0x3f
   1b556:	e7ef      	b.n	1b538 <SX1276SetTx+0x80>
   1b558:	2000296c 	.word	0x2000296c
   1b55c:	20002984 	.word	0x20002984
   1b560:	20002ac8 	.word	0x20002ac8

0001b564 <SX1276SetModem>:
{
   1b564:	b510      	push	{r4, lr}
   1b566:	4604      	mov	r4, r0
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
   1b568:	2001      	movs	r0, #1
   1b56a:	f007 f9fd 	bl	22968 <SX1276Read>
        SX1276.Settings.Modem = MODEM_LORA;
   1b56e:	f3c0 10c0 	ubfx	r0, r0, #7, #1
    if( SX1276.Settings.Modem == modem )
   1b572:	42a0      	cmp	r0, r4
   1b574:	4b17      	ldr	r3, [pc, #92]	; (1b5d4 <SX1276SetModem+0x70>)
   1b576:	d102      	bne.n	1b57e <SX1276SetModem+0x1a>
   1b578:	f883 00e1 	strb.w	r0, [r3, #225]	; 0xe1
}
   1b57c:	bd10      	pop	{r4, pc}
    switch( SX1276.Settings.Modem )
   1b57e:	2c01      	cmp	r4, #1
    SX1276.Settings.Modem = modem;
   1b580:	f883 40e1 	strb.w	r4, [r3, #225]	; 0xe1
        SX1276SetOpMode( RF_OPMODE_SLEEP );
   1b584:	f04f 0000 	mov.w	r0, #0
    switch( SX1276.Settings.Modem )
   1b588:	d013      	beq.n	1b5b2 <SX1276SetModem+0x4e>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
   1b58a:	f007 f9f8 	bl	2297e <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
   1b58e:	2001      	movs	r0, #1
   1b590:	f007 f9ea 	bl	22968 <SX1276Read>
   1b594:	f000 017f 	and.w	r1, r0, #127	; 0x7f
   1b598:	2001      	movs	r0, #1
   1b59a:	f007 f9da 	bl	22952 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
   1b59e:	2100      	movs	r1, #0
   1b5a0:	2040      	movs	r0, #64	; 0x40
   1b5a2:	f007 f9d6 	bl	22952 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
   1b5a6:	2130      	movs	r1, #48	; 0x30
}
   1b5a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        SX1276Write( REG_DIOMAPPING2, 0x00 );
   1b5ac:	2041      	movs	r0, #65	; 0x41
   1b5ae:	f007 b9d0 	b.w	22952 <SX1276Write>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
   1b5b2:	f007 f9e4 	bl	2297e <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
   1b5b6:	4620      	mov	r0, r4
   1b5b8:	f007 f9d6 	bl	22968 <SX1276Read>
   1b5bc:	f060 017f 	orn	r1, r0, #127	; 0x7f
   1b5c0:	b2c9      	uxtb	r1, r1
   1b5c2:	4620      	mov	r0, r4
   1b5c4:	f007 f9c5 	bl	22952 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
   1b5c8:	2100      	movs	r1, #0
   1b5ca:	2040      	movs	r0, #64	; 0x40
   1b5cc:	f007 f9c1 	bl	22952 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
   1b5d0:	2100      	movs	r1, #0
   1b5d2:	e7e9      	b.n	1b5a8 <SX1276SetModem+0x44>
   1b5d4:	20002984 	.word	0x20002984

0001b5d8 <SX1276Init>:
{
   1b5d8:	b538      	push	{r3, r4, r5, lr}
    RadioEvents = events;
   1b5da:	4b17      	ldr	r3, [pc, #92]	; (1b638 <SX1276Init+0x60>)
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
   1b5dc:	4917      	ldr	r1, [pc, #92]	; (1b63c <SX1276Init+0x64>)
    RadioEvents = events;
   1b5de:	6018      	str	r0, [r3, #0]
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
   1b5e0:	4817      	ldr	r0, [pc, #92]	; (1b640 <SX1276Init+0x68>)
   1b5e2:	4c18      	ldr	r4, [pc, #96]	; (1b644 <SX1276Init+0x6c>)
   1b5e4:	f007 fa50 	bl	22a88 <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
   1b5e8:	4914      	ldr	r1, [pc, #80]	; (1b63c <SX1276Init+0x64>)
   1b5ea:	4817      	ldr	r0, [pc, #92]	; (1b648 <SX1276Init+0x70>)
   1b5ec:	f007 fa4c 	bl	22a88 <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
   1b5f0:	4912      	ldr	r1, [pc, #72]	; (1b63c <SX1276Init+0x64>)
   1b5f2:	4816      	ldr	r0, [pc, #88]	; (1b64c <SX1276Init+0x74>)
   1b5f4:	f007 fa48 	bl	22a88 <TimerInit>
    SX1276Reset( );
   1b5f8:	f7ff fbc6 	bl	1ad88 <SX1276Reset>
    RxChainCalibration( );
   1b5fc:	f7e6 fe24 	bl	2248 <RxChainCalibration>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
   1b600:	2000      	movs	r0, #0
   1b602:	f007 f9bc 	bl	2297e <SX1276SetOpMode>
    SX1276IoIrqInit( DioIrq );
   1b606:	4812      	ldr	r0, [pc, #72]	; (1b650 <SX1276Init+0x78>)
   1b608:	f7ff fbd4 	bl	1adb4 <SX1276IoIrqInit>
   1b60c:	2500      	movs	r5, #0
        SX1276SetModem( RadioRegsInit[i].Modem );
   1b60e:	7820      	ldrb	r0, [r4, #0]
   1b610:	f7ff ffa8 	bl	1b564 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
   1b614:	3501      	adds	r5, #1
   1b616:	78a1      	ldrb	r1, [r4, #2]
   1b618:	7860      	ldrb	r0, [r4, #1]
   1b61a:	f007 f99a 	bl	22952 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
   1b61e:	2d10      	cmp	r5, #16
   1b620:	f104 0403 	add.w	r4, r4, #3
   1b624:	d1f3      	bne.n	1b60e <SX1276Init+0x36>
    SX1276SetModem( MODEM_FSK );
   1b626:	2000      	movs	r0, #0
   1b628:	f7ff ff9c 	bl	1b564 <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
   1b62c:	4b09      	ldr	r3, [pc, #36]	; (1b654 <SX1276Init+0x7c>)
   1b62e:	2200      	movs	r2, #0
   1b630:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
   1b634:	bd38      	pop	{r3, r4, r5, pc}
   1b636:	bf00      	nop
   1b638:	20002950 	.word	0x20002950
   1b63c:	0001bbf1 	.word	0x0001bbf1
   1b640:	20002ac8 	.word	0x20002ac8
   1b644:	0002745e 	.word	0x0002745e
   1b648:	2000296c 	.word	0x2000296c
   1b64c:	20002954 	.word	0x20002954
   1b650:	2000060c 	.word	0x2000060c
   1b654:	20002984 	.word	0x20002984

0001b658 <SX1276SetTxContinuousWave>:
{
   1b658:	b530      	push	{r4, r5, lr}
    uint32_t timeout = ( uint32_t )( time * 1000 );
   1b65a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
   1b65e:	b08b      	sub	sp, #44	; 0x2c
    uint32_t timeout = ( uint32_t )( time * 1000 );
   1b660:	4354      	muls	r4, r2
{
   1b662:	460d      	mov	r5, r1
    SX1276SetChannel( freq );
   1b664:	f7e6 fdc8 	bl	21f8 <SX1276SetChannel>
    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
   1b668:	2300      	movs	r3, #0
   1b66a:	2205      	movs	r2, #5
   1b66c:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1b670:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
   1b674:	e9cd 3306 	strd	r3, r3, [sp, #24]
   1b678:	e9cd 3304 	strd	r3, r3, [sp, #16]
   1b67c:	9303      	str	r3, [sp, #12]
   1b67e:	4618      	mov	r0, r3
   1b680:	4629      	mov	r1, r5
   1b682:	9200      	str	r2, [sp, #0]
   1b684:	9408      	str	r4, [sp, #32]
   1b686:	461a      	mov	r2, r3
   1b688:	f7e7 f8ae 	bl	27e8 <SX1276SetTxConfig>
    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
   1b68c:	2031      	movs	r0, #49	; 0x31
   1b68e:	f007 f96b 	bl	22968 <SX1276Read>
   1b692:	f000 01bf 	and.w	r1, r0, #191	; 0xbf
   1b696:	2031      	movs	r0, #49	; 0x31
   1b698:	f007 f95b 	bl	22952 <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
   1b69c:	4d0c      	ldr	r5, [pc, #48]	; (1b6d0 <SX1276SetTxContinuousWave+0x78>)
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
   1b69e:	21f0      	movs	r1, #240	; 0xf0
   1b6a0:	2040      	movs	r0, #64	; 0x40
   1b6a2:	f007 f956 	bl	22952 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
   1b6a6:	21a0      	movs	r1, #160	; 0xa0
   1b6a8:	2041      	movs	r0, #65	; 0x41
   1b6aa:	f007 f952 	bl	22952 <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
   1b6ae:	4621      	mov	r1, r4
   1b6b0:	4628      	mov	r0, r5
   1b6b2:	f007 f9f1 	bl	22a98 <TimerSetValue>
    SX1276.Settings.State = RF_TX_RUNNING;
   1b6b6:	4b07      	ldr	r3, [pc, #28]	; (1b6d4 <SX1276SetTxContinuousWave+0x7c>)
   1b6b8:	2202      	movs	r2, #2
    TimerStart( &TxTimeoutTimer );
   1b6ba:	4628      	mov	r0, r5
    SX1276.Settings.State = RF_TX_RUNNING;
   1b6bc:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    TimerStart( &TxTimeoutTimer );
   1b6c0:	f000 fb0a 	bl	1bcd8 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
   1b6c4:	2003      	movs	r0, #3
}
   1b6c6:	b00b      	add	sp, #44	; 0x2c
   1b6c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
   1b6cc:	f007 b957 	b.w	2297e <SX1276SetOpMode>
   1b6d0:	20002ac8 	.word	0x20002ac8
   1b6d4:	20002984 	.word	0x20002984

0001b6d8 <SX1276OnDio3Irq>:
{
   1b6d8:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.Modem )
   1b6da:	4b11      	ldr	r3, [pc, #68]	; (1b720 <SX1276OnDio3Irq+0x48>)
   1b6dc:	f893 60e1 	ldrb.w	r6, [r3, #225]	; 0xe1
   1b6e0:	2e01      	cmp	r6, #1
   1b6e2:	d11c      	bne.n	1b71e <SX1276OnDio3Irq+0x46>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
   1b6e4:	2012      	movs	r0, #18
   1b6e6:	f007 f93f 	bl	22968 <SX1276Read>
   1b6ea:	f010 0401 	ands.w	r4, r0, #1
   1b6ee:	4d0d      	ldr	r5, [pc, #52]	; (1b724 <SX1276OnDio3Irq+0x4c>)
   1b6f0:	d00b      	beq.n	1b70a <SX1276OnDio3Irq+0x32>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
   1b6f2:	2105      	movs	r1, #5
   1b6f4:	2012      	movs	r0, #18
   1b6f6:	f007 f92c 	bl	22952 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
   1b6fa:	682b      	ldr	r3, [r5, #0]
   1b6fc:	b17b      	cbz	r3, 1b71e <SX1276OnDio3Irq+0x46>
   1b6fe:	699b      	ldr	r3, [r3, #24]
   1b700:	b16b      	cbz	r3, 1b71e <SX1276OnDio3Irq+0x46>
                RadioEvents->CadDone( true );
   1b702:	4630      	mov	r0, r6
}
   1b704:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                RadioEvents->CadDone( false );
   1b708:	4718      	bx	r3
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
   1b70a:	2104      	movs	r1, #4
   1b70c:	2012      	movs	r0, #18
   1b70e:	f007 f920 	bl	22952 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
   1b712:	682b      	ldr	r3, [r5, #0]
   1b714:	b11b      	cbz	r3, 1b71e <SX1276OnDio3Irq+0x46>
   1b716:	699b      	ldr	r3, [r3, #24]
   1b718:	b10b      	cbz	r3, 1b71e <SX1276OnDio3Irq+0x46>
                RadioEvents->CadDone( false );
   1b71a:	4620      	mov	r0, r4
   1b71c:	e7f2      	b.n	1b704 <SX1276OnDio3Irq+0x2c>
}
   1b71e:	bd70      	pop	{r4, r5, r6, pc}
   1b720:	20002984 	.word	0x20002984
   1b724:	20002950 	.word	0x20002950

0001b728 <SX1276Send>:
{
   1b728:	b537      	push	{r0, r1, r2, r4, r5, lr}
    switch( SX1276.Settings.Modem )
   1b72a:	4c3d      	ldr	r4, [pc, #244]	; (1b820 <SX1276Send+0xf8>)
{
   1b72c:	f88d 1007 	strb.w	r1, [sp, #7]
    switch( SX1276.Settings.Modem )
   1b730:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
{
   1b734:	4605      	mov	r5, r0
    switch( SX1276.Settings.Modem )
   1b736:	b133      	cbz	r3, 1b746 <SX1276Send+0x1e>
   1b738:	2b01      	cmp	r3, #1
   1b73a:	d034      	beq.n	1b7a6 <SX1276Send+0x7e>
   1b73c:	2000      	movs	r0, #0
    SX1276SetTx( txTimeout );
   1b73e:	f7ff febb 	bl	1b4b8 <SX1276SetTx>
}
   1b742:	b003      	add	sp, #12
   1b744:	bd30      	pop	{r4, r5, pc}
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
   1b746:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
            if( SX1276.Settings.Fsk.FixLen == false )
   1b74a:	f894 30fe 	ldrb.w	r3, [r4, #254]	; 0xfe
            SX1276.Settings.FskPacketHandler.Size = size;
   1b74e:	f89d 1007 	ldrb.w	r1, [sp, #7]
   1b752:	f8a4 1116 	strh.w	r1, [r4, #278]	; 0x116
            if( SX1276.Settings.Fsk.FixLen == false )
   1b756:	b9d3      	cbnz	r3, 1b78e <SX1276Send+0x66>
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
   1b758:	2101      	movs	r1, #1
   1b75a:	f10d 0007 	add.w	r0, sp, #7
   1b75e:	f007 f96e 	bl	22a3e <SX1276WriteFifo>
            if( ( size > 0 ) && ( size <= 64 ) )
   1b762:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1b766:	1e53      	subs	r3, r2, #1
   1b768:	2b3f      	cmp	r3, #63	; 0x3f
   1b76a:	d814      	bhi.n	1b796 <SX1276Send+0x6e>
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
   1b76c:	f884 211b 	strb.w	r2, [r4, #283]	; 0x11b
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
   1b770:	4628      	mov	r0, r5
   1b772:	f894 111b 	ldrb.w	r1, [r4, #283]	; 0x11b
   1b776:	f007 f962 	bl	22a3e <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
   1b77a:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
   1b77e:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
   1b782:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
   1b786:	4413      	add	r3, r2
   1b788:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
        break;
   1b78c:	e7d7      	b.n	1b73e <SX1276Send+0x16>
                SX1276Write( REG_PAYLOADLENGTH, size );
   1b78e:	2032      	movs	r0, #50	; 0x32
   1b790:	f007 f8df 	bl	22952 <SX1276Write>
   1b794:	e7e5      	b.n	1b762 <SX1276Send+0x3a>
                memcpy1( RxTxBuffer, buffer, size );
   1b796:	4823      	ldr	r0, [pc, #140]	; (1b824 <SX1276Send+0xfc>)
   1b798:	4629      	mov	r1, r5
   1b79a:	f007 f9a6 	bl	22aea <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
   1b79e:	2320      	movs	r3, #32
   1b7a0:	f884 311b 	strb.w	r3, [r4, #283]	; 0x11b
   1b7a4:	e7e4      	b.n	1b770 <SX1276Send+0x48>
            if( SX1276.Settings.LoRa.IqInverted == true )
   1b7a6:	f894 3131 	ldrb.w	r3, [r4, #305]	; 0x131
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
   1b7aa:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
   1b7ac:	b363      	cbz	r3, 1b808 <SX1276Send+0xe0>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
   1b7ae:	f007 f8db 	bl	22968 <SX1276Read>
   1b7b2:	f000 01be 	and.w	r1, r0, #190	; 0xbe
   1b7b6:	2033      	movs	r0, #51	; 0x33
   1b7b8:	f007 f8cb 	bl	22952 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
   1b7bc:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
   1b7be:	203b      	movs	r0, #59	; 0x3b
   1b7c0:	f007 f8c7 	bl	22952 <SX1276Write>
            SX1276.Settings.LoRaPacketHandler.Size = size;
   1b7c4:	f89d 1007 	ldrb.w	r1, [sp, #7]
   1b7c8:	f884 1140 	strb.w	r1, [r4, #320]	; 0x140
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
   1b7cc:	2022      	movs	r0, #34	; 0x22
   1b7ce:	f007 f8c0 	bl	22952 <SX1276Write>
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
   1b7d2:	2100      	movs	r1, #0
   1b7d4:	200e      	movs	r0, #14
   1b7d6:	f007 f8bc 	bl	22952 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
   1b7da:	2100      	movs	r1, #0
   1b7dc:	200d      	movs	r0, #13
   1b7de:	f007 f8b8 	bl	22952 <SX1276Write>
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
   1b7e2:	2001      	movs	r0, #1
   1b7e4:	f007 f8c0 	bl	22968 <SX1276Read>
   1b7e8:	f030 03f8 	bics.w	r3, r0, #248	; 0xf8
   1b7ec:	d104      	bne.n	1b7f8 <SX1276Send+0xd0>
                SX1276SetStby( );
   1b7ee:	f7ff fd3b 	bl	1b268 <SX1276SetStby>
                DelayMs( 1 );
   1b7f2:	2001      	movs	r0, #1
   1b7f4:	f007 f977 	bl	22ae6 <DelayMs>
            SX1276WriteFifo( buffer, size );
   1b7f8:	4628      	mov	r0, r5
   1b7fa:	f89d 1007 	ldrb.w	r1, [sp, #7]
   1b7fe:	f007 f91e 	bl	22a3e <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
   1b802:	f8d4 0134 	ldr.w	r0, [r4, #308]	; 0x134
        break;
   1b806:	e79a      	b.n	1b73e <SX1276Send+0x16>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
   1b808:	f007 f8ae 	bl	22968 <SX1276Read>
   1b80c:	f000 01be 	and.w	r1, r0, #190	; 0xbe
   1b810:	f041 0101 	orr.w	r1, r1, #1
   1b814:	2033      	movs	r0, #51	; 0x33
   1b816:	f007 f89c 	bl	22952 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
   1b81a:	211d      	movs	r1, #29
   1b81c:	e7cf      	b.n	1b7be <SX1276Send+0x96>
   1b81e:	bf00      	nop
   1b820:	20002984 	.word	0x20002984
   1b824:	200031c6 	.word	0x200031c6

0001b828 <SX1276OnDio0Irq>:
{
   1b828:	b573      	push	{r0, r1, r4, r5, r6, lr}
    switch( SX1276.Settings.State )
   1b82a:	4e91      	ldr	r6, [pc, #580]	; (1ba70 <SX1276OnDio0Irq+0x248>)
    volatile uint8_t irqFlags = 0;
   1b82c:	2300      	movs	r3, #0
   1b82e:	f88d 3007 	strb.w	r3, [sp, #7]
    switch( SX1276.Settings.State )
   1b832:	f896 30e0 	ldrb.w	r3, [r6, #224]	; 0xe0
   1b836:	2b01      	cmp	r3, #1
   1b838:	4634      	mov	r4, r6
   1b83a:	d004      	beq.n	1b846 <SX1276OnDio0Irq+0x1e>
   1b83c:	2b02      	cmp	r3, #2
   1b83e:	f000 8101 	beq.w	1ba44 <SX1276OnDio0Irq+0x21c>
}
   1b842:	b002      	add	sp, #8
   1b844:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
   1b846:	f896 30e1 	ldrb.w	r3, [r6, #225]	; 0xe1
   1b84a:	b33b      	cbz	r3, 1b89c <SX1276OnDio0Irq+0x74>
   1b84c:	2b01      	cmp	r3, #1
   1b84e:	d1f8      	bne.n	1b842 <SX1276OnDio0Irq+0x1a>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
   1b850:	2140      	movs	r1, #64	; 0x40
   1b852:	2012      	movs	r0, #18
   1b854:	f007 f87d 	bl	22952 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
   1b858:	2012      	movs	r0, #18
   1b85a:	f007 f885 	bl	22968 <SX1276Read>
   1b85e:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
   1b862:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1b866:	4d83      	ldr	r5, [pc, #524]	; (1ba74 <SX1276OnDio0Irq+0x24c>)
   1b868:	f013 0f20 	tst.w	r3, #32
   1b86c:	f000 8098 	beq.w	1b9a0 <SX1276OnDio0Irq+0x178>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
   1b870:	2120      	movs	r1, #32
   1b872:	2012      	movs	r0, #18
   1b874:	f007 f86d 	bl	22952 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
   1b878:	f896 3132 	ldrb.w	r3, [r6, #306]	; 0x132
   1b87c:	b90b      	cbnz	r3, 1b882 <SX1276OnDio0Irq+0x5a>
                            SX1276.Settings.State = RF_IDLE;
   1b87e:	f886 30e0 	strb.w	r3, [r6, #224]	; 0xe0
                        TimerStop( &RxTimeoutTimer );
   1b882:	487d      	ldr	r0, [pc, #500]	; (1ba78 <SX1276OnDio0Irq+0x250>)
   1b884:	f000 fa9e 	bl	1bdc4 <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
   1b888:	682b      	ldr	r3, [r5, #0]
   1b88a:	2b00      	cmp	r3, #0
   1b88c:	d0d9      	beq.n	1b842 <SX1276OnDio0Irq+0x1a>
   1b88e:	691b      	ldr	r3, [r3, #16]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
   1b890:	2b00      	cmp	r3, #0
   1b892:	d0d6      	beq.n	1b842 <SX1276OnDio0Irq+0x1a>
}
   1b894:	b002      	add	sp, #8
   1b896:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    RadioEvents->TxDone( );
   1b89a:	4718      	bx	r3
                if( SX1276.Settings.Fsk.CrcOn == true )
   1b89c:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
   1b8a0:	4d74      	ldr	r5, [pc, #464]	; (1ba74 <SX1276OnDio0Irq+0x24c>)
   1b8a2:	b3ab      	cbz	r3, 1b910 <SX1276OnDio0Irq+0xe8>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
   1b8a4:	203f      	movs	r0, #63	; 0x3f
   1b8a6:	f007 f85f 	bl	22968 <SX1276Read>
   1b8aa:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
   1b8ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1b8b2:	079b      	lsls	r3, r3, #30
   1b8b4:	d42c      	bmi.n	1b910 <SX1276OnDio0Irq+0xe8>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
   1b8b6:	210b      	movs	r1, #11
   1b8b8:	203e      	movs	r0, #62	; 0x3e
   1b8ba:	f007 f84a 	bl	22952 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
   1b8be:	2110      	movs	r1, #16
   1b8c0:	203f      	movs	r0, #63	; 0x3f
   1b8c2:	f007 f846 	bl	22952 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
   1b8c6:	486c      	ldr	r0, [pc, #432]	; (1ba78 <SX1276OnDio0Irq+0x250>)
   1b8c8:	f000 fa7c 	bl	1bdc4 <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
   1b8cc:	f896 6102 	ldrb.w	r6, [r6, #258]	; 0x102
   1b8d0:	b98e      	cbnz	r6, 1b8f6 <SX1276OnDio0Irq+0xce>
                            TimerStop( &RxTimeoutSyncWord );
   1b8d2:	486a      	ldr	r0, [pc, #424]	; (1ba7c <SX1276OnDio0Irq+0x254>)
   1b8d4:	f000 fa76 	bl	1bdc4 <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
   1b8d8:	f884 60e0 	strb.w	r6, [r4, #224]	; 0xe0
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
   1b8dc:	682b      	ldr	r3, [r5, #0]
   1b8de:	b113      	cbz	r3, 1b8e6 <SX1276OnDio0Irq+0xbe>
   1b8e0:	691b      	ldr	r3, [r3, #16]
   1b8e2:	b103      	cbz	r3, 1b8e6 <SX1276OnDio0Irq+0xbe>
                            RadioEvents->RxError( );
   1b8e4:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
   1b8e6:	2300      	movs	r3, #0
   1b8e8:	f8a4 310c 	strh.w	r3, [r4, #268]	; 0x10c
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
   1b8ec:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
                        SX1276.Settings.FskPacketHandler.Size = 0;
   1b8f0:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
                        break;
   1b8f4:	e7a5      	b.n	1b842 <SX1276OnDio0Irq+0x1a>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
   1b8f6:	200d      	movs	r0, #13
   1b8f8:	f007 f836 	bl	22968 <SX1276Read>
   1b8fc:	f040 0140 	orr.w	r1, r0, #64	; 0x40
   1b900:	b2c9      	uxtb	r1, r1
   1b902:	200d      	movs	r0, #13
   1b904:	f007 f825 	bl	22952 <SX1276Write>
                            TimerStart( &RxTimeoutSyncWord );
   1b908:	485c      	ldr	r0, [pc, #368]	; (1ba7c <SX1276OnDio0Irq+0x254>)
   1b90a:	f000 f9e5 	bl	1bcd8 <TimerStart>
   1b90e:	e7e5      	b.n	1b8dc <SX1276OnDio0Irq+0xb4>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
   1b910:	f8b4 1116 	ldrh.w	r1, [r4, #278]	; 0x116
   1b914:	f8b4 0118 	ldrh.w	r0, [r4, #280]	; 0x118
   1b918:	4e59      	ldr	r6, [pc, #356]	; (1ba80 <SX1276OnDio0Irq+0x258>)
   1b91a:	ea51 0300 	orrs.w	r3, r1, r0
   1b91e:	d10a      	bne.n	1b936 <SX1276OnDio0Irq+0x10e>
                    if( SX1276.Settings.Fsk.FixLen == false )
   1b920:	f894 30fe 	ldrb.w	r3, [r4, #254]	; 0xfe
   1b924:	bb4b      	cbnz	r3, 1b97a <SX1276OnDio0Irq+0x152>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
   1b926:	4857      	ldr	r0, [pc, #348]	; (1ba84 <SX1276OnDio0Irq+0x25c>)
   1b928:	2101      	movs	r1, #1
   1b92a:	f007 f88d 	bl	22a48 <SX1276ReadFifo>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
   1b92e:	f8b4 0118 	ldrh.w	r0, [r4, #280]	; 0x118
   1b932:	f894 1116 	ldrb.w	r1, [r4, #278]	; 0x116
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
   1b936:	1a09      	subs	r1, r1, r0
   1b938:	b2c9      	uxtb	r1, r1
   1b93a:	4430      	add	r0, r6
   1b93c:	f007 f884 	bl	22a48 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
   1b940:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
                TimerStop( &RxTimeoutTimer );
   1b944:	484c      	ldr	r0, [pc, #304]	; (1ba78 <SX1276OnDio0Irq+0x250>)
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
   1b946:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
                TimerStop( &RxTimeoutTimer );
   1b94a:	f000 fa3b 	bl	1bdc4 <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
   1b94e:	f894 3102 	ldrb.w	r3, [r4, #258]	; 0x102
   1b952:	b9c3      	cbnz	r3, 1b986 <SX1276OnDio0Irq+0x15e>
                    TimerStop( &RxTimeoutSyncWord );
   1b954:	4849      	ldr	r0, [pc, #292]	; (1ba7c <SX1276OnDio0Irq+0x254>)
                    SX1276.Settings.State = RF_IDLE;
   1b956:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                    TimerStop( &RxTimeoutSyncWord );
   1b95a:	f000 fa33 	bl	1bdc4 <TimerStop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
   1b95e:	682b      	ldr	r3, [r5, #0]
   1b960:	2b00      	cmp	r3, #0
   1b962:	d0c0      	beq.n	1b8e6 <SX1276OnDio0Irq+0xbe>
   1b964:	689d      	ldr	r5, [r3, #8]
   1b966:	2d00      	cmp	r5, #0
   1b968:	d0bd      	beq.n	1b8e6 <SX1276OnDio0Irq+0xbe>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
   1b96a:	f994 210e 	ldrsb.w	r2, [r4, #270]	; 0x10e
   1b96e:	f8b4 1116 	ldrh.w	r1, [r4, #278]	; 0x116
   1b972:	4843      	ldr	r0, [pc, #268]	; (1ba80 <SX1276OnDio0Irq+0x258>)
   1b974:	2300      	movs	r3, #0
   1b976:	47a8      	blx	r5
   1b978:	e7b5      	b.n	1b8e6 <SX1276OnDio0Irq+0xbe>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
   1b97a:	2032      	movs	r0, #50	; 0x32
   1b97c:	f006 fff4 	bl	22968 <SX1276Read>
   1b980:	f8a4 0116 	strh.w	r0, [r4, #278]	; 0x116
   1b984:	e7d3      	b.n	1b92e <SX1276OnDio0Irq+0x106>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
   1b986:	200d      	movs	r0, #13
   1b988:	f006 ffee 	bl	22968 <SX1276Read>
   1b98c:	f040 0140 	orr.w	r1, r0, #64	; 0x40
   1b990:	b2c9      	uxtb	r1, r1
   1b992:	200d      	movs	r0, #13
   1b994:	f006 ffdd 	bl	22952 <SX1276Write>
                    TimerStart( &RxTimeoutSyncWord );
   1b998:	4838      	ldr	r0, [pc, #224]	; (1ba7c <SX1276OnDio0Irq+0x254>)
   1b99a:	f000 f99d 	bl	1bcd8 <TimerStart>
   1b99e:	e7de      	b.n	1b95e <SX1276OnDio0Irq+0x136>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
   1b9a0:	2019      	movs	r0, #25
   1b9a2:	f006 ffe1 	bl	22968 <SX1276Read>
   1b9a6:	b240      	sxtb	r0, r0
   1b9a8:	3002      	adds	r0, #2
   1b9aa:	1080      	asrs	r0, r0, #2
   1b9ac:	f886 013c 	strb.w	r0, [r6, #316]	; 0x13c
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
   1b9b0:	201a      	movs	r0, #26
   1b9b2:	f006 ffd9 	bl	22968 <SX1276Read>
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
   1b9b6:	f996 213c 	ldrsb.w	r2, [r6, #316]	; 0x13c
   1b9ba:	4933      	ldr	r1, [pc, #204]	; (1ba88 <SX1276OnDio0Irq+0x260>)
   1b9bc:	2a00      	cmp	r2, #0
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
   1b9be:	b203      	sxth	r3, r0
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
   1b9c0:	f340 100b 	sbfx	r0, r0, #4, #12
   1b9c4:	da37      	bge.n	1ba36 <SX1276OnDio0Irq+0x20e>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
   1b9c6:	f8d6 60e4 	ldr.w	r6, [r6, #228]	; 0xe4
   1b9ca:	b212      	sxth	r2, r2
   1b9cc:	428e      	cmp	r6, r1
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
   1b9ce:	bf8c      	ite	hi
   1b9d0:	3a9d      	subhi	r2, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
   1b9d2:	3aa4      	subls	r2, #164	; 0xa4
   1b9d4:	4413      	add	r3, r2
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
   1b9d6:	4403      	add	r3, r0
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
   1b9d8:	2013      	movs	r0, #19
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
   1b9da:	f8a4 313e 	strh.w	r3, [r4, #318]	; 0x13e
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
   1b9de:	f006 ffc3 	bl	22968 <SX1276Read>
   1b9e2:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
   1b9e6:	2010      	movs	r0, #16
   1b9e8:	f006 ffbe 	bl	22968 <SX1276Read>
   1b9ec:	4601      	mov	r1, r0
   1b9ee:	200d      	movs	r0, #13
   1b9f0:	f006 ffaf 	bl	22952 <SX1276Write>
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
   1b9f4:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
   1b9f8:	4821      	ldr	r0, [pc, #132]	; (1ba80 <SX1276OnDio0Irq+0x258>)
   1b9fa:	f007 f825 	bl	22a48 <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
   1b9fe:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
   1ba02:	b90b      	cbnz	r3, 1ba08 <SX1276OnDio0Irq+0x1e0>
                        SX1276.Settings.State = RF_IDLE;
   1ba04:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                    TimerStop( &RxTimeoutTimer );
   1ba08:	481b      	ldr	r0, [pc, #108]	; (1ba78 <SX1276OnDio0Irq+0x250>)
   1ba0a:	f000 f9db 	bl	1bdc4 <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
   1ba0e:	682b      	ldr	r3, [r5, #0]
   1ba10:	2b00      	cmp	r3, #0
   1ba12:	f43f af16 	beq.w	1b842 <SX1276OnDio0Irq+0x1a>
   1ba16:	689d      	ldr	r5, [r3, #8]
   1ba18:	2d00      	cmp	r5, #0
   1ba1a:	f43f af12 	beq.w	1b842 <SX1276OnDio0Irq+0x1a>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
   1ba1e:	f994 313c 	ldrsb.w	r3, [r4, #316]	; 0x13c
   1ba22:	f9b4 213e 	ldrsh.w	r2, [r4, #318]	; 0x13e
   1ba26:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
   1ba2a:	4815      	ldr	r0, [pc, #84]	; (1ba80 <SX1276OnDio0Irq+0x258>)
   1ba2c:	46ac      	mov	ip, r5
}
   1ba2e:	b002      	add	sp, #8
   1ba30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
   1ba34:	4760      	bx	ip
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
   1ba36:	f8d6 20e4 	ldr.w	r2, [r6, #228]	; 0xe4
   1ba3a:	428a      	cmp	r2, r1
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
   1ba3c:	bf8c      	ite	hi
   1ba3e:	3b9d      	subhi	r3, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
   1ba40:	3ba4      	subls	r3, #164	; 0xa4
   1ba42:	e7c8      	b.n	1b9d6 <SX1276OnDio0Irq+0x1ae>
            TimerStop( &TxTimeoutTimer );
   1ba44:	4811      	ldr	r0, [pc, #68]	; (1ba8c <SX1276OnDio0Irq+0x264>)
   1ba46:	f000 f9bd 	bl	1bdc4 <TimerStop>
            switch( SX1276.Settings.Modem )
   1ba4a:	f896 30e1 	ldrb.w	r3, [r6, #225]	; 0xe1
   1ba4e:	2b01      	cmp	r3, #1
   1ba50:	d103      	bne.n	1ba5a <SX1276OnDio0Irq+0x232>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
   1ba52:	2108      	movs	r1, #8
   1ba54:	2012      	movs	r0, #18
   1ba56:	f006 ff7c 	bl	22952 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
   1ba5a:	2300      	movs	r3, #0
   1ba5c:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
   1ba60:	4b04      	ldr	r3, [pc, #16]	; (1ba74 <SX1276OnDio0Irq+0x24c>)
   1ba62:	681b      	ldr	r3, [r3, #0]
   1ba64:	2b00      	cmp	r3, #0
   1ba66:	f43f aeec 	beq.w	1b842 <SX1276OnDio0Irq+0x1a>
   1ba6a:	681b      	ldr	r3, [r3, #0]
   1ba6c:	e710      	b.n	1b890 <SX1276OnDio0Irq+0x68>
   1ba6e:	bf00      	nop
   1ba70:	20002984 	.word	0x20002984
   1ba74:	20002950 	.word	0x20002950
   1ba78:	2000296c 	.word	0x2000296c
   1ba7c:	20002954 	.word	0x20002954
   1ba80:	200031c6 	.word	0x200031c6
   1ba84:	20002a9a 	.word	0x20002a9a
   1ba88:	1f4add40 	.word	0x1f4add40
   1ba8c:	20002ac8 	.word	0x20002ac8

0001ba90 <SX1276OnDio1Irq>:
{
   1ba90:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
   1ba92:	4c3b      	ldr	r4, [pc, #236]	; (1bb80 <SX1276OnDio1Irq+0xf0>)
   1ba94:	f894 60e0 	ldrb.w	r6, [r4, #224]	; 0xe0
   1ba98:	2e01      	cmp	r6, #1
   1ba9a:	4625      	mov	r5, r4
   1ba9c:	d002      	beq.n	1baa4 <SX1276OnDio1Irq+0x14>
   1ba9e:	2e02      	cmp	r6, #2
   1baa0:	d04e      	beq.n	1bb40 <SX1276OnDio1Irq+0xb0>
}
   1baa2:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
   1baa4:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   1baa8:	b1ab      	cbz	r3, 1bad6 <SX1276OnDio1Irq+0x46>
   1baaa:	2b01      	cmp	r3, #1
   1baac:	d1f9      	bne.n	1baa2 <SX1276OnDio1Irq+0x12>
                TimerStop( &RxTimeoutTimer );
   1baae:	4835      	ldr	r0, [pc, #212]	; (1bb84 <SX1276OnDio1Irq+0xf4>)
   1bab0:	f000 f988 	bl	1bdc4 <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
   1bab4:	2180      	movs	r1, #128	; 0x80
   1bab6:	2012      	movs	r0, #18
   1bab8:	f006 ff4b 	bl	22952 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
   1babc:	2300      	movs	r3, #0
   1babe:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
   1bac2:	4b31      	ldr	r3, [pc, #196]	; (1bb88 <SX1276OnDio1Irq+0xf8>)
   1bac4:	681b      	ldr	r3, [r3, #0]
   1bac6:	2b00      	cmp	r3, #0
   1bac8:	d0eb      	beq.n	1baa2 <SX1276OnDio1Irq+0x12>
   1baca:	68db      	ldr	r3, [r3, #12]
   1bacc:	2b00      	cmp	r3, #0
   1bace:	d0e8      	beq.n	1baa2 <SX1276OnDio1Irq+0x12>
}
   1bad0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    RadioEvents->RxTimeout( );
   1bad4:	4718      	bx	r3
                TimerStop( &RxTimeoutSyncWord );
   1bad6:	482d      	ldr	r0, [pc, #180]	; (1bb8c <SX1276OnDio1Irq+0xfc>)
   1bad8:	f000 f974 	bl	1bdc4 <TimerStop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
   1badc:	f8b4 2116 	ldrh.w	r2, [r4, #278]	; 0x116
   1bae0:	f8b4 3118 	ldrh.w	r3, [r4, #280]	; 0x118
   1bae4:	4313      	orrs	r3, r2
   1bae6:	d107      	bne.n	1baf8 <SX1276OnDio1Irq+0x68>
                    if( SX1276.Settings.Fsk.FixLen == false )
   1bae8:	f894 30fe 	ldrb.w	r3, [r4, #254]	; 0xfe
   1baec:	b9e3      	cbnz	r3, 1bb28 <SX1276OnDio1Irq+0x98>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
   1baee:	4631      	mov	r1, r6
   1baf0:	f504 708b 	add.w	r0, r4, #278	; 0x116
   1baf4:	f006 ffa8 	bl	22a48 <SX1276ReadFifo>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
   1baf8:	f8b5 2118 	ldrh.w	r2, [r5, #280]	; 0x118
   1bafc:	f8b5 1116 	ldrh.w	r1, [r5, #278]	; 0x116
   1bb00:	f895 311a 	ldrb.w	r3, [r5, #282]	; 0x11a
   1bb04:	4822      	ldr	r0, [pc, #136]	; (1bb90 <SX1276OnDio1Irq+0x100>)
   1bb06:	1a89      	subs	r1, r1, r2
   1bb08:	4299      	cmp	r1, r3
   1bb0a:	4410      	add	r0, r2
   1bb0c:	db12      	blt.n	1bb34 <SX1276OnDio1Irq+0xa4>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
   1bb0e:	1e59      	subs	r1, r3, #1
   1bb10:	b2c9      	uxtb	r1, r1
   1bb12:	f006 ff99 	bl	22a48 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
   1bb16:	f895 311a 	ldrb.w	r3, [r5, #282]	; 0x11a
   1bb1a:	f8b5 2118 	ldrh.w	r2, [r5, #280]	; 0x118
   1bb1e:	4413      	add	r3, r2
   1bb20:	3b01      	subs	r3, #1
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
   1bb22:	f8a5 3118 	strh.w	r3, [r5, #280]	; 0x118
   1bb26:	e7bc      	b.n	1baa2 <SX1276OnDio1Irq+0x12>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
   1bb28:	2032      	movs	r0, #50	; 0x32
   1bb2a:	f006 ff1d 	bl	22968 <SX1276Read>
   1bb2e:	f8a4 0116 	strh.w	r0, [r4, #278]	; 0x116
   1bb32:	e7e1      	b.n	1baf8 <SX1276OnDio1Irq+0x68>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
   1bb34:	b2c9      	uxtb	r1, r1
   1bb36:	f006 ff87 	bl	22a48 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
   1bb3a:	f8b5 3116 	ldrh.w	r3, [r5, #278]	; 0x116
   1bb3e:	e7f0      	b.n	1bb22 <SX1276OnDio1Irq+0x92>
            switch( SX1276.Settings.Modem )
   1bb40:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   1bb44:	2b00      	cmp	r3, #0
   1bb46:	d1ac      	bne.n	1baa2 <SX1276OnDio1Irq+0x12>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
   1bb48:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
   1bb4c:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
   1bb50:	f894 111b 	ldrb.w	r1, [r4, #283]	; 0x11b
   1bb54:	480e      	ldr	r0, [pc, #56]	; (1bb90 <SX1276OnDio1Irq+0x100>)
   1bb56:	1a9b      	subs	r3, r3, r2
   1bb58:	428b      	cmp	r3, r1
   1bb5a:	4410      	add	r0, r2
   1bb5c:	dd09      	ble.n	1bb72 <SX1276OnDio1Irq+0xe2>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
   1bb5e:	f006 ff6e 	bl	22a3e <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
   1bb62:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
   1bb66:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
   1bb6a:	4413      	add	r3, r2
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
   1bb6c:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
}
   1bb70:	e797      	b.n	1baa2 <SX1276OnDio1Irq+0x12>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
   1bb72:	b2d9      	uxtb	r1, r3
   1bb74:	f006 ff63 	bl	22a3e <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
   1bb78:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
   1bb7c:	e7f6      	b.n	1bb6c <SX1276OnDio1Irq+0xdc>
   1bb7e:	bf00      	nop
   1bb80:	20002984 	.word	0x20002984
   1bb84:	2000296c 	.word	0x2000296c
   1bb88:	20002950 	.word	0x20002950
   1bb8c:	20002954 	.word	0x20002954
   1bb90:	200031c6 	.word	0x200031c6

0001bb94 <SX1276SetMaxPayloadLength>:
{
   1bb94:	b538      	push	{r3, r4, r5, lr}
   1bb96:	4605      	mov	r5, r0
   1bb98:	460c      	mov	r4, r1
    SX1276SetModem( modem );
   1bb9a:	f7ff fce3 	bl	1b564 <SX1276SetModem>
    switch( modem )
   1bb9e:	b115      	cbz	r5, 1bba6 <SX1276SetMaxPayloadLength+0x12>
   1bba0:	2d01      	cmp	r5, #1
   1bba2:	d00b      	beq.n	1bbbc <SX1276SetMaxPayloadLength+0x28>
}
   1bba4:	bd38      	pop	{r3, r4, r5, pc}
        if( SX1276.Settings.Fsk.FixLen == false )
   1bba6:	4b07      	ldr	r3, [pc, #28]	; (1bbc4 <SX1276SetMaxPayloadLength+0x30>)
   1bba8:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
   1bbac:	2b00      	cmp	r3, #0
   1bbae:	d1f9      	bne.n	1bba4 <SX1276SetMaxPayloadLength+0x10>
            SX1276Write( REG_PAYLOADLENGTH, max );
   1bbb0:	4621      	mov	r1, r4
   1bbb2:	2032      	movs	r0, #50	; 0x32
}
   1bbb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
   1bbb8:	f006 becb 	b.w	22952 <SX1276Write>
   1bbbc:	4621      	mov	r1, r4
   1bbbe:	2023      	movs	r0, #35	; 0x23
   1bbc0:	e7f8      	b.n	1bbb4 <SX1276SetMaxPayloadLength+0x20>
   1bbc2:	bf00      	nop
   1bbc4:	20002984 	.word	0x20002984

0001bbc8 <SX1276SetPublicNetwork>:
{
   1bbc8:	b510      	push	{r4, lr}
   1bbca:	4604      	mov	r4, r0
    SX1276SetModem( MODEM_LORA );
   1bbcc:	2001      	movs	r0, #1
   1bbce:	f7ff fcc9 	bl	1b564 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
   1bbd2:	4b06      	ldr	r3, [pc, #24]	; (1bbec <SX1276SetPublicNetwork+0x24>)
   1bbd4:	f883 4138 	strb.w	r4, [r3, #312]	; 0x138
    if( enable == true )
   1bbd8:	b12c      	cbz	r4, 1bbe6 <SX1276SetPublicNetwork+0x1e>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
   1bbda:	2134      	movs	r1, #52	; 0x34
}
   1bbdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
   1bbe0:	2039      	movs	r0, #57	; 0x39
   1bbe2:	f006 beb6 	b.w	22952 <SX1276Write>
   1bbe6:	2112      	movs	r1, #18
   1bbe8:	e7f8      	b.n	1bbdc <SX1276SetPublicNetwork+0x14>
   1bbea:	bf00      	nop
   1bbec:	20002984 	.word	0x20002984

0001bbf0 <SX1276OnTimeoutIrq>:
{
   1bbf0:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
   1bbf2:	4c2f      	ldr	r4, [pc, #188]	; (1bcb0 <SX1276OnTimeoutIrq+0xc0>)
   1bbf4:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   1bbf8:	2b01      	cmp	r3, #1
   1bbfa:	4626      	mov	r6, r4
   1bbfc:	d002      	beq.n	1bc04 <SX1276OnTimeoutIrq+0x14>
   1bbfe:	2b02      	cmp	r3, #2
   1bc00:	d030      	beq.n	1bc64 <SX1276OnTimeoutIrq+0x74>
}
   1bc02:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Modem == MODEM_FSK )
   1bc04:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   1bc08:	b9e3      	cbnz	r3, 1bc44 <SX1276OnTimeoutIrq+0x54>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
   1bc0a:	f8a4 310c 	strh.w	r3, [r4, #268]	; 0x10c
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
   1bc0e:	210b      	movs	r1, #11
   1bc10:	203e      	movs	r0, #62	; 0x3e
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
   1bc12:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = 0;
   1bc16:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
   1bc1a:	f006 fe9a 	bl	22952 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
   1bc1e:	2110      	movs	r1, #16
   1bc20:	203f      	movs	r0, #63	; 0x3f
   1bc22:	f006 fe96 	bl	22952 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
   1bc26:	f894 3102 	ldrb.w	r3, [r4, #258]	; 0x102
   1bc2a:	b1ab      	cbz	r3, 1bc58 <SX1276OnTimeoutIrq+0x68>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
   1bc2c:	200d      	movs	r0, #13
   1bc2e:	f006 fe9b 	bl	22968 <SX1276Read>
   1bc32:	f040 0140 	orr.w	r1, r0, #64	; 0x40
   1bc36:	b2c9      	uxtb	r1, r1
   1bc38:	200d      	movs	r0, #13
   1bc3a:	f006 fe8a 	bl	22952 <SX1276Write>
                TimerStart( &RxTimeoutSyncWord );
   1bc3e:	481d      	ldr	r0, [pc, #116]	; (1bcb4 <SX1276OnTimeoutIrq+0xc4>)
   1bc40:	f000 f84a 	bl	1bcd8 <TimerStart>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
   1bc44:	4b1c      	ldr	r3, [pc, #112]	; (1bcb8 <SX1276OnTimeoutIrq+0xc8>)
   1bc46:	681b      	ldr	r3, [r3, #0]
   1bc48:	2b00      	cmp	r3, #0
   1bc4a:	d0da      	beq.n	1bc02 <SX1276OnTimeoutIrq+0x12>
   1bc4c:	68db      	ldr	r3, [r3, #12]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
   1bc4e:	2b00      	cmp	r3, #0
   1bc50:	d0d7      	beq.n	1bc02 <SX1276OnTimeoutIrq+0x12>
}
   1bc52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            RadioEvents->TxTimeout( );
   1bc56:	4718      	bx	r3
                TimerStop( &RxTimeoutSyncWord );
   1bc58:	4816      	ldr	r0, [pc, #88]	; (1bcb4 <SX1276OnTimeoutIrq+0xc4>)
                SX1276.Settings.State = RF_IDLE;
   1bc5a:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                TimerStop( &RxTimeoutSyncWord );
   1bc5e:	f000 f8b1 	bl	1bdc4 <TimerStop>
   1bc62:	e7ef      	b.n	1bc44 <SX1276OnTimeoutIrq+0x54>
        SX1276Reset( );
   1bc64:	f7ff f890 	bl	1ad88 <SX1276Reset>
        RxChainCalibration( );
   1bc68:	f7e6 faee 	bl	2248 <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
   1bc6c:	2000      	movs	r0, #0
   1bc6e:	f006 fe86 	bl	2297e <SX1276SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
   1bc72:	4c12      	ldr	r4, [pc, #72]	; (1bcbc <SX1276OnTimeoutIrq+0xcc>)
        SX1276SetOpMode( RF_OPMODE_SLEEP );
   1bc74:	2500      	movs	r5, #0
            SX1276SetModem( RadioRegsInit[i].Modem );
   1bc76:	7820      	ldrb	r0, [r4, #0]
   1bc78:	f7ff fc74 	bl	1b564 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
   1bc7c:	3501      	adds	r5, #1
   1bc7e:	78a1      	ldrb	r1, [r4, #2]
   1bc80:	7860      	ldrb	r0, [r4, #1]
   1bc82:	f006 fe66 	bl	22952 <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
   1bc86:	2d10      	cmp	r5, #16
   1bc88:	f104 0403 	add.w	r4, r4, #3
   1bc8c:	d1f3      	bne.n	1bc76 <SX1276OnTimeoutIrq+0x86>
        SX1276SetModem( MODEM_FSK );
   1bc8e:	2000      	movs	r0, #0
   1bc90:	f7ff fc68 	bl	1b564 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
   1bc94:	f896 0138 	ldrb.w	r0, [r6, #312]	; 0x138
   1bc98:	f7ff ff96 	bl	1bbc8 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
   1bc9c:	2300      	movs	r3, #0
   1bc9e:	f886 30e0 	strb.w	r3, [r6, #224]	; 0xe0
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
   1bca2:	4b05      	ldr	r3, [pc, #20]	; (1bcb8 <SX1276OnTimeoutIrq+0xc8>)
   1bca4:	681b      	ldr	r3, [r3, #0]
   1bca6:	2b00      	cmp	r3, #0
   1bca8:	d0ab      	beq.n	1bc02 <SX1276OnTimeoutIrq+0x12>
   1bcaa:	685b      	ldr	r3, [r3, #4]
   1bcac:	e7cf      	b.n	1bc4e <SX1276OnTimeoutIrq+0x5e>
   1bcae:	bf00      	nop
   1bcb0:	20002984 	.word	0x20002984
   1bcb4:	20002954 	.word	0x20002954
   1bcb8:	20002950 	.word	0x20002950
   1bcbc:	0002745e 	.word	0x0002745e

0001bcc0 <TimerInsertNewHeadTimer>:
    obj->Next = NULL;
}

static void TimerInsertNewHeadTimer( TimerEvent_t *obj )
{
    TimerEvent_t* cur = TimerListHead;
   1bcc0:	4b04      	ldr	r3, [pc, #16]	; (1bcd4 <TimerInsertNewHeadTimer+0x14>)
   1bcc2:	681a      	ldr	r2, [r3, #0]

    if( cur != NULL )
   1bcc4:	b10a      	cbz	r2, 1bcca <TimerInsertNewHeadTimer+0xa>
    {
        cur->IsNext2Expire = false;
   1bcc6:	2100      	movs	r1, #0
   1bcc8:	7251      	strb	r1, [r2, #9]
    }

    obj->Next = cur;
   1bcca:	6142      	str	r2, [r0, #20]
    TimerListHead = obj;
   1bccc:	6018      	str	r0, [r3, #0]
    TimerSetTimeout( TimerListHead );
   1bcce:	f006 bec5 	b.w	22a5c <TimerSetTimeout>
   1bcd2:	bf00      	nop
   1bcd4:	20002ae0 	.word	0x20002ae0

0001bcd8 <TimerStart>:
{
   1bcd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1bcda:	4604      	mov	r4, r0
    CRITICAL_SECTION_BEGIN( );
   1bcdc:	a801      	add	r0, sp, #4
   1bcde:	f006 fdfe 	bl	228de <BoardCriticalSectionBegin>
    if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
   1bce2:	b16c      	cbz	r4, 1bd00 <TimerStart+0x28>
    CRITICAL_SECTION_END( );
}

static bool TimerExists( TimerEvent_t *obj )
{
    TimerEvent_t* cur = TimerListHead;
   1bce4:	4d17      	ldr	r5, [pc, #92]	; (1bd44 <TimerStart+0x6c>)
   1bce6:	6829      	ldr	r1, [r5, #0]
   1bce8:	460a      	mov	r2, r1

    while( cur != NULL )
   1bcea:	b972      	cbnz	r2, 1bd0a <TimerStart+0x32>
    obj->Timestamp = obj->ReloadValue;
   1bcec:	6863      	ldr	r3, [r4, #4]
   1bcee:	6023      	str	r3, [r4, #0]
    obj->IsStarted = true;
   1bcf0:	2301      	movs	r3, #1
   1bcf2:	8123      	strh	r3, [r4, #8]
    if( TimerListHead == NULL )
   1bcf4:	b969      	cbnz	r1, 1bd12 <TimerStart+0x3a>
        RtcSetTimerContext( );
   1bcf6:	f7fe feb5 	bl	1aa64 <RtcSetTimerContext>
            TimerInsertNewHeadTimer( obj );
   1bcfa:	4620      	mov	r0, r4
   1bcfc:	f7ff ffe0 	bl	1bcc0 <TimerInsertNewHeadTimer>
        CRITICAL_SECTION_END( );
   1bd00:	a801      	add	r0, sp, #4
   1bd02:	f006 fdf6 	bl	228f2 <BoardCriticalSectionEnd>
}
   1bd06:	b003      	add	sp, #12
   1bd08:	bd30      	pop	{r4, r5, pc}
    {
        if( cur == obj )
   1bd0a:	4294      	cmp	r4, r2
   1bd0c:	d0f8      	beq.n	1bd00 <TimerStart+0x28>
        {
            return true;
        }
        cur = cur->Next;
   1bd0e:	6952      	ldr	r2, [r2, #20]
   1bd10:	e7eb      	b.n	1bcea <TimerStart+0x12>
        elapsedTime = RtcGetTimerElapsedTime( );
   1bd12:	f7fe fe7b 	bl	1aa0c <RtcGetTimerElapsedTime>
        obj->Timestamp += elapsedTime;
   1bd16:	6823      	ldr	r3, [r4, #0]
   1bd18:	4418      	add	r0, r3
        if( obj->Timestamp < TimerListHead->Timestamp )
   1bd1a:	682b      	ldr	r3, [r5, #0]
        obj->Timestamp += elapsedTime;
   1bd1c:	6020      	str	r0, [r4, #0]
        if( obj->Timestamp < TimerListHead->Timestamp )
   1bd1e:	681a      	ldr	r2, [r3, #0]
   1bd20:	4290      	cmp	r0, r2
   1bd22:	d3ea      	bcc.n	1bcfa <TimerStart+0x22>
    TimerEvent_t* next = TimerListHead->Next;
   1bd24:	695a      	ldr	r2, [r3, #20]
    while( cur->Next != NULL )
   1bd26:	6959      	ldr	r1, [r3, #20]
   1bd28:	b911      	cbnz	r1, 1bd30 <TimerStart+0x58>
    cur->Next = obj;
   1bd2a:	615c      	str	r4, [r3, #20]
    obj->Next = NULL;
   1bd2c:	6161      	str	r1, [r4, #20]
   1bd2e:	e7e7      	b.n	1bd00 <TimerStart+0x28>
        if( obj->Timestamp > next->Timestamp )
   1bd30:	6811      	ldr	r1, [r2, #0]
   1bd32:	4288      	cmp	r0, r1
   1bd34:	d902      	bls.n	1bd3c <TimerStart+0x64>
            next = next->Next;
   1bd36:	4613      	mov	r3, r2
   1bd38:	6952      	ldr	r2, [r2, #20]
   1bd3a:	e7f4      	b.n	1bd26 <TimerStart+0x4e>
            cur->Next = obj;
   1bd3c:	615c      	str	r4, [r3, #20]
            obj->Next = next;
   1bd3e:	6162      	str	r2, [r4, #20]
            return;
   1bd40:	e7de      	b.n	1bd00 <TimerStart+0x28>
   1bd42:	bf00      	nop
   1bd44:	20002ae0 	.word	0x20002ae0

0001bd48 <TimerIrqHandler>:
{
   1bd48:	b570      	push	{r4, r5, r6, lr}
    uint32_t old =  RtcGetTimerContext( );
   1bd4a:	f7fe fe93 	bl	1aa74 <RtcGetTimerContext>
    if( TimerListHead != NULL )
   1bd4e:	4c1c      	ldr	r4, [pc, #112]	; (1bdc0 <TimerIrqHandler+0x78>)
    uint32_t old =  RtcGetTimerContext( );
   1bd50:	4605      	mov	r5, r0
    uint32_t now =  RtcSetTimerContext( );
   1bd52:	f7fe fe87 	bl	1aa64 <RtcSetTimerContext>
    if( TimerListHead != NULL )
   1bd56:	6822      	ldr	r2, [r4, #0]
   1bd58:	b9aa      	cbnz	r2, 1bd86 <TimerIrqHandler+0x3e>
        cur->IsStarted = false;
   1bd5a:	2600      	movs	r6, #0
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
   1bd5c:	6823      	ldr	r3, [r4, #0]
   1bd5e:	b9db      	cbnz	r3, 1bd98 <TimerIrqHandler+0x50>
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
   1bd60:	6820      	ldr	r0, [r4, #0]
   1bd62:	bb30      	cbnz	r0, 1bdb2 <TimerIrqHandler+0x6a>
}
   1bd64:	bd70      	pop	{r4, r5, r6, pc}
            if( next->Timestamp > deltaContext )
   1bd66:	680b      	ldr	r3, [r1, #0]
   1bd68:	42b3      	cmp	r3, r6
                next->Timestamp -= deltaContext;
   1bd6a:	bf86      	itte	hi
   1bd6c:	195b      	addhi	r3, r3, r5
   1bd6e:	1a1b      	subhi	r3, r3, r0
                next->Timestamp = 0;
   1bd70:	2300      	movls	r3, #0
   1bd72:	600b      	str	r3, [r1, #0]
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
   1bd74:	6949      	ldr	r1, [r1, #20]
   1bd76:	2900      	cmp	r1, #0
   1bd78:	d1f5      	bne.n	1bd66 <TimerIrqHandler+0x1e>
        TimerListHead = TimerListHead->Next;
   1bd7a:	6953      	ldr	r3, [r2, #20]
   1bd7c:	6023      	str	r3, [r4, #0]
        ExecuteCallBack( cur->Callback, cur->Context );
   1bd7e:	68d3      	ldr	r3, [r2, #12]
        cur->IsStarted = false;
   1bd80:	7211      	strb	r1, [r2, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
   1bd82:	b91b      	cbnz	r3, 1bd8c <TimerIrqHandler+0x44>
   1bd84:	e7fe      	b.n	1bd84 <TimerIrqHandler+0x3c>
   1bd86:	4611      	mov	r1, r2
    uint32_t deltaContext = now - old; // intentional wrap around
   1bd88:	1b46      	subs	r6, r0, r5
   1bd8a:	e7f3      	b.n	1bd74 <TimerIrqHandler+0x2c>
        ExecuteCallBack( cur->Callback, cur->Context );
   1bd8c:	6910      	ldr	r0, [r2, #16]
   1bd8e:	4798      	blx	r3
   1bd90:	e7e3      	b.n	1bd5a <TimerIrqHandler+0x12>
        ExecuteCallBack( cur->Callback, cur->Context );
   1bd92:	6918      	ldr	r0, [r3, #16]
   1bd94:	4790      	blx	r2
   1bd96:	e7e1      	b.n	1bd5c <TimerIrqHandler+0x14>
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
   1bd98:	681d      	ldr	r5, [r3, #0]
   1bd9a:	f7fe fe37 	bl	1aa0c <RtcGetTimerElapsedTime>
   1bd9e:	4285      	cmp	r5, r0
   1bda0:	d2de      	bcs.n	1bd60 <TimerIrqHandler+0x18>
        cur = TimerListHead;
   1bda2:	6823      	ldr	r3, [r4, #0]
        TimerListHead = TimerListHead->Next;
   1bda4:	695a      	ldr	r2, [r3, #20]
   1bda6:	6022      	str	r2, [r4, #0]
        ExecuteCallBack( cur->Callback, cur->Context );
   1bda8:	68da      	ldr	r2, [r3, #12]
        cur->IsStarted = false;
   1bdaa:	721e      	strb	r6, [r3, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
   1bdac:	2a00      	cmp	r2, #0
   1bdae:	d1f0      	bne.n	1bd92 <TimerIrqHandler+0x4a>
   1bdb0:	e7fe      	b.n	1bdb0 <TimerIrqHandler+0x68>
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
   1bdb2:	7a43      	ldrb	r3, [r0, #9]
   1bdb4:	2b00      	cmp	r3, #0
   1bdb6:	d1d5      	bne.n	1bd64 <TimerIrqHandler+0x1c>
}
   1bdb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        TimerSetTimeout( TimerListHead );
   1bdbc:	f006 be4e 	b.w	22a5c <TimerSetTimeout>
   1bdc0:	20002ae0 	.word	0x20002ae0

0001bdc4 <TimerStop>:
{
   1bdc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    TimerEvent_t* prev = TimerListHead;
   1bdc6:	4d14      	ldr	r5, [pc, #80]	; (1be18 <TimerStop+0x54>)
{
   1bdc8:	4604      	mov	r4, r0
    CRITICAL_SECTION_BEGIN( );
   1bdca:	a801      	add	r0, sp, #4
   1bdcc:	f006 fd87 	bl	228de <BoardCriticalSectionBegin>
    TimerEvent_t* prev = TimerListHead;
   1bdd0:	682b      	ldr	r3, [r5, #0]
    if( ( TimerListHead == NULL ) || ( obj == NULL ) )
   1bdd2:	b103      	cbz	r3, 1bdd6 <TimerStop+0x12>
   1bdd4:	b924      	cbnz	r4, 1bde0 <TimerStop+0x1c>
        CRITICAL_SECTION_END( );
   1bdd6:	a801      	add	r0, sp, #4
   1bdd8:	f006 fd8b 	bl	228f2 <BoardCriticalSectionEnd>
}
   1bddc:	b003      	add	sp, #12
   1bdde:	bd30      	pop	{r4, r5, pc}
    obj->IsStarted = false;
   1bde0:	2200      	movs	r2, #0
    if( TimerListHead == obj ) // Stop the Head
   1bde2:	42a3      	cmp	r3, r4
    obj->IsStarted = false;
   1bde4:	7222      	strb	r2, [r4, #8]
    if( TimerListHead == obj ) // Stop the Head
   1bde6:	d10d      	bne.n	1be04 <TimerStop+0x40>
        if( TimerListHead->IsNext2Expire == true ) // The head is already running
   1bde8:	7a59      	ldrb	r1, [r3, #9]
   1bdea:	695c      	ldr	r4, [r3, #20]
   1bdec:	b141      	cbz	r1, 1be00 <TimerStop+0x3c>
            TimerListHead->IsNext2Expire = false;
   1bdee:	725a      	strb	r2, [r3, #9]
            if( TimerListHead->Next != NULL )
   1bdf0:	b124      	cbz	r4, 1bdfc <TimerStop+0x38>
                TimerSetTimeout( TimerListHead );
   1bdf2:	4620      	mov	r0, r4
                TimerListHead = TimerListHead->Next;
   1bdf4:	602c      	str	r4, [r5, #0]
                TimerSetTimeout( TimerListHead );
   1bdf6:	f006 fe31 	bl	22a5c <TimerSetTimeout>
   1bdfa:	e7ec      	b.n	1bdd6 <TimerStop+0x12>
                RtcStopAlarm( );
   1bdfc:	f7fe fe10 	bl	1aa20 <RtcStopAlarm>
                TimerListHead = NULL;
   1be00:	602c      	str	r4, [r5, #0]
   1be02:	e7e8      	b.n	1bdd6 <TimerStop+0x12>
                cur = cur->Next;
   1be04:	461a      	mov	r2, r3
   1be06:	695b      	ldr	r3, [r3, #20]
        while( cur != NULL )
   1be08:	2b00      	cmp	r3, #0
   1be0a:	d0e4      	beq.n	1bdd6 <TimerStop+0x12>
            if( cur == obj )
   1be0c:	429c      	cmp	r4, r3
   1be0e:	d1f9      	bne.n	1be04 <TimerStop+0x40>
                if( cur->Next != NULL )
   1be10:	6963      	ldr	r3, [r4, #20]
                    prev->Next = cur;
   1be12:	6153      	str	r3, [r2, #20]
   1be14:	e7df      	b.n	1bdd6 <TimerStop+0x12>
   1be16:	bf00      	nop
   1be18:	20002ae0 	.word	0x20002ae0

0001be1c <uart_nrfx_poll_in>:
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type const * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1be1c:	4b06      	ldr	r3, [pc, #24]	; (1be38 <uart_nrfx_poll_in+0x1c>)
   1be1e:	681a      	ldr	r2, [r3, #0]
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrfx_poll_in(const struct device *dev, unsigned char *c)
{
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
   1be20:	b13a      	cbz	r2, 1be32 <uart_nrfx_poll_in+0x16>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1be22:	2000      	movs	r0, #0
   1be24:	6018      	str	r0, [r3, #0]
   1be26:	681b      	ldr	r3, [r3, #0]
    nrf_uart_hwfc_pins_set(p_reg, NRF_UART_PSEL_DISCONNECTED, NRF_UART_PSEL_DISCONNECTED);
}

NRF_STATIC_INLINE uint8_t nrf_uart_rxd_get(NRF_UART_Type const * p_reg)
{
    return p_reg->RXD;
   1be28:	4b04      	ldr	r3, [pc, #16]	; (1be3c <uart_nrfx_poll_in+0x20>)
   1be2a:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   1be2e:	700b      	strb	r3, [r1, #0]
	nrf_uart_event_clear(uart0_addr, NRF_UART_EVENT_RXDRDY);

	/* got a character */
	*c = nrf_uart_rxd_get(uart0_addr);

	return 0;
   1be30:	4770      	bx	lr
		return -1;
   1be32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1be36:	4770      	bx	lr
   1be38:	40002108 	.word	0x40002108
   1be3c:	40002000 	.word	0x40002000

0001be40 <uart_nrfx_err_check>:
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1be40:	4b02      	ldr	r3, [pc, #8]	; (1be4c <uart_nrfx_err_check+0xc>)
   1be42:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1be46:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
/** Console I/O function */
static int uart_nrfx_err_check(const struct device *dev)
{
	/* register bitfields maps to the defines in uart.h */
	return nrf_uart_errorsrc_get_and_clear(uart0_addr);
}
   1be4a:	4770      	bx	lr
   1be4c:	40002000 	.word	0x40002000

0001be50 <uart_nrfx_configure>:

static int uart_nrfx_configure(const struct device *dev,
			       const struct uart_config *cfg)
{
   1be50:	b530      	push	{r4, r5, lr}
	nrf_uart_config_t uart_cfg;

#if defined(UART_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   1be52:	794b      	ldrb	r3, [r1, #5]
   1be54:	2b01      	cmp	r3, #1
   1be56:	d022      	beq.n	1be9e <uart_nrfx_configure+0x4e>
   1be58:	2b03      	cmp	r3, #3
   1be5a:	d11d      	bne.n	1be98 <uart_nrfx_configure+0x48>
	case UART_CFG_STOP_BITS_1:
		uart_cfg.stop = NRF_UART_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uart_cfg.stop = NRF_UART_STOP_TWO;
   1be5c:	2210      	movs	r2, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1be5e:	798b      	ldrb	r3, [r1, #6]
   1be60:	2b03      	cmp	r3, #3
   1be62:	d119      	bne.n	1be98 <uart_nrfx_configure+0x48>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1be64:	79cb      	ldrb	r3, [r1, #7]
   1be66:	b9bb      	cbnz	r3, 1be98 <uart_nrfx_configure+0x48>
	}

#if defined(UART_CONFIG_PARITYTYPE_Msk)
	uart_cfg.paritytype = NRF_UART_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1be68:	790c      	ldrb	r4, [r1, #4]
   1be6a:	b114      	cbz	r4, 1be72 <uart_nrfx_configure+0x22>
   1be6c:	2c02      	cmp	r4, #2
   1be6e:	d113      	bne.n	1be98 <uart_nrfx_configure+0x48>
	case UART_CFG_PARITY_NONE:
		uart_cfg.parity = NRF_UART_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uart_cfg.parity = NRF_UART_PARITY_INCLUDED;
   1be70:	240e      	movs	r4, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1be72:	680b      	ldr	r3, [r1, #0]
	switch (baudrate) {
   1be74:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   1be78:	d061      	beq.n	1bf3e <uart_nrfx_configure+0xee>
   1be7a:	d82d      	bhi.n	1bed8 <uart_nrfx_configure+0x88>
   1be7c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1be80:	d05f      	beq.n	1bf42 <uart_nrfx_configure+0xf2>
   1be82:	d816      	bhi.n	1beb2 <uart_nrfx_configure+0x62>
   1be84:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1be88:	d05d      	beq.n	1bf46 <uart_nrfx_configure+0xf6>
   1be8a:	d80a      	bhi.n	1bea2 <uart_nrfx_configure+0x52>
   1be8c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1be90:	d05c      	beq.n	1bf4c <uart_nrfx_configure+0xfc>
   1be92:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1be96:	d05c      	beq.n	1bf52 <uart_nrfx_configure+0x102>
   1be98:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1be9c:	e04e      	b.n	1bf3c <uart_nrfx_configure+0xec>
	switch (cfg->stop_bits) {
   1be9e:	2200      	movs	r2, #0
   1bea0:	e7dd      	b.n	1be5e <uart_nrfx_configure+0xe>
	switch (baudrate) {
   1bea2:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1bea6:	d057      	beq.n	1bf58 <uart_nrfx_configure+0x108>
   1bea8:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1beac:	d1f4      	bne.n	1be98 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
   1beae:	4b34      	ldr	r3, [pc, #208]	; (1bf80 <uart_nrfx_configure+0x130>)
   1beb0:	e039      	b.n	1bf26 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   1beb2:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1beb6:	d052      	beq.n	1bf5e <uart_nrfx_configure+0x10e>
   1beb8:	d807      	bhi.n	1beca <uart_nrfx_configure+0x7a>
   1beba:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1bebe:	d050      	beq.n	1bf62 <uart_nrfx_configure+0x112>
   1bec0:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1bec4:	d1e8      	bne.n	1be98 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
   1bec6:	4b2f      	ldr	r3, [pc, #188]	; (1bf84 <uart_nrfx_configure+0x134>)
   1bec8:	e02d      	b.n	1bf26 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   1beca:	f647 2512 	movw	r5, #31250	; 0x7a12
   1bece:	42ab      	cmp	r3, r5
   1bed0:	d1e2      	bne.n	1be98 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
   1bed2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1bed6:	e026      	b.n	1bf26 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   1bed8:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1bedc:	d044      	beq.n	1bf68 <uart_nrfx_configure+0x118>
   1bede:	d811      	bhi.n	1bf04 <uart_nrfx_configure+0xb4>
   1bee0:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1bee4:	d042      	beq.n	1bf6c <uart_nrfx_configure+0x11c>
   1bee6:	d808      	bhi.n	1befa <uart_nrfx_configure+0xaa>
   1bee8:	f64d 25c0 	movw	r5, #56000	; 0xdac0
   1beec:	42ab      	cmp	r3, r5
   1beee:	d03f      	beq.n	1bf70 <uart_nrfx_configure+0x120>
   1bef0:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1bef4:	d1d0      	bne.n	1be98 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
   1bef6:	4b24      	ldr	r3, [pc, #144]	; (1bf88 <uart_nrfx_configure+0x138>)
   1bef8:	e015      	b.n	1bf26 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   1befa:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1befe:	d1cb      	bne.n	1be98 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
   1bf00:	4b22      	ldr	r3, [pc, #136]	; (1bf8c <uart_nrfx_configure+0x13c>)
   1bf02:	e010      	b.n	1bf26 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   1bf04:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1bf08:	d035      	beq.n	1bf76 <uart_nrfx_configure+0x126>
   1bf0a:	d807      	bhi.n	1bf1c <uart_nrfx_configure+0xcc>
   1bf0c:	4d20      	ldr	r5, [pc, #128]	; (1bf90 <uart_nrfx_configure+0x140>)
   1bf0e:	42ab      	cmp	r3, r5
   1bf10:	d033      	beq.n	1bf7a <uart_nrfx_configure+0x12a>
   1bf12:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1bf16:	d1bf      	bne.n	1be98 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
   1bf18:	4b1e      	ldr	r3, [pc, #120]	; (1bf94 <uart_nrfx_configure+0x144>)
   1bf1a:	e004      	b.n	1bf26 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   1bf1c:	4d1e      	ldr	r5, [pc, #120]	; (1bf98 <uart_nrfx_configure+0x148>)
   1bf1e:	42ab      	cmp	r3, r5
   1bf20:	d1ba      	bne.n	1be98 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
   1bf22:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1bf26:	4d1d      	ldr	r5, [pc, #116]	; (1bf9c <uart_nrfx_configure+0x14c>)
                    | (uint32_t)p_cfg->hwfc;
   1bf28:	4322      	orrs	r2, r4
    p_reg->BAUDRATE = baudrate;
   1bf2a:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1bf2e:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uart_configure(uart0_addr, &uart_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   1bf32:	6903      	ldr	r3, [r0, #16]
   1bf34:	c903      	ldmia	r1, {r0, r1}
   1bf36:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1bf3a:	2000      	movs	r0, #0
}
   1bf3c:	bd30      	pop	{r4, r5, pc}
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
   1bf3e:	4b18      	ldr	r3, [pc, #96]	; (1bfa0 <uart_nrfx_configure+0x150>)
   1bf40:	e7f1      	b.n	1bf26 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
   1bf42:	4b18      	ldr	r3, [pc, #96]	; (1bfa4 <uart_nrfx_configure+0x154>)
   1bf44:	e7ef      	b.n	1bf26 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
   1bf46:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1bf4a:	e7ec      	b.n	1bf26 <uart_nrfx_configure+0xd6>
		nrf_baudrate = 0x00014000;
   1bf4c:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1bf50:	e7e9      	b.n	1bf26 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   1bf52:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1bf56:	e7e6      	b.n	1bf26 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
   1bf58:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1bf5c:	e7e3      	b.n	1bf26 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
   1bf5e:	4b12      	ldr	r3, [pc, #72]	; (1bfa8 <uart_nrfx_configure+0x158>)
   1bf60:	e7e1      	b.n	1bf26 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
   1bf62:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
   1bf66:	e7de      	b.n	1bf26 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
   1bf68:	4b10      	ldr	r3, [pc, #64]	; (1bfac <uart_nrfx_configure+0x15c>)
   1bf6a:	e7dc      	b.n	1bf26 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
   1bf6c:	4b10      	ldr	r3, [pc, #64]	; (1bfb0 <uart_nrfx_configure+0x160>)
   1bf6e:	e7da      	b.n	1bf26 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
   1bf70:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1bf74:	e7d7      	b.n	1bf26 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
   1bf76:	4b0f      	ldr	r3, [pc, #60]	; (1bfb4 <uart_nrfx_configure+0x164>)
   1bf78:	e7d5      	b.n	1bf26 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
   1bf7a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1bf7e:	e7d2      	b.n	1bf26 <uart_nrfx_configure+0xd6>
   1bf80:	0013b000 	.word	0x0013b000
   1bf84:	004ea000 	.word	0x004ea000
   1bf88:	00ebf000 	.word	0x00ebf000
   1bf8c:	01d7e000 	.word	0x01d7e000
   1bf90:	0003d090 	.word	0x0003d090
   1bf94:	075f7000 	.word	0x075f7000
   1bf98:	000f4240 	.word	0x000f4240
   1bf9c:	40002000 	.word	0x40002000
   1bfa0:	009d5000 	.word	0x009d5000
   1bfa4:	00275000 	.word	0x00275000
   1bfa8:	0075f000 	.word	0x0075f000
   1bfac:	03afb000 	.word	0x03afb000
   1bfb0:	013a9000 	.word	0x013a9000
   1bfb4:	0ebed000 	.word	0x0ebed000

0001bfb8 <uart_nrfx_poll_out>:
{
   1bfb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bfba:	460e      	mov	r6, r1
	if (!k_is_in_isr()) {
   1bfbc:	f007 f897 	bl	230ee <k_is_in_isr>
   1bfc0:	4d19      	ldr	r5, [pc, #100]	; (1c028 <uart_nrfx_poll_out+0x70>)
   1bfc2:	bb70      	cbnz	r0, 1c022 <uart_nrfx_poll_out+0x6a>
   1bfc4:	2464      	movs	r4, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1bfc6:	2701      	movs	r7, #1
   1bfc8:	f3bf 8f5b 	dmb	ish
   1bfcc:	e855 3f00 	ldrex	r3, [r5]
   1bfd0:	2b00      	cmp	r3, #0
   1bfd2:	d103      	bne.n	1bfdc <uart_nrfx_poll_out+0x24>
   1bfd4:	e845 7200 	strex	r2, r7, [r5]
   1bfd8:	2a00      	cmp	r2, #0
   1bfda:	d1f7      	bne.n	1bfcc <uart_nrfx_poll_out+0x14>
   1bfdc:	f3bf 8f5b 	dmb	ish
		while (atomic_cas((atomic_t *) lock,
   1bfe0:	d007      	beq.n	1bff2 <uart_nrfx_poll_out+0x3a>
   1bfe2:	2021      	movs	r0, #33	; 0x21
   1bfe4:	2100      	movs	r1, #0
   1bfe6:	3c01      	subs	r4, #1
   1bfe8:	f001 fafc 	bl	1d5e4 <z_impl_k_sleep>
			if (--safety_cnt == 0) {
   1bfec:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   1bff0:	d1ea      	bne.n	1bfc8 <uart_nrfx_poll_out+0x10>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1bff2:	4c0e      	ldr	r4, [pc, #56]	; (1c02c <uart_nrfx_poll_out+0x74>)
   1bff4:	2200      	movs	r2, #0
   1bff6:	6022      	str	r2, [r4, #0]
   1bff8:	6822      	ldr	r2, [r4, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1bffa:	4a0d      	ldr	r2, [pc, #52]	; (1c030 <uart_nrfx_poll_out+0x78>)
   1bffc:	2101      	movs	r1, #1
   1bffe:	6011      	str	r1, [r2, #0]
    p_reg->TXD = txd;
   1c000:	f8c2 6514 	str.w	r6, [r2, #1300]	; 0x514
   1c004:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c008:	6823      	ldr	r3, [r4, #0]
	NRFX_WAIT_FOR(event_txdrdy_check(), 1000, 1, res);
   1c00a:	b923      	cbnz	r3, 1c016 <uart_nrfx_poll_out+0x5e>
   1c00c:	2001      	movs	r0, #1
   1c00e:	f006 fd7f 	bl	22b10 <nrfx_busy_wait>
   1c012:	3e01      	subs	r6, #1
   1c014:	d1f8      	bne.n	1c008 <uart_nrfx_poll_out+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c016:	4b07      	ldr	r3, [pc, #28]	; (1c034 <uart_nrfx_poll_out+0x7c>)
   1c018:	2201      	movs	r2, #1
   1c01a:	601a      	str	r2, [r3, #0]
	*lock = 0;
   1c01c:	2300      	movs	r3, #0
   1c01e:	602b      	str	r3, [r5, #0]
}
   1c020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*lock = 1;
   1c022:	2301      	movs	r3, #1
   1c024:	602b      	str	r3, [r5, #0]
   1c026:	e7e4      	b.n	1bff2 <uart_nrfx_poll_out+0x3a>
   1c028:	20002ae8 	.word	0x20002ae8
   1c02c:	4000211c 	.word	0x4000211c
   1c030:	40002008 	.word	0x40002008
   1c034:	4000200c 	.word	0x4000200c

0001c038 <uart_nrfx_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(const struct device *dev)
{
   1c038:	b510      	push	{r4, lr}
    p_reg->OUTSET = set_mask;
   1c03a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    p_reg->ENABLE = UART_ENABLE_ENABLE_Disabled;
   1c03e:	4c13      	ldr	r4, [pc, #76]	; (1c08c <uart_nrfx_init+0x54>)
   1c040:	2200      	movs	r2, #0
   1c042:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   1c046:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
   1c04a:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1c04e:	2103      	movs	r1, #3
   1c050:	f8c3 1764 	str.w	r1, [r3, #1892]	; 0x764
   1c054:	f8c3 2760 	str.w	r2, [r3, #1888]	; 0x760
    p_reg->PSEL.RXD = pselrxd;
   1c058:	2318      	movs	r3, #24
   1c05a:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
    p_reg->PSEL.TXD = pseltxd;
   1c05e:	2319      	movs	r3, #25
   1c060:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
    p_reg->PSEL.RTS = pselrts;
   1c064:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c068:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
	}

	nrf_uart_hwfc_pins_set(uart0_addr, RTS_PIN, CTS_PIN);

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   1c06c:	6901      	ldr	r1, [r0, #16]
    p_reg->PSEL.CTS = pselcts;
   1c06e:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   1c072:	f7ff feed 	bl	1be50 <uart_nrfx_configure>
	if (err) {
   1c076:	b938      	cbnz	r0, 1c088 <uart_nrfx_init+0x50>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
   1c078:	2304      	movs	r3, #4
   1c07a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c07e:	4b04      	ldr	r3, [pc, #16]	; (1c090 <uart_nrfx_init+0x58>)
   1c080:	6018      	str	r0, [r3, #0]
   1c082:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c084:	2301      	movs	r3, #1
   1c086:	6023      	str	r3, [r4, #0]
#if HW_FLOW_CONTROL_AVAILABLE
	k_timer_init(&uart0_cb.tx_timeout_timer, tx_timeout, NULL);
#endif
#endif
	return 0;
}
   1c088:	bd10      	pop	{r4, pc}
   1c08a:	bf00      	nop
   1c08c:	40002000 	.word	0x40002000
   1c090:	40002108 	.word	0x40002108

0001c094 <random_byte_get>:
	__asm__ volatile(
   1c094:	f04f 0320 	mov.w	r3, #32
   1c098:	f3ef 8211 	mrs	r2, BASEPRI
   1c09c:	f383 8811 	msr	BASEPRI, r3
   1c0a0:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1c0a4:	4b08      	ldr	r3, [pc, #32]	; (1c0c8 <random_byte_get+0x34>)
   1c0a6:	6819      	ldr	r1, [r3, #0]
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1c0a8:	b159      	cbz	r1, 1c0c2 <random_byte_get+0x2e>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1c0aa:	4908      	ldr	r1, [pc, #32]	; (1c0cc <random_byte_get+0x38>)
   1c0ac:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1c0b0:	2100      	movs	r1, #0
   1c0b2:	6019      	str	r1, [r3, #0]
   1c0b4:	681b      	ldr	r3, [r3, #0]
		retval = nrf_rng_random_value_get(NRF_RNG);
   1c0b6:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   1c0b8:	f382 8811 	msr	BASEPRI, r2
   1c0bc:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1c0c0:	4770      	bx	lr
	int retval = -EAGAIN;
   1c0c2:	f06f 000a 	mvn.w	r0, #10
   1c0c6:	e7f7      	b.n	1c0b8 <random_byte_get+0x24>
   1c0c8:	4000d100 	.word	0x4000d100
   1c0cc:	4000d000 	.word	0x4000d000

0001c0d0 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1c0d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c0d2:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   1c0d4:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   1c0d6:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   1c0d8:	f04f 0520 	mov.w	r5, #32
   1c0dc:	f3ef 8011 	mrs	r0, BASEPRI
   1c0e0:	f385 8811 	msr	BASEPRI, r5
   1c0e4:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1c0e8:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1c0ea:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   1c0ee:	1ba4      	subs	r4, r4, r6
   1c0f0:	403c      	ands	r4, r7
	if (available < len) {
   1c0f2:	42a2      	cmp	r2, r4
		len = available;
   1c0f4:	bf88      	it	hi
   1c0f6:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1c0f8:	eb06 0c02 	add.w	ip, r6, r2
   1c0fc:	ea07 0c0c 	and.w	ip, r7, ip
	first = rngp->first_alloc;
   1c100:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   1c102:	f883 c000 	strb.w	ip, [r3]
	__asm__ volatile(
   1c106:	f380 8811 	msr	BASEPRI, r0
   1c10a:	f3bf 8f6f 	isb	sy
   1c10e:	440a      	add	r2, r1
	uint8_t *dst   = buf;
   1c110:	4608      	mov	r0, r1
	irq_unlock(key);

	while (likely(len--)) {
   1c112:	4282      	cmp	r2, r0
   1c114:	d119      	bne.n	1c14a <rng_pool_get+0x7a>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1c116:	4576      	cmp	r6, lr
   1c118:	d10d      	bne.n	1c136 <rng_pool_get+0x66>
	__asm__ volatile(
   1c11a:	f04f 0520 	mov.w	r5, #32
   1c11e:	f3ef 8211 	mrs	r2, BASEPRI
   1c122:	f385 8811 	msr	BASEPRI, r5
   1c126:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1c12a:	781d      	ldrb	r5, [r3, #0]
   1c12c:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   1c12e:	f382 8811 	msr	BASEPRI, r2
   1c132:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   1c136:	1a41      	subs	r1, r0, r1
	available = available - len;
	if (available <= rngp->threshold) {
   1c138:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   1c13a:	b288      	uxth	r0, r1
	available = available - len;
   1c13c:	1a21      	subs	r1, r4, r0
	if (available <= rngp->threshold) {
   1c13e:	428b      	cmp	r3, r1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1c140:	bf22      	ittt	cs
   1c142:	4b06      	ldrcs	r3, [pc, #24]	; (1c15c <rng_pool_get+0x8c>)
   1c144:	2201      	movcs	r2, #1
   1c146:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1c148:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   1c14a:	eb03 0c05 	add.w	ip, r3, r5
		first = (first + 1) & mask;
   1c14e:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   1c150:	f89c c005 	ldrb.w	ip, [ip, #5]
   1c154:	f800 cb01 	strb.w	ip, [r0], #1
		first = (first + 1) & mask;
   1c158:	403d      	ands	r5, r7
   1c15a:	e7da      	b.n	1c112 <rng_pool_get+0x42>
   1c15c:	4000d000 	.word	0x4000d000

0001c160 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1c160:	43db      	mvns	r3, r3
{
   1c162:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1c166:	f013 0501 	ands.w	r5, r3, #1
{
   1c16a:	460e      	mov	r6, r1
   1c16c:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1c16e:	d004      	beq.n	1c17a <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1c170:	4821      	ldr	r0, [pc, #132]	; (1c1f8 <entropy_nrf5_get_entropy_isr+0x98>)
   1c172:	f7ff ffad 	bl	1c0d0 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1c176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1c17a:	2a00      	cmp	r2, #0
   1c17c:	d033      	beq.n	1c1e6 <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   1c17e:	f04f 0320 	mov.w	r3, #32
   1c182:	f3ef 8811 	mrs	r8, BASEPRI
   1c186:	f383 8811 	msr	BASEPRI, r3
   1c18a:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1c18e:	200d      	movs	r0, #13
   1c190:	f7e9 f9e4 	bl	555c <arch_irq_is_enabled>
   1c194:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1c196:	200d      	movs	r0, #13
   1c198:	f7e9 f9cc 	bl	5534 <arch_irq_disable>
	__asm__ volatile(
   1c19c:	f388 8811 	msr	BASEPRI, r8
   1c1a0:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1c1a4:	4a15      	ldr	r2, [pc, #84]	; (1c1fc <entropy_nrf5_get_entropy_isr+0x9c>)
   1c1a6:	6015      	str	r5, [r2, #0]
   1c1a8:	6813      	ldr	r3, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1c1aa:	4b15      	ldr	r3, [pc, #84]	; (1c200 <entropy_nrf5_get_entropy_isr+0xa0>)
   1c1ac:	2101      	movs	r1, #1
   1c1ae:	6019      	str	r1, [r3, #0]
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1c1b0:	4914      	ldr	r1, [pc, #80]	; (1c204 <entropy_nrf5_get_entropy_isr+0xa4>)
   1c1b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   1c1b6:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
   1c1ba:	4625      	mov	r5, r4
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1c1bc:	4691      	mov	r9, r2
   1c1be:	468a      	mov	sl, r1
   1c1c0:	4698      	mov	r8, r3
   1c1c2:	f8d9 3000 	ldr.w	r3, [r9]
			while (!nrf_rng_event_check(NRF_RNG,
   1c1c6:	b183      	cbz	r3, 1c1ea <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   1c1c8:	f7ff ff64 	bl	1c094 <random_byte_get>
			if (byte < 0) {
   1c1cc:	1e03      	subs	r3, r0, #0
   1c1ce:	f8ca 8180 	str.w	r8, [sl, #384]	; 0x180
   1c1d2:	dbf6      	blt.n	1c1c2 <entropy_nrf5_get_entropy_isr+0x62>
   1c1d4:	3d01      	subs	r5, #1
   1c1d6:	b2ad      	uxth	r5, r5
			buf[--len] = byte;
   1c1d8:	5573      	strb	r3, [r6, r5]
		} while (len);
   1c1da:	2d00      	cmp	r5, #0
   1c1dc:	d1f1      	bne.n	1c1c2 <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   1c1de:	b117      	cbz	r7, 1c1e6 <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   1c1e0:	200d      	movs	r0, #13
   1c1e2:	f7e9 f997 	bl	5514 <arch_irq_enable>
	return cnt;
   1c1e6:	4620      	mov	r0, r4
   1c1e8:	e7c5      	b.n	1c176 <entropy_nrf5_get_entropy_isr+0x16>
  __ASM volatile ("dsb 0xF":::"memory");
   1c1ea:	f3bf 8f4f 	dsb	sy
				__WFE();
   1c1ee:	bf20      	wfe
				__SEV();
   1c1f0:	bf40      	sev
				__WFE();
   1c1f2:	bf20      	wfe
   1c1f4:	e7e5      	b.n	1c1c2 <entropy_nrf5_get_entropy_isr+0x62>
   1c1f6:	bf00      	nop
   1c1f8:	20002b20 	.word	0x20002b20
   1c1fc:	4000d100 	.word	0x4000d100
   1c200:	4000d000 	.word	0x4000d000
   1c204:	e000e100 	.word	0xe000e100

0001c208 <entropy_nrf5_get_entropy>:
{
   1c208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   1c20c:	4f13      	ldr	r7, [pc, #76]	; (1c25c <entropy_nrf5_get_entropy+0x54>)
   1c20e:	460d      	mov	r5, r1
   1c210:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1c212:	f107 0845 	add.w	r8, r7, #69	; 0x45
   1c216:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   1c21a:	b914      	cbnz	r4, 1c222 <entropy_nrf5_get_entropy+0x1a>
}
   1c21c:	4620      	mov	r0, r4
   1c21e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1c222:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c226:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c22a:	4638      	mov	r0, r7
   1c22c:	f001 fa9c 	bl	1d768 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1c230:	4622      	mov	r2, r4
   1c232:	4629      	mov	r1, r5
   1c234:	4640      	mov	r0, r8
   1c236:	f7ff ff4b 	bl	1c0d0 <rng_pool_get>
   1c23a:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   1c23c:	4638      	mov	r0, r7
   1c23e:	f001 fa6d 	bl	1d71c <z_impl_k_sem_give>
		if (bytes == 0U) {
   1c242:	b93e      	cbnz	r6, 1c254 <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   1c244:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c248:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c24c:	4648      	mov	r0, r9
   1c24e:	f001 fa8b 	bl	1d768 <z_impl_k_sem_take>
			continue;
   1c252:	e7e2      	b.n	1c21a <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   1c254:	1ba4      	subs	r4, r4, r6
   1c256:	b2a4      	uxth	r4, r4
		buf += bytes;
   1c258:	4435      	add	r5, r6
   1c25a:	e7de      	b.n	1c21a <entropy_nrf5_get_entropy+0x12>
   1c25c:	20002af0 	.word	0x20002af0

0001c260 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   1c260:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1c262:	4c19      	ldr	r4, [pc, #100]	; (1c2c8 <entropy_nrf5_init+0x68>)
   1c264:	2201      	movs	r2, #1
   1c266:	4611      	mov	r1, r2
   1c268:	4620      	mov	r0, r4
   1c26a:	f006 ff30 	bl	230ce <z_impl_k_sem_init>
   1c26e:	2201      	movs	r2, #1
   1c270:	2100      	movs	r1, #0
   1c272:	f104 0018 	add.w	r0, r4, #24
   1c276:	f006 ff2a 	bl	230ce <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   1c27a:	f240 4307 	movw	r3, #1031	; 0x407
   1c27e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1c282:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1c286:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   1c288:	230c      	movs	r3, #12
   1c28a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1c28e:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   1c290:	4b0e      	ldr	r3, [pc, #56]	; (1c2cc <entropy_nrf5_init+0x6c>)
   1c292:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1c296:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   1c29a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1c29e:	f042 0201 	orr.w	r2, r2, #1
   1c2a2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1c2a6:	4a0a      	ldr	r2, [pc, #40]	; (1c2d0 <entropy_nrf5_init+0x70>)
    p_reg->INTENSET = mask;
   1c2a8:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1c2aa:	6015      	str	r5, [r2, #0]
   1c2ac:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENSET = mask;
   1c2ae:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1c2b2:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1c2b4:	6019      	str	r1, [r3, #0]
   1c2b6:	200d      	movs	r0, #13
   1c2b8:	f7e9 f95e 	bl	5578 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1c2bc:	200d      	movs	r0, #13
   1c2be:	f7e9 f929 	bl	5514 <arch_irq_enable>

	return 0;
}
   1c2c2:	4628      	mov	r0, r5
   1c2c4:	bd38      	pop	{r3, r4, r5, pc}
   1c2c6:	bf00      	nop
   1c2c8:	20002af0 	.word	0x20002af0
   1c2cc:	4000d000 	.word	0x4000d000
   1c2d0:	4000d100 	.word	0x4000d100

0001c2d4 <isr>:
{
   1c2d4:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1c2d6:	f7ff fedd 	bl	1c094 <random_byte_get>
	if (byte < 0) {
   1c2da:	2800      	cmp	r0, #0
   1c2dc:	db20      	blt.n	1c320 <isr+0x4c>
	uint8_t last  = rngp->last;
   1c2de:	4b17      	ldr	r3, [pc, #92]	; (1c33c <isr+0x68>)
   1c2e0:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   1c2e4:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   1c2e8:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   1c2ec:	1a51      	subs	r1, r2, r1
   1c2ee:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1c2f2:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   1c2f4:	d10d      	bne.n	1c312 <isr+0x3e>
	uint8_t last  = rngp->last;
   1c2f6:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1c2fa:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   1c2fe:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1c302:	1a51      	subs	r1, r2, r1
   1c304:	ea34 0101 	bics.w	r1, r4, r1
   1c308:	d10b      	bne.n	1c322 <isr+0x4e>
   1c30a:	4b0d      	ldr	r3, [pc, #52]	; (1c340 <isr+0x6c>)
   1c30c:	2201      	movs	r2, #1
   1c30e:	601a      	str	r2, [r3, #0]
}
   1c310:	e00e      	b.n	1c330 <isr+0x5c>
	rngp->buffer[last] = byte;
   1c312:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1c314:	3201      	adds	r2, #1
   1c316:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1c318:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   1c31c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   1c320:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   1c322:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1c324:	3201      	adds	r2, #1
   1c326:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1c328:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   1c32c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   1c330:	4804      	ldr	r0, [pc, #16]	; (1c344 <isr+0x70>)
}
   1c332:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1c336:	f001 b9f1 	b.w	1d71c <z_impl_k_sem_give>
   1c33a:	bf00      	nop
   1c33c:	20002af0 	.word	0x20002af0
   1c340:	4000d004 	.word	0x4000d004
   1c344:	20002b08 	.word	0x20002b08

0001c348 <nrf52_errata_136>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1c348:	4b06      	ldr	r3, [pc, #24]	; (1c364 <nrf52_errata_136+0x1c>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1c34a:	681b      	ldr	r3, [r3, #0]
   1c34c:	2b08      	cmp	r3, #8
   1c34e:	d106      	bne.n	1c35e <nrf52_errata_136+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1c350:	4b05      	ldr	r3, [pc, #20]	; (1c368 <nrf52_errata_136+0x20>)
   1c352:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
   1c354:	2b05      	cmp	r3, #5
   1c356:	d802      	bhi.n	1c35e <nrf52_errata_136+0x16>
   1c358:	4a04      	ldr	r2, [pc, #16]	; (1c36c <nrf52_errata_136+0x24>)
   1c35a:	5cd0      	ldrb	r0, [r2, r3]
   1c35c:	4770      	bx	lr
                    default:
                        return true;
                }
            }
        #endif
        return false;
   1c35e:	2000      	movs	r0, #0
    #endif
}
   1c360:	4770      	bx	lr
   1c362:	bf00      	nop
   1c364:	10000130 	.word	0x10000130
   1c368:	10000134 	.word	0x10000134
   1c36c:	00027499 	.word	0x00027499

0001c370 <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1c370:	4b06      	ldr	r3, [pc, #24]	; (1c38c <nrf52_errata_103+0x1c>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1c372:	681b      	ldr	r3, [r3, #0]
   1c374:	2b08      	cmp	r3, #8
   1c376:	d106      	bne.n	1c386 <nrf52_errata_103+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1c378:	4b05      	ldr	r3, [pc, #20]	; (1c390 <nrf52_errata_103+0x20>)
   1c37a:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
   1c37c:	2b05      	cmp	r3, #5
   1c37e:	d802      	bhi.n	1c386 <nrf52_errata_103+0x16>
   1c380:	4a04      	ldr	r2, [pc, #16]	; (1c394 <nrf52_errata_103+0x24>)
   1c382:	5cd0      	ldrb	r0, [r2, r3]
   1c384:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
   1c386:	2000      	movs	r0, #0
    #endif
}
   1c388:	4770      	bx	lr
   1c38a:	bf00      	nop
   1c38c:	10000130 	.word	0x10000130
   1c390:	10000134 	.word	0x10000134
   1c394:	0002749f 	.word	0x0002749f

0001c398 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1c398:	4a02      	ldr	r2, [pc, #8]	; (1c3a4 <nvmc_wait+0xc>)
   1c39a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   1c39e:	2b00      	cmp	r3, #0
   1c3a0:	d0fb      	beq.n	1c39a <nvmc_wait+0x2>
}
   1c3a2:	4770      	bx	lr
   1c3a4:	4001e000 	.word	0x4001e000

0001c3a8 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   1c3a8:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   1c3aa:	f7ff ffcd 	bl	1c348 <nrf52_errata_136>
   1c3ae:	b140      	cbz	r0, 1c3c2 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   1c3b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c3b4:	2200      	movs	r2, #0
   1c3b6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   1c3ba:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   1c3be:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   1c3c2:	f7ff ffc1 	bl	1c348 <nrf52_errata_136>
   1c3c6:	2800      	cmp	r0, #0
   1c3c8:	d046      	beq.n	1c458 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1c3ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1c3ce:	4b52      	ldr	r3, [pc, #328]	; (1c518 <SystemInit+0x170>)
   1c3d0:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   1c3d4:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1c3d8:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   1c3dc:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1c3e0:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   1c3e4:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1c3e8:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   1c3ec:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1c3f0:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   1c3f4:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1c3f8:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   1c3fc:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1c400:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   1c404:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1c408:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   1c40c:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   1c410:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   1c414:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1c418:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   1c41c:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   1c420:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   1c424:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1c428:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   1c42c:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   1c430:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   1c434:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1c438:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   1c43c:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   1c440:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   1c444:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1c448:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   1c44c:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   1c450:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   1c454:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   1c458:	f7ff ff8a 	bl	1c370 <nrf52_errata_103>
   1c45c:	b110      	cbz	r0, 1c464 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   1c45e:	4b2f      	ldr	r3, [pc, #188]	; (1c51c <SystemInit+0x174>)
   1c460:	4a2f      	ldr	r2, [pc, #188]	; (1c520 <SystemInit+0x178>)
   1c462:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   1c464:	f7ff ff84 	bl	1c370 <nrf52_errata_103>
   1c468:	b118      	cbz	r0, 1c472 <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   1c46a:	4b2e      	ldr	r3, [pc, #184]	; (1c524 <SystemInit+0x17c>)
   1c46c:	22fb      	movs	r2, #251	; 0xfb
   1c46e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   1c472:	f7ff ff7d 	bl	1c370 <nrf52_errata_103>
   1c476:	b148      	cbz	r0, 1c48c <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   1c478:	492b      	ldr	r1, [pc, #172]	; (1c528 <SystemInit+0x180>)
   1c47a:	4b2c      	ldr	r3, [pc, #176]	; (1c52c <SystemInit+0x184>)
   1c47c:	680a      	ldr	r2, [r1, #0]
   1c47e:	681b      	ldr	r3, [r3, #0]
   1c480:	f022 020f 	bic.w	r2, r2, #15
   1c484:	f003 030f 	and.w	r3, r3, #15
   1c488:	4313      	orrs	r3, r2
   1c48a:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   1c48c:	f7ff ff70 	bl	1c370 <nrf52_errata_103>
   1c490:	b118      	cbz	r0, 1c49a <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   1c492:	4b27      	ldr	r3, [pc, #156]	; (1c530 <SystemInit+0x188>)
   1c494:	f44f 7200 	mov.w	r2, #512	; 0x200
   1c498:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   1c49a:	f7ff ff55 	bl	1c348 <nrf52_errata_136>
   1c49e:	b148      	cbz	r0, 1c4b4 <SystemInit+0x10c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1c4a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c4a4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1c4a8:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1c4aa:	bf44      	itt	mi
   1c4ac:	f06f 0201 	mvnmi.w	r2, #1
   1c4b0:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1c4b4:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1c4b8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1c4bc:	2a00      	cmp	r2, #0
   1c4be:	db03      	blt.n	1c4c8 <SystemInit+0x120>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1c4c0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1c4c4:	2b00      	cmp	r3, #0
   1c4c6:	da22      	bge.n	1c50e <SystemInit+0x166>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1c4c8:	491a      	ldr	r1, [pc, #104]	; (1c534 <SystemInit+0x18c>)
   1c4ca:	2301      	movs	r3, #1
   1c4cc:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   1c4d0:	f7ff ff62 	bl	1c398 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1c4d4:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
   1c4d8:	2412      	movs	r4, #18
   1c4da:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   1c4de:	f7ff ff5b 	bl	1c398 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   1c4e2:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   1c4e6:	f7ff ff57 	bl	1c398 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1c4ea:	2300      	movs	r3, #0
   1c4ec:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   1c4f0:	f7ff ff52 	bl	1c398 <nvmc_wait>
   1c4f4:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1c4f8:	490f      	ldr	r1, [pc, #60]	; (1c538 <SystemInit+0x190>)
   1c4fa:	4b10      	ldr	r3, [pc, #64]	; (1c53c <SystemInit+0x194>)
   1c4fc:	68ca      	ldr	r2, [r1, #12]
   1c4fe:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1c502:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1c504:	60cb      	str	r3, [r1, #12]
   1c506:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   1c50a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1c50c:	e7fd      	b.n	1c50a <SystemInit+0x162>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   1c50e:	4b0c      	ldr	r3, [pc, #48]	; (1c540 <SystemInit+0x198>)
   1c510:	4a0c      	ldr	r2, [pc, #48]	; (1c544 <SystemInit+0x19c>)
   1c512:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   1c514:	bd10      	pop	{r4, pc}
   1c516:	bf00      	nop
   1c518:	4000c000 	.word	0x4000c000
   1c51c:	4000568c 	.word	0x4000568c
   1c520:	00038148 	.word	0x00038148
   1c524:	4000f000 	.word	0x4000f000
   1c528:	40000ee4 	.word	0x40000ee4
   1c52c:	10000258 	.word	0x10000258
   1c530:	40029640 	.word	0x40029640
   1c534:	4001e000 	.word	0x4001e000
   1c538:	e000ed00 	.word	0xe000ed00
   1c53c:	05fa0004 	.word	0x05fa0004
   1c540:	2000062c 	.word	0x2000062c
   1c544:	03d09000 	.word	0x03d09000

0001c548 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   1c548:	4b04      	ldr	r3, [pc, #16]	; (1c55c <nrfx_clock_init+0x14>)
   1c54a:	791a      	ldrb	r2, [r3, #4]
   1c54c:	b922      	cbnz	r2, 1c558 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   1c54e:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   1c550:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   1c552:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   1c554:	4802      	ldr	r0, [pc, #8]	; (1c560 <nrfx_clock_init+0x18>)
   1c556:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   1c558:	4802      	ldr	r0, [pc, #8]	; (1c564 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1c55a:	4770      	bx	lr
   1c55c:	20002b44 	.word	0x20002b44
   1c560:	0bad0000 	.word	0x0bad0000
   1c564:	0bad000c 	.word	0x0bad000c

0001c568 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   1c568:	b110      	cbz	r0, 1c570 <nrfx_clock_start+0x8>
   1c56a:	2801      	cmp	r0, #1
   1c56c:	d020      	beq.n	1c5b0 <nrfx_clock_start+0x48>
   1c56e:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1c570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c574:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1c578:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   1c57c:	f411 3f80 	tst.w	r1, #65536	; 0x10000
   1c580:	4619      	mov	r1, r3
   1c582:	d011      	beq.n	1c5a8 <nrfx_clock_start+0x40>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   1c584:	f002 0203 	and.w	r2, r2, #3
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   1c588:	2a01      	cmp	r2, #1
   1c58a:	d10d      	bne.n	1c5a8 <nrfx_clock_start+0x40>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1c58c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c590:	4b0c      	ldr	r3, [pc, #48]	; (1c5c4 <nrfx_clock_start+0x5c>)
   1c592:	2200      	movs	r2, #0
   1c594:	601a      	str	r2, [r3, #0]
   1c596:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1c598:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c59c:	2202      	movs	r2, #2
   1c59e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c5a2:	2201      	movs	r2, #1
   1c5a4:	609a      	str	r2, [r3, #8]
}
   1c5a6:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
   1c5a8:	2300      	movs	r3, #0
   1c5aa:	f8c1 3518 	str.w	r3, [r1, #1304]	; 0x518
}
   1c5ae:	e7ef      	b.n	1c590 <nrfx_clock_start+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c5b0:	4b05      	ldr	r3, [pc, #20]	; (1c5c8 <nrfx_clock_start+0x60>)
   1c5b2:	2200      	movs	r2, #0
   1c5b4:	601a      	str	r2, [r3, #0]
   1c5b6:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1c5b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c5bc:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c5c0:	6018      	str	r0, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   1c5c2:	4770      	bx	lr
   1c5c4:	40000104 	.word	0x40000104
   1c5c8:	40000100 	.word	0x40000100

0001c5cc <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   1c5cc:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   1c5ce:	b110      	cbz	r0, 1c5d6 <nrfx_clock_stop+0xa>
   1c5d0:	2801      	cmp	r0, #1
   1c5d2:	d018      	beq.n	1c606 <nrfx_clock_stop+0x3a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   1c5d4:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   1c5d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c5da:	2202      	movs	r2, #2
   1c5dc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c5e0:	4a18      	ldr	r2, [pc, #96]	; (1c644 <nrfx_clock_stop+0x78>)
   1c5e2:	6010      	str	r0, [r2, #0]
   1c5e4:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c5e6:	4a18      	ldr	r2, [pc, #96]	; (1c648 <nrfx_clock_stop+0x7c>)
   1c5e8:	2101      	movs	r1, #1
   1c5ea:	6011      	str	r1, [r2, #0]
   1c5ec:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1c5f0:	461c      	mov	r4, r3
   1c5f2:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   1c5f6:	03db      	lsls	r3, r3, #15
   1c5f8:	d5ec      	bpl.n	1c5d4 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   1c5fa:	2001      	movs	r0, #1
   1c5fc:	f006 fa88 	bl	22b10 <nrfx_busy_wait>
   1c600:	3d01      	subs	r5, #1
   1c602:	d1f6      	bne.n	1c5f2 <nrfx_clock_stop+0x26>
   1c604:	e7e6      	b.n	1c5d4 <nrfx_clock_stop+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c606:	4b11      	ldr	r3, [pc, #68]	; (1c64c <nrfx_clock_stop+0x80>)
    p_reg->INTENCLR = mask;
   1c608:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c60c:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   1c60e:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c612:	601a      	str	r2, [r3, #0]
   1c614:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c616:	4b0e      	ldr	r3, [pc, #56]	; (1c650 <nrfx_clock_stop+0x84>)
   1c618:	f242 7510 	movw	r5, #10000	; 0x2710
   1c61c:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1c61e:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1c622:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
   1c626:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1c628:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1c62c:	d505      	bpl.n	1c63a <nrfx_clock_stop+0x6e>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   1c62e:	b123      	cbz	r3, 1c63a <nrfx_clock_stop+0x6e>
   1c630:	2001      	movs	r0, #1
   1c632:	f006 fa6d 	bl	22b10 <nrfx_busy_wait>
   1c636:	3d01      	subs	r5, #1
   1c638:	d1f1      	bne.n	1c61e <nrfx_clock_stop+0x52>
            m_clock_cb.hfclk_started = false;
   1c63a:	4b06      	ldr	r3, [pc, #24]	; (1c654 <nrfx_clock_stop+0x88>)
   1c63c:	2200      	movs	r2, #0
   1c63e:	715a      	strb	r2, [r3, #5]
   1c640:	e7c8      	b.n	1c5d4 <nrfx_clock_stop+0x8>
   1c642:	bf00      	nop
   1c644:	40000104 	.word	0x40000104
   1c648:	4000000c 	.word	0x4000000c
   1c64c:	40000100 	.word	0x40000100
   1c650:	40000004 	.word	0x40000004
   1c654:	20002b44 	.word	0x20002b44

0001c658 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1c658:	4b16      	ldr	r3, [pc, #88]	; (1c6b4 <nrfx_power_clock_irq_handler+0x5c>)
   1c65a:	681a      	ldr	r2, [r3, #0]
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   1c65c:	b510      	push	{r4, lr}
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   1c65e:	b16a      	cbz	r2, 1c67c <nrfx_power_clock_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c660:	2200      	movs	r2, #0
   1c662:	601a      	str	r2, [r3, #0]
   1c664:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   1c666:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c66a:	2201      	movs	r2, #1
   1c66c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   1c670:	4b11      	ldr	r3, [pc, #68]	; (1c6b8 <nrfx_power_clock_irq_handler+0x60>)
   1c672:	7958      	ldrb	r0, [r3, #5]
   1c674:	b910      	cbnz	r0, 1c67c <nrfx_power_clock_irq_handler+0x24>
        {
            m_clock_cb.hfclk_started = true;
   1c676:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1c678:	681b      	ldr	r3, [r3, #0]
   1c67a:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1c67c:	4b0f      	ldr	r3, [pc, #60]	; (1c6bc <nrfx_power_clock_irq_handler+0x64>)
   1c67e:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   1c680:	b172      	cbz	r2, 1c6a0 <nrfx_power_clock_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c682:	2200      	movs	r2, #0
   1c684:	601a      	str	r2, [r3, #0]
   1c686:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1c688:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c68c:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1c690:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   1c694:	0792      	lsls	r2, r2, #30
   1c696:	d104      	bne.n	1c6a2 <nrfx_power_clock_irq_handler+0x4a>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1c698:	2201      	movs	r2, #1
   1c69a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c69e:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   1c6a0:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   1c6a2:	2202      	movs	r2, #2
   1c6a4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1c6a8:	4b03      	ldr	r3, [pc, #12]	; (1c6b8 <nrfx_power_clock_irq_handler+0x60>)
}
   1c6aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1c6ae:	681b      	ldr	r3, [r3, #0]
   1c6b0:	2001      	movs	r0, #1
   1c6b2:	4718      	bx	r3
   1c6b4:	40000100 	.word	0x40000100
   1c6b8:	20002b44 	.word	0x20002b44
   1c6bc:	40000104 	.word	0x40000104

0001c6c0 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   1c6c0:	2301      	movs	r3, #1
   1c6c2:	fa03 f000 	lsl.w	r0, r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   1c6c6:	f010 0fff 	tst.w	r0, #255	; 0xff
   1c6ca:	d012      	beq.n	1c6f2 <nrfx_gpiote_channel_free+0x32>
	__asm__ volatile(
   1c6cc:	f04f 0320 	mov.w	r3, #32
   1c6d0:	f3ef 8111 	mrs	r1, BASEPRI
   1c6d4:	f383 8811 	msr	BASEPRI, r3
   1c6d8:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
   1c6dc:	4a06      	ldr	r2, [pc, #24]	; (1c6f8 <nrfx_gpiote_channel_free+0x38>)
   1c6de:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   1c6e0:	ea23 0000 	bic.w	r0, r3, r0
   1c6e4:	65d0      	str	r0, [r2, #92]	; 0x5c
	__asm__ volatile(
   1c6e6:	f381 8811 	msr	BASEPRI, r1
   1c6ea:	f3bf 8f6f 	isb	sy
   1c6ee:	4803      	ldr	r0, [pc, #12]	; (1c6fc <nrfx_gpiote_channel_free+0x3c>)
   1c6f0:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   1c6f2:	4803      	ldr	r0, [pc, #12]	; (1c700 <nrfx_gpiote_channel_free+0x40>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1c6f4:	4770      	bx	lr
   1c6f6:	bf00      	nop
   1c6f8:	20002b4c 	.word	0x20002b4c
   1c6fc:	0bad0000 	.word	0x0bad0000
   1c700:	0bad0004 	.word	0x0bad0004

0001c704 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   1c704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c708:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
   1c70a:	f8df e060 	ldr.w	lr, [pc, #96]	; 1c76c <nrfx_gpiote_channel_alloc+0x68>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   1c70e:	4816      	ldr	r0, [pc, #88]	; (1c768 <nrfx_gpiote_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
   1c710:	f8df 805c 	ldr.w	r8, [pc, #92]	; 1c770 <nrfx_gpiote_channel_alloc+0x6c>
{
   1c714:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   1c716:	22ff      	movs	r2, #255	; 0xff
    return m_cb.allocated_channels_mask & (1UL << index);
   1c718:	2601      	movs	r6, #1
   1c71a:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
   1c71c:	f04f 0120 	mov.w	r1, #32
   1c720:	f3ef 8c11 	mrs	ip, BASEPRI
   1c724:	f381 8811 	msr	BASEPRI, r1
   1c728:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   1c72c:	fa22 f103 	lsr.w	r1, r2, r3
   1c730:	07c9      	lsls	r1, r1, #31
   1c732:	d50a      	bpl.n	1c74a <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
   1c734:	f8de 105c 	ldr.w	r1, [lr, #92]	; 0x5c
   1c738:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   1c73c:	4239      	tst	r1, r7
    m_cb.allocated_channels_mask |= (1UL << index);
   1c73e:	bf01      	itttt	eq
   1c740:	4339      	orreq	r1, r7
   1c742:	f8ce 105c 	streq.w	r1, [lr, #92]	; 0x5c
            err_code = NRFX_SUCCESS;
   1c746:	4640      	moveq	r0, r8
            *p_channel = ch_idx;
   1c748:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
   1c74a:	f38c 8811 	msr	BASEPRI, ip
   1c74e:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   1c752:	4540      	cmp	r0, r8
   1c754:	d005      	beq.n	1c762 <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   1c756:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   1c75a:	439a      	bics	r2, r3
   1c75c:	f104 0401 	add.w	r4, r4, #1
   1c760:	d1db      	bne.n	1c71a <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1c762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c766:	bf00      	nop
   1c768:	0bad0002 	.word	0x0bad0002
   1c76c:	20002b4c 	.word	0x20002b4c
   1c770:	0bad0000 	.word	0x0bad0000

0001c774 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   1c774:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   1c776:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1c77a:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1c77c:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   1c77e:	6002      	str	r2, [r0, #0]
}
   1c780:	4802      	ldr	r0, [pc, #8]	; (1c78c <nrf_gpio_pin_port_decode+0x18>)
   1c782:	bf18      	it	ne
   1c784:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   1c788:	4770      	bx	lr
   1c78a:	bf00      	nop
   1c78c:	50000300 	.word	0x50000300

0001c790 <nrfx_spi_init>:

nrfx_err_t nrfx_spi_init(nrfx_spi_t const *        p_instance,
                         nrfx_spi_config_t const * p_config,
                         nrfx_spi_evt_handler_t    handler,
                         void *                    p_context)
{
   1c790:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    NRFX_ASSERT(p_config);
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1c794:	7906      	ldrb	r6, [r0, #4]
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1c796:	4c4c      	ldr	r4, [pc, #304]	; (1c8c8 <nrfx_spi_init+0x138>)
{
   1c798:	4680      	mov	r8, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1c79a:	2028      	movs	r0, #40	; 0x28
   1c79c:	4370      	muls	r0, r6
   1c79e:	1825      	adds	r5, r4, r0
   1c7a0:	7f2f      	ldrb	r7, [r5, #28]
   1c7a2:	2f00      	cmp	r7, #0
   1c7a4:	f040 808e 	bne.w	1c8c4 <nrfx_spi_init+0x134>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
   1c7a8:	5022      	str	r2, [r4, r0]
    p_cb->p_context = p_context;
   1c7aa:	606b      	str	r3, [r5, #4]
    // Configure pins used by the peripheral:
    // - SCK - output with initial value corresponding with the SPI mode used:
    //   0 - for modes 0 and 1 (CPOL = 0), 1 - for modes 2 and 3 (CPOL = 1);
    //   according to the reference manual guidelines this pin and its input
    //   buffer must always be connected for the SPI to work.
    if (p_config->mode <= NRF_SPI_MODE_1)
   1c7ac:	7b0b      	ldrb	r3, [r1, #12]
   1c7ae:	7808      	ldrb	r0, [r1, #0]
   1c7b0:	2b01      	cmp	r3, #1
   1c7b2:	d878      	bhi.n	1c8a6 <nrfx_spi_init+0x116>
    {
        nrf_gpio_pin_clear(p_config->sck_pin);
   1c7b4:	f006 f9c5 	bl	22b42 <nrf_gpio_pin_clear>
    }
    else
    {
        nrf_gpio_pin_set(p_config->sck_pin);
    }
    nrf_gpio_cfg(p_config->sck_pin,
   1c7b8:	780b      	ldrb	r3, [r1, #0]
   1c7ba:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1c7bc:	a801      	add	r0, sp, #4
   1c7be:	f7ff ffd9 	bl	1c774 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1c7c2:	9b01      	ldr	r3, [sp, #4]
   1c7c4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1c7c8:	2201      	movs	r2, #1
   1c7ca:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                 NRF_GPIO_PIN_INPUT_CONNECT,
                 NRF_GPIO_PIN_NOPULL,
                 NRF_GPIO_PIN_S0S1,
                 NRF_GPIO_PIN_NOSENSE);
    // - MOSI (optional) - output with initial value 0,
    if (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
   1c7ce:	784d      	ldrb	r5, [r1, #1]
   1c7d0:	2dff      	cmp	r5, #255	; 0xff
   1c7d2:	d06b      	beq.n	1c8ac <nrfx_spi_init+0x11c>
    {
        mosi_pin = p_config->mosi_pin;
        nrf_gpio_pin_clear(mosi_pin);
   1c7d4:	4628      	mov	r0, r5
   1c7d6:	f006 f9b4 	bl	22b42 <nrf_gpio_pin_clear>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1c7da:	a801      	add	r0, sp, #4
   1c7dc:	9501      	str	r5, [sp, #4]
   1c7de:	f7ff ffc9 	bl	1c774 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1c7e2:	9b01      	ldr	r3, [sp, #4]
   1c7e4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1c7e8:	2203      	movs	r2, #3
   1c7ea:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    else
    {
        mosi_pin = NRF_SPI_PIN_NOT_CONNECTED;
    }
    // - MISO (optional) - input,
    if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
   1c7ee:	788f      	ldrb	r7, [r1, #2]
   1c7f0:	2fff      	cmp	r7, #255	; 0xff
   1c7f2:	d05e      	beq.n	1c8b2 <nrfx_spi_init+0x122>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1c7f4:	a801      	add	r0, sp, #4
    {
        miso_pin = p_config->miso_pin;
        nrf_gpio_cfg_input(miso_pin, p_config->miso_pull);
   1c7f6:	f891 900e 	ldrb.w	r9, [r1, #14]
    nrf_gpio_cfg(
   1c7fa:	9701      	str	r7, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1c7fc:	f7ff ffba 	bl	1c774 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1c800:	9b01      	ldr	r3, [sp, #4]
   1c802:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
                               | ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)
   1c806:	ea4f 0289 	mov.w	r2, r9, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1c80a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    else
    {
        miso_pin = NRF_SPI_PIN_NOT_CONNECTED;
    }
    // - Slave Select (optional) - output with initial value 1 (inactive).
    if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1c80e:	78c8      	ldrb	r0, [r1, #3]
   1c810:	28ff      	cmp	r0, #255	; 0xff
   1c812:	d00c      	beq.n	1c82e <nrfx_spi_init+0x9e>
    {
        nrf_gpio_pin_set(p_config->ss_pin);
   1c814:	f006 f988 	bl	22b28 <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1c818:	a801      	add	r0, sp, #4
        nrf_gpio_cfg_output(p_config->ss_pin);
   1c81a:	78cb      	ldrb	r3, [r1, #3]
   1c81c:	9301      	str	r3, [sp, #4]
   1c81e:	f7ff ffa9 	bl	1c774 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1c822:	9b01      	ldr	r3, [sp, #4]
   1c824:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1c828:	2203      	movs	r2, #3
   1c82a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    }
    m_cb[p_instance->drv_inst_idx].ss_pin = p_config->ss_pin;
   1c82e:	f898 2004 	ldrb.w	r2, [r8, #4]
   1c832:	78c8      	ldrb	r0, [r1, #3]
   1c834:	2328      	movs	r3, #40	; 0x28
   1c836:	fb03 4302 	mla	r3, r3, r2, r4
   1c83a:	7798      	strb	r0, [r3, #30]

    NRF_SPI_Type * p_spi = p_instance->p_reg;
   1c83c:	f8d8 0000 	ldr.w	r0, [r8]
    nrf_spi_pins_set(p_spi, p_config->sck_pin, mosi_pin, miso_pin);
   1c840:	780b      	ldrb	r3, [r1, #0]
    p_reg->PSEL.SCK = sck_pin;
   1c842:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    p_reg->FREQUENCY = (uint32_t)frequency;
   1c846:	688b      	ldr	r3, [r1, #8]
    p_reg->PSEL.MOSI = mosi_pin;
   1c848:	f8c0 550c 	str.w	r5, [r0, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
   1c84c:	f8c0 7510 	str.w	r7, [r0, #1296]	; 0x510
    p_reg->FREQUENCY = (uint32_t)frequency;
   1c850:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
   1c854:	7b4b      	ldrb	r3, [r1, #13]
    nrf_spi_frequency_set(p_spi, p_config->frequency);
    nrf_spi_configure(p_spi, p_config->mode, p_config->bit_order);
   1c856:	7b0d      	ldrb	r5, [r1, #12]
   1c858:	3b00      	subs	r3, #0
   1c85a:	bf18      	it	ne
   1c85c:	2301      	movne	r3, #1
    switch (spi_mode)
   1c85e:	2d02      	cmp	r5, #2
   1c860:	d02a      	beq.n	1c8b8 <nrfx_spi_init+0x128>
   1c862:	2d03      	cmp	r5, #3
   1c864:	d02b      	beq.n	1c8be <nrfx_spi_init+0x12e>
   1c866:	2d01      	cmp	r5, #1
   1c868:	d101      	bne.n	1c86e <nrfx_spi_init+0xde>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
   1c86a:	f043 0302 	orr.w	r3, r3, #2
    p_reg->CONFIG = config;
   1c86e:	f8c0 3554 	str.w	r3, [r0, #1364]	; 0x554

    m_cb[p_instance->drv_inst_idx].orc = p_config->orc;
   1c872:	2328      	movs	r3, #40	; 0x28
   1c874:	fb03 4202 	mla	r2, r3, r2, r4

    nrf_spi_enable(p_spi);

    if (p_cb->handler)
   1c878:	4373      	muls	r3, r6
    m_cb[p_instance->drv_inst_idx].orc = p_config->orc;
   1c87a:	7949      	ldrb	r1, [r1, #5]
    if (p_cb->handler)
   1c87c:	58e3      	ldr	r3, [r4, r3]
    m_cb[p_instance->drv_inst_idx].orc = p_config->orc;
   1c87e:	77d1      	strb	r1, [r2, #31]
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   1c880:	2201      	movs	r2, #1
   1c882:	f8c0 2500 	str.w	r2, [r0, #1280]	; 0x500
    if (p_cb->handler)
   1c886:	b11b      	cbz	r3, 1c890 <nrfx_spi_init+0x100>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   1c888:	f340 3007 	sbfx	r0, r0, #12, #8
   1c88c:	f7e8 fe42 	bl	5514 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
   1c890:	2328      	movs	r3, #40	; 0x28
   1c892:	fb03 4406 	mla	r4, r3, r6, r4
   1c896:	2300      	movs	r3, #0
   1c898:	7763      	strb	r3, [r4, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   1c89a:	480c      	ldr	r0, [pc, #48]	; (1c8cc <nrfx_spi_init+0x13c>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1c89c:	2301      	movs	r3, #1
   1c89e:	7723      	strb	r3, [r4, #28]
}
   1c8a0:	b003      	add	sp, #12
   1c8a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        nrf_gpio_pin_set(p_config->sck_pin);
   1c8a6:	f006 f93f 	bl	22b28 <nrf_gpio_pin_set>
   1c8aa:	e785      	b.n	1c7b8 <nrfx_spi_init+0x28>
        mosi_pin = NRF_SPI_PIN_NOT_CONNECTED;
   1c8ac:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1c8b0:	e79d      	b.n	1c7ee <nrfx_spi_init+0x5e>
        miso_pin = NRF_SPI_PIN_NOT_CONNECTED;
   1c8b2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1c8b6:	e7aa      	b.n	1c80e <nrfx_spi_init+0x7e>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   1c8b8:	f043 0304 	orr.w	r3, r3, #4
        break;
   1c8bc:	e7d7      	b.n	1c86e <nrfx_spi_init+0xde>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   1c8be:	f043 0306 	orr.w	r3, r3, #6
        break;
   1c8c2:	e7d4      	b.n	1c86e <nrfx_spi_init+0xde>
        return err_code;
   1c8c4:	4802      	ldr	r0, [pc, #8]	; (1c8d0 <nrfx_spi_init+0x140>)
   1c8c6:	e7eb      	b.n	1c8a0 <nrfx_spi_init+0x110>
   1c8c8:	20002bac 	.word	0x20002bac
   1c8cc:	0bad0000 	.word	0x0bad0000
   1c8d0:	0bad0005 	.word	0x0bad0005

0001c8d4 <nrfx_spi_xfer>:
}

nrfx_err_t nrfx_spi_xfer(nrfx_spi_t const *           p_instance,
                         nrfx_spi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
   1c8d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1c8d8:	7904      	ldrb	r4, [r0, #4]
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   1c8da:	4d39      	ldr	r5, [pc, #228]	; (1c9c0 <nrfx_spi_xfer+0xec>)
   1c8dc:	2328      	movs	r3, #40	; 0x28
   1c8de:	4363      	muls	r3, r4
{
   1c8e0:	4690      	mov	r8, r2
    if (p_cb->transfer_in_progress)
   1c8e2:	18ea      	adds	r2, r5, r3
{
   1c8e4:	460f      	mov	r7, r1
    if (p_cb->transfer_in_progress)
   1c8e6:	7f51      	ldrb	r1, [r2, #29]
{
   1c8e8:	4681      	mov	r9, r0
    if (p_cb->transfer_in_progress)
   1c8ea:	2900      	cmp	r1, #0
   1c8ec:	d165      	bne.n	1c9ba <nrfx_spi_xfer+0xe6>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler)
   1c8ee:	58eb      	ldr	r3, [r5, r3]
   1c8f0:	b10b      	cbz	r3, 1c8f6 <nrfx_spi_xfer+0x22>
        {
            p_cb->transfer_in_progress = true;
   1c8f2:	2301      	movs	r3, #1
   1c8f4:	7753      	strb	r3, [r2, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   1c8f6:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   1c8fa:	2628      	movs	r6, #40	; 0x28
   1c8fc:	fb06 5604 	mla	r6, r6, r4, r5
   1c900:	f106 0c0c 	add.w	ip, r6, #12
   1c904:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    p_cb->abort = false;

    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1c908:	7fb0      	ldrb	r0, [r6, #30]
    p_cb->abort = false;
   1c90a:	2300      	movs	r3, #0
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1c90c:	28ff      	cmp	r0, #255	; 0xff
    p_cb->abort = false;
   1c90e:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1c912:	d001      	beq.n	1c918 <nrfx_spi_xfer+0x44>
    {
        nrf_gpio_pin_clear(p_cb->ss_pin);
   1c914:	f006 f915 	bl	22b42 <nrf_gpio_pin_clear>
    }
    if (flags)
   1c918:	2328      	movs	r3, #40	; 0x28
   1c91a:	f1b8 0f00 	cmp.w	r8, #0
   1c91e:	d006      	beq.n	1c92e <nrfx_spi_xfer+0x5a>
    {
        p_cb->transfer_in_progress = false;
   1c920:	fb03 5404 	mla	r4, r3, r4, r5
        err_code = NRFX_ERROR_NOT_SUPPORTED;
   1c924:	4827      	ldr	r0, [pc, #156]	; (1c9c4 <nrfx_spi_xfer+0xf0>)
        p_cb->transfer_in_progress = false;
   1c926:	2300      	movs	r3, #0
   1c928:	7763      	strb	r3, [r4, #29]
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1c92a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        spi_xfer(p_instance->p_reg, p_cb, p_xfer_desc);
   1c92e:	f8d9 6000 	ldr.w	r6, [r9]
    p_cb->bytes_transferred = 0;
   1c932:	fb03 5304 	mla	r3, r3, r4, r5
    p_reg->INTENCLR = mask;
   1c936:	2204      	movs	r2, #4
   1c938:	f8c6 2308 	str.w	r2, [r6, #776]	; 0x308
   1c93c:	f8c3 8020 	str.w	r8, [r3, #32]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c940:	f8c6 8108 	str.w	r8, [r6, #264]	; 0x108
   1c944:	f8d6 2108 	ldr.w	r2, [r6, #264]	; 0x108
        (p_xfer_desc->tx_length > 0 ? p_xfer_desc->p_tx_buffer[0] : p_cb->orc));
   1c948:	687a      	ldr	r2, [r7, #4]
    nrf_spi_txd_set(p_spi,
   1c94a:	b192      	cbz	r2, 1c972 <nrfx_spi_xfer+0x9e>
   1c94c:	683b      	ldr	r3, [r7, #0]
   1c94e:	781b      	ldrb	r3, [r3, #0]
    p_reg->TXD = data;
   1c950:	f8c6 351c 	str.w	r3, [r6, #1308]	; 0x51c
    if (p_xfer_desc->tx_length > 1)
   1c954:	2a01      	cmp	r2, #1
   1c956:	d90e      	bls.n	1c976 <nrfx_spi_xfer+0xa2>
        nrf_spi_txd_set(p_spi, p_xfer_desc->p_tx_buffer[1]);
   1c958:	683b      	ldr	r3, [r7, #0]
   1c95a:	785b      	ldrb	r3, [r3, #1]
   1c95c:	f8c6 351c 	str.w	r3, [r6, #1308]	; 0x51c
    if (p_cb->handler)
   1c960:	2328      	movs	r3, #40	; 0x28
   1c962:	4363      	muls	r3, r4
   1c964:	58ef      	ldr	r7, [r5, r3]
   1c966:	b177      	cbz	r7, 1c986 <nrfx_spi_xfer+0xb2>
    p_reg->INTENSET = mask;
   1c968:	2304      	movs	r3, #4
   1c96a:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
    nrfx_err_t err_code = NRFX_SUCCESS;
   1c96e:	4816      	ldr	r0, [pc, #88]	; (1c9c8 <nrfx_spi_xfer+0xf4>)
   1c970:	e7db      	b.n	1c92a <nrfx_spi_xfer+0x56>
    nrf_spi_txd_set(p_spi,
   1c972:	7fdb      	ldrb	r3, [r3, #31]
   1c974:	e7ec      	b.n	1c950 <nrfx_spi_xfer+0x7c>
    else if (p_xfer_desc->rx_length > 1)
   1c976:	68fb      	ldr	r3, [r7, #12]
   1c978:	2b01      	cmp	r3, #1
   1c97a:	d9f1      	bls.n	1c960 <nrfx_spi_xfer+0x8c>
        nrf_spi_txd_set(p_spi, p_cb->orc);
   1c97c:	2328      	movs	r3, #40	; 0x28
   1c97e:	fb03 5304 	mla	r3, r3, r4, r5
    p_reg->TXD = data;
   1c982:	7fdb      	ldrb	r3, [r3, #31]
   1c984:	e7ea      	b.n	1c95c <nrfx_spi_xfer+0x88>
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1c986:	eb04 0184 	add.w	r1, r4, r4, lsl #2
   1c98a:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c98e:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
            while (!nrf_spi_event_check(p_spi, NRF_SPI_EVENT_READY)) {}
   1c992:	2b00      	cmp	r3, #0
   1c994:	d0fb      	beq.n	1c98e <nrfx_spi_xfer+0xba>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c996:	f8c6 7108 	str.w	r7, [r6, #264]	; 0x108
        } while (transfer_byte(p_spi, p_cb));
   1c99a:	4630      	mov	r0, r6
   1c99c:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
   1c9a0:	f006 f8dc 	bl	22b5c <transfer_byte>
   1c9a4:	2800      	cmp	r0, #0
   1c9a6:	d1f2      	bne.n	1c98e <nrfx_spi_xfer+0xba>
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1c9a8:	2328      	movs	r3, #40	; 0x28
   1c9aa:	fb03 5404 	mla	r4, r3, r4, r5
   1c9ae:	7fa0      	ldrb	r0, [r4, #30]
   1c9b0:	28ff      	cmp	r0, #255	; 0xff
   1c9b2:	d0dc      	beq.n	1c96e <nrfx_spi_xfer+0x9a>
            nrf_gpio_pin_set(p_cb->ss_pin);
   1c9b4:	f006 f8b8 	bl	22b28 <nrf_gpio_pin_set>
   1c9b8:	e7d9      	b.n	1c96e <nrfx_spi_xfer+0x9a>
        return err_code;
   1c9ba:	4804      	ldr	r0, [pc, #16]	; (1c9cc <nrfx_spi_xfer+0xf8>)
   1c9bc:	e7b5      	b.n	1c92a <nrfx_spi_xfer+0x56>
   1c9be:	bf00      	nop
   1c9c0:	20002bac 	.word	0x20002bac
   1c9c4:	0bad0003 	.word	0x0bad0003
   1c9c8:	0bad0000 	.word	0x0bad0000
   1c9cc:	0bad000b 	.word	0x0bad000b

0001c9d0 <nrfx_spi_1_irq_handler>:
   1c9d0:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
   1c9d4:	2300      	movs	r3, #0
}
#endif

#if NRFX_CHECK(NRFX_SPI1_ENABLED)
void nrfx_spi_1_irq_handler(void)
{
   1c9d6:	b510      	push	{r4, lr}
    if (!transfer_byte(p_spi, p_cb))
   1c9d8:	490b      	ldr	r1, [pc, #44]	; (1ca08 <nrfx_spi_1_irq_handler+0x38>)
   1c9da:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   1c9de:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1c9e2:	f006 f8bb 	bl	22b5c <transfer_byte>
   1c9e6:	b968      	cbnz	r0, 1ca04 <nrfx_spi_1_irq_handler+0x34>
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1c9e8:	7f88      	ldrb	r0, [r1, #30]
   1c9ea:	28ff      	cmp	r0, #255	; 0xff
   1c9ec:	d001      	beq.n	1c9f2 <nrfx_spi_1_irq_handler+0x22>
        nrf_gpio_pin_set(p_cb->ss_pin);
   1c9ee:	f006 f89b 	bl	22b28 <nrf_gpio_pin_set>
    p_cb->transfer_in_progress = false;
   1c9f2:	2300      	movs	r3, #0
    p_cb->evt.type = NRFX_SPI_EVENT_DONE;
   1c9f4:	720b      	strb	r3, [r1, #8]
    p_cb->transfer_in_progress = false;
   1c9f6:	774b      	strb	r3, [r1, #29]
    irq_handler(NRF_SPI1, &m_cb[NRFX_SPI1_INST_IDX]);
}
   1c9f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   1c9fc:	e9d1 3100 	ldrd	r3, r1, [r1]
   1ca00:	4802      	ldr	r0, [pc, #8]	; (1ca0c <nrfx_spi_1_irq_handler+0x3c>)
   1ca02:	4718      	bx	r3
}
   1ca04:	bd10      	pop	{r4, pc}
   1ca06:	bf00      	nop
   1ca08:	20002bac 	.word	0x20002bac
   1ca0c:	20002bb4 	.word	0x20002bb4

0001ca10 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1ca10:	4b0e      	ldr	r3, [pc, #56]	; (1ca4c <z_sys_init_run_level+0x3c>)
{
   1ca12:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1ca14:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1ca18:	3001      	adds	r0, #1
   1ca1a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1ca1e:	42a6      	cmp	r6, r4
   1ca20:	d800      	bhi.n	1ca24 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   1ca22:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   1ca24:	e9d4 3500 	ldrd	r3, r5, [r4]
   1ca28:	4628      	mov	r0, r5
   1ca2a:	4798      	blx	r3
		if (dev != NULL) {
   1ca2c:	b165      	cbz	r5, 1ca48 <z_sys_init_run_level+0x38>
			if (rc != 0) {
   1ca2e:	68eb      	ldr	r3, [r5, #12]
   1ca30:	b130      	cbz	r0, 1ca40 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   1ca32:	2800      	cmp	r0, #0
   1ca34:	bfb8      	it	lt
   1ca36:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   1ca38:	28ff      	cmp	r0, #255	; 0xff
   1ca3a:	bfa8      	it	ge
   1ca3c:	20ff      	movge	r0, #255	; 0xff
   1ca3e:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   1ca40:	785a      	ldrb	r2, [r3, #1]
   1ca42:	f042 0201 	orr.w	r2, r2, #1
   1ca46:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1ca48:	3408      	adds	r4, #8
   1ca4a:	e7e8      	b.n	1ca1e <z_sys_init_run_level+0xe>
   1ca4c:	0002535c 	.word	0x0002535c

0001ca50 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   1ca50:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   1ca52:	4605      	mov	r5, r0
   1ca54:	b910      	cbnz	r0, 1ca5c <z_impl_device_get_binding+0xc>
		return NULL;
   1ca56:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   1ca58:	4620      	mov	r0, r4
   1ca5a:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   1ca5c:	7803      	ldrb	r3, [r0, #0]
   1ca5e:	2b00      	cmp	r3, #0
   1ca60:	d0f9      	beq.n	1ca56 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   1ca62:	4a0f      	ldr	r2, [pc, #60]	; (1caa0 <z_impl_device_get_binding+0x50>)
   1ca64:	4c0f      	ldr	r4, [pc, #60]	; (1caa4 <z_impl_device_get_binding+0x54>)
   1ca66:	4616      	mov	r6, r2
   1ca68:	4294      	cmp	r4, r2
   1ca6a:	d108      	bne.n	1ca7e <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
   1ca6c:	4c0d      	ldr	r4, [pc, #52]	; (1caa4 <z_impl_device_get_binding+0x54>)
   1ca6e:	42b4      	cmp	r4, r6
   1ca70:	d0f1      	beq.n	1ca56 <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1ca72:	4620      	mov	r0, r4
   1ca74:	f006 f8a6 	bl	22bc4 <z_device_ready>
   1ca78:	b950      	cbnz	r0, 1ca90 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
   1ca7a:	3418      	adds	r4, #24
   1ca7c:	e7f7      	b.n	1ca6e <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
   1ca7e:	4620      	mov	r0, r4
   1ca80:	f006 f8a0 	bl	22bc4 <z_device_ready>
   1ca84:	b110      	cbz	r0, 1ca8c <z_impl_device_get_binding+0x3c>
   1ca86:	6823      	ldr	r3, [r4, #0]
   1ca88:	42ab      	cmp	r3, r5
   1ca8a:	d0e5      	beq.n	1ca58 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   1ca8c:	3418      	adds	r4, #24
   1ca8e:	e7eb      	b.n	1ca68 <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1ca90:	6821      	ldr	r1, [r4, #0]
   1ca92:	4628      	mov	r0, r5
   1ca94:	f7e4 f94e 	bl	d34 <strcmp>
   1ca98:	2800      	cmp	r0, #0
   1ca9a:	d1ee      	bne.n	1ca7a <z_impl_device_get_binding+0x2a>
   1ca9c:	e7dc      	b.n	1ca58 <z_impl_device_get_binding+0x8>
   1ca9e:	bf00      	nop
   1caa0:	200007b0 	.word	0x200007b0
   1caa4:	200006f0 	.word	0x200006f0

0001caa8 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   1caa8:	b510      	push	{r4, lr}
   1caaa:	4604      	mov	r4, r0
	z_impl_log_panic();
   1caac:	f7e7 faa4 	bl	3ff8 <z_impl_log_panic>
   1cab0:	4b06      	ldr	r3, [pc, #24]	; (1cacc <k_sys_fatal_error_handler+0x24>)
   1cab2:	4907      	ldr	r1, [pc, #28]	; (1cad0 <k_sys_fatal_error_handler+0x28>)
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
   1cab4:	4807      	ldr	r0, [pc, #28]	; (1cad4 <k_sys_fatal_error_handler+0x2c>)
   1cab6:	1ac9      	subs	r1, r1, r3
   1cab8:	08c9      	lsrs	r1, r1, #3
   1caba:	0189      	lsls	r1, r1, #6
   1cabc:	f041 0101 	orr.w	r1, r1, #1
   1cac0:	f002 f83a 	bl	1eb38 <log_0>
	arch_system_halt(reason);
   1cac4:	4620      	mov	r0, r4
   1cac6:	f006 f886 	bl	22bd6 <arch_system_halt>
   1caca:	bf00      	nop
   1cacc:	0002393c 	.word	0x0002393c
   1cad0:	00023a7c 	.word	0x00023a7c
   1cad4:	000274a5 	.word	0x000274a5

0001cad8 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1cad8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1cadc:	4606      	mov	r6, r0
   1cade:	460f      	mov	r7, r1
	__asm__ volatile(
   1cae0:	f04f 0320 	mov.w	r3, #32
   1cae4:	f3ef 8811 	mrs	r8, BASEPRI
   1cae8:	f383 8811 	msr	BASEPRI, r3
   1caec:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   1caf0:	f000 fd9a 	bl	1d628 <z_impl_k_current_get>
   1caf4:	4c1f      	ldr	r4, [pc, #124]	; (1cb74 <z_fatal_error+0x9c>)
   1caf6:	4b20      	ldr	r3, [pc, #128]	; (1cb78 <z_fatal_error+0xa0>)
   1caf8:	1ae4      	subs	r4, r4, r3
   1cafa:	2e04      	cmp	r6, #4
   1cafc:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   1cb00:	bf96      	itet	ls
   1cb02:	4a1e      	ldrls	r2, [pc, #120]	; (1cb7c <z_fatal_error+0xa4>)
	struct k_thread *thread = k_current_get();

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1cb04:	4a1e      	ldrhi	r2, [pc, #120]	; (1cb80 <z_fatal_error+0xa8>)
   1cb06:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
   1cb0a:	01a4      	lsls	r4, r4, #6
   1cb0c:	f044 0301 	orr.w	r3, r4, #1
   1cb10:	4605      	mov	r5, r0
   1cb12:	f8ad 3000 	strh.w	r3, [sp]
   1cb16:	481b      	ldr	r0, [pc, #108]	; (1cb84 <z_fatal_error+0xac>)
   1cb18:	2300      	movs	r3, #0
   1cb1a:	4631      	mov	r1, r6
   1cb1c:	f002 f846 	bl	1ebac <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1cb20:	b147      	cbz	r7, 1cb34 <z_fatal_error+0x5c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1cb22:	69fb      	ldr	r3, [r7, #28]
   1cb24:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1cb28:	b123      	cbz	r3, 1cb34 <z_fatal_error+0x5c>
		LOG_ERR("Fault during interrupt handling\n");
   1cb2a:	4817      	ldr	r0, [pc, #92]	; (1cb88 <z_fatal_error+0xb0>)
   1cb2c:	f044 0101 	orr.w	r1, r4, #1
   1cb30:	f002 f802 	bl	1eb38 <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1cb34:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   1cb38:	b12d      	cbz	r5, 1cb46 <z_fatal_error+0x6e>
   1cb3a:	4628      	mov	r0, r5
   1cb3c:	f006 fae4 	bl	23108 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   1cb40:	b108      	cbz	r0, 1cb46 <z_fatal_error+0x6e>
   1cb42:	7803      	ldrb	r3, [r0, #0]
   1cb44:	b903      	cbnz	r3, 1cb48 <z_fatal_error+0x70>
		thread_name = "unknown";
   1cb46:	4811      	ldr	r0, [pc, #68]	; (1cb8c <z_fatal_error+0xb4>)
	LOG_ERR("Current thread: %p (%s)", thread,
   1cb48:	f7e7 f8d0 	bl	3cec <log_strdup>
   1cb4c:	4623      	mov	r3, r4
   1cb4e:	4602      	mov	r2, r0
   1cb50:	4629      	mov	r1, r5
   1cb52:	480f      	ldr	r0, [pc, #60]	; (1cb90 <z_fatal_error+0xb8>)
   1cb54:	f002 f811 	bl	1eb7a <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   1cb58:	4639      	mov	r1, r7
   1cb5a:	4630      	mov	r0, r6
   1cb5c:	f7ff ffa4 	bl	1caa8 <k_sys_fatal_error_handler>
	__asm__ volatile(
   1cb60:	f388 8811 	msr	BASEPRI, r8
   1cb64:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1cb68:	4628      	mov	r0, r5
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   1cb6a:	b002      	add	sp, #8
   1cb6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1cb70:	f7e9 b842 	b.w	5bf8 <z_impl_k_thread_abort>
   1cb74:	00023a7c 	.word	0x00023a7c
   1cb78:	0002393c 	.word	0x0002393c
   1cb7c:	00025374 	.word	0x00025374
   1cb80:	000274b4 	.word	0x000274b4
   1cb84:	000274c2 	.word	0x000274c2
   1cb88:	000274ea 	.word	0x000274ea
   1cb8c:	00025e46 	.word	0x00025e46
   1cb90:	0002750b 	.word	0x0002750b

0001cb94 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   1cb94:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   1cb96:	4c09      	ldr	r4, [pc, #36]	; (1cbbc <idle+0x28>)
	__asm__ volatile(
   1cb98:	f04f 0220 	mov.w	r2, #32
   1cb9c:	f3ef 8311 	mrs	r3, BASEPRI
   1cba0:	f382 8811 	msr	BASEPRI, r2
   1cba4:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   1cba8:	f006 fb89 	bl	232be <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
   1cbac:	6220      	str	r0, [r4, #32]
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
   1cbae:	f7e7 fedb 	bl	4968 <pm_system_suspend>
   1cbb2:	2800      	cmp	r0, #0
   1cbb4:	d1f0      	bne.n	1cb98 <idle+0x4>
	arch_cpu_idle();
   1cbb6:	f7e8 fd3f 	bl	5638 <arch_cpu_idle>
}
   1cbba:	e7ed      	b.n	1cb98 <idle+0x4>
   1cbbc:	20002bd4 	.word	0x20002bd4

0001cbc0 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1cbc0:	4802      	ldr	r0, [pc, #8]	; (1cbcc <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
   1cbc2:	4a03      	ldr	r2, [pc, #12]	; (1cbd0 <z_bss_zero+0x10>)
   1cbc4:	2100      	movs	r1, #0
   1cbc6:	1a12      	subs	r2, r2, r0
   1cbc8:	f006 bd59 	b.w	2367e <memset>
   1cbcc:	200009d0 	.word	0x200009d0
   1cbd0:	200032c8 	.word	0x200032c8

0001cbd4 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1cbd4:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   1cbd6:	4b0a      	ldr	r3, [pc, #40]	; (1cc00 <bg_thread_main+0x2c>)
   1cbd8:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1cbda:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   1cbdc:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1cbde:	f7ff ff17 	bl	1ca10 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   1cbe2:	f001 f83f 	bl	1dc64 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1cbe6:	2003      	movs	r0, #3
   1cbe8:	f7ff ff12 	bl	1ca10 <z_sys_init_run_level>

	z_init_static_threads();
   1cbec:	f000 fe5c 	bl	1d8a8 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   1cbf0:	f7e6 f9b6 	bl	2f60 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1cbf4:	4a03      	ldr	r2, [pc, #12]	; (1cc04 <bg_thread_main+0x30>)
   1cbf6:	7b13      	ldrb	r3, [r2, #12]
   1cbf8:	f023 0301 	bic.w	r3, r3, #1
   1cbfc:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1cbfe:	bd08      	pop	{r3, pc}
   1cc00:	200032c6 	.word	0x200032c6
   1cc04:	20001310 	.word	0x20001310

0001cc08 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   1cc08:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
   1cc0c:	b0a7      	sub	sp, #156	; 0x9c
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   1cc0e:	f7e6 ffc5 	bl	3b9c <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1cc12:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 1cd0c <z_cstart+0x104>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1cc16:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1cc1a:	4d34      	ldr	r5, [pc, #208]	; (1ccec <z_cstart+0xe4>)
	_kernel.ready_q.cache = &z_main_thread;
   1cc1c:	4e34      	ldr	r6, [pc, #208]	; (1ccf0 <z_cstart+0xe8>)
   1cc1e:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1cc20:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 1cd10 <z_cstart+0x108>
	z_setup_new_thread(thread, stack,
   1cc24:	4f33      	ldr	r7, [pc, #204]	; (1ccf4 <z_cstart+0xec>)
   1cc26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1cc2a:	2400      	movs	r4, #0
   1cc2c:	616b      	str	r3, [r5, #20]
   1cc2e:	23e0      	movs	r3, #224	; 0xe0
   1cc30:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1cc34:	77ec      	strb	r4, [r5, #31]
   1cc36:	762c      	strb	r4, [r5, #24]
   1cc38:	766c      	strb	r4, [r5, #25]
   1cc3a:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1cc3c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1cc3e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1cc42:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1cc44:	f7e8 ffb6 	bl	5bb4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1cc48:	f7e8 fcf0 	bl	562c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1cc4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1cc50:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1cc52:	62eb      	str	r3, [r5, #44]	; 0x2c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   1cc54:	4d28      	ldr	r5, [pc, #160]	; (1ccf8 <z_cstart+0xf0>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   1cc56:	f240 1301 	movw	r3, #257	; 0x101
   1cc5a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1cc5e:	ab06      	add	r3, sp, #24
   1cc60:	60ab      	str	r3, [r5, #8]
	dummy_thread->stack_info.size = 0U;
   1cc62:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
#endif
#if defined(CONFIG_MMU) && defined(CONFIG_USERSPACE)
	z_kernel_map_fixup();
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1cc66:	f005 ffac 	bl	22bc2 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1cc6a:	4620      	mov	r0, r4
   1cc6c:	f7ff fed0 	bl	1ca10 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1cc70:	2001      	movs	r0, #1
   1cc72:	f7ff fecd 	bl	1ca10 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1cc76:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
   1cc7a:	f000 fc55 	bl	1d528 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1cc7e:	4b1f      	ldr	r3, [pc, #124]	; (1ccfc <z_cstart+0xf4>)
	_kernel.ready_q.cache = &z_main_thread;
   1cc80:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1cc82:	491f      	ldr	r1, [pc, #124]	; (1cd00 <z_cstart+0xf8>)
   1cc84:	9305      	str	r3, [sp, #20]
   1cc86:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1cc8a:	4653      	mov	r3, sl
   1cc8c:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   1cc90:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1cc94:	9400      	str	r4, [sp, #0]
   1cc96:	4630      	mov	r0, r6
   1cc98:	f000 fdaa 	bl	1d7f0 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1cc9c:	7b73      	ldrb	r3, [r6, #13]
   1cc9e:	4680      	mov	r8, r0
   1cca0:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   1cca4:	4630      	mov	r0, r6
   1cca6:	7373      	strb	r3, [r6, #13]
   1cca8:	f006 f985 	bl	22fb6 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   1ccac:	230f      	movs	r3, #15
   1ccae:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1ccb2:	4914      	ldr	r1, [pc, #80]	; (1cd04 <z_cstart+0xfc>)
   1ccb4:	4b14      	ldr	r3, [pc, #80]	; (1cd08 <z_cstart+0x100>)
   1ccb6:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1ccba:	e9cd b404 	strd	fp, r4, [sp, #16]
   1ccbe:	e9cd 5400 	strd	r5, r4, [sp]
   1ccc2:	4638      	mov	r0, r7
   1ccc4:	f000 fd94 	bl	1d7f0 <z_setup_new_thread>
   1ccc8:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   1ccca:	60ef      	str	r7, [r5, #12]
   1cccc:	f023 0304 	bic.w	r3, r3, #4
   1ccd0:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1ccd2:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
   1ccd6:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].id = i;
   1ccda:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
   1ccdc:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1cce0:	4652      	mov	r2, sl
   1cce2:	4641      	mov	r1, r8
   1cce4:	4630      	mov	r0, r6
   1cce6:	f7e8 fc89 	bl	55fc <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1ccea:	bf00      	nop
   1ccec:	e000ed00 	.word	0xe000ed00
   1ccf0:	20001310 	.word	0x20001310
   1ccf4:	20001290 	.word	0x20001290
   1ccf8:	20002bd4 	.word	0x20002bd4
   1ccfc:	0002756d 	.word	0x0002756d
   1cd00:	20004378 	.word	0x20004378
   1cd04:	20004778 	.word	0x20004778
   1cd08:	0001cb95 	.word	0x0001cb95
   1cd0c:	200050b8 	.word	0x200050b8
   1cd10:	0001cbd5 	.word	0x0001cbd5

0001cd14 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   1cd14:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1cd16:	4c06      	ldr	r4, [pc, #24]	; (1cd30 <statics_init+0x1c>)
   1cd18:	4d06      	ldr	r5, [pc, #24]	; (1cd34 <statics_init+0x20>)
   1cd1a:	42ac      	cmp	r4, r5
   1cd1c:	d301      	bcc.n	1cd22 <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   1cd1e:	2000      	movs	r0, #0
   1cd20:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1cd22:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1cd26:	4620      	mov	r0, r4
   1cd28:	f005 ff65 	bl	22bf6 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1cd2c:	3414      	adds	r4, #20
   1cd2e:	e7f4      	b.n	1cd1a <statics_init+0x6>
   1cd30:	2000083c 	.word	0x2000083c
   1cd34:	2000083c 	.word	0x2000083c

0001cd38 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   1cd38:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1cd3a:	4b0e      	ldr	r3, [pc, #56]	; (1cd74 <init_mem_slab_module+0x3c>)
   1cd3c:	4c0e      	ldr	r4, [pc, #56]	; (1cd78 <init_mem_slab_module+0x40>)
   1cd3e:	42a3      	cmp	r3, r4
   1cd40:	d301      	bcc.n	1cd46 <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   1cd42:	2000      	movs	r0, #0
	return rc;
}
   1cd44:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1cd46:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   1cd4a:	ea41 0200 	orr.w	r2, r1, r0
   1cd4e:	f012 0203 	ands.w	r2, r2, #3
   1cd52:	d10b      	bne.n	1cd6c <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   1cd54:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1cd56:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1cd58:	42aa      	cmp	r2, r5
   1cd5a:	d101      	bne.n	1cd60 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1cd5c:	331c      	adds	r3, #28
   1cd5e:	e7ee      	b.n	1cd3e <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   1cd60:	695e      	ldr	r6, [r3, #20]
   1cd62:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   1cd64:	3201      	adds	r2, #1
		slab->free_list = p;
   1cd66:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   1cd68:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   1cd6a:	e7f5      	b.n	1cd58 <init_mem_slab_module+0x20>
		return -EINVAL;
   1cd6c:	f06f 0015 	mvn.w	r0, #21
	return rc;
   1cd70:	e7e8      	b.n	1cd44 <init_mem_slab_module+0xc>
   1cd72:	bf00      	nop
   1cd74:	200007e8 	.word	0x200007e8
   1cd78:	2000083c 	.word	0x2000083c

0001cd7c <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1cd7c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   1cd7e:	460c      	mov	r4, r1
   1cd80:	4616      	mov	r6, r2
   1cd82:	461f      	mov	r7, r3
   1cd84:	f04f 0320 	mov.w	r3, #32
   1cd88:	f3ef 8111 	mrs	r1, BASEPRI
   1cd8c:	f383 8811 	msr	BASEPRI, r3
   1cd90:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   1cd94:	6943      	ldr	r3, [r0, #20]
   1cd96:	b15b      	cbz	r3, 1cdb0 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   1cd98:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1cd9a:	681b      	ldr	r3, [r3, #0]
   1cd9c:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1cd9e:	6983      	ldr	r3, [r0, #24]
   1cda0:	3301      	adds	r3, #1
   1cda2:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1cda4:	2000      	movs	r0, #0
	__asm__ volatile(
   1cda6:	f381 8811 	msr	BASEPRI, r1
   1cdaa:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   1cdae:	e011      	b.n	1cdd4 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1cdb0:	ea56 0207 	orrs.w	r2, r6, r7
   1cdb4:	d103      	bne.n	1cdbe <k_mem_slab_alloc+0x42>
		*mem = NULL;
   1cdb6:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   1cdb8:	f06f 000b 	mvn.w	r0, #11
   1cdbc:	e7f3      	b.n	1cda6 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   1cdbe:	4602      	mov	r2, r0
   1cdc0:	e9cd 6700 	strd	r6, r7, [sp]
   1cdc4:	4804      	ldr	r0, [pc, #16]	; (1cdd8 <k_mem_slab_alloc+0x5c>)
   1cdc6:	f000 f9f1 	bl	1d1ac <z_pend_curr>
		if (result == 0) {
   1cdca:	b918      	cbnz	r0, 1cdd4 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
   1cdcc:	4b03      	ldr	r3, [pc, #12]	; (1cddc <k_mem_slab_alloc+0x60>)
   1cdce:	689b      	ldr	r3, [r3, #8]
   1cdd0:	695b      	ldr	r3, [r3, #20]
   1cdd2:	6023      	str	r3, [r4, #0]
}
   1cdd4:	b002      	add	sp, #8
   1cdd6:	bdd0      	pop	{r4, r6, r7, pc}
   1cdd8:	200032c7 	.word	0x200032c7
   1cddc:	20002bd4 	.word	0x20002bd4

0001cde0 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1cde0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cde2:	4604      	mov	r4, r0
   1cde4:	460d      	mov	r5, r1
	__asm__ volatile(
   1cde6:	f04f 0320 	mov.w	r3, #32
   1cdea:	f3ef 8611 	mrs	r6, BASEPRI
   1cdee:	f383 8811 	msr	BASEPRI, r3
   1cdf2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (slab->free_list == NULL) {
   1cdf6:	6947      	ldr	r7, [r0, #20]
   1cdf8:	b96f      	cbnz	r7, 1ce16 <k_mem_slab_free+0x36>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1cdfa:	f006 f923 	bl	23044 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   1cdfe:	b150      	cbz	r0, 1ce16 <k_mem_slab_free+0x36>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1ce00:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1ce02:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1ce04:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   1ce06:	f006 f8d6 	bl	22fb6 <z_ready_thread>
			z_reschedule(&lock, key);
   1ce0a:	4631      	mov	r1, r6
   1ce0c:	4808      	ldr	r0, [pc, #32]	; (1ce30 <k_mem_slab_free+0x50>)
	}
	**(char ***) mem = slab->free_list;
	slab->free_list = *(char **) mem;
	slab->num_used--;
	k_spin_unlock(&lock, key);
}
   1ce0e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&lock, key);
   1ce12:	f000 b949 	b.w	1d0a8 <z_reschedule>
	**(char ***) mem = slab->free_list;
   1ce16:	682b      	ldr	r3, [r5, #0]
   1ce18:	6962      	ldr	r2, [r4, #20]
   1ce1a:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1ce1c:	682b      	ldr	r3, [r5, #0]
   1ce1e:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   1ce20:	69a3      	ldr	r3, [r4, #24]
   1ce22:	3b01      	subs	r3, #1
   1ce24:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1ce26:	f386 8811 	msr	BASEPRI, r6
   1ce2a:	f3bf 8f6f 	isb	sy
}
   1ce2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ce30:	200032c7 	.word	0x200032c7

0001ce34 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1ce34:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1ce38:	4604      	mov	r4, r0
   1ce3a:	4616      	mov	r6, r2
   1ce3c:	461f      	mov	r7, r3
	__asm__ volatile(
   1ce3e:	f04f 0320 	mov.w	r3, #32
   1ce42:	f3ef 8811 	mrs	r8, BASEPRI
   1ce46:	f383 8811 	msr	BASEPRI, r3
   1ce4a:	f3bf 8f6f 	isb	sy
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1ce4e:	68c3      	ldr	r3, [r0, #12]
   1ce50:	4a32      	ldr	r2, [pc, #200]	; (1cf1c <z_impl_k_mutex_lock+0xe8>)
   1ce52:	b16b      	cbz	r3, 1ce70 <z_impl_k_mutex_lock+0x3c>
   1ce54:	6880      	ldr	r0, [r0, #8]
   1ce56:	6891      	ldr	r1, [r2, #8]
   1ce58:	4288      	cmp	r0, r1
   1ce5a:	d019      	beq.n	1ce90 <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1ce5c:	ea56 0307 	orrs.w	r3, r6, r7
   1ce60:	d118      	bne.n	1ce94 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   1ce62:	f388 8811 	msr	BASEPRI, r8
   1ce66:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   1ce6a:	f06f 000f 	mvn.w	r0, #15
   1ce6e:	e00c      	b.n	1ce8a <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   1ce70:	6891      	ldr	r1, [r2, #8]
   1ce72:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1ce76:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   1ce78:	3301      	adds	r3, #1
   1ce7a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1ce7c:	6893      	ldr	r3, [r2, #8]
   1ce7e:	60a3      	str	r3, [r4, #8]
   1ce80:	f388 8811 	msr	BASEPRI, r8
   1ce84:	f3bf 8f6f 	isb	sy
		return 0;
   1ce88:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   1ce8a:	b002      	add	sp, #8
   1ce8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1ce90:	6921      	ldr	r1, [r4, #16]
   1ce92:	e7f0      	b.n	1ce76 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1ce94:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1ce98:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1ce9c:	4299      	cmp	r1, r3
   1ce9e:	bfa8      	it	ge
   1cea0:	4619      	movge	r1, r3
   1cea2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1cea6:	428b      	cmp	r3, r1
   1cea8:	dd2c      	ble.n	1cf04 <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
   1ceaa:	f000 faf1 	bl	1d490 <z_set_prio>
   1ceae:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1ceb0:	e9cd 6700 	strd	r6, r7, [sp]
   1ceb4:	481a      	ldr	r0, [pc, #104]	; (1cf20 <z_impl_k_mutex_lock+0xec>)
   1ceb6:	4622      	mov	r2, r4
   1ceb8:	4641      	mov	r1, r8
   1ceba:	f000 f977 	bl	1d1ac <z_pend_curr>
	if (got_mutex == 0) {
   1cebe:	2800      	cmp	r0, #0
   1cec0:	d0e3      	beq.n	1ce8a <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   1cec2:	f04f 0320 	mov.w	r3, #32
   1cec6:	f3ef 8611 	mrs	r6, BASEPRI
   1ceca:	f383 8811 	msr	BASEPRI, r3
   1cece:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1ced2:	6823      	ldr	r3, [r4, #0]
   1ced4:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ced6:	42a3      	cmp	r3, r4
   1ced8:	d007      	beq.n	1ceea <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1ceda:	b133      	cbz	r3, 1ceea <z_impl_k_mutex_lock+0xb6>
   1cedc:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1cee0:	4299      	cmp	r1, r3
   1cee2:	bfa8      	it	ge
   1cee4:	4619      	movge	r1, r3
   1cee6:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1ceea:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   1ceec:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1cef0:	4299      	cmp	r1, r3
   1cef2:	d109      	bne.n	1cf08 <z_impl_k_mutex_lock+0xd4>
	if (resched) {
   1cef4:	b16d      	cbz	r5, 1cf12 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   1cef6:	480a      	ldr	r0, [pc, #40]	; (1cf20 <z_impl_k_mutex_lock+0xec>)
   1cef8:	4631      	mov	r1, r6
   1cefa:	f000 f8d5 	bl	1d0a8 <z_reschedule>
	return -EAGAIN;
   1cefe:	f06f 000a 	mvn.w	r0, #10
   1cf02:	e7c2      	b.n	1ce8a <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   1cf04:	2500      	movs	r5, #0
   1cf06:	e7d3      	b.n	1ceb0 <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
   1cf08:	f000 fac2 	bl	1d490 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1cf0c:	2800      	cmp	r0, #0
   1cf0e:	d1f2      	bne.n	1cef6 <z_impl_k_mutex_lock+0xc2>
   1cf10:	e7f0      	b.n	1cef4 <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
   1cf12:	f386 8811 	msr	BASEPRI, r6
   1cf16:	f3bf 8f6f 	isb	sy
   1cf1a:	e7f0      	b.n	1cefe <z_impl_k_mutex_lock+0xca>
   1cf1c:	20002bd4 	.word	0x20002bd4
   1cf20:	200032c7 	.word	0x200032c7

0001cf24 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1cf24:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	CHECKIF(mutex->owner == NULL) {
   1cf26:	6883      	ldr	r3, [r0, #8]
{
   1cf28:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1cf2a:	2b00      	cmp	r3, #0
   1cf2c:	d036      	beq.n	1cf9c <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1cf2e:	4a1e      	ldr	r2, [pc, #120]	; (1cfa8 <z_impl_k_mutex_unlock+0x84>)
   1cf30:	6892      	ldr	r2, [r2, #8]
   1cf32:	4293      	cmp	r3, r2
   1cf34:	d135      	bne.n	1cfa2 <z_impl_k_mutex_unlock+0x7e>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   1cf36:	7bda      	ldrb	r2, [r3, #15]
   1cf38:	3a01      	subs	r2, #1
   1cf3a:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   1cf3c:	68c3      	ldr	r3, [r0, #12]
   1cf3e:	2b01      	cmp	r3, #1
   1cf40:	d005      	beq.n	1cf4e <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   1cf42:	3b01      	subs	r3, #1
   1cf44:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   1cf46:	f000 f9b1 	bl	1d2ac <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   1cf4a:	2000      	movs	r0, #0
}
   1cf4c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1cf4e:	f04f 0320 	mov.w	r3, #32
   1cf52:	f3ef 8511 	mrs	r5, BASEPRI
   1cf56:	f383 8811 	msr	BASEPRI, r3
   1cf5a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1cf5e:	6901      	ldr	r1, [r0, #16]
   1cf60:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   1cf62:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1cf66:	4299      	cmp	r1, r3
   1cf68:	d001      	beq.n	1cf6e <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   1cf6a:	f000 fa91 	bl	1d490 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1cf6e:	4620      	mov	r0, r4
   1cf70:	f006 f868 	bl	23044 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1cf74:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1cf76:	b158      	cbz	r0, 1cf90 <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
   1cf78:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1cf7c:	6122      	str	r2, [r4, #16]
   1cf7e:	2200      	movs	r2, #0
   1cf80:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   1cf82:	f006 f818 	bl	22fb6 <z_ready_thread>
		z_reschedule(&lock, key);
   1cf86:	4809      	ldr	r0, [pc, #36]	; (1cfac <z_impl_k_mutex_unlock+0x88>)
   1cf88:	4629      	mov	r1, r5
   1cf8a:	f000 f88d 	bl	1d0a8 <z_reschedule>
   1cf8e:	e7da      	b.n	1cf46 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   1cf90:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1cf92:	f385 8811 	msr	BASEPRI, r5
   1cf96:	f3bf 8f6f 	isb	sy
   1cf9a:	e7d4      	b.n	1cf46 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   1cf9c:	f06f 0015 	mvn.w	r0, #21
   1cfa0:	e7d4      	b.n	1cf4c <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   1cfa2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1cfa6:	e7d1      	b.n	1cf4c <z_impl_k_mutex_unlock+0x28>
   1cfa8:	20002bd4 	.word	0x20002bd4
   1cfac:	200032c7 	.word	0x200032c7

0001cfb0 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1cfb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1cfb2:	4616      	mov	r6, r2
   1cfb4:	461f      	mov	r7, r3
	__asm__ volatile(
   1cfb6:	f04f 0320 	mov.w	r3, #32
   1cfba:	f3ef 8511 	mrs	r5, BASEPRI
   1cfbe:	f383 8811 	msr	BASEPRI, r3
   1cfc2:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
   1cfc6:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1cfc8:	b19c      	cbz	r4, 1cff2 <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1cfca:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1cfcc:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1cfce:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1cfd2:	4294      	cmp	r4, r2
	list->head = node;
   1cfd4:	6003      	str	r3, [r0, #0]
	list->tail = node;
   1cfd6:	bf08      	it	eq
   1cfd8:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1cfda:	2101      	movs	r1, #1
   1cfdc:	4620      	mov	r0, r4
   1cfde:	f005 fef5 	bl	22dcc <z_queue_node_peek>
   1cfe2:	4604      	mov	r4, r0
	__asm__ volatile(
   1cfe4:	f385 8811 	msr	BASEPRI, r5
   1cfe8:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1cfec:	4620      	mov	r0, r4
   1cfee:	b003      	add	sp, #12
   1cff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1cff2:	ea56 0307 	orrs.w	r3, r6, r7
   1cff6:	d0f5      	beq.n	1cfe4 <z_impl_k_queue_get+0x34>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1cff8:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1cffc:	e9cd 6700 	strd	r6, r7, [sp]
   1d000:	4629      	mov	r1, r5
   1d002:	4610      	mov	r0, r2
   1d004:	f000 f8d2 	bl	1d1ac <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1d008:	2800      	cmp	r0, #0
   1d00a:	d1ef      	bne.n	1cfec <z_impl_k_queue_get+0x3c>
   1d00c:	4b01      	ldr	r3, [pc, #4]	; (1d014 <z_impl_k_queue_get+0x64>)
   1d00e:	689b      	ldr	r3, [r3, #8]
   1d010:	695c      	ldr	r4, [r3, #20]
   1d012:	e7eb      	b.n	1cfec <z_impl_k_queue_get+0x3c>
   1d014:	20002bd4 	.word	0x20002bd4

0001d018 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   1d018:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   1d01a:	4c08      	ldr	r4, [pc, #32]	; (1d03c <z_reset_time_slice+0x24>)
   1d01c:	6823      	ldr	r3, [r4, #0]
   1d01e:	b15b      	cbz	r3, 1d038 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   1d020:	f7e7 ffaa 	bl	4f78 <sys_clock_elapsed>
   1d024:	4603      	mov	r3, r0
   1d026:	6820      	ldr	r0, [r4, #0]
   1d028:	4a05      	ldr	r2, [pc, #20]	; (1d040 <z_reset_time_slice+0x28>)
   1d02a:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   1d02c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   1d030:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   1d032:	2100      	movs	r1, #0
   1d034:	f006 b953 	b.w	232de <z_set_timeout_expiry>
}
   1d038:	bd10      	pop	{r4, pc}
   1d03a:	bf00      	nop
   1d03c:	20002c0c 	.word	0x20002c0c
   1d040:	20002bd4 	.word	0x20002bd4

0001d044 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   1d044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d046:	4604      	mov	r4, r0
   1d048:	460d      	mov	r5, r1
	__asm__ volatile(
   1d04a:	f04f 0320 	mov.w	r3, #32
   1d04e:	f3ef 8611 	mrs	r6, BASEPRI
   1d052:	f383 8811 	msr	BASEPRI, r3
   1d056:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   1d05a:	4b10      	ldr	r3, [pc, #64]	; (1d09c <k_sched_time_slice_set+0x58>)
   1d05c:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   1d05e:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   1d062:	f240 30e7 	movw	r0, #999	; 0x3e7
   1d066:	2100      	movs	r1, #0
   1d068:	611a      	str	r2, [r3, #16]
   1d06a:	fbe7 0104 	umlal	r0, r1, r7, r4
   1d06e:	2300      	movs	r3, #0
   1d070:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1d074:	f7e3 fce2 	bl	a3c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   1d078:	2c00      	cmp	r4, #0
   1d07a:	4b09      	ldr	r3, [pc, #36]	; (1d0a0 <k_sched_time_slice_set+0x5c>)
   1d07c:	dc09      	bgt.n	1d092 <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   1d07e:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   1d080:	4b08      	ldr	r3, [pc, #32]	; (1d0a4 <k_sched_time_slice_set+0x60>)
   1d082:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   1d084:	f7ff ffc8 	bl	1d018 <z_reset_time_slice>
	__asm__ volatile(
   1d088:	f386 8811 	msr	BASEPRI, r6
   1d08c:	f3bf 8f6f 	isb	sy
	}
}
   1d090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   1d092:	2802      	cmp	r0, #2
   1d094:	bfb8      	it	lt
   1d096:	2002      	movlt	r0, #2
   1d098:	e7f1      	b.n	1d07e <k_sched_time_slice_set+0x3a>
   1d09a:	bf00      	nop
   1d09c:	20002bd4 	.word	0x20002bd4
   1d0a0:	20002c0c 	.word	0x20002c0c
   1d0a4:	20002c08 	.word	0x20002c08

0001d0a8 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1d0a8:	b949      	cbnz	r1, 1d0be <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1d0aa:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   1d0ae:	b930      	cbnz	r0, 1d0be <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   1d0b0:	4b05      	ldr	r3, [pc, #20]	; (1d0c8 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   1d0b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1d0b4:	689b      	ldr	r3, [r3, #8]
   1d0b6:	429a      	cmp	r2, r3
   1d0b8:	d001      	beq.n	1d0be <z_reschedule+0x16>
	ret = arch_swap(key);
   1d0ba:	f7e8 b9dd 	b.w	5478 <arch_swap>
   1d0be:	f381 8811 	msr	BASEPRI, r1
   1d0c2:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   1d0c6:	4770      	bx	lr
   1d0c8:	20002bd4 	.word	0x20002bd4

0001d0cc <k_sched_lock>:
	__asm__ volatile(
   1d0cc:	f04f 0320 	mov.w	r3, #32
   1d0d0:	f3ef 8111 	mrs	r1, BASEPRI
   1d0d4:	f383 8811 	msr	BASEPRI, r3
   1d0d8:	f3bf 8f6f 	isb	sy
   1d0dc:	4b04      	ldr	r3, [pc, #16]	; (1d0f0 <k_sched_lock+0x24>)
   1d0de:	689a      	ldr	r2, [r3, #8]
   1d0e0:	7bd3      	ldrb	r3, [r2, #15]
   1d0e2:	3b01      	subs	r3, #1
   1d0e4:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1d0e6:	f381 8811 	msr	BASEPRI, r1
   1d0ea:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   1d0ee:	4770      	bx	lr
   1d0f0:	20002bd4 	.word	0x20002bd4

0001d0f4 <update_cache>:
{
   1d0f4:	b538      	push	{r3, r4, r5, lr}
	thread = _priq_run_best(&_kernel.ready_q.runq);
   1d0f6:	4c0d      	ldr	r4, [pc, #52]	; (1d12c <update_cache+0x38>)
{
   1d0f8:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
   1d0fa:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1d0fe:	f005 ff23 	bl	22f48 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   1d102:	4605      	mov	r5, r0
   1d104:	b900      	cbnz	r0, 1d108 <update_cache+0x14>
   1d106:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   1d108:	68a3      	ldr	r3, [r4, #8]
   1d10a:	b94a      	cbnz	r2, 1d120 <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
   1d10c:	7b5a      	ldrb	r2, [r3, #13]
   1d10e:	06d2      	lsls	r2, r2, #27
   1d110:	d106      	bne.n	1d120 <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1d112:	69aa      	ldr	r2, [r5, #24]
   1d114:	b922      	cbnz	r2, 1d120 <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(thread)) {
   1d116:	89da      	ldrh	r2, [r3, #14]
   1d118:	2a7f      	cmp	r2, #127	; 0x7f
   1d11a:	d901      	bls.n	1d120 <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
   1d11c:	6263      	str	r3, [r4, #36]	; 0x24
}
   1d11e:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   1d120:	429d      	cmp	r5, r3
   1d122:	d001      	beq.n	1d128 <update_cache+0x34>
			z_reset_time_slice();
   1d124:	f7ff ff78 	bl	1d018 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1d128:	6265      	str	r5, [r4, #36]	; 0x24
}
   1d12a:	e7f8      	b.n	1d11e <update_cache+0x2a>
   1d12c:	20002bd4 	.word	0x20002bd4

0001d130 <unready_thread>:
{
   1d130:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1d132:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   1d136:	7b43      	ldrb	r3, [r0, #13]
   1d138:	2a00      	cmp	r2, #0
{
   1d13a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1d13c:	da04      	bge.n	1d148 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1d13e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1d142:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   1d144:	f005 feab 	bl	22e9e <sys_dlist_remove>
	update_cache(thread == _current);
   1d148:	4b04      	ldr	r3, [pc, #16]	; (1d15c <unready_thread+0x2c>)
   1d14a:	6898      	ldr	r0, [r3, #8]
   1d14c:	1a43      	subs	r3, r0, r1
   1d14e:	4258      	negs	r0, r3
   1d150:	4158      	adcs	r0, r3
}
   1d152:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   1d156:	f7ff bfcd 	b.w	1d0f4 <update_cache>
   1d15a:	bf00      	nop
   1d15c:	20002bd4 	.word	0x20002bd4

0001d160 <pend>:
{
   1d160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d164:	4606      	mov	r6, r0
   1d166:	4614      	mov	r4, r2
   1d168:	461d      	mov	r5, r3
	__asm__ volatile(
   1d16a:	f04f 0320 	mov.w	r3, #32
   1d16e:	f3ef 8711 	mrs	r7, BASEPRI
   1d172:	f383 8811 	msr	BASEPRI, r3
   1d176:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   1d17a:	f005 feef 	bl	22f5c <add_to_waitq_locked>
	__asm__ volatile(
   1d17e:	f387 8811 	msr	BASEPRI, r7
   1d182:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1d186:	1c6b      	adds	r3, r5, #1
   1d188:	bf08      	it	eq
   1d18a:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
   1d18e:	d008      	beq.n	1d1a2 <pend+0x42>

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1d190:	4622      	mov	r2, r4
   1d192:	462b      	mov	r3, r5
   1d194:	f106 0018 	add.w	r0, r6, #24
   1d198:	4903      	ldr	r1, [pc, #12]	; (1d1a8 <pend+0x48>)
}
   1d19a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1d19e:	f000 bdd7 	b.w	1dd50 <z_add_timeout>
   1d1a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d1a6:	bf00      	nop
   1d1a8:	00022fd7 	.word	0x00022fd7

0001d1ac <z_pend_curr>:
{
   1d1ac:	b510      	push	{r4, lr}
	pending_current = _current;
   1d1ae:	4b07      	ldr	r3, [pc, #28]	; (1d1cc <z_pend_curr+0x20>)
   1d1b0:	6898      	ldr	r0, [r3, #8]
   1d1b2:	4b07      	ldr	r3, [pc, #28]	; (1d1d0 <z_pend_curr+0x24>)
{
   1d1b4:	460c      	mov	r4, r1
	pending_current = _current;
   1d1b6:	6018      	str	r0, [r3, #0]
{
   1d1b8:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   1d1ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1d1be:	f7ff ffcf 	bl	1d160 <pend>
   1d1c2:	4620      	mov	r0, r4
}
   1d1c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1d1c8:	f7e8 b956 	b.w	5478 <arch_swap>
   1d1cc:	20002bd4 	.word	0x20002bd4
   1d1d0:	20002c04 	.word	0x20002c04

0001d1d4 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
   1d1d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d1d8:	4605      	mov	r5, r0
   1d1da:	460f      	mov	r7, r1
		return 0;
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);

	expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   1d1dc:	f006 f899 	bl	23312 <sys_clock_tick_get_32>
   1d1e0:	4604      	mov	r4, r0
	__asm__ volatile(
   1d1e2:	f04f 0320 	mov.w	r3, #32
   1d1e6:	f3ef 8811 	mrs	r8, BASEPRI
   1d1ea:	f383 8811 	msr	BASEPRI, r3
   1d1ee:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   1d1f2:	4e12      	ldr	r6, [pc, #72]	; (1d23c <z_tick_sleep.part.0+0x68>)
   1d1f4:	4b12      	ldr	r3, [pc, #72]	; (1d240 <z_tick_sleep.part.0+0x6c>)
   1d1f6:	68b0      	ldr	r0, [r6, #8]
   1d1f8:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   1d1fa:	f7ff ff99 	bl	1d130 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1d1fe:	68b0      	ldr	r0, [r6, #8]
   1d200:	4910      	ldr	r1, [pc, #64]	; (1d244 <z_tick_sleep.part.0+0x70>)
   1d202:	462a      	mov	r2, r5
   1d204:	463b      	mov	r3, r7
   1d206:	3018      	adds	r0, #24
   1d208:	f000 fda2 	bl	1dd50 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1d20c:	68b2      	ldr	r2, [r6, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1d20e:	7b53      	ldrb	r3, [r2, #13]
   1d210:	f043 0310 	orr.w	r3, r3, #16
   1d214:	7353      	strb	r3, [r2, #13]
   1d216:	4640      	mov	r0, r8
   1d218:	f7e8 f92e 	bl	5478 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   1d21c:	f006 f879 	bl	23312 <sys_clock_tick_get_32>
	expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   1d220:	442c      	add	r4, r5
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   1d222:	1a24      	subs	r4, r4, r0
   1d224:	f04f 0500 	mov.w	r5, #0
   1d228:	f165 0500 	sbc.w	r5, r5, #0
   1d22c:	2c00      	cmp	r4, #0
   1d22e:	f175 0300 	sbcs.w	r3, r5, #0
   1d232:	bfb8      	it	lt
   1d234:	2400      	movlt	r4, #0
		return ticks;
	}
#endif

	return 0;
}
   1d236:	4620      	mov	r0, r4
   1d238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d23c:	20002bd4 	.word	0x20002bd4
   1d240:	20002c04 	.word	0x20002c04
   1d244:	00022fd7 	.word	0x00022fd7

0001d248 <z_impl_k_thread_suspend>:
{
   1d248:	b570      	push	{r4, r5, r6, lr}
   1d24a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1d24c:	3018      	adds	r0, #24
   1d24e:	f006 f820 	bl	23292 <z_abort_timeout>
   1d252:	f04f 0320 	mov.w	r3, #32
   1d256:	f3ef 8611 	mrs	r6, BASEPRI
   1d25a:	f383 8811 	msr	BASEPRI, r3
   1d25e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1d262:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   1d266:	7b63      	ldrb	r3, [r4, #13]
   1d268:	2a00      	cmp	r2, #0
   1d26a:	da05      	bge.n	1d278 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1d26c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1d270:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1d272:	4620      	mov	r0, r4
   1d274:	f005 fe13 	bl	22e9e <sys_dlist_remove>
		update_cache(thread == _current);
   1d278:	4d0b      	ldr	r5, [pc, #44]	; (1d2a8 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1d27a:	7b63      	ldrb	r3, [r4, #13]
   1d27c:	68a8      	ldr	r0, [r5, #8]
   1d27e:	f043 0310 	orr.w	r3, r3, #16
   1d282:	7363      	strb	r3, [r4, #13]
   1d284:	1b03      	subs	r3, r0, r4
   1d286:	4258      	negs	r0, r3
   1d288:	4158      	adcs	r0, r3
   1d28a:	f7ff ff33 	bl	1d0f4 <update_cache>
	__asm__ volatile(
   1d28e:	f386 8811 	msr	BASEPRI, r6
   1d292:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1d296:	68ab      	ldr	r3, [r5, #8]
   1d298:	42a3      	cmp	r3, r4
   1d29a:	d103      	bne.n	1d2a4 <z_impl_k_thread_suspend+0x5c>
}
   1d29c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1d2a0:	f005 be48 	b.w	22f34 <z_reschedule_unlocked>
}
   1d2a4:	bd70      	pop	{r4, r5, r6, pc}
   1d2a6:	bf00      	nop
   1d2a8:	20002bd4 	.word	0x20002bd4

0001d2ac <k_sched_unlock>:
{
   1d2ac:	b510      	push	{r4, lr}
	__asm__ volatile(
   1d2ae:	f04f 0320 	mov.w	r3, #32
   1d2b2:	f3ef 8411 	mrs	r4, BASEPRI
   1d2b6:	f383 8811 	msr	BASEPRI, r3
   1d2ba:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1d2be:	4b08      	ldr	r3, [pc, #32]	; (1d2e0 <k_sched_unlock+0x34>)
   1d2c0:	689a      	ldr	r2, [r3, #8]
   1d2c2:	7bd3      	ldrb	r3, [r2, #15]
   1d2c4:	3301      	adds	r3, #1
   1d2c6:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1d2c8:	2000      	movs	r0, #0
   1d2ca:	f7ff ff13 	bl	1d0f4 <update_cache>
	__asm__ volatile(
   1d2ce:	f384 8811 	msr	BASEPRI, r4
   1d2d2:	f3bf 8f6f 	isb	sy
}
   1d2d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1d2da:	f005 be2b 	b.w	22f34 <z_reschedule_unlocked>
   1d2de:	bf00      	nop
   1d2e0:	20002bd4 	.word	0x20002bd4

0001d2e4 <move_thread_to_end_of_prio_q>:
{
   1d2e4:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1d2e6:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   1d2ea:	7b43      	ldrb	r3, [r0, #13]
   1d2ec:	2a00      	cmp	r2, #0
{
   1d2ee:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1d2f0:	da04      	bge.n	1d2fc <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1d2f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1d2f6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1d2f8:	f005 fdd1 	bl	22e9e <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1d2fc:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   1d2fe:	4a17      	ldr	r2, [pc, #92]	; (1d35c <move_thread_to_end_of_prio_q+0x78>)
   1d300:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1d304:	4610      	mov	r0, r2
   1d306:	734b      	strb	r3, [r1, #13]
   1d308:	f850 3f28 	ldr.w	r3, [r0, #40]!
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1d30c:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d30e:	4283      	cmp	r3, r0
   1d310:	bf08      	it	eq
   1d312:	2300      	moveq	r3, #0
   1d314:	2b00      	cmp	r3, #0
   1d316:	bf38      	it	cc
   1d318:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1d31a:	b1cb      	cbz	r3, 1d350 <move_thread_to_end_of_prio_q+0x6c>
	int32_t b1 = thread_1->base.prio;
   1d31c:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   1d320:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
   1d324:	42a6      	cmp	r6, r4
   1d326:	d00f      	beq.n	1d348 <move_thread_to_end_of_prio_q+0x64>
		return b2 - b1;
   1d328:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1d32a:	2c00      	cmp	r4, #0
   1d32c:	dd0c      	ble.n	1d348 <move_thread_to_end_of_prio_q+0x64>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   1d32e:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   1d330:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   1d334:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   1d336:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   1d338:	6890      	ldr	r0, [r2, #8]
   1d33a:	1a43      	subs	r3, r0, r1
   1d33c:	4258      	negs	r0, r3
}
   1d33e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1d342:	4158      	adcs	r0, r3
   1d344:	f7ff bed6 	b.w	1d0f4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1d348:	42ab      	cmp	r3, r5
   1d34a:	d001      	beq.n	1d350 <move_thread_to_end_of_prio_q+0x6c>
   1d34c:	681b      	ldr	r3, [r3, #0]
   1d34e:	e7e4      	b.n	1d31a <move_thread_to_end_of_prio_q+0x36>
	node->prev = tail;
   1d350:	e9c1 0500 	strd	r0, r5, [r1]
	tail->next = node;
   1d354:	6029      	str	r1, [r5, #0]
	list->tail = node;
   1d356:	62d1      	str	r1, [r2, #44]	; 0x2c
}
   1d358:	e7ee      	b.n	1d338 <move_thread_to_end_of_prio_q+0x54>
   1d35a:	bf00      	nop
   1d35c:	20002bd4 	.word	0x20002bd4

0001d360 <z_time_slice>:
{
   1d360:	b570      	push	{r4, r5, r6, lr}
   1d362:	4601      	mov	r1, r0
	__asm__ volatile(
   1d364:	f04f 0320 	mov.w	r3, #32
   1d368:	f3ef 8411 	mrs	r4, BASEPRI
   1d36c:	f383 8811 	msr	BASEPRI, r3
   1d370:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   1d374:	4b16      	ldr	r3, [pc, #88]	; (1d3d0 <z_time_slice+0x70>)
   1d376:	4a17      	ldr	r2, [pc, #92]	; (1d3d4 <z_time_slice+0x74>)
   1d378:	6898      	ldr	r0, [r3, #8]
   1d37a:	6815      	ldr	r5, [r2, #0]
   1d37c:	42a8      	cmp	r0, r5
   1d37e:	461d      	mov	r5, r3
   1d380:	d106      	bne.n	1d390 <z_time_slice+0x30>
			z_reset_time_slice();
   1d382:	f7ff fe49 	bl	1d018 <z_reset_time_slice>
	__asm__ volatile(
   1d386:	f384 8811 	msr	BASEPRI, r4
   1d38a:	f3bf 8f6f 	isb	sy
}
   1d38e:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   1d390:	2600      	movs	r6, #0
   1d392:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1d394:	4a10      	ldr	r2, [pc, #64]	; (1d3d8 <z_time_slice+0x78>)
   1d396:	6812      	ldr	r2, [r2, #0]
   1d398:	b1ba      	cbz	r2, 1d3ca <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1d39a:	89c2      	ldrh	r2, [r0, #14]
   1d39c:	2a7f      	cmp	r2, #127	; 0x7f
   1d39e:	d814      	bhi.n	1d3ca <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   1d3a0:	7b42      	ldrb	r2, [r0, #13]
   1d3a2:	06d2      	lsls	r2, r2, #27
   1d3a4:	d111      	bne.n	1d3ca <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1d3a6:	4a0d      	ldr	r2, [pc, #52]	; (1d3dc <z_time_slice+0x7c>)
   1d3a8:	f990 600e 	ldrsb.w	r6, [r0, #14]
   1d3ac:	6812      	ldr	r2, [r2, #0]
   1d3ae:	4296      	cmp	r6, r2
   1d3b0:	db0b      	blt.n	1d3ca <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1d3b2:	4a0b      	ldr	r2, [pc, #44]	; (1d3e0 <z_time_slice+0x80>)
   1d3b4:	4290      	cmp	r0, r2
   1d3b6:	d008      	beq.n	1d3ca <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   1d3b8:	691a      	ldr	r2, [r3, #16]
   1d3ba:	428a      	cmp	r2, r1
   1d3bc:	dc02      	bgt.n	1d3c4 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
   1d3be:	f7ff ff91 	bl	1d2e4 <move_thread_to_end_of_prio_q>
   1d3c2:	e7de      	b.n	1d382 <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
   1d3c4:	1a52      	subs	r2, r2, r1
   1d3c6:	611a      	str	r2, [r3, #16]
   1d3c8:	e7dd      	b.n	1d386 <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
   1d3ca:	2300      	movs	r3, #0
   1d3cc:	612b      	str	r3, [r5, #16]
   1d3ce:	e7da      	b.n	1d386 <z_time_slice+0x26>
   1d3d0:	20002bd4 	.word	0x20002bd4
   1d3d4:	20002c04 	.word	0x20002c04
   1d3d8:	20002c0c 	.word	0x20002c0c
   1d3dc:	20002c08 	.word	0x20002c08
   1d3e0:	20001290 	.word	0x20001290

0001d3e4 <ready_thread>:
{
   1d3e4:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1d3e6:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1d3ea:	7b42      	ldrb	r2, [r0, #13]
   1d3ec:	2b00      	cmp	r3, #0
   1d3ee:	db2d      	blt.n	1d44c <ready_thread+0x68>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1d3f0:	06d3      	lsls	r3, r2, #27
   1d3f2:	d12b      	bne.n	1d44c <ready_thread+0x68>
	return !sys_dnode_is_linked(&to->node);
   1d3f4:	6983      	ldr	r3, [r0, #24]
   1d3f6:	bb4b      	cbnz	r3, 1d44c <ready_thread+0x68>
	return list->head == list;
   1d3f8:	4915      	ldr	r1, [pc, #84]	; (1d450 <ready_thread+0x6c>)
	thread->base.thread_state |= _THREAD_QUEUED;
   1d3fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1d3fe:	7342      	strb	r2, [r0, #13]
   1d400:	460a      	mov	r2, r1
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1d402:	6acd      	ldr	r5, [r1, #44]	; 0x2c
	return list->head == list;
   1d404:	f852 4f28 	ldr.w	r4, [r2, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d408:	4294      	cmp	r4, r2
   1d40a:	bf18      	it	ne
   1d40c:	4623      	movne	r3, r4
   1d40e:	2b00      	cmp	r3, #0
   1d410:	bf38      	it	cc
   1d412:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1d414:	b1ab      	cbz	r3, 1d442 <ready_thread+0x5e>
	int32_t b1 = thread_1->base.prio;
   1d416:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1d41a:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
   1d41e:	42a6      	cmp	r6, r4
   1d420:	d00b      	beq.n	1d43a <ready_thread+0x56>
		return b2 - b1;
   1d422:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1d424:	2c00      	cmp	r4, #0
   1d426:	dd08      	ble.n	1d43a <ready_thread+0x56>
	sys_dnode_t *const prev = successor->prev;
   1d428:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1d42a:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   1d42e:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1d430:	6058      	str	r0, [r3, #4]
}
   1d432:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   1d434:	2000      	movs	r0, #0
   1d436:	f7ff be5d 	b.w	1d0f4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1d43a:	42ab      	cmp	r3, r5
   1d43c:	d001      	beq.n	1d442 <ready_thread+0x5e>
   1d43e:	681b      	ldr	r3, [r3, #0]
   1d440:	e7e8      	b.n	1d414 <ready_thread+0x30>
	node->prev = tail;
   1d442:	e9c0 2500 	strd	r2, r5, [r0]
	tail->next = node;
   1d446:	6028      	str	r0, [r5, #0]
	list->tail = node;
   1d448:	62c8      	str	r0, [r1, #44]	; 0x2c
}
   1d44a:	e7f2      	b.n	1d432 <ready_thread+0x4e>
}
   1d44c:	bc70      	pop	{r4, r5, r6}
   1d44e:	4770      	bx	lr
   1d450:	20002bd4 	.word	0x20002bd4

0001d454 <z_sched_start>:
{
   1d454:	b510      	push	{r4, lr}
	__asm__ volatile(
   1d456:	f04f 0220 	mov.w	r2, #32
   1d45a:	f3ef 8411 	mrs	r4, BASEPRI
   1d45e:	f382 8811 	msr	BASEPRI, r2
   1d462:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   1d466:	7b42      	ldrb	r2, [r0, #13]
   1d468:	0751      	lsls	r1, r2, #29
   1d46a:	d404      	bmi.n	1d476 <z_sched_start+0x22>
	__asm__ volatile(
   1d46c:	f384 8811 	msr	BASEPRI, r4
   1d470:	f3bf 8f6f 	isb	sy
}
   1d474:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1d476:	f022 0204 	bic.w	r2, r2, #4
   1d47a:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   1d47c:	f7ff ffb2 	bl	1d3e4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1d480:	4621      	mov	r1, r4
   1d482:	4802      	ldr	r0, [pc, #8]	; (1d48c <z_sched_start+0x38>)
}
   1d484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   1d488:	f7ff be0e 	b.w	1d0a8 <z_reschedule>
   1d48c:	200032c7 	.word	0x200032c7

0001d490 <z_set_prio>:
{
   1d490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d492:	4604      	mov	r4, r0
	__asm__ volatile(
   1d494:	f04f 0320 	mov.w	r3, #32
   1d498:	f3ef 8611 	mrs	r6, BASEPRI
   1d49c:	f383 8811 	msr	BASEPRI, r3
   1d4a0:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1d4a4:	7b43      	ldrb	r3, [r0, #13]
   1d4a6:	06da      	lsls	r2, r3, #27
   1d4a8:	b249      	sxtb	r1, r1
   1d4aa:	d138      	bne.n	1d51e <z_set_prio+0x8e>
   1d4ac:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
   1d4ae:	2d00      	cmp	r5, #0
   1d4b0:	d135      	bne.n	1d51e <z_set_prio+0x8e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1d4b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1d4b6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1d4b8:	f005 fcf1 	bl	22e9e <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1d4bc:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
   1d4be:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   1d4c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1d4c4:	7343      	strb	r3, [r0, #13]
	return list->head == list;
   1d4c6:	4817      	ldr	r0, [pc, #92]	; (1d524 <z_set_prio+0x94>)
   1d4c8:	4603      	mov	r3, r0
   1d4ca:	f853 7f28 	ldr.w	r7, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d4ce:	429f      	cmp	r7, r3
   1d4d0:	bf18      	it	ne
   1d4d2:	463d      	movne	r5, r7
   1d4d4:	2d00      	cmp	r5, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1d4d6:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   1d4d8:	461a      	mov	r2, r3
   1d4da:	462b      	mov	r3, r5
   1d4dc:	bf38      	it	cc
   1d4de:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1d4e0:	b1c3      	cbz	r3, 1d514 <z_set_prio+0x84>
	int32_t b2 = thread_2->base.prio;
   1d4e2:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   1d4e6:	42a9      	cmp	r1, r5
   1d4e8:	d010      	beq.n	1d50c <z_set_prio+0x7c>
		return b2 - b1;
   1d4ea:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   1d4ec:	2d00      	cmp	r5, #0
   1d4ee:	dd0d      	ble.n	1d50c <z_set_prio+0x7c>
	sys_dnode_t *const prev = successor->prev;
   1d4f0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1d4f2:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1d4f6:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1d4f8:	605c      	str	r4, [r3, #4]
			update_cache(1);
   1d4fa:	2001      	movs	r0, #1
   1d4fc:	f7ff fdfa 	bl	1d0f4 <update_cache>
   1d500:	2001      	movs	r0, #1
	__asm__ volatile(
   1d502:	f386 8811 	msr	BASEPRI, r6
   1d506:	f3bf 8f6f 	isb	sy
}
   1d50a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1d50c:	42bb      	cmp	r3, r7
   1d50e:	d001      	beq.n	1d514 <z_set_prio+0x84>
   1d510:	681b      	ldr	r3, [r3, #0]
   1d512:	e7e5      	b.n	1d4e0 <z_set_prio+0x50>
	node->prev = tail;
   1d514:	e9c4 2700 	strd	r2, r7, [r4]
	tail->next = node;
   1d518:	603c      	str	r4, [r7, #0]
	list->tail = node;
   1d51a:	62c4      	str	r4, [r0, #44]	; 0x2c
}
   1d51c:	e7ed      	b.n	1d4fa <z_set_prio+0x6a>
			thread->base.prio = prio;
   1d51e:	73a1      	strb	r1, [r4, #14]
   1d520:	2000      	movs	r0, #0
   1d522:	e7ee      	b.n	1d502 <z_set_prio+0x72>
   1d524:	20002bd4 	.word	0x20002bd4

0001d528 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   1d528:	4b04      	ldr	r3, [pc, #16]	; (1d53c <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1d52a:	2100      	movs	r1, #0
   1d52c:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   1d530:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   1d534:	4608      	mov	r0, r1
   1d536:	f7ff bd85 	b.w	1d044 <k_sched_time_slice_set>
   1d53a:	bf00      	nop
   1d53c:	20002bd4 	.word	0x20002bd4

0001d540 <z_impl_k_yield>:
	if (!z_is_idle_thread_object(_current)) {
   1d540:	4926      	ldr	r1, [pc, #152]	; (1d5dc <z_impl_k_yield+0x9c>)
{
   1d542:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   1d544:	688a      	ldr	r2, [r1, #8]
   1d546:	4b26      	ldr	r3, [pc, #152]	; (1d5e0 <z_impl_k_yield+0xa0>)
   1d548:	429a      	cmp	r2, r3
   1d54a:	d03d      	beq.n	1d5c8 <z_impl_k_yield+0x88>
	__asm__ volatile(
   1d54c:	f04f 0320 	mov.w	r3, #32
   1d550:	f3ef 8511 	mrs	r5, BASEPRI
   1d554:	f383 8811 	msr	BASEPRI, r3
   1d558:	f3bf 8f6f 	isb	sy
			dequeue_thread(&_kernel.ready_q.runq,
   1d55c:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1d55e:	7b43      	ldrb	r3, [r0, #13]
   1d560:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1d564:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1d566:	f005 fc9a 	bl	22e9e <sys_dlist_remove>
		queue_thread(&_kernel.ready_q.runq, _current);
   1d56a:	688a      	ldr	r2, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   1d56c:	7b53      	ldrb	r3, [r2, #13]
	return list->head == list;
   1d56e:	4608      	mov	r0, r1
   1d570:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1d574:	7353      	strb	r3, [r2, #13]
   1d576:	f850 3f28 	ldr.w	r3, [r0, #40]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1d57a:	6ace      	ldr	r6, [r1, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d57c:	4283      	cmp	r3, r0
   1d57e:	bf08      	it	eq
   1d580:	2300      	moveq	r3, #0
   1d582:	2b00      	cmp	r3, #0
   1d584:	bf38      	it	cc
   1d586:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1d588:	b1cb      	cbz	r3, 1d5be <z_impl_k_yield+0x7e>
	int32_t b1 = thread_1->base.prio;
   1d58a:	f992 700e 	ldrsb.w	r7, [r2, #14]
	int32_t b2 = thread_2->base.prio;
   1d58e:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
   1d592:	42a7      	cmp	r7, r4
   1d594:	d00f      	beq.n	1d5b6 <z_impl_k_yield+0x76>
		return b2 - b1;
   1d596:	1be4      	subs	r4, r4, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   1d598:	2c00      	cmp	r4, #0
   1d59a:	dd0c      	ble.n	1d5b6 <z_impl_k_yield+0x76>
	sys_dnode_t *const prev = successor->prev;
   1d59c:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1d59e:	e9c2 3100 	strd	r3, r1, [r2]
	prev->next = node;
   1d5a2:	600a      	str	r2, [r1, #0]
	successor->prev = node;
   1d5a4:	605a      	str	r2, [r3, #4]
		update_cache(1);
   1d5a6:	2001      	movs	r0, #1
   1d5a8:	f7ff fda4 	bl	1d0f4 <update_cache>
   1d5ac:	4628      	mov	r0, r5
}
   1d5ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1d5b2:	f7e7 bf61 	b.w	5478 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   1d5b6:	42b3      	cmp	r3, r6
   1d5b8:	d001      	beq.n	1d5be <z_impl_k_yield+0x7e>
   1d5ba:	681b      	ldr	r3, [r3, #0]
   1d5bc:	e7e4      	b.n	1d588 <z_impl_k_yield+0x48>
	node->prev = tail;
   1d5be:	e9c2 0600 	strd	r0, r6, [r2]
	tail->next = node;
   1d5c2:	6032      	str	r2, [r6, #0]
	list->tail = node;
   1d5c4:	62ca      	str	r2, [r1, #44]	; 0x2c
}
   1d5c6:	e7ee      	b.n	1d5a6 <z_impl_k_yield+0x66>
   1d5c8:	f04f 0320 	mov.w	r3, #32
   1d5cc:	f3ef 8011 	mrs	r0, BASEPRI
   1d5d0:	f383 8811 	msr	BASEPRI, r3
   1d5d4:	f3bf 8f6f 	isb	sy
   1d5d8:	e7e9      	b.n	1d5ae <z_impl_k_yield+0x6e>
   1d5da:	bf00      	nop
   1d5dc:	20002bd4 	.word	0x20002bd4
   1d5e0:	20001290 	.word	0x20001290

0001d5e4 <z_impl_k_sleep>:

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1d5e4:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1d5e8:	bf08      	it	eq
   1d5ea:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   1d5ee:	b508      	push	{r3, lr}
   1d5f0:	4602      	mov	r2, r0
   1d5f2:	460b      	mov	r3, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1d5f4:	d106      	bne.n	1d604 <z_impl_k_sleep+0x20>
		k_thread_suspend(_current);
   1d5f6:	4b0b      	ldr	r3, [pc, #44]	; (1d624 <z_impl_k_sleep+0x40>)
   1d5f8:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1d5fa:	f7ff fe25 	bl	1d248 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   1d5fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	ticks = timeout.ticks;

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   1d602:	bd08      	pop	{r3, pc}
	if (ticks == 0) {
   1d604:	4313      	orrs	r3, r2
   1d606:	d10a      	bne.n	1d61e <z_impl_k_sleep+0x3a>
	z_impl_k_yield();
   1d608:	f7ff ff9a 	bl	1d540 <z_impl_k_yield>
		return 0;
   1d60c:	2000      	movs	r0, #0
			return (t * to_hz + off) / from_hz;
   1d60e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1d612:	fb80 2303 	smull	r2, r3, r0, r3
   1d616:	0bd0      	lsrs	r0, r2, #15
   1d618:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   1d61c:	e7f1      	b.n	1d602 <z_impl_k_sleep+0x1e>
   1d61e:	f7ff fdd9 	bl	1d1d4 <z_tick_sleep.part.0>
   1d622:	e7f4      	b.n	1d60e <z_impl_k_sleep+0x2a>
   1d624:	20002bd4 	.word	0x20002bd4

0001d628 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1d628:	4b01      	ldr	r3, [pc, #4]	; (1d630 <z_impl_k_current_get+0x8>)
   1d62a:	6898      	ldr	r0, [r3, #8]
   1d62c:	4770      	bx	lr
   1d62e:	bf00      	nop
   1d630:	20002bd4 	.word	0x20002bd4

0001d634 <z_impl_k_is_preempt_thread>:
   1d634:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/k_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   1d638:	b93b      	cbnz	r3, 1d64a <z_impl_k_is_preempt_thread+0x16>
   1d63a:	4b05      	ldr	r3, [pc, #20]	; (1d650 <z_impl_k_is_preempt_thread+0x1c>)
   1d63c:	689b      	ldr	r3, [r3, #8]
   1d63e:	89d8      	ldrh	r0, [r3, #14]
   1d640:	287f      	cmp	r0, #127	; 0x7f
   1d642:	bf8c      	ite	hi
   1d644:	2000      	movhi	r0, #0
   1d646:	2001      	movls	r0, #1
   1d648:	4770      	bx	lr
   1d64a:	2000      	movs	r0, #0
}
   1d64c:	4770      	bx	lr
   1d64e:	bf00      	nop
   1d650:	20002bd4 	.word	0x20002bd4

0001d654 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   1d654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d658:	4604      	mov	r4, r0
   1d65a:	f04f 0320 	mov.w	r3, #32
   1d65e:	f3ef 8611 	mrs	r6, BASEPRI
   1d662:	f383 8811 	msr	BASEPRI, r3
   1d666:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   1d66a:	7b43      	ldrb	r3, [r0, #13]
   1d66c:	071a      	lsls	r2, r3, #28
   1d66e:	d505      	bpl.n	1d67c <z_thread_abort+0x28>
	__asm__ volatile(
   1d670:	f386 8811 	msr	BASEPRI, r6
   1d674:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   1d678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1d67c:	f023 0220 	bic.w	r2, r3, #32
   1d680:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   1d684:	09d2      	lsrs	r2, r2, #7
   1d686:	d120      	bne.n	1d6ca <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1d688:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   1d68a:	68a3      	ldr	r3, [r4, #8]
   1d68c:	b113      	cbz	r3, 1d694 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
   1d68e:	4620      	mov	r0, r4
   1d690:	f005 fc0d 	bl	22eae <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   1d694:	f104 0018 	add.w	r0, r4, #24
   1d698:	f005 fdfb 	bl	23292 <z_abort_timeout>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1d69c:	f104 0758 	add.w	r7, r4, #88	; 0x58
   1d6a0:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   1d6a4:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d6a6:	42bd      	cmp	r5, r7
   1d6a8:	d000      	beq.n	1d6ac <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1d6aa:	b9b5      	cbnz	r5, 1d6da <z_thread_abort+0x86>
		update_cache(1);
   1d6ac:	2001      	movs	r0, #1
   1d6ae:	f7ff fd21 	bl	1d0f4 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   1d6b2:	4b10      	ldr	r3, [pc, #64]	; (1d6f4 <z_thread_abort+0xa0>)
   1d6b4:	689b      	ldr	r3, [r3, #8]
   1d6b6:	42a3      	cmp	r3, r4
   1d6b8:	d1da      	bne.n	1d670 <z_thread_abort+0x1c>
   1d6ba:	f3ef 8305 	mrs	r3, IPSR
   1d6be:	2b00      	cmp	r3, #0
   1d6c0:	d1d6      	bne.n	1d670 <z_thread_abort+0x1c>
   1d6c2:	4630      	mov	r0, r6
   1d6c4:	f7e7 fed8 	bl	5478 <arch_swap>
	return ret;
   1d6c8:	e7d2      	b.n	1d670 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1d6ca:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   1d6ce:	f043 0308 	orr.w	r3, r3, #8
   1d6d2:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1d6d4:	f005 fbe3 	bl	22e9e <sys_dlist_remove>
}
   1d6d8:	e7d7      	b.n	1d68a <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
   1d6da:	4628      	mov	r0, r5
   1d6dc:	f005 fbe7 	bl	22eae <unpend_thread_no_timeout>
   1d6e0:	f105 0018 	add.w	r0, r5, #24
   1d6e4:	f005 fdd5 	bl	23292 <z_abort_timeout>
   1d6e8:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   1d6ec:	4628      	mov	r0, r5
   1d6ee:	f7ff fe79 	bl	1d3e4 <ready_thread>
   1d6f2:	e7d7      	b.n	1d6a4 <z_thread_abort+0x50>
   1d6f4:	20002bd4 	.word	0x20002bd4

0001d6f8 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   1d6f8:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1d6fa:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   1d6fe:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1d700:	e9cd 6700 	strd	r6, r7, [sp]
   1d704:	f7ff fd52 	bl	1d1ac <z_pend_curr>

	if (data != NULL) {
   1d708:	b11c      	cbz	r4, 1d712 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   1d70a:	4b03      	ldr	r3, [pc, #12]	; (1d718 <z_sched_wait+0x20>)
   1d70c:	689b      	ldr	r3, [r3, #8]
   1d70e:	695b      	ldr	r3, [r3, #20]
   1d710:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   1d712:	b002      	add	sp, #8
   1d714:	bdd0      	pop	{r4, r6, r7, pc}
   1d716:	bf00      	nop
   1d718:	20002bd4 	.word	0x20002bd4

0001d71c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1d71c:	b538      	push	{r3, r4, r5, lr}
   1d71e:	4604      	mov	r4, r0
	__asm__ volatile(
   1d720:	f04f 0320 	mov.w	r3, #32
   1d724:	f3ef 8511 	mrs	r5, BASEPRI
   1d728:	f383 8811 	msr	BASEPRI, r3
   1d72c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   1d730:	f005 fc88 	bl	23044 <z_unpend_first_thread>

	if (thread != NULL) {
   1d734:	b148      	cbz	r0, 1d74a <z_impl_k_sem_give+0x2e>
   1d736:	2200      	movs	r2, #0
   1d738:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1d73a:	f005 fc3c 	bl	22fb6 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1d73e:	4629      	mov	r1, r5
   1d740:	4808      	ldr	r0, [pc, #32]	; (1d764 <z_impl_k_sem_give+0x48>)
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   1d742:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1d746:	f7ff bcaf 	b.w	1d0a8 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1d74a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1d74e:	429a      	cmp	r2, r3
   1d750:	bf18      	it	ne
   1d752:	3301      	addne	r3, #1
   1d754:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1d756:	2102      	movs	r1, #2
   1d758:	f104 0010 	add.w	r0, r4, #16
   1d75c:	f005 ff5d 	bl	2361a <z_handle_obj_poll_events>
}
   1d760:	e7ed      	b.n	1d73e <z_impl_k_sem_give+0x22>
   1d762:	bf00      	nop
   1d764:	200032c7 	.word	0x200032c7

0001d768 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1d768:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1d76a:	4614      	mov	r4, r2
   1d76c:	461d      	mov	r5, r3
   1d76e:	f04f 0320 	mov.w	r3, #32
   1d772:	f3ef 8111 	mrs	r1, BASEPRI
   1d776:	f383 8811 	msr	BASEPRI, r3
   1d77a:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   1d77e:	6883      	ldr	r3, [r0, #8]
   1d780:	b143      	cbz	r3, 1d794 <z_impl_k_sem_take+0x2c>
		sem->count--;
   1d782:	3b01      	subs	r3, #1
   1d784:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   1d786:	f381 8811 	msr	BASEPRI, r1
   1d78a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1d78e:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   1d790:	b003      	add	sp, #12
   1d792:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1d794:	ea54 0305 	orrs.w	r3, r4, r5
   1d798:	d106      	bne.n	1d7a8 <z_impl_k_sem_take+0x40>
   1d79a:	f381 8811 	msr	BASEPRI, r1
   1d79e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1d7a2:	f06f 000f 	mvn.w	r0, #15
   1d7a6:	e7f3      	b.n	1d790 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1d7a8:	4602      	mov	r2, r0
   1d7aa:	e9cd 4500 	strd	r4, r5, [sp]
   1d7ae:	4802      	ldr	r0, [pc, #8]	; (1d7b8 <z_impl_k_sem_take+0x50>)
   1d7b0:	f7ff fcfc 	bl	1d1ac <z_pend_curr>
	return ret;
   1d7b4:	e7ec      	b.n	1d790 <z_impl_k_sem_take+0x28>
   1d7b6:	bf00      	nop
   1d7b8:	200032c7 	.word	0x200032c7

0001d7bc <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1d7bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   1d7be:	4b09      	ldr	r3, [pc, #36]	; (1d7e4 <k_sys_work_q_init+0x28>)
   1d7c0:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   1d7c2:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   1d7c4:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   1d7c6:	9300      	str	r3, [sp, #0]
   1d7c8:	4907      	ldr	r1, [pc, #28]	; (1d7e8 <k_sys_work_q_init+0x2c>)
   1d7ca:	4808      	ldr	r0, [pc, #32]	; (1d7ec <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   1d7cc:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   1d7d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d7d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1d7d8:	f000 f9de 	bl	1db98 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   1d7dc:	4620      	mov	r0, r4
   1d7de:	b004      	add	sp, #16
   1d7e0:	bd10      	pop	{r4, pc}
   1d7e2:	bf00      	nop
   1d7e4:	00027575 	.word	0x00027575
   1d7e8:	200050b8 	.word	0x200050b8
   1d7ec:	20001390 	.word	0x20001390

0001d7f0 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1d7f0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   1d7f4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1d7f6:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1d7f8:	2604      	movs	r6, #4
   1d7fa:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   1d7fc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   1d7fe:	7386      	strb	r6, [r0, #14]
	sys_dlist_init(&w->waitq);
   1d800:	f100 0558 	add.w	r5, r0, #88	; 0x58
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1d804:	1dd6      	adds	r6, r2, #7
	list->tail = (sys_dnode_t *)list;
   1d806:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1d80a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   1d80c:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1d80e:	f026 0607 	bic.w	r6, r6, #7
	node->prev = NULL;
   1d812:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   1d816:	e9c0 161a 	strd	r1, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   1d81a:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   1d81c:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   1d81e:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1d820:	9202      	str	r2, [sp, #8]
   1d822:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1d824:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   1d826:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1d82a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1d82c:	9200      	str	r2, [sp, #0]
   1d82e:	4642      	mov	r2, r8
{
   1d830:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1d832:	f7e7 fec7 	bl	55c4 <arch_new_thread>
	if (!_current) {
   1d836:	4b05      	ldr	r3, [pc, #20]	; (1d84c <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
   1d838:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   1d83a:	689b      	ldr	r3, [r3, #8]
   1d83c:	b103      	cbz	r3, 1d840 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
   1d83e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   1d840:	6763      	str	r3, [r4, #116]	; 0x74
}
   1d842:	4640      	mov	r0, r8
   1d844:	b004      	add	sp, #16
   1d846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d84a:	bf00      	nop
   1d84c:	20002bd4 	.word	0x20002bd4

0001d850 <z_impl_k_thread_create>:
{
   1d850:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d852:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1d854:	2500      	movs	r5, #0
   1d856:	9505      	str	r5, [sp, #20]
   1d858:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1d85a:	9504      	str	r5, [sp, #16]
   1d85c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   1d85e:	9503      	str	r5, [sp, #12]
   1d860:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1d862:	9502      	str	r5, [sp, #8]
{
   1d864:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1d868:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1d86a:	9501      	str	r5, [sp, #4]
   1d86c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1d86e:	9500      	str	r5, [sp, #0]
{
   1d870:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1d872:	f7ff ffbd 	bl	1d7f0 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1d876:	1c7b      	adds	r3, r7, #1
   1d878:	bf08      	it	eq
   1d87a:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   1d87e:	d005      	beq.n	1d88c <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1d880:	ea56 0307 	orrs.w	r3, r6, r7
   1d884:	d105      	bne.n	1d892 <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
   1d886:	4620      	mov	r0, r4
   1d888:	f7ff fde4 	bl	1d454 <z_sched_start>
}
   1d88c:	4620      	mov	r0, r4
   1d88e:	b007      	add	sp, #28
   1d890:	bdf0      	pop	{r4, r5, r6, r7, pc}
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1d892:	4904      	ldr	r1, [pc, #16]	; (1d8a4 <z_impl_k_thread_create+0x54>)
   1d894:	4632      	mov	r2, r6
   1d896:	463b      	mov	r3, r7
   1d898:	f104 0018 	add.w	r0, r4, #24
   1d89c:	f000 fa58 	bl	1dd50 <z_add_timeout>
   1d8a0:	e7f4      	b.n	1d88c <z_impl_k_thread_create+0x3c>
   1d8a2:	bf00      	nop
   1d8a4:	00022fd7 	.word	0x00022fd7

0001d8a8 <z_init_static_threads>:
{
   1d8a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   1d8ac:	4e2a      	ldr	r6, [pc, #168]	; (1d958 <z_init_static_threads+0xb0>)
   1d8ae:	4d2b      	ldr	r5, [pc, #172]	; (1d95c <z_init_static_threads+0xb4>)
{
   1d8b0:	b086      	sub	sp, #24
   1d8b2:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
   1d8b4:	42b5      	cmp	r5, r6
   1d8b6:	f105 0430 	add.w	r4, r5, #48	; 0x30
   1d8ba:	d310      	bcc.n	1d8de <z_init_static_threads+0x36>
	k_sched_lock();
   1d8bc:	f7ff fc06 	bl	1d0cc <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1d8c0:	4c26      	ldr	r4, [pc, #152]	; (1d95c <z_init_static_threads+0xb4>)
   1d8c2:	f8df a09c 	ldr.w	sl, [pc, #156]	; 1d960 <z_init_static_threads+0xb8>
   1d8c6:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   1d8ca:	f240 36e7 	movw	r6, #999	; 0x3e7
   1d8ce:	2700      	movs	r7, #0
   1d8d0:	4544      	cmp	r4, r8
   1d8d2:	d321      	bcc.n	1d918 <z_init_static_threads+0x70>
}
   1d8d4:	b006      	add	sp, #24
   1d8d6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   1d8da:	f7ff bce7 	b.w	1d2ac <k_sched_unlock>
		z_setup_new_thread(
   1d8de:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1d8e2:	9305      	str	r3, [sp, #20]
   1d8e4:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1d8e8:	9304      	str	r3, [sp, #16]
   1d8ea:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1d8ee:	9303      	str	r3, [sp, #12]
   1d8f0:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1d8f4:	9302      	str	r3, [sp, #8]
   1d8f6:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1d8fa:	9301      	str	r3, [sp, #4]
   1d8fc:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1d900:	9300      	str	r3, [sp, #0]
   1d902:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1d906:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1d90a:	f7ff ff71 	bl	1d7f0 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1d90e:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1d912:	655d      	str	r5, [r3, #84]	; 0x54
   1d914:	4625      	mov	r5, r4
   1d916:	e7cd      	b.n	1d8b4 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1d918:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d91a:	1c5a      	adds	r2, r3, #1
   1d91c:	d00d      	beq.n	1d93a <z_init_static_threads+0x92>
					    K_MSEC(thread_data->init_delay));
   1d91e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1d922:	4630      	mov	r0, r6
   1d924:	4639      	mov	r1, r7
   1d926:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1d92a:	42b9      	cmp	r1, r7
   1d92c:	bf08      	it	eq
   1d92e:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
   1d930:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1d932:	d104      	bne.n	1d93e <z_init_static_threads+0x96>
	z_sched_start(thread);
   1d934:	4628      	mov	r0, r5
   1d936:	f7ff fd8d 	bl	1d454 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1d93a:	3430      	adds	r4, #48	; 0x30
   1d93c:	e7c8      	b.n	1d8d0 <z_init_static_threads+0x28>
   1d93e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1d942:	2300      	movs	r3, #0
   1d944:	f7e3 f87a 	bl	a3c <__aeabi_uldivmod>
   1d948:	4602      	mov	r2, r0
   1d94a:	460b      	mov	r3, r1
   1d94c:	f105 0018 	add.w	r0, r5, #24
   1d950:	4651      	mov	r1, sl
   1d952:	f000 f9fd 	bl	1dd50 <z_add_timeout>
   1d956:	e7f0      	b.n	1d93a <z_init_static_threads+0x92>
   1d958:	200007b0 	.word	0x200007b0
   1d95c:	200007b0 	.word	0x200007b0
   1d960:	00022fd7 	.word	0x00022fd7

0001d964 <submit_to_queue_locked>:
 * @retval -EINVAL if no queue is provided
 * @retval -ENODEV if the queue is not started
 */
static int submit_to_queue_locked(struct k_work *work,
				  struct k_work_q **queuep)
{
   1d964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int ret = 0;

	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1d966:	68c3      	ldr	r3, [r0, #12]
   1d968:	079a      	lsls	r2, r3, #30
{
   1d96a:	4604      	mov	r4, r0
   1d96c:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1d96e:	f3c3 0540 	ubfx	r5, r3, #1, #1
   1d972:	d41f      	bmi.n	1d9b4 <submit_to_queue_locked+0x50>
		/* Disallowed */
		ret = -EBUSY;
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   1d974:	075f      	lsls	r7, r3, #29
   1d976:	d41f      	bmi.n	1d9b8 <submit_to_queue_locked+0x54>
		/* Not currently queued */
		ret = 1;

		/* If no queue specified resubmit to last queue.
		 */
		if (*queuep == NULL) {
   1d978:	680a      	ldr	r2, [r1, #0]
   1d97a:	b90a      	cbnz	r2, 1d980 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   1d97c:	6882      	ldr	r2, [r0, #8]
   1d97e:	600a      	str	r2, [r1, #0]

		/* If the work is currently running we have to use the
		 * queue it's running on to prevent handler
		 * re-entrancy.
		 */
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   1d980:	07d8      	lsls	r0, r3, #31
			__ASSERT_NO_MSG(work->queue != NULL);
			*queuep = work->queue;
   1d982:	bf44      	itt	mi
   1d984:	68a3      	ldrmi	r3, [r4, #8]
   1d986:	6033      	strmi	r3, [r6, #0]
			ret = 2;
		}

		int rc = queue_submit_locked(*queuep, work);
   1d988:	6837      	ldr	r7, [r6, #0]
			ret = 2;
   1d98a:	bf4c      	ite	mi
   1d98c:	2502      	movmi	r5, #2
		ret = 1;
   1d98e:	2501      	movpl	r5, #1
	if (queue == NULL) {
   1d990:	b37f      	cbz	r7, 1d9f2 <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1d992:	4b1b      	ldr	r3, [pc, #108]	; (1da00 <submit_to_queue_locked+0x9c>)
   1d994:	689b      	ldr	r3, [r3, #8]
   1d996:	42bb      	cmp	r3, r7
   1d998:	d111      	bne.n	1d9be <submit_to_queue_locked+0x5a>
   1d99a:	f005 fba8 	bl	230ee <k_is_in_isr>
   1d99e:	f080 0001 	eor.w	r0, r0, #1
   1d9a2:	b2c0      	uxtb	r0, r0
	bool draining = flag_test(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
   1d9a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1d9a8:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   1d9aa:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1d9ae:	d523      	bpl.n	1d9f8 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
   1d9b0:	b13a      	cbz	r2, 1d9c2 <submit_to_queue_locked+0x5e>
   1d9b2:	b940      	cbnz	r0, 1d9c6 <submit_to_queue_locked+0x62>
		ret = -EBUSY;
   1d9b4:	f06f 050f 	mvn.w	r5, #15
	} else {
		/* Already queued, do nothing. */
	}

	if (ret <= 0) {
		*queuep = NULL;
   1d9b8:	2300      	movs	r3, #0
   1d9ba:	6033      	str	r3, [r6, #0]
	}

	return ret;
   1d9bc:	e013      	b.n	1d9e6 <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1d9be:	2000      	movs	r0, #0
   1d9c0:	e7f0      	b.n	1d9a4 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
   1d9c2:	071b      	lsls	r3, r3, #28
   1d9c4:	d4f6      	bmi.n	1d9b4 <submit_to_queue_locked+0x50>
	parent->next = child;
   1d9c6:	2300      	movs	r3, #0
   1d9c8:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   1d9ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   1d9ce:	b963      	cbnz	r3, 1d9ea <submit_to_queue_locked+0x86>
	list->head = node;
   1d9d0:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   1d9d4:	4638      	mov	r0, r7
   1d9d6:	f005 fb9b 	bl	23110 <notify_queue_locked>
	*flagp |= BIT(bit);
   1d9da:	68e3      	ldr	r3, [r4, #12]
   1d9dc:	f043 0304 	orr.w	r3, r3, #4
   1d9e0:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   1d9e2:	6833      	ldr	r3, [r6, #0]
   1d9e4:	60a3      	str	r3, [r4, #8]
}
   1d9e6:	4628      	mov	r0, r5
   1d9e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   1d9ea:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1d9ec:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   1d9f0:	e7f0      	b.n	1d9d4 <submit_to_queue_locked+0x70>
		return -EINVAL;
   1d9f2:	f06f 0515 	mvn.w	r5, #21
   1d9f6:	e7df      	b.n	1d9b8 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
   1d9f8:	f06f 0512 	mvn.w	r5, #18
   1d9fc:	e7dc      	b.n	1d9b8 <submit_to_queue_locked+0x54>
   1d9fe:	bf00      	nop
   1da00:	20002bd4 	.word	0x20002bd4

0001da04 <finalize_cancel_locked>:
	*flagp &= ~BIT(bit);
   1da04:	68c3      	ldr	r3, [r0, #12]
{
   1da06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1da0a:	4c17      	ldr	r4, [pc, #92]	; (1da68 <finalize_cancel_locked+0x64>)
	*flagp &= ~BIT(bit);
   1da0c:	f023 0302 	bic.w	r3, r3, #2
{
   1da10:	4607      	mov	r7, r0
	*flagp &= ~BIT(bit);
   1da12:	60c3      	str	r3, [r0, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1da14:	6820      	ldr	r0, [r4, #0]
   1da16:	b320      	cbz	r0, 1da62 <finalize_cancel_locked+0x5e>
	return node->next;
   1da18:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1da1a:	2600      	movs	r6, #0
   1da1c:	2d00      	cmp	r5, #0
   1da1e:	bf38      	it	cc
   1da20:	2500      	movcc	r5, #0
	parent->next = child;
   1da22:	46b0      	mov	r8, r6
		if (wc->work == work) {
   1da24:	6842      	ldr	r2, [r0, #4]
   1da26:	42ba      	cmp	r2, r7
   1da28:	4603      	mov	r3, r0
   1da2a:	d10b      	bne.n	1da44 <finalize_cancel_locked+0x40>
Z_GENLIST_REMOVE(slist, snode)
   1da2c:	6803      	ldr	r3, [r0, #0]
   1da2e:	b996      	cbnz	r6, 1da56 <finalize_cancel_locked+0x52>
   1da30:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   1da32:	6023      	str	r3, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1da34:	4290      	cmp	r0, r2
   1da36:	d100      	bne.n	1da3a <finalize_cancel_locked+0x36>
	list->tail = node;
   1da38:	6063      	str	r3, [r4, #4]
	parent->next = child;
   1da3a:	f840 8b08 	str.w	r8, [r0], #8
	z_impl_k_sem_give(sem);
   1da3e:	f7ff fe6d 	bl	1d71c <z_impl_k_sem_give>
}
   1da42:	4633      	mov	r3, r6
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1da44:	b16d      	cbz	r5, 1da62 <finalize_cancel_locked+0x5e>
	return node->next;
   1da46:	682a      	ldr	r2, [r5, #0]
   1da48:	2a00      	cmp	r2, #0
   1da4a:	bf38      	it	cc
   1da4c:	2200      	movcc	r2, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1da4e:	4628      	mov	r0, r5
   1da50:	461e      	mov	r6, r3
   1da52:	4615      	mov	r5, r2
   1da54:	e7e6      	b.n	1da24 <finalize_cancel_locked+0x20>
	parent->next = child;
   1da56:	6033      	str	r3, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   1da58:	6863      	ldr	r3, [r4, #4]
   1da5a:	4298      	cmp	r0, r3
	list->tail = node;
   1da5c:	bf08      	it	eq
   1da5e:	6066      	streq	r6, [r4, #4]
}
   1da60:	e7eb      	b.n	1da3a <finalize_cancel_locked+0x36>
}
   1da62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1da66:	bf00      	nop
   1da68:	20002c10 	.word	0x20002c10

0001da6c <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   1da6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   1da70:	f8df 9120 	ldr.w	r9, [pc, #288]	; 1db94 <work_queue_main+0x128>
{
   1da74:	b087      	sub	sp, #28
   1da76:	4604      	mov	r4, r0
					   K_FOREVER, NULL);
   1da78:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1da7c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   1da80:	f100 0888 	add.w	r8, r0, #136	; 0x88
	__asm__ volatile(
   1da84:	f04f 0320 	mov.w	r3, #32
   1da88:	f3ef 8a11 	mrs	sl, BASEPRI
   1da8c:	f383 8811 	msr	BASEPRI, r3
   1da90:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   1da94:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
	return list->head;
   1da98:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
Z_GENLIST_GET(slist, snode)
   1da9c:	b9c5      	cbnz	r5, 1dad0 <work_queue_main+0x64>
	*flagp &= ~BIT(bit);
   1da9e:	f023 0204 	bic.w	r2, r3, #4
		} else if (flag_test_and_clear(&queue->flags,
   1daa2:	0759      	lsls	r1, r3, #29
	*flagp &= ~BIT(bit);
   1daa4:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
		} else if (flag_test_and_clear(&queue->flags,
   1daa8:	d508      	bpl.n	1dabc <work_queue_main+0x50>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   1daaa:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   1daae:	2200      	movs	r2, #0
   1dab0:	2101      	movs	r1, #1
   1dab2:	4628      	mov	r0, r5
   1dab4:	f005 faee 	bl	23094 <z_sched_wake>
   1dab8:	2800      	cmp	r0, #0
   1daba:	d1f8      	bne.n	1daae <work_queue_main+0x42>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   1dabc:	2300      	movs	r3, #0
   1dabe:	e9cd 6700 	strd	r6, r7, [sp]
   1dac2:	9302      	str	r3, [sp, #8]
   1dac4:	4642      	mov	r2, r8
   1dac6:	4651      	mov	r1, sl
   1dac8:	4648      	mov	r0, r9
   1daca:	f7ff fe15 	bl	1d6f8 <z_sched_wait>
			continue;
   1dace:	e7d9      	b.n	1da84 <work_queue_main+0x18>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1dad0:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
   1dad4:	6829      	ldr	r1, [r5, #0]
	list->head = node;
   1dad6:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1dada:	4295      	cmp	r5, r2
   1dadc:	d101      	bne.n	1dae2 <work_queue_main+0x76>
	list->tail = node;
   1dade:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   1dae2:	f043 0302 	orr.w	r3, r3, #2
   1dae6:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   1daea:	f38a 8811 	msr	BASEPRI, sl
   1daee:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		if (work != NULL) {
			bool yield;
			k_work_handler_t handler = work->handler;
   1daf2:	f8d5 a004 	ldr.w	sl, [r5, #4]
	__asm__ volatile(
   1daf6:	f04f 0320 	mov.w	r3, #32
   1dafa:	f3ef 8b11 	mrs	fp, BASEPRI
   1dafe:	f383 8811 	msr	BASEPRI, r3
   1db02:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   1db06:	68eb      	ldr	r3, [r5, #12]
   1db08:	f023 0304 	bic.w	r3, r3, #4
	return (*flagp & BIT(bit)) != 0U;
   1db0c:	f3c3 0140 	ubfx	r1, r3, #1, #1
	*flagp &= ~BIT(bit);
   1db10:	60eb      	str	r3, [r5, #12]
	if (ret) {
   1db12:	f081 0201 	eor.w	r2, r1, #1
   1db16:	b129      	cbz	r1, 1db24 <work_queue_main+0xb8>
		finalize_cancel_locked(work);
   1db18:	4628      	mov	r0, r5
   1db1a:	9205      	str	r2, [sp, #20]
   1db1c:	f7ff ff72 	bl	1da04 <finalize_cancel_locked>
   1db20:	9a05      	ldr	r2, [sp, #20]
   1db22:	e002      	b.n	1db2a <work_queue_main+0xbe>
	*flagp |= BIT(bit);
   1db24:	f043 0301 	orr.w	r3, r3, #1
   1db28:	60eb      	str	r3, [r5, #12]
	__asm__ volatile(
   1db2a:	f38b 8811 	msr	BASEPRI, fp
   1db2e:	f3bf 8f6f 	isb	sy

			__ASSERT_NO_MSG(handler != 0);

			if (work_set_running(work, queue)) {
   1db32:	b9b2      	cbnz	r2, 1db62 <work_queue_main+0xf6>
	__asm__ volatile(
   1db34:	f04f 0320 	mov.w	r3, #32
   1db38:	f3ef 8211 	mrs	r2, BASEPRI
   1db3c:	f383 8811 	msr	BASEPRI, r3
   1db40:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   1db44:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1db48:	f023 0302 	bic.w	r3, r3, #2
   1db4c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   1db50:	f382 8811 	msr	BASEPRI, r2
   1db54:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&lock, key);

			/* Optionally yield to prevent the work queue from
			 * starving other threads.
			 */
			if (yield) {
   1db58:	05db      	lsls	r3, r3, #23
   1db5a:	d493      	bmi.n	1da84 <work_queue_main+0x18>
	z_impl_k_yield();
   1db5c:	f7ff fcf0 	bl	1d540 <z_impl_k_yield>
}
   1db60:	e790      	b.n	1da84 <work_queue_main+0x18>
				handler(work);
   1db62:	4628      	mov	r0, r5
   1db64:	47d0      	blx	sl
	__asm__ volatile(
   1db66:	f04f 0320 	mov.w	r3, #32
   1db6a:	f3ef 8a11 	mrs	sl, BASEPRI
   1db6e:	f383 8811 	msr	BASEPRI, r3
   1db72:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   1db76:	68eb      	ldr	r3, [r5, #12]
   1db78:	f023 0301 	bic.w	r3, r3, #1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1db7c:	079a      	lsls	r2, r3, #30
	*flagp &= ~BIT(bit);
   1db7e:	60eb      	str	r3, [r5, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1db80:	d502      	bpl.n	1db88 <work_queue_main+0x11c>
		finalize_cancel_locked(work);
   1db82:	4628      	mov	r0, r5
   1db84:	f7ff ff3e 	bl	1da04 <finalize_cancel_locked>
	__asm__ volatile(
   1db88:	f38a 8811 	msr	BASEPRI, sl
   1db8c:	f3bf 8f6f 	isb	sy
}
   1db90:	e7d0      	b.n	1db34 <work_queue_main+0xc8>
   1db92:	bf00      	nop
   1db94:	200032c7 	.word	0x200032c7

0001db98 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   1db98:	b5f0      	push	{r4, r5, r6, r7, lr}
   1db9a:	b089      	sub	sp, #36	; 0x24
   1db9c:	4604      	mov	r4, r0
	list->head = NULL;
   1db9e:	2000      	movs	r0, #0
	list->tail = NULL;
   1dba0:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   1dba4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1dba6:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   1dbaa:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   1dbae:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1dbb2:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   1dbb6:	b31d      	cbz	r5, 1dc00 <k_work_queue_start+0x68>
   1dbb8:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   1dbba:	2800      	cmp	r0, #0
   1dbbc:	f240 1001 	movw	r0, #257	; 0x101
   1dbc0:	bf08      	it	eq
   1dbc2:	2001      	moveq	r0, #1
	*flagp = flags;
   1dbc4:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1dbc8:	2000      	movs	r0, #0
   1dbca:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1dbce:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1dbd2:	e9cd 3003 	strd	r3, r0, [sp, #12]
   1dbd6:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1dbda:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1dbde:	4b09      	ldr	r3, [pc, #36]	; (1dc04 <k_work_queue_start+0x6c>)
   1dbe0:	9400      	str	r4, [sp, #0]
   1dbe2:	4620      	mov	r0, r4
   1dbe4:	f7ff fe34 	bl	1d850 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   1dbe8:	b125      	cbz	r5, 1dbf4 <k_work_queue_start+0x5c>
   1dbea:	6829      	ldr	r1, [r5, #0]
   1dbec:	b111      	cbz	r1, 1dbf4 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   1dbee:	4620      	mov	r0, r4
   1dbf0:	f005 fa87 	bl	23102 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   1dbf4:	4620      	mov	r0, r4
		k_thread_name_set(&queue->thread, cfg->name);
	}

	k_thread_start(&queue->thread);
}
   1dbf6:	b009      	add	sp, #36	; 0x24
   1dbf8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1dbfc:	f005 ba86 	b.w	2310c <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   1dc00:	2001      	movs	r0, #1
   1dc02:	e7df      	b.n	1dbc4 <k_work_queue_start+0x2c>
   1dc04:	0001da6d 	.word	0x0001da6d

0001dc08 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   1dc08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1dc0a:	460c      	mov	r4, r1
   1dc0c:	9001      	str	r0, [sp, #4]
   1dc0e:	4616      	mov	r6, r2
   1dc10:	461f      	mov	r7, r3
	__asm__ volatile(
   1dc12:	f04f 0320 	mov.w	r3, #32
   1dc16:	f3ef 8511 	mrs	r5, BASEPRI
   1dc1a:	f383 8811 	msr	BASEPRI, r3
   1dc1e:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   1dc22:	4608      	mov	r0, r1
   1dc24:	f005 fa7b 	bl	2311e <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1dc28:	ea56 0307 	orrs.w	r3, r6, r7
   1dc2c:	d109      	bne.n	1dc42 <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   1dc2e:	a901      	add	r1, sp, #4
   1dc30:	4620      	mov	r0, r4
   1dc32:	f7ff fe97 	bl	1d964 <submit_to_queue_locked>
	__asm__ volatile(
   1dc36:	f385 8811 	msr	BASEPRI, r5
   1dc3a:	f3bf 8f6f 	isb	sy
	ret = schedule_for_queue_locked(&queue, dwork, delay);

	k_spin_unlock(&lock, key);

	return ret;
}
   1dc3e:	b003      	add	sp, #12
   1dc40:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   1dc42:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1dc44:	4906      	ldr	r1, [pc, #24]	; (1dc60 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   1dc46:	f043 0308 	orr.w	r3, r3, #8
   1dc4a:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   1dc4c:	9b01      	ldr	r3, [sp, #4]
   1dc4e:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1dc50:	f104 0010 	add.w	r0, r4, #16
   1dc54:	4632      	mov	r2, r6
   1dc56:	463b      	mov	r3, r7
   1dc58:	f000 f87a 	bl	1dd50 <z_add_timeout>
	return ret;
   1dc5c:	2001      	movs	r0, #1
   1dc5e:	e7ea      	b.n	1dc36 <k_work_reschedule_for_queue+0x2e>
   1dc60:	000231a1 	.word	0x000231a1

0001dc64 <boot_banner>:
#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
	       STRINGIFY(BUILD_VERSION), BOOT_DELAY_BANNER);
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
   1dc64:	4a02      	ldr	r2, [pc, #8]	; (1dc70 <boot_banner+0xc>)
   1dc66:	4903      	ldr	r1, [pc, #12]	; (1dc74 <boot_banner+0x10>)
   1dc68:	4803      	ldr	r0, [pc, #12]	; (1dc78 <boot_banner+0x14>)
   1dc6a:	f000 bb8b 	b.w	1e384 <printk>
   1dc6e:	bf00      	nop
   1dc70:	0002561a 	.word	0x0002561a
   1dc74:	0002757e 	.word	0x0002757e
   1dc78:	00027585 	.word	0x00027585

0001dc7c <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1dc7c:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1dc7e:	4806      	ldr	r0, [pc, #24]	; (1dc98 <z_data_copy+0x1c>)
   1dc80:	4a06      	ldr	r2, [pc, #24]	; (1dc9c <z_data_copy+0x20>)
   1dc82:	4907      	ldr	r1, [pc, #28]	; (1dca0 <z_data_copy+0x24>)
   1dc84:	1a12      	subs	r2, r2, r0
   1dc86:	f005 fcec 	bl	23662 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1dc8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1dc8e:	4a05      	ldr	r2, [pc, #20]	; (1dca4 <z_data_copy+0x28>)
   1dc90:	4905      	ldr	r1, [pc, #20]	; (1dca8 <z_data_copy+0x2c>)
   1dc92:	4806      	ldr	r0, [pc, #24]	; (1dcac <z_data_copy+0x30>)
   1dc94:	f005 bce5 	b.w	23662 <memcpy>
   1dc98:	20000000 	.word	0x20000000
   1dc9c:	200009d0 	.word	0x200009d0
   1dca0:	000276b0 	.word	0x000276b0
   1dca4:	00000000 	.word	0x00000000
   1dca8:	000276b0 	.word	0x000276b0
   1dcac:	20000000 	.word	0x20000000

0001dcb0 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1dcb0:	4b03      	ldr	r3, [pc, #12]	; (1dcc0 <elapsed+0x10>)
   1dcb2:	681b      	ldr	r3, [r3, #0]
   1dcb4:	b90b      	cbnz	r3, 1dcba <elapsed+0xa>
   1dcb6:	f7e7 b95f 	b.w	4f78 <sys_clock_elapsed>
}
   1dcba:	2000      	movs	r0, #0
   1dcbc:	4770      	bx	lr
   1dcbe:	bf00      	nop
   1dcc0:	20002c18 	.word	0x20002c18

0001dcc4 <remove_timeout>:
{
   1dcc4:	b530      	push	{r4, r5, lr}
   1dcc6:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1dcc8:	b168      	cbz	r0, 1dce6 <remove_timeout+0x22>
   1dcca:	4a0a      	ldr	r2, [pc, #40]	; (1dcf4 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   1dccc:	6852      	ldr	r2, [r2, #4]
   1dcce:	4290      	cmp	r0, r2
   1dcd0:	d009      	beq.n	1dce6 <remove_timeout+0x22>
	if (next(t) != NULL) {
   1dcd2:	b143      	cbz	r3, 1dce6 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   1dcd4:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1dcd8:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1dcdc:	1912      	adds	r2, r2, r4
   1dcde:	eb45 0101 	adc.w	r1, r5, r1
   1dce2:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   1dce6:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   1dce8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1dcea:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1dcec:	2300      	movs	r3, #0
	node->prev = NULL;
   1dcee:	e9c0 3300 	strd	r3, r3, [r0]
}
   1dcf2:	bd30      	pop	{r4, r5, pc}
   1dcf4:	20000630 	.word	0x20000630

0001dcf8 <next_timeout>:

static int32_t next_timeout(void)
{
   1dcf8:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   1dcfa:	4b13      	ldr	r3, [pc, #76]	; (1dd48 <next_timeout+0x50>)
   1dcfc:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1dcfe:	429c      	cmp	r4, r3
   1dd00:	bf08      	it	eq
   1dd02:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1dd04:	f7ff ffd4 	bl	1dcb0 <elapsed>
   1dd08:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
   1dd0a:	b1bc      	cbz	r4, 1dd3c <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1dd0c:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   1dd10:	1b40      	subs	r0, r0, r5
   1dd12:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   1dd16:	2801      	cmp	r0, #1
   1dd18:	f171 0300 	sbcs.w	r3, r1, #0
   1dd1c:	db11      	blt.n	1dd42 <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1dd1e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1dd22:	2300      	movs	r3, #0
   1dd24:	4282      	cmp	r2, r0
   1dd26:	eb73 0401 	sbcs.w	r4, r3, r1
   1dd2a:	da00      	bge.n	1dd2e <next_timeout+0x36>
   1dd2c:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1dd2e:	4b07      	ldr	r3, [pc, #28]	; (1dd4c <next_timeout+0x54>)
   1dd30:	691b      	ldr	r3, [r3, #16]
   1dd32:	b113      	cbz	r3, 1dd3a <next_timeout+0x42>
   1dd34:	4298      	cmp	r0, r3
   1dd36:	bfa8      	it	ge
   1dd38:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1dd3a:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   1dd3c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1dd40:	e7f5      	b.n	1dd2e <next_timeout+0x36>
   1dd42:	2000      	movs	r0, #0
   1dd44:	e7f3      	b.n	1dd2e <next_timeout+0x36>
   1dd46:	bf00      	nop
   1dd48:	20000630 	.word	0x20000630
   1dd4c:	20002bd4 	.word	0x20002bd4

0001dd50 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   1dd50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1dd54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1dd58:	bf08      	it	eq
   1dd5a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   1dd5e:	b085      	sub	sp, #20
   1dd60:	4604      	mov	r4, r0
   1dd62:	4692      	mov	sl, r2
   1dd64:	469b      	mov	fp, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1dd66:	d070      	beq.n	1de4a <z_add_timeout+0xfa>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	k_ticks_t ticks = timeout.ticks + 1;
   1dd68:	1c56      	adds	r6, r2, #1

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   1dd6a:	f06f 0501 	mvn.w	r5, #1
	k_ticks_t ticks = timeout.ticks + 1;
   1dd6e:	f143 0700 	adc.w	r7, r3, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   1dd72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1dd76:	ebb5 0806 	subs.w	r8, r5, r6
   1dd7a:	eb63 0907 	sbc.w	r9, r3, r7
   1dd7e:	f1b8 0f00 	cmp.w	r8, #0
   1dd82:	f179 0300 	sbcs.w	r3, r9, #0
   1dd86:	db16      	blt.n	1ddb6 <z_add_timeout+0x66>
		ticks = Z_TICK_ABS(timeout.ticks) - (curr_tick + elapsed());
   1dd88:	4e36      	ldr	r6, [pc, #216]	; (1de64 <z_add_timeout+0x114>)
   1dd8a:	9103      	str	r1, [sp, #12]
   1dd8c:	f7ff ff90 	bl	1dcb0 <elapsed>
   1dd90:	e9d6 2600 	ldrd	r2, r6, [r6]
   1dd94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1dd98:	1aad      	subs	r5, r5, r2
   1dd9a:	eb63 0306 	sbc.w	r3, r3, r6
   1dd9e:	ebb5 020a 	subs.w	r2, r5, sl
   1dda2:	eb63 030b 	sbc.w	r3, r3, fp
   1dda6:	9200      	str	r2, [sp, #0]
   1dda8:	9301      	str	r3, [sp, #4]
   1ddaa:	e9dd 6700 	ldrd	r6, r7, [sp]
   1ddae:	9903      	ldr	r1, [sp, #12]
   1ddb0:	1a36      	subs	r6, r6, r0
   1ddb2:	eb67 77e0 	sbc.w	r7, r7, r0, asr #31
	}

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1ddb6:	60a1      	str	r1, [r4, #8]
	__asm__ volatile(
   1ddb8:	f04f 0320 	mov.w	r3, #32
   1ddbc:	f3ef 8511 	mrs	r5, BASEPRI
   1ddc0:	f383 8811 	msr	BASEPRI, r3
   1ddc4:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   1ddc8:	f7ff ff72 	bl	1dcb0 <elapsed>
	ticks = MAX(1, ticks);
   1ddcc:	2e01      	cmp	r6, #1
	return list->head == list;
   1ddce:	4a26      	ldr	r2, [pc, #152]	; (1de68 <z_add_timeout+0x118>)
   1ddd0:	f177 0300 	sbcs.w	r3, r7, #0
   1ddd4:	bfb8      	it	lt
   1ddd6:	2601      	movlt	r6, #1
   1ddd8:	6813      	ldr	r3, [r2, #0]
   1ddda:	bfb8      	it	lt
   1dddc:	2700      	movlt	r7, #0
		to->dticks = ticks + elapsed();
   1ddde:	1836      	adds	r6, r6, r0
   1dde0:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1dde4:	4293      	cmp	r3, r2
   1dde6:	e9c4 6704 	strd	r6, r7, [r4, #16]
   1ddea:	d002      	beq.n	1ddf2 <z_add_timeout+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1ddec:	f8d2 c004 	ldr.w	ip, [r2, #4]
		for (t = first(); t != NULL; t = next(t)) {
   1ddf0:	b92b      	cbnz	r3, 1ddfe <z_add_timeout+0xae>
	sys_dnode_t *const tail = list->tail;
   1ddf2:	6853      	ldr	r3, [r2, #4]
	node->prev = tail;
   1ddf4:	e9c4 2300 	strd	r2, r3, [r4]
	tail->next = node;
   1ddf8:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1ddfa:	6054      	str	r4, [r2, #4]
}
   1ddfc:	e012      	b.n	1de24 <z_add_timeout+0xd4>
			if (t->dticks > to->dticks) {
   1ddfe:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
   1de02:	e9d4 6704 	ldrd	r6, r7, [r4, #16]
   1de06:	4546      	cmp	r6, r8
   1de08:	eb77 0109 	sbcs.w	r1, r7, r9
   1de0c:	da20      	bge.n	1de50 <z_add_timeout+0x100>
				t->dticks -= to->dticks;
   1de0e:	ebb8 0006 	subs.w	r0, r8, r6
   1de12:	eb69 0107 	sbc.w	r1, r9, r7
   1de16:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   1de1a:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1de1c:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   1de20:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   1de22:	605c      	str	r4, [r3, #4]
	return list->head == list;
   1de24:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1de26:	4293      	cmp	r3, r2
   1de28:	d00b      	beq.n	1de42 <z_add_timeout+0xf2>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1de2a:	429c      	cmp	r4, r3
   1de2c:	d109      	bne.n	1de42 <z_add_timeout+0xf2>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   1de2e:	f7ff ff63 	bl	1dcf8 <next_timeout>

			if (next_time == 0 ||
   1de32:	b118      	cbz	r0, 1de3c <z_add_timeout+0xec>
			    _current_cpu->slice_ticks != next_time) {
   1de34:	4b0d      	ldr	r3, [pc, #52]	; (1de6c <z_add_timeout+0x11c>)
			if (next_time == 0 ||
   1de36:	691b      	ldr	r3, [r3, #16]
   1de38:	4283      	cmp	r3, r0
   1de3a:	d002      	beq.n	1de42 <z_add_timeout+0xf2>
				sys_clock_set_timeout(next_time, false);
   1de3c:	2100      	movs	r1, #0
   1de3e:	f7e7 f869 	bl	4f14 <sys_clock_set_timeout>
	__asm__ volatile(
   1de42:	f385 8811 	msr	BASEPRI, r5
   1de46:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   1de4a:	b005      	add	sp, #20
   1de4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   1de50:	ebb6 0008 	subs.w	r0, r6, r8
   1de54:	eb67 0109 	sbc.w	r1, r7, r9
	return (node == list->tail) ? NULL : node->next;
   1de58:	4563      	cmp	r3, ip
   1de5a:	e9c4 0104 	strd	r0, r1, [r4, #16]
   1de5e:	d0c8      	beq.n	1ddf2 <z_add_timeout+0xa2>
   1de60:	681b      	ldr	r3, [r3, #0]
   1de62:	e7c5      	b.n	1ddf0 <z_add_timeout+0xa0>
   1de64:	20001430 	.word	0x20001430
   1de68:	20000630 	.word	0x20000630
   1de6c:	20002bd4 	.word	0x20002bd4

0001de70 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   1de70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1de74:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1de76:	f7ff fa73 	bl	1d360 <z_time_slice>
	__asm__ volatile(
   1de7a:	f04f 0320 	mov.w	r3, #32
   1de7e:	f3ef 8411 	mrs	r4, BASEPRI
   1de82:	f383 8811 	msr	BASEPRI, r3
   1de86:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1de8a:	4d2c      	ldr	r5, [pc, #176]	; (1df3c <sys_clock_announce+0xcc>)
   1de8c:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 1df40 <sys_clock_announce+0xd0>
	return list->head == list;
   1de90:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 1df44 <sys_clock_announce+0xd4>
   1de94:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1de96:	4651      	mov	r1, sl
   1de98:	f8d5 c000 	ldr.w	ip, [r5]
   1de9c:	f8db 0000 	ldr.w	r0, [fp]
   1dea0:	4662      	mov	r2, ip
   1dea2:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1dea4:	4558      	cmp	r0, fp
   1dea6:	e9da 8900 	ldrd	r8, r9, [sl]
   1deaa:	e9cd 2300 	strd	r2, r3, [sp]
   1deae:	d00d      	beq.n	1decc <sys_clock_announce+0x5c>
   1deb0:	b160      	cbz	r0, 1decc <sys_clock_announce+0x5c>
   1deb2:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   1deb6:	45b4      	cmp	ip, r6
   1deb8:	41bb      	sbcs	r3, r7
   1deba:	da1e      	bge.n	1defa <sys_clock_announce+0x8a>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1debc:	9b00      	ldr	r3, [sp, #0]
   1debe:	ebb6 0c03 	subs.w	ip, r6, r3
   1dec2:	9b01      	ldr	r3, [sp, #4]
   1dec4:	eb67 0603 	sbc.w	r6, r7, r3
   1dec8:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
   1decc:	9b00      	ldr	r3, [sp, #0]
   1dece:	eb13 0208 	adds.w	r2, r3, r8
   1ded2:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
   1ded4:	f04f 0600 	mov.w	r6, #0
	curr_tick += announce_remaining;
   1ded8:	eb43 0309 	adc.w	r3, r3, r9
   1dedc:	e9c1 2300 	strd	r2, r3, [r1]
	announce_remaining = 0;
   1dee0:	602e      	str	r6, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
   1dee2:	f7ff ff09 	bl	1dcf8 <next_timeout>
   1dee6:	4631      	mov	r1, r6
   1dee8:	f7e7 f814 	bl	4f14 <sys_clock_set_timeout>
	__asm__ volatile(
   1deec:	f384 8811 	msr	BASEPRI, r4
   1def0:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1def4:	b003      	add	sp, #12
   1def6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
   1defa:	eb18 0806 	adds.w	r8, r8, r6
		t->dticks = 0;
   1defe:	f04f 0200 	mov.w	r2, #0
   1df02:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
   1df06:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
   1df0a:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
   1df0e:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
   1df12:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
   1df16:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
   1df18:	f7ff fed4 	bl	1dcc4 <remove_timeout>
   1df1c:	f384 8811 	msr	BASEPRI, r4
   1df20:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1df24:	6883      	ldr	r3, [r0, #8]
   1df26:	4798      	blx	r3
	__asm__ volatile(
   1df28:	f04f 0320 	mov.w	r3, #32
   1df2c:	f3ef 8411 	mrs	r4, BASEPRI
   1df30:	f383 8811 	msr	BASEPRI, r3
   1df34:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
   1df38:	4901      	ldr	r1, [pc, #4]	; (1df40 <sys_clock_announce+0xd0>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1df3a:	e7ad      	b.n	1de98 <sys_clock_announce+0x28>
   1df3c:	20002c18 	.word	0x20002c18
   1df40:	20001430 	.word	0x20001430
   1df44:	20000630 	.word	0x20000630

0001df48 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   1df48:	b510      	push	{r4, lr}
   1df4a:	f04f 0320 	mov.w	r3, #32
   1df4e:	f3ef 8411 	mrs	r4, BASEPRI
   1df52:	f383 8811 	msr	BASEPRI, r3
   1df56:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   1df5a:	f7e7 f80d 	bl	4f78 <sys_clock_elapsed>
   1df5e:	4b06      	ldr	r3, [pc, #24]	; (1df78 <sys_clock_tick_get+0x30>)
   1df60:	e9d3 2300 	ldrd	r2, r3, [r3]
   1df64:	1812      	adds	r2, r2, r0
   1df66:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   1df6a:	f384 8811 	msr	BASEPRI, r4
   1df6e:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1df72:	4610      	mov	r0, r2
   1df74:	4619      	mov	r1, r3
   1df76:	bd10      	pop	{r4, pc}
   1df78:	20001430 	.word	0x20001430

0001df7c <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   1df7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1df7e:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   1df82:	1c56      	adds	r6, r2, #1
   1df84:	f143 0700 	adc.w	r7, r3, #0
   1df88:	2f00      	cmp	r7, #0
   1df8a:	bf08      	it	eq
   1df8c:	2e02      	cmpeq	r6, #2
{
   1df8e:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1df90:	d302      	bcc.n	1df98 <z_timer_expiration_handler+0x1c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1df92:	490d      	ldr	r1, [pc, #52]	; (1dfc8 <z_timer_expiration_handler+0x4c>)
   1df94:	f7ff fedc 	bl	1dd50 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   1df98:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1df9a:	3301      	adds	r3, #1
   1df9c:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1df9e:	6a23      	ldr	r3, [r4, #32]
   1dfa0:	b10b      	cbz	r3, 1dfa6 <z_timer_expiration_handler+0x2a>
		timer->expiry_fn(timer);
   1dfa2:	4620      	mov	r0, r4
   1dfa4:	4798      	blx	r3
	return list->head == list;
   1dfa6:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1dfaa:	42a5      	cmp	r5, r4
   1dfac:	d00a      	beq.n	1dfc4 <z_timer_expiration_handler+0x48>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1dfae:	b14d      	cbz	r5, 1dfc4 <z_timer_expiration_handler+0x48>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   1dfb0:	4628      	mov	r0, r5
   1dfb2:	f004 ff8f 	bl	22ed4 <z_unpend_thread_no_timeout>
   1dfb6:	2300      	movs	r3, #0
   1dfb8:	67eb      	str	r3, [r5, #124]	; 0x7c

	arch_thread_return_value_set(thread, 0);

	z_ready_thread(thread);
   1dfba:	4628      	mov	r0, r5
}
   1dfbc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
   1dfc0:	f004 bff9 	b.w	22fb6 <z_ready_thread>
}
   1dfc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1dfc6:	bf00      	nop
   1dfc8:	0001df7d 	.word	0x0001df7d

0001dfcc <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   1dfcc:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
   1dfd0:	4619      	mov	r1, r3
   1dfd2:	4606      	mov	r6, r0
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1dfd4:	1c4c      	adds	r4, r1, #1
{
   1dfd6:	4610      	mov	r0, r2
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1dfd8:	bf08      	it	eq
   1dfda:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   1dfde:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1dfe2:	4680      	mov	r8, r0
   1dfe4:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1dfe6:	d04c      	beq.n	1e082 <z_impl_k_timer_start+0xb6>
   1dfe8:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   1dfea:	1c6b      	adds	r3, r5, #1
   1dfec:	bf08      	it	eq
   1dfee:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   1dff2:	4614      	mov	r4, r2
   1dff4:	d019      	beq.n	1e02a <z_impl_k_timer_start+0x5e>
   1dff6:	ea54 0305 	orrs.w	r3, r4, r5
   1dffa:	d016      	beq.n	1e02a <z_impl_k_timer_start+0x5e>
	    Z_TICK_ABS(period.ticks) < 0) {
   1dffc:	f06f 0301 	mvn.w	r3, #1
   1e000:	ebb3 0a02 	subs.w	sl, r3, r2
   1e004:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e008:	eb63 0b05 	sbc.w	fp, r3, r5
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   1e00c:	f1ba 0f00 	cmp.w	sl, #0
   1e010:	f17b 0300 	sbcs.w	r3, fp, #0
   1e014:	da09      	bge.n	1e02a <z_impl_k_timer_start+0x5e>
		period.ticks = MAX(period.ticks - 1, 1);
   1e016:	f112 34ff 	adds.w	r4, r2, #4294967295	; 0xffffffff
   1e01a:	f145 35ff 	adc.w	r5, r5, #4294967295	; 0xffffffff
   1e01e:	2c01      	cmp	r4, #1
   1e020:	f175 0300 	sbcs.w	r3, r5, #0
   1e024:	bfbc      	itt	lt
   1e026:	2401      	movlt	r4, #1
   1e028:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   1e02a:	f06f 0301 	mvn.w	r3, #1
   1e02e:	1a1b      	subs	r3, r3, r0
   1e030:	9300      	str	r3, [sp, #0]
   1e032:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e036:	eb63 0301 	sbc.w	r3, r3, r1
   1e03a:	9301      	str	r3, [sp, #4]
   1e03c:	e9dd 2300 	ldrd	r2, r3, [sp]
   1e040:	2a00      	cmp	r2, #0
   1e042:	f173 0300 	sbcs.w	r3, r3, #0
   1e046:	da0c      	bge.n	1e062 <z_impl_k_timer_start+0x96>
		duration.ticks = MAX(duration.ticks - 1, 0);
   1e048:	f110 38ff 	adds.w	r8, r0, #4294967295	; 0xffffffff
   1e04c:	f141 39ff 	adc.w	r9, r1, #4294967295	; 0xffffffff
   1e050:	f1b8 0f00 	cmp.w	r8, #0
   1e054:	f179 0300 	sbcs.w	r3, r9, #0
   1e058:	bfbc      	itt	lt
   1e05a:	f04f 0800 	movlt.w	r8, #0
   1e05e:	f04f 0900 	movlt.w	r9, #0
	}

	(void)z_abort_timeout(&timer->timeout);
   1e062:	4630      	mov	r0, r6
   1e064:	f005 f915 	bl	23292 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   1e068:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1e06a:	4907      	ldr	r1, [pc, #28]	; (1e088 <z_impl_k_timer_start+0xbc>)
	timer->status = 0U;
   1e06c:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1e06e:	4642      	mov	r2, r8
   1e070:	464b      	mov	r3, r9
   1e072:	4630      	mov	r0, r6
	timer->period = period;
   1e074:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
   1e078:	b002      	add	sp, #8
   1e07a:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1e07e:	f7ff be67 	b.w	1dd50 <z_add_timeout>
}
   1e082:	b002      	add	sp, #8
   1e084:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
   1e088:	0001df7d 	.word	0x0001df7d

0001e08c <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   1e08c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1e090:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   1e092:	4b29      	ldr	r3, [pc, #164]	; (1e138 <z_impl_k_poll+0xac>)
   1e094:	689d      	ldr	r5, [r3, #8]

	poller->is_polling = true;
   1e096:	2301      	movs	r3, #1
   1e098:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	poller->mode = MODE_POLL;
   1e09c:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	events_registered = register_events(events, num_events, poller,
   1e0a0:	ea52 0307 	orrs.w	r3, r2, r7
{
   1e0a4:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   1e0a6:	bf0c      	ite	eq
   1e0a8:	2301      	moveq	r3, #1
   1e0aa:	2300      	movne	r3, #0
   1e0ac:	f105 0260 	add.w	r2, r5, #96	; 0x60
{
   1e0b0:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   1e0b2:	f005 f9e6 	bl	23482 <register_events>
   1e0b6:	4681      	mov	r9, r0
	__asm__ volatile(
   1e0b8:	f04f 0320 	mov.w	r3, #32
   1e0bc:	f3ef 8a11 	mrs	sl, BASEPRI
   1e0c0:	f383 8811 	msr	BASEPRI, r3
   1e0c4:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   1e0c8:	f895 4060 	ldrb.w	r4, [r5, #96]	; 0x60
   1e0cc:	b964      	cbnz	r4, 1e0e8 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   1e0ce:	4601      	mov	r1, r0
   1e0d0:	4652      	mov	r2, sl
   1e0d2:	4640      	mov	r0, r8
   1e0d4:	f005 f975 	bl	233c2 <clear_event_registrations>
	__asm__ volatile(
   1e0d8:	f38a 8811 	msr	BASEPRI, sl
   1e0dc:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   1e0e0:	4620      	mov	r0, r4
   1e0e2:	b002      	add	sp, #8
   1e0e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   1e0e8:	2300      	movs	r3, #0
   1e0ea:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1e0ee:	ea56 0307 	orrs.w	r3, r6, r7
   1e0f2:	d106      	bne.n	1e102 <z_impl_k_poll+0x76>
   1e0f4:	f38a 8811 	msr	BASEPRI, sl
   1e0f8:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1e0fc:	f06f 040a 	mvn.w	r4, #10
   1e100:	e7ee      	b.n	1e0e0 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1e102:	e9cd 6700 	strd	r6, r7, [sp]
   1e106:	4a0d      	ldr	r2, [pc, #52]	; (1e13c <z_impl_k_poll+0xb0>)
   1e108:	480d      	ldr	r0, [pc, #52]	; (1e140 <z_impl_k_poll+0xb4>)
   1e10a:	4651      	mov	r1, sl
   1e10c:	f7ff f84e 	bl	1d1ac <z_pend_curr>
   1e110:	4604      	mov	r4, r0
	__asm__ volatile(
   1e112:	f04f 0320 	mov.w	r3, #32
   1e116:	f3ef 8511 	mrs	r5, BASEPRI
   1e11a:	f383 8811 	msr	BASEPRI, r3
   1e11e:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   1e122:	462a      	mov	r2, r5
   1e124:	4649      	mov	r1, r9
   1e126:	4640      	mov	r0, r8
   1e128:	f005 f94b 	bl	233c2 <clear_event_registrations>
	__asm__ volatile(
   1e12c:	f385 8811 	msr	BASEPRI, r5
   1e130:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1e134:	e7d4      	b.n	1e0e0 <z_impl_k_poll+0x54>
   1e136:	bf00      	nop
   1e138:	20002bd4 	.word	0x20002bd4
   1e13c:	20000638 	.word	0x20000638
   1e140:	200032c7 	.word	0x200032c7

0001e144 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   1e144:	b538      	push	{r3, r4, r5, lr}
   1e146:	4603      	mov	r3, r0
	__asm__ volatile(
   1e148:	f04f 0220 	mov.w	r2, #32
   1e14c:	f3ef 8511 	mrs	r5, BASEPRI
   1e150:	f382 8811 	msr	BASEPRI, r2
   1e154:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   1e158:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   1e15a:	2101      	movs	r1, #1
   1e15c:	6081      	str	r1, [r0, #8]
	return list->head == list;
   1e15e:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1e160:	4283      	cmp	r3, r0
   1e162:	d106      	bne.n	1e172 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   1e164:	f385 8811 	msr	BASEPRI, r5
   1e168:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&sig->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
   1e16c:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	z_reschedule(&lock, key);
	return rc;
}
   1e16e:	4620      	mov	r0, r4
   1e170:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   1e172:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1e176:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1e178:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1e17a:	2300      	movs	r3, #0
	node->prev = NULL;
   1e17c:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1e180:	f005 f9e0 	bl	23544 <signal_poll_event>
	z_reschedule(&lock, key);
   1e184:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1e186:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1e188:	4801      	ldr	r0, [pc, #4]	; (1e190 <z_impl_k_poll_signal_raise+0x4c>)
   1e18a:	f7fe ff8d 	bl	1d0a8 <z_reschedule>
	return rc;
   1e18e:	e7ee      	b.n	1e16e <z_impl_k_poll_signal_raise+0x2a>
   1e190:	200032c7 	.word	0x200032c7

0001e194 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   1e194:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1e196:	4606      	mov	r6, r0
   1e198:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1e19a:	f004 ffa8 	bl	230ee <k_is_in_isr>
   1e19e:	b980      	cbnz	r0, 1e1c2 <z_thread_aligned_alloc+0x2e>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   1e1a0:	4b0b      	ldr	r3, [pc, #44]	; (1e1d0 <z_thread_aligned_alloc+0x3c>)
   1e1a2:	689b      	ldr	r3, [r3, #8]
   1e1a4:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   1e1a6:	b184      	cbz	r4, 1e1ca <z_thread_aligned_alloc+0x36>
	return c < a;
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a + b;
   1e1a8:	2204      	movs	r2, #4
   1e1aa:	18aa      	adds	r2, r5, r2
   1e1ac:	d209      	bcs.n	1e1c2 <z_thread_aligned_alloc+0x2e>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   1e1ae:	2000      	movs	r0, #0
   1e1b0:	2100      	movs	r1, #0
   1e1b2:	e9cd 0100 	strd	r0, r1, [sp]
   1e1b6:	f046 0104 	orr.w	r1, r6, #4
   1e1ba:	4620      	mov	r0, r4
   1e1bc:	f004 fd23 	bl	22c06 <k_heap_aligned_alloc>
	if (mem == NULL) {
   1e1c0:	b908      	cbnz	r0, 1e1c6 <z_thread_aligned_alloc+0x32>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   1e1c2:	2400      	movs	r4, #0
	}

	return ret;
   1e1c4:	e001      	b.n	1e1ca <z_thread_aligned_alloc+0x36>
	*heap_ref = heap;
   1e1c6:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   1e1c8:	1d04      	adds	r4, r0, #4
}
   1e1ca:	4620      	mov	r0, r4
   1e1cc:	b002      	add	sp, #8
   1e1ce:	bd70      	pop	{r4, r5, r6, pc}
   1e1d0:	20002bd4 	.word	0x20002bd4

0001e1d4 <round>:
   1e1d4:	b580      	push	{r7, lr}
   1e1d6:	b08c      	sub	sp, #48	; 0x30
   1e1d8:	af00      	add	r7, sp, #0
   1e1da:	e9c7 0100 	strd	r0, r1, [r7]
   1e1de:	e9d7 2300 	ldrd	r2, r3, [r7]
   1e1e2:	e9c7 2304 	strd	r2, r3, [r7, #16]
   1e1e6:	697b      	ldr	r3, [r7, #20]
   1e1e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   1e1ea:	693b      	ldr	r3, [r7, #16]
   1e1ec:	62bb      	str	r3, [r7, #40]	; 0x28
   1e1ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e1f0:	151b      	asrs	r3, r3, #20
   1e1f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
   1e1f6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   1e1fa:	627b      	str	r3, [r7, #36]	; 0x24
   1e1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e1fe:	2b13      	cmp	r3, #19
   1e200:	dc33      	bgt.n	1e26a <round+0x96>
   1e202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e204:	2b00      	cmp	r3, #0
   1e206:	da10      	bge.n	1e22a <round+0x56>
   1e208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e20a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
   1e20e:	62fb      	str	r3, [r7, #44]	; 0x2c
   1e210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e212:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1e216:	d105      	bne.n	1e224 <round+0x50>
   1e218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e21a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
   1e21e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   1e222:	62fb      	str	r3, [r7, #44]	; 0x2c
   1e224:	2300      	movs	r3, #0
   1e226:	62bb      	str	r3, [r7, #40]	; 0x28
   1e228:	e059      	b.n	1e2de <round+0x10a>
   1e22a:	4a34      	ldr	r2, [pc, #208]	; (1e2fc <round+0x128>)
   1e22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e22e:	fa42 f303 	asr.w	r3, r2, r3
   1e232:	61bb      	str	r3, [r7, #24]
   1e234:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1e236:	69bb      	ldr	r3, [r7, #24]
   1e238:	4013      	ands	r3, r2
   1e23a:	2b00      	cmp	r3, #0
   1e23c:	d105      	bne.n	1e24a <round+0x76>
   1e23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e240:	2b00      	cmp	r3, #0
   1e242:	d102      	bne.n	1e24a <round+0x76>
   1e244:	e9d7 2300 	ldrd	r2, r3, [r7]
   1e248:	e053      	b.n	1e2f2 <round+0x11e>
   1e24a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   1e24e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e250:	fa42 f303 	asr.w	r3, r2, r3
   1e254:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1e256:	4413      	add	r3, r2
   1e258:	62fb      	str	r3, [r7, #44]	; 0x2c
   1e25a:	69bb      	ldr	r3, [r7, #24]
   1e25c:	43da      	mvns	r2, r3
   1e25e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e260:	4013      	ands	r3, r2
   1e262:	62fb      	str	r3, [r7, #44]	; 0x2c
   1e264:	2300      	movs	r3, #0
   1e266:	62bb      	str	r3, [r7, #40]	; 0x28
   1e268:	e039      	b.n	1e2de <round+0x10a>
   1e26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e26c:	2b33      	cmp	r3, #51	; 0x33
   1e26e:	dd0f      	ble.n	1e290 <round+0xbc>
   1e270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e272:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1e276:	d108      	bne.n	1e28a <round+0xb6>
   1e278:	e9d7 0100 	ldrd	r0, r1, [r7]
   1e27c:	4602      	mov	r2, r0
   1e27e:	460b      	mov	r3, r1
   1e280:	f7e1 ff44 	bl	10c <__adddf3>
   1e284:	4602      	mov	r2, r0
   1e286:	460b      	mov	r3, r1
   1e288:	e033      	b.n	1e2f2 <round+0x11e>
   1e28a:	e9d7 2300 	ldrd	r2, r3, [r7]
   1e28e:	e030      	b.n	1e2f2 <round+0x11e>
   1e290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e292:	3b14      	subs	r3, #20
   1e294:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1e298:	fa22 f303 	lsr.w	r3, r2, r3
   1e29c:	623b      	str	r3, [r7, #32]
   1e29e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1e2a0:	6a3b      	ldr	r3, [r7, #32]
   1e2a2:	4013      	ands	r3, r2
   1e2a4:	2b00      	cmp	r3, #0
   1e2a6:	d102      	bne.n	1e2ae <round+0xda>
   1e2a8:	e9d7 2300 	ldrd	r2, r3, [r7]
   1e2ac:	e021      	b.n	1e2f2 <round+0x11e>
   1e2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e2b0:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
   1e2b4:	2201      	movs	r2, #1
   1e2b6:	fa02 f303 	lsl.w	r3, r2, r3
   1e2ba:	461a      	mov	r2, r3
   1e2bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e2be:	4413      	add	r3, r2
   1e2c0:	61fb      	str	r3, [r7, #28]
   1e2c2:	69fa      	ldr	r2, [r7, #28]
   1e2c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e2c6:	429a      	cmp	r2, r3
   1e2c8:	d202      	bcs.n	1e2d0 <round+0xfc>
   1e2ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e2cc:	3301      	adds	r3, #1
   1e2ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   1e2d0:	69fb      	ldr	r3, [r7, #28]
   1e2d2:	62bb      	str	r3, [r7, #40]	; 0x28
   1e2d4:	6a3b      	ldr	r3, [r7, #32]
   1e2d6:	43db      	mvns	r3, r3
   1e2d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1e2da:	4013      	ands	r3, r2
   1e2dc:	62bb      	str	r3, [r7, #40]	; 0x28
   1e2de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e2e0:	60fb      	str	r3, [r7, #12]
   1e2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e2e4:	60bb      	str	r3, [r7, #8]
   1e2e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   1e2ea:	e9c7 2300 	strd	r2, r3, [r7]
   1e2ee:	e9d7 2300 	ldrd	r2, r3, [r7]
   1e2f2:	4610      	mov	r0, r2
   1e2f4:	4619      	mov	r1, r3
   1e2f6:	3730      	adds	r7, #48	; 0x30
   1e2f8:	46bd      	mov	sp, r7
   1e2fa:	bd80      	pop	{r7, pc}
   1e2fc:	000fffff 	.word	0x000fffff

0001e300 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   1e300:	4603      	mov	r3, r0
   1e302:	b140      	cbz	r0, 1e316 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1e304:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1e306:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1e30a:	2a02      	cmp	r2, #2
   1e30c:	d006      	beq.n	1e31c <sys_notify_validate+0x1c>
   1e30e:	2a03      	cmp	r2, #3
   1e310:	d004      	beq.n	1e31c <sys_notify_validate+0x1c>
   1e312:	2a01      	cmp	r2, #1
   1e314:	d005      	beq.n	1e322 <sys_notify_validate+0x22>
		return -EINVAL;
   1e316:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   1e31a:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1e31c:	681a      	ldr	r2, [r3, #0]
   1e31e:	2a00      	cmp	r2, #0
   1e320:	d0f9      	beq.n	1e316 <sys_notify_validate+0x16>
		notify->result = 0;
   1e322:	2000      	movs	r0, #0
   1e324:	6098      	str	r0, [r3, #8]
   1e326:	4770      	bx	lr

0001e328 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1e328:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1e32a:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   1e32e:	2a02      	cmp	r2, #2
{
   1e330:	b510      	push	{r4, lr}
   1e332:	4603      	mov	r3, r0
	notify->result = res;
   1e334:	6081      	str	r1, [r0, #8]
	switch (method) {
   1e336:	d00a      	beq.n	1e34e <sys_notify_finalize+0x26>
   1e338:	2a03      	cmp	r2, #3
   1e33a:	d10b      	bne.n	1e354 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1e33c:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   1e33e:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1e340:	2200      	movs	r2, #0
   1e342:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   1e344:	b108      	cbz	r0, 1e34a <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(sig, result);
   1e346:	f7ff fefd 	bl	1e144 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1e34a:	4620      	mov	r0, r4
   1e34c:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   1e34e:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = 0;
   1e350:	2400      	movs	r4, #0
		break;
   1e352:	e7f5      	b.n	1e340 <sys_notify_finalize+0x18>
	switch (method) {
   1e354:	2400      	movs	r4, #0
   1e356:	4620      	mov	r0, r4
   1e358:	e7f2      	b.n	1e340 <sys_notify_finalize+0x18>

0001e35a <arch_printk_char_out>:
}
   1e35a:	2000      	movs	r0, #0
   1e35c:	4770      	bx	lr

0001e35e <str_out>:
{
   1e35e:	b530      	push	{r4, r5, lr}
   1e360:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1e362:	680c      	ldr	r4, [r1, #0]
   1e364:	1c55      	adds	r5, r2, #1
   1e366:	b114      	cbz	r4, 1e36e <str_out+0x10>
   1e368:	684b      	ldr	r3, [r1, #4]
   1e36a:	4293      	cmp	r3, r2
   1e36c:	dc01      	bgt.n	1e372 <str_out+0x14>
		ctx->count++;
   1e36e:	608d      	str	r5, [r1, #8]
}
   1e370:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1e372:	3b01      	subs	r3, #1
   1e374:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1e376:	bf08      	it	eq
   1e378:	2200      	moveq	r2, #0
   1e37a:	608d      	str	r5, [r1, #8]
   1e37c:	bf0c      	ite	eq
   1e37e:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1e380:	54a0      	strbne	r0, [r4, r2]
   1e382:	e7f5      	b.n	1e370 <str_out+0x12>

0001e384 <printk>:
{
   1e384:	b40f      	push	{r0, r1, r2, r3}
   1e386:	b507      	push	{r0, r1, r2, lr}
   1e388:	a904      	add	r1, sp, #16
   1e38a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1e38e:	9101      	str	r1, [sp, #4]
		log_printk(fmt, ap);
   1e390:	f000 fc33 	bl	1ebfa <log_printk>
}
   1e394:	b003      	add	sp, #12
   1e396:	f85d eb04 	ldr.w	lr, [sp], #4
   1e39a:	b004      	add	sp, #16
   1e39c:	4770      	bx	lr

0001e39e <snprintk>:
{
   1e39e:	b40c      	push	{r2, r3}
   1e3a0:	b507      	push	{r0, r1, r2, lr}
   1e3a2:	ab04      	add	r3, sp, #16
   1e3a4:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1e3a8:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1e3aa:	f7e4 fea7 	bl	30fc <vsnprintk>
}
   1e3ae:	b003      	add	sp, #12
   1e3b0:	f85d eb04 	ldr.w	lr, [sp], #4
   1e3b4:	b002      	add	sp, #8
   1e3b6:	4770      	bx	lr

0001e3b8 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1e3b8:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   1e3ba:	f013 0307 	ands.w	r3, r3, #7
   1e3be:	d105      	bne.n	1e3cc <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1e3c0:	6803      	ldr	r3, [r0, #0]
   1e3c2:	2b00      	cmp	r3, #0
		evt = EVT_START;
   1e3c4:	bf0c      	ite	eq
   1e3c6:	2000      	moveq	r0, #0
   1e3c8:	2003      	movne	r0, #3
   1e3ca:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1e3cc:	2b02      	cmp	r3, #2
   1e3ce:	d105      	bne.n	1e3dc <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1e3d0:	8b43      	ldrh	r3, [r0, #26]
   1e3d2:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   1e3d4:	bf14      	ite	ne
   1e3d6:	2000      	movne	r0, #0
   1e3d8:	2004      	moveq	r0, #4
   1e3da:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1e3dc:	2b01      	cmp	r3, #1
   1e3de:	d105      	bne.n	1e3ec <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1e3e0:	6803      	ldr	r3, [r0, #0]
   1e3e2:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   1e3e4:	bf0c      	ite	eq
   1e3e6:	2000      	moveq	r0, #0
   1e3e8:	2005      	movne	r0, #5
   1e3ea:	4770      	bx	lr
	int evt = EVT_NOP;
   1e3ec:	2000      	movs	r0, #0
}
   1e3ee:	4770      	bx	lr

0001e3f0 <notify_one>:
{
   1e3f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e3f4:	460d      	mov	r5, r1
   1e3f6:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1e3f8:	4619      	mov	r1, r3
   1e3fa:	1d28      	adds	r0, r5, #4
{
   1e3fc:	4690      	mov	r8, r2
   1e3fe:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1e400:	f7ff ff92 	bl	1e328 <sys_notify_finalize>
	if (cb) {
   1e404:	4604      	mov	r4, r0
   1e406:	b138      	cbz	r0, 1e418 <notify_one+0x28>
		cb(mgr, cli, state, res);
   1e408:	4633      	mov	r3, r6
   1e40a:	4642      	mov	r2, r8
   1e40c:	4629      	mov	r1, r5
   1e40e:	4638      	mov	r0, r7
   1e410:	46a4      	mov	ip, r4
}
   1e412:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1e416:	4760      	bx	ip
}
   1e418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001e41c <transition_complete>:
{
   1e41c:	b410      	push	{r4}
	__asm__ volatile(
   1e41e:	f04f 0420 	mov.w	r4, #32
   1e422:	f3ef 8211 	mrs	r2, BASEPRI
   1e426:	f384 8811 	msr	BASEPRI, r4
   1e42a:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   1e42e:	6141      	str	r1, [r0, #20]
}
   1e430:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   1e432:	2101      	movs	r1, #1
   1e434:	f7e4 be76 	b.w	3124 <process_event>

0001e438 <validate_args>:
{
   1e438:	b510      	push	{r4, lr}
   1e43a:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1e43c:	b140      	cbz	r0, 1e450 <validate_args+0x18>
   1e43e:	b139      	cbz	r1, 1e450 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   1e440:	1d08      	adds	r0, r1, #4
   1e442:	f7ff ff5d 	bl	1e300 <sys_notify_validate>
	if ((rv == 0)
   1e446:	b928      	cbnz	r0, 1e454 <validate_args+0x1c>
	    && ((cli->notify.flags
   1e448:	68a3      	ldr	r3, [r4, #8]
   1e44a:	f033 0303 	bics.w	r3, r3, #3
   1e44e:	d001      	beq.n	1e454 <validate_args+0x1c>
		rv = -EINVAL;
   1e450:	f06f 0015 	mvn.w	r0, #21
}
   1e454:	bd10      	pop	{r4, pc}

0001e456 <onoff_manager_init>:
{
   1e456:	b538      	push	{r3, r4, r5, lr}
   1e458:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1e45a:	4605      	mov	r5, r0
   1e45c:	b158      	cbz	r0, 1e476 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1e45e:	b151      	cbz	r1, 1e476 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1e460:	680b      	ldr	r3, [r1, #0]
   1e462:	b143      	cbz	r3, 1e476 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1e464:	684b      	ldr	r3, [r1, #4]
   1e466:	b133      	cbz	r3, 1e476 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1e468:	221c      	movs	r2, #28
   1e46a:	2100      	movs	r1, #0
   1e46c:	f005 f907 	bl	2367e <memset>
   1e470:	612c      	str	r4, [r5, #16]
	return 0;
   1e472:	2000      	movs	r0, #0
}
   1e474:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1e476:	f06f 0015 	mvn.w	r0, #21
   1e47a:	e7fb      	b.n	1e474 <onoff_manager_init+0x1e>

0001e47c <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1e47c:	b570      	push	{r4, r5, r6, lr}
   1e47e:	4604      	mov	r4, r0
   1e480:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1e482:	f7ff ffd9 	bl	1e438 <validate_args>

	if (rv < 0) {
   1e486:	1e05      	subs	r5, r0, #0
   1e488:	db31      	blt.n	1e4ee <onoff_request+0x72>
   1e48a:	f04f 0320 	mov.w	r3, #32
   1e48e:	f3ef 8111 	mrs	r1, BASEPRI
   1e492:	f383 8811 	msr	BASEPRI, r3
   1e496:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1e49a:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1e49c:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   1e49e:	f64f 75ff 	movw	r5, #65535	; 0xffff
   1e4a2:	42ab      	cmp	r3, r5
   1e4a4:	f000 0207 	and.w	r2, r0, #7
   1e4a8:	d02e      	beq.n	1e508 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   1e4aa:	2a02      	cmp	r2, #2
   1e4ac:	d10e      	bne.n	1e4cc <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   1e4ae:	3301      	adds	r3, #1
   1e4b0:	8363      	strh	r3, [r4, #26]
	rv = state;
   1e4b2:	4615      	mov	r5, r2
		notify = true;
   1e4b4:	2301      	movs	r3, #1
	__asm__ volatile(
   1e4b6:	f381 8811 	msr	BASEPRI, r1
   1e4ba:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   1e4be:	b1b3      	cbz	r3, 1e4ee <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   1e4c0:	2300      	movs	r3, #0
   1e4c2:	4631      	mov	r1, r6
   1e4c4:	4620      	mov	r0, r4
   1e4c6:	f7ff ff93 	bl	1e3f0 <notify_one>
   1e4ca:	e010      	b.n	1e4ee <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   1e4cc:	0783      	lsls	r3, r0, #30
   1e4ce:	d001      	beq.n	1e4d4 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   1e4d0:	2a06      	cmp	r2, #6
   1e4d2:	d10e      	bne.n	1e4f2 <onoff_request+0x76>
	parent->next = child;
   1e4d4:	2300      	movs	r3, #0
   1e4d6:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
   1e4d8:	6863      	ldr	r3, [r4, #4]
   1e4da:	b993      	cbnz	r3, 1e502 <onoff_request+0x86>
	list->head = node;
   1e4dc:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   1e4e0:	4615      	mov	r5, r2
   1e4e2:	b962      	cbnz	r2, 1e4fe <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   1e4e4:	460a      	mov	r2, r1
   1e4e6:	4620      	mov	r0, r4
   1e4e8:	2102      	movs	r1, #2
   1e4ea:	f7e4 fe1b 	bl	3124 <process_event>
		}
	}

	return rv;
}
   1e4ee:	4628      	mov	r0, r5
   1e4f0:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   1e4f2:	2a05      	cmp	r2, #5
   1e4f4:	bf0c      	ite	eq
   1e4f6:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   1e4fa:	f06f 0504 	mvnne.w	r5, #4
   1e4fe:	2300      	movs	r3, #0
   1e500:	e7d9      	b.n	1e4b6 <onoff_request+0x3a>
	parent->next = child;
   1e502:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1e504:	6066      	str	r6, [r4, #4]
}
   1e506:	e7eb      	b.n	1e4e0 <onoff_request+0x64>
		rv = -EAGAIN;
   1e508:	f06f 050a 	mvn.w	r5, #10
   1e50c:	e7f7      	b.n	1e4fe <onoff_request+0x82>

0001e50e <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   1e50e:	b510      	push	{r4, lr}
	__asm__ volatile(
   1e510:	f04f 0320 	mov.w	r3, #32
   1e514:	f3ef 8211 	mrs	r2, BASEPRI
   1e518:	f383 8811 	msr	BASEPRI, r3
   1e51c:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1e520:	8b04      	ldrh	r4, [r0, #24]
   1e522:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   1e526:	2c02      	cmp	r4, #2
   1e528:	d00a      	beq.n	1e540 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
   1e52a:	2c01      	cmp	r4, #1
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   1e52c:	bf0c      	ite	eq
   1e52e:	f06f 0004 	mvneq.w	r0, #4
   1e532:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
   1e536:	f382 8811 	msr	BASEPRI, r2
   1e53a:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   1e53e:	e008      	b.n	1e552 <onoff_release+0x44>
	mgr->refs -= 1U;
   1e540:	8b43      	ldrh	r3, [r0, #26]
   1e542:	3b01      	subs	r3, #1
   1e544:	b29b      	uxth	r3, r3
   1e546:	8343      	strh	r3, [r0, #26]
	if (stop) {
   1e548:	b923      	cbnz	r3, 1e554 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
   1e54a:	4621      	mov	r1, r4
   1e54c:	f7e4 fdea 	bl	3124 <process_event>
	int rv = state;
   1e550:	4620      	mov	r0, r4
}
   1e552:	bd10      	pop	{r4, pc}
	int rv = state;
   1e554:	4620      	mov	r0, r4
   1e556:	e7ee      	b.n	1e536 <onoff_release+0x28>

0001e558 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1e558:	4604      	mov	r4, r0
   1e55a:	b508      	push	{r3, lr}
   1e55c:	4608      	mov	r0, r1
   1e55e:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   1e560:	461a      	mov	r2, r3
   1e562:	47a0      	blx	r4
	return z_impl_k_current_get();
   1e564:	f7ff f860 	bl	1d628 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   1e568:	f7e7 fb46 	bl	5bf8 <z_impl_k_thread_abort>

0001e56c <chunk_field>:
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1e56c:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   1e56e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1e572:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   1e576:	bf2c      	ite	cs
   1e578:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   1e57c:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   1e580:	4770      	bx	lr

0001e582 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   1e582:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   1e586:	6880      	ldr	r0, [r0, #8]
   1e588:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   1e58c:	bf2c      	ite	cs
   1e58e:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   1e592:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   1e596:	4770      	bx	lr

0001e598 <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
   1e598:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1e59a:	2201      	movs	r2, #1
   1e59c:	f7ff ffe6 	bl	1e56c <chunk_field>
}
   1e5a0:	0840      	lsrs	r0, r0, #1
   1e5a2:	bd08      	pop	{r3, pc}

0001e5a4 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1e5a4:	6883      	ldr	r3, [r0, #8]
   1e5a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
   1e5aa:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1e5ae:	d308      	bcc.n	1e5c2 <set_chunk_used+0x1e>
		if (used) {
   1e5b0:	684b      	ldr	r3, [r1, #4]
   1e5b2:	b11a      	cbz	r2, 1e5bc <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1e5b4:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1e5b8:	604b      	str	r3, [r1, #4]
   1e5ba:	4770      	bx	lr
   1e5bc:	f023 0301 	bic.w	r3, r3, #1
   1e5c0:	e7fa      	b.n	1e5b8 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
   1e5c2:	884b      	ldrh	r3, [r1, #2]
   1e5c4:	b11a      	cbz	r2, 1e5ce <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1e5c6:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1e5ca:	804b      	strh	r3, [r1, #2]
		}
	}
}
   1e5cc:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1e5ce:	f023 0301 	bic.w	r3, r3, #1
   1e5d2:	e7fa      	b.n	1e5ca <set_chunk_used+0x26>

0001e5d4 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1e5d4:	0053      	lsls	r3, r2, #1
   1e5d6:	2201      	movs	r2, #1
   1e5d8:	f7ff bfd3 	b.w	1e582 <chunk_set>

0001e5dc <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   1e5dc:	6880      	ldr	r0, [r0, #8]
	return chunksz * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   1e5de:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1e5e0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   1e5e4:	bf2c      	ite	cs
   1e5e6:	2002      	movcs	r0, #2
   1e5e8:	2001      	movcc	r0, #1
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   1e5ea:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
   1e5ec:	fab0 f080 	clz	r0, r0
}
   1e5f0:	f1c0 001f 	rsb	r0, r0, #31
   1e5f4:	4770      	bx	lr

0001e5f6 <merge_chunks>:
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   1e5f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e5fa:	4616      	mov	r6, r2
   1e5fc:	4604      	mov	r4, r0
   1e5fe:	460f      	mov	r7, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1e600:	f7ff ffca 	bl	1e598 <chunk_size>
   1e604:	4631      	mov	r1, r6
   1e606:	4605      	mov	r5, r0
   1e608:	4620      	mov	r0, r4
   1e60a:	f7ff ffc5 	bl	1e598 <chunk_size>
   1e60e:	4405      	add	r5, r0

	set_chunk_size(h, lc, newsz);
   1e610:	462a      	mov	r2, r5
   1e612:	4639      	mov	r1, r7
   1e614:	4620      	mov	r0, r4
   1e616:	f7ff ffdd 	bl	1e5d4 <set_chunk_size>
	return c + chunk_size(h, c);
   1e61a:	4631      	mov	r1, r6
   1e61c:	4620      	mov	r0, r4
   1e61e:	f7ff ffbb 	bl	1e598 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1e622:	462b      	mov	r3, r5
   1e624:	1831      	adds	r1, r6, r0
   1e626:	2200      	movs	r2, #0
   1e628:	4620      	mov	r0, r4
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   1e62a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1e62e:	f7ff bfa8 	b.w	1e582 <chunk_set>

0001e632 <split_chunks>:
{
   1e632:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e636:	4614      	mov	r4, r2
   1e638:	4605      	mov	r5, r0
   1e63a:	460e      	mov	r6, r1
	chunksz_t sz0 = chunk_size(h, lc);
   1e63c:	f7ff ffac 	bl	1e598 <chunk_size>
	chunksz_t lsz = rc - lc;
   1e640:	eba4 0806 	sub.w	r8, r4, r6
	chunksz_t rsz = sz0 - lsz;
   1e644:	1b37      	subs	r7, r6, r4
   1e646:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   1e648:	4642      	mov	r2, r8
   1e64a:	4631      	mov	r1, r6
   1e64c:	4628      	mov	r0, r5
   1e64e:	f7ff ffc1 	bl	1e5d4 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   1e652:	463a      	mov	r2, r7
   1e654:	4621      	mov	r1, r4
   1e656:	4628      	mov	r0, r5
   1e658:	f7ff ffbc 	bl	1e5d4 <set_chunk_size>
   1e65c:	4643      	mov	r3, r8
   1e65e:	2200      	movs	r2, #0
   1e660:	4621      	mov	r1, r4
   1e662:	4628      	mov	r0, r5
   1e664:	f7ff ff8d 	bl	1e582 <chunk_set>
	return c + chunk_size(h, c);
   1e668:	4621      	mov	r1, r4
   1e66a:	4628      	mov	r0, r5
   1e66c:	f7ff ff94 	bl	1e598 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1e670:	463b      	mov	r3, r7
   1e672:	1821      	adds	r1, r4, r0
   1e674:	2200      	movs	r2, #0
   1e676:	4628      	mov	r0, r5
}
   1e678:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1e67c:	f7ff bf81 	b.w	1e582 <chunk_set>

0001e680 <free_list_remove_bidx>:
{
   1e680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e684:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   1e686:	2203      	movs	r2, #3
   1e688:	460e      	mov	r6, r1
   1e68a:	4604      	mov	r4, r0
   1e68c:	f7ff ff6e 	bl	1e56c <chunk_field>
	if (next_free_chunk(h, c) == c) {
   1e690:	4286      	cmp	r6, r0
   1e692:	4605      	mov	r5, r0
   1e694:	f107 0804 	add.w	r8, r7, #4
   1e698:	d10b      	bne.n	1e6b2 <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   1e69a:	2301      	movs	r3, #1
   1e69c:	fa03 f707 	lsl.w	r7, r3, r7
   1e6a0:	68e3      	ldr	r3, [r4, #12]
   1e6a2:	ea23 0307 	bic.w	r3, r3, r7
   1e6a6:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   1e6a8:	2300      	movs	r3, #0
   1e6aa:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   1e6ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   1e6b2:	4631      	mov	r1, r6
   1e6b4:	2202      	movs	r2, #2
   1e6b6:	4620      	mov	r0, r4
   1e6b8:	f7ff ff58 	bl	1e56c <chunk_field>
	chunk_set(h, c, FREE_NEXT, next);
   1e6bc:	462b      	mov	r3, r5
	return chunk_field(h, c, FREE_PREV);
   1e6be:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   1e6c0:	4601      	mov	r1, r0
		b->next = second;
   1e6c2:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   1e6c6:	4620      	mov	r0, r4
   1e6c8:	2203      	movs	r2, #3
   1e6ca:	f7ff ff5a 	bl	1e582 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1e6ce:	4633      	mov	r3, r6
   1e6d0:	4629      	mov	r1, r5
   1e6d2:	4620      	mov	r0, r4
   1e6d4:	2202      	movs	r2, #2
}
   1e6d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1e6da:	f7ff bf52 	b.w	1e582 <chunk_set>

0001e6de <free_list_remove>:
{
   1e6de:	b538      	push	{r3, r4, r5, lr}
   1e6e0:	4604      	mov	r4, r0
   1e6e2:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   1e6e4:	f7ff ff58 	bl	1e598 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   1e6e8:	68a3      	ldr	r3, [r4, #8]
   1e6ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1e6ee:	4601      	mov	r1, r0
   1e6f0:	d301      	bcc.n	1e6f6 <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   1e6f2:	2801      	cmp	r0, #1
   1e6f4:	d009      	beq.n	1e70a <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1e6f6:	4620      	mov	r0, r4
   1e6f8:	f7ff ff70 	bl	1e5dc <bucket_idx>
		free_list_remove_bidx(h, c, bidx);
   1e6fc:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   1e6fe:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   1e700:	4620      	mov	r0, r4
}
   1e702:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		free_list_remove_bidx(h, c, bidx);
   1e706:	f7ff bfbb 	b.w	1e680 <free_list_remove_bidx>
}
   1e70a:	bd38      	pop	{r3, r4, r5, pc}

0001e70c <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   1e70c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e710:	4605      	mov	r5, r0
   1e712:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   1e714:	f7ff ff62 	bl	1e5dc <bucket_idx>
   1e718:	eb05 0a80 	add.w	sl, r5, r0, lsl #2
   1e71c:	4606      	mov	r6, r0
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   1e71e:	f8da 9010 	ldr.w	r9, [sl, #16]
   1e722:	f1b9 0f00 	cmp.w	r9, #0
   1e726:	d01b      	beq.n	1e760 <alloc_chunk+0x54>
   1e728:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   1e72a:	f8da 4010 	ldr.w	r4, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   1e72e:	4628      	mov	r0, r5
   1e730:	4621      	mov	r1, r4
   1e732:	f7ff ff31 	bl	1e598 <chunk_size>
   1e736:	4540      	cmp	r0, r8
   1e738:	d307      	bcc.n	1e74a <alloc_chunk+0x3e>
				free_list_remove_bidx(h, c, bi);
   1e73a:	4632      	mov	r2, r6

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   1e73c:	4621      	mov	r1, r4
   1e73e:	4628      	mov	r0, r5
   1e740:	f7ff ff9e 	bl	1e680 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   1e744:	4620      	mov	r0, r4
   1e746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return chunk_field(h, c, FREE_NEXT);
   1e74a:	2203      	movs	r2, #3
   1e74c:	4621      	mov	r1, r4
   1e74e:	4628      	mov	r0, r5
   1e750:	f7ff ff0c 	bl	1e56c <chunk_field>
		} while (--i && b->next != first);
   1e754:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   1e756:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   1e75a:	d001      	beq.n	1e760 <alloc_chunk+0x54>
   1e75c:	4581      	cmp	r9, r0
   1e75e:	d1e4      	bne.n	1e72a <alloc_chunk+0x1e>
	uint32_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   1e760:	68e9      	ldr	r1, [r5, #12]
   1e762:	3601      	adds	r6, #1
   1e764:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1e768:	40b4      	lsls	r4, r6
	if (bmask != 0U) {
   1e76a:	400c      	ands	r4, r1
   1e76c:	d0ea      	beq.n	1e744 <alloc_chunk+0x38>
		int minbucket = __builtin_ctz(bmask);
   1e76e:	fa94 f2a4 	rbit	r2, r4
   1e772:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1e776:	1d13      	adds	r3, r2, #4
   1e778:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
   1e77c:	e7de      	b.n	1e73c <alloc_chunk+0x30>

0001e77e <free_list_add>:
{
   1e77e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e782:	4604      	mov	r4, r0
   1e784:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   1e786:	f7ff ff07 	bl	1e598 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   1e78a:	68a3      	ldr	r3, [r4, #8]
   1e78c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1e790:	4601      	mov	r1, r0
   1e792:	d301      	bcc.n	1e798 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   1e794:	2801      	cmp	r0, #1
   1e796:	d035      	beq.n	1e804 <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1e798:	4620      	mov	r0, r4
   1e79a:	f7ff ff1f 	bl	1e5dc <bucket_idx>
	if (b->next == 0U) {
   1e79e:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   1e7a2:	6916      	ldr	r6, [r2, #16]
   1e7a4:	b99e      	cbnz	r6, 1e7ce <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   1e7a6:	2301      	movs	r3, #1
   1e7a8:	fa03 f000 	lsl.w	r0, r3, r0
   1e7ac:	68e3      	ldr	r3, [r4, #12]
   1e7ae:	4303      	orrs	r3, r0
   1e7b0:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   1e7b2:	4629      	mov	r1, r5
		b->next = c;
   1e7b4:	6115      	str	r5, [r2, #16]
   1e7b6:	462b      	mov	r3, r5
   1e7b8:	2202      	movs	r2, #2
   1e7ba:	4620      	mov	r0, r4
   1e7bc:	f7ff fee1 	bl	1e582 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1e7c0:	2203      	movs	r2, #3
   1e7c2:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   1e7c4:	4620      	mov	r0, r4
}
   1e7c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1e7ca:	f7ff beda 	b.w	1e582 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   1e7ce:	2202      	movs	r2, #2
   1e7d0:	4631      	mov	r1, r6
   1e7d2:	4620      	mov	r0, r4
   1e7d4:	f7ff feca 	bl	1e56c <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
   1e7d8:	2202      	movs	r2, #2
   1e7da:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
   1e7dc:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   1e7de:	4629      	mov	r1, r5
   1e7e0:	4620      	mov	r0, r4
   1e7e2:	f7ff fece 	bl	1e582 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1e7e6:	4633      	mov	r3, r6
   1e7e8:	2203      	movs	r2, #3
   1e7ea:	4629      	mov	r1, r5
   1e7ec:	4620      	mov	r0, r4
   1e7ee:	f7ff fec8 	bl	1e582 <chunk_set>
   1e7f2:	2203      	movs	r2, #3
   1e7f4:	4639      	mov	r1, r7
   1e7f6:	462b      	mov	r3, r5
   1e7f8:	4620      	mov	r0, r4
   1e7fa:	f7ff fec2 	bl	1e582 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1e7fe:	2202      	movs	r2, #2
   1e800:	4631      	mov	r1, r6
   1e802:	e7df      	b.n	1e7c4 <free_list_add+0x46>
   1e804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001e808 <free_chunk>:
{
   1e808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e80a:	460c      	mov	r4, r1
   1e80c:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   1e80e:	f7ff fec3 	bl	1e598 <chunk_size>
   1e812:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1e814:	2201      	movs	r2, #1
   1e816:	4631      	mov	r1, r6
   1e818:	4628      	mov	r0, r5
   1e81a:	f7ff fea7 	bl	1e56c <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   1e81e:	07c3      	lsls	r3, r0, #31
   1e820:	d40c      	bmi.n	1e83c <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
   1e822:	4631      	mov	r1, r6
   1e824:	4628      	mov	r0, r5
   1e826:	f7ff ff5a 	bl	1e6de <free_list_remove>
	return c + chunk_size(h, c);
   1e82a:	4621      	mov	r1, r4
   1e82c:	4628      	mov	r0, r5
   1e82e:	f7ff feb3 	bl	1e598 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1e832:	4621      	mov	r1, r4
   1e834:	1822      	adds	r2, r4, r0
   1e836:	4628      	mov	r0, r5
   1e838:	f7ff fedd 	bl	1e5f6 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   1e83c:	2200      	movs	r2, #0
   1e83e:	4621      	mov	r1, r4
   1e840:	4628      	mov	r0, r5
   1e842:	f7ff fe93 	bl	1e56c <chunk_field>
   1e846:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1e848:	2201      	movs	r2, #1
   1e84a:	4639      	mov	r1, r7
   1e84c:	4628      	mov	r0, r5
   1e84e:	f7ff fe8d 	bl	1e56c <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   1e852:	f010 0601 	ands.w	r6, r0, #1
   1e856:	d113      	bne.n	1e880 <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
   1e858:	4639      	mov	r1, r7
   1e85a:	4628      	mov	r0, r5
   1e85c:	f7ff ff3f 	bl	1e6de <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   1e860:	4621      	mov	r1, r4
   1e862:	4632      	mov	r2, r6
   1e864:	4628      	mov	r0, r5
   1e866:	f7ff fe81 	bl	1e56c <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   1e86a:	4622      	mov	r2, r4
   1e86c:	1a21      	subs	r1, r4, r0
   1e86e:	4628      	mov	r0, r5
   1e870:	f7ff fec1 	bl	1e5f6 <merge_chunks>
   1e874:	4621      	mov	r1, r4
   1e876:	4632      	mov	r2, r6
   1e878:	4628      	mov	r0, r5
   1e87a:	f7ff fe77 	bl	1e56c <chunk_field>
   1e87e:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   1e880:	4621      	mov	r1, r4
   1e882:	4628      	mov	r0, r5
}
   1e884:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   1e888:	f7ff bf79 	b.w	1e77e <free_list_add>

0001e88c <sys_heap_free>:
{
   1e88c:	b510      	push	{r4, lr}
	if (mem == NULL) {
   1e88e:	b191      	cbz	r1, 1e8b6 <sys_heap_free+0x2a>
	struct z_heap *h = heap->heap;
   1e890:	6800      	ldr	r0, [r0, #0]
	return big_heap(h) ? 8 : 4;
   1e892:	6883      	ldr	r3, [r0, #8]
   1e894:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1e898:	bf2c      	ite	cs
   1e89a:	2408      	movcs	r4, #8
   1e89c:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1e89e:	1b0c      	subs	r4, r1, r4
   1e8a0:	1a24      	subs	r4, r4, r0
   1e8a2:	08e4      	lsrs	r4, r4, #3
	set_chunk_used(h, c, false);
   1e8a4:	4621      	mov	r1, r4
   1e8a6:	2200      	movs	r2, #0
   1e8a8:	f7ff fe7c 	bl	1e5a4 <set_chunk_used>
	free_chunk(h, c);
   1e8ac:	4621      	mov	r1, r4
}
   1e8ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	free_chunk(h, c);
   1e8b2:	f7ff bfa9 	b.w	1e808 <free_chunk>
}
   1e8b6:	bd10      	pop	{r4, pc}

0001e8b8 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   1e8b8:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   1e8ba:	6805      	ldr	r5, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
   1e8bc:	b909      	cbnz	r1, 1e8c2 <sys_heap_alloc+0xa>
		return NULL;
   1e8be:	2000      	movs	r0, #0
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}
   1e8c0:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   1e8c2:	68ab      	ldr	r3, [r5, #8]
   1e8c4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1e8c8:	d9f9      	bls.n	1e8be <sys_heap_alloc+0x6>
   1e8ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1e8ce:	bf2c      	ite	cs
   1e8d0:	2208      	movcs	r2, #8
   1e8d2:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1e8d4:	1dcc      	adds	r4, r1, #7
   1e8d6:	4414      	add	r4, r2
   1e8d8:	08e4      	lsrs	r4, r4, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1e8da:	4621      	mov	r1, r4
   1e8dc:	4628      	mov	r0, r5
   1e8de:	f7ff ff15 	bl	1e70c <alloc_chunk>
	if (c == 0U) {
   1e8e2:	4606      	mov	r6, r0
   1e8e4:	2800      	cmp	r0, #0
   1e8e6:	d0ea      	beq.n	1e8be <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   1e8e8:	4601      	mov	r1, r0
   1e8ea:	4628      	mov	r0, r5
   1e8ec:	f7ff fe54 	bl	1e598 <chunk_size>
   1e8f0:	42a0      	cmp	r0, r4
   1e8f2:	d909      	bls.n	1e908 <sys_heap_alloc+0x50>
		split_chunks(h, c, c + chunk_sz);
   1e8f4:	4434      	add	r4, r6
   1e8f6:	4631      	mov	r1, r6
   1e8f8:	4628      	mov	r0, r5
   1e8fa:	4622      	mov	r2, r4
   1e8fc:	f7ff fe99 	bl	1e632 <split_chunks>
		free_list_add(h, c + chunk_sz);
   1e900:	4621      	mov	r1, r4
   1e902:	4628      	mov	r0, r5
   1e904:	f7ff ff3b 	bl	1e77e <free_list_add>
	set_chunk_used(h, c, true);
   1e908:	4628      	mov	r0, r5
   1e90a:	2201      	movs	r2, #1
   1e90c:	4631      	mov	r1, r6
   1e90e:	f7ff fe49 	bl	1e5a4 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   1e912:	68ab      	ldr	r3, [r5, #8]
   1e914:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1e918:	bf2c      	ite	cs
   1e91a:	2008      	movcs	r0, #8
   1e91c:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1e91e:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
   1e922:	4428      	add	r0, r5
	return chunk_mem(h, c);
   1e924:	e7cc      	b.n	1e8c0 <sys_heap_alloc+0x8>

0001e926 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   1e926:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_heap *h = heap->heap;
   1e92a:	6806      	ldr	r6, [r0, #0]
{
   1e92c:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   1e92e:	424a      	negs	r2, r1
   1e930:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
   1e934:	ea31 0202 	bics.w	r2, r1, r2
   1e938:	68b5      	ldr	r5, [r6, #8]
{
   1e93a:	460b      	mov	r3, r1
	if (align != rew) {
   1e93c:	d00f      	beq.n	1e95e <sys_heap_aligned_alloc+0x38>
   1e93e:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   1e942:	bf34      	ite	cc
   1e944:	2104      	movcc	r1, #4
   1e946:	2108      	movcs	r1, #8
   1e948:	42b9      	cmp	r1, r7
   1e94a:	460a      	mov	r2, r1
   1e94c:	46b9      	mov	r9, r7
   1e94e:	bf28      	it	cs
   1e950:	463a      	movcs	r2, r7
		align -= rew;
   1e952:	1bdf      	subs	r7, r3, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   1e954:	b994      	cbnz	r4, 1e97c <sys_heap_aligned_alloc+0x56>
		return NULL;
   1e956:	2500      	movs	r5, #0
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
   1e958:	4628      	mov	r0, r5
   1e95a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e95e:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   1e962:	bf34      	ite	cc
   1e964:	2204      	movcc	r2, #4
   1e966:	2208      	movcs	r2, #8
		if (align <= chunk_header_bytes(h)) {
   1e968:	4291      	cmp	r1, r2
   1e96a:	d804      	bhi.n	1e976 <sys_heap_aligned_alloc+0x50>
			return sys_heap_alloc(heap, bytes);
   1e96c:	4621      	mov	r1, r4
}
   1e96e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   1e972:	f7ff bfa1 	b.w	1e8b8 <sys_heap_alloc>
		rew = 0;
   1e976:	f04f 0900 	mov.w	r9, #0
   1e97a:	e7eb      	b.n	1e954 <sys_heap_aligned_alloc+0x2e>
	if (bytes == 0 || size_too_big(h, bytes)) {
   1e97c:	ebb5 0fd4 	cmp.w	r5, r4, lsr #3
   1e980:	d9e9      	bls.n	1e956 <sys_heap_aligned_alloc+0x30>
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   1e982:	1de1      	adds	r1, r4, #7
   1e984:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   1e988:	4439      	add	r1, r7
   1e98a:	bf2c      	ite	cs
   1e98c:	2308      	movcs	r3, #8
   1e98e:	2304      	movcc	r3, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1e990:	1a89      	subs	r1, r1, r2
   1e992:	4419      	add	r1, r3
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   1e994:	08c9      	lsrs	r1, r1, #3
   1e996:	4630      	mov	r0, r6
   1e998:	f7ff feb8 	bl	1e70c <alloc_chunk>
	if (c0 == 0) {
   1e99c:	4680      	mov	r8, r0
   1e99e:	2800      	cmp	r0, #0
   1e9a0:	d0d9      	beq.n	1e956 <sys_heap_aligned_alloc+0x30>
	return big_heap(h) ? 8 : 4;
   1e9a2:	68b3      	ldr	r3, [r6, #8]
   1e9a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1e9a8:	bf2c      	ite	cs
   1e9aa:	2308      	movcs	r3, #8
   1e9ac:	2304      	movcc	r3, #4
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   1e9ae:	eb09 05c0 	add.w	r5, r9, r0, lsl #3
   1e9b2:	441d      	add	r5, r3
   1e9b4:	1e7a      	subs	r2, r7, #1
   1e9b6:	4435      	add	r5, r6
   1e9b8:	427f      	negs	r7, r7
   1e9ba:	4415      	add	r5, r2
   1e9bc:	403d      	ands	r5, r7
   1e9be:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1e9c2:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1e9c4:	1aeb      	subs	r3, r5, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1e9c6:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1e9c8:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1e9ca:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   1e9ce:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   1e9d0:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1e9d4:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   1e9d8:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   1e9dc:	d208      	bcs.n	1e9f0 <sys_heap_aligned_alloc+0xca>
		split_chunks(h, c0, c);
   1e9de:	4601      	mov	r1, r0
   1e9e0:	463a      	mov	r2, r7
   1e9e2:	4630      	mov	r0, r6
   1e9e4:	f7ff fe25 	bl	1e632 <split_chunks>
		free_list_add(h, c0);
   1e9e8:	4641      	mov	r1, r8
   1e9ea:	4630      	mov	r0, r6
   1e9ec:	f7ff fec7 	bl	1e77e <free_list_add>
	return c + chunk_size(h, c);
   1e9f0:	4639      	mov	r1, r7
   1e9f2:	4630      	mov	r0, r6
   1e9f4:	f7ff fdd0 	bl	1e598 <chunk_size>
   1e9f8:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   1e9fa:	4284      	cmp	r4, r0
   1e9fc:	d208      	bcs.n	1ea10 <sys_heap_aligned_alloc+0xea>
		split_chunks(h, c, c_end);
   1e9fe:	4639      	mov	r1, r7
   1ea00:	4630      	mov	r0, r6
   1ea02:	4622      	mov	r2, r4
   1ea04:	f7ff fe15 	bl	1e632 <split_chunks>
		free_list_add(h, c_end);
   1ea08:	4621      	mov	r1, r4
   1ea0a:	4630      	mov	r0, r6
   1ea0c:	f7ff feb7 	bl	1e77e <free_list_add>
	set_chunk_used(h, c, true);
   1ea10:	2201      	movs	r2, #1
   1ea12:	4639      	mov	r1, r7
   1ea14:	4630      	mov	r0, r6
   1ea16:	f7ff fdc5 	bl	1e5a4 <set_chunk_used>
	return mem;
   1ea1a:	e79d      	b.n	1e958 <sys_heap_aligned_alloc+0x32>

0001ea1c <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   1ea1c:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   1ea20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ea22:	bf2c      	ite	cs
   1ea24:	2508      	movcs	r5, #8
   1ea26:	2504      	movcc	r5, #4
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   1ea28:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1ea2a:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1ea2c:	440d      	add	r5, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1ea2e:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1ea32:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1ea36:	1b2d      	subs	r5, r5, r4
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   1ea38:	2300      	movs	r3, #0
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1ea3a:	08ed      	lsrs	r5, r5, #3
	heap->heap = h;
   1ea3c:	6004      	str	r4, [r0, #0]

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1ea3e:	4629      	mov	r1, r5
	h->end_chunk = heap_sz;
   1ea40:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
   1ea42:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1ea44:	4620      	mov	r0, r4
   1ea46:	f7ff fdc9 	bl	1e5dc <bucket_idx>
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1ea4a:	0086      	lsls	r6, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1ea4c:	361b      	adds	r6, #27
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1ea4e:	1c41      	adds	r1, r0, #1
   1ea50:	08f6      	lsrs	r6, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   1ea52:	f104 0210 	add.w	r2, r4, #16
		h->buckets[i].next = 0;
   1ea56:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
   1ea58:	428b      	cmp	r3, r1
   1ea5a:	db2f      	blt.n	1eabc <sys_heap_init+0xa0>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   1ea5c:	4632      	mov	r2, r6
   1ea5e:	4620      	mov	r0, r4
   1ea60:	2100      	movs	r1, #0
   1ea62:	f7ff fdb7 	bl	1e5d4 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1ea66:	2300      	movs	r3, #0
   1ea68:	461a      	mov	r2, r3
   1ea6a:	4619      	mov	r1, r3
   1ea6c:	4620      	mov	r0, r4
   1ea6e:	f7ff fd88 	bl	1e582 <chunk_set>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1ea72:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
   1ea74:	4620      	mov	r0, r4
   1ea76:	2201      	movs	r2, #1
   1ea78:	2100      	movs	r1, #0
   1ea7a:	f7ff fd93 	bl	1e5a4 <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1ea7e:	463a      	mov	r2, r7
   1ea80:	4631      	mov	r1, r6
   1ea82:	f7ff fda7 	bl	1e5d4 <set_chunk_size>
   1ea86:	4633      	mov	r3, r6
   1ea88:	4631      	mov	r1, r6
   1ea8a:	4620      	mov	r0, r4
   1ea8c:	2200      	movs	r2, #0
   1ea8e:	f7ff fd78 	bl	1e582 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
   1ea92:	4629      	mov	r1, r5
   1ea94:	4620      	mov	r0, r4
   1ea96:	2200      	movs	r2, #0
   1ea98:	f7ff fd9c 	bl	1e5d4 <set_chunk_size>
   1ea9c:	463b      	mov	r3, r7
   1ea9e:	4629      	mov	r1, r5
   1eaa0:	4620      	mov	r0, r4
   1eaa2:	2200      	movs	r2, #0
   1eaa4:	f7ff fd6d 	bl	1e582 <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
   1eaa8:	4629      	mov	r1, r5
   1eaaa:	4620      	mov	r0, r4
   1eaac:	2201      	movs	r2, #1
   1eaae:	f7ff fd79 	bl	1e5a4 <set_chunk_used>

	free_list_add(h, chunk0_size);
   1eab2:	4631      	mov	r1, r6
}
   1eab4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   1eab8:	f7ff be61 	b.w	1e77e <free_list_add>
		h->buckets[i].next = 0;
   1eabc:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   1eac0:	3301      	adds	r3, #1
   1eac2:	e7c9      	b.n	1ea58 <sys_heap_init+0x3c>

0001eac4 <outs>:
{
   1eac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1eac8:	4607      	mov	r7, r0
   1eaca:	4688      	mov	r8, r1
   1eacc:	4615      	mov	r5, r2
   1eace:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1ead0:	4614      	mov	r4, r2
   1ead2:	42b4      	cmp	r4, r6
   1ead4:	eba4 0005 	sub.w	r0, r4, r5
   1ead8:	d302      	bcc.n	1eae0 <outs+0x1c>
   1eada:	b93e      	cbnz	r6, 1eaec <outs+0x28>
   1eadc:	7823      	ldrb	r3, [r4, #0]
   1eade:	b12b      	cbz	r3, 1eaec <outs+0x28>
		int rc = out((int)*sp++, ctx);
   1eae0:	f814 0b01 	ldrb.w	r0, [r4], #1
   1eae4:	4641      	mov	r1, r8
   1eae6:	47b8      	blx	r7
		if (rc < 0) {
   1eae8:	2800      	cmp	r0, #0
   1eaea:	daf2      	bge.n	1ead2 <outs+0xe>
}
   1eaec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001eaf0 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1eaf0:	4770      	bx	lr

0001eaf2 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   1eaf2:	2300      	movs	r3, #0
	list->head = NULL;
   1eaf4:	e9c0 3300 	strd	r3, r3, [r0]
}
   1eaf8:	4770      	bx	lr

0001eafa <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   1eafa:	6803      	ldr	r3, [r0, #0]
   1eafc:	b923      	cbnz	r3, 1eb08 <log_list_add_tail+0xe>
		list->head = msg;
   1eafe:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   1eb00:	2300      	movs	r3, #0
	list->tail = msg;
   1eb02:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   1eb04:	600b      	str	r3, [r1, #0]
}
   1eb06:	4770      	bx	lr
		list->tail->next = msg;
   1eb08:	6843      	ldr	r3, [r0, #4]
   1eb0a:	6019      	str	r1, [r3, #0]
   1eb0c:	e7f8      	b.n	1eb00 <log_list_add_tail+0x6>

0001eb0e <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   1eb0e:	6800      	ldr	r0, [r0, #0]
   1eb10:	4770      	bx	lr

0001eb12 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   1eb12:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   1eb14:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   1eb16:	b108      	cbz	r0, 1eb1c <log_list_head_get+0xa>
		list->head = list->head->next;
   1eb18:	6802      	ldr	r2, [r0, #0]
   1eb1a:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   1eb1c:	4770      	bx	lr

0001eb1e <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   1eb1e:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1eb20:	f7e5 faca 	bl	40b8 <log_msg_chunk_alloc>

	if (msg != NULL) {
   1eb24:	b118      	cbz	r0, 1eb2e <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   1eb26:	2301      	movs	r3, #1
   1eb28:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1eb2a:	2300      	movs	r3, #0
   1eb2c:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   1eb2e:	bd08      	pop	{r3, pc}

0001eb30 <k_cycle_get_32_wrapper>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   1eb30:	f7e6 ba3c 	b.w	4fac <sys_clock_cycle_get_32>

0001eb34 <dummy_timestamp>:
   1eb34:	2000      	movs	r0, #0
   1eb36:	4770      	bx	lr

0001eb38 <log_0>:
{
   1eb38:	b538      	push	{r3, r4, r5, lr}
   1eb3a:	4605      	mov	r5, r0
   1eb3c:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   1eb3e:	f7ff ffee 	bl	1eb1e <z_log_msg_std_alloc>

	if (msg != NULL) {
   1eb42:	b128      	cbz	r0, 1eb50 <log_0+0x18>
		msg->str = str;
   1eb44:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
   1eb46:	4621      	mov	r1, r4
}
   1eb48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   1eb4c:	f7e5 b9ce 	b.w	3eec <msg_finalize>
}
   1eb50:	bd38      	pop	{r3, r4, r5, pc}

0001eb52 <log_1>:
{
   1eb52:	b570      	push	{r4, r5, r6, lr}
   1eb54:	4606      	mov	r6, r0
   1eb56:	460d      	mov	r5, r1
   1eb58:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1eb5a:	f7ff ffe0 	bl	1eb1e <z_log_msg_std_alloc>

	if (msg != NULL) {
   1eb5e:	b158      	cbz	r0, 1eb78 <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   1eb60:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
   1eb62:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   1eb64:	2101      	movs	r1, #1
   1eb66:	f361 1207 	bfi	r2, r1, #4, #4
   1eb6a:	7242      	strb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
   1eb6c:	6145      	str	r5, [r0, #20]
		msg_finalize(msg, src_level);
   1eb6e:	4621      	mov	r1, r4
}
   1eb70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   1eb74:	f7e5 b9ba 	b.w	3eec <msg_finalize>
}
   1eb78:	bd70      	pop	{r4, r5, r6, pc}

0001eb7a <log_2>:
{
   1eb7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1eb7e:	4680      	mov	r8, r0
   1eb80:	460f      	mov	r7, r1
   1eb82:	4616      	mov	r6, r2
   1eb84:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1eb86:	f7ff ffca 	bl	1eb1e <z_log_msg_std_alloc>

	if (msg != NULL) {
   1eb8a:	b168      	cbz	r0, 1eba8 <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   1eb8c:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   1eb8e:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   1eb92:	2202      	movs	r2, #2
   1eb94:	f362 1307 	bfi	r3, r2, #4, #4
   1eb98:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1eb9a:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg_finalize(msg, src_level);
   1eb9e:	4629      	mov	r1, r5
}
   1eba0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   1eba4:	f7e5 b9a2 	b.w	3eec <msg_finalize>
}
   1eba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ebac <log_3>:
{
   1ebac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ebb0:	4680      	mov	r8, r0
   1ebb2:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   1ebb6:	460f      	mov	r7, r1
   1ebb8:	4616      	mov	r6, r2
   1ebba:	461d      	mov	r5, r3
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1ebbc:	f7ff ffaf 	bl	1eb1e <z_log_msg_std_alloc>

	if (msg != NULL) {
   1ebc0:	b170      	cbz	r0, 1ebe0 <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   1ebc2:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   1ebc4:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   1ebc8:	2203      	movs	r2, #3
   1ebca:	f362 1307 	bfi	r3, r2, #4, #4
   1ebce:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1ebd0:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->payload.single.args[2] = arg3;
   1ebd4:	61c5      	str	r5, [r0, #28]
		msg_finalize(msg, src_level);
   1ebd6:	4649      	mov	r1, r9
}
   1ebd8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   1ebdc:	f7e5 b986 	b.w	3eec <msg_finalize>
}
   1ebe0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001ebe4 <log_n>:
{
   1ebe4:	b510      	push	{r4, lr}
   1ebe6:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   1ebe8:	f000 f8b9 	bl	1ed5e <log_msg_create_n>
		if (msg == NULL) {
   1ebec:	b120      	cbz	r0, 1ebf8 <log_n+0x14>
		msg_finalize(msg, src_level);
   1ebee:	4621      	mov	r1, r4
}
   1ebf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   1ebf4:	f7e5 b97a 	b.w	3eec <msg_finalize>
}
   1ebf8:	bd10      	pop	{r4, pc}

0001ebfa <log_printk>:
{
   1ebfa:	b500      	push	{lr}
   1ebfc:	b0a3      	sub	sp, #140	; 0x8c
   1ebfe:	4602      	mov	r2, r0
   1ec00:	460b      	mov	r3, r1
			length = vsnprintk(str, sizeof(str), fmt, ap);
   1ec02:	a801      	add	r0, sp, #4
   1ec04:	2181      	movs	r1, #129	; 0x81
   1ec06:	f7e4 fa79 	bl	30fc <vsnprintk>
			msg = log_msg_hexdump_create(NULL, str, length);
   1ec0a:	2881      	cmp	r0, #129	; 0x81
   1ec0c:	4602      	mov	r2, r0
   1ec0e:	a901      	add	r1, sp, #4
   1ec10:	bf28      	it	cs
   1ec12:	2281      	movcs	r2, #129	; 0x81
   1ec14:	2000      	movs	r0, #0
   1ec16:	f000 f8f6 	bl	1ee06 <log_msg_hexdump_create>
			if (msg == NULL) {
   1ec1a:	b118      	cbz	r0, 1ec24 <log_printk+0x2a>
			msg_finalize(msg, src_level_union.structure);
   1ec1c:	f04f 0100 	mov.w	r1, #0
   1ec20:	f7e5 f964 	bl	3eec <msg_finalize>
}
   1ec24:	b023      	add	sp, #140	; 0x8c
   1ec26:	f85d fb04 	ldr.w	pc, [sp], #4

0001ec2a <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   1ec2a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ec2e:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
   1ec30:	8903      	ldrh	r3, [r0, #8]
{
   1ec32:	f89d 8020 	ldrb.w	r8, [sp, #32]
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   1ec36:	ebb4 0f93 	cmp.w	r4, r3, lsr #2
{
   1ec3a:	460e      	mov	r6, r1
   1ec3c:	4611      	mov	r1, r2
	uint32_t available_len = msg->hdr.params.hexdump.length;
   1ec3e:	ea4f 0293 	mov.w	r2, r3, lsr #2
	if (offset >= available_len) {
   1ec42:	d303      	bcc.n	1ec4c <log_msg_hexdump_data_op+0x22>
		*length = 0;
   1ec44:	2300      	movs	r3, #0
   1ec46:	600b      	str	r3, [r1, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   1ec48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   1ec4c:	680b      	ldr	r3, [r1, #0]
   1ec4e:	4423      	add	r3, r4
   1ec50:	4293      	cmp	r3, r2
		*length = available_len - offset;
   1ec52:	bf84      	itt	hi
   1ec54:	1b13      	subhi	r3, r2, r4
   1ec56:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1ec58:	2a0c      	cmp	r2, #12
	req_len = *length;
   1ec5a:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1ec5e:	d92b      	bls.n	1ecb8 <log_msg_hexdump_data_op+0x8e>
	if (offset < chunk_len) {
   1ec60:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   1ec62:	6947      	ldr	r7, [r0, #20]
	if (offset < chunk_len) {
   1ec64:	d82e      	bhi.n	1ecc4 <log_msg_hexdump_data_op+0x9a>
		head_data = msg->payload.ext.data.bytes;
   1ec66:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1ec68:	2208      	movs	r2, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1ec6a:	454a      	cmp	r2, r9
   1ec6c:	bf28      	it	cs
   1ec6e:	464a      	movcs	r2, r9
   1ec70:	4615      	mov	r5, r2
		if (put_op) {
   1ec72:	4420      	add	r0, r4
   1ec74:	f1b8 0f00 	cmp.w	r8, #0
   1ec78:	d021      	beq.n	1ecbe <log_msg_hexdump_data_op+0x94>
   1ec7a:	4631      	mov	r1, r6
   1ec7c:	f004 fcf1 	bl	23662 <memcpy>
		req_len -= cpy_len;
   1ec80:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   1ec84:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
   1ec86:	f1b9 0f00 	cmp.w	r9, #0
   1ec8a:	d0dd      	beq.n	1ec48 <log_msg_hexdump_data_op+0x1e>
   1ec8c:	2f00      	cmp	r7, #0
   1ec8e:	d0db      	beq.n	1ec48 <log_msg_hexdump_data_op+0x1e>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   1ec90:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1ec94:	454d      	cmp	r5, r9
   1ec96:	bf28      	it	cs
   1ec98:	464d      	movcs	r5, r9
		if (put_op) {
   1ec9a:	1d20      	adds	r0, r4, #4
   1ec9c:	4438      	add	r0, r7
   1ec9e:	462a      	mov	r2, r5
   1eca0:	f1b8 0f00 	cmp.w	r8, #0
   1eca4:	d014      	beq.n	1ecd0 <log_msg_hexdump_data_op+0xa6>
   1eca6:	4631      	mov	r1, r6
   1eca8:	f004 fcdb 	bl	23662 <memcpy>
		req_len -= cpy_len;
   1ecac:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
   1ecb0:	683f      	ldr	r7, [r7, #0]
		data += cpy_len;
   1ecb2:	442e      	add	r6, r5
		offset = 0;
   1ecb4:	2400      	movs	r4, #0
   1ecb6:	e7e6      	b.n	1ec86 <log_msg_hexdump_data_op+0x5c>
		head_data = msg->payload.single.bytes;
   1ecb8:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
   1ecba:	2700      	movs	r7, #0
   1ecbc:	e7d5      	b.n	1ec6a <log_msg_hexdump_data_op+0x40>
   1ecbe:	4601      	mov	r1, r0
   1ecc0:	4630      	mov	r0, r6
   1ecc2:	e7db      	b.n	1ec7c <log_msg_hexdump_data_op+0x52>
		offset -= chunk_len;
   1ecc4:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   1ecc6:	2c1b      	cmp	r4, #27
   1ecc8:	d9dd      	bls.n	1ec86 <log_msg_hexdump_data_op+0x5c>
			cont = cont->next;
   1ecca:	683f      	ldr	r7, [r7, #0]
			offset -= chunk_len;
   1eccc:	3c1c      	subs	r4, #28
   1ecce:	e7fa      	b.n	1ecc6 <log_msg_hexdump_data_op+0x9c>
   1ecd0:	4601      	mov	r1, r0
   1ecd2:	4630      	mov	r0, r6
   1ecd4:	e7e8      	b.n	1eca8 <log_msg_hexdump_data_op+0x7e>

0001ecd6 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1ecd6:	3004      	adds	r0, #4
   1ecd8:	f3bf 8f5b 	dmb	ish
   1ecdc:	e850 3f00 	ldrex	r3, [r0]
   1ece0:	3301      	adds	r3, #1
   1ece2:	e840 3200 	strex	r2, r3, [r0]
   1ece6:	2a00      	cmp	r2, #0
   1ece8:	d1f8      	bne.n	1ecdc <log_msg_get+0x6>
   1ecea:	f3bf 8f5b 	dmb	ish
}
   1ecee:	4770      	bx	lr

0001ecf0 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   1ecf0:	7a40      	ldrb	r0, [r0, #9]
}
   1ecf2:	0900      	lsrs	r0, r0, #4
   1ecf4:	4770      	bx	lr

0001ecf6 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   1ecf6:	7a43      	ldrb	r3, [r0, #9]
   1ecf8:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   1ecfc:	ea4f 1213 	mov.w	r2, r3, lsr #4
   1ed00:	d216      	bcs.n	1ed30 <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1ed02:	2a03      	cmp	r2, #3
   1ed04:	d803      	bhi.n	1ed0e <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   1ed06:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1ed0a:	6948      	ldr	r0, [r1, #20]
   1ed0c:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   1ed0e:	2901      	cmp	r1, #1
   1ed10:	d803      	bhi.n	1ed1a <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   1ed12:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1ed16:	6988      	ldr	r0, [r1, #24]
   1ed18:	4770      	bx	lr
	cont = msg->payload.ext.next;
   1ed1a:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   1ed1c:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   1ed1e:	2906      	cmp	r1, #6
   1ed20:	d803      	bhi.n	1ed2a <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   1ed22:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1ed26:	6848      	ldr	r0, [r1, #4]
   1ed28:	4770      	bx	lr
		cont = cont->next;
   1ed2a:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   1ed2c:	3907      	subs	r1, #7
		cont = cont->next;
   1ed2e:	e7f6      	b.n	1ed1e <log_msg_arg_get+0x28>
		return 0;
   1ed30:	2000      	movs	r0, #0
}
   1ed32:	4770      	bx	lr

0001ed34 <log_msg_put>:
{
   1ed34:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1ed36:	1d02      	adds	r2, r0, #4
   1ed38:	f3bf 8f5b 	dmb	ish
   1ed3c:	e852 1f00 	ldrex	r1, [r2]
   1ed40:	3901      	subs	r1, #1
   1ed42:	e842 1c00 	strex	ip, r1, [r2]
   1ed46:	f1bc 0f00 	cmp.w	ip, #0
   1ed4a:	d1f7      	bne.n	1ed3c <log_msg_put+0x8>
   1ed4c:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   1ed50:	685b      	ldr	r3, [r3, #4]
   1ed52:	b90b      	cbnz	r3, 1ed58 <log_msg_put+0x24>
		msg_free(msg);
   1ed54:	f7e5 b9c4 	b.w	40e0 <msg_free>
}
   1ed58:	4770      	bx	lr

0001ed5a <log_msg_str_get>:
}
   1ed5a:	6900      	ldr	r0, [r0, #16]
   1ed5c:	4770      	bx	lr

0001ed5e <log_msg_create_n>:
{
   1ed5e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ed62:	4681      	mov	r9, r0
   1ed64:	4688      	mov	r8, r1
   1ed66:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1ed68:	f7e5 f9a6 	bl	40b8 <log_msg_chunk_alloc>
	if (msg != NULL) {
   1ed6c:	4604      	mov	r4, r0
   1ed6e:	b330      	cbz	r0, 1edbe <log_msg_create_n+0x60>
		msg->hdr.ref_cnt = 1;
   1ed70:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   1ed72:	2700      	movs	r7, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1ed74:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   1ed76:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1ed78:	8107      	strh	r7, [r0, #8]
   1ed7a:	d909      	bls.n	1ed90 <log_msg_create_n+0x32>
	msg->hdr.params.generic.ext = 1;
   1ed7c:	2202      	movs	r2, #2
   1ed7e:	8102      	strh	r2, [r0, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   1ed80:	f1a5 0a02 	sub.w	sl, r5, #2
	next = &msg->payload.ext.next;
   1ed84:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
   1ed88:	6147      	str	r7, [r0, #20]
	while (n > 0) {
   1ed8a:	f1ba 0f00 	cmp.w	sl, #0
   1ed8e:	dc0e      	bgt.n	1edae <log_msg_create_n+0x50>
		msg->hdr.params.std.nargs = nargs;
   1ed90:	7a63      	ldrb	r3, [r4, #9]
		msg->str = str;
   1ed92:	f8c4 9010 	str.w	r9, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   1ed96:	f365 1307 	bfi	r3, r5, #4, #4
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1ed9a:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   1ed9c:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1ed9e:	d818      	bhi.n	1edd2 <log_msg_create_n+0x74>
   1eda0:	00aa      	lsls	r2, r5, #2
   1eda2:	4641      	mov	r1, r8
   1eda4:	f104 0014 	add.w	r0, r4, #20
   1eda8:	f004 fc5b 	bl	23662 <memcpy>
	while (nargs != 0U) {
   1edac:	e007      	b.n	1edbe <log_msg_create_n+0x60>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   1edae:	f7e5 f983 	bl	40b8 <log_msg_chunk_alloc>
		if (cont == NULL) {
   1edb2:	4606      	mov	r6, r0
   1edb4:	b930      	cbnz	r0, 1edc4 <log_msg_create_n+0x66>
			msg_free(msg);
   1edb6:	4620      	mov	r0, r4
   1edb8:	f7e5 f992 	bl	40e0 <msg_free>
			return NULL;
   1edbc:	4634      	mov	r4, r6
}
   1edbe:	4620      	mov	r0, r4
   1edc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   1edc4:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   1edc8:	f1aa 0a07 	sub.w	sl, sl, #7
   1edcc:	6007      	str	r7, [r0, #0]
		next = &cont->next;
   1edce:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
   1edd0:	e7db      	b.n	1ed8a <log_msg_create_n+0x2c>
   1edd2:	f8d8 3000 	ldr.w	r3, [r8]
   1edd6:	61a3      	str	r3, [r4, #24]
   1edd8:	f8d8 3004 	ldr.w	r3, [r8, #4]
	struct log_msg_cont *cont = msg->payload.ext.next;
   1eddc:	6967      	ldr	r7, [r4, #20]
   1edde:	61e3      	str	r3, [r4, #28]
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   1ede0:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   1ede2:	f108 0808 	add.w	r8, r8, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   1ede6:	2d07      	cmp	r5, #7
   1ede8:	462e      	mov	r6, r5
   1edea:	bf28      	it	cs
   1edec:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   1edee:	ea4f 0986 	mov.w	r9, r6, lsl #2
   1edf2:	4641      	mov	r1, r8
   1edf4:	1d38      	adds	r0, r7, #4
   1edf6:	464a      	mov	r2, r9
   1edf8:	f004 fc33 	bl	23662 <memcpy>
	while (nargs != 0U) {
   1edfc:	1bad      	subs	r5, r5, r6
		cont = cont->next;
   1edfe:	683f      	ldr	r7, [r7, #0]
		args += cpy_args;
   1ee00:	44c8      	add	r8, r9
	while (nargs != 0U) {
   1ee02:	d1f0      	bne.n	1ede6 <log_msg_create_n+0x88>
   1ee04:	e7db      	b.n	1edbe <log_msg_create_n+0x60>

0001ee06 <log_msg_hexdump_create>:
{
   1ee06:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   1ee0a:	f643 75ff 	movw	r5, #16383	; 0x3fff
   1ee0e:	4295      	cmp	r5, r2
{
   1ee10:	4680      	mov	r8, r0
   1ee12:	460e      	mov	r6, r1
   1ee14:	4617      	mov	r7, r2
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   1ee16:	bf28      	it	cs
   1ee18:	4615      	movcs	r5, r2
	msg = (struct log_msg *)log_msg_chunk_alloc();
   1ee1a:	f7e5 f94d 	bl	40b8 <log_msg_chunk_alloc>
	if (msg == NULL) {
   1ee1e:	4604      	mov	r4, r0
   1ee20:	b378      	cbz	r0, 1ee82 <log_msg_hexdump_create+0x7c>
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   1ee22:	8902      	ldrh	r2, [r0, #8]
	msg->str = str;
   1ee24:	f8c0 8010 	str.w	r8, [r0, #16]
	msg->hdr.ref_cnt = 1;
   1ee28:	2301      	movs	r3, #1
   1ee2a:	6043      	str	r3, [r0, #4]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   1ee2c:	00ab      	lsls	r3, r5, #2
   1ee2e:	f043 0301 	orr.w	r3, r3, #1
   1ee32:	f002 0202 	and.w	r2, r2, #2
   1ee36:	4313      	orrs	r3, r2
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1ee38:	2f0c      	cmp	r7, #12
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   1ee3a:	8103      	strh	r3, [r0, #8]
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1ee3c:	f100 0814 	add.w	r8, r0, #20
   1ee40:	d916      	bls.n	1ee70 <log_msg_hexdump_create+0x6a>
   1ee42:	6833      	ldr	r3, [r6, #0]
		msg->hdr.params.generic.ext = 1;
   1ee44:	7a02      	ldrb	r2, [r0, #8]
   1ee46:	6183      	str	r3, [r0, #24]
   1ee48:	6873      	ldr	r3, [r6, #4]
   1ee4a:	61c3      	str	r3, [r0, #28]
   1ee4c:	f042 0202 	orr.w	r2, r2, #2
		msg->payload.ext.next = NULL;
   1ee50:	2300      	movs	r3, #0
   1ee52:	6143      	str	r3, [r0, #20]
		msg->hdr.params.generic.ext = 1;
   1ee54:	7202      	strb	r2, [r0, #8]
		data += LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1ee56:	3608      	adds	r6, #8
		length -= LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1ee58:	3d08      	subs	r5, #8
	while (length > 0) {
   1ee5a:	4699      	mov	r9, r3
   1ee5c:	b18d      	cbz	r5, 1ee82 <log_msg_hexdump_create+0x7c>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   1ee5e:	f7e5 f92b 	bl	40b8 <log_msg_chunk_alloc>
		if (cont == NULL) {
   1ee62:	4607      	mov	r7, r0
   1ee64:	b980      	cbnz	r0, 1ee88 <log_msg_hexdump_create+0x82>
			msg_free(msg);
   1ee66:	4620      	mov	r0, r4
   1ee68:	f7e5 f93a 	bl	40e0 <msg_free>
			return NULL;
   1ee6c:	463c      	mov	r4, r7
   1ee6e:	e008      	b.n	1ee82 <log_msg_hexdump_create+0x7c>
   1ee70:	462a      	mov	r2, r5
   1ee72:	4631      	mov	r1, r6
   1ee74:	4640      	mov	r0, r8
   1ee76:	f004 fbf4 	bl	23662 <memcpy>
		msg->hdr.params.generic.ext = 0;
   1ee7a:	7a23      	ldrb	r3, [r4, #8]
   1ee7c:	f36f 0341 	bfc	r3, #1, #1
   1ee80:	7223      	strb	r3, [r4, #8]
}
   1ee82:	4620      	mov	r0, r4
   1ee84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		chunk_length = (length > HEXDUMP_BYTES_CONT_MSG) ?
   1ee88:	2d1c      	cmp	r5, #28
   1ee8a:	462f      	mov	r7, r5
   1ee8c:	bf28      	it	cs
   1ee8e:	271c      	movcs	r7, #28
		*prev_cont = cont;
   1ee90:	f8c8 0000 	str.w	r0, [r8]
   1ee94:	4631      	mov	r1, r6
		cont->next = NULL;
   1ee96:	f8c0 9000 	str.w	r9, [r0]
		prev_cont = &cont->next;
   1ee9a:	4680      	mov	r8, r0
   1ee9c:	463a      	mov	r2, r7
   1ee9e:	3004      	adds	r0, #4
   1eea0:	f004 fbdf 	bl	23662 <memcpy>
		data += chunk_length;
   1eea4:	443e      	add	r6, r7
		length -= chunk_length;
   1eea6:	1bed      	subs	r5, r5, r7
   1eea8:	e7d8      	b.n	1ee5c <log_msg_hexdump_create+0x56>

0001eeaa <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   1eeaa:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   1eeac:	2400      	movs	r4, #0
   1eeae:	9400      	str	r4, [sp, #0]
   1eeb0:	f7ff febb 	bl	1ec2a <log_msg_hexdump_data_op>
}
   1eeb4:	b002      	add	sp, #8
   1eeb6:	bd10      	pop	{r4, pc}

0001eeb8 <buffer_write>:
{
   1eeb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1eeba:	4606      	mov	r6, r0
   1eebc:	460d      	mov	r5, r1
   1eebe:	4614      	mov	r4, r2
   1eec0:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   1eec2:	4621      	mov	r1, r4
   1eec4:	4628      	mov	r0, r5
   1eec6:	463a      	mov	r2, r7
   1eec8:	47b0      	blx	r6
	} while (len != 0);
   1eeca:	1a24      	subs	r4, r4, r0
		buf += processed;
   1eecc:	4405      	add	r5, r0
	} while (len != 0);
   1eece:	d1f8      	bne.n	1eec2 <buffer_write+0xa>
}
   1eed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001eed2 <std_print>:
{
   1eed2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1eed6:	b08e      	sub	sp, #56	; 0x38
   1eed8:	af0e      	add	r7, sp, #56	; 0x38
   1eeda:	4680      	mov	r8, r0
   1eedc:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   1eede:	f7ff ff3c 	bl	1ed5a <log_msg_str_get>
   1eee2:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   1eee4:	4640      	mov	r0, r8
   1eee6:	f7ff ff03 	bl	1ecf0 <log_msg_nargs_get>
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   1eeea:	0083      	lsls	r3, r0, #2
   1eeec:	3307      	adds	r3, #7
   1eeee:	f023 0307 	bic.w	r3, r3, #7
   1eef2:	ebad 0d03 	sub.w	sp, sp, r3
	uint32_t nargs = log_msg_nargs_get(msg);
   1eef6:	4682      	mov	sl, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   1eef8:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   1eefa:	f04f 0900 	mov.w	r9, #0
   1eefe:	45d1      	cmp	r9, sl
   1ef00:	d116      	bne.n	1ef30 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   1ef02:	4640      	mov	r0, r8
   1ef04:	f7ff fef4 	bl	1ecf0 <log_msg_nargs_get>
   1ef08:	280f      	cmp	r0, #15
   1ef0a:	d81e      	bhi.n	1ef4a <std_print+0x78>
   1ef0c:	e8df f010 	tbh	[pc, r0, lsl #1]
   1ef10:	00200019 	.word	0x00200019
   1ef14:	002d0026 	.word	0x002d0026
   1ef18:	00410036 	.word	0x00410036
   1ef1c:	005d004e 	.word	0x005d004e
   1ef20:	0081006e 	.word	0x0081006e
   1ef24:	00ad0096 	.word	0x00ad0096
   1ef28:	00e100c6 	.word	0x00e100c6
   1ef2c:	011d00fe 	.word	0x011d00fe
		args[i] = log_msg_arg_get(msg, i);
   1ef30:	4649      	mov	r1, r9
   1ef32:	4640      	mov	r0, r8
   1ef34:	f7ff fedf 	bl	1ecf6 <log_msg_arg_get>
   1ef38:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   1ef3c:	f109 0901 	add.w	r9, r9, #1
   1ef40:	e7dd      	b.n	1eefe <std_print+0x2c>
		print_formatted(output, str);
   1ef42:	4631      	mov	r1, r6
   1ef44:	4628      	mov	r0, r5
   1ef46:	f7e5 f909 	bl	415c <print_formatted>
}
   1ef4a:	46bd      	mov	sp, r7
   1ef4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
   1ef50:	6822      	ldr	r2, [r4, #0]
   1ef52:	4631      	mov	r1, r6
   1ef54:	4628      	mov	r0, r5
   1ef56:	f7e5 f901 	bl	415c <print_formatted>
		break;
   1ef5a:	e7f6      	b.n	1ef4a <std_print+0x78>
		print_formatted(output, str, args[0], args[1]);
   1ef5c:	e9d4 2300 	ldrd	r2, r3, [r4]
   1ef60:	4631      	mov	r1, r6
   1ef62:	4628      	mov	r0, r5
   1ef64:	f7e5 f8fa 	bl	415c <print_formatted>
		break;
   1ef68:	e7ef      	b.n	1ef4a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2]);
   1ef6a:	68a3      	ldr	r3, [r4, #8]
   1ef6c:	9300      	str	r3, [sp, #0]
   1ef6e:	e9d4 2300 	ldrd	r2, r3, [r4]
   1ef72:	4631      	mov	r1, r6
   1ef74:	4628      	mov	r0, r5
   1ef76:	f7e5 f8f1 	bl	415c <print_formatted>
		break;
   1ef7a:	e7e6      	b.n	1ef4a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1ef7c:	68e3      	ldr	r3, [r4, #12]
   1ef7e:	9301      	str	r3, [sp, #4]
   1ef80:	68a3      	ldr	r3, [r4, #8]
   1ef82:	9300      	str	r3, [sp, #0]
   1ef84:	e9d4 2300 	ldrd	r2, r3, [r4]
   1ef88:	4631      	mov	r1, r6
   1ef8a:	4628      	mov	r0, r5
   1ef8c:	f7e5 f8e6 	bl	415c <print_formatted>
		break;
   1ef90:	e7db      	b.n	1ef4a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1ef92:	6923      	ldr	r3, [r4, #16]
   1ef94:	9302      	str	r3, [sp, #8]
   1ef96:	68e3      	ldr	r3, [r4, #12]
   1ef98:	9301      	str	r3, [sp, #4]
   1ef9a:	68a3      	ldr	r3, [r4, #8]
   1ef9c:	9300      	str	r3, [sp, #0]
   1ef9e:	e9d4 2300 	ldrd	r2, r3, [r4]
   1efa2:	4631      	mov	r1, r6
   1efa4:	4628      	mov	r0, r5
   1efa6:	f7e5 f8d9 	bl	415c <print_formatted>
		break;
   1efaa:	e7ce      	b.n	1ef4a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1efac:	6963      	ldr	r3, [r4, #20]
   1efae:	9303      	str	r3, [sp, #12]
   1efb0:	6923      	ldr	r3, [r4, #16]
   1efb2:	9302      	str	r3, [sp, #8]
   1efb4:	68e3      	ldr	r3, [r4, #12]
   1efb6:	9301      	str	r3, [sp, #4]
   1efb8:	68a3      	ldr	r3, [r4, #8]
   1efba:	9300      	str	r3, [sp, #0]
   1efbc:	e9d4 2300 	ldrd	r2, r3, [r4]
   1efc0:	4631      	mov	r1, r6
   1efc2:	4628      	mov	r0, r5
   1efc4:	f7e5 f8ca 	bl	415c <print_formatted>
		break;
   1efc8:	e7bf      	b.n	1ef4a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1efca:	69a3      	ldr	r3, [r4, #24]
   1efcc:	9304      	str	r3, [sp, #16]
   1efce:	6963      	ldr	r3, [r4, #20]
   1efd0:	9303      	str	r3, [sp, #12]
   1efd2:	6923      	ldr	r3, [r4, #16]
   1efd4:	9302      	str	r3, [sp, #8]
   1efd6:	68e3      	ldr	r3, [r4, #12]
   1efd8:	9301      	str	r3, [sp, #4]
   1efda:	68a3      	ldr	r3, [r4, #8]
   1efdc:	9300      	str	r3, [sp, #0]
   1efde:	e9d4 2300 	ldrd	r2, r3, [r4]
   1efe2:	4631      	mov	r1, r6
   1efe4:	4628      	mov	r0, r5
   1efe6:	f7e5 f8b9 	bl	415c <print_formatted>
		break;
   1efea:	e7ae      	b.n	1ef4a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1efec:	69e3      	ldr	r3, [r4, #28]
   1efee:	9305      	str	r3, [sp, #20]
   1eff0:	69a3      	ldr	r3, [r4, #24]
   1eff2:	9304      	str	r3, [sp, #16]
   1eff4:	6963      	ldr	r3, [r4, #20]
   1eff6:	9303      	str	r3, [sp, #12]
   1eff8:	6923      	ldr	r3, [r4, #16]
   1effa:	9302      	str	r3, [sp, #8]
   1effc:	68e3      	ldr	r3, [r4, #12]
   1effe:	9301      	str	r3, [sp, #4]
   1f000:	68a3      	ldr	r3, [r4, #8]
   1f002:	9300      	str	r3, [sp, #0]
   1f004:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f008:	4631      	mov	r1, r6
   1f00a:	4628      	mov	r0, r5
   1f00c:	f7e5 f8a6 	bl	415c <print_formatted>
		break;
   1f010:	e79b      	b.n	1ef4a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1f012:	6a23      	ldr	r3, [r4, #32]
   1f014:	9306      	str	r3, [sp, #24]
   1f016:	69e3      	ldr	r3, [r4, #28]
   1f018:	9305      	str	r3, [sp, #20]
   1f01a:	69a3      	ldr	r3, [r4, #24]
   1f01c:	9304      	str	r3, [sp, #16]
   1f01e:	6963      	ldr	r3, [r4, #20]
   1f020:	9303      	str	r3, [sp, #12]
   1f022:	6923      	ldr	r3, [r4, #16]
   1f024:	9302      	str	r3, [sp, #8]
   1f026:	68e3      	ldr	r3, [r4, #12]
   1f028:	9301      	str	r3, [sp, #4]
   1f02a:	68a3      	ldr	r3, [r4, #8]
   1f02c:	9300      	str	r3, [sp, #0]
   1f02e:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f032:	4631      	mov	r1, r6
   1f034:	4628      	mov	r0, r5
   1f036:	f7e5 f891 	bl	415c <print_formatted>
		break;
   1f03a:	e786      	b.n	1ef4a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1f03c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f03e:	9307      	str	r3, [sp, #28]
   1f040:	6a23      	ldr	r3, [r4, #32]
   1f042:	9306      	str	r3, [sp, #24]
   1f044:	69e3      	ldr	r3, [r4, #28]
   1f046:	9305      	str	r3, [sp, #20]
   1f048:	69a3      	ldr	r3, [r4, #24]
   1f04a:	9304      	str	r3, [sp, #16]
   1f04c:	6963      	ldr	r3, [r4, #20]
   1f04e:	9303      	str	r3, [sp, #12]
   1f050:	6923      	ldr	r3, [r4, #16]
   1f052:	9302      	str	r3, [sp, #8]
   1f054:	68e3      	ldr	r3, [r4, #12]
   1f056:	9301      	str	r3, [sp, #4]
   1f058:	68a3      	ldr	r3, [r4, #8]
   1f05a:	9300      	str	r3, [sp, #0]
   1f05c:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f060:	4631      	mov	r1, r6
   1f062:	4628      	mov	r0, r5
   1f064:	f7e5 f87a 	bl	415c <print_formatted>
		break;
   1f068:	e76f      	b.n	1ef4a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1f06a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1f06c:	9308      	str	r3, [sp, #32]
   1f06e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f070:	9307      	str	r3, [sp, #28]
   1f072:	6a23      	ldr	r3, [r4, #32]
   1f074:	9306      	str	r3, [sp, #24]
   1f076:	69e3      	ldr	r3, [r4, #28]
   1f078:	9305      	str	r3, [sp, #20]
   1f07a:	69a3      	ldr	r3, [r4, #24]
   1f07c:	9304      	str	r3, [sp, #16]
   1f07e:	6963      	ldr	r3, [r4, #20]
   1f080:	9303      	str	r3, [sp, #12]
   1f082:	6923      	ldr	r3, [r4, #16]
   1f084:	9302      	str	r3, [sp, #8]
   1f086:	68e3      	ldr	r3, [r4, #12]
   1f088:	9301      	str	r3, [sp, #4]
   1f08a:	68a3      	ldr	r3, [r4, #8]
   1f08c:	9300      	str	r3, [sp, #0]
   1f08e:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f092:	4631      	mov	r1, r6
   1f094:	4628      	mov	r0, r5
   1f096:	f7e5 f861 	bl	415c <print_formatted>
		break;
   1f09a:	e756      	b.n	1ef4a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1f09c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1f09e:	9309      	str	r3, [sp, #36]	; 0x24
   1f0a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1f0a2:	9308      	str	r3, [sp, #32]
   1f0a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f0a6:	9307      	str	r3, [sp, #28]
   1f0a8:	6a23      	ldr	r3, [r4, #32]
   1f0aa:	9306      	str	r3, [sp, #24]
   1f0ac:	69e3      	ldr	r3, [r4, #28]
   1f0ae:	9305      	str	r3, [sp, #20]
   1f0b0:	69a3      	ldr	r3, [r4, #24]
   1f0b2:	9304      	str	r3, [sp, #16]
   1f0b4:	6963      	ldr	r3, [r4, #20]
   1f0b6:	9303      	str	r3, [sp, #12]
   1f0b8:	6923      	ldr	r3, [r4, #16]
   1f0ba:	9302      	str	r3, [sp, #8]
   1f0bc:	68e3      	ldr	r3, [r4, #12]
   1f0be:	9301      	str	r3, [sp, #4]
   1f0c0:	68a3      	ldr	r3, [r4, #8]
   1f0c2:	9300      	str	r3, [sp, #0]
   1f0c4:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f0c8:	4631      	mov	r1, r6
   1f0ca:	4628      	mov	r0, r5
   1f0cc:	f7e5 f846 	bl	415c <print_formatted>
		break;
   1f0d0:	e73b      	b.n	1ef4a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1f0d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1f0d4:	930a      	str	r3, [sp, #40]	; 0x28
   1f0d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1f0d8:	9309      	str	r3, [sp, #36]	; 0x24
   1f0da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1f0dc:	9308      	str	r3, [sp, #32]
   1f0de:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f0e0:	9307      	str	r3, [sp, #28]
   1f0e2:	6a23      	ldr	r3, [r4, #32]
   1f0e4:	9306      	str	r3, [sp, #24]
   1f0e6:	69e3      	ldr	r3, [r4, #28]
   1f0e8:	9305      	str	r3, [sp, #20]
   1f0ea:	69a3      	ldr	r3, [r4, #24]
   1f0ec:	9304      	str	r3, [sp, #16]
   1f0ee:	6963      	ldr	r3, [r4, #20]
   1f0f0:	9303      	str	r3, [sp, #12]
   1f0f2:	6923      	ldr	r3, [r4, #16]
   1f0f4:	9302      	str	r3, [sp, #8]
   1f0f6:	68e3      	ldr	r3, [r4, #12]
   1f0f8:	9301      	str	r3, [sp, #4]
   1f0fa:	68a3      	ldr	r3, [r4, #8]
   1f0fc:	9300      	str	r3, [sp, #0]
   1f0fe:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f102:	4631      	mov	r1, r6
   1f104:	4628      	mov	r0, r5
   1f106:	f7e5 f829 	bl	415c <print_formatted>
		break;
   1f10a:	e71e      	b.n	1ef4a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1f10c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1f10e:	930b      	str	r3, [sp, #44]	; 0x2c
   1f110:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1f112:	930a      	str	r3, [sp, #40]	; 0x28
   1f114:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1f116:	9309      	str	r3, [sp, #36]	; 0x24
   1f118:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1f11a:	9308      	str	r3, [sp, #32]
   1f11c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f11e:	9307      	str	r3, [sp, #28]
   1f120:	6a23      	ldr	r3, [r4, #32]
   1f122:	9306      	str	r3, [sp, #24]
   1f124:	69e3      	ldr	r3, [r4, #28]
   1f126:	9305      	str	r3, [sp, #20]
   1f128:	69a3      	ldr	r3, [r4, #24]
   1f12a:	9304      	str	r3, [sp, #16]
   1f12c:	6963      	ldr	r3, [r4, #20]
   1f12e:	9303      	str	r3, [sp, #12]
   1f130:	6923      	ldr	r3, [r4, #16]
   1f132:	9302      	str	r3, [sp, #8]
   1f134:	68e3      	ldr	r3, [r4, #12]
   1f136:	9301      	str	r3, [sp, #4]
   1f138:	68a3      	ldr	r3, [r4, #8]
   1f13a:	9300      	str	r3, [sp, #0]
   1f13c:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f140:	4631      	mov	r1, r6
   1f142:	4628      	mov	r0, r5
   1f144:	f7e5 f80a 	bl	415c <print_formatted>
		break;
   1f148:	e6ff      	b.n	1ef4a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1f14a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1f14c:	930c      	str	r3, [sp, #48]	; 0x30
   1f14e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1f150:	930b      	str	r3, [sp, #44]	; 0x2c
   1f152:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1f154:	930a      	str	r3, [sp, #40]	; 0x28
   1f156:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1f158:	9309      	str	r3, [sp, #36]	; 0x24
   1f15a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1f15c:	9308      	str	r3, [sp, #32]
   1f15e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f160:	9307      	str	r3, [sp, #28]
   1f162:	6a23      	ldr	r3, [r4, #32]
   1f164:	9306      	str	r3, [sp, #24]
   1f166:	69e3      	ldr	r3, [r4, #28]
   1f168:	9305      	str	r3, [sp, #20]
   1f16a:	69a3      	ldr	r3, [r4, #24]
   1f16c:	9304      	str	r3, [sp, #16]
   1f16e:	6963      	ldr	r3, [r4, #20]
   1f170:	9303      	str	r3, [sp, #12]
   1f172:	6923      	ldr	r3, [r4, #16]
   1f174:	9302      	str	r3, [sp, #8]
   1f176:	68e3      	ldr	r3, [r4, #12]
   1f178:	9301      	str	r3, [sp, #4]
   1f17a:	68a3      	ldr	r3, [r4, #8]
   1f17c:	9300      	str	r3, [sp, #0]
   1f17e:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f182:	4631      	mov	r1, r6
   1f184:	4628      	mov	r0, r5
   1f186:	f7e4 ffe9 	bl	415c <print_formatted>
}
   1f18a:	e6de      	b.n	1ef4a <std_print+0x78>

0001f18c <log_output_flush>:
		     output->control_block->offset,
   1f18c:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   1f18e:	6881      	ldr	r1, [r0, #8]
{
   1f190:	b510      	push	{r4, lr}
   1f192:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   1f194:	e9d2 2300 	ldrd	r2, r3, [r2]
   1f198:	6800      	ldr	r0, [r0, #0]
   1f19a:	f7ff fe8d 	bl	1eeb8 <buffer_write>
	output->control_block->offset = 0;
   1f19e:	6863      	ldr	r3, [r4, #4]
   1f1a0:	2200      	movs	r2, #0
   1f1a2:	601a      	str	r2, [r3, #0]
}
   1f1a4:	bd10      	pop	{r4, pc}

0001f1a6 <out_func>:
{
   1f1a6:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   1f1a8:	684b      	ldr	r3, [r1, #4]
   1f1aa:	681a      	ldr	r2, [r3, #0]
   1f1ac:	68cb      	ldr	r3, [r1, #12]
   1f1ae:	429a      	cmp	r2, r3
{
   1f1b0:	4605      	mov	r5, r0
   1f1b2:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   1f1b4:	d102      	bne.n	1f1bc <out_func+0x16>
		log_output_flush(out_ctx);
   1f1b6:	4608      	mov	r0, r1
   1f1b8:	f7ff ffe8 	bl	1f18c <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1f1bc:	6863      	ldr	r3, [r4, #4]
   1f1be:	f3bf 8f5b 	dmb	ish
   1f1c2:	e853 2f00 	ldrex	r2, [r3]
   1f1c6:	1c51      	adds	r1, r2, #1
   1f1c8:	e843 1000 	strex	r0, r1, [r3]
   1f1cc:	2800      	cmp	r0, #0
   1f1ce:	d1f8      	bne.n	1f1c2 <out_func+0x1c>
   1f1d0:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   1f1d4:	68a3      	ldr	r3, [r4, #8]
   1f1d6:	549d      	strb	r5, [r3, r2]
}
   1f1d8:	2000      	movs	r0, #0
   1f1da:	bd38      	pop	{r3, r4, r5, pc}

0001f1dc <read_str>:
#endif /* CONFIG_BT_DIS_SETTINGS */

static ssize_t read_str(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  uint16_t len, uint16_t offset)
{
   1f1dc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   1f1e0:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   1f1e4:	4605      	mov	r5, r0
				 strlen(attr->user_data));
   1f1e6:	4640      	mov	r0, r8
{
   1f1e8:	461f      	mov	r7, r3
   1f1ea:	460c      	mov	r4, r1
   1f1ec:	4616      	mov	r6, r2
				 strlen(attr->user_data));
   1f1ee:	f7e1 fdab 	bl	d48 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   1f1f2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1f1f6:	9300      	str	r3, [sp, #0]
   1f1f8:	b280      	uxth	r0, r0
   1f1fa:	e9cd 8001 	strd	r8, r0, [sp, #4]
   1f1fe:	463b      	mov	r3, r7
   1f200:	4632      	mov	r2, r6
   1f202:	4621      	mov	r1, r4
   1f204:	4628      	mov	r0, r5
   1f206:	f002 fceb 	bl	21be0 <bt_gatt_attr_read>
}
   1f20a:	b004      	add	sp, #16
   1f20c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f210 <lres_init>:
}
   1f210:	2000      	movs	r0, #0
   1f212:	4770      	bx	lr

0001f214 <change_config_cb>:
{
   1f214:	b507      	push	{r0, r1, r2, lr}
	change_config(pu, false);
   1f216:	4610      	mov	r0, r2
   1f218:	2100      	movs	r1, #0
   1f21a:	f7e5 fac1 	bl	47a0 <change_config>
	int8_t bt_data[1] = {-2};
   1f21e:	23fe      	movs	r3, #254	; 0xfe
	bt_lres_notify(bt_data, 2);
   1f220:	2102      	movs	r1, #2
   1f222:	a801      	add	r0, sp, #4
	int8_t bt_data[1] = {-2};
   1f224:	f88d 3004 	strb.w	r3, [sp, #4]
	bt_lres_notify(bt_data, 2);
   1f228:	f7e5 fb2c 	bl	4884 <bt_lres_notify>
}
   1f22c:	2000      	movs	r0, #0
   1f22e:	b003      	add	sp, #12
   1f230:	f85d fb04 	ldr.w	pc, [sp], #4

0001f234 <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   1f234:	2200      	movs	r2, #0
   1f236:	8002      	strh	r2, [r0, #0]
   1f238:	6042      	str	r2, [r0, #4]
}
   1f23a:	4770      	bx	lr

0001f23c <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1f23c:	6902      	ldr	r2, [r0, #16]
   1f23e:	b2cb      	uxtb	r3, r1
   1f240:	210c      	movs	r1, #12
   1f242:	fb03 2101 	mla	r1, r3, r1, r2
   1f246:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
   1f248:	f000 0007 	and.w	r0, r0, #7
   1f24c:	4770      	bx	lr

0001f24e <set_off_state>:
	__asm__ volatile(
   1f24e:	f04f 0320 	mov.w	r3, #32
   1f252:	f3ef 8211 	mrs	r2, BASEPRI
   1f256:	f383 8811 	msr	BASEPRI, r3
   1f25a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1f25e:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1f260:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   1f264:	d001      	beq.n	1f26a <set_off_state+0x1c>
   1f266:	428b      	cmp	r3, r1
   1f268:	d107      	bne.n	1f27a <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1f26a:	2301      	movs	r3, #1
   1f26c:	6003      	str	r3, [r0, #0]
	int err = 0;
   1f26e:	2000      	movs	r0, #0
	__asm__ volatile(
   1f270:	f382 8811 	msr	BASEPRI, r2
   1f274:	f3bf 8f6f 	isb	sy
}
   1f278:	4770      	bx	lr
		err = -EPERM;
   1f27a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f27e:	e7f7      	b.n	1f270 <set_off_state+0x22>

0001f280 <set_starting_state>:
{
   1f280:	b510      	push	{r4, lr}
	__asm__ volatile(
   1f282:	f04f 0320 	mov.w	r3, #32
   1f286:	f3ef 8211 	mrs	r2, BASEPRI
   1f28a:	f383 8811 	msr	BASEPRI, r3
   1f28e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1f292:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1f294:	f003 0407 	and.w	r4, r3, #7
   1f298:	2c01      	cmp	r4, #1
   1f29a:	d106      	bne.n	1f2aa <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1f29c:	6001      	str	r1, [r0, #0]
	int err = 0;
   1f29e:	2000      	movs	r0, #0
	__asm__ volatile(
   1f2a0:	f382 8811 	msr	BASEPRI, r2
   1f2a4:	f3bf 8f6f 	isb	sy
}
   1f2a8:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1f2aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   1f2ae:	428b      	cmp	r3, r1
		err = -EALREADY;
   1f2b0:	bf14      	ite	ne
   1f2b2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   1f2b6:	f06f 0077 	mvneq.w	r0, #119	; 0x77
   1f2ba:	e7f1      	b.n	1f2a0 <set_starting_state+0x20>

0001f2bc <set_on_state>:
	__asm__ volatile(
   1f2bc:	f04f 0320 	mov.w	r3, #32
   1f2c0:	f3ef 8211 	mrs	r2, BASEPRI
   1f2c4:	f383 8811 	msr	BASEPRI, r3
   1f2c8:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1f2cc:	6803      	ldr	r3, [r0, #0]
   1f2ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1f2d2:	f043 0302 	orr.w	r3, r3, #2
   1f2d6:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1f2d8:	f382 8811 	msr	BASEPRI, r2
   1f2dc:	f3bf 8f6f 	isb	sy
}
   1f2e0:	4770      	bx	lr

0001f2e2 <onoff_started_callback>:
	return &data->mgr[type];
   1f2e2:	6900      	ldr	r0, [r0, #16]
{
   1f2e4:	b410      	push	{r4}
	return &data->mgr[type];
   1f2e6:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1f2e8:	241c      	movs	r4, #28
   1f2ea:	fb03 0004 	mla	r0, r3, r4, r0
   1f2ee:	2100      	movs	r1, #0
}
   1f2f0:	bc10      	pop	{r4}
	notify(mgr, 0);
   1f2f2:	4710      	bx	r2

0001f2f4 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1f2f4:	2000      	movs	r0, #0
   1f2f6:	f7fd b937 	b.w	1c568 <nrfx_clock_start>

0001f2fa <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1f2fa:	2000      	movs	r0, #0
   1f2fc:	f7fd b966 	b.w	1c5cc <nrfx_clock_stop>

0001f300 <blocking_start_callback>:
{
   1f300:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1f302:	f7fe ba0b 	b.w	1d71c <z_impl_k_sem_give>

0001f306 <api_stop>:
{
   1f306:	b538      	push	{r3, r4, r5, lr}
   1f308:	b2c9      	uxtb	r1, r1
	err = set_off_state(&subdata->flags, ctx);
   1f30a:	240c      	movs	r4, #12
   1f30c:	434c      	muls	r4, r1
{
   1f30e:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   1f310:	6900      	ldr	r0, [r0, #16]
   1f312:	f104 0340 	add.w	r3, r4, #64	; 0x40
   1f316:	2180      	movs	r1, #128	; 0x80
   1f318:	4418      	add	r0, r3
   1f31a:	f7ff ff98 	bl	1f24e <set_off_state>
	if (err < 0) {
   1f31e:	2800      	cmp	r0, #0
   1f320:	db04      	blt.n	1f32c <api_stop+0x26>
	get_sub_config(dev, type)->stop();
   1f322:	6869      	ldr	r1, [r5, #4]
   1f324:	440c      	add	r4, r1
   1f326:	6863      	ldr	r3, [r4, #4]
   1f328:	4798      	blx	r3
	return 0;
   1f32a:	2000      	movs	r0, #0
}
   1f32c:	bd38      	pop	{r3, r4, r5, pc}

0001f32e <api_start>:
{
   1f32e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f332:	b2c9      	uxtb	r1, r1
	err = set_starting_state(&subdata->flags, ctx);
   1f334:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1f336:	6905      	ldr	r5, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
   1f338:	434c      	muls	r4, r1
{
   1f33a:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   1f33c:	f104 0040 	add.w	r0, r4, #64	; 0x40
   1f340:	2180      	movs	r1, #128	; 0x80
   1f342:	4428      	add	r0, r5
{
   1f344:	4690      	mov	r8, r2
   1f346:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
   1f348:	f7ff ff9a 	bl	1f280 <set_starting_state>
	if (err < 0) {
   1f34c:	2800      	cmp	r0, #0
   1f34e:	db06      	blt.n	1f35e <api_start+0x30>
	subdata->cb = cb;
   1f350:	4425      	add	r5, r4
	subdata->user_data = user_data;
   1f352:	e9c5 870e 	strd	r8, r7, [r5, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   1f356:	6873      	ldr	r3, [r6, #4]
   1f358:	591b      	ldr	r3, [r3, r4]
   1f35a:	4798      	blx	r3
	return 0;
   1f35c:	2000      	movs	r0, #0
}
   1f35e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f362 <sys_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   1f362:	4770      	bx	lr

0001f364 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   1f364:	4770      	bx	lr

0001f366 <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   1f366:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   1f368:	68c1      	ldr	r1, [r0, #12]
  if (RdOff <= WrOff) {
   1f36a:	428b      	cmp	r3, r1
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   1f36c:	bf9d      	ittte	ls
   1f36e:	6882      	ldrls	r2, [r0, #8]
   1f370:	18d2      	addls	r2, r2, r3
   1f372:	f102 32ff 	addls.w	r2, r2, #4294967295	; 0xffffffff
    r = RdOff - WrOff - 1u;
   1f376:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   1f37a:	bf94      	ite	ls
   1f37c:	1a50      	subls	r0, r2, r1
    r = RdOff - WrOff - 1u;
   1f37e:	1a58      	subhi	r0, r3, r1
}
   1f380:	4770      	bx	lr

0001f382 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1f382:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
   1f386:	e9d0 9402 	ldrd	r9, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1f38a:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
   1f38c:	eba9 0804 	sub.w	r8, r9, r4
   1f390:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
   1f392:	4590      	cmp	r8, r2
   1f394:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1f396:	460f      	mov	r7, r1
  if (Rem > NumBytes) {
   1f398:	4414      	add	r4, r2
   1f39a:	d904      	bls.n	1f3a6 <_WriteNoCheck+0x24>
   1f39c:	f004 f961 	bl	23662 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   1f3a0:	60ec      	str	r4, [r5, #12]
}
   1f3a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1f3a6:	4642      	mov	r2, r8
    NumBytesAtOnce = NumBytes - Rem;
   1f3a8:	eba4 0409 	sub.w	r4, r4, r9
   1f3ac:	f004 f959 	bl	23662 <memcpy>
   1f3b0:	6868      	ldr	r0, [r5, #4]
   1f3b2:	4622      	mov	r2, r4
   1f3b4:	eb07 0108 	add.w	r1, r7, r8
   1f3b8:	e7f0      	b.n	1f39c <_WriteNoCheck+0x1a>

0001f3ba <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   1f3ba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
   1f3be:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   1f3c0:	4606      	mov	r6, r0
   1f3c2:	4689      	mov	r9, r1
   1f3c4:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
   1f3c6:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   1f3ca:	6934      	ldr	r4, [r6, #16]
    if (RdOff > WrOff) {
   1f3cc:	68b3      	ldr	r3, [r6, #8]
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   1f3ce:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
   1f3d0:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   1f3d2:	bf28      	it	cs
   1f3d4:	18e4      	addcs	r4, r4, r3
   1f3d6:	3c01      	subs	r4, #1
   1f3d8:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   1f3da:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   1f3dc:	42bc      	cmp	r4, r7
   1f3de:	bf28      	it	cs
   1f3e0:	463c      	movcs	r4, r7
   1f3e2:	4294      	cmp	r4, r2
   1f3e4:	bf28      	it	cs
   1f3e6:	4614      	movcs	r4, r2
   1f3e8:	4649      	mov	r1, r9
   1f3ea:	4428      	add	r0, r5
   1f3ec:	4622      	mov	r2, r4
   1f3ee:	f004 f938 	bl	23662 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   1f3f2:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
   1f3f4:	4425      	add	r5, r4
      WrOff = 0u;
   1f3f6:	42ab      	cmp	r3, r5
   1f3f8:	bf08      	it	eq
   1f3fa:	2500      	moveq	r5, #0
  } while (NumBytes);
   1f3fc:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
   1f3fe:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
   1f400:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
   1f402:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   1f404:	d1e1      	bne.n	1f3ca <_WriteBlocking+0x10>
}
   1f406:	4640      	mov	r0, r8
   1f408:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001f40c <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   1f40c:	f7e5 bde8 	b.w	4fe0 <_DoInit>

0001f410 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   1f410:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   1f412:	f7ff fffb 	bl	1f40c <SEGGER_RTT_Init>

	return 0;
}
   1f416:	2000      	movs	r0, #0
   1f418:	bd08      	pop	{r3, pc}

0001f41a <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   1f41a:	b538      	push	{r3, r4, r5, lr}
   1f41c:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   1f41e:	42ab      	cmp	r3, r5
{
   1f420:	4611      	mov	r1, r2
   1f422:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   1f424:	d804      	bhi.n	1f430 <_copy+0x16>
   1f426:	461a      	mov	r2, r3
   1f428:	f004 f91b 	bl	23662 <memcpy>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   1f42c:	4620      	mov	r0, r4
   1f42e:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   1f430:	2400      	movs	r4, #0
   1f432:	e7fb      	b.n	1f42c <_copy+0x12>

0001f434 <_set>:
__ssp_bos_icheck3(memset, void *, int)
   1f434:	f004 b923 	b.w	2367e <memset>

0001f438 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   1f438:	09c3      	lsrs	r3, r0, #7
   1f43a:	005a      	lsls	r2, r3, #1
   1f43c:	4413      	add	r3, r2
   1f43e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1f442:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   1f446:	b2c0      	uxtb	r0, r0
   1f448:	4770      	bx	lr

0001f44a <_set_secure.constprop.0>:
 * @param len IN -- number of times the value will be copied
 */
#ifdef TINYCRYPT_ARCH_HAS_SET_SECURE
extern void _set_secure(void *to, uint8_t val, unsigned int len);
#else /* ! TINYCRYPT_ARCH_HAS_SET_SECURE */
static inline void _set_secure(void *to, uint8_t val, unsigned int len)
   1f44a:	b510      	push	{r4, lr}
   1f44c:	460a      	mov	r2, r1
   1f44e:	2100      	movs	r1, #0
   1f450:	4604      	mov	r4, r0
   1f452:	f004 f914 	bl	2367e <memset>
{
  (void) memset(to, val, len);
#ifdef __GNUC__
  __asm__ __volatile__("" :: "g"(to) : "memory");
#endif /* __GNUC__ */
}
   1f456:	bd10      	pop	{r4, pc}

0001f458 <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   1f458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f45c:	4605      	mov	r5, r0
   1f45e:	b0a8      	sub	sp, #160	; 0xa0
   1f460:	460f      	mov	r7, r1
   1f462:	4614      	mov	r4, r2
   1f464:	2640      	movs	r6, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   1f466:	f102 0824 	add.w	r8, r2, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   1f46a:	f7e5 fe73 	bl	5154 <uECC_get_rng>
		if (!rng_function ||
   1f46e:	4603      	mov	r3, r0
   1f470:	2800      	cmp	r0, #0
   1f472:	d03c      	beq.n	1f4ee <uECC_make_key+0x96>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   1f474:	2140      	movs	r1, #64	; 0x40
   1f476:	a808      	add	r0, sp, #32
   1f478:	4798      	blx	r3
		if (!rng_function ||
   1f47a:	b3c0      	cbz	r0, 1f4ee <uECC_make_key+0x96>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   1f47c:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   1f480:	f112 031f 	adds.w	r3, r2, #31
   1f484:	bf48      	it	mi
   1f486:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   1f48a:	a908      	add	r1, sp, #32
   1f48c:	4642      	mov	r2, r8
   1f48e:	4668      	mov	r0, sp
   1f490:	f343 1347 	sbfx	r3, r3, #5, #8
   1f494:	f000 f9ff 	bl	1f896 <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   1f498:	4622      	mov	r2, r4
   1f49a:	4669      	mov	r1, sp
   1f49c:	a818      	add	r0, sp, #96	; 0x60
   1f49e:	f000 fe15 	bl	200cc <EccPoint_compute_public_key>
   1f4a2:	b310      	cbz	r0, 1f4ea <uECC_make_key+0x92>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   1f4a4:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   1f4a8:	1dd9      	adds	r1, r3, #7
   1f4aa:	bf48      	it	mi
   1f4ac:	f103 010e 	addmi.w	r1, r3, #14
   1f4b0:	466a      	mov	r2, sp
   1f4b2:	10c9      	asrs	r1, r1, #3
   1f4b4:	4638      	mov	r0, r7
   1f4b6:	f000 fe31 	bl	2011c <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   1f4ba:	f994 1001 	ldrsb.w	r1, [r4, #1]
   1f4be:	aa18      	add	r2, sp, #96	; 0x60
   1f4c0:	4628      	mov	r0, r5
   1f4c2:	f000 fe2b 	bl	2011c <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   1f4c6:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   1f4ca:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   1f4ce:	ab18      	add	r3, sp, #96	; 0x60
   1f4d0:	1868      	adds	r0, r5, r1
   1f4d2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   1f4d6:	f000 fe21 	bl	2011c <uECC_vli_nativeToBytes>

			/* erasing temporary buffer that stored secret: */
			_set_secure(_private, 0, NUM_ECC_BYTES);
   1f4da:	4668      	mov	r0, sp
   1f4dc:	2120      	movs	r1, #32
   1f4de:	f7ff ffb4 	bl	1f44a <_set_secure.constprop.0>

      			return 1;
   1f4e2:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   1f4e4:	b028      	add	sp, #160	; 0xa0
   1f4e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   1f4ea:	3e01      	subs	r6, #1
   1f4ec:	d1bd      	bne.n	1f46a <uECC_make_key+0x12>
        		return 0;
   1f4ee:	2000      	movs	r0, #0
   1f4f0:	e7f8      	b.n	1f4e4 <uECC_make_key+0x8c>

0001f4f2 <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   1f4f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f4f6:	461c      	mov	r4, r3
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
	wordcount_t num_bytes = curve->num_bytes;
   1f4f8:	f993 6001 	ldrsb.w	r6, [r3, #1]
	wordcount_t num_words = curve->num_words;
   1f4fc:	f993 a000 	ldrsb.w	sl, [r3]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   1f500:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   1f504:	b0a4      	sub	sp, #144	; 0x90
   1f506:	4690      	mov	r8, r2
	uECC_vli_bytesToNative(_private,
   1f508:	1dda      	adds	r2, r3, #7
   1f50a:	bf48      	it	mi
   1f50c:	f103 020e 	addmi.w	r2, r3, #14
	uECC_word_t *p2[2] = {_private, tmp};
   1f510:	ad04      	add	r5, sp, #16
{
   1f512:	4681      	mov	r9, r0
	uECC_word_t *p2[2] = {_private, tmp};
   1f514:	af0c      	add	r7, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   1f516:	4628      	mov	r0, r5
   1f518:	10d2      	asrs	r2, r2, #3
	uECC_word_t *p2[2] = {_private, tmp};
   1f51a:	9502      	str	r5, [sp, #8]
   1f51c:	9703      	str	r7, [sp, #12]
	uECC_vli_bytesToNative(_private,
   1f51e:	f000 fe11 	bl	20144 <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   1f522:	4632      	mov	r2, r6
   1f524:	4649      	mov	r1, r9
   1f526:	a814      	add	r0, sp, #80	; 0x50
   1f528:	f000 fe0c 	bl	20144 <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   1f52c:	ab14      	add	r3, sp, #80	; 0x50
   1f52e:	eb03 008a 	add.w	r0, r3, sl, lsl #2
   1f532:	4632      	mov	r2, r6
   1f534:	eb09 0106 	add.w	r1, r9, r6
   1f538:	f000 fe04 	bl	20144 <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   1f53c:	4623      	mov	r3, r4
   1f53e:	463a      	mov	r2, r7
   1f540:	4629      	mov	r1, r5
   1f542:	4628      	mov	r0, r5
   1f544:	f000 fd96 	bl	20074 <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   1f548:	fab0 f080 	clz	r0, r0
   1f54c:	9401      	str	r4, [sp, #4]
   1f54e:	ab24      	add	r3, sp, #144	; 0x90
   1f550:	0940      	lsrs	r0, r0, #5
   1f552:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1f556:	8863      	ldrh	r3, [r4, #2]
   1f558:	3301      	adds	r3, #1
   1f55a:	b21b      	sxth	r3, r3
   1f55c:	9300      	str	r3, [sp, #0]
   1f55e:	a914      	add	r1, sp, #80	; 0x50
   1f560:	2300      	movs	r3, #0
   1f562:	f850 2c88 	ldr.w	r2, [r0, #-136]
   1f566:	4608      	mov	r0, r1
   1f568:	f000 fcb5 	bl	1fed6 <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   1f56c:	aa14      	add	r2, sp, #80	; 0x50
   1f56e:	4631      	mov	r1, r6
   1f570:	4640      	mov	r0, r8
   1f572:	f000 fdd3 	bl	2011c <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   1f576:	4621      	mov	r1, r4
   1f578:	a814      	add	r0, sp, #80	; 0x50
   1f57a:	f000 fc21 	bl	1fdc0 <EccPoint_isZero>

clear_and_out:
	/* erasing temporary buffer used to store secret: */
	_set_secure(p2, 0, sizeof(p2));
   1f57e:	2108      	movs	r1, #8
	r = !EccPoint_isZero(_public, curve);
   1f580:	4604      	mov	r4, r0
	_set_secure(p2, 0, sizeof(p2));
   1f582:	eb0d 0001 	add.w	r0, sp, r1
   1f586:	f7ff ff60 	bl	1f44a <_set_secure.constprop.0>
	_set_secure(tmp, 0, sizeof(tmp));
   1f58a:	4638      	mov	r0, r7
   1f58c:	2120      	movs	r1, #32
   1f58e:	f7ff ff5c 	bl	1f44a <_set_secure.constprop.0>
	_set_secure(_private, 0, sizeof(_private));
   1f592:	4628      	mov	r0, r5
   1f594:	2120      	movs	r1, #32
   1f596:	f7ff ff58 	bl	1f44a <_set_secure.constprop.0>

	return r;
}
   1f59a:	fab4 f084 	clz	r0, r4
   1f59e:	0940      	lsrs	r0, r0, #5
   1f5a0:	b024      	add	sp, #144	; 0x90
   1f5a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001f5a6 <uECC_vli_add>:
{
   1f5a6:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   1f5a8:	2400      	movs	r4, #0
{
   1f5aa:	4606      	mov	r6, r0
	uECC_word_t carry = 0;
   1f5ac:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   1f5ae:	b265      	sxtb	r5, r4
   1f5b0:	42ab      	cmp	r3, r5
   1f5b2:	dc00      	bgt.n	1f5b6 <uECC_vli_add+0x10>
}
   1f5b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   1f5b6:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   1f5ba:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   1f5be:	443d      	add	r5, r7
   1f5c0:	4405      	add	r5, r0
		carry = cond_set(val, carry, (sum != left[i]));
   1f5c2:	42af      	cmp	r7, r5
		uECC_word_t val = (sum < left[i]);
   1f5c4:	bf8c      	ite	hi
   1f5c6:	2701      	movhi	r7, #1
   1f5c8:	2700      	movls	r7, #0
		result[i] = sum;
   1f5ca:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   1f5ce:	bf18      	it	ne
   1f5d0:	4638      	movne	r0, r7
	for (i = 0; i < num_words; ++i) {
   1f5d2:	3401      	adds	r4, #1
   1f5d4:	e7eb      	b.n	1f5ae <uECC_vli_add+0x8>

0001f5d6 <uECC_vli_rshift1>:
	vli += num_words;
   1f5d6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   1f5da:	2300      	movs	r3, #0
	while (vli-- > end) {
   1f5dc:	4288      	cmp	r0, r1
   1f5de:	d300      	bcc.n	1f5e2 <uECC_vli_rshift1+0xc>
}
   1f5e0:	4770      	bx	lr
		uECC_word_t temp = *vli;
   1f5e2:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   1f5e6:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   1f5ea:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   1f5ec:	07d3      	lsls	r3, r2, #31
   1f5ee:	e7f5      	b.n	1f5dc <uECC_vli_rshift1+0x6>

0001f5f0 <vli_modInv_update>:
	if (!EVEN(uv)) {
   1f5f0:	6803      	ldr	r3, [r0, #0]
{
   1f5f2:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   1f5f4:	f013 0601 	ands.w	r6, r3, #1
{
   1f5f8:	4605      	mov	r5, r0
   1f5fa:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   1f5fc:	d005      	beq.n	1f60a <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   1f5fe:	4613      	mov	r3, r2
   1f600:	460a      	mov	r2, r1
   1f602:	4601      	mov	r1, r0
   1f604:	f7ff ffcf 	bl	1f5a6 <uECC_vli_add>
   1f608:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   1f60a:	4621      	mov	r1, r4
   1f60c:	4628      	mov	r0, r5
   1f60e:	f7ff ffe2 	bl	1f5d6 <uECC_vli_rshift1>
	if (carry) {
   1f612:	b146      	cbz	r6, 1f626 <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
   1f614:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   1f618:	3a01      	subs	r2, #1
   1f61a:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   1f61e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1f622:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
   1f626:	bd70      	pop	{r4, r5, r6, pc}

0001f628 <uECC_vli_mult>:
{
   1f628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (k = 0; k < num_words; ++k) {
   1f62c:	2500      	movs	r5, #0
{
   1f62e:	b087      	sub	sp, #28
   1f630:	e9cd 1200 	strd	r1, r2, [sp]
	uECC_word_t r1 = 0;
   1f634:	462c      	mov	r4, r5
	uECC_word_t r0 = 0;
   1f636:	462a      	mov	r2, r5
	for (k = 0; k < num_words; ++k) {
   1f638:	fa4f f885 	sxtb.w	r8, r5
   1f63c:	4543      	cmp	r3, r8
   1f63e:	dc16      	bgt.n	1f66e <uECC_vli_mult+0x46>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   1f640:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1f644:	eb05 0543 	add.w	r5, r5, r3, lsl #1
   1f648:	9502      	str	r5, [sp, #8]
   1f64a:	f04f 0a00 	mov.w	sl, #0
   1f64e:	9e02      	ldr	r6, [sp, #8]
   1f650:	fa53 fe8a 	uxtab	lr, r3, sl
   1f654:	fa4f fe8e 	sxtb.w	lr, lr
   1f658:	45b6      	cmp	lr, r6
   1f65a:	fa5f f58a 	uxtb.w	r5, sl
   1f65e:	db2d      	blt.n	1f6bc <uECC_vli_mult+0x94>
	result[num_words * 2 - 1] = r0;
   1f660:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   1f664:	f840 2c04 	str.w	r2, [r0, #-4]
}
   1f668:	b007      	add	sp, #28
   1f66a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f66e:	9e01      	ldr	r6, [sp, #4]
	for (k = 0; k < num_words; ++k) {
   1f670:	f04f 0c00 	mov.w	ip, #0
   1f674:	eb06 0985 	add.w	r9, r6, r5, lsl #2
   1f678:	46e6      	mov	lr, ip
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   1f67a:	e9cd 2402 	strd	r2, r4, [sp, #8]
	uECC_dword_t p = (uECC_dword_t)a * b;
   1f67e:	9900      	ldr	r1, [sp, #0]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   1f680:	f859 7904 	ldr.w	r7, [r9], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   1f684:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
   1f688:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   1f68c:	fba7 ab06 	umull	sl, fp, r7, r6
   1f690:	eb1a 0601 	adds.w	r6, sl, r1
   1f694:	f10c 0c01 	add.w	ip, ip, #1
   1f698:	eb5b 0702 	adcs.w	r7, fp, r2
		for (i = 0; i <= k; ++i) {
   1f69c:	fa4f fa8c 	sxtb.w	sl, ip
   1f6a0:	bf2c      	ite	cs
   1f6a2:	2201      	movcs	r2, #1
   1f6a4:	2200      	movcc	r2, #0
   1f6a6:	45c2      	cmp	sl, r8
	*r2 += (r01 < p);
   1f6a8:	4496      	add	lr, r2
	*r1 = r01 >> uECC_WORD_BITS;
   1f6aa:	463c      	mov	r4, r7
	*r0 = (uECC_word_t)r01;
   1f6ac:	4632      	mov	r2, r6
		for (i = 0; i <= k; ++i) {
   1f6ae:	dde4      	ble.n	1f67a <uECC_vli_mult+0x52>
		result[k] = r0;
   1f6b0:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
	*r1 = r01 >> uECC_WORD_BITS;
   1f6b4:	463a      	mov	r2, r7
   1f6b6:	3501      	adds	r5, #1
	*r2 += (r01 < p);
   1f6b8:	4674      	mov	r4, lr
   1f6ba:	e7bd      	b.n	1f638 <uECC_vli_mult+0x10>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   1f6bc:	3501      	adds	r5, #1
   1f6be:	9900      	ldr	r1, [sp, #0]
   1f6c0:	9e01      	ldr	r6, [sp, #4]
   1f6c2:	fa4f fc85 	sxtb.w	ip, r5
   1f6c6:	ebae 0b0c 	sub.w	fp, lr, ip
   1f6ca:	eb01 058c 	add.w	r5, r1, ip, lsl #2
   1f6ce:	eb06 0b8b 	add.w	fp, r6, fp, lsl #2
   1f6d2:	4621      	mov	r1, r4
   1f6d4:	2400      	movs	r4, #0
   1f6d6:	459c      	cmp	ip, r3
   1f6d8:	db05      	blt.n	1f6e6 <uECC_vli_mult+0xbe>
		result[k] = r0;
   1f6da:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   1f6de:	f10a 0a01 	add.w	sl, sl, #1
		result[k] = r0;
   1f6e2:	460a      	mov	r2, r1
   1f6e4:	e7b3      	b.n	1f64e <uECC_vli_mult+0x26>
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   1f6e6:	e9cd 2104 	strd	r2, r1, [sp, #16]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   1f6ea:	f855 7b04 	ldr.w	r7, [r5], #4
   1f6ee:	f85b 6904 	ldr.w	r6, [fp], #-4
	r01 += p;
   1f6f2:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
	uECC_dword_t p = (uECC_dword_t)a * b;
   1f6f6:	fba7 6706 	umull	r6, r7, r7, r6
   1f6fa:	eb16 0801 	adds.w	r8, r6, r1
   1f6fe:	eb57 0902 	adcs.w	r9, r7, r2
   1f702:	bf2c      	ite	cs
   1f704:	2201      	movcs	r2, #1
   1f706:	2200      	movcc	r2, #0
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   1f708:	f10c 0c01 	add.w	ip, ip, #1
	*r2 += (r01 < p);
   1f70c:	4414      	add	r4, r2
	*r1 = r01 >> uECC_WORD_BITS;
   1f70e:	4649      	mov	r1, r9
	*r0 = (uECC_word_t)r01;
   1f710:	4642      	mov	r2, r8
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   1f712:	fa4f fc8c 	sxtb.w	ip, ip
   1f716:	e7de      	b.n	1f6d6 <uECC_vli_mult+0xae>

0001f718 <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   1f718:	2300      	movs	r3, #0
{
   1f71a:	b510      	push	{r4, lr}
		 vli[i] = 0;
   1f71c:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   1f71e:	b25a      	sxtb	r2, r3
   1f720:	4291      	cmp	r1, r2
   1f722:	dc00      	bgt.n	1f726 <uECC_vli_clear+0xe>
}
   1f724:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   1f726:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   1f72a:	3301      	adds	r3, #1
   1f72c:	e7f7      	b.n	1f71e <uECC_vli_clear+0x6>

0001f72e <uECC_vli_isZero>:
{
   1f72e:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   1f730:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   1f732:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   1f734:	b25c      	sxtb	r4, r3
   1f736:	42a1      	cmp	r1, r4
   1f738:	dc03      	bgt.n	1f742 <uECC_vli_isZero+0x14>
}
   1f73a:	fab2 f082 	clz	r0, r2
   1f73e:	0940      	lsrs	r0, r0, #5
   1f740:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   1f742:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   1f746:	3301      	adds	r3, #1
   1f748:	4322      	orrs	r2, r4
	for (i = 0; i < num_words; ++i) {
   1f74a:	e7f3      	b.n	1f734 <uECC_vli_isZero+0x6>

0001f74c <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1f74c:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   1f74e:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1f750:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   1f754:	f001 011f 	and.w	r1, r1, #31
   1f758:	fa03 f101 	lsl.w	r1, r3, r1
}
   1f75c:	4008      	ands	r0, r1
   1f75e:	4770      	bx	lr

0001f760 <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   1f760:	3901      	subs	r1, #1
   1f762:	b24b      	sxtb	r3, r1
{
   1f764:	4602      	mov	r2, r0
   1f766:	eb00 0183 	add.w	r1, r0, r3, lsl #2
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   1f76a:	2b00      	cmp	r3, #0
   1f76c:	da03      	bge.n	1f776 <uECC_vli_numBits+0x16>
	return (i + 1);
   1f76e:	3301      	adds	r3, #1
   1f770:	b258      	sxtb	r0, r3
	if (num_digits == 0) {
   1f772:	b938      	cbnz	r0, 1f784 <uECC_vli_numBits+0x24>
   1f774:	4770      	bx	lr
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   1f776:	f851 0904 	ldr.w	r0, [r1], #-4
   1f77a:	2800      	cmp	r0, #0
   1f77c:	d1f7      	bne.n	1f76e <uECC_vli_numBits+0xe>
   1f77e:	3b01      	subs	r3, #1
   1f780:	b25b      	sxtb	r3, r3
   1f782:	e7f2      	b.n	1f76a <uECC_vli_numBits+0xa>
	digit = vli[num_digits - 1];
   1f784:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   1f788:	3b01      	subs	r3, #1
   1f78a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	for (i = 0; digit; ++i) {
   1f78e:	2300      	movs	r3, #0
   1f790:	b922      	cbnz	r2, 1f79c <uECC_vli_numBits+0x3c>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   1f792:	3801      	subs	r0, #1
   1f794:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   1f798:	b200      	sxth	r0, r0
}
   1f79a:	4770      	bx	lr
		digit >>= 1;
   1f79c:	0852      	lsrs	r2, r2, #1
	for (i = 0; digit; ++i) {
   1f79e:	3301      	adds	r3, #1
   1f7a0:	e7f6      	b.n	1f790 <uECC_vli_numBits+0x30>

0001f7a2 <uECC_vli_set>:
{
   1f7a2:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   1f7a4:	2300      	movs	r3, #0
   1f7a6:	b25c      	sxtb	r4, r3
   1f7a8:	42a2      	cmp	r2, r4
   1f7aa:	dc00      	bgt.n	1f7ae <uECC_vli_set+0xc>
}
   1f7ac:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   1f7ae:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   1f7b2:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   1f7b6:	3301      	adds	r3, #1
   1f7b8:	e7f5      	b.n	1f7a6 <uECC_vli_set+0x4>

0001f7ba <uECC_vli_cmp_unsafe>:
{
   1f7ba:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   1f7bc:	3a01      	subs	r2, #1
   1f7be:	b253      	sxtb	r3, r2
   1f7c0:	009a      	lsls	r2, r3, #2
   1f7c2:	2b00      	cmp	r3, #0
   1f7c4:	da01      	bge.n	1f7ca <uECC_vli_cmp_unsafe+0x10>
	return 0;
   1f7c6:	2000      	movs	r0, #0
}
   1f7c8:	bd30      	pop	{r4, r5, pc}
		if (left[i] > right[i]) {
   1f7ca:	5885      	ldr	r5, [r0, r2]
   1f7cc:	588c      	ldr	r4, [r1, r2]
   1f7ce:	42a5      	cmp	r5, r4
   1f7d0:	d805      	bhi.n	1f7de <uECC_vli_cmp_unsafe+0x24>
		} else if (left[i] < right[i]) {
   1f7d2:	f1a2 0204 	sub.w	r2, r2, #4
   1f7d6:	d304      	bcc.n	1f7e2 <uECC_vli_cmp_unsafe+0x28>
	for (i = num_words - 1; i >= 0; --i) {
   1f7d8:	3b01      	subs	r3, #1
   1f7da:	b25b      	sxtb	r3, r3
   1f7dc:	e7f1      	b.n	1f7c2 <uECC_vli_cmp_unsafe+0x8>
			return 1;
   1f7de:	2001      	movs	r0, #1
   1f7e0:	e7f2      	b.n	1f7c8 <uECC_vli_cmp_unsafe+0xe>
			return -1;
   1f7e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f7e6:	e7ef      	b.n	1f7c8 <uECC_vli_cmp_unsafe+0xe>

0001f7e8 <uECC_vli_equal>:
	for (i = num_words - 1; i >= 0; --i) {
   1f7e8:	3a01      	subs	r2, #1
   1f7ea:	b253      	sxtb	r3, r2
{
   1f7ec:	b570      	push	{r4, r5, r6, lr}
   1f7ee:	009a      	lsls	r2, r3, #2
	uECC_word_t diff = 0;
   1f7f0:	2400      	movs	r4, #0
	for (i = num_words - 1; i >= 0; --i) {
   1f7f2:	2b00      	cmp	r3, #0
   1f7f4:	da03      	bge.n	1f7fe <uECC_vli_equal+0x16>
}
   1f7f6:	1e20      	subs	r0, r4, #0
   1f7f8:	bf18      	it	ne
   1f7fa:	2001      	movne	r0, #1
   1f7fc:	bd70      	pop	{r4, r5, r6, pc}
		diff |= (left[i] ^ right[i]);
   1f7fe:	5885      	ldr	r5, [r0, r2]
   1f800:	588e      	ldr	r6, [r1, r2]
	for (i = num_words - 1; i >= 0; --i) {
   1f802:	3b01      	subs	r3, #1
		diff |= (left[i] ^ right[i]);
   1f804:	4075      	eors	r5, r6
   1f806:	432c      	orrs	r4, r5
	for (i = num_words - 1; i >= 0; --i) {
   1f808:	b25b      	sxtb	r3, r3
   1f80a:	3a04      	subs	r2, #4
   1f80c:	e7f1      	b.n	1f7f2 <uECC_vli_equal+0xa>

0001f80e <uECC_vli_sub>:
{
   1f80e:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   1f810:	2400      	movs	r4, #0
{
   1f812:	4606      	mov	r6, r0
   1f814:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   1f816:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   1f818:	b265      	sxtb	r5, r4
   1f81a:	45ac      	cmp	ip, r5
   1f81c:	dc00      	bgt.n	1f820 <uECC_vli_sub+0x12>
}
   1f81e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   1f820:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   1f824:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   1f828:	1a3d      	subs	r5, r7, r0
   1f82a:	1aed      	subs	r5, r5, r3
		borrow = cond_set(val, borrow, (diff != left[i]));
   1f82c:	42af      	cmp	r7, r5
		uECC_word_t val = (diff > left[i]);
   1f82e:	bf34      	ite	cc
   1f830:	2701      	movcc	r7, #1
   1f832:	2700      	movcs	r7, #0
		result[i] = diff;
   1f834:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   1f838:	bf18      	it	ne
   1f83a:	4638      	movne	r0, r7
	for (i = 0; i < num_words; ++i) {
   1f83c:	3401      	adds	r4, #1
   1f83e:	e7eb      	b.n	1f818 <uECC_vli_sub+0xa>

0001f840 <uECC_vli_modAdd>:
{
   1f840:	b570      	push	{r4, r5, r6, lr}
   1f842:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   1f846:	461d      	mov	r5, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   1f848:	4633      	mov	r3, r6
{
   1f84a:	4604      	mov	r4, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   1f84c:	f7ff feab 	bl	1f5a6 <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   1f850:	b930      	cbnz	r0, 1f860 <uECC_vli_modAdd+0x20>
   1f852:	4632      	mov	r2, r6
   1f854:	4621      	mov	r1, r4
   1f856:	4628      	mov	r0, r5
   1f858:	f7ff ffaf 	bl	1f7ba <uECC_vli_cmp_unsafe>
   1f85c:	2801      	cmp	r0, #1
   1f85e:	d007      	beq.n	1f870 <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   1f860:	4633      	mov	r3, r6
   1f862:	462a      	mov	r2, r5
   1f864:	4621      	mov	r1, r4
   1f866:	4620      	mov	r0, r4
}
   1f868:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   1f86c:	f7ff bfcf 	b.w	1f80e <uECC_vli_sub>
}
   1f870:	bd70      	pop	{r4, r5, r6, pc}

0001f872 <uECC_vli_modSub>:
{
   1f872:	b570      	push	{r4, r5, r6, lr}
   1f874:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   1f878:	461d      	mov	r5, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   1f87a:	4633      	mov	r3, r6
{
   1f87c:	4604      	mov	r4, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   1f87e:	f7ff ffc6 	bl	1f80e <uECC_vli_sub>
	if (l_borrow) {
   1f882:	b138      	cbz	r0, 1f894 <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   1f884:	4633      	mov	r3, r6
   1f886:	462a      	mov	r2, r5
   1f888:	4621      	mov	r1, r4
   1f88a:	4620      	mov	r0, r4
}
   1f88c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   1f890:	f7ff be89 	b.w	1f5a6 <uECC_vli_add>
}
   1f894:	bd70      	pop	{r4, r5, r6, pc}

0001f896 <uECC_vli_mmod>:
{
   1f896:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f89a:	b0a5      	sub	sp, #148	; 0x94
   1f89c:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   1f89e:	ab14      	add	r3, sp, #80	; 0x50
   1f8a0:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   1f8a4:	4680      	mov	r8, r0
			   uECC_vli_numBits(mod, num_words);
   1f8a6:	4629      	mov	r1, r5
   1f8a8:	4610      	mov	r0, r2
{
   1f8aa:	4616      	mov	r6, r2
			   uECC_vli_numBits(mod, num_words);
   1f8ac:	f7ff ff58 	bl	1f760 <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   1f8b0:	ebc0 1485 	rsb	r4, r0, r5, lsl #6
   1f8b4:	b224      	sxth	r4, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   1f8b6:	2c00      	cmp	r4, #0
   1f8b8:	4621      	mov	r1, r4
   1f8ba:	bfb8      	it	lt
   1f8bc:	f104 011f 	addlt.w	r1, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   1f8c0:	4263      	negs	r3, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   1f8c2:	f341 1147 	sbfx	r1, r1, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   1f8c6:	f003 031f 	and.w	r3, r3, #31
	uECC_vli_clear(mod_multiple, word_shift);
   1f8ca:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   1f8cc:	f004 071f 	and.w	r7, r4, #31
   1f8d0:	bf58      	it	pl
   1f8d2:	425f      	negpl	r7, r3
	uECC_vli_clear(mod_multiple, word_shift);
   1f8d4:	f7ff ff20 	bl	1f718 <uECC_vli_clear>
	if (bit_shift > 0) {
   1f8d8:	2f00      	cmp	r7, #0
   1f8da:	b208      	sxth	r0, r1
   1f8dc:	dd2b      	ble.n	1f936 <uECC_vli_mmod+0xa0>
   1f8de:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   1f8e0:	2200      	movs	r2, #0
   1f8e2:	eb03 0180 	add.w	r1, r3, r0, lsl #2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   1f8e6:	f1c7 0e20 	rsb	lr, r7, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   1f8ea:	4613      	mov	r3, r2
   1f8ec:	429d      	cmp	r5, r3
   1f8ee:	d817      	bhi.n	1f920 <uECC_vli_mmod+0x8a>
		for (i = 0; i < num_words * 2; ++i) {
   1f8f0:	006b      	lsls	r3, r5, #1
   1f8f2:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1f8f4:	ab04      	add	r3, sp, #16
   1f8f6:	eb03 0985 	add.w	r9, r3, r5, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1f8fa:	1e6f      	subs	r7, r5, #1
   1f8fc:	ab24      	add	r3, sp, #144	; 0x90
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1f8fe:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1f900:	eb03 0787 	add.w	r7, r3, r7, lsl #2
	for (index = 1; shift >= 0; --shift) {
   1f904:	2c00      	cmp	r4, #0
   1f906:	da54      	bge.n	1f9b2 <uECC_vli_mmod+0x11c>
	uECC_vli_set(result, v[index], num_words);
   1f908:	ab24      	add	r3, sp, #144	; 0x90
   1f90a:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   1f90e:	462a      	mov	r2, r5
   1f910:	f856 1c88 	ldr.w	r1, [r6, #-136]
   1f914:	4640      	mov	r0, r8
   1f916:	f7ff ff44 	bl	1f7a2 <uECC_vli_set>
}
   1f91a:	b025      	add	sp, #148	; 0x94
   1f91c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   1f920:	f856 c023 	ldr.w	ip, [r6, r3, lsl #2]
   1f924:	fa0c f007 	lsl.w	r0, ip, r7
   1f928:	4302      	orrs	r2, r0
   1f92a:	f841 2b04 	str.w	r2, [r1], #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   1f92e:	3301      	adds	r3, #1
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   1f930:	fa2c f20e 	lsr.w	r2, ip, lr
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   1f934:	e7da      	b.n	1f8ec <uECC_vli_mmod+0x56>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   1f936:	ab04      	add	r3, sp, #16
   1f938:	462a      	mov	r2, r5
   1f93a:	4631      	mov	r1, r6
   1f93c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1f940:	f7ff ff2f 	bl	1f7a2 <uECC_vli_set>
   1f944:	e7d4      	b.n	1f8f0 <uECC_vli_mmod+0x5a>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   1f946:	fa0f fe82 	sxth.w	lr, r2
   1f94a:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   1f94e:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
   1f952:	ab24      	add	r3, sp, #144	; 0x90
   1f954:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   1f958:	3001      	adds	r0, #1
   1f95a:	f852 3c80 	ldr.w	r3, [r2, #-128]
   1f95e:	440b      	add	r3, r1
   1f960:	ebbb 0303 	subs.w	r3, fp, r3
   1f964:	bf34      	ite	cc
   1f966:	2201      	movcc	r2, #1
   1f968:	2200      	movcs	r2, #0
			if (diff != v[index][i]) {
   1f96a:	459b      	cmp	fp, r3
				borrow = (diff > v[index][i]);
   1f96c:	bf18      	it	ne
   1f96e:	4611      	movne	r1, r2
			v[1 - index][i] = diff;
   1f970:	f85c 2c88 	ldr.w	r2, [ip, #-136]
   1f974:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
		for (i = 0; i < num_words * 2; ++i) {
   1f978:	9b01      	ldr	r3, [sp, #4]
   1f97a:	b242      	sxtb	r2, r0
   1f97c:	429a      	cmp	r2, r3
   1f97e:	dbe2      	blt.n	1f946 <uECC_vli_mmod+0xb0>
		index = !(index ^ borrow);
   1f980:	1a73      	subs	r3, r6, r1
   1f982:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   1f984:	4629      	mov	r1, r5
   1f986:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   1f988:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   1f98a:	f7ff fe24 	bl	1f5d6 <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1f98e:	ab24      	add	r3, sp, #144	; 0x90
   1f990:	eb03 0385 	add.w	r3, r3, r5, lsl #2
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1f994:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1f996:	f853 2c80 	ldr.w	r2, [r3, #-128]
   1f99a:	f857 3c80 	ldr.w	r3, [r7, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1f99e:	4648      	mov	r0, r9
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1f9a0:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
	for (index = 1; shift >= 0; --shift) {
   1f9a4:	3c01      	subs	r4, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1f9a6:	f847 3c80 	str.w	r3, [r7, #-128]
	for (index = 1; shift >= 0; --shift) {
   1f9aa:	b224      	sxth	r4, r4
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1f9ac:	f7ff fe13 	bl	1f5d6 <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
   1f9b0:	e7a8      	b.n	1f904 <uECC_vli_mmod+0x6e>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   1f9b2:	ab24      	add	r3, sp, #144	; 0x90
   1f9b4:	2000      	movs	r0, #0
			v[1 - index][i] = diff;
   1f9b6:	f1c6 0c01 	rsb	ip, r6, #1
		uECC_word_t borrow = 0;
   1f9ba:	4601      	mov	r1, r0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   1f9bc:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   1f9c0:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   1f9c4:	e7d8      	b.n	1f978 <uECC_vli_mmod+0xe2>

0001f9c6 <uECC_vli_modMult_fast>:
{
   1f9c6:	b530      	push	{r4, r5, lr}
   1f9c8:	461c      	mov	r4, r3
   1f9ca:	b091      	sub	sp, #68	; 0x44
   1f9cc:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   1f9ce:	f993 3000 	ldrsb.w	r3, [r3]
   1f9d2:	4668      	mov	r0, sp
   1f9d4:	f7ff fe28 	bl	1f628 <uECC_vli_mult>
	curve->mmod_fast(result, product);
   1f9d8:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   1f9dc:	4669      	mov	r1, sp
   1f9de:	4628      	mov	r0, r5
   1f9e0:	4798      	blx	r3
}
   1f9e2:	b011      	add	sp, #68	; 0x44
   1f9e4:	bd30      	pop	{r4, r5, pc}

0001f9e6 <uECC_vli_modSquare_fast>:
{
   1f9e6:	4613      	mov	r3, r2
	uECC_vli_modMult_fast(result, left, left, curve);
   1f9e8:	460a      	mov	r2, r1
   1f9ea:	f7ff bfec 	b.w	1f9c6 <uECC_vli_modMult_fast>

0001f9ee <double_jacobian_default>:
{
   1f9ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   1f9f2:	f993 6000 	ldrsb.w	r6, [r3]
{
   1f9f6:	b092      	sub	sp, #72	; 0x48
   1f9f8:	4604      	mov	r4, r0
   1f9fa:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   1f9fc:	4610      	mov	r0, r2
   1f9fe:	4631      	mov	r1, r6
{
   1fa00:	4615      	mov	r5, r2
   1fa02:	461f      	mov	r7, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   1fa04:	f7ff fe93 	bl	1f72e <uECC_vli_isZero>
   1fa08:	2800      	cmp	r0, #0
   1fa0a:	f040 8091 	bne.w	1fb30 <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   1fa0e:	463a      	mov	r2, r7
   1fa10:	4649      	mov	r1, r9
   1fa12:	a802      	add	r0, sp, #8
   1fa14:	f7ff ffe7 	bl	1f9e6 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   1fa18:	463b      	mov	r3, r7
   1fa1a:	aa02      	add	r2, sp, #8
   1fa1c:	4621      	mov	r1, r4
   1fa1e:	a80a      	add	r0, sp, #40	; 0x28
   1fa20:	f7ff ffd1 	bl	1f9c6 <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   1fa24:	a902      	add	r1, sp, #8
   1fa26:	4608      	mov	r0, r1
   1fa28:	463a      	mov	r2, r7
   1fa2a:	f7ff ffdc 	bl	1f9e6 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   1fa2e:	463b      	mov	r3, r7
   1fa30:	462a      	mov	r2, r5
   1fa32:	4649      	mov	r1, r9
   1fa34:	4648      	mov	r0, r9
   1fa36:	f7ff ffc6 	bl	1f9c6 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   1fa3a:	f107 0804 	add.w	r8, r7, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   1fa3e:	463a      	mov	r2, r7
   1fa40:	4629      	mov	r1, r5
   1fa42:	4628      	mov	r0, r5
   1fa44:	f7ff ffcf 	bl	1f9e6 <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   1fa48:	4643      	mov	r3, r8
   1fa4a:	462a      	mov	r2, r5
   1fa4c:	4621      	mov	r1, r4
   1fa4e:	4620      	mov	r0, r4
   1fa50:	9600      	str	r6, [sp, #0]
   1fa52:	f7ff fef5 	bl	1f840 <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   1fa56:	4643      	mov	r3, r8
   1fa58:	462a      	mov	r2, r5
   1fa5a:	4629      	mov	r1, r5
   1fa5c:	4628      	mov	r0, r5
   1fa5e:	9600      	str	r6, [sp, #0]
   1fa60:	f7ff feee 	bl	1f840 <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   1fa64:	4643      	mov	r3, r8
   1fa66:	462a      	mov	r2, r5
   1fa68:	4621      	mov	r1, r4
   1fa6a:	4628      	mov	r0, r5
   1fa6c:	9600      	str	r6, [sp, #0]
   1fa6e:	f7ff ff00 	bl	1f872 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   1fa72:	463b      	mov	r3, r7
   1fa74:	462a      	mov	r2, r5
   1fa76:	4621      	mov	r1, r4
   1fa78:	4620      	mov	r0, r4
   1fa7a:	f7ff ffa4 	bl	1f9c6 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   1fa7e:	4643      	mov	r3, r8
   1fa80:	4622      	mov	r2, r4
   1fa82:	4621      	mov	r1, r4
   1fa84:	4628      	mov	r0, r5
   1fa86:	9600      	str	r6, [sp, #0]
   1fa88:	f7ff feda 	bl	1f840 <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   1fa8c:	4643      	mov	r3, r8
   1fa8e:	9600      	str	r6, [sp, #0]
   1fa90:	462a      	mov	r2, r5
   1fa92:	4621      	mov	r1, r4
   1fa94:	4620      	mov	r0, r4
   1fa96:	f7ff fed3 	bl	1f840 <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1fa9a:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   1fa9c:	07db      	lsls	r3, r3, #31
   1fa9e:	d54a      	bpl.n	1fb36 <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   1faa0:	4633      	mov	r3, r6
   1faa2:	4642      	mov	r2, r8
   1faa4:	4621      	mov	r1, r4
   1faa6:	4620      	mov	r0, r4
   1faa8:	f7ff fd7d 	bl	1f5a6 <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   1faac:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   1faae:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   1fab0:	4620      	mov	r0, r4
   1fab2:	f7ff fd90 	bl	1f5d6 <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   1fab6:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   1faba:	3b01      	subs	r3, #1
   1fabc:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   1fac0:	ea42 72ca 	orr.w	r2, r2, sl, lsl #31
   1fac4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   1fac8:	463a      	mov	r2, r7
   1faca:	4621      	mov	r1, r4
   1facc:	4628      	mov	r0, r5
   1face:	f7ff ff8a 	bl	1f9e6 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   1fad2:	4643      	mov	r3, r8
   1fad4:	aa0a      	add	r2, sp, #40	; 0x28
   1fad6:	4629      	mov	r1, r5
   1fad8:	4628      	mov	r0, r5
   1fada:	9600      	str	r6, [sp, #0]
   1fadc:	f7ff fec9 	bl	1f872 <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   1fae0:	4643      	mov	r3, r8
   1fae2:	aa0a      	add	r2, sp, #40	; 0x28
   1fae4:	4629      	mov	r1, r5
   1fae6:	4628      	mov	r0, r5
   1fae8:	9600      	str	r6, [sp, #0]
   1faea:	f7ff fec2 	bl	1f872 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   1faee:	a90a      	add	r1, sp, #40	; 0x28
   1faf0:	4608      	mov	r0, r1
   1faf2:	4643      	mov	r3, r8
   1faf4:	462a      	mov	r2, r5
   1faf6:	9600      	str	r6, [sp, #0]
   1faf8:	f7ff febb 	bl	1f872 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   1fafc:	463b      	mov	r3, r7
   1fafe:	aa0a      	add	r2, sp, #40	; 0x28
   1fb00:	4621      	mov	r1, r4
   1fb02:	4620      	mov	r0, r4
   1fb04:	f7ff ff5f 	bl	1f9c6 <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   1fb08:	aa02      	add	r2, sp, #8
   1fb0a:	4643      	mov	r3, r8
   1fb0c:	4610      	mov	r0, r2
   1fb0e:	4621      	mov	r1, r4
   1fb10:	9600      	str	r6, [sp, #0]
   1fb12:	f7ff feae 	bl	1f872 <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   1fb16:	4632      	mov	r2, r6
   1fb18:	4629      	mov	r1, r5
   1fb1a:	4620      	mov	r0, r4
   1fb1c:	f7ff fe41 	bl	1f7a2 <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   1fb20:	4649      	mov	r1, r9
   1fb22:	4628      	mov	r0, r5
   1fb24:	f7ff fe3d 	bl	1f7a2 <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   1fb28:	a902      	add	r1, sp, #8
   1fb2a:	4648      	mov	r0, r9
   1fb2c:	f7ff fe39 	bl	1f7a2 <uECC_vli_set>
}
   1fb30:	b012      	add	sp, #72	; 0x48
   1fb32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   1fb36:	4631      	mov	r1, r6
   1fb38:	4620      	mov	r0, r4
   1fb3a:	f7ff fd4c 	bl	1f5d6 <uECC_vli_rshift1>
   1fb3e:	e7c3      	b.n	1fac8 <double_jacobian_default+0xda>

0001fb40 <x_side_default>:
{
   1fb40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fb44:	4615      	mov	r5, r2
   1fb46:	b08a      	sub	sp, #40	; 0x28
   1fb48:	4604      	mov	r4, r0
   1fb4a:	460e      	mov	r6, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   1fb4c:	221c      	movs	r2, #28
   1fb4e:	2100      	movs	r1, #0
   1fb50:	a803      	add	r0, sp, #12
   1fb52:	f003 fd94 	bl	2367e <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   1fb56:	1d2f      	adds	r7, r5, #4
	wordcount_t num_words = curve->num_words;
   1fb58:	f995 8000 	ldrsb.w	r8, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   1fb5c:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   1fb5e:	462a      	mov	r2, r5
   1fb60:	4631      	mov	r1, r6
   1fb62:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   1fb64:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   1fb66:	f7ff ff3e 	bl	1f9e6 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   1fb6a:	463b      	mov	r3, r7
   1fb6c:	aa02      	add	r2, sp, #8
   1fb6e:	4621      	mov	r1, r4
   1fb70:	4620      	mov	r0, r4
   1fb72:	f8cd 8000 	str.w	r8, [sp]
   1fb76:	f7ff fe7c 	bl	1f872 <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   1fb7a:	462b      	mov	r3, r5
   1fb7c:	4632      	mov	r2, r6
   1fb7e:	4621      	mov	r1, r4
   1fb80:	4620      	mov	r0, r4
   1fb82:	f7ff ff20 	bl	1f9c6 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   1fb86:	f8cd 8000 	str.w	r8, [sp]
   1fb8a:	463b      	mov	r3, r7
   1fb8c:	f105 0284 	add.w	r2, r5, #132	; 0x84
   1fb90:	4621      	mov	r1, r4
   1fb92:	4620      	mov	r0, r4
   1fb94:	f7ff fe54 	bl	1f840 <uECC_vli_modAdd>
}
   1fb98:	b00a      	add	sp, #40	; 0x28
   1fb9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001fb9e <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   1fb9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1fba2:	b09a      	sub	sp, #104	; 0x68
   1fba4:	4616      	mov	r6, r2
   1fba6:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   1fbaa:	4644      	mov	r4, r8
{
   1fbac:	4699      	mov	r9, r3
	wordcount_t num_words = curve->num_words;
   1fbae:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1fbb2:	9500      	str	r5, [sp, #0]
{
   1fbb4:	4607      	mov	r7, r0
   1fbb6:	468a      	mov	sl, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1fbb8:	4623      	mov	r3, r4
   1fbba:	4602      	mov	r2, r0
   1fbbc:	4631      	mov	r1, r6
   1fbbe:	a802      	add	r0, sp, #8
   1fbc0:	f7ff fe57 	bl	1f872 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   1fbc4:	a902      	add	r1, sp, #8
   1fbc6:	4642      	mov	r2, r8
   1fbc8:	4608      	mov	r0, r1
   1fbca:	f7ff ff0c 	bl	1f9e6 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   1fbce:	4643      	mov	r3, r8
   1fbd0:	aa02      	add	r2, sp, #8
   1fbd2:	4639      	mov	r1, r7
   1fbd4:	4638      	mov	r0, r7
   1fbd6:	f7ff fef6 	bl	1f9c6 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   1fbda:	4643      	mov	r3, r8
   1fbdc:	aa02      	add	r2, sp, #8
   1fbde:	4631      	mov	r1, r6
   1fbe0:	4630      	mov	r0, r6
   1fbe2:	f7ff fef0 	bl	1f9c6 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   1fbe6:	4623      	mov	r3, r4
   1fbe8:	4652      	mov	r2, sl
   1fbea:	4649      	mov	r1, r9
   1fbec:	a802      	add	r0, sp, #8
   1fbee:	9500      	str	r5, [sp, #0]
   1fbf0:	f7ff fe26 	bl	1f840 <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   1fbf4:	4623      	mov	r3, r4
   1fbf6:	4652      	mov	r2, sl
   1fbf8:	4649      	mov	r1, r9
   1fbfa:	4648      	mov	r0, r9
   1fbfc:	9500      	str	r5, [sp, #0]
   1fbfe:	f7ff fe38 	bl	1f872 <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   1fc02:	4623      	mov	r3, r4
   1fc04:	463a      	mov	r2, r7
   1fc06:	4631      	mov	r1, r6
   1fc08:	a80a      	add	r0, sp, #40	; 0x28
   1fc0a:	9500      	str	r5, [sp, #0]
   1fc0c:	f7ff fe31 	bl	1f872 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   1fc10:	4643      	mov	r3, r8
   1fc12:	aa0a      	add	r2, sp, #40	; 0x28
   1fc14:	4651      	mov	r1, sl
   1fc16:	4650      	mov	r0, sl
   1fc18:	f7ff fed5 	bl	1f9c6 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   1fc1c:	4623      	mov	r3, r4
   1fc1e:	4632      	mov	r2, r6
   1fc20:	4639      	mov	r1, r7
   1fc22:	a80a      	add	r0, sp, #40	; 0x28
   1fc24:	9500      	str	r5, [sp, #0]
   1fc26:	f7ff fe0b 	bl	1f840 <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   1fc2a:	4642      	mov	r2, r8
   1fc2c:	4649      	mov	r1, r9
   1fc2e:	4630      	mov	r0, r6
   1fc30:	f7ff fed9 	bl	1f9e6 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   1fc34:	4623      	mov	r3, r4
   1fc36:	aa0a      	add	r2, sp, #40	; 0x28
   1fc38:	4631      	mov	r1, r6
   1fc3a:	4630      	mov	r0, r6
   1fc3c:	9500      	str	r5, [sp, #0]
   1fc3e:	f7ff fe18 	bl	1f872 <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   1fc42:	4623      	mov	r3, r4
   1fc44:	4632      	mov	r2, r6
   1fc46:	4639      	mov	r1, r7
   1fc48:	a812      	add	r0, sp, #72	; 0x48
   1fc4a:	9500      	str	r5, [sp, #0]
   1fc4c:	f7ff fe11 	bl	1f872 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   1fc50:	4643      	mov	r3, r8
   1fc52:	aa12      	add	r2, sp, #72	; 0x48
   1fc54:	4649      	mov	r1, r9
   1fc56:	4648      	mov	r0, r9
   1fc58:	f7ff feb5 	bl	1f9c6 <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   1fc5c:	4623      	mov	r3, r4
   1fc5e:	4652      	mov	r2, sl
   1fc60:	4649      	mov	r1, r9
   1fc62:	4648      	mov	r0, r9
   1fc64:	9500      	str	r5, [sp, #0]
   1fc66:	f7ff fe04 	bl	1f872 <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   1fc6a:	4642      	mov	r2, r8
   1fc6c:	a902      	add	r1, sp, #8
   1fc6e:	a812      	add	r0, sp, #72	; 0x48
   1fc70:	f7ff feb9 	bl	1f9e6 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   1fc74:	a912      	add	r1, sp, #72	; 0x48
   1fc76:	4623      	mov	r3, r4
   1fc78:	aa0a      	add	r2, sp, #40	; 0x28
   1fc7a:	4608      	mov	r0, r1
   1fc7c:	9500      	str	r5, [sp, #0]
   1fc7e:	f7ff fdf8 	bl	1f872 <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   1fc82:	4623      	mov	r3, r4
   1fc84:	463a      	mov	r2, r7
   1fc86:	a912      	add	r1, sp, #72	; 0x48
   1fc88:	a80a      	add	r0, sp, #40	; 0x28
   1fc8a:	9500      	str	r5, [sp, #0]
   1fc8c:	f7ff fdf1 	bl	1f872 <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   1fc90:	a90a      	add	r1, sp, #40	; 0x28
   1fc92:	4643      	mov	r3, r8
   1fc94:	aa02      	add	r2, sp, #8
   1fc96:	4608      	mov	r0, r1
   1fc98:	f7ff fe95 	bl	1f9c6 <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   1fc9c:	4623      	mov	r3, r4
   1fc9e:	4652      	mov	r2, sl
   1fca0:	a90a      	add	r1, sp, #40	; 0x28
   1fca2:	4650      	mov	r0, sl
   1fca4:	9500      	str	r5, [sp, #0]
   1fca6:	f7ff fde4 	bl	1f872 <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   1fcaa:	462a      	mov	r2, r5
   1fcac:	a912      	add	r1, sp, #72	; 0x48
   1fcae:	4638      	mov	r0, r7
   1fcb0:	f7ff fd77 	bl	1f7a2 <uECC_vli_set>
}
   1fcb4:	b01a      	add	sp, #104	; 0x68
   1fcb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001fcba <uECC_vli_modInv>:
{
   1fcba:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fcbc:	460f      	mov	r7, r1
   1fcbe:	b0a1      	sub	sp, #132	; 0x84
   1fcc0:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   1fcc2:	4619      	mov	r1, r3
   1fcc4:	4638      	mov	r0, r7
{
   1fcc6:	4615      	mov	r5, r2
   1fcc8:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   1fcca:	f7ff fd30 	bl	1f72e <uECC_vli_isZero>
   1fcce:	b120      	cbz	r0, 1fcda <uECC_vli_modInv+0x20>
		uECC_vli_clear(result, num_words);
   1fcd0:	4630      	mov	r0, r6
   1fcd2:	f7ff fd21 	bl	1f718 <uECC_vli_clear>
}
   1fcd6:	b021      	add	sp, #132	; 0x84
   1fcd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uECC_vli_set(a, input, num_words);
   1fcda:	4622      	mov	r2, r4
   1fcdc:	4639      	mov	r1, r7
   1fcde:	4668      	mov	r0, sp
   1fce0:	f7ff fd5f 	bl	1f7a2 <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   1fce4:	4629      	mov	r1, r5
   1fce6:	a808      	add	r0, sp, #32
   1fce8:	f7ff fd5b 	bl	1f7a2 <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   1fcec:	a810      	add	r0, sp, #64	; 0x40
   1fcee:	4621      	mov	r1, r4
   1fcf0:	f7ff fd12 	bl	1f718 <uECC_vli_clear>
	u[0] = 1;
   1fcf4:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   1fcf6:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   1fcf8:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   1fcfa:	f7ff fd0d 	bl	1f718 <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   1fcfe:	4622      	mov	r2, r4
   1fd00:	a908      	add	r1, sp, #32
   1fd02:	4668      	mov	r0, sp
   1fd04:	f7ff fd59 	bl	1f7ba <uECC_vli_cmp_unsafe>
   1fd08:	b928      	cbnz	r0, 1fd16 <uECC_vli_modInv+0x5c>
  	uECC_vli_set(result, u, num_words);
   1fd0a:	4622      	mov	r2, r4
   1fd0c:	a910      	add	r1, sp, #64	; 0x40
   1fd0e:	4630      	mov	r0, r6
   1fd10:	f7ff fd47 	bl	1f7a2 <uECC_vli_set>
   1fd14:	e7df      	b.n	1fcd6 <uECC_vli_modInv+0x1c>
		if (EVEN(a)) {
   1fd16:	9b00      	ldr	r3, [sp, #0]
   1fd18:	07da      	lsls	r2, r3, #31
   1fd1a:	d409      	bmi.n	1fd30 <uECC_vli_modInv+0x76>
			uECC_vli_rshift1(a, num_words);
   1fd1c:	4621      	mov	r1, r4
   1fd1e:	4668      	mov	r0, sp
   1fd20:	f7ff fc59 	bl	1f5d6 <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   1fd24:	4622      	mov	r2, r4
   1fd26:	4629      	mov	r1, r5
   1fd28:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   1fd2a:	f7ff fc61 	bl	1f5f0 <vli_modInv_update>
   1fd2e:	e7e6      	b.n	1fcfe <uECC_vli_modInv+0x44>
    		} else if (EVEN(b)) {
   1fd30:	9b08      	ldr	r3, [sp, #32]
   1fd32:	07db      	lsls	r3, r3, #31
   1fd34:	d407      	bmi.n	1fd46 <uECC_vli_modInv+0x8c>
			uECC_vli_rshift1(b, num_words);
   1fd36:	4621      	mov	r1, r4
   1fd38:	a808      	add	r0, sp, #32
   1fd3a:	f7ff fc4c 	bl	1f5d6 <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   1fd3e:	4622      	mov	r2, r4
   1fd40:	4629      	mov	r1, r5
   1fd42:	a818      	add	r0, sp, #96	; 0x60
   1fd44:	e7f1      	b.n	1fd2a <uECC_vli_modInv+0x70>
		} else if (cmpResult > 0) {
   1fd46:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   1fd48:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   1fd4a:	dd1c      	ble.n	1fd86 <uECC_vli_modInv+0xcc>
			uECC_vli_sub(a, a, b, num_words);
   1fd4c:	aa08      	add	r2, sp, #32
   1fd4e:	4669      	mov	r1, sp
   1fd50:	4668      	mov	r0, sp
   1fd52:	f7ff fd5c 	bl	1f80e <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   1fd56:	4621      	mov	r1, r4
   1fd58:	4668      	mov	r0, sp
   1fd5a:	f7ff fc3c 	bl	1f5d6 <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   1fd5e:	4622      	mov	r2, r4
   1fd60:	a918      	add	r1, sp, #96	; 0x60
   1fd62:	a810      	add	r0, sp, #64	; 0x40
   1fd64:	f7ff fd29 	bl	1f7ba <uECC_vli_cmp_unsafe>
   1fd68:	2800      	cmp	r0, #0
   1fd6a:	da05      	bge.n	1fd78 <uECC_vli_modInv+0xbe>
        			uECC_vli_add(u, u, mod, num_words);
   1fd6c:	a910      	add	r1, sp, #64	; 0x40
   1fd6e:	4623      	mov	r3, r4
   1fd70:	462a      	mov	r2, r5
   1fd72:	4608      	mov	r0, r1
   1fd74:	f7ff fc17 	bl	1f5a6 <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   1fd78:	a910      	add	r1, sp, #64	; 0x40
   1fd7a:	4623      	mov	r3, r4
   1fd7c:	aa18      	add	r2, sp, #96	; 0x60
   1fd7e:	4608      	mov	r0, r1
   1fd80:	f7ff fd45 	bl	1f80e <uECC_vli_sub>
   1fd84:	e7ce      	b.n	1fd24 <uECC_vli_modInv+0x6a>
      			uECC_vli_sub(b, b, a, num_words);
   1fd86:	a908      	add	r1, sp, #32
   1fd88:	466a      	mov	r2, sp
   1fd8a:	4608      	mov	r0, r1
   1fd8c:	f7ff fd3f 	bl	1f80e <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   1fd90:	4621      	mov	r1, r4
   1fd92:	a808      	add	r0, sp, #32
   1fd94:	f7ff fc1f 	bl	1f5d6 <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   1fd98:	4622      	mov	r2, r4
   1fd9a:	a910      	add	r1, sp, #64	; 0x40
   1fd9c:	a818      	add	r0, sp, #96	; 0x60
   1fd9e:	f7ff fd0c 	bl	1f7ba <uECC_vli_cmp_unsafe>
   1fda2:	2800      	cmp	r0, #0
   1fda4:	da05      	bge.n	1fdb2 <uECC_vli_modInv+0xf8>
        			uECC_vli_add(v, v, mod, num_words);
   1fda6:	a918      	add	r1, sp, #96	; 0x60
   1fda8:	4623      	mov	r3, r4
   1fdaa:	462a      	mov	r2, r5
   1fdac:	4608      	mov	r0, r1
   1fdae:	f7ff fbfa 	bl	1f5a6 <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   1fdb2:	a918      	add	r1, sp, #96	; 0x60
   1fdb4:	4623      	mov	r3, r4
   1fdb6:	aa10      	add	r2, sp, #64	; 0x40
   1fdb8:	4608      	mov	r0, r1
   1fdba:	f7ff fd28 	bl	1f80e <uECC_vli_sub>
   1fdbe:	e7be      	b.n	1fd3e <uECC_vli_modInv+0x84>

0001fdc0 <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   1fdc0:	7809      	ldrb	r1, [r1, #0]
   1fdc2:	0049      	lsls	r1, r1, #1
   1fdc4:	b249      	sxtb	r1, r1
   1fdc6:	f7ff bcb2 	b.w	1f72e <uECC_vli_isZero>

0001fdca <apply_z>:
{
   1fdca:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fdcc:	4615      	mov	r5, r2
   1fdce:	b089      	sub	sp, #36	; 0x24
   1fdd0:	461c      	mov	r4, r3
   1fdd2:	4607      	mov	r7, r0
   1fdd4:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   1fdd6:	461a      	mov	r2, r3
   1fdd8:	4629      	mov	r1, r5
   1fdda:	4668      	mov	r0, sp
   1fddc:	f7ff fe03 	bl	1f9e6 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   1fde0:	4623      	mov	r3, r4
   1fde2:	466a      	mov	r2, sp
   1fde4:	4639      	mov	r1, r7
   1fde6:	4638      	mov	r0, r7
   1fde8:	f7ff fded 	bl	1f9c6 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   1fdec:	4623      	mov	r3, r4
   1fdee:	462a      	mov	r2, r5
   1fdf0:	4669      	mov	r1, sp
   1fdf2:	4668      	mov	r0, sp
   1fdf4:	f7ff fde7 	bl	1f9c6 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   1fdf8:	4623      	mov	r3, r4
   1fdfa:	466a      	mov	r2, sp
   1fdfc:	4631      	mov	r1, r6
   1fdfe:	4630      	mov	r0, r6
   1fe00:	f7ff fde1 	bl	1f9c6 <uECC_vli_modMult_fast>
}
   1fe04:	b009      	add	sp, #36	; 0x24
   1fe06:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001fe08 <XYcZ_add>:
{
   1fe08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1fe0c:	b08a      	sub	sp, #40	; 0x28
   1fe0e:	4614      	mov	r4, r2
   1fe10:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
	wordcount_t num_words = curve->num_words;
   1fe14:	4655      	mov	r5, sl
{
   1fe16:	461f      	mov	r7, r3
	wordcount_t num_words = curve->num_words;
   1fe18:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1fe1c:	9600      	str	r6, [sp, #0]
{
   1fe1e:	4680      	mov	r8, r0
   1fe20:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1fe22:	462b      	mov	r3, r5
   1fe24:	4602      	mov	r2, r0
   1fe26:	4621      	mov	r1, r4
   1fe28:	a802      	add	r0, sp, #8
   1fe2a:	f7ff fd22 	bl	1f872 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   1fe2e:	a902      	add	r1, sp, #8
   1fe30:	4652      	mov	r2, sl
   1fe32:	4608      	mov	r0, r1
   1fe34:	f7ff fdd7 	bl	1f9e6 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   1fe38:	4653      	mov	r3, sl
   1fe3a:	aa02      	add	r2, sp, #8
   1fe3c:	4641      	mov	r1, r8
   1fe3e:	4640      	mov	r0, r8
   1fe40:	f7ff fdc1 	bl	1f9c6 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   1fe44:	4653      	mov	r3, sl
   1fe46:	aa02      	add	r2, sp, #8
   1fe48:	4621      	mov	r1, r4
   1fe4a:	4620      	mov	r0, r4
   1fe4c:	f7ff fdbb 	bl	1f9c6 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   1fe50:	462b      	mov	r3, r5
   1fe52:	464a      	mov	r2, r9
   1fe54:	4639      	mov	r1, r7
   1fe56:	4638      	mov	r0, r7
   1fe58:	9600      	str	r6, [sp, #0]
   1fe5a:	f7ff fd0a 	bl	1f872 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   1fe5e:	4652      	mov	r2, sl
   1fe60:	4639      	mov	r1, r7
   1fe62:	a802      	add	r0, sp, #8
   1fe64:	f7ff fdbf 	bl	1f9e6 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   1fe68:	a902      	add	r1, sp, #8
   1fe6a:	462b      	mov	r3, r5
   1fe6c:	4642      	mov	r2, r8
   1fe6e:	4608      	mov	r0, r1
   1fe70:	9600      	str	r6, [sp, #0]
   1fe72:	f7ff fcfe 	bl	1f872 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   1fe76:	a902      	add	r1, sp, #8
   1fe78:	462b      	mov	r3, r5
   1fe7a:	4622      	mov	r2, r4
   1fe7c:	4608      	mov	r0, r1
   1fe7e:	9600      	str	r6, [sp, #0]
   1fe80:	f7ff fcf7 	bl	1f872 <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   1fe84:	462b      	mov	r3, r5
   1fe86:	4642      	mov	r2, r8
   1fe88:	4621      	mov	r1, r4
   1fe8a:	4620      	mov	r0, r4
   1fe8c:	9600      	str	r6, [sp, #0]
   1fe8e:	f7ff fcf0 	bl	1f872 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   1fe92:	4653      	mov	r3, sl
   1fe94:	4622      	mov	r2, r4
   1fe96:	4649      	mov	r1, r9
   1fe98:	4648      	mov	r0, r9
   1fe9a:	f7ff fd94 	bl	1f9c6 <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   1fe9e:	462b      	mov	r3, r5
   1fea0:	aa02      	add	r2, sp, #8
   1fea2:	4641      	mov	r1, r8
   1fea4:	4620      	mov	r0, r4
   1fea6:	9600      	str	r6, [sp, #0]
   1fea8:	f7ff fce3 	bl	1f872 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   1feac:	4653      	mov	r3, sl
   1feae:	4622      	mov	r2, r4
   1feb0:	4639      	mov	r1, r7
   1feb2:	4638      	mov	r0, r7
   1feb4:	f7ff fd87 	bl	1f9c6 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   1feb8:	462b      	mov	r3, r5
   1feba:	464a      	mov	r2, r9
   1febc:	4639      	mov	r1, r7
   1febe:	4638      	mov	r0, r7
   1fec0:	9600      	str	r6, [sp, #0]
   1fec2:	f7ff fcd6 	bl	1f872 <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   1fec6:	4632      	mov	r2, r6
   1fec8:	a902      	add	r1, sp, #8
   1feca:	4620      	mov	r0, r4
   1fecc:	f7ff fc69 	bl	1f7a2 <uECC_vli_set>
}
   1fed0:	b00a      	add	sp, #40	; 0x28
   1fed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001fed6 <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   1fed6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1feda:	b0b1      	sub	sp, #196	; 0xc4
   1fedc:	e9cd 0103 	strd	r0, r1, [sp, #12]
   1fee0:	9c3b      	ldr	r4, [sp, #236]	; 0xec
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   1fee2:	f994 7000 	ldrsb.w	r7, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   1fee6:	a818      	add	r0, sp, #96	; 0x60
{
   1fee8:	4692      	mov	sl, r2
	uECC_vli_set(Rx[1], point, num_words);
   1feea:	463a      	mov	r2, r7
{
   1feec:	461e      	mov	r6, r3
	uECC_vli_set(Rx[1], point, num_words);
   1feee:	f7ff fc58 	bl	1f7a2 <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   1fef2:	00bb      	lsls	r3, r7, #2
   1fef4:	9305      	str	r3, [sp, #20]
   1fef6:	9b04      	ldr	r3, [sp, #16]
   1fef8:	eb03 0387 	add.w	r3, r3, r7, lsl #2
   1fefc:	4619      	mov	r1, r3
   1fefe:	a828      	add	r0, sp, #160	; 0xa0
   1ff00:	9302      	str	r3, [sp, #8]
   1ff02:	f7ff fc4e 	bl	1f7a2 <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
   1ff06:	f994 5000 	ldrsb.w	r5, [r4]
	if (initial_Z) {
   1ff0a:	2e00      	cmp	r6, #0
   1ff0c:	f000 8088 	beq.w	20020 <EccPoint_mult+0x14a>
		uECC_vli_set(z, initial_Z, num_words);
   1ff10:	462a      	mov	r2, r5
   1ff12:	4631      	mov	r1, r6
   1ff14:	a808      	add	r0, sp, #32
   1ff16:	f7ff fc44 	bl	1f7a2 <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   1ff1a:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   1ff1e:	462a      	mov	r2, r5
   1ff20:	a918      	add	r1, sp, #96	; 0x60
   1ff22:	4640      	mov	r0, r8
	uECC_vli_set(Y2, Y1, num_words);
   1ff24:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
   1ff28:	f7ff fc3b 	bl	1f7a2 <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   1ff2c:	a928      	add	r1, sp, #160	; 0xa0
   1ff2e:	4648      	mov	r0, r9
   1ff30:	f7ff fc37 	bl	1f7a2 <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   1ff34:	4623      	mov	r3, r4
   1ff36:	aa08      	add	r2, sp, #32
   1ff38:	a928      	add	r1, sp, #160	; 0xa0
   1ff3a:	a818      	add	r0, sp, #96	; 0x60
   1ff3c:	f7ff ff45 	bl	1fdca <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   1ff40:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   1ff44:	4623      	mov	r3, r4
   1ff46:	aa08      	add	r2, sp, #32
   1ff48:	a928      	add	r1, sp, #160	; 0xa0
   1ff4a:	a818      	add	r0, sp, #96	; 0x60
   1ff4c:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   1ff4e:	4623      	mov	r3, r4
   1ff50:	aa08      	add	r2, sp, #32
   1ff52:	4649      	mov	r1, r9
   1ff54:	4640      	mov	r0, r8
   1ff56:	f7ff ff38 	bl	1fdca <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   1ff5a:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
   1ff5e:	3d02      	subs	r5, #2
   1ff60:	b22d      	sxth	r5, r5
   1ff62:	2d00      	cmp	r5, #0
   1ff64:	dc63      	bgt.n	2002e <EccPoint_mult+0x158>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1ff66:	f8da 5000 	ldr.w	r5, [sl]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1ff6a:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1ff6c:	f005 0601 	and.w	r6, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1ff70:	ab10      	add	r3, sp, #64	; 0x40
   1ff72:	eb03 1846 	add.w	r8, r3, r6, lsl #5
   1ff76:	43ed      	mvns	r5, r5
   1ff78:	ab20      	add	r3, sp, #128	; 0x80
   1ff7a:	eb03 1646 	add.w	r6, r3, r6, lsl #5
   1ff7e:	f005 0501 	and.w	r5, r5, #1
   1ff82:	ab10      	add	r3, sp, #64	; 0x40
   1ff84:	eb03 1945 	add.w	r9, r3, r5, lsl #5
   1ff88:	ab20      	add	r3, sp, #128	; 0x80
   1ff8a:	eb03 1545 	add.w	r5, r3, r5, lsl #5

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   1ff8e:	f104 0a04 	add.w	sl, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1ff92:	462b      	mov	r3, r5
   1ff94:	464a      	mov	r2, r9
   1ff96:	4631      	mov	r1, r6
   1ff98:	4640      	mov	r0, r8
   1ff9a:	f7ff fe00 	bl	1fb9e <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   1ff9e:	4653      	mov	r3, sl
   1ffa0:	aa10      	add	r2, sp, #64	; 0x40
   1ffa2:	a918      	add	r1, sp, #96	; 0x60
   1ffa4:	a808      	add	r0, sp, #32
   1ffa6:	9700      	str	r7, [sp, #0]
   1ffa8:	f7ff fc63 	bl	1f872 <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   1ffac:	a908      	add	r1, sp, #32
   1ffae:	4623      	mov	r3, r4
   1ffb0:	4632      	mov	r2, r6
   1ffb2:	4608      	mov	r0, r1
   1ffb4:	f7ff fd07 	bl	1f9c6 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   1ffb8:	a908      	add	r1, sp, #32
   1ffba:	9a04      	ldr	r2, [sp, #16]
   1ffbc:	4623      	mov	r3, r4
   1ffbe:	4608      	mov	r0, r1
   1ffc0:	f7ff fd01 	bl	1f9c6 <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   1ffc4:	a908      	add	r1, sp, #32
   1ffc6:	463b      	mov	r3, r7
   1ffc8:	4652      	mov	r2, sl
   1ffca:	4608      	mov	r0, r1
   1ffcc:	f7ff fe75 	bl	1fcba <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   1ffd0:	a908      	add	r1, sp, #32
   1ffd2:	9a02      	ldr	r2, [sp, #8]
   1ffd4:	4623      	mov	r3, r4
   1ffd6:	4608      	mov	r0, r1
   1ffd8:	f7ff fcf5 	bl	1f9c6 <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   1ffdc:	a908      	add	r1, sp, #32
   1ffde:	4623      	mov	r3, r4
   1ffe0:	4642      	mov	r2, r8
   1ffe2:	4608      	mov	r0, r1
   1ffe4:	f7ff fcef 	bl	1f9c6 <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   1ffe8:	9400      	str	r4, [sp, #0]
   1ffea:	4633      	mov	r3, r6
   1ffec:	4642      	mov	r2, r8
   1ffee:	4629      	mov	r1, r5
   1fff0:	4648      	mov	r0, r9
   1fff2:	f7ff ff09 	bl	1fe08 <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   1fff6:	4623      	mov	r3, r4
   1fff8:	aa08      	add	r2, sp, #32
   1fffa:	a920      	add	r1, sp, #128	; 0x80
   1fffc:	a810      	add	r0, sp, #64	; 0x40
   1fffe:	f7ff fee4 	bl	1fdca <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   20002:	9803      	ldr	r0, [sp, #12]
   20004:	463a      	mov	r2, r7
   20006:	a910      	add	r1, sp, #64	; 0x40
   20008:	f7ff fbcb 	bl	1f7a2 <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   2000c:	9b03      	ldr	r3, [sp, #12]
   2000e:	9c05      	ldr	r4, [sp, #20]
   20010:	4423      	add	r3, r4
   20012:	a920      	add	r1, sp, #128	; 0x80
   20014:	4618      	mov	r0, r3
   20016:	f7ff fbc4 	bl	1f7a2 <uECC_vli_set>
}
   2001a:	b031      	add	sp, #196	; 0xc4
   2001c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   20020:	4629      	mov	r1, r5
   20022:	a808      	add	r0, sp, #32
   20024:	f7ff fb78 	bl	1f718 <uECC_vli_clear>
		z[0] = 1;
   20028:	2301      	movs	r3, #1
   2002a:	9308      	str	r3, [sp, #32]
   2002c:	e775      	b.n	1ff1a <EccPoint_mult+0x44>
		nb = !uECC_vli_testBit(scalar, i);
   2002e:	4629      	mov	r1, r5
   20030:	4650      	mov	r0, sl
   20032:	f7ff fb8b 	bl	1f74c <uECC_vli_testBit>
   20036:	fab0 f680 	clz	r6, r0
   2003a:	0976      	lsrs	r6, r6, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   2003c:	f1c6 0101 	rsb	r1, r6, #1
   20040:	eb08 1b46 	add.w	fp, r8, r6, lsl #5
   20044:	eb09 1646 	add.w	r6, r9, r6, lsl #5
   20048:	eb08 1041 	add.w	r0, r8, r1, lsl #5
   2004c:	4633      	mov	r3, r6
   2004e:	eb09 1141 	add.w	r1, r9, r1, lsl #5
   20052:	465a      	mov	r2, fp
   20054:	9400      	str	r4, [sp, #0]
   20056:	e9cd 0106 	strd	r0, r1, [sp, #24]
   2005a:	f7ff fda0 	bl	1fb9e <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   2005e:	9907      	ldr	r1, [sp, #28]
   20060:	9806      	ldr	r0, [sp, #24]
   20062:	9400      	str	r4, [sp, #0]
   20064:	460b      	mov	r3, r1
   20066:	4602      	mov	r2, r0
   20068:	4631      	mov	r1, r6
   2006a:	4658      	mov	r0, fp
   2006c:	f7ff fecc 	bl	1fe08 <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   20070:	3d01      	subs	r5, #1
   20072:	e775      	b.n	1ff60 <EccPoint_mult+0x8a>

00020074 <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   20074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   20078:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
   2007c:	f119 081f 	adds.w	r8, r9, #31
{
   20080:	461d      	mov	r5, r3
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   20082:	bf48      	it	mi
   20084:	f109 083e 	addmi.w	r8, r9, #62	; 0x3e
{
   20088:	460e      	mov	r6, r1
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   2008a:	f348 1847 	sbfx	r8, r8, #5, #8

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   2008e:	3524      	adds	r5, #36	; 0x24
   20090:	4601      	mov	r1, r0
{
   20092:	4617      	mov	r7, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   20094:	4643      	mov	r3, r8
   20096:	462a      	mov	r2, r5
   20098:	4630      	mov	r0, r6
   2009a:	f7ff fa84 	bl	1f5a6 <uECC_vli_add>
   2009e:	4604      	mov	r4, r0
   200a0:	b990      	cbnz	r0, 200c8 <regularize_k+0x54>
   200a2:	ebb9 1f48 	cmp.w	r9, r8, lsl #5
   200a6:	da06      	bge.n	200b6 <regularize_k+0x42>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   200a8:	4649      	mov	r1, r9
   200aa:	4630      	mov	r0, r6
   200ac:	f7ff fb4e 	bl	1f74c <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   200b0:	1e04      	subs	r4, r0, #0
   200b2:	bf18      	it	ne
   200b4:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   200b6:	4643      	mov	r3, r8
   200b8:	462a      	mov	r2, r5
   200ba:	4631      	mov	r1, r6
   200bc:	4638      	mov	r0, r7
   200be:	f7ff fa72 	bl	1f5a6 <uECC_vli_add>

	return carry;
}
   200c2:	4620      	mov	r0, r4
   200c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   200c8:	2401      	movs	r4, #1
   200ca:	e7f4      	b.n	200b6 <regularize_k+0x42>

000200cc <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   200cc:	b530      	push	{r4, r5, lr}
   200ce:	4614      	mov	r4, r2
   200d0:	b095      	sub	sp, #84	; 0x54
   200d2:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   200d4:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   200d6:	4623      	mov	r3, r4
{
   200d8:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   200da:	a904      	add	r1, sp, #16
   200dc:	9102      	str	r1, [sp, #8]
   200de:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   200e0:	f7ff ffc8 	bl	20074 <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   200e4:	fab0 f380 	clz	r3, r0
   200e8:	095b      	lsrs	r3, r3, #5
   200ea:	aa14      	add	r2, sp, #80	; 0x50
   200ec:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   200f0:	8863      	ldrh	r3, [r4, #2]
   200f2:	9401      	str	r4, [sp, #4]
   200f4:	3301      	adds	r3, #1
   200f6:	b21b      	sxth	r3, r3
   200f8:	9300      	str	r3, [sp, #0]
   200fa:	f852 2c48 	ldr.w	r2, [r2, #-72]
   200fe:	2300      	movs	r3, #0
   20100:	f104 0144 	add.w	r1, r4, #68	; 0x44
   20104:	4628      	mov	r0, r5
   20106:	f7ff fee6 	bl	1fed6 <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   2010a:	4621      	mov	r1, r4
   2010c:	4628      	mov	r0, r5
   2010e:	f7ff fe57 	bl	1fdc0 <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   20112:	fab0 f080 	clz	r0, r0
   20116:	0940      	lsrs	r0, r0, #5
   20118:	b015      	add	sp, #84	; 0x54
   2011a:	bd30      	pop	{r4, r5, pc}

0002011c <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   2011c:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   2011e:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   20120:	1e4f      	subs	r7, r1, #1
   20122:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   20124:	428c      	cmp	r4, r1
   20126:	f105 0501 	add.w	r5, r5, #1
   2012a:	db00      	blt.n	2012e <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   2012c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   2012e:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   20130:	f023 0603 	bic.w	r6, r3, #3
   20134:	f003 0303 	and.w	r3, r3, #3
   20138:	5996      	ldr	r6, [r2, r6]
   2013a:	00db      	lsls	r3, r3, #3
   2013c:	fa26 f303 	lsr.w	r3, r6, r3
   20140:	5503      	strb	r3, [r0, r4]
	for (i = 0; i < num_bytes; ++i) {
   20142:	e7ee      	b.n	20122 <uECC_vli_nativeToBytes+0x6>

00020144 <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   20144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20146:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   20148:	1cd1      	adds	r1, r2, #3
   2014a:	bf48      	it	mi
   2014c:	1d91      	addmi	r1, r2, #6
   2014e:	f341 0187 	sbfx	r1, r1, #2, #8
{
   20152:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   20154:	f7ff fae0 	bl	1f718 <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   20158:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   2015a:	1e67      	subs	r7, r4, #1
   2015c:	b26a      	sxtb	r2, r5
	for (i = 0; i < num_bytes; ++i) {
   2015e:	42a2      	cmp	r2, r4
   20160:	f105 0501 	add.w	r5, r5, #1
   20164:	db00      	blt.n	20168 <uECC_vli_bytesToNative+0x24>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   20166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   20168:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   2016a:	f023 0103 	bic.w	r1, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   2016e:	5cb2      	ldrb	r2, [r6, r2]
   20170:	f003 0303 	and.w	r3, r3, #3
   20174:	00db      	lsls	r3, r3, #3
   20176:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   2017a:	5842      	ldr	r2, [r0, r1]
   2017c:	431a      	orrs	r2, r3
   2017e:	5042      	str	r2, [r0, r1]
	for (i = 0; i < num_bytes; ++i) {
   20180:	e7ec      	b.n	2015c <uECC_vli_bytesToNative+0x18>

00020182 <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   20182:	b5f0      	push	{r4, r5, r6, r7, lr}
   20184:	b091      	sub	sp, #68	; 0x44
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   20186:	f991 6000 	ldrsb.w	r6, [r1]
{
   2018a:	4605      	mov	r5, r0
   2018c:	460c      	mov	r4, r1

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   2018e:	f7ff fe17 	bl	1fdc0 <EccPoint_isZero>
   20192:	bb28      	cbnz	r0, 201e0 <uECC_valid_point+0x5e>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   20194:	1d27      	adds	r7, r4, #4
   20196:	4632      	mov	r2, r6
   20198:	4629      	mov	r1, r5
   2019a:	4638      	mov	r0, r7
   2019c:	f7ff fb0d 	bl	1f7ba <uECC_vli_cmp_unsafe>
   201a0:	2801      	cmp	r0, #1
   201a2:	d120      	bne.n	201e6 <uECC_valid_point+0x64>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   201a4:	eb05 0186 	add.w	r1, r5, r6, lsl #2
   201a8:	4632      	mov	r2, r6
   201aa:	4638      	mov	r0, r7
   201ac:	f7ff fb05 	bl	1f7ba <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   201b0:	2801      	cmp	r0, #1
   201b2:	d118      	bne.n	201e6 <uECC_valid_point+0x64>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   201b4:	4622      	mov	r2, r4
   201b6:	4668      	mov	r0, sp
   201b8:	f7ff fc15 	bl	1f9e6 <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   201bc:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   201c0:	4622      	mov	r2, r4
   201c2:	4629      	mov	r1, r5
   201c4:	a808      	add	r0, sp, #32
   201c6:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   201c8:	4632      	mov	r2, r6
   201ca:	a908      	add	r1, sp, #32
   201cc:	4668      	mov	r0, sp
   201ce:	f7ff fb0b 	bl	1f7e8 <uECC_vli_equal>
   201d2:	2800      	cmp	r0, #0
		return -3;
   201d4:	bf0c      	ite	eq
   201d6:	2000      	moveq	r0, #0
   201d8:	f06f 0002 	mvnne.w	r0, #2

	return 0;
}
   201dc:	b011      	add	sp, #68	; 0x44
   201de:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   201e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   201e4:	e7fa      	b.n	201dc <uECC_valid_point+0x5a>
		return -2;
   201e6:	f06f 0001 	mvn.w	r0, #1
   201ea:	e7f7      	b.n	201dc <uECC_valid_point+0x5a>

000201ec <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   201ec:	b570      	push	{r4, r5, r6, lr}
   201ee:	460c      	mov	r4, r1
   201f0:	b090      	sub	sp, #64	; 0x40

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   201f2:	4626      	mov	r6, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   201f4:	f991 2001 	ldrsb.w	r2, [r1, #1]
{
   201f8:	4605      	mov	r5, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   201fa:	4601      	mov	r1, r0
   201fc:	4668      	mov	r0, sp
   201fe:	f7ff ffa1 	bl	20144 <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
   20202:	f994 2001 	ldrsb.w	r2, [r4, #1]
	_public + curve->num_words,
   20206:	f916 0b44 	ldrsb.w	r0, [r6], #68
	uECC_vli_bytesToNative(
   2020a:	18a9      	adds	r1, r5, r2
   2020c:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   20210:	f7ff ff98 	bl	20144 <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   20214:	2210      	movs	r2, #16
   20216:	4631      	mov	r1, r6
   20218:	4668      	mov	r0, sp
   2021a:	f7ff face 	bl	1f7ba <uECC_vli_cmp_unsafe>
   2021e:	b128      	cbz	r0, 2022c <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   20220:	4621      	mov	r1, r4
   20222:	4668      	mov	r0, sp
   20224:	f7ff ffad 	bl	20182 <uECC_valid_point>
}
   20228:	b010      	add	sp, #64	; 0x40
   2022a:	bd70      	pop	{r4, r5, r6, pc}
		return -4;
   2022c:	f06f 0003 	mvn.w	r0, #3
   20230:	e7fa      	b.n	20228 <uECC_valid_public_key+0x3c>

00020232 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   20232:	78cb      	ldrb	r3, [r1, #3]
   20234:	7802      	ldrb	r2, [r0, #0]
   20236:	4053      	eors	r3, r2
   20238:	7003      	strb	r3, [r0, #0]
   2023a:	884b      	ldrh	r3, [r1, #2]
   2023c:	7842      	ldrb	r2, [r0, #1]
   2023e:	4053      	eors	r3, r2
   20240:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   20242:	680a      	ldr	r2, [r1, #0]
   20244:	7883      	ldrb	r3, [r0, #2]
   20246:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2024a:	7083      	strb	r3, [r0, #2]
   2024c:	680a      	ldr	r2, [r1, #0]
   2024e:	78c3      	ldrb	r3, [r0, #3]
   20250:	4053      	eors	r3, r2
   20252:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   20254:	79cb      	ldrb	r3, [r1, #7]
   20256:	7902      	ldrb	r2, [r0, #4]
   20258:	4053      	eors	r3, r2
   2025a:	7103      	strb	r3, [r0, #4]
   2025c:	88cb      	ldrh	r3, [r1, #6]
   2025e:	7942      	ldrb	r2, [r0, #5]
   20260:	4053      	eors	r3, r2
   20262:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   20264:	684a      	ldr	r2, [r1, #4]
   20266:	7983      	ldrb	r3, [r0, #6]
   20268:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2026c:	7183      	strb	r3, [r0, #6]
   2026e:	684a      	ldr	r2, [r1, #4]
   20270:	79c3      	ldrb	r3, [r0, #7]
   20272:	4053      	eors	r3, r2
   20274:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   20276:	7acb      	ldrb	r3, [r1, #11]
   20278:	7a02      	ldrb	r2, [r0, #8]
   2027a:	4053      	eors	r3, r2
   2027c:	7203      	strb	r3, [r0, #8]
   2027e:	7a42      	ldrb	r2, [r0, #9]
   20280:	894b      	ldrh	r3, [r1, #10]
   20282:	4053      	eors	r3, r2
   20284:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   20286:	688a      	ldr	r2, [r1, #8]
   20288:	7a83      	ldrb	r3, [r0, #10]
   2028a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2028e:	7283      	strb	r3, [r0, #10]
   20290:	688a      	ldr	r2, [r1, #8]
   20292:	7ac3      	ldrb	r3, [r0, #11]
   20294:	4053      	eors	r3, r2
   20296:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   20298:	7bcb      	ldrb	r3, [r1, #15]
   2029a:	7b02      	ldrb	r2, [r0, #12]
   2029c:	4053      	eors	r3, r2
   2029e:	7303      	strb	r3, [r0, #12]
   202a0:	89cb      	ldrh	r3, [r1, #14]
   202a2:	7b42      	ldrb	r2, [r0, #13]
   202a4:	4053      	eors	r3, r2
   202a6:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   202a8:	68ca      	ldr	r2, [r1, #12]
   202aa:	7b83      	ldrb	r3, [r0, #14]
   202ac:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   202b0:	7383      	strb	r3, [r0, #14]
   202b2:	68ca      	ldr	r2, [r1, #12]
   202b4:	7bc3      	ldrb	r3, [r0, #15]
   202b6:	4053      	eors	r3, r2
   202b8:	73c3      	strb	r3, [r0, #15]
}
   202ba:	4770      	bx	lr

000202bc <shift_rows>:
{
   202bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   202be:	7802      	ldrb	r2, [r0, #0]
   202c0:	f88d 2000 	strb.w	r2, [sp]
   202c4:	7942      	ldrb	r2, [r0, #5]
   202c6:	f88d 2001 	strb.w	r2, [sp, #1]
   202ca:	7a82      	ldrb	r2, [r0, #10]
   202cc:	f88d 2002 	strb.w	r2, [sp, #2]
   202d0:	7bc2      	ldrb	r2, [r0, #15]
   202d2:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   202d6:	7902      	ldrb	r2, [r0, #4]
   202d8:	f88d 2004 	strb.w	r2, [sp, #4]
   202dc:	7a42      	ldrb	r2, [r0, #9]
   202de:	f88d 2005 	strb.w	r2, [sp, #5]
   202e2:	7b82      	ldrb	r2, [r0, #14]
   202e4:	f88d 2006 	strb.w	r2, [sp, #6]
   202e8:	78c2      	ldrb	r2, [r0, #3]
   202ea:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   202ee:	7a02      	ldrb	r2, [r0, #8]
   202f0:	f88d 2008 	strb.w	r2, [sp, #8]
   202f4:	7b42      	ldrb	r2, [r0, #13]
   202f6:	f88d 2009 	strb.w	r2, [sp, #9]
   202fa:	7882      	ldrb	r2, [r0, #2]
   202fc:	f88d 200a 	strb.w	r2, [sp, #10]
   20300:	79c2      	ldrb	r2, [r0, #7]
   20302:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   20306:	7b02      	ldrb	r2, [r0, #12]
   20308:	f88d 200c 	strb.w	r2, [sp, #12]
   2030c:	7842      	ldrb	r2, [r0, #1]
   2030e:	7ac3      	ldrb	r3, [r0, #11]
   20310:	f88d 200d 	strb.w	r2, [sp, #13]
   20314:	7982      	ldrb	r2, [r0, #6]
   20316:	f88d 200e 	strb.w	r2, [sp, #14]
   2031a:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2031e:	2310      	movs	r3, #16
   20320:	466a      	mov	r2, sp
   20322:	4619      	mov	r1, r3
   20324:	f7ff f879 	bl	1f41a <_copy>
}
   20328:	b005      	add	sp, #20
   2032a:	f85d fb04 	ldr.w	pc, [sp], #4

0002032e <mult_row_column>:
{
   2032e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20330:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   20332:	7808      	ldrb	r0, [r1, #0]
{
   20334:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   20336:	f7ff f87f 	bl	1f438 <_double_byte>
   2033a:	4605      	mov	r5, r0
   2033c:	7860      	ldrb	r0, [r4, #1]
   2033e:	f7ff f87b 	bl	1f438 <_double_byte>
   20342:	78a2      	ldrb	r2, [r4, #2]
   20344:	7863      	ldrb	r3, [r4, #1]
   20346:	4053      	eors	r3, r2
   20348:	78e2      	ldrb	r2, [r4, #3]
   2034a:	4053      	eors	r3, r2
   2034c:	405d      	eors	r5, r3
   2034e:	4045      	eors	r5, r0
   20350:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   20352:	7860      	ldrb	r0, [r4, #1]
   20354:	7827      	ldrb	r7, [r4, #0]
   20356:	f7ff f86f 	bl	1f438 <_double_byte>
   2035a:	4605      	mov	r5, r0
   2035c:	78a0      	ldrb	r0, [r4, #2]
   2035e:	f7ff f86b 	bl	1f438 <_double_byte>
   20362:	78a3      	ldrb	r3, [r4, #2]
   20364:	405f      	eors	r7, r3
   20366:	78e3      	ldrb	r3, [r4, #3]
   20368:	405f      	eors	r7, r3
   2036a:	407d      	eors	r5, r7
   2036c:	4045      	eors	r5, r0
   2036e:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   20370:	78a0      	ldrb	r0, [r4, #2]
   20372:	7865      	ldrb	r5, [r4, #1]
   20374:	7827      	ldrb	r7, [r4, #0]
   20376:	f7ff f85f 	bl	1f438 <_double_byte>
   2037a:	406f      	eors	r7, r5
   2037c:	4605      	mov	r5, r0
   2037e:	78e0      	ldrb	r0, [r4, #3]
   20380:	f7ff f85a 	bl	1f438 <_double_byte>
   20384:	78e3      	ldrb	r3, [r4, #3]
   20386:	405f      	eors	r7, r3
   20388:	407d      	eors	r5, r7
   2038a:	4045      	eors	r5, r0
   2038c:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   2038e:	7820      	ldrb	r0, [r4, #0]
   20390:	f7ff f852 	bl	1f438 <_double_byte>
   20394:	7863      	ldrb	r3, [r4, #1]
   20396:	7825      	ldrb	r5, [r4, #0]
   20398:	405d      	eors	r5, r3
   2039a:	78a3      	ldrb	r3, [r4, #2]
   2039c:	405d      	eors	r5, r3
   2039e:	4045      	eors	r5, r0
   203a0:	78e0      	ldrb	r0, [r4, #3]
   203a2:	f7ff f849 	bl	1f438 <_double_byte>
   203a6:	b2ed      	uxtb	r5, r5
   203a8:	4045      	eors	r5, r0
   203aa:	70f5      	strb	r5, [r6, #3]
}
   203ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000203ae <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   203ae:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   203b0:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   203b2:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   203b4:	f912 3b10 	ldrsb.w	r3, [r2], #16
   203b8:	2b00      	cmp	r3, #0
   203ba:	bfb4      	ite	lt
   203bc:	2387      	movlt	r3, #135	; 0x87
   203be:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   203c0:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   203c4:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   203c8:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   203ca:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   203ce:	d002      	beq.n	203d6 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   203d0:	7813      	ldrb	r3, [r2, #0]
   203d2:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   203d4:	e7f4      	b.n	203c0 <gf_double+0x12>
	}
}
   203d6:	bd10      	pop	{r4, pc}

000203d8 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   203d8:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   203da:	b120      	cbz	r0, 203e6 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   203dc:	2258      	movs	r2, #88	; 0x58
   203de:	2100      	movs	r1, #0
   203e0:	f7ff f828 	bl	1f434 <_set>
   203e4:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   203e6:	bd08      	pop	{r3, pc}

000203e8 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   203e8:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   203ea:	4604      	mov	r4, r0
   203ec:	b188      	cbz	r0, 20412 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   203ee:	2210      	movs	r2, #16
   203f0:	2100      	movs	r1, #0
   203f2:	f7ff f81f 	bl	1f434 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   203f6:	2210      	movs	r2, #16
   203f8:	f104 0030 	add.w	r0, r4, #48	; 0x30
   203fc:	2100      	movs	r1, #0
   203fe:	f7ff f819 	bl	1f434 <_set>
	s->leftover_offset = 0;
   20402:	2300      	movs	r3, #0
   20404:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   20406:	2200      	movs	r2, #0
   20408:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2040c:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   20410:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   20412:	bd10      	pop	{r4, pc}

00020414 <tc_cmac_setup>:
{
   20414:	b570      	push	{r4, r5, r6, lr}
   20416:	460d      	mov	r5, r1
   20418:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   2041a:	4604      	mov	r4, r0
   2041c:	b310      	cbz	r0, 20464 <tc_cmac_setup+0x50>
   2041e:	b311      	cbz	r1, 20466 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   20420:	2258      	movs	r2, #88	; 0x58
   20422:	2100      	movs	r1, #0
   20424:	f7ff f806 	bl	1f434 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   20428:	4629      	mov	r1, r5
	s->sched = sched;
   2042a:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   2042c:	4630      	mov	r0, r6
   2042e:	f7e4 ff67 	bl	5300 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   20432:	2210      	movs	r2, #16
   20434:	2100      	movs	r1, #0
   20436:	4620      	mov	r0, r4
   20438:	f7fe fffc 	bl	1f434 <_set>
	gf_double (s->K1, s->iv);
   2043c:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   20440:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   20442:	4621      	mov	r1, r4
   20444:	4620      	mov	r0, r4
   20446:	f7e4 ffad 	bl	53a4 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   2044a:	4621      	mov	r1, r4
   2044c:	4628      	mov	r0, r5
   2044e:	f7ff ffae 	bl	203ae <gf_double>
	gf_double (s->K2, s->K1);
   20452:	4629      	mov	r1, r5
   20454:	f104 0020 	add.w	r0, r4, #32
   20458:	f7ff ffa9 	bl	203ae <gf_double>
	tc_cmac_init(s);
   2045c:	4620      	mov	r0, r4
   2045e:	f7ff ffc3 	bl	203e8 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   20462:	2001      	movs	r0, #1
}
   20464:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   20466:	4608      	mov	r0, r1
   20468:	e7fc      	b.n	20464 <tc_cmac_setup+0x50>

0002046a <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   2046a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2046e:	460d      	mov	r5, r1
   20470:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   20472:	4604      	mov	r4, r0
   20474:	2800      	cmp	r0, #0
   20476:	d062      	beq.n	2053e <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   20478:	b912      	cbnz	r2, 20480 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   2047a:	2001      	movs	r0, #1
}
   2047c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   20480:	2900      	cmp	r1, #0
   20482:	d05c      	beq.n	2053e <tc_cmac_update+0xd4>
	if (s->countdown == 0) {
   20484:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   20488:	ea50 0301 	orrs.w	r3, r0, r1
   2048c:	d057      	beq.n	2053e <tc_cmac_update+0xd4>
	s->countdown--;
   2048e:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
	if (s->leftover_offset > 0) {
   20492:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
   20496:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
   2049a:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   2049e:	f1b8 0f00 	cmp.w	r8, #0
   204a2:	d02a      	beq.n	204fa <tc_cmac_update+0x90>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   204a4:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
   204a8:	f108 0030 	add.w	r0, r8, #48	; 0x30
   204ac:	42be      	cmp	r6, r7
   204ae:	4420      	add	r0, r4
   204b0:	d208      	bcs.n	204c4 <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   204b2:	462a      	mov	r2, r5
   204b4:	4633      	mov	r3, r6
   204b6:	4631      	mov	r1, r6
   204b8:	f7fe ffaf 	bl	1f41a <_copy>
			s->leftover_offset += data_length;
   204bc:	6c62      	ldr	r2, [r4, #68]	; 0x44
   204be:	4432      	add	r2, r6
   204c0:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   204c2:	e7da      	b.n	2047a <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   204c4:	463b      	mov	r3, r7
   204c6:	462a      	mov	r2, r5
   204c8:	4639      	mov	r1, r7
   204ca:	f7fe ffa6 	bl	1f41a <_copy>
		data_length -= remaining_space;
   204ce:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   204d0:	2300      	movs	r3, #0
   204d2:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   204d4:	4446      	add	r6, r8
		data += remaining_space;
   204d6:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   204d8:	1e63      	subs	r3, r4, #1
   204da:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   204de:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   204e2:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   204e6:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   204e8:	ea82 0200 	eor.w	r2, r2, r0
   204ec:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   204ee:	d1f6      	bne.n	204de <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   204f0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   204f2:	4621      	mov	r1, r4
   204f4:	4620      	mov	r0, r4
   204f6:	f7e4 ff55 	bl	53a4 <tc_aes_encrypt>
   204fa:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   204fe:	2e10      	cmp	r6, #16
   20500:	d80a      	bhi.n	20518 <tc_cmac_update+0xae>
	if (data_length > 0) {
   20502:	2e00      	cmp	r6, #0
   20504:	d0b9      	beq.n	2047a <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   20506:	4633      	mov	r3, r6
   20508:	462a      	mov	r2, r5
   2050a:	4631      	mov	r1, r6
   2050c:	f104 0030 	add.w	r0, r4, #48	; 0x30
   20510:	f7fe ff83 	bl	1f41a <_copy>
		s->leftover_offset = data_length;
   20514:	6466      	str	r6, [r4, #68]	; 0x44
   20516:	e7b0      	b.n	2047a <tc_cmac_update+0x10>
   20518:	1e63      	subs	r3, r4, #1
   2051a:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   2051c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   20520:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   20524:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   20526:	ea82 0200 	eor.w	r2, r2, r0
   2052a:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2052c:	d1f6      	bne.n	2051c <tc_cmac_update+0xb2>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2052e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   20530:	4621      	mov	r1, r4
   20532:	4620      	mov	r0, r4
   20534:	f7e4 ff36 	bl	53a4 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   20538:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   2053a:	3e10      	subs	r6, #16
   2053c:	e7df      	b.n	204fe <tc_cmac_update+0x94>
		return TC_CRYPTO_FAIL;
   2053e:	2000      	movs	r0, #0
   20540:	e79c      	b.n	2047c <tc_cmac_update+0x12>

00020542 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   20542:	b570      	push	{r4, r5, r6, lr}
   20544:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   20546:	4605      	mov	r5, r0
   20548:	b1e8      	cbz	r0, 20586 <tc_cmac_final+0x44>
   2054a:	b369      	cbz	r1, 205a8 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   2054c:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   2054e:	2a10      	cmp	r2, #16
   20550:	d11a      	bne.n	20588 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   20552:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   20554:	1e63      	subs	r3, r4, #1
   20556:	3901      	subs	r1, #1
   20558:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2055c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   20560:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   20564:	4072      	eors	r2, r6
   20566:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2056a:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2056c:	ea82 0206 	eor.w	r2, r2, r6
   20570:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   20572:	d1f3      	bne.n	2055c <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   20574:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   20576:	4621      	mov	r1, r4
   20578:	4628      	mov	r0, r5
   2057a:	f7e4 ff13 	bl	53a4 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   2057e:	4620      	mov	r0, r4
   20580:	f7ff ff2a 	bl	203d8 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   20584:	2001      	movs	r0, #1
}
   20586:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   20588:	f102 0030 	add.w	r0, r2, #48	; 0x30
   2058c:	2100      	movs	r1, #0
   2058e:	f1c2 0210 	rsb	r2, r2, #16
   20592:	4420      	add	r0, r4
   20594:	f7fe ff4e 	bl	1f434 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   20598:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2059a:	4423      	add	r3, r4
   2059c:	2280      	movs	r2, #128	; 0x80
   2059e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   205a2:	f104 0120 	add.w	r1, r4, #32
   205a6:	e7d5      	b.n	20554 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   205a8:	4608      	mov	r0, r1
   205aa:	e7ec      	b.n	20586 <tc_cmac_final+0x44>

000205ac <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   205ac:	2100      	movs	r1, #0
   205ae:	2001      	movs	r0, #1
   205b0:	f7e5 b85a 	b.w	5668 <z_arm_fatal_error>

000205b4 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   205b4:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   205b6:	6800      	ldr	r0, [r0, #0]
   205b8:	f7e5 b856 	b.w	5668 <z_arm_fatal_error>

000205bc <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   205bc:	b508      	push	{r3, lr}
	handler();
   205be:	f7e5 f88b 	bl	56d8 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   205c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   205c6:	f7e5 bafd 	b.w	5bc4 <z_arm_exc_exit>

000205ca <_stdout_hook_default>:
}
   205ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   205ce:	4770      	bx	lr

000205d0 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   205d0:	f7fb beea 	b.w	1c3a8 <SystemInit>

000205d4 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
void pm_power_state_set(struct pm_state_info info)
{
   205d4:	b082      	sub	sp, #8
   205d6:	ab02      	add	r3, sp, #8
   205d8:	e903 0003 	stmdb	r3, {r0, r1}
	switch (info.state) {
   205dc:	f89d 3000 	ldrb.w	r3, [sp]
   205e0:	2b06      	cmp	r3, #6
   205e2:	d108      	bne.n	205f6 <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   205e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   205e8:	2201      	movs	r2, #1
   205ea:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   205ee:	f3bf 8f4f 	dsb	sy
        __WFE();
   205f2:	bf20      	wfe
    while (true)
   205f4:	e7fd      	b.n	205f2 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   205f6:	b002      	add	sp, #8
   205f8:	4770      	bx	lr

000205fa <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   205fa:	b082      	sub	sp, #8
   205fc:	ab02      	add	r3, sp, #8
   205fe:	e903 0003 	stmdb	r3, {r0, r1}
   20602:	2300      	movs	r3, #0
   20604:	f383 8811 	msr	BASEPRI, r3
   20608:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   2060c:	b002      	add	sp, #8
   2060e:	4770      	bx	lr

00020610 <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   20610:	b530      	push	{r4, r5, lr}
   20612:	b085      	sub	sp, #20
   20614:	4614      	mov	r4, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   20616:	880a      	ldrh	r2, [r1, #0]
   20618:	788b      	ldrb	r3, [r1, #2]
   2061a:	f8ad 2000 	strh.w	r2, [sp]
{
   2061e:	4605      	mov	r5, r0
	(void)memset(res + 3, 0, 13);
   20620:	220d      	movs	r2, #13
   20622:	2100      	movs	r1, #0
   20624:	f10d 0003 	add.w	r0, sp, #3
	memcpy(res, r, 3);
   20628:	f88d 3002 	strb.w	r3, [sp, #2]
	(void)memset(res + 3, 0, 13);
   2062c:	f003 f827 	bl	2367e <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   20630:	466a      	mov	r2, sp
   20632:	4669      	mov	r1, sp
   20634:	4628      	mov	r0, r5
   20636:	f7ef f9d9 	bl	f9ec <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   2063a:	b928      	cbnz	r0, 20648 <ah+0x38>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2063c:	f8bd 2000 	ldrh.w	r2, [sp]
   20640:	f89d 3002 	ldrb.w	r3, [sp, #2]
   20644:	8022      	strh	r2, [r4, #0]
   20646:	70a3      	strb	r3, [r4, #2]
	 * result of ah.
	 */
	memcpy(out, res, 3);

	return 0;
}
   20648:	b005      	add	sp, #20
   2064a:	bd30      	pop	{r4, r5, pc}

0002064c <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   2064c:	b513      	push	{r0, r1, r4, lr}
   2064e:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   20650:	aa01      	add	r2, sp, #4
   20652:	3103      	adds	r1, #3
   20654:	f7ff ffdc 	bl	20610 <ah>
	if (err) {
   20658:	b948      	cbnz	r0, 2066e <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   2065a:	2203      	movs	r2, #3
   2065c:	a901      	add	r1, sp, #4
   2065e:	4620      	mov	r0, r4
   20660:	f002 fff1 	bl	23646 <memcmp>
   20664:	fab0 f080 	clz	r0, r0
   20668:	0940      	lsrs	r0, r0, #5
}
   2066a:	b002      	add	sp, #8
   2066c:	bd10      	pop	{r4, pc}
		return false;
   2066e:	2000      	movs	r0, #0
   20670:	e7fb      	b.n	2066a <bt_rpa_irk_matches+0x1e>

00020672 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const uint8_t irk[16], bt_addr_t *rpa)
{
   20672:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = internal_rand(rpa->val + 3, 3);
   20674:	1cce      	adds	r6, r1, #3
{
   20676:	4605      	mov	r5, r0
   20678:	460c      	mov	r4, r1
	return bt_rand(buf, len);
   2067a:	4630      	mov	r0, r6
   2067c:	2103      	movs	r1, #3
   2067e:	f7ef f9b3 	bl	f9e8 <bt_rand>
	if (err) {
   20682:	b960      	cbnz	r0, 2069e <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   20684:	7963      	ldrb	r3, [r4, #5]
   20686:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2068a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2068e:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   20690:	4622      	mov	r2, r4
   20692:	4631      	mov	r1, r6
   20694:	4628      	mov	r0, r5
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   20696:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   2069a:	f7ff bfb9 	b.w	20610 <ah>
}
   2069e:	bd70      	pop	{r4, r5, r6, pc}

000206a0 <send_cmd_status>:
{
   206a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   206a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   206a8:	4606      	mov	r6, r0
   206aa:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   206ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   206b0:	2100      	movs	r1, #0
   206b2:	200f      	movs	r0, #15
   206b4:	f7e5 fe32 	bl	631c <bt_buf_get_evt>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   206b8:	2701      	movs	r7, #1
	return net_buf_simple_add(&buf->b, len);
   206ba:	f100 0808 	add.w	r8, r0, #8
   206be:	4604      	mov	r4, r0
   206c0:	7507      	strb	r7, [r0, #20]
   206c2:	2102      	movs	r1, #2
   206c4:	4640      	mov	r0, r8
   206c6:	f001 ffb4 	bl	22632 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   206ca:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   206cc:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   206ce:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   206d0:	7041      	strb	r1, [r0, #1]
   206d2:	4640      	mov	r0, r8
   206d4:	f001 ffad 	bl	22632 <net_buf_simple_add>
	evt->ncmd = 1U;
   206d8:	7047      	strb	r7, [r0, #1]
	evt->status = status;
   206da:	7005      	strb	r5, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
   206dc:	8046      	strh	r6, [r0, #2]
		bt_recv_prio(buf);
   206de:	4620      	mov	r0, r4
}
   206e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv_prio(buf);
   206e4:	f7e6 bf8a 	b.w	75fc <bt_recv_prio>

000206e8 <sys_memcpy_swap.constprop.0>:
	for (; length > 0; length--) {
   206e8:	f101 0320 	add.w	r3, r1, #32
   206ec:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   206ee:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   206f2:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   206f6:	428b      	cmp	r3, r1
   206f8:	d1f9      	bne.n	206ee <sys_memcpy_swap.constprop.0+0x6>
}
   206fa:	4770      	bx	lr

000206fc <bt_hci_ecc_supported_commands>:
	supported_commands[34] |= BIT(2);
   206fc:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   20700:	f043 0306 	orr.w	r3, r3, #6
   20704:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
	supported_commands[41] |= BIT(2);
   20708:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   2070c:	f043 0304 	orr.w	r3, r3, #4
   20710:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
}
   20714:	4770      	bx	lr

00020716 <default_CSPRNG>:
{
   20716:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   20718:	f7ef f966 	bl	f9e8 <bt_rand>
}
   2071c:	fab0 f080 	clz	r0, r0
   20720:	0940      	lsrs	r0, r0, #5
   20722:	bd08      	pop	{r3, pc}

00020724 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   20724:	b510      	push	{r4, lr}
   20726:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   20728:	7801      	ldrb	r1, [r0, #0]
   2072a:	7822      	ldrb	r2, [r4, #0]
   2072c:	428a      	cmp	r2, r1
{
   2072e:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   20730:	d00e      	beq.n	20750 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   20732:	4669      	mov	r1, sp
   20734:	f7e5 fd78 	bl	6228 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   20738:	a905      	add	r1, sp, #20
   2073a:	4620      	mov	r0, r4
   2073c:	f7e5 fd74 	bl	6228 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   20740:	2210      	movs	r2, #16
   20742:	f10d 0115 	add.w	r1, sp, #21
   20746:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2074a:	f002 ff7c 	bl	23646 <memcmp>
   2074e:	e007      	b.n	20760 <bt_uuid_cmp+0x3c>
	switch (u1->type) {
   20750:	2a01      	cmp	r2, #1
   20752:	d007      	beq.n	20764 <bt_uuid_cmp+0x40>
   20754:	2a02      	cmp	r2, #2
   20756:	d008      	beq.n	2076a <bt_uuid_cmp+0x46>
   20758:	b95a      	cbnz	r2, 20772 <bt_uuid_cmp+0x4e>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   2075a:	8840      	ldrh	r0, [r0, #2]
   2075c:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   2075e:	1ac0      	subs	r0, r0, r3
	}

	return -EINVAL;
}
   20760:	b00a      	add	sp, #40	; 0x28
   20762:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   20764:	6840      	ldr	r0, [r0, #4]
   20766:	6863      	ldr	r3, [r4, #4]
   20768:	e7f9      	b.n	2075e <bt_uuid_cmp+0x3a>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2076a:	2210      	movs	r2, #16
   2076c:	1c61      	adds	r1, r4, #1
   2076e:	3001      	adds	r0, #1
   20770:	e7eb      	b.n	2074a <bt_uuid_cmp+0x26>
	switch (u1->type) {
   20772:	f06f 0015 	mvn.w	r0, #21
   20776:	e7f3      	b.n	20760 <bt_uuid_cmp+0x3c>

00020778 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   20778:	2a04      	cmp	r2, #4
{
   2077a:	b530      	push	{r4, r5, lr}
	switch (data_len) {
   2077c:	d00d      	beq.n	2079a <bt_uuid_create+0x22>
   2077e:	2a10      	cmp	r2, #16
   20780:	d019      	beq.n	207b6 <bt_uuid_create+0x3e>
   20782:	2a02      	cmp	r2, #2
   20784:	f04f 0300 	mov.w	r3, #0
   20788:	d121      	bne.n	207ce <bt_uuid_create+0x56>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
   2078a:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   2078c:	784a      	ldrb	r2, [r1, #1]
   2078e:	780b      	ldrb	r3, [r1, #0]
   20790:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   20794:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   20796:	2001      	movs	r0, #1
}
   20798:	bd30      	pop	{r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
   2079a:	2301      	movs	r3, #1
   2079c:	7003      	strb	r3, [r0, #0]
   2079e:	788a      	ldrb	r2, [r1, #2]
   207a0:	78cc      	ldrb	r4, [r1, #3]
   207a2:	784d      	ldrb	r5, [r1, #1]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   207a4:	ea42 2404 	orr.w	r4, r2, r4, lsl #8
	return ((uint16_t)src[1] << 8) | src[0];
   207a8:	780a      	ldrb	r2, [r1, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   207aa:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   207ae:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   207b2:	6042      	str	r2, [r0, #4]
		break;
   207b4:	e7ef      	b.n	20796 <bt_uuid_create+0x1e>
		uuid->type = BT_UUID_TYPE_128;
   207b6:	2302      	movs	r3, #2
   207b8:	f800 3b01 	strb.w	r3, [r0], #1
   207bc:	f101 0310 	add.w	r3, r1, #16
   207c0:	f851 2b04 	ldr.w	r2, [r1], #4
   207c4:	f840 2b04 	str.w	r2, [r0], #4
   207c8:	4299      	cmp	r1, r3
   207ca:	d1f9      	bne.n	207c0 <bt_uuid_create+0x48>
   207cc:	e7e3      	b.n	20796 <bt_uuid_create+0x1e>
	switch (data_len) {
   207ce:	4618      	mov	r0, r3
   207d0:	e7e2      	b.n	20798 <bt_uuid_create+0x20>

000207d2 <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   207d2:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   207d4:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   207d6:	2106      	movs	r1, #6
{
   207d8:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   207da:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   207de:	f7ef f903 	bl	f9e8 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   207e2:	b918      	cbnz	r0, 207ec <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   207e4:	79a3      	ldrb	r3, [r4, #6]
   207e6:	f063 033f 	orn	r3, r3, #63	; 0x3f
   207ea:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   207ec:	bd10      	pop	{r4, pc}

000207ee <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   207ee:	280f      	cmp	r0, #15
   207f0:	d806      	bhi.n	20800 <bt_hci_evt_get_flags+0x12>
   207f2:	280d      	cmp	r0, #13
   207f4:	d80b      	bhi.n	2080e <bt_hci_evt_get_flags+0x20>
   207f6:	2805      	cmp	r0, #5
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   207f8:	bf14      	ite	ne
   207fa:	2002      	movne	r0, #2
   207fc:	2003      	moveq	r0, #3
   207fe:	4770      	bx	lr
	switch (evt) {
   20800:	2813      	cmp	r0, #19
   20802:	d004      	beq.n	2080e <bt_hci_evt_get_flags+0x20>
   20804:	281a      	cmp	r0, #26
   20806:	bf14      	ite	ne
   20808:	2002      	movne	r0, #2
   2080a:	2001      	moveq	r0, #1
   2080c:	4770      	bx	lr
   2080e:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   20810:	4770      	bx	lr

00020812 <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   20812:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
   20816:	b193      	cbz	r3, 2083e <update_sec_level+0x2c>
   20818:	7b5a      	ldrb	r2, [r3, #13]
   2081a:	07d1      	lsls	r1, r2, #31
   2081c:	d50f      	bpl.n	2083e <update_sec_level+0x2c>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   2081e:	06d2      	lsls	r2, r2, #27
   20820:	d50b      	bpl.n	2083a <update_sec_level+0x28>
   20822:	7b1b      	ldrb	r3, [r3, #12]
   20824:	2b10      	cmp	r3, #16
   20826:	d108      	bne.n	2083a <update_sec_level+0x28>
			conn->sec_level = BT_SECURITY_L4;
   20828:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_L2;
   2082a:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   2082c:	7a82      	ldrb	r2, [r0, #10]
   2082e:	7a40      	ldrb	r0, [r0, #9]
}
   20830:	4282      	cmp	r2, r0
   20832:	bf8c      	ite	hi
   20834:	2000      	movhi	r0, #0
   20836:	2001      	movls	r0, #1
   20838:	4770      	bx	lr
			conn->sec_level = BT_SECURITY_L3;
   2083a:	2303      	movs	r3, #3
   2083c:	e7f5      	b.n	2082a <update_sec_level+0x18>
		conn->sec_level = BT_SECURITY_L2;
   2083e:	2302      	movs	r3, #2
   20840:	e7f3      	b.n	2082a <update_sec_level+0x18>

00020842 <bt_addr_copy>:
   20842:	680b      	ldr	r3, [r1, #0]
   20844:	6003      	str	r3, [r0, #0]
   20846:	888b      	ldrh	r3, [r1, #4]
   20848:	8083      	strh	r3, [r0, #4]
}
   2084a:	4770      	bx	lr

0002084c <bt_addr_le_copy>:
   2084c:	680b      	ldr	r3, [r1, #0]
   2084e:	6003      	str	r3, [r0, #0]
   20850:	888b      	ldrh	r3, [r1, #4]
   20852:	8083      	strh	r3, [r0, #4]
   20854:	798b      	ldrb	r3, [r1, #6]
   20856:	7183      	strb	r3, [r0, #6]
}
   20858:	4770      	bx	lr

0002085a <sys_put_le64>:
	dst[1] = val >> 8;
   2085a:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   2085e:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   20860:	0e00      	lsrs	r0, r0, #24
   20862:	7053      	strb	r3, [r2, #1]
   20864:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   20866:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   20868:	f3c1 2007 	ubfx	r0, r1, #8, #8
   2086c:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   2086e:	7093      	strb	r3, [r2, #2]
   20870:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   20872:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   20874:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   20876:	71d1      	strb	r1, [r2, #7]
}
   20878:	4770      	bx	lr

0002087a <bt_hci_disconnect>:
{
   2087a:	b570      	push	{r4, r5, r6, lr}
   2087c:	4606      	mov	r6, r0
   2087e:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   20880:	f240 4006 	movw	r0, #1030	; 0x406
   20884:	2103      	movs	r1, #3
   20886:	f7e6 f9cd 	bl	6c24 <bt_hci_cmd_create>
	if (!buf) {
   2088a:	4604      	mov	r4, r0
   2088c:	b168      	cbz	r0, 208aa <bt_hci_disconnect+0x30>
   2088e:	2103      	movs	r1, #3
   20890:	3008      	adds	r0, #8
   20892:	f001 fece 	bl	22632 <net_buf_simple_add>
	disconn->reason = reason;
   20896:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   20898:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2089a:	4621      	mov	r1, r4
   2089c:	2200      	movs	r2, #0
}
   2089e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   208a2:	f240 4006 	movw	r0, #1030	; 0x406
   208a6:	f7e6 bb21 	b.w	6eec <bt_hci_cmd_send_sync>
}
   208aa:	f06f 0068 	mvn.w	r0, #104	; 0x68
   208ae:	bd70      	pop	{r4, r5, r6, pc}

000208b0 <bt_le_set_data_len>:
{
   208b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   208b2:	4607      	mov	r7, r0
   208b4:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   208b6:	f242 0022 	movw	r0, #8226	; 0x2022
   208ba:	2106      	movs	r1, #6
{
   208bc:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   208be:	f7e6 f9b1 	bl	6c24 <bt_hci_cmd_create>
	if (!buf) {
   208c2:	4604      	mov	r4, r0
   208c4:	b170      	cbz	r0, 208e4 <bt_le_set_data_len+0x34>
   208c6:	2106      	movs	r1, #6
   208c8:	3008      	adds	r0, #8
   208ca:	f001 feb2 	bl	22632 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   208ce:	883b      	ldrh	r3, [r7, #0]
   208d0:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   208d2:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   208d4:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   208d6:	4621      	mov	r1, r4
   208d8:	f242 0022 	movw	r0, #8226	; 0x2022
}
   208dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   208e0:	f7e6 b9d8 	b.w	6c94 <bt_hci_cmd_send>
}
   208e4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   208e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000208ea <bt_le_set_phy>:
{
   208ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   208ee:	4680      	mov	r8, r0
   208f0:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   208f2:	f242 0032 	movw	r0, #8242	; 0x2032
   208f6:	2107      	movs	r1, #7
{
   208f8:	f89d 9020 	ldrb.w	r9, [sp, #32]
   208fc:	4616      	mov	r6, r2
   208fe:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   20900:	f7e6 f990 	bl	6c24 <bt_hci_cmd_create>
	if (!buf) {
   20904:	4604      	mov	r4, r0
   20906:	b190      	cbz	r0, 2092e <bt_le_set_phy+0x44>
   20908:	2107      	movs	r1, #7
   2090a:	3008      	adds	r0, #8
   2090c:	f001 fe91 	bl	22632 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   20910:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   20914:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   20916:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   20918:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   2091a:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   2091c:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   20920:	4621      	mov	r1, r4
   20922:	f242 0032 	movw	r0, #8242	; 0x2032
}
   20926:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   2092a:	f7e6 b9b3 	b.w	6c94 <bt_hci_cmd_send>
}
   2092e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   20932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00020936 <le_enh_conn_complete>:
	enh_conn_complete((void *)buf->data);
   20936:	6880      	ldr	r0, [r0, #8]
   20938:	f7e6 bc78 	b.w	722c <enh_conn_complete>

0002093c <le_legacy_conn_complete>:
{
   2093c:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   2093e:	6881      	ldr	r1, [r0, #8]
{
   20940:	b08b      	sub	sp, #44	; 0x2c
	enh.status         = evt->status;
   20942:	780b      	ldrb	r3, [r1, #0]
   20944:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   20948:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   2094c:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   20950:	78cb      	ldrb	r3, [r1, #3]
   20952:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   20956:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   2095a:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   2095e:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   20962:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   20966:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   2096a:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   2096e:	7c4b      	ldrb	r3, [r1, #17]
   20970:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   20974:	a803      	add	r0, sp, #12
   20976:	3104      	adds	r1, #4
   20978:	f7ff ff68 	bl	2084c <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   2097c:	2200      	movs	r2, #0
   2097e:	4669      	mov	r1, sp
   20980:	f10d 0013 	add.w	r0, sp, #19
   20984:	9200      	str	r2, [sp, #0]
   20986:	f8ad 2004 	strh.w	r2, [sp, #4]
   2098a:	f7ff ff5a 	bl	20842 <bt_addr_copy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   2098e:	4669      	mov	r1, sp
   20990:	f10d 0019 	add.w	r0, sp, #25
   20994:	9200      	str	r2, [sp, #0]
   20996:	f8ad 2004 	strh.w	r2, [sp, #4]
   2099a:	f7ff ff52 	bl	20842 <bt_addr_copy>
	enh_conn_complete(&enh);
   2099e:	a802      	add	r0, sp, #8
   209a0:	f7e6 fc44 	bl	722c <enh_conn_complete>
}
   209a4:	b00b      	add	sp, #44	; 0x2c
   209a6:	f85d fb04 	ldr.w	pc, [sp], #4

000209aa <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   209aa:	8802      	ldrh	r2, [r0, #0]
   209ac:	8843      	ldrh	r3, [r0, #2]
   209ae:	429a      	cmp	r2, r3
{
   209b0:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   209b2:	d818      	bhi.n	209e6 <bt_le_conn_params_valid+0x3c>
   209b4:	2a05      	cmp	r2, #5
   209b6:	d916      	bls.n	209e6 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   209b8:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   209bc:	d813      	bhi.n	209e6 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   209be:	8884      	ldrh	r4, [r0, #4]
   209c0:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   209c4:	d20f      	bcs.n	209e6 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   209c6:	88c1      	ldrh	r1, [r0, #6]
   209c8:	f1a1 020a 	sub.w	r2, r1, #10
   209cc:	b292      	uxth	r2, r2
   209ce:	f640 4076 	movw	r0, #3190	; 0xc76
   209d2:	4282      	cmp	r2, r0
   209d4:	d807      	bhi.n	209e6 <bt_le_conn_params_valid+0x3c>
	     ((1U + param->latency) * param->interval_max))) {
   209d6:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   209da:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   209de:	bf34      	ite	cc
   209e0:	2001      	movcc	r0, #1
   209e2:	2000      	movcs	r0, #0
}
   209e4:	bd10      	pop	{r4, pc}
		return false;
   209e6:	2000      	movs	r0, #0
   209e8:	e7fc      	b.n	209e4 <bt_le_conn_params_valid+0x3a>

000209ea <bt_send>:
		return bt_hci_ecc_send(buf);
   209ea:	f7e5 bb8b 	b.w	6104 <bt_hci_ecc_send>

000209ee <bt_addr_le_is_bonded>:

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   209ee:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   209f0:	f7ec f8fc 	bl	cbec <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   209f4:	b118      	cbz	r0, 209fe <bt_addr_le_is_bonded+0x10>
   209f6:	89c0      	ldrh	r0, [r0, #14]
   209f8:	3800      	subs	r0, #0
   209fa:	bf18      	it	ne
   209fc:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
   209fe:	bd08      	pop	{r3, pc}

00020a00 <bt_hci_evt_create>:
#include <stdint.h>
#include <sys/byteorder.h>
#include <drivers/bluetooth/hci_driver.h>

struct net_buf *bt_hci_evt_create(uint8_t evt, uint8_t len)
{
   20a00:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;

	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   20a02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   20a06:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   20a08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20a0c:	2100      	movs	r1, #0
{
   20a0e:	4606      	mov	r6, r0
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   20a10:	f7e5 fc84 	bl	631c <bt_buf_get_evt>
   20a14:	2102      	movs	r1, #2
   20a16:	4604      	mov	r4, r0
   20a18:	3008      	adds	r0, #8
   20a1a:	f001 fe0a 	bl	22632 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = evt;
   20a1e:	7006      	strb	r6, [r0, #0]
	hdr->len = len;
   20a20:	7045      	strb	r5, [r0, #1]

	return buf;
}
   20a22:	4620      	mov	r0, r4
   20a24:	bd70      	pop	{r4, r5, r6, pc}

00020a26 <bt_hci_cmd_complete_create>:
struct net_buf *bt_hci_cmd_complete_create(uint16_t op, uint8_t plen)
{
	struct net_buf *buf;
	struct bt_hci_evt_cmd_complete *cc;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   20a26:	3103      	adds	r1, #3
{
   20a28:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   20a2a:	b2c9      	uxtb	r1, r1
{
   20a2c:	4605      	mov	r5, r0
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   20a2e:	200e      	movs	r0, #14
   20a30:	f7ff ffe6 	bl	20a00 <bt_hci_evt_create>
   20a34:	2103      	movs	r1, #3
   20a36:	4604      	mov	r4, r0
   20a38:	3008      	adds	r0, #8
   20a3a:	f001 fdfa 	bl	22632 <net_buf_simple_add>

	cc = net_buf_add(buf, sizeof(*cc));
	cc->ncmd = 1U;
   20a3e:	2301      	movs	r3, #1
   20a40:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(op);
   20a42:	f8a0 5001 	strh.w	r5, [r0, #1]

	return buf;
}
   20a46:	4620      	mov	r0, r4
   20a48:	bd38      	pop	{r3, r4, r5, pc}

00020a4a <bt_hci_cmd_status_create>:

struct net_buf *bt_hci_cmd_status_create(uint16_t op, uint8_t status)
{
   20a4a:	b570      	push	{r4, r5, r6, lr}
   20a4c:	4605      	mov	r5, r0
   20a4e:	460e      	mov	r6, r1
	struct net_buf *buf;
	struct bt_hci_evt_cmd_status *cs;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   20a50:	200f      	movs	r0, #15
   20a52:	2104      	movs	r1, #4
   20a54:	f7ff ffd4 	bl	20a00 <bt_hci_evt_create>
   20a58:	2104      	movs	r1, #4
   20a5a:	4604      	mov	r4, r0
   20a5c:	3008      	adds	r0, #8
   20a5e:	f001 fde8 	bl	22632 <net_buf_simple_add>

	cs = net_buf_add(buf, sizeof(*cs));
	cs->status = status;
	cs->ncmd = 1U;
   20a62:	2201      	movs	r2, #1
	cs->status = status;
   20a64:	7006      	strb	r6, [r0, #0]
	cs->ncmd = 1U;
   20a66:	7042      	strb	r2, [r0, #1]
	cs->opcode = sys_cpu_to_le16(op);
   20a68:	8045      	strh	r5, [r0, #2]

	return buf;
}
   20a6a:	4620      	mov	r0, r4
   20a6c:	bd70      	pop	{r4, r5, r6, pc}

00020a6e <adv_unpause_enabled>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   20a6e:	f100 0310 	add.w	r3, r0, #16
   20a72:	f3bf 8f5b 	dmb	ish
   20a76:	e853 2f00 	ldrex	r2, [r3]
   20a7a:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   20a7e:	e843 1c00 	strex	ip, r1, [r3]
   20a82:	f1bc 0f00 	cmp.w	ip, #0
   20a86:	d1f6      	bne.n	20a76 <adv_unpause_enabled+0x8>
   20a88:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   20a8c:	0493      	lsls	r3, r2, #18
   20a8e:	d502      	bpl.n	20a96 <adv_unpause_enabled+0x28>
		bt_le_adv_set_enable(adv, true);
   20a90:	2101      	movs	r1, #1
   20a92:	f000 b983 	b.w	20d9c <bt_le_adv_set_enable>
}
   20a96:	4770      	bx	lr

00020a98 <addr_res_enable>:
{
   20a98:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   20a9a:	2101      	movs	r1, #1
{
   20a9c:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   20a9e:	f242 002d 	movw	r0, #8237	; 0x202d
   20aa2:	f7e6 f8bf 	bl	6c24 <bt_hci_cmd_create>
	if (!buf) {
   20aa6:	4604      	mov	r4, r0
   20aa8:	b158      	cbz	r0, 20ac2 <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   20aaa:	4629      	mov	r1, r5
   20aac:	3008      	adds	r0, #8
   20aae:	f001 fdd0 	bl	22652 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   20ab2:	4621      	mov	r1, r4
   20ab4:	2200      	movs	r2, #0
}
   20ab6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   20aba:	f242 002d 	movw	r0, #8237	; 0x202d
   20abe:	f7e6 ba15 	b.w	6eec <bt_hci_cmd_send_sync>
}
   20ac2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   20ac6:	bd38      	pop	{r3, r4, r5, pc}

00020ac8 <bt_addr_copy>:
   20ac8:	680b      	ldr	r3, [r1, #0]
   20aca:	6003      	str	r3, [r0, #0]
   20acc:	888b      	ldrh	r3, [r1, #4]
   20ace:	8083      	strh	r3, [r0, #4]
}
   20ad0:	4770      	bx	lr

00020ad2 <bt_addr_le_copy>:
   20ad2:	680b      	ldr	r3, [r1, #0]
   20ad4:	6003      	str	r3, [r0, #0]
   20ad6:	888b      	ldrh	r3, [r1, #4]
   20ad8:	8083      	strh	r3, [r0, #4]
   20ada:	798b      	ldrb	r3, [r1, #6]
   20adc:	7183      	strb	r3, [r0, #6]
}
   20ade:	4770      	bx	lr

00020ae0 <hci_id_add.isra.0>:
static int hci_id_add(uint8_t id, const bt_addr_le_t *addr, uint8_t peer_irk[16])
   20ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20ae2:	4607      	mov	r7, r0
   20ae4:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   20ae6:	f242 0027 	movw	r0, #8231	; 0x2027
   20aea:	2127      	movs	r1, #39	; 0x27
   20aec:	f7e6 f89a 	bl	6c24 <bt_hci_cmd_create>
	if (!buf) {
   20af0:	4605      	mov	r5, r0
   20af2:	b1f8      	cbz	r0, 20b34 <hci_id_add.isra.0+0x54>
	return net_buf_simple_add(&buf->b, len);
   20af4:	2127      	movs	r1, #39	; 0x27
   20af6:	3008      	adds	r0, #8
   20af8:	f001 fd9b 	bl	22632 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   20afc:	4639      	mov	r1, r7
   20afe:	4606      	mov	r6, r0
   20b00:	f7ff ffe7 	bl	20ad2 <bt_addr_le_copy>
   20b04:	4621      	mov	r1, r4
   20b06:	1dc3      	adds	r3, r0, #7
   20b08:	f104 0210 	add.w	r2, r4, #16
   20b0c:	f851 0b04 	ldr.w	r0, [r1], #4
   20b10:	f843 0b04 	str.w	r0, [r3], #4
   20b14:	4291      	cmp	r1, r2
   20b16:	d1f9      	bne.n	20b0c <hci_id_add.isra.0+0x2c>
__ssp_bos_icheck3(memset, void *, int)
   20b18:	2210      	movs	r2, #16
   20b1a:	2100      	movs	r1, #0
   20b1c:	f106 0017 	add.w	r0, r6, #23
   20b20:	f002 fdad 	bl	2367e <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   20b24:	4629      	mov	r1, r5
   20b26:	2200      	movs	r2, #0
}
   20b28:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   20b2c:	f242 0027 	movw	r0, #8231	; 0x2027
   20b30:	f7e6 b9dc 	b.w	6eec <bt_hci_cmd_send_sync>
}
   20b34:	f06f 0068 	mvn.w	r0, #104	; 0x68
   20b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00020b3a <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   20b3a:	7a03      	ldrb	r3, [r0, #8]
   20b3c:	075b      	lsls	r3, r3, #29
   20b3e:	d504      	bpl.n	20b4a <keys_add_id+0x10>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   20b40:	f100 012a 	add.w	r1, r0, #42	; 0x2a
   20b44:	3001      	adds	r0, #1
   20b46:	f7ff bfcb 	b.w	20ae0 <hci_id_add.isra.0>
}
   20b4a:	4770      	bx	lr

00020b4c <adv_pause_enabled>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20b4c:	f3bf 8f5b 	dmb	ish
   20b50:	6903      	ldr	r3, [r0, #16]
   20b52:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   20b56:	065b      	lsls	r3, r3, #25
   20b58:	f100 0210 	add.w	r2, r0, #16
   20b5c:	d50e      	bpl.n	20b7c <adv_pause_enabled+0x30>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   20b5e:	f3bf 8f5b 	dmb	ish
   20b62:	e852 3f00 	ldrex	r3, [r2]
   20b66:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   20b6a:	e842 3100 	strex	r1, r3, [r2]
   20b6e:	2900      	cmp	r1, #0
   20b70:	d1f7      	bne.n	20b62 <adv_pause_enabled+0x16>
   20b72:	f3bf 8f5b 	dmb	ish
		bt_le_adv_set_enable(adv, false);
   20b76:	2100      	movs	r1, #0
   20b78:	f000 b910 	b.w	20d9c <bt_le_adv_set_enable>
}
   20b7c:	4770      	bx	lr

00020b7e <bt_lookup_id_addr>:
{
   20b7e:	b510      	push	{r4, lr}
   20b80:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   20b82:	f7eb fff9 	bl	cb78 <bt_keys_find_irk>
		if (keys) {
   20b86:	b100      	cbz	r0, 20b8a <bt_lookup_id_addr+0xc>
			return &keys->addr;
   20b88:	1c44      	adds	r4, r0, #1
}
   20b8a:	4620      	mov	r0, r4
   20b8c:	bd10      	pop	{r4, pc}

00020b8e <bt_id_set_adv_private_addr>:
{
   20b8e:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   20b90:	2106      	movs	r1, #6
   20b92:	4668      	mov	r0, sp
   20b94:	f7ee ff28 	bl	f9e8 <bt_rand>
	if (err) {
   20b98:	b940      	cbnz	r0, 20bac <bt_id_set_adv_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   20b9a:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
   20b9e:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   20ba0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   20ba4:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
   20ba8:	f7e6 fe84 	bl	78b4 <set_random_address>
}
   20bac:	b003      	add	sp, #12
   20bae:	f85d fb04 	ldr.w	pc, [sp], #4

00020bb2 <bt_id_adv_random_addr_check>:
}
   20bb2:	2001      	movs	r0, #1
   20bb4:	4770      	bx	lr

00020bb6 <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   20bb6:	7a03      	ldrb	r3, [r0, #8]
   20bb8:	07d9      	lsls	r1, r3, #31
   20bba:	d504      	bpl.n	20bc6 <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   20bbc:	f023 0301 	bic.w	r3, r3, #1
   20bc0:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   20bc2:	f7e6 beeb 	b.w	799c <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   20bc6:	0799      	lsls	r1, r3, #30
   20bc8:	d504      	bpl.n	20bd4 <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   20bca:	f023 0302 	bic.w	r3, r3, #2
   20bce:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   20bd0:	f7e6 bfb8 	b.w	7b44 <bt_id_del>
}
   20bd4:	4770      	bx	lr

00020bd6 <get_adv_channel_map>:
{
   20bd6:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   20bd8:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   20bdc:	bf0c      	ite	eq
   20bde:	2007      	moveq	r0, #7
   20be0:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   20be2:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   20be4:	bf48      	it	mi
   20be6:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   20bea:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   20bec:	bf48      	it	mi
   20bee:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   20bf2:	4770      	bx	lr

00020bf4 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20bf4:	f3bf 8f5b 	dmb	ish
   20bf8:	6800      	ldr	r0, [r0, #0]
   20bfa:	f3bf 8f5b 	dmb	ish
}
   20bfe:	4770      	bx	lr

00020c00 <atomic_and>:
{
   20c00:	4603      	mov	r3, r0
}
   20c02:	f3bf 8f5b 	dmb	ish
   20c06:	e853 0f00 	ldrex	r0, [r3]
   20c0a:	ea00 0201 	and.w	r2, r0, r1
   20c0e:	e843 2c00 	strex	ip, r2, [r3]
   20c12:	f1bc 0f00 	cmp.w	ip, #0
   20c16:	d1f6      	bne.n	20c06 <atomic_and+0x6>
   20c18:	f3bf 8f5b 	dmb	ish
   20c1c:	4770      	bx	lr

00020c1e <bt_addr_le_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   20c1e:	680b      	ldr	r3, [r1, #0]
   20c20:	6003      	str	r3, [r0, #0]
   20c22:	888b      	ldrh	r3, [r1, #4]
   20c24:	8083      	strh	r3, [r0, #4]
   20c26:	798b      	ldrb	r3, [r1, #6]
   20c28:	7183      	strb	r3, [r0, #6]
   20c2a:	4770      	bx	lr

00020c2c <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   20c2c:	2301      	movs	r3, #1
{
   20c2e:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   20c30:	fa03 f101 	lsl.w	r1, r3, r1
{
   20c34:	4604      	mov	r4, r0
	if (val) {
   20c36:	b162      	cbz	r2, 20c52 <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   20c38:	f3bf 8f5b 	dmb	ish
   20c3c:	e854 3f00 	ldrex	r3, [r4]
   20c40:	430b      	orrs	r3, r1
   20c42:	e844 3200 	strex	r2, r3, [r4]
   20c46:	2a00      	cmp	r2, #0
   20c48:	d1f8      	bne.n	20c3c <atomic_set_bit_to+0x10>
   20c4a:	f3bf 8f5b 	dmb	ish
	}
}
   20c4e:	bc10      	pop	{r4}
   20c50:	4770      	bx	lr
   20c52:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   20c54:	43c9      	mvns	r1, r1
   20c56:	f7ff bfd3 	b.w	20c00 <atomic_and>

00020c5a <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   20c5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20c5e:	b087      	sub	sp, #28
   20c60:	4605      	mov	r5, r0
   20c62:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
   20c66:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   20c6a:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   20c6e:	460c      	mov	r4, r1
   20c70:	4617      	mov	r7, r2
	struct bt_ad d[2] = {};
   20c72:	2100      	movs	r1, #0
   20c74:	2210      	movs	r2, #16
   20c76:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   20c78:	461e      	mov	r6, r3
	struct bt_ad d[2] = {};
   20c7a:	f002 fd00 	bl	2367e <memset>
	if (use_name) {
   20c7e:	f1b8 0f00 	cmp.w	r8, #0
   20c82:	d010      	beq.n	20ca6 <le_adv_update.constprop.0+0x4c>
		const char *name = bt_get_name();
   20c84:	f7e6 fdf8 	bl	7878 <bt_get_name>
   20c88:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   20c8a:	2c00      	cmp	r4, #0
   20c8c:	d13c      	bne.n	20d08 <le_adv_update.constprop.0+0xae>
   20c8e:	2e00      	cmp	r6, #0
   20c90:	d145      	bne.n	20d1e <le_adv_update.constprop.0+0xc4>
		data = (struct bt_data)BT_DATA(
   20c92:	4658      	mov	r0, fp
   20c94:	f7e0 f858 	bl	d48 <strlen>
   20c98:	2309      	movs	r3, #9
   20c9a:	f88d 3000 	strb.w	r3, [sp]
   20c9e:	f88d 0001 	strb.w	r0, [sp, #1]
   20ca2:	f8cd b004 	str.w	fp, [sp, #4]
		d[0].len = ad_len;
   20ca6:	e9cd 4702 	strd	r4, r7, [sp, #8]
		if (use_name && !scannable) {
   20caa:	f1b8 0f00 	cmp.w	r8, #0
   20cae:	d038      	beq.n	20d22 <le_adv_update.constprop.0+0xc8>
   20cb0:	f1ba 0f00 	cmp.w	sl, #0
   20cb4:	d135      	bne.n	20d22 <le_adv_update.constprop.0+0xc8>
			d[1].len = 1;
   20cb6:	2301      	movs	r3, #1
			d[1].data = &data;
   20cb8:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   20cbc:	9305      	str	r3, [sp, #20]
			d_len = 2;
   20cbe:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   20cc0:	a902      	add	r1, sp, #8
   20cc2:	f242 0008 	movw	r0, #8200	; 0x2008
   20cc6:	f7e7 f9db 	bl	8080 <hci_set_ad>
		if (err) {
   20cca:	4604      	mov	r4, r0
   20ccc:	b978      	cbnz	r0, 20cee <le_adv_update.constprop.0+0x94>
	if (scannable) {
   20cce:	f1ba 0f00 	cmp.w	sl, #0
   20cd2:	d128      	bne.n	20d26 <le_adv_update.constprop.0+0xcc>
   20cd4:	3510      	adds	r5, #16
   20cd6:	f3bf 8f5b 	dmb	ish
   20cda:	e855 3f00 	ldrex	r3, [r5]
   20cde:	f043 0304 	orr.w	r3, r3, #4
   20ce2:	e845 3200 	strex	r2, r3, [r5]
   20ce6:	2a00      	cmp	r2, #0
   20ce8:	d1f7      	bne.n	20cda <le_adv_update.constprop.0+0x80>
   20cea:	f3bf 8f5b 	dmb	ish
}
   20cee:	4620      	mov	r0, r4
   20cf0:	b007      	add	sp, #28
   20cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   20cf6:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   20cfa:	3a08      	subs	r2, #8
   20cfc:	2a01      	cmp	r2, #1
   20cfe:	d925      	bls.n	20d4c <le_adv_update.constprop.0+0xf2>
	for (i = 0; i < ad_len; i++) {
   20d00:	3301      	adds	r3, #1
   20d02:	429f      	cmp	r7, r3
   20d04:	d1f7      	bne.n	20cf6 <le_adv_update.constprop.0+0x9c>
   20d06:	e7c2      	b.n	20c8e <le_adv_update.constprop.0+0x34>
   20d08:	2300      	movs	r3, #0
   20d0a:	e7fa      	b.n	20d02 <le_adv_update.constprop.0+0xa8>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   20d0c:	f816 2033 	ldrb.w	r2, [r6, r3, lsl #3]
   20d10:	3a08      	subs	r2, #8
   20d12:	2a01      	cmp	r2, #1
   20d14:	d91a      	bls.n	20d4c <le_adv_update.constprop.0+0xf2>
	for (i = 0; i < ad_len; i++) {
   20d16:	3301      	adds	r3, #1
   20d18:	4599      	cmp	r9, r3
   20d1a:	d1f7      	bne.n	20d0c <le_adv_update.constprop.0+0xb2>
   20d1c:	e7b9      	b.n	20c92 <le_adv_update.constprop.0+0x38>
   20d1e:	2300      	movs	r3, #0
   20d20:	e7fa      	b.n	20d18 <le_adv_update.constprop.0+0xbe>
		d_len = 1;
   20d22:	2201      	movs	r2, #1
   20d24:	e7cc      	b.n	20cc0 <le_adv_update.constprop.0+0x66>
		d[0].len = sd_len;
   20d26:	e9cd 6902 	strd	r6, r9, [sp, #8]
		if (use_name) {
   20d2a:	2201      	movs	r2, #1
   20d2c:	f1b8 0f00 	cmp.w	r8, #0
   20d30:	d003      	beq.n	20d3a <le_adv_update.constprop.0+0xe0>
			d[1].len = 1;
   20d32:	9205      	str	r2, [sp, #20]
			d[1].data = &data;
   20d34:	f8cd d010 	str.w	sp, [sp, #16]
			d_len = 2;
   20d38:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   20d3a:	a902      	add	r1, sp, #8
   20d3c:	f242 0009 	movw	r0, #8201	; 0x2009
   20d40:	f7e7 f99e 	bl	8080 <hci_set_ad>
		if (err) {
   20d44:	2800      	cmp	r0, #0
   20d46:	d0c5      	beq.n	20cd4 <le_adv_update.constprop.0+0x7a>
   20d48:	4604      	mov	r4, r0
   20d4a:	e7d0      	b.n	20cee <le_adv_update.constprop.0+0x94>
			return -EINVAL;
   20d4c:	f06f 0415 	mvn.w	r4, #21
   20d50:	e7cd      	b.n	20cee <le_adv_update.constprop.0+0x94>

00020d52 <bt_le_adv_set_enable_legacy>:
{
   20d52:	b570      	push	{r4, r5, r6, lr}
   20d54:	4606      	mov	r6, r0
   20d56:	b086      	sub	sp, #24
   20d58:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   20d5a:	f242 000a 	movw	r0, #8202	; 0x200a
   20d5e:	2101      	movs	r1, #1
   20d60:	f7e5 ff60 	bl	6c24 <bt_hci_cmd_create>
	if (!buf) {
   20d64:	4604      	mov	r4, r0
   20d66:	b1b0      	cbz	r0, 20d96 <bt_le_adv_set_enable_legacy+0x44>
	if (enable) {
   20d68:	3008      	adds	r0, #8
   20d6a:	b195      	cbz	r5, 20d92 <bt_le_adv_set_enable_legacy+0x40>
	return net_buf_simple_add_u8(&buf->b, val);
   20d6c:	2101      	movs	r1, #1
   20d6e:	f001 fc70 	bl	22652 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   20d72:	f106 0210 	add.w	r2, r6, #16
   20d76:	a903      	add	r1, sp, #12
   20d78:	4620      	mov	r0, r4
   20d7a:	9500      	str	r5, [sp, #0]
   20d7c:	2306      	movs	r3, #6
   20d7e:	f7e5 ff3f 	bl	6c00 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   20d82:	2200      	movs	r2, #0
   20d84:	4621      	mov	r1, r4
   20d86:	f242 000a 	movw	r0, #8202	; 0x200a
   20d8a:	f7e6 f8af 	bl	6eec <bt_hci_cmd_send_sync>
}
   20d8e:	b006      	add	sp, #24
   20d90:	bd70      	pop	{r4, r5, r6, pc}
   20d92:	4629      	mov	r1, r5
   20d94:	e7eb      	b.n	20d6e <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   20d96:	f06f 0068 	mvn.w	r0, #104	; 0x68
   20d9a:	e7f8      	b.n	20d8e <bt_le_adv_set_enable_legacy+0x3c>

00020d9c <bt_le_adv_set_enable>:
	return bt_le_adv_set_enable_legacy(adv, enable);
   20d9c:	f7ff bfd9 	b.w	20d52 <bt_le_adv_set_enable_legacy>

00020da0 <tx_notify>:
{
   20da0:	b570      	push	{r4, r5, r6, lr}
   20da2:	4604      	mov	r4, r0
	__asm__ volatile(
   20da4:	f04f 0220 	mov.w	r2, #32
   20da8:	f3ef 8311 	mrs	r3, BASEPRI
   20dac:	f382 8811 	msr	BASEPRI, r2
   20db0:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   20db4:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   20db6:	b920      	cbnz	r0, 20dc2 <tx_notify+0x22>
	__asm__ volatile(
   20db8:	f383 8811 	msr	BASEPRI, r3
   20dbc:	f3bf 8f6f 	isb	sy
}
   20dc0:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   20dc2:	6a61      	ldr	r1, [r4, #36]	; 0x24
   20dc4:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   20dc6:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   20dc8:	4288      	cmp	r0, r1
	list->tail = node;
   20dca:	bf08      	it	eq
   20dcc:	6262      	streq	r2, [r4, #36]	; 0x24
   20dce:	f383 8811 	msr	BASEPRI, r3
   20dd2:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   20dd6:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   20dda:	f7e7 fcf7 	bl	87cc <tx_free>
		cb(conn, user_data);
   20dde:	4631      	mov	r1, r6
   20de0:	4620      	mov	r0, r4
   20de2:	47a8      	blx	r5
	while (1) {
   20de4:	e7de      	b.n	20da4 <tx_notify+0x4>

00020de6 <tx_complete_work>:
	tx_notify(conn);
   20de6:	3828      	subs	r0, #40	; 0x28
   20de8:	f7ff bfda 	b.w	20da0 <tx_notify>

00020dec <bt_conn_new>:
{
   20dec:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   20dee:	2200      	movs	r2, #0
   20df0:	4603      	mov	r3, r0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   20df2:	2401      	movs	r4, #1
   20df4:	428a      	cmp	r2, r1
   20df6:	d102      	bne.n	20dfe <bt_conn_new+0x12>
		return NULL;
   20df8:	2300      	movs	r3, #0
}
   20dfa:	4618      	mov	r0, r3
   20dfc:	bd38      	pop	{r3, r4, r5, pc}
   20dfe:	f103 00b8 	add.w	r0, r3, #184	; 0xb8
   20e02:	f3bf 8f5b 	dmb	ish
   20e06:	e850 5f00 	ldrex	r5, [r0]
   20e0a:	2d00      	cmp	r5, #0
   20e0c:	d104      	bne.n	20e18 <bt_conn_new+0x2c>
   20e0e:	e840 4c00 	strex	ip, r4, [r0]
   20e12:	f1bc 0f00 	cmp.w	ip, #0
   20e16:	d1f6      	bne.n	20e06 <bt_conn_new+0x1a>
   20e18:	f3bf 8f5b 	dmb	ish
   20e1c:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   20e20:	d002      	beq.n	20e28 <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
   20e22:	3201      	adds	r2, #1
   20e24:	4603      	mov	r3, r0
   20e26:	e7e5      	b.n	20df4 <bt_conn_new+0x8>
	if (!conn) {
   20e28:	2b00      	cmp	r3, #0
   20e2a:	d0e6      	beq.n	20dfa <bt_conn_new+0xe>
__ssp_bos_icheck3(memset, void *, int)
   20e2c:	4618      	mov	r0, r3
   20e2e:	22b8      	movs	r2, #184	; 0xb8
   20e30:	2100      	movs	r1, #0
   20e32:	f002 fc24 	bl	2367e <memset>
   20e36:	4603      	mov	r3, r0
   20e38:	e7df      	b.n	20dfa <bt_conn_new+0xe>

00020e3a <bt_conn_set_security>:
{
   20e3a:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   20e3c:	7b43      	ldrb	r3, [r0, #13]
   20e3e:	2b07      	cmp	r3, #7
{
   20e40:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   20e42:	d128      	bne.n	20e96 <bt_conn_set_security+0x5c>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   20e44:	7a43      	ldrb	r3, [r0, #9]
   20e46:	428b      	cmp	r3, r1
   20e48:	d228      	bcs.n	20e9c <bt_conn_set_security+0x62>
   20e4a:	7a83      	ldrb	r3, [r0, #10]
   20e4c:	428b      	cmp	r3, r1
   20e4e:	d225      	bcs.n	20e9c <bt_conn_set_security+0x62>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   20e50:	f3bf 8f5b 	dmb	ish
	if (val) {
   20e54:	060a      	lsls	r2, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   20e56:	f100 0304 	add.w	r3, r0, #4
   20e5a:	d513      	bpl.n	20e84 <bt_conn_set_security+0x4a>
   20e5c:	e853 2f00 	ldrex	r2, [r3]
   20e60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   20e64:	e843 2000 	strex	r0, r2, [r3]
   20e68:	2800      	cmp	r0, #0
   20e6a:	d1f7      	bne.n	20e5c <bt_conn_set_security+0x22>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   20e6c:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   20e70:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   20e74:	72a1      	strb	r1, [r4, #10]
		return bt_smp_start_security(conn);
   20e76:	4620      	mov	r0, r4
   20e78:	f7eb f952 	bl	c120 <bt_smp_start_security>
	if (err) {
   20e7c:	b108      	cbz	r0, 20e82 <bt_conn_set_security+0x48>
		conn->required_sec_level = conn->sec_level;
   20e7e:	7a63      	ldrb	r3, [r4, #9]
   20e80:	72a3      	strb	r3, [r4, #10]
}
   20e82:	bd10      	pop	{r4, pc}
   20e84:	e853 2f00 	ldrex	r2, [r3]
   20e88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   20e8c:	e843 2000 	strex	r0, r2, [r3]
   20e90:	2800      	cmp	r0, #0
   20e92:	d0eb      	beq.n	20e6c <bt_conn_set_security+0x32>
   20e94:	e7f6      	b.n	20e84 <bt_conn_set_security+0x4a>
		return -ENOTCONN;
   20e96:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   20e9a:	e7f2      	b.n	20e82 <bt_conn_set_security+0x48>
		return 0;
   20e9c:	2000      	movs	r0, #0
   20e9e:	e7f0      	b.n	20e82 <bt_conn_set_security+0x48>

00020ea0 <bt_conn_get_security>:
}
   20ea0:	7a40      	ldrb	r0, [r0, #9]
   20ea2:	4770      	bx	lr

00020ea4 <bt_conn_reset_rx_state>:
{
   20ea4:	b510      	push	{r4, lr}
   20ea6:	4604      	mov	r4, r0
	if (!conn->rx) {
   20ea8:	6900      	ldr	r0, [r0, #16]
   20eaa:	b118      	cbz	r0, 20eb4 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   20eac:	f7f9 f95e 	bl	1a16c <net_buf_unref>
	conn->rx = NULL;
   20eb0:	2300      	movs	r3, #0
   20eb2:	6123      	str	r3, [r4, #16]
}
   20eb4:	bd10      	pop	{r4, pc}

00020eb6 <bt_conn_is_peer_addr_le>:
{
   20eb6:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   20eb8:	7a03      	ldrb	r3, [r0, #8]
   20eba:	428b      	cmp	r3, r1
{
   20ebc:	4604      	mov	r4, r0
   20ebe:	4615      	mov	r5, r2
	if (id != conn->id) {
   20ec0:	d115      	bne.n	20eee <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   20ec2:	f100 0188 	add.w	r1, r0, #136	; 0x88
   20ec6:	2207      	movs	r2, #7
   20ec8:	4628      	mov	r0, r5
   20eca:	f002 fbbc 	bl	23646 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   20ece:	b180      	cbz	r0, 20ef2 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   20ed0:	78e3      	ldrb	r3, [r4, #3]
   20ed2:	2207      	movs	r2, #7
   20ed4:	b943      	cbnz	r3, 20ee8 <bt_conn_is_peer_addr_le+0x32>
   20ed6:	f104 0196 	add.w	r1, r4, #150	; 0x96
   20eda:	4628      	mov	r0, r5
   20edc:	f002 fbb3 	bl	23646 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   20ee0:	fab0 f080 	clz	r0, r0
   20ee4:	0940      	lsrs	r0, r0, #5
}
   20ee6:	bd38      	pop	{r3, r4, r5, pc}
   20ee8:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   20eec:	e7f5      	b.n	20eda <bt_conn_is_peer_addr_le+0x24>
		return false;
   20eee:	2000      	movs	r0, #0
   20ef0:	e7f9      	b.n	20ee6 <bt_conn_is_peer_addr_le+0x30>
		return true;
   20ef2:	2001      	movs	r0, #1
   20ef4:	e7f7      	b.n	20ee6 <bt_conn_is_peer_addr_le+0x30>

00020ef6 <bt_conn_ref>:
{
   20ef6:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   20ef8:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20efc:	f3bf 8f5b 	dmb	ish
   20f00:	6813      	ldr	r3, [r2, #0]
   20f02:	f3bf 8f5b 	dmb	ish
		if (!old) {
   20f06:	b17b      	cbz	r3, 20f28 <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   20f08:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   20f0c:	1c59      	adds	r1, r3, #1
   20f0e:	e852 4f00 	ldrex	r4, [r2]
   20f12:	429c      	cmp	r4, r3
   20f14:	d104      	bne.n	20f20 <bt_conn_ref+0x2a>
   20f16:	e842 1c00 	strex	ip, r1, [r2]
   20f1a:	f1bc 0f00 	cmp.w	ip, #0
   20f1e:	d1f6      	bne.n	20f0e <bt_conn_ref+0x18>
   20f20:	f3bf 8f5b 	dmb	ish
   20f24:	d1ea      	bne.n	20efc <bt_conn_ref+0x6>
}
   20f26:	bd10      	pop	{r4, pc}
			return NULL;
   20f28:	4618      	mov	r0, r3
   20f2a:	e7fc      	b.n	20f26 <bt_conn_ref+0x30>

00020f2c <bt_conn_unref>:
	atomic_val_t old = atomic_dec(&conn->ref);
   20f2c:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   20f30:	f3bf 8f5b 	dmb	ish
   20f34:	e853 2f00 	ldrex	r2, [r3]
   20f38:	3a01      	subs	r2, #1
   20f3a:	e843 2100 	strex	r1, r2, [r3]
   20f3e:	2900      	cmp	r1, #0
   20f40:	d1f8      	bne.n	20f34 <bt_conn_unref+0x8>
   20f42:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20f46:	f3bf 8f5b 	dmb	ish
   20f4a:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   20f4e:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   20f52:	b90b      	cbnz	r3, 20f58 <bt_conn_unref+0x2c>
		bt_le_adv_resume();
   20f54:	f7e7 ba94 	b.w	8480 <bt_le_adv_resume>
}
   20f58:	4770      	bx	lr

00020f5a <conn_lookup_handle>:
{
   20f5a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20f5e:	4607      	mov	r7, r0
   20f60:	460e      	mov	r6, r1
   20f62:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   20f64:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   20f66:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   20f6a:	42b4      	cmp	r4, r6
   20f6c:	d103      	bne.n	20f76 <conn_lookup_handle+0x1c>
	return NULL;
   20f6e:	2300      	movs	r3, #0
}
   20f70:	4618      	mov	r0, r3
   20f72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   20f76:	fb09 7004 	mla	r0, r9, r4, r7
   20f7a:	f7ff ffbc 	bl	20ef6 <bt_conn_ref>
   20f7e:	4603      	mov	r3, r0
		if (!conn) {
   20f80:	b158      	cbz	r0, 20f9a <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   20f82:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   20f84:	2d01      	cmp	r5, #1
   20f86:	d002      	beq.n	20f8e <conn_lookup_handle+0x34>
   20f88:	3d07      	subs	r5, #7
   20f8a:	2d01      	cmp	r5, #1
   20f8c:	d803      	bhi.n	20f96 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   20f8e:	881a      	ldrh	r2, [r3, #0]
   20f90:	4542      	cmp	r2, r8
   20f92:	d0ed      	beq.n	20f70 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   20f94:	4618      	mov	r0, r3
   20f96:	f7ff ffc9 	bl	20f2c <bt_conn_unref>
	for (i = 0; i < size; i++) {
   20f9a:	3401      	adds	r4, #1
   20f9c:	e7e5      	b.n	20f6a <conn_lookup_handle+0x10>

00020f9e <bt_conn_get_dst>:
}
   20f9e:	3088      	adds	r0, #136	; 0x88
   20fa0:	4770      	bx	lr

00020fa2 <bt_conn_disconnect>:
{
   20fa2:	b538      	push	{r3, r4, r5, lr}
   20fa4:	7b43      	ldrb	r3, [r0, #13]
   20fa6:	3b02      	subs	r3, #2
   20fa8:	4604      	mov	r4, r0
   20faa:	2b06      	cmp	r3, #6
   20fac:	d805      	bhi.n	20fba <bt_conn_disconnect+0x18>
   20fae:	e8df f003 	tbb	[pc, r3]
   20fb2:	0408      	.short	0x0408
   20fb4:	0e0c0404 	.word	0x0e0c0404
   20fb8:	0c          	.byte	0x0c
   20fb9:	00          	.byte	0x00
	switch (conn->state) {
   20fba:	f06f 057f 	mvn.w	r5, #127	; 0x7f
}
   20fbe:	4628      	mov	r0, r5
   20fc0:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
   20fc2:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   20fc4:	2100      	movs	r1, #0
   20fc6:	f7e7 fee1 	bl	8d8c <bt_conn_set_state>
		return 0;
   20fca:	2500      	movs	r5, #0
   20fcc:	e7f7      	b.n	20fbe <bt_conn_disconnect+0x1c>
	err = bt_hci_disconnect(conn->handle, reason);
   20fce:	8800      	ldrh	r0, [r0, #0]
   20fd0:	f7ff fc53 	bl	2087a <bt_hci_disconnect>
	if (err) {
   20fd4:	4605      	mov	r5, r0
   20fd6:	2800      	cmp	r0, #0
   20fd8:	d1f1      	bne.n	20fbe <bt_conn_disconnect+0x1c>
	if (conn->state == BT_CONN_CONNECTED) {
   20fda:	7b63      	ldrb	r3, [r4, #13]
   20fdc:	2b07      	cmp	r3, #7
   20fde:	d1ee      	bne.n	20fbe <bt_conn_disconnect+0x1c>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   20fe0:	2108      	movs	r1, #8
   20fe2:	4620      	mov	r0, r4
   20fe4:	f7e7 fed2 	bl	8d8c <bt_conn_set_state>
   20fe8:	e7e9      	b.n	20fbe <bt_conn_disconnect+0x1c>

00020fea <bt_conn_le_conn_update>:
{
   20fea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20fec:	4607      	mov	r7, r0
   20fee:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   20ff0:	f242 0013 	movw	r0, #8211	; 0x2013
   20ff4:	210e      	movs	r1, #14
   20ff6:	f7e5 fe15 	bl	6c24 <bt_hci_cmd_create>
	if (!buf) {
   20ffa:	4606      	mov	r6, r0
   20ffc:	b1d0      	cbz	r0, 21034 <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   20ffe:	210e      	movs	r1, #14
   21000:	3008      	adds	r0, #8
   21002:	f001 fb16 	bl	22632 <net_buf_simple_add>
   21006:	220e      	movs	r2, #14
   21008:	4604      	mov	r4, r0
   2100a:	2100      	movs	r1, #0
   2100c:	f002 fb37 	bl	2367e <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   21010:	883b      	ldrh	r3, [r7, #0]
   21012:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   21014:	882b      	ldrh	r3, [r5, #0]
   21016:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   21018:	886b      	ldrh	r3, [r5, #2]
   2101a:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   2101c:	88ab      	ldrh	r3, [r5, #4]
   2101e:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   21020:	88eb      	ldrh	r3, [r5, #6]
   21022:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   21024:	4631      	mov	r1, r6
   21026:	2200      	movs	r2, #0
}
   21028:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2102c:	f242 0013 	movw	r0, #8211	; 0x2013
   21030:	f7e5 bf5c 	b.w	6eec <bt_hci_cmd_send_sync>
}
   21034:	f06f 0068 	mvn.w	r0, #104	; 0x68
   21038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002103a <l2cap_connected>:
}
   2103a:	4770      	bx	lr

0002103c <l2cap_disconnected>:
   2103c:	4770      	bx	lr

0002103e <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2103e:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   21040:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   21042:	b17b      	cbz	r3, 21064 <bt_l2cap_chan_remove+0x26>
   21044:	3b08      	subs	r3, #8
   21046:	2200      	movs	r2, #0
   21048:	b163      	cbz	r3, 21064 <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   2104a:	428b      	cmp	r3, r1
   2104c:	f103 0408 	add.w	r4, r3, #8
   21050:	d10f      	bne.n	21072 <bt_l2cap_chan_remove+0x34>
Z_GENLIST_REMOVE(slist, snode)
   21052:	688b      	ldr	r3, [r1, #8]
   21054:	b93a      	cbnz	r2, 21066 <bt_l2cap_chan_remove+0x28>
   21056:	6d42      	ldr	r2, [r0, #84]	; 0x54
	list->head = node;
   21058:	6503      	str	r3, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   2105a:	4294      	cmp	r4, r2
   2105c:	d100      	bne.n	21060 <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   2105e:	6543      	str	r3, [r0, #84]	; 0x54
	parent->next = child;
   21060:	2300      	movs	r3, #0
   21062:	608b      	str	r3, [r1, #8]
}
   21064:	bd10      	pop	{r4, pc}
   21066:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   21068:	6d43      	ldr	r3, [r0, #84]	; 0x54
   2106a:	429c      	cmp	r4, r3
	list->tail = node;
   2106c:	bf08      	it	eq
   2106e:	6542      	streq	r2, [r0, #84]	; 0x54
}
   21070:	e7f6      	b.n	21060 <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   21072:	2c00      	cmp	r4, #0
   21074:	d0f6      	beq.n	21064 <bt_l2cap_chan_remove+0x26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21076:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   21078:	2b00      	cmp	r3, #0
   2107a:	d0f3      	beq.n	21064 <bt_l2cap_chan_remove+0x26>
   2107c:	3b08      	subs	r3, #8
   2107e:	4622      	mov	r2, r4
   21080:	e7e2      	b.n	21048 <bt_l2cap_chan_remove+0xa>

00021082 <bt_l2cap_chan_del>:
{
   21082:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   21084:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   21088:	4604      	mov	r4, r0
	if (!chan->conn) {
   2108a:	b123      	cbz	r3, 21096 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   2108c:	686b      	ldr	r3, [r5, #4]
   2108e:	b103      	cbz	r3, 21092 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   21090:	4798      	blx	r3
	chan->conn = NULL;
   21092:	2300      	movs	r3, #0
   21094:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   21096:	68e3      	ldr	r3, [r4, #12]
   21098:	b10b      	cbz	r3, 2109e <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   2109a:	4620      	mov	r0, r4
   2109c:	4798      	blx	r3
	if (ops->released) {
   2109e:	69eb      	ldr	r3, [r5, #28]
   210a0:	b11b      	cbz	r3, 210aa <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   210a2:	4620      	mov	r0, r4
}
   210a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   210a8:	4718      	bx	r3
}
   210aa:	bd70      	pop	{r4, r5, r6, pc}

000210ac <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   210ac:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   210ae:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   210b0:	b18b      	cbz	r3, 210d6 <bt_l2cap_disconnected+0x2a>
   210b2:	f1b3 0008 	subs.w	r0, r3, #8
   210b6:	d00e      	beq.n	210d6 <bt_l2cap_disconnected+0x2a>
   210b8:	681c      	ldr	r4, [r3, #0]
   210ba:	b104      	cbz	r4, 210be <bt_l2cap_disconnected+0x12>
   210bc:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   210be:	f7ff ffe0 	bl	21082 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   210c2:	b144      	cbz	r4, 210d6 <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   210c4:	f114 0308 	adds.w	r3, r4, #8
   210c8:	d002      	beq.n	210d0 <bt_l2cap_disconnected+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   210ca:	68a3      	ldr	r3, [r4, #8]
   210cc:	b103      	cbz	r3, 210d0 <bt_l2cap_disconnected+0x24>
   210ce:	3b08      	subs	r3, #8
{
   210d0:	4620      	mov	r0, r4
   210d2:	461c      	mov	r4, r3
   210d4:	e7f3      	b.n	210be <bt_l2cap_disconnected+0x12>
}
   210d6:	bd10      	pop	{r4, pc}

000210d8 <bt_l2cap_security_changed>:
{
   210d8:	b538      	push	{r3, r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   210da:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   210dc:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   210de:	b1a3      	cbz	r3, 2110a <bt_l2cap_security_changed+0x32>
   210e0:	f1b3 0008 	subs.w	r0, r3, #8
   210e4:	d011      	beq.n	2110a <bt_l2cap_security_changed+0x32>
   210e6:	681c      	ldr	r4, [r3, #0]
   210e8:	b104      	cbz	r4, 210ec <bt_l2cap_security_changed+0x14>
   210ea:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   210ec:	6843      	ldr	r3, [r0, #4]
   210ee:	689b      	ldr	r3, [r3, #8]
   210f0:	b10b      	cbz	r3, 210f6 <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   210f2:	4629      	mov	r1, r5
   210f4:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   210f6:	b144      	cbz	r4, 2110a <bt_l2cap_security_changed+0x32>
Z_GENLIST_PEEK_NEXT(slist, snode)
   210f8:	f114 0308 	adds.w	r3, r4, #8
   210fc:	d002      	beq.n	21104 <bt_l2cap_security_changed+0x2c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   210fe:	68a3      	ldr	r3, [r4, #8]
   21100:	b103      	cbz	r3, 21104 <bt_l2cap_security_changed+0x2c>
   21102:	3b08      	subs	r3, #8
{
   21104:	4620      	mov	r0, r4
   21106:	461c      	mov	r4, r3
   21108:	e7f0      	b.n	210ec <bt_l2cap_security_changed+0x14>
}
   2110a:	bd38      	pop	{r3, r4, r5, pc}

0002110c <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   2110c:	3104      	adds	r1, #4
   2110e:	f7e8 b815 	b.w	913c <bt_conn_create_pdu_timeout>

00021112 <bt_l2cap_send_cb>:
{
   21112:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21116:	4614      	mov	r4, r2
   21118:	4605      	mov	r5, r0
   2111a:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   2111c:	f102 0008 	add.w	r0, r2, #8
   21120:	2104      	movs	r1, #4
   21122:	461e      	mov	r6, r3
   21124:	f8dd 8018 	ldr.w	r8, [sp, #24]
   21128:	f001 fa9b 	bl	22662 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2112c:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   2112e:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   21130:	3a04      	subs	r2, #4
   21132:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   21134:	4643      	mov	r3, r8
   21136:	4632      	mov	r2, r6
   21138:	4621      	mov	r1, r4
   2113a:	4628      	mov	r0, r5
}
   2113c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   21140:	f7e7 bd40 	b.w	8bc4 <bt_conn_send_cb>

00021144 <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   21144:	6d00      	ldr	r0, [r0, #80]	; 0x50
   21146:	b160      	cbz	r0, 21162 <bt_l2cap_le_lookup_tx_cid+0x1e>
   21148:	3808      	subs	r0, #8
   2114a:	b900      	cbnz	r0, 2114e <bt_l2cap_le_lookup_tx_cid+0xa>
   2114c:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   2114e:	f8b0 3054 	ldrh.w	r3, [r0, #84]	; 0x54
   21152:	428b      	cmp	r3, r1
   21154:	d005      	beq.n	21162 <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   21156:	f110 0308 	adds.w	r3, r0, #8
   2115a:	d001      	beq.n	21160 <bt_l2cap_le_lookup_tx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2115c:	6880      	ldr	r0, [r0, #8]
   2115e:	e7f2      	b.n	21146 <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   21160:	4618      	mov	r0, r3
}
   21162:	4770      	bx	lr

00021164 <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   21164:	6d00      	ldr	r0, [r0, #80]	; 0x50
   21166:	b160      	cbz	r0, 21182 <bt_l2cap_le_lookup_rx_cid+0x1e>
   21168:	3808      	subs	r0, #8
   2116a:	b900      	cbnz	r0, 2116e <bt_l2cap_le_lookup_rx_cid+0xa>
   2116c:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2116e:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   21172:	428b      	cmp	r3, r1
   21174:	d005      	beq.n	21182 <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   21176:	f110 0308 	adds.w	r3, r0, #8
   2117a:	d001      	beq.n	21180 <bt_l2cap_le_lookup_rx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2117c:	6880      	ldr	r0, [r0, #8]
   2117e:	e7f2      	b.n	21166 <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   21180:	4618      	mov	r0, r3
}
   21182:	4770      	bx	lr

00021184 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   21184:	4770      	bx	lr

00021186 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   21186:	4603      	mov	r3, r0
Z_GENLIST_IS_EMPTY(slist)
   21188:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   2118a:	b128      	cbz	r0, 21198 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2118c:	6859      	ldr	r1, [r3, #4]
   2118e:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   21190:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   21192:	4288      	cmp	r0, r1
	list->tail = node;
   21194:	bf08      	it	eq
   21196:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   21198:	4770      	bx	lr

0002119a <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2119a:	4603      	mov	r3, r0
   2119c:	6800      	ldr	r0, [r0, #0]
   2119e:	2200      	movs	r2, #0
   211a0:	b900      	cbnz	r0, 211a4 <sys_slist_find_and_remove+0xa>
   211a2:	4770      	bx	lr
   211a4:	4288      	cmp	r0, r1
   211a6:	d110      	bne.n	211ca <sys_slist_find_and_remove+0x30>
Z_GENLIST_REMOVE(slist, snode)
   211a8:	6808      	ldr	r0, [r1, #0]
   211aa:	b942      	cbnz	r2, 211be <sys_slist_find_and_remove+0x24>
   211ac:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   211ae:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   211b0:	4291      	cmp	r1, r2
   211b2:	d100      	bne.n	211b6 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   211b4:	6058      	str	r0, [r3, #4]
	parent->next = child;
   211b6:	2300      	movs	r3, #0
   211b8:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   211ba:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   211bc:	4770      	bx	lr
	parent->next = child;
   211be:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   211c0:	6858      	ldr	r0, [r3, #4]
   211c2:	4281      	cmp	r1, r0
	list->tail = node;
   211c4:	bf08      	it	eq
   211c6:	605a      	streq	r2, [r3, #4]
}
   211c8:	e7f5      	b.n	211b6 <sys_slist_find_and_remove+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   211ca:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   211cc:	6800      	ldr	r0, [r0, #0]
   211ce:	e7e7      	b.n	211a0 <sys_slist_find_and_remove+0x6>

000211d0 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   211d0:	4603      	mov	r3, r0
	size_t bytes = 0;
   211d2:	2000      	movs	r0, #0

	while (buf) {
   211d4:	b903      	cbnz	r3, 211d8 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   211d6:	4770      	bx	lr
		bytes += buf->len;
   211d8:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   211da:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   211dc:	4410      	add	r0, r2
		buf = buf->frags;
   211de:	e7f9      	b.n	211d4 <net_buf_frags_len+0x4>

000211e0 <att_sent>:
	if (chan->ops->sent) {
   211e0:	684b      	ldr	r3, [r1, #4]
   211e2:	695b      	ldr	r3, [r3, #20]
{
   211e4:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   211e6:	b103      	cbz	r3, 211ea <att_sent+0xa>
		chan->ops->sent(chan);
   211e8:	4718      	bx	r3
}
   211ea:	4770      	bx	lr

000211ec <attr_read_type_cb>:
{
   211ec:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   211ee:	68d4      	ldr	r4, [r2, #12]
   211f0:	7823      	ldrb	r3, [r4, #0]
   211f2:	3102      	adds	r1, #2
   211f4:	b913      	cbnz	r3, 211fc <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   211f6:	7021      	strb	r1, [r4, #0]
	return true;
   211f8:	2001      	movs	r0, #1
   211fa:	e006      	b.n	2120a <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   211fc:	428b      	cmp	r3, r1
   211fe:	d0fb      	beq.n	211f8 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   21200:	8983      	ldrh	r3, [r0, #12]
   21202:	3b02      	subs	r3, #2
   21204:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   21206:	2000      	movs	r0, #0
   21208:	6110      	str	r0, [r2, #16]
}
   2120a:	bd10      	pop	{r4, pc}

0002120c <att_prepare_write_req>:
}
   2120c:	2006      	movs	r0, #6
   2120e:	4770      	bx	lr

00021210 <att_op_get_type>:
	switch (op) {
   21210:	281e      	cmp	r0, #30
   21212:	d816      	bhi.n	21242 <att_op_get_type+0x32>
   21214:	b308      	cbz	r0, 2125a <att_op_get_type+0x4a>
   21216:	1e43      	subs	r3, r0, #1
   21218:	2b1d      	cmp	r3, #29
   2121a:	d81e      	bhi.n	2125a <att_op_get_type+0x4a>
   2121c:	e8df f003 	tbb	[pc, r3]
   21220:	23172317 	.word	0x23172317
   21224:	23172317 	.word	0x23172317
   21228:	23172317 	.word	0x23172317
   2122c:	23172317 	.word	0x23172317
   21230:	1d172317 	.word	0x1d172317
   21234:	2317231d 	.word	0x2317231d
   21238:	1d191d17 	.word	0x1d191d17
   2123c:	0f1b      	.short	0x0f1b
   2123e:	2004      	movs	r0, #4
   21240:	4770      	bx	lr
   21242:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   21246:	2b52      	cmp	r3, #82	; 0x52
   21248:	d107      	bne.n	2125a <att_op_get_type+0x4a>
		return ATT_COMMAND;
   2124a:	2000      	movs	r0, #0
}
   2124c:	4770      	bx	lr
		return ATT_RESPONSE;
   2124e:	2002      	movs	r0, #2
   21250:	4770      	bx	lr
		return ATT_NOTIFICATION;
   21252:	2003      	movs	r0, #3
   21254:	4770      	bx	lr
		return ATT_INDICATION;
   21256:	2005      	movs	r0, #5
   21258:	4770      	bx	lr
		return ATT_COMMAND;
   2125a:	f010 0f40 	tst.w	r0, #64	; 0x40
   2125e:	bf0c      	ite	eq
   21260:	2006      	moveq	r0, #6
   21262:	2000      	movne	r0, #0
   21264:	4770      	bx	lr
		return ATT_REQUEST;
   21266:	2001      	movs	r0, #1
   21268:	4770      	bx	lr

0002126a <bt_gatt_foreach_attr>:
{
   2126a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2126c:	e9cd 2301 	strd	r2, r3, [sp, #4]
   21270:	2300      	movs	r3, #0
   21272:	9300      	str	r3, [sp, #0]
   21274:	461a      	mov	r2, r3
   21276:	f7e9 fd1d 	bl	acb4 <bt_gatt_foreach_attr_type>
}
   2127a:	b005      	add	sp, #20
   2127c:	f85d fb04 	ldr.w	pc, [sp], #4

00021280 <att_chan_read>:
{
   21280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21284:	4680      	mov	r8, r0
   21286:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   21288:	4610      	mov	r0, r2
{
   2128a:	4699      	mov	r9, r3
   2128c:	468b      	mov	fp, r1
   2128e:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   21290:	f7ff ff9e 	bl	211d0 <net_buf_frags_len>
   21294:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
   21298:	4283      	cmp	r3, r0
   2129a:	d97a      	bls.n	21392 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   2129c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   212a0:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   212a2:	4630      	mov	r0, r6
   212a4:	f001 f9a3 	bl	225ee <net_buf_frag_last>
	size_t len, total = 0;
   212a8:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   212ac:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   212ae:	4630      	mov	r0, r6
   212b0:	f7ff ff8e 	bl	211d0 <net_buf_frags_len>
   212b4:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
   212b8:	f105 0708 	add.w	r7, r5, #8
   212bc:	1a24      	subs	r4, r4, r0
   212be:	4638      	mov	r0, r7
   212c0:	f001 f9f3 	bl	226aa <net_buf_simple_tailroom>
   212c4:	4284      	cmp	r4, r0
   212c6:	d211      	bcs.n	212ec <att_chan_read+0x6c>
   212c8:	4630      	mov	r0, r6
   212ca:	f7ff ff81 	bl	211d0 <net_buf_frags_len>
   212ce:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   212d2:	1a24      	subs	r4, r4, r0
		if (!len) {
   212d4:	bb34      	cbnz	r4, 21324 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   212d6:	79b0      	ldrb	r0, [r6, #6]
   212d8:	f7f8 fe8c 	bl	19ff4 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   212dc:	2200      	movs	r2, #0
   212de:	2300      	movs	r3, #0
   212e0:	f001 f951 	bl	22586 <net_buf_alloc_fixed>
			if (!frag) {
   212e4:	4605      	mov	r5, r0
   212e6:	b930      	cbnz	r0, 212f6 <att_chan_read+0x76>
	return total;
   212e8:	4657      	mov	r7, sl
   212ea:	e02c      	b.n	21346 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   212ec:	4638      	mov	r0, r7
   212ee:	f001 f9dc 	bl	226aa <net_buf_simple_tailroom>
   212f2:	4604      	mov	r4, r0
   212f4:	e7ee      	b.n	212d4 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   212f6:	4601      	mov	r1, r0
   212f8:	4630      	mov	r0, r6
   212fa:	f001 f989 	bl	22610 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   212fe:	4630      	mov	r0, r6
   21300:	f7ff ff66 	bl	211d0 <net_buf_frags_len>
   21304:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   21308:	f105 0708 	add.w	r7, r5, #8
   2130c:	1a24      	subs	r4, r4, r0
   2130e:	4638      	mov	r0, r7
   21310:	f001 f9cb 	bl	226aa <net_buf_simple_tailroom>
   21314:	4284      	cmp	r4, r0
   21316:	d21a      	bcs.n	2134e <att_chan_read+0xce>
   21318:	4630      	mov	r0, r6
   2131a:	f7ff ff59 	bl	211d0 <net_buf_frags_len>
   2131e:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   21322:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   21324:	68a9      	ldr	r1, [r5, #8]
   21326:	89aa      	ldrh	r2, [r5, #12]
   21328:	f8db 7004 	ldr.w	r7, [fp, #4]
   2132c:	9803      	ldr	r0, [sp, #12]
   2132e:	f8cd 9000 	str.w	r9, [sp]
   21332:	440a      	add	r2, r1
   21334:	b2a3      	uxth	r3, r4
   21336:	4659      	mov	r1, fp
   21338:	47b8      	blx	r7
		if (read < 0) {
   2133a:	1e07      	subs	r7, r0, #0
   2133c:	da0c      	bge.n	21358 <att_chan_read+0xd8>
				return total;
   2133e:	f1ba 0f00 	cmp.w	sl, #0
   21342:	bf18      	it	ne
   21344:	4657      	movne	r7, sl
}
   21346:	4638      	mov	r0, r7
   21348:	b005      	add	sp, #20
   2134a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2134e:	4638      	mov	r0, r7
   21350:	f001 f9ab 	bl	226aa <net_buf_simple_tailroom>
   21354:	4604      	mov	r4, r0
   21356:	e7e5      	b.n	21324 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   21358:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2135a:	b993      	cbnz	r3, 21382 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   2135c:	4639      	mov	r1, r7
   2135e:	f105 0008 	add.w	r0, r5, #8
   21362:	f001 f966 	bl	22632 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   21366:	4630      	mov	r0, r6
   21368:	f7ff ff32 	bl	211d0 <net_buf_frags_len>
   2136c:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
		offset += read;
   21370:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   21372:	4283      	cmp	r3, r0
		total += read;
   21374:	44ba      	add	sl, r7
		offset += read;
   21376:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2137a:	d9b5      	bls.n	212e8 <att_chan_read+0x68>
   2137c:	42a7      	cmp	r7, r4
   2137e:	d096      	beq.n	212ae <att_chan_read+0x2e>
   21380:	e7b2      	b.n	212e8 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   21382:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   21384:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   21386:	4639      	mov	r1, r7
   21388:	4628      	mov	r0, r5
   2138a:	4798      	blx	r3
   2138c:	2800      	cmp	r0, #0
   2138e:	d1e5      	bne.n	2135c <att_chan_read+0xdc>
   21390:	e7aa      	b.n	212e8 <att_chan_read+0x68>
		return 0;
   21392:	2700      	movs	r7, #0
   21394:	e7d7      	b.n	21346 <att_chan_read+0xc6>

00021396 <attr_read_group_cb>:
	if (!data->rsp->len) {
   21396:	68d0      	ldr	r0, [r2, #12]
   21398:	7803      	ldrb	r3, [r0, #0]
   2139a:	3104      	adds	r1, #4
   2139c:	b913      	cbnz	r3, 213a4 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   2139e:	7001      	strb	r1, [r0, #0]
	return true;
   213a0:	2001      	movs	r0, #1
}
   213a2:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   213a4:	428b      	cmp	r3, r1
   213a6:	d0fb      	beq.n	213a0 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   213a8:	6891      	ldr	r1, [r2, #8]
   213aa:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   213ac:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   213ae:	3b04      	subs	r3, #4
   213b0:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   213b2:	6110      	str	r0, [r2, #16]
		return false;
   213b4:	4770      	bx	lr

000213b6 <chan_req_send>:
{
   213b6:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   213b8:	688e      	ldr	r6, [r1, #8]
{
   213ba:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   213bc:	4630      	mov	r0, r6
{
   213be:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   213c0:	f7ff ff06 	bl	211d0 <net_buf_frags_len>
   213c4:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
   213c8:	4283      	cmp	r3, r0
   213ca:	d30a      	bcc.n	213e2 <chan_req_send+0x2c>
	req->buf = NULL;
   213cc:	2200      	movs	r2, #0
	chan->req = req;
   213ce:	f8c5 10cc 	str.w	r1, [r5, #204]	; 0xcc
	err = chan_send(chan, buf, NULL);
   213d2:	4628      	mov	r0, r5
	req->buf = NULL;
   213d4:	608a      	str	r2, [r1, #8]
	err = chan_send(chan, buf, NULL);
   213d6:	4631      	mov	r1, r6
   213d8:	f7e8 fadc 	bl	9994 <chan_send>
	if (err) {
   213dc:	b100      	cbz	r0, 213e0 <chan_req_send+0x2a>
		req->buf = buf;
   213de:	60a6      	str	r6, [r4, #8]
}
   213e0:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   213e2:	f06f 0079 	mvn.w	r0, #121	; 0x79
   213e6:	e7fb      	b.n	213e0 <chan_req_send+0x2a>

000213e8 <process_queue>:
{
   213e8:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   213ea:	2200      	movs	r2, #0
{
   213ec:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   213ee:	2300      	movs	r3, #0
   213f0:	4608      	mov	r0, r1
{
   213f2:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   213f4:	f001 f8cc 	bl	22590 <net_buf_get>
	if (buf) {
   213f8:	4605      	mov	r5, r0
   213fa:	b160      	cbz	r0, 21416 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   213fc:	4601      	mov	r1, r0
   213fe:	2200      	movs	r2, #0
   21400:	4620      	mov	r0, r4
   21402:	f7e8 fac7 	bl	9994 <chan_send>
		if (err) {
   21406:	4604      	mov	r4, r0
   21408:	b118      	cbz	r0, 21412 <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   2140a:	4629      	mov	r1, r5
   2140c:	4630      	mov	r0, r6
   2140e:	f001 fd00 	bl	22e12 <k_queue_prepend>
}
   21412:	4620      	mov	r0, r4
   21414:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   21416:	f06f 0401 	mvn.w	r4, #1
   2141a:	e7fa      	b.n	21412 <process_queue+0x2a>

0002141c <find_info_cb>:
{
   2141c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   2141e:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   21420:	6816      	ldr	r6, [r2, #0]
{
   21422:	4605      	mov	r5, r0
   21424:	460f      	mov	r7, r1
   21426:	4614      	mov	r4, r2
	if (!data->rsp) {
   21428:	b963      	cbnz	r3, 21444 <find_info_cb+0x28>
   2142a:	6850      	ldr	r0, [r2, #4]
   2142c:	2101      	movs	r1, #1
   2142e:	3008      	adds	r0, #8
   21430:	f001 f8ff 	bl	22632 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   21434:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   21436:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   21438:	781b      	ldrb	r3, [r3, #0]
   2143a:	2b00      	cmp	r3, #0
   2143c:	bf0c      	ite	eq
   2143e:	2301      	moveq	r3, #1
   21440:	2302      	movne	r3, #2
   21442:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   21444:	68a3      	ldr	r3, [r4, #8]
   21446:	781b      	ldrb	r3, [r3, #0]
   21448:	2b01      	cmp	r3, #1
   2144a:	d003      	beq.n	21454 <find_info_cb+0x38>
   2144c:	2b02      	cmp	r3, #2
   2144e:	d019      	beq.n	21484 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   21450:	2000      	movs	r0, #0
   21452:	e016      	b.n	21482 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   21454:	682b      	ldr	r3, [r5, #0]
   21456:	781b      	ldrb	r3, [r3, #0]
   21458:	2b00      	cmp	r3, #0
   2145a:	d1f9      	bne.n	21450 <find_info_cb+0x34>
   2145c:	6860      	ldr	r0, [r4, #4]
   2145e:	2104      	movs	r1, #4
   21460:	3008      	adds	r0, #8
   21462:	f001 f8e6 	bl	22632 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   21466:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   21468:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2146a:	885b      	ldrh	r3, [r3, #2]
   2146c:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   2146e:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   21470:	8007      	strh	r7, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   21472:	899b      	ldrh	r3, [r3, #12]
   21474:	f8b6 005e 	ldrh.w	r0, [r6, #94]	; 0x5e
   21478:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   2147a:	2804      	cmp	r0, #4
   2147c:	bf94      	ite	ls
   2147e:	2000      	movls	r0, #0
   21480:	2001      	movhi	r0, #1
}
   21482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   21484:	682b      	ldr	r3, [r5, #0]
   21486:	781b      	ldrb	r3, [r3, #0]
   21488:	2b02      	cmp	r3, #2
   2148a:	d1e1      	bne.n	21450 <find_info_cb+0x34>
   2148c:	6860      	ldr	r0, [r4, #4]
   2148e:	2112      	movs	r1, #18
   21490:	3008      	adds	r0, #8
   21492:	f001 f8ce 	bl	22632 <net_buf_simple_add>
   21496:	4603      	mov	r3, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   21498:	682a      	ldr	r2, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   2149a:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   2149c:	f823 7b02 	strh.w	r7, [r3], #2
   214a0:	1c51      	adds	r1, r2, #1
   214a2:	3211      	adds	r2, #17
   214a4:	f851 0b04 	ldr.w	r0, [r1], #4
   214a8:	f843 0b04 	str.w	r0, [r3], #4
   214ac:	4291      	cmp	r1, r2
   214ae:	d1f9      	bne.n	214a4 <find_info_cb+0x88>
		if (chan->chan.tx.mtu - data->buf->len >
   214b0:	6863      	ldr	r3, [r4, #4]
   214b2:	f8b6 005e 	ldrh.w	r0, [r6, #94]	; 0x5e
   214b6:	899b      	ldrh	r3, [r3, #12]
   214b8:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   214ba:	2812      	cmp	r0, #18
   214bc:	e7de      	b.n	2147c <find_info_cb+0x60>

000214be <att_exec_write_req>:
   214be:	2006      	movs	r0, #6
   214c0:	4770      	bx	lr

000214c2 <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   214c2:	30c8      	adds	r0, #200	; 0xc8
   214c4:	f3bf 8f5b 	dmb	ish
   214c8:	e850 3f00 	ldrex	r3, [r0]
   214cc:	f023 0301 	bic.w	r3, r3, #1
   214d0:	e840 3200 	strex	r2, r3, [r0]
   214d4:	2a00      	cmp	r2, #0
   214d6:	d1f7      	bne.n	214c8 <chan_rsp_sent+0x6>
   214d8:	f3bf 8f5b 	dmb	ish
}
   214dc:	4770      	bx	lr

000214de <chan_cfm_sent>:
   214de:	30c8      	adds	r0, #200	; 0xc8
   214e0:	f3bf 8f5b 	dmb	ish
   214e4:	e850 3f00 	ldrex	r3, [r0]
   214e8:	f023 0302 	bic.w	r3, r3, #2
   214ec:	e840 3200 	strex	r2, r3, [r0]
   214f0:	2a00      	cmp	r2, #0
   214f2:	d1f7      	bne.n	214e4 <chan_cfm_sent+0x6>
   214f4:	f3bf 8f5b 	dmb	ish
}
   214f8:	4770      	bx	lr

000214fa <bt_att_status>:
{
   214fa:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   214fc:	f3bf 8f5b 	dmb	ish
   21500:	680b      	ldr	r3, [r1, #0]
   21502:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   21506:	07db      	lsls	r3, r3, #31
{
   21508:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   2150a:	d519      	bpl.n	21540 <bt_att_status+0x46>
	if (!chan->att) {
   2150c:	f850 0c08 	ldr.w	r0, [r0, #-8]
   21510:	b1b0      	cbz	r0, 21540 <bt_att_status+0x46>
	if (chan->req) {
   21512:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
   21516:	b99b      	cbnz	r3, 21540 <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   21518:	3004      	adds	r0, #4
   2151a:	f7ff fe34 	bl	21186 <sys_slist_get>
	if (!node) {
   2151e:	4604      	mov	r4, r0
   21520:	b170      	cbz	r0, 21540 <bt_att_status+0x46>
	return chan_req_send(chan, req);
   21522:	4601      	mov	r1, r0
   21524:	f1a5 0008 	sub.w	r0, r5, #8
   21528:	f7ff ff45 	bl	213b6 <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2152c:	2800      	cmp	r0, #0
   2152e:	da07      	bge.n	21540 <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   21530:	f855 3c08 	ldr.w	r3, [r5, #-8]
Z_GENLIST_PREPEND(slist, snode)
   21534:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   21536:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   21538:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   2153a:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2153c:	b902      	cbnz	r2, 21540 <bt_att_status+0x46>
	list->tail = node;
   2153e:	609c      	str	r4, [r3, #8]
}
   21540:	bd38      	pop	{r3, r4, r5, pc}

00021542 <att_req_send_process>:
{
   21542:	b570      	push	{r4, r5, r6, lr}
   21544:	4605      	mov	r5, r0
	node = sys_slist_get(&att->reqs);
   21546:	3004      	adds	r0, #4
   21548:	f7ff fe1d 	bl	21186 <sys_slist_get>
	if (!node) {
   2154c:	4606      	mov	r6, r0
   2154e:	b1c0      	cbz	r0, 21582 <att_req_send_process+0x40>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21550:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   21552:	b153      	cbz	r3, 2156a <att_req_send_process+0x28>
   21554:	f5b3 708e 	subs.w	r0, r3, #284	; 0x11c
   21558:	d007      	beq.n	2156a <att_req_send_process+0x28>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2155a:	681c      	ldr	r4, [r3, #0]
   2155c:	b10c      	cbz	r4, 21562 <att_req_send_process+0x20>
   2155e:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
		if (!chan->req) {
   21562:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   21566:	b13b      	cbz	r3, 21578 <att_req_send_process+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21568:	b964      	cbnz	r4, 21584 <att_req_send_process+0x42>
Z_GENLIST_PREPEND(slist, snode)
   2156a:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   2156c:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   2156e:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   21570:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   21572:	b933      	cbnz	r3, 21582 <att_req_send_process+0x40>
	list->tail = node;
   21574:	60ae      	str	r6, [r5, #8]
}
   21576:	e004      	b.n	21582 <att_req_send_process+0x40>
	return chan_req_send(chan, req);
   21578:	4631      	mov	r1, r6
   2157a:	f7ff ff1c 	bl	213b6 <chan_req_send>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2157e:	2800      	cmp	r0, #0
   21580:	dbf2      	blt.n	21568 <att_req_send_process+0x26>
}
   21582:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   21584:	f514 738e 	adds.w	r3, r4, #284	; 0x11c
   21588:	d004      	beq.n	21594 <att_req_send_process+0x52>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2158a:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2158e:	b10b      	cbz	r3, 21594 <att_req_send_process+0x52>
   21590:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
{
   21594:	4620      	mov	r0, r4
   21596:	461c      	mov	r4, r3
   21598:	e7e3      	b.n	21562 <att_req_send_process+0x20>

0002159a <write_cb>:
{
   2159a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2159c:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   2159e:	4601      	mov	r1, r0
{
   215a0:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   215a2:	222a      	movs	r2, #42	; 0x2a
   215a4:	6820      	ldr	r0, [r4, #0]
   215a6:	f000 fb86 	bl	21cb6 <bt_gatt_check_perm>
   215aa:	4605      	mov	r5, r0
   215ac:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   215ae:	bb00      	cbnz	r0, 215f2 <write_cb+0x58>
	if (!data->req) {
   215b0:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   215b2:	68b7      	ldr	r7, [r6, #8]
   215b4:	68e2      	ldr	r2, [r4, #12]
   215b6:	6820      	ldr	r0, [r4, #0]
	if (!data->req) {
   215b8:	2b00      	cmp	r3, #0
		flags |= BT_GATT_WRITE_FLAG_CMD;
   215ba:	bf14      	ite	ne
   215bc:	2300      	movne	r3, #0
   215be:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   215c0:	9301      	str	r3, [sp, #4]
   215c2:	8a63      	ldrh	r3, [r4, #18]
   215c4:	9300      	str	r3, [sp, #0]
   215c6:	4631      	mov	r1, r6
   215c8:	8a23      	ldrh	r3, [r4, #16]
   215ca:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   215cc:	1e03      	subs	r3, r0, #0
   215ce:	db05      	blt.n	215dc <write_cb+0x42>
   215d0:	8a22      	ldrh	r2, [r4, #16]
   215d2:	4293      	cmp	r3, r2
   215d4:	d10b      	bne.n	215ee <write_cb+0x54>
	data->err = 0U;
   215d6:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   215d8:	2501      	movs	r5, #1
   215da:	e005      	b.n	215e8 <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   215dc:	f113 0fff 	cmn.w	r3, #255	; 0xff
   215e0:	d305      	bcc.n	215ee <write_cb+0x54>
		return -err;
   215e2:	425b      	negs	r3, r3
   215e4:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   215e6:	7523      	strb	r3, [r4, #20]
}
   215e8:	4628      	mov	r0, r5
   215ea:	b003      	add	sp, #12
   215ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   215ee:	230e      	movs	r3, #14
   215f0:	e7f9      	b.n	215e6 <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   215f2:	2500      	movs	r5, #0
   215f4:	e7f8      	b.n	215e8 <write_cb+0x4e>

000215f6 <bt_att_sent>:
{
   215f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   215f8:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
	struct bt_att *att = chan->att;
   215fc:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   21600:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   21602:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   21606:	b10b      	cbz	r3, 2160c <bt_att_sent+0x16>
		chan->sent(chan);
   21608:	4638      	mov	r0, r7
   2160a:	4798      	blx	r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2160c:	f3bf 8f5b 	dmb	ish
   21610:	f105 03c0 	add.w	r3, r5, #192	; 0xc0
   21614:	e853 2f00 	ldrex	r2, [r3]
   21618:	f022 0210 	bic.w	r2, r2, #16
   2161c:	e843 2100 	strex	r1, r2, [r3]
   21620:	2900      	cmp	r1, #0
   21622:	d1f7      	bne.n	21614 <bt_att_sent+0x1e>
   21624:	f3bf 8f5b 	dmb	ish
	if (!att) {
   21628:	b30c      	cbz	r4, 2166e <bt_att_sent+0x78>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   2162a:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
   2162e:	b98b      	cbnz	r3, 21654 <bt_att_sent+0x5e>
   21630:	6863      	ldr	r3, [r4, #4]
   21632:	b17b      	cbz	r3, 21654 <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   21634:	1d20      	adds	r0, r4, #4
   21636:	f7ff fda6 	bl	21186 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2163a:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2163c:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2163e:	4638      	mov	r0, r7
   21640:	f7ff feb9 	bl	213b6 <chan_req_send>
   21644:	2800      	cmp	r0, #0
   21646:	da12      	bge.n	2166e <bt_att_sent+0x78>
Z_GENLIST_PREPEND(slist, snode)
   21648:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   2164a:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   2164c:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   2164e:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   21650:	b903      	cbnz	r3, 21654 <bt_att_sent+0x5e>
	list->tail = node;
   21652:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   21654:	f105 01c8 	add.w	r1, r5, #200	; 0xc8
   21658:	4638      	mov	r0, r7
   2165a:	f7ff fec5 	bl	213e8 <process_queue>
	if (!err) {
   2165e:	b130      	cbz	r0, 2166e <bt_att_sent+0x78>
	(void)process_queue(chan, &att->tx_queue);
   21660:	f104 010c 	add.w	r1, r4, #12
   21664:	4638      	mov	r0, r7
}
   21666:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   2166a:	f7ff bebd 	b.w	213e8 <process_queue>
}
   2166e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00021670 <read_cb>:
{
   21670:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   21674:	f8d2 8000 	ldr.w	r8, [r2]
{
   21678:	4606      	mov	r6, r0
	data->err = 0x00;
   2167a:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   2167c:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   21680:	7317      	strb	r7, [r2, #12]
{
   21682:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   21684:	4631      	mov	r1, r6
   21686:	2215      	movs	r2, #21
   21688:	f000 fb15 	bl	21cb6 <bt_gatt_check_perm>
   2168c:	4604      	mov	r4, r0
   2168e:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   21690:	b9a0      	cbnz	r0, 216bc <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   21692:	e9cd 0000 	strd	r0, r0, [sp]
   21696:	88ab      	ldrh	r3, [r5, #4]
   21698:	68aa      	ldr	r2, [r5, #8]
   2169a:	4631      	mov	r1, r6
   2169c:	4640      	mov	r0, r8
   2169e:	f7ff fdef 	bl	21280 <att_chan_read>
	if (ret < 0) {
   216a2:	1e03      	subs	r3, r0, #0
   216a4:	da0c      	bge.n	216c0 <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   216a6:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   216aa:	bf26      	itte	cs
   216ac:	425b      	negcs	r3, r3
   216ae:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   216b0:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   216b2:	732b      	strb	r3, [r5, #12]
}
   216b4:	4620      	mov	r0, r4
   216b6:	b002      	add	sp, #8
   216b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   216bc:	463c      	mov	r4, r7
   216be:	e7f9      	b.n	216b4 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   216c0:	2401      	movs	r4, #1
   216c2:	e7f7      	b.n	216b4 <read_cb+0x44>

000216c4 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   216c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   216c8:	4688      	mov	r8, r1
   216ca:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   216cc:	2101      	movs	r1, #1
   216ce:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   216d0:	4605      	mov	r5, r0
   216d2:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   216d4:	f7e8 fafc 	bl	9cd0 <bt_att_chan_create_pdu>
	if (!buf) {
   216d8:	4604      	mov	r4, r0
   216da:	b170      	cbz	r0, 216fa <send_err_rsp.part.0+0x36>
   216dc:	2104      	movs	r1, #4
   216de:	3008      	adds	r0, #8
   216e0:	f000 ffa7 	bl	22632 <net_buf_simple_add>
	rsp->request = req;
   216e4:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   216e8:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   216ea:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   216ee:	4621      	mov	r1, r4
   216f0:	4628      	mov	r0, r5
}
   216f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   216f6:	f7e8 ba01 	b.w	9afc <bt_att_chan_send_rsp.constprop.0>
}
   216fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000216fe <att_read_blob_req>:
{
   216fe:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   21700:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   21702:	8813      	ldrh	r3, [r2, #0]
   21704:	8852      	ldrh	r2, [r2, #2]
   21706:	9200      	str	r2, [sp, #0]
   21708:	210c      	movs	r1, #12
   2170a:	220d      	movs	r2, #13
   2170c:	f7e8 fd2a 	bl	a164 <att_read_rsp>
}
   21710:	b003      	add	sp, #12
   21712:	f85d fb04 	ldr.w	pc, [sp], #4

00021716 <att_read_req>:
{
   21716:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   21718:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   2171a:	2200      	movs	r2, #0
   2171c:	881b      	ldrh	r3, [r3, #0]
   2171e:	9200      	str	r2, [sp, #0]
   21720:	210a      	movs	r1, #10
   21722:	220b      	movs	r2, #11
   21724:	f7e8 fd1e 	bl	a164 <att_read_rsp>
}
   21728:	b003      	add	sp, #12
   2172a:	f85d fb04 	ldr.w	pc, [sp], #4

0002172e <att_mtu_req>:
{
   2172e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   21730:	6803      	ldr	r3, [r0, #0]
{
   21732:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   21734:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21736:	f3bf 8f5b 	dmb	ish
   2173a:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
   2173e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   21742:	f3c3 04c0 	ubfx	r4, r3, #3, #1
   21746:	071b      	lsls	r3, r3, #28
   21748:	d41d      	bmi.n	21786 <att_mtu_req+0x58>
	mtu_client = sys_le16_to_cpu(req->mtu);
   2174a:	688b      	ldr	r3, [r1, #8]
   2174c:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   2174e:	2e16      	cmp	r6, #22
   21750:	d91b      	bls.n	2178a <att_mtu_req+0x5c>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   21752:	2202      	movs	r2, #2
   21754:	2103      	movs	r1, #3
   21756:	f7e8 fc09 	bl	9f6c <bt_att_create_pdu>
	if (!pdu) {
   2175a:	4607      	mov	r7, r0
   2175c:	b1b8      	cbz	r0, 2178e <att_mtu_req+0x60>
   2175e:	2102      	movs	r1, #2
   21760:	3008      	adds	r0, #8
   21762:	f000 ff66 	bl	22632 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   21766:	2341      	movs	r3, #65	; 0x41
   21768:	7003      	strb	r3, [r0, #0]
   2176a:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   2176c:	4639      	mov	r1, r7
   2176e:	4628      	mov	r0, r5
   21770:	f7e8 f9c4 	bl	9afc <bt_att_chan_send_rsp.constprop.0>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   21774:	2e41      	cmp	r6, #65	; 0x41
   21776:	bf28      	it	cs
   21778:	2641      	movcs	r6, #65	; 0x41
   2177a:	f8a5 6052 	strh.w	r6, [r5, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   2177e:	f8a5 605e 	strh.w	r6, [r5, #94]	; 0x5e
	return 0;
   21782:	4620      	mov	r0, r4
}
   21784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   21786:	2006      	movs	r0, #6
   21788:	e7fc      	b.n	21784 <att_mtu_req+0x56>
		return BT_ATT_ERR_INVALID_PDU;
   2178a:	2004      	movs	r0, #4
   2178c:	e7fa      	b.n	21784 <att_mtu_req+0x56>
		return BT_ATT_ERR_UNLIKELY;
   2178e:	200e      	movs	r0, #14
   21790:	e7f8      	b.n	21784 <att_mtu_req+0x56>

00021792 <bt_att_init>:
	bt_gatt_init();
   21792:	f7e9 ba0b 	b.w	abac <bt_gatt_init>

00021796 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   21796:	898a      	ldrh	r2, [r1, #12]
   21798:	6889      	ldr	r1, [r1, #8]
   2179a:	2300      	movs	r3, #0
   2179c:	f7e8 be54 	b.w	a448 <att_handle_rsp>

000217a0 <bt_att_encrypt_change>:
	if (!att_chan->att) {
   217a0:	f850 3c08 	ldr.w	r3, [r0, #-8]
{
   217a4:	b570      	push	{r4, r5, r6, lr}
   217a6:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   217a8:	f1a0 0608 	sub.w	r6, r0, #8
	if (!att_chan->att) {
   217ac:	2b00      	cmp	r3, #0
   217ae:	d037      	beq.n	21820 <bt_att_encrypt_change+0x80>
	if (hci_status) {
   217b0:	b171      	cbz	r1, 217d0 <bt_att_encrypt_change+0x30>
		if (att_chan->req && att_chan->req->retrying) {
   217b2:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
   217b6:	2b00      	cmp	r3, #0
   217b8:	d032      	beq.n	21820 <bt_att_encrypt_change+0x80>
   217ba:	7c1b      	ldrb	r3, [r3, #16]
   217bc:	07da      	lsls	r2, r3, #31
   217be:	d52f      	bpl.n	21820 <bt_att_encrypt_change+0x80>
		return BT_ATT_ERR_AUTHENTICATION;
   217c0:	2305      	movs	r3, #5
		att_handle_rsp(att_chan, NULL, 0, err);
   217c2:	2200      	movs	r2, #0
   217c4:	4630      	mov	r0, r6
   217c6:	4611      	mov	r1, r2
}
   217c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   217cc:	f7e8 be3c 	b.w	a448 <att_handle_rsp>
	struct bt_conn *conn = ch->chan.conn;
   217d0:	6805      	ldr	r5, [r0, #0]
	bt_gatt_encrypt_change(conn);
   217d2:	4628      	mov	r0, r5
   217d4:	f7e9 fce2 	bl	b19c <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   217d8:	7a6b      	ldrb	r3, [r5, #9]
   217da:	2b01      	cmp	r3, #1
   217dc:	d020      	beq.n	21820 <bt_att_encrypt_change+0x80>
	if (!(att_chan->req && att_chan->req->retrying)) {
   217de:	f8d4 40c4 	ldr.w	r4, [r4, #196]	; 0xc4
   217e2:	b1ec      	cbz	r4, 21820 <bt_att_encrypt_change+0x80>
   217e4:	7c23      	ldrb	r3, [r4, #16]
   217e6:	07db      	lsls	r3, r3, #31
   217e8:	d51a      	bpl.n	21820 <bt_att_encrypt_change+0x80>
	if (!req->encode) {
   217ea:	68e3      	ldr	r3, [r4, #12]
   217ec:	2b00      	cmp	r3, #0
   217ee:	d0e7      	beq.n	217c0 <bt_att_encrypt_change+0x20>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   217f0:	6962      	ldr	r2, [r4, #20]
   217f2:	7c61      	ldrb	r1, [r4, #17]
   217f4:	4630      	mov	r0, r6
   217f6:	f7e8 fa6b 	bl	9cd0 <bt_att_chan_create_pdu>
	if (!buf) {
   217fa:	4605      	mov	r5, r0
   217fc:	b140      	cbz	r0, 21810 <bt_att_encrypt_change+0x70>
	if (req->encode(buf, req->len, req->user_data)) {
   217fe:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
   21802:	68e3      	ldr	r3, [r4, #12]
   21804:	4798      	blx	r3
   21806:	4602      	mov	r2, r0
   21808:	b120      	cbz	r0, 21814 <bt_att_encrypt_change+0x74>
		net_buf_unref(buf);
   2180a:	4628      	mov	r0, r5
   2180c:	f7f8 fcae 	bl	1a16c <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   21810:	230e      	movs	r3, #14
   21812:	e7d6      	b.n	217c2 <bt_att_encrypt_change+0x22>
	if (chan_send(att_chan, buf, NULL)) {
   21814:	4629      	mov	r1, r5
   21816:	4630      	mov	r0, r6
   21818:	f7e8 f8bc 	bl	9994 <chan_send>
   2181c:	2800      	cmp	r0, #0
   2181e:	d1f4      	bne.n	2180a <bt_att_encrypt_change+0x6a>
}
   21820:	bd70      	pop	{r4, r5, r6, pc}

00021822 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   21822:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   21826:	4607      	mov	r7, r0
   21828:	460d      	mov	r5, r1
   2182a:	4616      	mov	r6, r2
   2182c:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   2182e:	f7e8 f925 	bl	9a7c <att_get>
	if (!att) {
   21832:	4604      	mov	r4, r0
   21834:	b938      	cbnz	r0, 21846 <bt_att_send+0x24>
		net_buf_unref(buf);
   21836:	4628      	mov	r0, r5
   21838:	f7f8 fc98 	bl	1a16c <net_buf_unref>
		return -ENOTCONN;
   2183c:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   21840:	b002      	add	sp, #8
   21842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   21846:	b146      	cbz	r6, 2185a <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   21848:	f8cd 8000 	str.w	r8, [sp]
   2184c:	4633      	mov	r3, r6
   2184e:	462a      	mov	r2, r5
   21850:	2104      	movs	r1, #4
   21852:	4638      	mov	r0, r7
   21854:	f7ff fc5d 	bl	21112 <bt_l2cap_send_cb>
   21858:	e7f2      	b.n	21840 <bt_att_send+0x1e>
	net_buf_put(&att->tx_queue, buf);
   2185a:	f100 060c 	add.w	r6, r0, #12
   2185e:	4629      	mov	r1, r5
   21860:	4630      	mov	r0, r6
   21862:	f000 feb3 	bl	225cc <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   21866:	2200      	movs	r2, #0
   21868:	2300      	movs	r3, #0
   2186a:	4630      	mov	r0, r6
   2186c:	f000 fe90 	bl	22590 <net_buf_get>
	if (!buf) {
   21870:	4605      	mov	r5, r0
   21872:	b908      	cbnz	r0, 21878 <bt_att_send+0x56>
	return 0;
   21874:	2000      	movs	r0, #0
   21876:	e7e3      	b.n	21840 <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21878:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2187a:	b1c3      	cbz	r3, 218ae <bt_att_send+0x8c>
   2187c:	f5b3 708e 	subs.w	r0, r3, #284	; 0x11c
   21880:	d015      	beq.n	218ae <bt_att_send+0x8c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21882:	681c      	ldr	r4, [r3, #0]
   21884:	b10c      	cbz	r4, 2188a <bt_att_send+0x68>
   21886:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
	return chan_send(chan, buf, cb);
   2188a:	2200      	movs	r2, #0
   2188c:	4629      	mov	r1, r5
   2188e:	f7e8 f881 	bl	9994 <chan_send>
		if (err >= 0) {
   21892:	2800      	cmp	r0, #0
   21894:	daee      	bge.n	21874 <bt_att_send+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21896:	b154      	cbz	r4, 218ae <bt_att_send+0x8c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   21898:	f514 738e 	adds.w	r3, r4, #284	; 0x11c
   2189c:	d004      	beq.n	218a8 <bt_att_send+0x86>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2189e:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   218a2:	b10b      	cbz	r3, 218a8 <bt_att_send+0x86>
   218a4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
{
   218a8:	4620      	mov	r0, r4
   218aa:	461c      	mov	r4, r3
   218ac:	e7ed      	b.n	2188a <bt_att_send+0x68>
		k_queue_prepend(&att->tx_queue._queue, buf);
   218ae:	4629      	mov	r1, r5
   218b0:	4630      	mov	r0, r6
   218b2:	f001 faae 	bl	22e12 <k_queue_prepend>
   218b6:	e7dd      	b.n	21874 <bt_att_send+0x52>

000218b8 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   218b8:	b510      	push	{r4, lr}
   218ba:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   218bc:	f7e8 f8de 	bl	9a7c <att_get>
	if (!att) {
   218c0:	b160      	cbz	r0, 218dc <bt_att_req_send+0x24>
	parent->next = child;
   218c2:	2300      	movs	r3, #0
   218c4:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   218c6:	6883      	ldr	r3, [r0, #8]
   218c8:	b92b      	cbnz	r3, 218d6 <bt_att_req_send+0x1e>
	list->head = node;
   218ca:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   218ce:	f7ff fe38 	bl	21542 <att_req_send_process>

	return 0;
   218d2:	2000      	movs	r0, #0
}
   218d4:	bd10      	pop	{r4, pc}
	parent->next = child;
   218d6:	601c      	str	r4, [r3, #0]
	list->tail = node;
   218d8:	6084      	str	r4, [r0, #8]
}
   218da:	e7f8      	b.n	218ce <bt_att_req_send+0x16>
		return -ENOTCONN;
   218dc:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   218e0:	e7f8      	b.n	218d4 <bt_att_req_send+0x1c>

000218e2 <gatt_ccc_changed>:
{
   218e2:	460b      	mov	r3, r1
   218e4:	8909      	ldrh	r1, [r1, #8]
   218e6:	8a5a      	ldrh	r2, [r3, #18]
   218e8:	4291      	cmp	r1, r2
   218ea:	bf38      	it	cc
   218ec:	4611      	movcc	r1, r2
	if (value != ccc->value) {
   218ee:	8a9a      	ldrh	r2, [r3, #20]
   218f0:	428a      	cmp	r2, r1
   218f2:	d003      	beq.n	218fc <gatt_ccc_changed+0x1a>
		ccc->value = value;
   218f4:	8299      	strh	r1, [r3, #20]
		if (ccc->cfg_changed) {
   218f6:	699b      	ldr	r3, [r3, #24]
   218f8:	b103      	cbz	r3, 218fc <gatt_ccc_changed+0x1a>
			ccc->cfg_changed(attr, value);
   218fa:	4718      	bx	r3
}
   218fc:	4770      	bx	lr

000218fe <gatt_indicate_rsp>:
{
   218fe:	b510      	push	{r4, lr}
   21900:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   21902:	68a3      	ldr	r3, [r4, #8]
{
   21904:	460a      	mov	r2, r1
	if (params->func) {
   21906:	b10b      	cbz	r3, 2190c <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   21908:	4621      	mov	r1, r4
   2190a:	4798      	blx	r3
	params->_ref--;
   2190c:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2190e:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   21910:	3b01      	subs	r3, #1
   21912:	b2db      	uxtb	r3, r3
   21914:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   21916:	b122      	cbz	r2, 21922 <gatt_indicate_rsp+0x24>
   21918:	b91b      	cbnz	r3, 21922 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   2191a:	4620      	mov	r0, r4
}
   2191c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   21920:	4710      	bx	r2
}
   21922:	bd10      	pop	{r4, pc}

00021924 <match_uuid>:
	data->attr = attr;
   21924:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   21926:	8091      	strh	r1, [r2, #4]
}
   21928:	2000      	movs	r0, #0
   2192a:	4770      	bx	lr

0002192c <gen_hash_m>:
{
   2192c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2192e:	6807      	ldr	r7, [r0, #0]
   21930:	783d      	ldrb	r5, [r7, #0]
{
   21932:	b089      	sub	sp, #36	; 0x24
   21934:	4606      	mov	r6, r0
   21936:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   21938:	b10d      	cbz	r5, 2193e <gen_hash_m+0x12>
	switch (u16->val) {
   2193a:	2501      	movs	r5, #1
   2193c:	e014      	b.n	21968 <gen_hash_m+0x3c>
   2193e:	887b      	ldrh	r3, [r7, #2]
   21940:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   21944:	d004      	beq.n	21950 <gen_hash_m+0x24>
   21946:	d812      	bhi.n	2196e <gen_hash_m+0x42>
   21948:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   2194c:	2b03      	cmp	r3, #3
   2194e:	d8f4      	bhi.n	2193a <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   21950:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   21954:	2202      	movs	r2, #2
   21956:	f10d 010e 	add.w	r1, sp, #14
   2195a:	4620      	mov	r0, r4
   2195c:	f7fe fd85 	bl	2046a <tc_cmac_update>
   21960:	b9e0      	cbnz	r0, 2199c <gen_hash_m+0x70>
			state->err = -EINVAL;
   21962:	f06f 0315 	mvn.w	r3, #21
   21966:	65a3      	str	r3, [r4, #88]	; 0x58
}
   21968:	4628      	mov	r0, r5
   2196a:	b009      	add	sp, #36	; 0x24
   2196c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   2196e:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   21972:	33ff      	adds	r3, #255	; 0xff
   21974:	b29b      	uxth	r3, r3
   21976:	2b04      	cmp	r3, #4
   21978:	d8df      	bhi.n	2193a <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   2197a:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2197e:	2202      	movs	r2, #2
   21980:	f10d 010e 	add.w	r1, sp, #14
   21984:	4620      	mov	r0, r4
   21986:	f7fe fd70 	bl	2046a <tc_cmac_update>
   2198a:	2800      	cmp	r0, #0
   2198c:	d0e9      	beq.n	21962 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   2198e:	887b      	ldrh	r3, [r7, #2]
   21990:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   21994:	2202      	movs	r2, #2
   21996:	f10d 010e 	add.w	r1, sp, #14
   2199a:	e017      	b.n	219cc <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   2199c:	887b      	ldrh	r3, [r7, #2]
   2199e:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   219a2:	2202      	movs	r2, #2
   219a4:	f10d 010e 	add.w	r1, sp, #14
   219a8:	4620      	mov	r0, r4
   219aa:	f7fe fd5e 	bl	2046a <tc_cmac_update>
   219ae:	2800      	cmp	r0, #0
   219b0:	d0d7      	beq.n	21962 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   219b2:	2000      	movs	r0, #0
   219b4:	2310      	movs	r3, #16
   219b6:	eb0d 0203 	add.w	r2, sp, r3
   219ba:	6877      	ldr	r7, [r6, #4]
   219bc:	9000      	str	r0, [sp, #0]
   219be:	4631      	mov	r1, r6
   219c0:	47b8      	blx	r7
		if (len < 0) {
   219c2:	1e02      	subs	r2, r0, #0
   219c4:	da01      	bge.n	219ca <gen_hash_m+0x9e>
			state->err = len;
   219c6:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   219c8:	e7ce      	b.n	21968 <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   219ca:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   219cc:	4620      	mov	r0, r4
   219ce:	f7fe fd4c 	bl	2046a <tc_cmac_update>
   219d2:	2800      	cmp	r0, #0
   219d4:	d1b1      	bne.n	2193a <gen_hash_m+0xe>
   219d6:	e7c4      	b.n	21962 <gen_hash_m+0x36>

000219d8 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   219d8:	2301      	movs	r3, #1
   219da:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   219dc:	f3bf 8f5b 	dmb	ish
   219e0:	e850 2f00 	ldrex	r2, [r0]
   219e4:	431a      	orrs	r2, r3
   219e6:	e840 2100 	strex	r1, r2, [r0]
   219ea:	2900      	cmp	r1, #0
   219ec:	d1f8      	bne.n	219e0 <atomic_set_bit+0x8>
   219ee:	f3bf 8f5b 	dmb	ish
}
   219f2:	4770      	bx	lr

000219f4 <bt_addr_le_copy>:
   219f4:	680b      	ldr	r3, [r1, #0]
   219f6:	6003      	str	r3, [r0, #0]
   219f8:	888b      	ldrh	r3, [r1, #4]
   219fa:	8083      	strh	r3, [r0, #4]
   219fc:	798b      	ldrb	r3, [r1, #6]
   219fe:	7183      	strb	r3, [r0, #6]
}
   21a00:	4770      	bx	lr

00021a02 <clear_sc_cfg>:
__ssp_bos_icheck3(memset, void *, int)
   21a02:	2300      	movs	r3, #0
   21a04:	6003      	str	r3, [r0, #0]
   21a06:	6043      	str	r3, [r0, #4]
   21a08:	6083      	str	r3, [r0, #8]
}
   21a0a:	4770      	bx	lr

00021a0c <bt_gatt_attr_read.constprop.0>:
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   21a0c:	b538      	push	{r3, r4, r5, lr}
   21a0e:	f8bd 5010 	ldrh.w	r5, [sp, #16]
	if (offset > value_len) {
   21a12:	4295      	cmp	r5, r2
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   21a14:	460c      	mov	r4, r1
   21a16:	4611      	mov	r1, r2
	if (offset > value_len) {
   21a18:	d30a      	bcc.n	21a30 <bt_gatt_attr_read.constprop.0+0x24>
	len = MIN(buf_len, value_len - offset);
   21a1a:	1aad      	subs	r5, r5, r2
   21a1c:	42a5      	cmp	r5, r4
   21a1e:	bfa8      	it	ge
   21a20:	4625      	movge	r5, r4
   21a22:	b2ad      	uxth	r5, r5
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   21a24:	462a      	mov	r2, r5
   21a26:	4419      	add	r1, r3
   21a28:	f001 fe1b 	bl	23662 <memcpy>
}
   21a2c:	4628      	mov	r0, r5
   21a2e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   21a30:	f06f 0506 	mvn.w	r5, #6
   21a34:	e7fa      	b.n	21a2c <bt_gatt_attr_read.constprop.0+0x20>

00021a36 <bt_gatt_attr_read_service>:
{
   21a36:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   21a38:	460c      	mov	r4, r1
   21a3a:	4619      	mov	r1, r3
	struct bt_uuid *uuid = attr->user_data;
   21a3c:	68e3      	ldr	r3, [r4, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
   21a3e:	781c      	ldrb	r4, [r3, #0]
{
   21a40:	4610      	mov	r0, r2
   21a42:	f8bd 2018 	ldrh.w	r2, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   21a46:	b954      	cbnz	r4, 21a5e <bt_gatt_attr_read_service+0x28>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   21a48:	885b      	ldrh	r3, [r3, #2]
   21a4a:	f8ad 300e 	strh.w	r3, [sp, #14]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   21a4e:	2302      	movs	r3, #2
   21a50:	9300      	str	r3, [sp, #0]
   21a52:	f10d 030e 	add.w	r3, sp, #14
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   21a56:	f7ff ffd9 	bl	21a0c <bt_gatt_attr_read.constprop.0>
}
   21a5a:	b004      	add	sp, #16
   21a5c:	bd10      	pop	{r4, pc}
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   21a5e:	2410      	movs	r4, #16
   21a60:	9400      	str	r4, [sp, #0]
   21a62:	3301      	adds	r3, #1
   21a64:	e7f7      	b.n	21a56 <bt_gatt_attr_read_service+0x20>

00021a66 <read_name>:
{
   21a66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21a6a:	4614      	mov	r4, r2
   21a6c:	461d      	mov	r5, r3
   21a6e:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	const char *name = bt_get_name();
   21a72:	f7e5 ff01 	bl	7878 <bt_get_name>
   21a76:	4606      	mov	r6, r0
				 strlen(name));
   21a78:	f7df f966 	bl	d48 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   21a7c:	b280      	uxth	r0, r0
   21a7e:	9006      	str	r0, [sp, #24]
   21a80:	4633      	mov	r3, r6
   21a82:	463a      	mov	r2, r7
   21a84:	4629      	mov	r1, r5
   21a86:	4620      	mov	r0, r4
}
   21a88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   21a8c:	f7ff bfbe 	b.w	21a0c <bt_gatt_attr_read.constprop.0>

00021a90 <read_appearance>:
{
   21a90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   21a92:	4619      	mov	r1, r3
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   21a94:	f240 3341 	movw	r3, #833	; 0x341
   21a98:	f8ad 300e 	strh.w	r3, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   21a9c:	2302      	movs	r3, #2
   21a9e:	9300      	str	r3, [sp, #0]
{
   21aa0:	4610      	mov	r0, r2
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   21aa2:	f10d 030e 	add.w	r3, sp, #14
   21aa6:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   21aaa:	f7ff ffaf 	bl	21a0c <bt_gatt_attr_read.constprop.0>
}
   21aae:	b005      	add	sp, #20
   21ab0:	f85d fb04 	ldr.w	pc, [sp], #4

00021ab4 <clear_cf_cfg>:
{
   21ab4:	b513      	push	{r0, r1, r4, lr}
   21ab6:	4602      	mov	r2, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   21ab8:	2400      	movs	r4, #0
   21aba:	4669      	mov	r1, sp
   21abc:	3001      	adds	r0, #1
   21abe:	9400      	str	r4, [sp, #0]
   21ac0:	f8cd 4003 	str.w	r4, [sp, #3]
   21ac4:	f7ff ff96 	bl	219f4 <bt_addr_le_copy>
__ssp_bos_icheck3(memset, void *, int)
   21ac8:	7214      	strb	r4, [r2, #8]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   21aca:	320c      	adds	r2, #12
   21acc:	f3bf 8f5b 	dmb	ish
   21ad0:	e852 3f00 	ldrex	r3, [r2]
   21ad4:	e842 4100 	strex	r1, r4, [r2]
   21ad8:	2900      	cmp	r1, #0
   21ada:	d1f9      	bne.n	21ad0 <clear_cf_cfg+0x1c>
   21adc:	f3bf 8f5b 	dmb	ish
}
   21ae0:	b002      	add	sp, #8
   21ae2:	bd10      	pop	{r4, pc}

00021ae4 <sc_clear>:
{
   21ae4:	b538      	push	{r3, r4, r5, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   21ae6:	f100 0588 	add.w	r5, r0, #136	; 0x88
{
   21aea:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   21aec:	4629      	mov	r1, r5
   21aee:	7a00      	ldrb	r0, [r0, #8]
   21af0:	f7fe ff7d 	bl	209ee <bt_addr_le_is_bonded>
   21af4:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   21af6:	4629      	mov	r1, r5
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   21af8:	f7e8 fdce 	bl	a698 <find_sc_cfg>
		if (cfg) {
   21afc:	b118      	cbz	r0, 21b06 <sc_clear+0x22>
}
   21afe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			clear_sc_cfg(cfg);
   21b02:	f7ff bf7e 	b.w	21a02 <clear_sc_cfg>
}
   21b06:	bd38      	pop	{r3, r4, r5, pc}

00021b08 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   21b08:	2a02      	cmp	r2, #2
{
   21b0a:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   21b0c:	d108      	bne.n	21b20 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   21b0e:	2300      	movs	r3, #0
   21b10:	f100 0188 	add.w	r1, r0, #136	; 0x88
   21b14:	461a      	mov	r2, r3
   21b16:	7a00      	ldrb	r0, [r0, #8]
   21b18:	f7e8 fde0 	bl	a6dc <sc_save>
}
   21b1c:	2002      	movs	r0, #2
   21b1e:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   21b20:	f7ff ffe0 	bl	21ae4 <sc_clear>
   21b24:	e7fa      	b.n	21b1c <sc_ccc_cfg_write+0x14>

00021b26 <sc_restore_rsp>:
{
   21b26:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   21b28:	f7e8 fe10 	bl	a74c <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   21b2c:	b140      	cbz	r0, 21b40 <sc_restore_rsp+0x1a>
   21b2e:	7a03      	ldrb	r3, [r0, #8]
   21b30:	07db      	lsls	r3, r3, #31
   21b32:	d505      	bpl.n	21b40 <sc_restore_rsp+0x1a>
}
   21b34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   21b38:	2100      	movs	r1, #0
   21b3a:	300c      	adds	r0, #12
   21b3c:	f7ff bf4c 	b.w	219d8 <atomic_set_bit>
}
   21b40:	bd08      	pop	{r3, pc}

00021b42 <cf_read>:
{
   21b42:	b530      	push	{r4, r5, lr}
   21b44:	b085      	sub	sp, #20
   21b46:	461d      	mov	r5, r3
	uint8_t data[1] = {};
   21b48:	2300      	movs	r3, #0
{
   21b4a:	4614      	mov	r4, r2
	uint8_t data[1] = {};
   21b4c:	f88d 300c 	strb.w	r3, [sp, #12]
	cfg = find_cf_cfg(conn);
   21b50:	f7e8 fdfc 	bl	a74c <find_cf_cfg>
	if (cfg) {
   21b54:	b110      	cbz	r0, 21b5c <cf_read+0x1a>
		memcpy(data, cfg->data, sizeof(data));
   21b56:	7a03      	ldrb	r3, [r0, #8]
   21b58:	f88d 300c 	strb.w	r3, [sp, #12]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   21b5c:	2301      	movs	r3, #1
   21b5e:	9300      	str	r3, [sp, #0]
   21b60:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   21b64:	ab03      	add	r3, sp, #12
   21b66:	4629      	mov	r1, r5
   21b68:	4620      	mov	r0, r4
   21b6a:	f7ff ff4f 	bl	21a0c <bt_gatt_attr_read.constprop.0>
}
   21b6e:	b005      	add	sp, #20
   21b70:	bd30      	pop	{r4, r5, pc}

00021b72 <find_ccc_cfg>:
{
   21b72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   21b74:	4606      	mov	r6, r0
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   21b76:	1c4c      	adds	r4, r1, #1
   21b78:	f101 0515 	add.w	r5, r1, #21
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   21b7c:	1e67      	subs	r7, r4, #1
		if (conn) {
   21b7e:	b14e      	cbz	r6, 21b94 <find_ccc_cfg+0x22>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   21b80:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   21b84:	4622      	mov	r2, r4
   21b86:	4630      	mov	r0, r6
   21b88:	f7ff f995 	bl	20eb6 <bt_conn_is_peer_addr_le>
   21b8c:	b160      	cbz	r0, 21ba8 <find_ccc_cfg+0x36>
}
   21b8e:	4638      	mov	r0, r7
   21b90:	b003      	add	sp, #12
   21b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return memcmp(a, b, sizeof(*a));
   21b94:	2207      	movs	r2, #7
   21b96:	4669      	mov	r1, sp
   21b98:	4620      	mov	r0, r4
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   21b9a:	9600      	str	r6, [sp, #0]
   21b9c:	f8cd 6003 	str.w	r6, [sp, #3]
   21ba0:	f001 fd51 	bl	23646 <memcmp>
   21ba4:	2800      	cmp	r0, #0
   21ba6:	d0f2      	beq.n	21b8e <find_ccc_cfg+0x1c>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   21ba8:	340a      	adds	r4, #10
   21baa:	42ac      	cmp	r4, r5
   21bac:	d1e6      	bne.n	21b7c <find_ccc_cfg+0xa>
	return NULL;
   21bae:	2700      	movs	r7, #0
   21bb0:	e7ed      	b.n	21b8e <find_ccc_cfg+0x1c>

00021bb2 <bt_gatt_attr_read_ccc>:
{
   21bb2:	b530      	push	{r4, r5, lr}
	cfg = find_ccc_cfg(conn, ccc);
   21bb4:	68c9      	ldr	r1, [r1, #12]
{
   21bb6:	b085      	sub	sp, #20
   21bb8:	4614      	mov	r4, r2
   21bba:	461d      	mov	r5, r3
	cfg = find_ccc_cfg(conn, ccc);
   21bbc:	f7ff ffd9 	bl	21b72 <find_ccc_cfg>
	if (cfg) {
   21bc0:	b100      	cbz	r0, 21bc4 <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(cfg->value);
   21bc2:	8900      	ldrh	r0, [r0, #8]
   21bc4:	f8ad 000e 	strh.w	r0, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   21bc8:	2302      	movs	r3, #2
   21bca:	9300      	str	r3, [sp, #0]
   21bcc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   21bd0:	f10d 030e 	add.w	r3, sp, #14
   21bd4:	4629      	mov	r1, r5
   21bd6:	4620      	mov	r0, r4
   21bd8:	f7ff ff18 	bl	21a0c <bt_gatt_attr_read.constprop.0>
}
   21bdc:	b005      	add	sp, #20
   21bde:	bd30      	pop	{r4, r5, pc}

00021be0 <bt_gatt_attr_read>:
{
   21be0:	b538      	push	{r3, r4, r5, lr}
   21be2:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   21be6:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (offset > value_len) {
   21bea:	428d      	cmp	r5, r1
{
   21bec:	4610      	mov	r0, r2
	if (offset > value_len) {
   21bee:	d30b      	bcc.n	21c08 <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   21bf0:	1a6d      	subs	r5, r5, r1
   21bf2:	429d      	cmp	r5, r3
   21bf4:	bfa8      	it	ge
   21bf6:	461d      	movge	r5, r3
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   21bf8:	9b05      	ldr	r3, [sp, #20]
   21bfa:	b2ad      	uxth	r5, r5
   21bfc:	462a      	mov	r2, r5
   21bfe:	4419      	add	r1, r3
   21c00:	f001 fd2f 	bl	23662 <memcpy>
}
   21c04:	4628      	mov	r0, r5
   21c06:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   21c08:	f06f 0506 	mvn.w	r5, #6
   21c0c:	e7fa      	b.n	21c04 <bt_gatt_attr_read+0x24>

00021c0e <bt_gatt_attr_value_handle>:
{
   21c0e:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   21c10:	4604      	mov	r4, r0
   21c12:	b910      	cbnz	r0, 21c1a <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   21c14:	2000      	movs	r0, #0
}
   21c16:	b002      	add	sp, #8
   21c18:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   21c1a:	2300      	movs	r3, #0
   21c1c:	f88d 3004 	strb.w	r3, [sp, #4]
   21c20:	6800      	ldr	r0, [r0, #0]
   21c22:	f642 0303 	movw	r3, #10243	; 0x2803
   21c26:	a901      	add	r1, sp, #4
   21c28:	f8ad 3006 	strh.w	r3, [sp, #6]
   21c2c:	f7fe fd7a 	bl	20724 <bt_uuid_cmp>
   21c30:	2800      	cmp	r0, #0
   21c32:	d1ef      	bne.n	21c14 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   21c34:	68e3      	ldr	r3, [r4, #12]
   21c36:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   21c38:	2800      	cmp	r0, #0
   21c3a:	d1ec      	bne.n	21c16 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   21c3c:	4620      	mov	r0, r4
   21c3e:	f7e9 f809 	bl	ac54 <bt_gatt_attr_get_handle>
   21c42:	3001      	adds	r0, #1
   21c44:	b280      	uxth	r0, r0
	return handle;
   21c46:	e7e6      	b.n	21c16 <bt_gatt_attr_value_handle+0x8>

00021c48 <bt_gatt_attr_read_chrc>:
{
   21c48:	b570      	push	{r4, r5, r6, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   21c4a:	68ce      	ldr	r6, [r1, #12]
{
   21c4c:	b088      	sub	sp, #32
   21c4e:	4608      	mov	r0, r1
   21c50:	461d      	mov	r5, r3
	pdu.properties = chrc->properties;
   21c52:	79b3      	ldrb	r3, [r6, #6]
   21c54:	f88d 300c 	strb.w	r3, [sp, #12]
{
   21c58:	4614      	mov	r4, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   21c5a:	f7ff ffd8 	bl	21c0e <bt_gatt_attr_value_handle>
   21c5e:	f8ad 000d 	strh.w	r0, [sp, #13]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   21c62:	6830      	ldr	r0, [r6, #0]
   21c64:	7803      	ldrb	r3, [r0, #0]
   21c66:	b96b      	cbnz	r3, 21c84 <bt_gatt_attr_read_chrc+0x3c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   21c68:	8843      	ldrh	r3, [r0, #2]
   21c6a:	f8ad 300f 	strh.w	r3, [sp, #15]
		value_len += 2U;
   21c6e:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   21c70:	9300      	str	r3, [sp, #0]
   21c72:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   21c76:	ab03      	add	r3, sp, #12
   21c78:	4629      	mov	r1, r5
   21c7a:	4620      	mov	r0, r4
   21c7c:	f7ff fec6 	bl	21a0c <bt_gatt_attr_read.constprop.0>
}
   21c80:	b008      	add	sp, #32
   21c82:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   21c84:	1c43      	adds	r3, r0, #1
   21c86:	f10d 020f 	add.w	r2, sp, #15
   21c8a:	3011      	adds	r0, #17
   21c8c:	f853 1b04 	ldr.w	r1, [r3], #4
   21c90:	f842 1b04 	str.w	r1, [r2], #4
   21c94:	4283      	cmp	r3, r0
   21c96:	d1f9      	bne.n	21c8c <bt_gatt_attr_read_chrc+0x44>
		value_len += 16U;
   21c98:	2313      	movs	r3, #19
   21c9a:	e7e9      	b.n	21c70 <bt_gatt_attr_read_chrc+0x28>

00021c9c <bt_gatt_foreach_attr>:
{
   21c9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   21c9e:	e9cd 2301 	strd	r2, r3, [sp, #4]
   21ca2:	2300      	movs	r3, #0
   21ca4:	9300      	str	r3, [sp, #0]
   21ca6:	461a      	mov	r2, r3
   21ca8:	f7e9 f804 	bl	acb4 <bt_gatt_foreach_attr_type>
}
   21cac:	b005      	add	sp, #20
   21cae:	f85d fb04 	ldr.w	pc, [sp], #4

00021cb2 <db_hash_process>:
	db_hash_gen(true);
   21cb2:	f7e9 b859 	b.w	ad68 <db_hash_gen.isra.0>

00021cb6 <bt_gatt_check_perm>:
{
   21cb6:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   21cb8:	07d4      	lsls	r4, r2, #31
{
   21cba:	4605      	mov	r5, r0
   21cbc:	7c88      	ldrb	r0, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   21cbe:	d504      	bpl.n	21cca <bt_gatt_check_perm+0x14>
   21cc0:	f010 0f15 	tst.w	r0, #21
   21cc4:	d01e      	beq.n	21d04 <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   21cc6:	684b      	ldr	r3, [r1, #4]
   21cc8:	b1e3      	cbz	r3, 21d04 <bt_gatt_check_perm+0x4e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   21cca:	0793      	lsls	r3, r2, #30
   21ccc:	d504      	bpl.n	21cd8 <bt_gatt_check_perm+0x22>
   21cce:	f010 0f2a 	tst.w	r0, #42	; 0x2a
   21cd2:	d019      	beq.n	21d08 <bt_gatt_check_perm+0x52>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   21cd4:	688b      	ldr	r3, [r1, #8]
   21cd6:	b1bb      	cbz	r3, 21d08 <bt_gatt_check_perm+0x52>
	mask &= attr->perm;
   21cd8:	ea02 0400 	and.w	r4, r2, r0
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   21cdc:	f014 0f30 	tst.w	r4, #48	; 0x30
   21ce0:	d103      	bne.n	21cea <bt_gatt_check_perm+0x34>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   21ce2:	f014 000c 	ands.w	r0, r4, #12
   21ce6:	d107      	bne.n	21cf8 <bt_gatt_check_perm+0x42>
}
   21ce8:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   21cea:	4628      	mov	r0, r5
   21cec:	f7ff f8d8 	bl	20ea0 <bt_conn_get_security>
   21cf0:	2802      	cmp	r0, #2
   21cf2:	d8f6      	bhi.n	21ce2 <bt_gatt_check_perm+0x2c>
			return BT_ATT_ERR_AUTHENTICATION;
   21cf4:	2005      	movs	r0, #5
   21cf6:	e7f7      	b.n	21ce8 <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   21cf8:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   21cfa:	2b00      	cmp	r3, #0
   21cfc:	bf14      	ite	ne
   21cfe:	2000      	movne	r0, #0
   21d00:	200f      	moveq	r0, #15
   21d02:	e7f1      	b.n	21ce8 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   21d04:	2002      	movs	r0, #2
   21d06:	e7ef      	b.n	21ce8 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   21d08:	2003      	movs	r0, #3
   21d0a:	e7ed      	b.n	21ce8 <bt_gatt_check_perm+0x32>

00021d0c <bt_gatt_change_aware>:
{
   21d0c:	b510      	push	{r4, lr}
   21d0e:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   21d10:	f7e8 fd1c 	bl	a74c <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   21d14:	4603      	mov	r3, r0
   21d16:	b910      	cbnz	r0, 21d1e <bt_gatt_change_aware+0x12>
		return true;
   21d18:	2401      	movs	r4, #1
}
   21d1a:	4620      	mov	r0, r4
   21d1c:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   21d1e:	7a02      	ldrb	r2, [r0, #8]
   21d20:	07d2      	lsls	r2, r2, #31
   21d22:	d5f9      	bpl.n	21d18 <bt_gatt_change_aware+0xc>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21d24:	f3bf 8f5b 	dmb	ish
   21d28:	68d9      	ldr	r1, [r3, #12]
   21d2a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   21d2e:	f011 0101 	ands.w	r1, r1, #1
   21d32:	f100 000c 	add.w	r0, r0, #12
   21d36:	d1ef      	bne.n	21d18 <bt_gatt_change_aware+0xc>
	if (!req) {
   21d38:	2c00      	cmp	r4, #0
   21d3a:	d0ee      	beq.n	21d1a <bt_gatt_change_aware+0xe>
   21d3c:	f3bf 8f5b 	dmb	ish
   21d40:	68db      	ldr	r3, [r3, #12]
   21d42:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   21d46:	f3c3 0440 	ubfx	r4, r3, #1, #1
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   21d4a:	079b      	lsls	r3, r3, #30
   21d4c:	d50e      	bpl.n	21d6c <bt_gatt_change_aware+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   21d4e:	f3bf 8f5b 	dmb	ish
   21d52:	e850 3f00 	ldrex	r3, [r0]
   21d56:	f023 0302 	bic.w	r3, r3, #2
   21d5a:	e840 3200 	strex	r2, r3, [r0]
   21d5e:	2a00      	cmp	r2, #0
   21d60:	d1f7      	bne.n	21d52 <bt_gatt_change_aware+0x46>
   21d62:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   21d66:	f7ff fe37 	bl	219d8 <atomic_set_bit>
	return false;
   21d6a:	e7d6      	b.n	21d1a <bt_gatt_change_aware+0xe>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   21d6c:	2101      	movs	r1, #1
   21d6e:	e7fa      	b.n	21d66 <bt_gatt_change_aware+0x5a>

00021d70 <sys_memcpy_swap>:
	psrc += length - 1;
   21d70:	1e53      	subs	r3, r2, #1
   21d72:	4419      	add	r1, r3
	for (; length > 0; length--) {
   21d74:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   21d76:	f811 3901 	ldrb.w	r3, [r1], #-1
   21d7a:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   21d7e:	4290      	cmp	r0, r2
   21d80:	d1f9      	bne.n	21d76 <sys_memcpy_swap+0x6>
}
   21d82:	4770      	bx	lr

00021d84 <smp_pairing_rsp>:
}
   21d84:	2007      	movs	r0, #7
   21d86:	4770      	bx	lr

00021d88 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   21d88:	2301      	movs	r3, #1
   21d8a:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   21d8c:	f3bf 8f5b 	dmb	ish
   21d90:	e850 2f00 	ldrex	r2, [r0]
   21d94:	431a      	orrs	r2, r3
   21d96:	e840 2100 	strex	r1, r2, [r0]
   21d9a:	2900      	cmp	r1, #0
   21d9c:	d1f8      	bne.n	21d90 <atomic_set_bit+0x8>
   21d9e:	f3bf 8f5b 	dmb	ish
}
   21da2:	4770      	bx	lr

00021da4 <smp_keypress_notif>:
{
   21da4:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   21da6:	210e      	movs	r1, #14
   21da8:	30c0      	adds	r0, #192	; 0xc0
   21daa:	f7ff ffed 	bl	21d88 <atomic_set_bit>
}
   21dae:	2000      	movs	r0, #0
   21db0:	bd08      	pop	{r3, pc}

00021db2 <k_delayed_work_cancel>:
{
   21db2:	b538      	push	{r3, r4, r5, lr}
   21db4:	4605      	mov	r5, r0
	return k_work_delayable_busy_get(dwork) != 0;
   21db6:	f001 fa44 	bl	23242 <k_work_delayable_busy_get>
   21dba:	4604      	mov	r4, r0
	int rc = k_work_cancel_delayable(&work->work);
   21dbc:	4628      	mov	r0, r5
   21dbe:	f001 fa54 	bl	2326a <k_work_cancel_delayable>
	if (pending) {
   21dc2:	b124      	cbz	r4, 21dce <k_delayed_work_cancel+0x1c>
		return (rc == 0) ? 0 : -EINVAL;
   21dc4:	2800      	cmp	r0, #0
   21dc6:	bf18      	it	ne
   21dc8:	f06f 0015 	mvnne.w	r0, #21
}
   21dcc:	bd38      	pop	{r3, r4, r5, pc}
	return -EALREADY;
   21dce:	f06f 0077 	mvn.w	r0, #119	; 0x77
   21dd2:	e7fb      	b.n	21dcc <k_delayed_work_cancel+0x1a>

00021dd4 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   21dd4:	2301      	movs	r3, #1
   21dd6:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   21dd8:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   21dda:	f3bf 8f5b 	dmb	ish
   21dde:	e850 2f00 	ldrex	r2, [r0]
   21de2:	401a      	ands	r2, r3
   21de4:	e840 2100 	strex	r1, r2, [r0]
   21de8:	2900      	cmp	r1, #0
   21dea:	d1f8      	bne.n	21dde <atomic_clear_bit+0xa>
   21dec:	f3bf 8f5b 	dmb	ish
}
   21df0:	4770      	bx	lr

00021df2 <bt_addr_le_copy>:
   21df2:	680b      	ldr	r3, [r1, #0]
   21df4:	6003      	str	r3, [r0, #0]
   21df6:	888b      	ldrh	r3, [r1, #4]
   21df8:	8083      	strh	r3, [r0, #4]
   21dfa:	798b      	ldrb	r3, [r1, #6]
   21dfc:	7183      	strb	r3, [r0, #6]
}
   21dfe:	4770      	bx	lr

00021e00 <bt_smp_aes_cmac>:
{
   21e00:	b570      	push	{r4, r5, r6, lr}
   21e02:	b0c2      	sub	sp, #264	; 0x108
   21e04:	460d      	mov	r5, r1
   21e06:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   21e08:	4601      	mov	r1, r0
   21e0a:	aa16      	add	r2, sp, #88	; 0x58
   21e0c:	4668      	mov	r0, sp
{
   21e0e:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   21e10:	f7fe fb00 	bl	20414 <tc_cmac_setup>
   21e14:	b150      	cbz	r0, 21e2c <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   21e16:	4632      	mov	r2, r6
   21e18:	4629      	mov	r1, r5
   21e1a:	4668      	mov	r0, sp
   21e1c:	f7fe fb25 	bl	2046a <tc_cmac_update>
   21e20:	b120      	cbz	r0, 21e2c <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   21e22:	4669      	mov	r1, sp
   21e24:	4620      	mov	r0, r4
   21e26:	f7fe fb8c 	bl	20542 <tc_cmac_final>
   21e2a:	b918      	cbnz	r0, 21e34 <bt_smp_aes_cmac+0x34>
		return -EIO;
   21e2c:	f06f 0004 	mvn.w	r0, #4
}
   21e30:	b042      	add	sp, #264	; 0x108
   21e32:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   21e34:	2000      	movs	r0, #0
   21e36:	e7fb      	b.n	21e30 <bt_smp_aes_cmac+0x30>

00021e38 <smp_security_request>:
   21e38:	2007      	movs	r0, #7
   21e3a:	4770      	bx	lr

00021e3c <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   21e3c:	b510      	push	{r4, lr}
   21e3e:	1e43      	subs	r3, r0, #1
   21e40:	f100 0210 	add.w	r2, r0, #16
   21e44:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   21e46:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   21e4a:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   21e4e:	701c      	strb	r4, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   21e50:	4283      	cmp	r3, r0
		((uint8_t *)buf)[length - 1 - i] = tmp;
   21e52:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   21e54:	d1f7      	bne.n	21e46 <sys_mem_swap.constprop.0+0xa>
	}
}
   21e56:	bd10      	pop	{r4, pc}

00021e58 <smp_f6>:
{
   21e58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21e5c:	b097      	sub	sp, #92	; 0x5c
   21e5e:	4606      	mov	r6, r0
   21e60:	4691      	mov	r9, r2
	sys_memcpy_swap(m, n1, 16);
   21e62:	a805      	add	r0, sp, #20
   21e64:	2210      	movs	r2, #16
{
   21e66:	e9dd 541f 	ldrd	r5, r4, [sp, #124]	; 0x7c
   21e6a:	4698      	mov	r8, r3
   21e6c:	9f21      	ldr	r7, [sp, #132]	; 0x84
	sys_memcpy_swap(m, n1, 16);
   21e6e:	f7ff ff7f 	bl	21d70 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   21e72:	2210      	movs	r2, #16
   21e74:	4649      	mov	r1, r9
   21e76:	a809      	add	r0, sp, #36	; 0x24
   21e78:	f7ff ff7a 	bl	21d70 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   21e7c:	2210      	movs	r2, #16
   21e7e:	4641      	mov	r1, r8
   21e80:	a80d      	add	r0, sp, #52	; 0x34
   21e82:	f7ff ff75 	bl	21d70 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   21e86:	991e      	ldr	r1, [sp, #120]	; 0x78
   21e88:	2203      	movs	r2, #3
   21e8a:	a811      	add	r0, sp, #68	; 0x44
   21e8c:	f7ff ff70 	bl	21d70 <sys_memcpy_swap>
	memcpy(m + 52, a1->a.val, 6);
   21e90:	4629      	mov	r1, r5
	m[51] = a1->type;
   21e92:	782b      	ldrb	r3, [r5, #0]
	memcpy(m + 52, a1->a.val, 6);
   21e94:	f851 0f01 	ldr.w	r0, [r1, #1]!
	m[51] = a1->type;
   21e98:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   21e9c:	9012      	str	r0, [sp, #72]	; 0x48
   21e9e:	888b      	ldrh	r3, [r1, #4]
   21ea0:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   21ea4:	2206      	movs	r2, #6
   21ea6:	a812      	add	r0, sp, #72	; 0x48
   21ea8:	f7ff ff62 	bl	21d70 <sys_memcpy_swap>
	memcpy(m + 59, a2->a.val, 6);
   21eac:	4621      	mov	r1, r4
	m[58] = a2->type;
   21eae:	7823      	ldrb	r3, [r4, #0]
   21eb0:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   21eb4:	f851 3f01 	ldr.w	r3, [r1, #1]!
   21eb8:	f8cd 304f 	str.w	r3, [sp, #79]	; 0x4f
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   21ebc:	2206      	movs	r2, #6
	memcpy(m + 59, a2->a.val, 6);
   21ebe:	888b      	ldrh	r3, [r1, #4]
   21ec0:	f8ad 3053 	strh.w	r3, [sp, #83]	; 0x53
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   21ec4:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   21ec8:	f7ff ff52 	bl	21d70 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   21ecc:	2210      	movs	r2, #16
   21ece:	4631      	mov	r1, r6
   21ed0:	a801      	add	r0, sp, #4
   21ed2:	f7ff ff4d 	bl	21d70 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   21ed6:	463b      	mov	r3, r7
   21ed8:	2241      	movs	r2, #65	; 0x41
   21eda:	a905      	add	r1, sp, #20
   21edc:	a801      	add	r0, sp, #4
   21ede:	f7ff ff8f 	bl	21e00 <bt_smp_aes_cmac>
	if (err) {
   21ee2:	4604      	mov	r4, r0
   21ee4:	b910      	cbnz	r0, 21eec <smp_f6+0x94>
	sys_mem_swap(check, 16);
   21ee6:	4638      	mov	r0, r7
   21ee8:	f7ff ffa8 	bl	21e3c <sys_mem_swap.constprop.0>
}
   21eec:	4620      	mov	r0, r4
   21eee:	b017      	add	sp, #92	; 0x5c
   21ef0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00021ef4 <smp_f4>:
{
   21ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
   21ef6:	b097      	sub	sp, #92	; 0x5c
   21ef8:	4614      	mov	r4, r2
   21efa:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   21efc:	2220      	movs	r2, #32
   21efe:	4601      	mov	r1, r0
   21f00:	a805      	add	r0, sp, #20
{
   21f02:	461d      	mov	r5, r3
   21f04:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   21f06:	f7ff ff33 	bl	21d70 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   21f0a:	2220      	movs	r2, #32
   21f0c:	4631      	mov	r1, r6
   21f0e:	a80d      	add	r0, sp, #52	; 0x34
   21f10:	f7ff ff2e 	bl	21d70 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   21f14:	4621      	mov	r1, r4
   21f16:	2210      	movs	r2, #16
   21f18:	a801      	add	r0, sp, #4
	m[64] = z;
   21f1a:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   21f1e:	f7ff ff27 	bl	21d70 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   21f22:	463b      	mov	r3, r7
   21f24:	2241      	movs	r2, #65	; 0x41
   21f26:	a905      	add	r1, sp, #20
   21f28:	a801      	add	r0, sp, #4
   21f2a:	f7ff ff69 	bl	21e00 <bt_smp_aes_cmac>
	if (err) {
   21f2e:	4604      	mov	r4, r0
   21f30:	b910      	cbnz	r0, 21f38 <smp_f4+0x44>
	sys_mem_swap(res, 16);
   21f32:	4638      	mov	r0, r7
   21f34:	f7ff ff82 	bl	21e3c <sys_mem_swap.constprop.0>
}
   21f38:	4620      	mov	r0, r4
   21f3a:	b017      	add	sp, #92	; 0x5c
   21f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

00021f3e <smp_signing_info>:
   21f3e:	2007      	movs	r0, #7
   21f40:	4770      	bx	lr

00021f42 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21f42:	f3bf 8f5b 	dmb	ish
   21f46:	6800      	ldr	r0, [r0, #0]
   21f48:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   21f4c:	4108      	asrs	r0, r1
}
   21f4e:	f000 0001 	and.w	r0, r0, #1
   21f52:	4770      	bx	lr

00021f54 <update_keys_check>:
{
   21f54:	b510      	push	{r4, lr}
   21f56:	4603      	mov	r3, r0
	if (!keys ||
   21f58:	b1f9      	cbz	r1, 21f9a <update_keys_check+0x46>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   21f5a:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   21f5c:	f010 0f24 	tst.w	r0, #36	; 0x24
   21f60:	d01b      	beq.n	21f9a <update_keys_check+0x46>
	return MIN(req->max_key_size, rsp->max_key_size);
   21f62:	f893 20d4 	ldrb.w	r2, [r3, #212]	; 0xd4
   21f66:	f893 40cd 	ldrb.w	r4, [r3, #205]	; 0xcd
	if (keys->enc_size > get_encryption_key_size(smp)) {
   21f6a:	7b09      	ldrb	r1, [r1, #12]
   21f6c:	42a2      	cmp	r2, r4
   21f6e:	bf28      	it	cs
   21f70:	4622      	movcs	r2, r4
   21f72:	4291      	cmp	r1, r2
   21f74:	d901      	bls.n	21f7a <update_keys_check+0x26>
		return false;
   21f76:	2000      	movs	r0, #0
}
   21f78:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   21f7a:	0682      	lsls	r2, r0, #26
   21f7c:	d405      	bmi.n	21f8a <update_keys_check+0x36>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   21f7e:	f893 00c8 	ldrb.w	r0, [r3, #200]	; 0xc8
   21f82:	3800      	subs	r0, #0
   21f84:	bf18      	it	ne
   21f86:	2001      	movne	r0, #1
   21f88:	e7f6      	b.n	21f78 <update_keys_check+0x24>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   21f8a:	2105      	movs	r1, #5
   21f8c:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
   21f90:	f7ff ffd7 	bl	21f42 <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   21f94:	2800      	cmp	r0, #0
   21f96:	d1f2      	bne.n	21f7e <update_keys_check+0x2a>
   21f98:	e7ed      	b.n	21f76 <update_keys_check+0x22>
		return true;
   21f9a:	2001      	movs	r0, #1
   21f9c:	e7ec      	b.n	21f78 <update_keys_check+0x24>

00021f9e <smp_create_pdu.isra.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   21f9e:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   21fa0:	f100 05c4 	add.w	r5, r0, #196	; 0xc4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   21fa4:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   21fa6:	4628      	mov	r0, r5
   21fa8:	2104      	movs	r1, #4
   21faa:	f7ff ffca 	bl	21f42 <atomic_test_bit>
   21fae:	b168      	cbz	r0, 21fcc <smp_create_pdu.isra.0+0x2e>
		timeout = K_NO_WAIT;
   21fb0:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   21fb2:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   21fb4:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   21fb6:	4608      	mov	r0, r1
   21fb8:	f7ff f8a8 	bl	2110c <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   21fbc:	4604      	mov	r4, r0
   21fbe:	b940      	cbnz	r0, 21fd2 <smp_create_pdu.isra.0+0x34>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   21fc0:	2104      	movs	r1, #4
   21fc2:	4628      	mov	r0, r5
   21fc4:	f7ff fee0 	bl	21d88 <atomic_set_bit>
}
   21fc8:	4620      	mov	r0, r4
   21fca:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   21fcc:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   21fd0:	e7ef      	b.n	21fb2 <smp_create_pdu.isra.0+0x14>
   21fd2:	2101      	movs	r1, #1
   21fd4:	3008      	adds	r0, #8
   21fd6:	f000 fb2c 	bl	22632 <net_buf_simple_add>
	hdr->code = op;
   21fda:	7006      	strb	r6, [r0, #0]
	return buf;
   21fdc:	e7f4      	b.n	21fc8 <smp_create_pdu.isra.0+0x2a>

00021fde <smp_send_pairing_random>:
{
   21fde:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   21fe0:	2104      	movs	r1, #4
{
   21fe2:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   21fe4:	f7ff ffdb 	bl	21f9e <smp_create_pdu.isra.0>
	if (!rsp_buf) {
   21fe8:	4605      	mov	r5, r0
   21fea:	b1a0      	cbz	r0, 22016 <smp_send_pairing_random+0x38>
   21fec:	2110      	movs	r1, #16
   21fee:	3008      	adds	r0, #8
   21ff0:	f000 fb1f 	bl	22632 <net_buf_simple_add>
   21ff4:	f104 03e7 	add.w	r3, r4, #231	; 0xe7
   21ff8:	f104 02f7 	add.w	r2, r4, #247	; 0xf7
   21ffc:	f853 1b04 	ldr.w	r1, [r3], #4
   22000:	f840 1b04 	str.w	r1, [r0], #4
   22004:	4293      	cmp	r3, r2
   22006:	d1f9      	bne.n	21ffc <smp_send_pairing_random+0x1e>
	smp_send(smp, rsp_buf, NULL, NULL);
   22008:	4620      	mov	r0, r4
   2200a:	2200      	movs	r2, #0
   2200c:	4629      	mov	r1, r5
   2200e:	f7e9 f9e9 	bl	b3e4 <smp_send.isra.0>
	return 0;
   22012:	2000      	movs	r0, #0
}
   22014:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   22016:	2008      	movs	r0, #8
   22018:	e7fc      	b.n	22014 <smp_send_pairing_random+0x36>

0002201a <send_pairing_rsp>:
{
   2201a:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   2201c:	2102      	movs	r1, #2
{
   2201e:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   22020:	f7ff ffbd 	bl	21f9e <smp_create_pdu.isra.0>
	if (!rsp_buf) {
   22024:	4604      	mov	r4, r0
   22026:	b180      	cbz	r0, 2204a <send_pairing_rsp+0x30>
   22028:	2106      	movs	r1, #6
   2202a:	3008      	adds	r0, #8
   2202c:	f000 fb01 	bl	22632 <net_buf_simple_add>
   22030:	462b      	mov	r3, r5
	smp_send(smp, rsp_buf, NULL, NULL);
   22032:	4621      	mov	r1, r4
   22034:	f853 2fd1 	ldr.w	r2, [r3, #209]!
   22038:	6002      	str	r2, [r0, #0]
   2203a:	889b      	ldrh	r3, [r3, #4]
   2203c:	8083      	strh	r3, [r0, #4]
   2203e:	2200      	movs	r2, #0
   22040:	4628      	mov	r0, r5
   22042:	f7e9 f9cf 	bl	b3e4 <smp_send.isra.0>
	return 0;
   22046:	2000      	movs	r0, #0
}
   22048:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2204a:	2008      	movs	r0, #8
   2204c:	e7fc      	b.n	22048 <send_pairing_rsp+0x2e>

0002204e <smp_dhkey_check>:
{
   2204e:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
   22050:	6803      	ldr	r3, [r0, #0]
   22052:	78db      	ldrb	r3, [r3, #3]
   22054:	2b01      	cmp	r3, #1
{
   22056:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
   22058:	d11a      	bne.n	22090 <smp_dhkey_check+0x42>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   2205a:	688d      	ldr	r5, [r1, #8]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   2205c:	f100 06c4 	add.w	r6, r0, #196	; 0xc4
   22060:	2110      	movs	r1, #16
   22062:	4630      	mov	r0, r6
   22064:	f7ff feb6 	bl	21dd4 <atomic_clear_bit>
   22068:	462b      	mov	r3, r5
   2206a:	f204 1277 	addw	r2, r4, #375	; 0x177
   2206e:	f105 0110 	add.w	r1, r5, #16
   22072:	f853 0b04 	ldr.w	r0, [r3], #4
   22076:	f842 0b04 	str.w	r0, [r2], #4
   2207a:	428b      	cmp	r3, r1
   2207c:	d1f9      	bne.n	22072 <smp_dhkey_check+0x24>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   2207e:	2107      	movs	r1, #7
   22080:	4630      	mov	r0, r6
   22082:	f7ff ff5e 	bl	21f42 <atomic_test_bit>
   22086:	b128      	cbz	r0, 22094 <smp_dhkey_check+0x46>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   22088:	2109      	movs	r1, #9
   2208a:	4630      	mov	r0, r6
   2208c:	f7ff fe7c 	bl	21d88 <atomic_set_bit>
}
   22090:	2000      	movs	r0, #0
   22092:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   22094:	210a      	movs	r1, #10
   22096:	4630      	mov	r0, r6
   22098:	f7ff ff53 	bl	21f42 <atomic_test_bit>
   2209c:	2800      	cmp	r0, #0
   2209e:	d1f3      	bne.n	22088 <smp_dhkey_check+0x3a>
		return compute_and_check_and_send_slave_dhcheck(smp);
   220a0:	4620      	mov	r0, r4
}
   220a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_slave_dhcheck(smp);
   220a6:	f7e9 b9c3 	b.w	b430 <compute_and_check_and_send_slave_dhcheck>

000220aa <atomic_test_and_clear_bit>:
{
   220aa:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   220ac:	2301      	movs	r3, #1
   220ae:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   220b2:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   220b4:	f3bf 8f5b 	dmb	ish
   220b8:	e850 3f00 	ldrex	r3, [r0]
   220bc:	ea03 0c02 	and.w	ip, r3, r2
   220c0:	e840 ce00 	strex	lr, ip, [r0]
   220c4:	f1be 0f00 	cmp.w	lr, #0
   220c8:	d1f6      	bne.n	220b8 <atomic_test_and_clear_bit+0xe>
   220ca:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   220ce:	420b      	tst	r3, r1
}
   220d0:	bf14      	ite	ne
   220d2:	2001      	movne	r0, #1
   220d4:	2000      	moveq	r0, #0
   220d6:	f85d fb04 	ldr.w	pc, [sp], #4

000220da <smp_reset>:
{
   220da:	b510      	push	{r4, lr}
   220dc:	4604      	mov	r4, r0
	k_delayed_work_cancel(&smp->work);
   220de:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
   220e2:	f7ff fe66 	bl	21db2 <k_delayed_work_cancel>
	smp->method = JUST_WORKS;
   220e6:	2300      	movs	r3, #0
   220e8:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
	atomic_set(smp->allowed_cmds, 0);
   220ec:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   220f0:	f3bf 8f5b 	dmb	ish
   220f4:	e850 2f00 	ldrex	r2, [r0]
   220f8:	e840 3100 	strex	r1, r3, [r0]
   220fc:	2900      	cmp	r1, #0
   220fe:	d1f9      	bne.n	220f4 <smp_reset+0x1a>
   22100:	f3bf 8f5b 	dmb	ish
   22104:	f3bf 8f5b 	dmb	ish
   22108:	34c4      	adds	r4, #196	; 0xc4
   2210a:	e854 2f00 	ldrex	r2, [r4]
   2210e:	e844 3100 	strex	r1, r3, [r4]
   22112:	2900      	cmp	r1, #0
   22114:	d1f9      	bne.n	2210a <smp_reset+0x30>
   22116:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   2211a:	2101      	movs	r1, #1
}
   2211c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   22120:	f7ff be32 	b.w	21d88 <atomic_set_bit>

00022124 <smp_c1>:
{
   22124:	b5f0      	push	{r4, r5, r6, r7, lr}
   22126:	b089      	sub	sp, #36	; 0x24
   22128:	e9dd 560e 	ldrd	r5, r6, [sp, #56]	; 0x38
   2212c:	4607      	mov	r7, r0
	p1[0] = ia->type;
   2212e:	7828      	ldrb	r0, [r5, #0]
   22130:	f88d 0000 	strb.w	r0, [sp]
	p1[1] = ra->type;
   22134:	7830      	ldrb	r0, [r6, #0]
   22136:	f88d 0001 	strb.w	r0, [sp, #1]
	memcpy(p1 + 2, preq, 7);
   2213a:	6810      	ldr	r0, [r2, #0]
   2213c:	f8cd 0002 	str.w	r0, [sp, #2]
   22140:	8890      	ldrh	r0, [r2, #4]
   22142:	7992      	ldrb	r2, [r2, #6]
{
   22144:	9c10      	ldr	r4, [sp, #64]	; 0x40
	memcpy(p1 + 2, preq, 7);
   22146:	f88d 2008 	strb.w	r2, [sp, #8]
	memcpy(p1 + 9, pres, 7);
   2214a:	681a      	ldr	r2, [r3, #0]
   2214c:	f8cd 2009 	str.w	r2, [sp, #9]
   22150:	889a      	ldrh	r2, [r3, #4]
   22152:	799b      	ldrb	r3, [r3, #6]
	memcpy(p1 + 2, preq, 7);
   22154:	f8ad 0006 	strh.w	r0, [sp, #6]
	memcpy(p1 + 9, pres, 7);
   22158:	f8ad 200d 	strh.w	r2, [sp, #13]
   2215c:	f88d 300f 	strb.w	r3, [sp, #15]
	while (len--) {
   22160:	f101 0c10 	add.w	ip, r1, #16
   22164:	4620      	mov	r0, r4
   22166:	466a      	mov	r2, sp
   22168:	4561      	cmp	r1, ip
   2216a:	d124      	bne.n	221b6 <smp_c1+0x92>
	err = bt_encrypt_le(k, enc_data, enc_data);
   2216c:	4622      	mov	r2, r4
   2216e:	4621      	mov	r1, r4
   22170:	4638      	mov	r0, r7
   22172:	f7ed fc3b 	bl	f9ec <bt_encrypt_le>
	if (err) {
   22176:	4602      	mov	r2, r0
   22178:	bb70      	cbnz	r0, 221d8 <smp_c1+0xb4>
	memcpy(p2, ra->a.val, 6);
   2217a:	4633      	mov	r3, r6
	(void)memset(p2 + 12, 0, 4);
   2217c:	9207      	str	r2, [sp, #28]
	memcpy(p2, ra->a.val, 6);
   2217e:	f853 0f01 	ldr.w	r0, [r3, #1]!
   22182:	9004      	str	r0, [sp, #16]
   22184:	889b      	ldrh	r3, [r3, #4]
   22186:	f8ad 3014 	strh.w	r3, [sp, #20]
	memcpy(p2 + 6, ia->a.val, 6);
   2218a:	462b      	mov	r3, r5
   2218c:	f104 0010 	add.w	r0, r4, #16
   22190:	f853 1f01 	ldr.w	r1, [r3, #1]!
   22194:	f8cd 1016 	str.w	r1, [sp, #22]
   22198:	889b      	ldrh	r3, [r3, #4]
   2219a:	f8ad 301a 	strh.w	r3, [sp, #26]
	while (len--) {
   2219e:	a904      	add	r1, sp, #16
   221a0:	4623      	mov	r3, r4
   221a2:	4283      	cmp	r3, r0
   221a4:	d110      	bne.n	221c8 <smp_c1+0xa4>
	return bt_encrypt_le(k, enc_data, enc_data);
   221a6:	4622      	mov	r2, r4
   221a8:	4621      	mov	r1, r4
   221aa:	4638      	mov	r0, r7
}
   221ac:	b009      	add	sp, #36	; 0x24
   221ae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_encrypt_le(k, enc_data, enc_data);
   221b2:	f7ed bc1b 	b.w	f9ec <bt_encrypt_le>
		*r++ = *p++ ^ *q++;
   221b6:	f811 3b01 	ldrb.w	r3, [r1], #1
   221ba:	f812 eb01 	ldrb.w	lr, [r2], #1
   221be:	ea83 030e 	eor.w	r3, r3, lr
   221c2:	f800 3b01 	strb.w	r3, [r0], #1
   221c6:	e7cf      	b.n	22168 <smp_c1+0x44>
   221c8:	f813 2b01 	ldrb.w	r2, [r3], #1
   221cc:	f811 5b01 	ldrb.w	r5, [r1], #1
   221d0:	406a      	eors	r2, r5
   221d2:	f803 2c01 	strb.w	r2, [r3, #-1]
   221d6:	e7e4      	b.n	221a2 <smp_c1+0x7e>
}
   221d8:	b009      	add	sp, #36	; 0x24
   221da:	bdf0      	pop	{r4, r5, r6, r7, pc}

000221dc <legacy_pairing_confirm>:
{
   221dc:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   221de:	f100 07c4 	add.w	r7, r0, #196	; 0xc4
{
   221e2:	b085      	sub	sp, #20
   221e4:	4605      	mov	r5, r0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   221e6:	210a      	movs	r1, #10
   221e8:	4638      	mov	r0, r7
   221ea:	f7ff feaa 	bl	21f42 <atomic_test_bit>
   221ee:	bb90      	cbnz	r0, 22256 <legacy_pairing_confirm+0x7a>
			atomic_set_bit(smp->allowed_cmds,
   221f0:	2104      	movs	r1, #4
   221f2:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
   221f6:	f7ff fdc7 	bl	21d88 <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   221fa:	2103      	movs	r1, #3
   221fc:	4628      	mov	r0, r5
	struct bt_conn *conn = smp->chan.chan.conn;
   221fe:	682c      	ldr	r4, [r5, #0]
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   22200:	f7ff fecd 	bl	21f9e <smp_create_pdu.isra.0>
	if (!buf) {
   22204:	4606      	mov	r6, r0
   22206:	b1c0      	cbz	r0, 2223a <legacy_pairing_confirm+0x5e>
   22208:	2110      	movs	r1, #16
   2220a:	3008      	adds	r0, #8
   2220c:	f000 fa11 	bl	22632 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   22210:	f104 0396 	add.w	r3, r4, #150	; 0x96
   22214:	348f      	adds	r4, #143	; 0x8f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   22216:	9002      	str	r0, [sp, #8]
   22218:	9301      	str	r3, [sp, #4]
   2221a:	9400      	str	r4, [sp, #0]
   2221c:	f105 03d0 	add.w	r3, r5, #208	; 0xd0
   22220:	f105 02c9 	add.w	r2, r5, #201	; 0xc9
   22224:	f105 01e7 	add.w	r1, r5, #231	; 0xe7
   22228:	f205 1007 	addw	r0, r5, #263	; 0x107
   2222c:	f7ff ff7a 	bl	22124 <smp_c1>
   22230:	4604      	mov	r4, r0
   22232:	b120      	cbz	r0, 2223e <legacy_pairing_confirm+0x62>
		net_buf_unref(buf);
   22234:	4630      	mov	r0, r6
   22236:	f7f7 ff99 	bl	1a16c <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   2223a:	2008      	movs	r0, #8
   2223c:	e009      	b.n	22252 <legacy_pairing_confirm+0x76>
	smp_send(smp, buf, NULL, NULL);
   2223e:	4602      	mov	r2, r0
   22240:	4631      	mov	r1, r6
   22242:	4628      	mov	r0, r5
   22244:	f7e9 f8ce 	bl	b3e4 <smp_send.isra.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   22248:	4621      	mov	r1, r4
   2224a:	4638      	mov	r0, r7
   2224c:	f7ff fdc2 	bl	21dd4 <atomic_clear_bit>
	return 0;
   22250:	2000      	movs	r0, #0
}
   22252:	b005      	add	sp, #20
   22254:	bdf0      	pop	{r4, r5, r6, r7, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   22256:	2100      	movs	r1, #0
   22258:	4638      	mov	r0, r7
   2225a:	f7ff fd95 	bl	21d88 <atomic_set_bit>
   2225e:	e7f7      	b.n	22250 <legacy_pairing_confirm+0x74>

00022260 <bt_smp_request_ltk>:
{
   22260:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   22264:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   22268:	e9cd 2300 	strd	r2, r3, [sp]
   2226c:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   2226e:	f7e9 f861 	bl	b334 <smp_chan_get>
	if (!smp) {
   22272:	4605      	mov	r5, r0
   22274:	2800      	cmp	r0, #0
   22276:	f000 8093 	beq.w	223a0 <bt_smp_request_ltk+0x140>
	if (ediv == 0U && rand == 0U &&
   2227a:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   2227e:	f100 07c4 	add.w	r7, r0, #196	; 0xc4
   22282:	f1b9 0f00 	cmp.w	r9, #0
   22286:	d12c      	bne.n	222e2 <bt_smp_request_ltk+0x82>
   22288:	e9dd 2300 	ldrd	r2, r3, [sp]
   2228c:	4313      	orrs	r3, r2
   2228e:	d128      	bne.n	222e2 <bt_smp_request_ltk+0x82>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   22290:	2103      	movs	r1, #3
   22292:	4638      	mov	r0, r7
   22294:	f7ff fe55 	bl	21f42 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   22298:	b318      	cbz	r0, 222e2 <bt_smp_request_ltk+0x82>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2229a:	2101      	movs	r1, #1
   2229c:	4638      	mov	r0, r7
   2229e:	f7ff fe50 	bl	21f42 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   222a2:	4606      	mov	r6, r0
   222a4:	b1e8      	cbz	r0, 222e2 <bt_smp_request_ltk+0x82>
	return MIN(req->max_key_size, rsp->max_key_size);
   222a6:	f895 40d4 	ldrb.w	r4, [r5, #212]	; 0xd4
   222aa:	f895 30cd 	ldrb.w	r3, [r5, #205]	; 0xcd
   222ae:	429c      	cmp	r4, r3
   222b0:	bf28      	it	cs
   222b2:	461c      	movcs	r4, r3
   222b4:	4622      	mov	r2, r4
   222b6:	f205 1107 	addw	r1, r5, #263	; 0x107
   222ba:	4640      	mov	r0, r8
   222bc:	f001 f9d1 	bl	23662 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   222c0:	2c0f      	cmp	r4, #15
   222c2:	d806      	bhi.n	222d2 <bt_smp_request_ltk+0x72>
__ssp_bos_icheck3(memset, void *, int)
   222c4:	f1c4 0210 	rsb	r2, r4, #16
   222c8:	4649      	mov	r1, r9
   222ca:	eb08 0004 	add.w	r0, r8, r4
   222ce:	f001 f9d6 	bl	2367e <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   222d2:	2101      	movs	r1, #1
   222d4:	4638      	mov	r0, r7
   222d6:	f7ff fd57 	bl	21d88 <atomic_set_bit>
}
   222da:	4630      	mov	r0, r6
   222dc:	b003      	add	sp, #12
   222de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   222e2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   222e6:	b983      	cbnz	r3, 2230a <bt_smp_request_ltk+0xaa>
					     &conn->le.dst);
   222e8:	f104 0688 	add.w	r6, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   222ec:	7a21      	ldrb	r1, [r4, #8]
   222ee:	4632      	mov	r2, r6
   222f0:	2020      	movs	r0, #32
   222f2:	f7ea fc2b 	bl	cb4c <bt_keys_find>
   222f6:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   222fa:	b930      	cbnz	r0, 2230a <bt_smp_request_ltk+0xaa>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
   222fc:	7a21      	ldrb	r1, [r4, #8]
   222fe:	4632      	mov	r2, r6
   22300:	2001      	movs	r0, #1
   22302:	f7ea fc23 	bl	cb4c <bt_keys_find>
   22306:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   2230a:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
   2230e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   22312:	b9ee      	cbnz	r6, 22350 <bt_smp_request_ltk+0xf0>
   22314:	e9dd 2300 	ldrd	r2, r3, [sp]
   22318:	4313      	orrs	r3, r2
   2231a:	d119      	bne.n	22350 <bt_smp_request_ltk+0xf0>
   2231c:	b388      	cbz	r0, 22382 <bt_smp_request_ltk+0x122>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   2231e:	89c3      	ldrh	r3, [r0, #14]
   22320:	069a      	lsls	r2, r3, #26
   22322:	d516      	bpl.n	22352 <bt_smp_request_ltk+0xf2>
		enc_size = conn->le.keys->enc_size;
   22324:	7b04      	ldrb	r4, [r0, #12]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   22326:	f100 011a 	add.w	r1, r0, #26
   2232a:	4622      	mov	r2, r4
   2232c:	4640      	mov	r0, r8
   2232e:	f001 f998 	bl	23662 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   22332:	2c0f      	cmp	r4, #15
   22334:	d806      	bhi.n	22344 <bt_smp_request_ltk+0xe4>
__ssp_bos_icheck3(memset, void *, int)
   22336:	f1c4 0210 	rsb	r2, r4, #16
   2233a:	4631      	mov	r1, r6
   2233c:	eb08 0004 	add.w	r0, r8, r4
   22340:	f001 f99d 	bl	2367e <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   22344:	2101      	movs	r1, #1
   22346:	4638      	mov	r0, r7
   22348:	f7ff fd1e 	bl	21d88 <atomic_set_bit>
		return true;
   2234c:	2601      	movs	r6, #1
   2234e:	e7c4      	b.n	222da <bt_smp_request_ltk+0x7a>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   22350:	b1b8      	cbz	r0, 22382 <bt_smp_request_ltk+0x122>
   22352:	89c3      	ldrh	r3, [r0, #14]
   22354:	07db      	lsls	r3, r3, #31
   22356:	d514      	bpl.n	22382 <bt_smp_request_ltk+0x122>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   22358:	2208      	movs	r2, #8
   2235a:	4669      	mov	r1, sp
   2235c:	3040      	adds	r0, #64	; 0x40
   2235e:	f001 f972 	bl	23646 <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   22362:	b970      	cbnz	r0, 22382 <bt_smp_request_ltk+0x122>
	    !memcmp(conn->le.keys->slave_ltk.ediv, &ediv, 2)) {
   22364:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   22368:	2202      	movs	r2, #2
   2236a:	a90a      	add	r1, sp, #40	; 0x28
   2236c:	3048      	adds	r0, #72	; 0x48
   2236e:	f001 f96a 	bl	23646 <memcmp>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   22372:	4606      	mov	r6, r0
   22374:	b928      	cbnz	r0, 22382 <bt_smp_request_ltk+0x122>
		enc_size = conn->le.keys->enc_size;
   22376:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   2237a:	7b0c      	ldrb	r4, [r1, #12]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2237c:	314a      	adds	r1, #74	; 0x4a
   2237e:	4622      	mov	r2, r4
   22380:	e7d4      	b.n	2232c <bt_smp_request_ltk+0xcc>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   22382:	210f      	movs	r1, #15
   22384:	4638      	mov	r0, r7
   22386:	f7ff fddc 	bl	21f42 <atomic_test_bit>
   2238a:	b120      	cbz	r0, 22396 <bt_smp_request_ltk+0x136>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   2238c:	2202      	movs	r2, #2
   2238e:	2106      	movs	r1, #6
   22390:	4620      	mov	r0, r4
   22392:	f7e6 fb4d 	bl	8a30 <bt_conn_security_changed>
	smp_reset(smp);
   22396:	4628      	mov	r0, r5
   22398:	f7ff fe9f 	bl	220da <smp_reset>
	return false;
   2239c:	2600      	movs	r6, #0
   2239e:	e79c      	b.n	222da <bt_smp_request_ltk+0x7a>
		return false;
   223a0:	4606      	mov	r6, r0
   223a2:	e79a      	b.n	222da <bt_smp_request_ltk+0x7a>

000223a4 <bt_smp_sign>:
   223a4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   223a8:	4770      	bx	lr

000223aa <smp_error>:
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   223aa:	f100 03c4 	add.w	r3, r0, #196	; 0xc4
{
   223ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
   223b0:	4605      	mov	r5, r0
   223b2:	460c      	mov	r4, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   223b4:	4618      	mov	r0, r3
   223b6:	2103      	movs	r1, #3
   223b8:	f7ff fdc3 	bl	21f42 <atomic_test_bit>
   223bc:	b1c8      	cbz	r0, 223f2 <smp_error+0x48>
		smp_pairing_complete(smp, reason);
   223be:	4621      	mov	r1, r4
   223c0:	4628      	mov	r0, r5
   223c2:	f7e9 ff6b 	bl	c29c <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   223c6:	2105      	movs	r1, #5
   223c8:	4628      	mov	r0, r5
   223ca:	f7ff fde8 	bl	21f9e <smp_create_pdu.isra.0>
	if (!buf) {
   223ce:	4606      	mov	r6, r0
   223d0:	b1e0      	cbz	r0, 2240c <smp_error+0x62>
   223d2:	2101      	movs	r1, #1
   223d4:	3008      	adds	r0, #8
   223d6:	f000 f92c 	bl	22632 <net_buf_simple_add>
	rsp->reason = reason;
   223da:	7004      	strb	r4, [r0, #0]
   223dc:	2400      	movs	r4, #0
   223de:	6828      	ldr	r0, [r5, #0]
   223e0:	9400      	str	r4, [sp, #0]
   223e2:	4623      	mov	r3, r4
   223e4:	4632      	mov	r2, r6
   223e6:	2106      	movs	r1, #6
   223e8:	f7fe fe93 	bl	21112 <bt_l2cap_send_cb>
	return 0;
   223ec:	4620      	mov	r0, r4
}
   223ee:	b002      	add	sp, #8
   223f0:	bd70      	pop	{r4, r5, r6, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   223f2:	2101      	movs	r1, #1
   223f4:	4618      	mov	r0, r3
   223f6:	f7ff fda4 	bl	21f42 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   223fa:	2800      	cmp	r0, #0
   223fc:	d1df      	bne.n	223be <smp_error+0x14>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   223fe:	210f      	movs	r1, #15
   22400:	4618      	mov	r0, r3
   22402:	f7ff fd9e 	bl	21f42 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   22406:	2800      	cmp	r0, #0
   22408:	d1d9      	bne.n	223be <smp_error+0x14>
   2240a:	e7dc      	b.n	223c6 <smp_error+0x1c>
		return -ENOBUFS;
   2240c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   22410:	e7ed      	b.n	223ee <smp_error+0x44>

00022412 <bt_smp_dhkey_ready>:
{
   22412:	b570      	push	{r4, r5, r6, lr}
   22414:	4604      	mov	r4, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   22416:	2008      	movs	r0, #8
   22418:	f7e8 fffc 	bl	b414 <smp_find>
	if (smp) {
   2241c:	4605      	mov	r5, r0
   2241e:	b1e8      	cbz	r0, 2245c <bt_smp_dhkey_ready+0x4a>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   22420:	f100 06c4 	add.w	r6, r0, #196	; 0xc4
   22424:	2108      	movs	r1, #8
   22426:	4630      	mov	r0, r6
   22428:	f7ff fcd4 	bl	21dd4 <atomic_clear_bit>
	if (!dhkey) {
   2242c:	b3bc      	cbz	r4, 2249e <bt_smp_dhkey_ready+0x8c>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   2242e:	2107      	movs	r1, #7
   22430:	f7ff fcd0 	bl	21dd4 <atomic_clear_bit>
   22434:	4623      	mov	r3, r4
   22436:	f205 1257 	addw	r2, r5, #343	; 0x157
   2243a:	f104 0120 	add.w	r1, r4, #32
   2243e:	f853 0b04 	ldr.w	r0, [r3], #4
   22442:	f842 0b04 	str.w	r0, [r2], #4
   22446:	428b      	cmp	r3, r1
   22448:	d1f9      	bne.n	2243e <bt_smp_dhkey_ready+0x2c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2244a:	210a      	movs	r1, #10
   2244c:	4630      	mov	r0, r6
   2244e:	f7ff fd78 	bl	21f42 <atomic_test_bit>
   22452:	b170      	cbz	r0, 22472 <bt_smp_dhkey_ready+0x60>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   22454:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   22456:	4630      	mov	r0, r6
   22458:	f7ff fc96 	bl	21d88 <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   2245c:	2007      	movs	r0, #7
   2245e:	f7e8 ffd9 	bl	b414 <smp_find>
		if (smp) {
   22462:	4604      	mov	r4, r0
   22464:	b1e8      	cbz	r0, 224a2 <bt_smp_dhkey_ready+0x90>
			err = smp_dhkey_generate(smp);
   22466:	f7e8 ff21 	bl	b2ac <smp_dhkey_generate>
			if (err) {
   2246a:	4601      	mov	r1, r0
   2246c:	b1c8      	cbz	r0, 224a2 <bt_smp_dhkey_ready+0x90>
				smp_error(smp, err);
   2246e:	4620      	mov	r0, r4
   22470:	e012      	b.n	22498 <bt_smp_dhkey_ready+0x86>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   22472:	2110      	movs	r1, #16
   22474:	4630      	mov	r0, r6
   22476:	f7ff fd64 	bl	21f42 <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2247a:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   2247c:	2800      	cmp	r0, #0
   2247e:	d1ea      	bne.n	22456 <bt_smp_dhkey_ready+0x44>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   22480:	4630      	mov	r0, r6
   22482:	f7ff fd5e 	bl	21f42 <atomic_test_bit>
   22486:	2800      	cmp	r0, #0
   22488:	d0e8      	beq.n	2245c <bt_smp_dhkey_ready+0x4a>
		return  compute_and_check_and_send_slave_dhcheck(smp);
   2248a:	4628      	mov	r0, r5
   2248c:	f7e8 ffd0 	bl	b430 <compute_and_check_and_send_slave_dhcheck>
		if (err) {
   22490:	4601      	mov	r1, r0
   22492:	2800      	cmp	r0, #0
   22494:	d0e2      	beq.n	2245c <bt_smp_dhkey_ready+0x4a>
			smp_error(smp, err);
   22496:	4628      	mov	r0, r5
   22498:	f7ff ff87 	bl	223aa <smp_error>
   2249c:	e7de      	b.n	2245c <bt_smp_dhkey_ready+0x4a>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   2249e:	210b      	movs	r1, #11
   224a0:	e7f9      	b.n	22496 <bt_smp_dhkey_ready+0x84>
}
   224a2:	bd70      	pop	{r4, r5, r6, pc}

000224a4 <bt_smp_disconnected>:
{
   224a4:	b538      	push	{r3, r4, r5, lr}
	struct bt_keys *keys = chan->conn->le.keys;
   224a6:	6803      	ldr	r3, [r0, #0]
{
   224a8:	4604      	mov	r4, r0
	k_delayed_work_cancel(&smp->work);
   224aa:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
	struct bt_keys *keys = chan->conn->le.keys;
   224ae:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
	k_delayed_work_cancel(&smp->work);
   224b2:	f7ff fc7e 	bl	21db2 <k_delayed_work_cancel>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   224b6:	f104 03c4 	add.w	r3, r4, #196	; 0xc4
   224ba:	2103      	movs	r1, #3
   224bc:	4618      	mov	r0, r3
   224be:	f7ff fd40 	bl	21f42 <atomic_test_bit>
   224c2:	b1a0      	cbz	r0, 224ee <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   224c4:	2108      	movs	r1, #8
   224c6:	4620      	mov	r0, r4
   224c8:	f7e9 fee8 	bl	c29c <smp_pairing_complete>
	if (keys) {
   224cc:	b13d      	cbz	r5, 224de <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   224ce:	89eb      	ldrh	r3, [r5, #14]
   224d0:	b113      	cbz	r3, 224d8 <bt_smp_disconnected+0x34>
   224d2:	7b6b      	ldrb	r3, [r5, #13]
   224d4:	079b      	lsls	r3, r3, #30
   224d6:	d502      	bpl.n	224de <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   224d8:	4628      	mov	r0, r5
   224da:	f000 f845 	bl	22568 <bt_keys_clear>
__ssp_bos_icheck3(memset, void *, int)
   224de:	4620      	mov	r0, r4
   224e0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
}
   224e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   224e8:	2100      	movs	r1, #0
   224ea:	f001 b8c8 	b.w	2367e <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   224ee:	2101      	movs	r1, #1
   224f0:	4618      	mov	r0, r3
   224f2:	f7ff fd26 	bl	21f42 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   224f6:	2800      	cmp	r0, #0
   224f8:	d1e4      	bne.n	224c4 <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   224fa:	210f      	movs	r1, #15
   224fc:	4618      	mov	r0, r3
   224fe:	f7ff fd20 	bl	21f42 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   22502:	2800      	cmp	r0, #0
   22504:	d1de      	bne.n	224c4 <bt_smp_disconnected+0x20>
   22506:	e7e1      	b.n	224cc <bt_smp_disconnected+0x28>

00022508 <smp_ident_sent>:
{
   22508:	b508      	push	{r3, lr}
	if (conn->type == BT_CONN_TYPE_LE) {
   2250a:	7883      	ldrb	r3, [r0, #2]
   2250c:	2b01      	cmp	r3, #1
   2250e:	d10f      	bne.n	22530 <smp_ident_sent+0x28>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   22510:	2106      	movs	r1, #6
   22512:	f7fe fe17 	bl	21144 <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
   22516:	f890 21a8 	ldrb.w	r2, [r0, #424]	; 0x1a8
   2251a:	f022 0201 	bic.w	r2, r2, #1
   2251e:	f880 21a8 	strb.w	r2, [r0, #424]	; 0x1a8
		if (!smp->local_dist && !smp->remote_dist) {
   22522:	f8b0 11a8 	ldrh.w	r1, [r0, #424]	; 0x1a8
   22526:	b919      	cbnz	r1, 22530 <smp_ident_sent+0x28>
}
   22528:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			smp_pairing_complete(smp, 0);
   2252c:	f7e9 beb6 	b.w	c29c <smp_pairing_complete>
}
   22530:	bd08      	pop	{r3, pc}

00022532 <bt_addr_le_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   22532:	680b      	ldr	r3, [r1, #0]
   22534:	6003      	str	r3, [r0, #0]
   22536:	888b      	ldrh	r3, [r1, #4]
   22538:	8083      	strh	r3, [r0, #4]
   2253a:	798b      	ldrb	r3, [r1, #6]
   2253c:	7183      	strb	r3, [r0, #6]
   2253e:	4770      	bx	lr

00022540 <bt_keys_get_type>:
{
   22540:	b570      	push	{r4, r5, r6, lr}
   22542:	4604      	mov	r4, r0
   22544:	460d      	mov	r5, r1
   22546:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   22548:	f7ea fb00 	bl	cb4c <bt_keys_find>
	if (keys) {
   2254c:	b938      	cbnz	r0, 2255e <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   2254e:	4631      	mov	r1, r6
   22550:	4628      	mov	r0, r5
   22552:	f7ea fac5 	bl	cae0 <bt_keys_get_addr>
	if (!keys) {
   22556:	b110      	cbz	r0, 2255e <bt_keys_get_type+0x1e>

void bt_keys_add_type(struct bt_keys *keys, int type)
{
	keys->keys |= type;
   22558:	89c3      	ldrh	r3, [r0, #14]
   2255a:	431c      	orrs	r4, r3
   2255c:	81c4      	strh	r4, [r0, #14]
}
   2255e:	bd70      	pop	{r4, r5, r6, pc}

00022560 <bt_keys_add_type>:
	keys->keys |= type;
   22560:	89c3      	ldrh	r3, [r0, #14]
   22562:	4319      	orrs	r1, r3
   22564:	81c1      	strh	r1, [r0, #14]
}
   22566:	4770      	bx	lr

00022568 <bt_keys_clear>:

void bt_keys_clear(struct bt_keys *keys)
{
   22568:	b510      	push	{r4, lr}
	BT_DBG("%s (keys 0x%04x)", bt_addr_le_str(&keys->addr), keys->keys);

	if (keys->state & BT_KEYS_ID_ADDED) {
   2256a:	7a03      	ldrb	r3, [r0, #8]
   2256c:	075b      	lsls	r3, r3, #29
{
   2256e:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   22570:	d501      	bpl.n	22576 <bt_keys_clear+0xe>
		bt_id_del(keys);
   22572:	f7e5 fae7 	bl	7b44 <bt_id_del>
__ssp_bos_icheck3(memset, void *, int)
   22576:	4620      	mov	r0, r4
   22578:	225c      	movs	r2, #92	; 0x5c
		BT_DBG("Deleting key %s", log_strdup(key));
		settings_delete(key);
	}

	(void)memset(keys, 0, sizeof(*keys));
}
   2257a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2257e:	2100      	movs	r1, #0
   22580:	f001 b87d 	b.w	2367e <memset>

00022584 <fixed_data_unref>:
}
   22584:	4770      	bx	lr

00022586 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   22586:	6a01      	ldr	r1, [r0, #32]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   22588:	6849      	ldr	r1, [r1, #4]
   2258a:	6809      	ldr	r1, [r1, #0]
   2258c:	f7f7 bd62 	b.w	1a054 <net_buf_alloc_len>

00022590 <net_buf_get>:
{
   22590:	b570      	push	{r4, r5, r6, lr}
   22592:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   22594:	f7fa fd0c 	bl	1cfb0 <z_impl_k_queue_get>
	if (!buf) {
   22598:	4605      	mov	r5, r0
   2259a:	b128      	cbz	r0, 225a8 <net_buf_get+0x18>
   2259c:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   2259e:	7963      	ldrb	r3, [r4, #5]
   225a0:	f013 0301 	ands.w	r3, r3, #1
   225a4:	d102      	bne.n	225ac <net_buf_get+0x1c>
	frag->frags = NULL;
   225a6:	6023      	str	r3, [r4, #0]
}
   225a8:	4628      	mov	r0, r5
   225aa:	bd70      	pop	{r4, r5, r6, pc}
   225ac:	2300      	movs	r3, #0
   225ae:	2200      	movs	r2, #0
   225b0:	4630      	mov	r0, r6
   225b2:	f7fa fcfd 	bl	1cfb0 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   225b6:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   225b8:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   225ba:	f023 0301 	bic.w	r3, r3, #1
   225be:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   225c0:	4604      	mov	r4, r0
   225c2:	e7ec      	b.n	2259e <net_buf_get+0xe>

000225c4 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   225c4:	6883      	ldr	r3, [r0, #8]
   225c6:	440b      	add	r3, r1
   225c8:	6003      	str	r3, [r0, #0]
}
   225ca:	4770      	bx	lr

000225cc <net_buf_put>:
{
   225cc:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   225ce:	460a      	mov	r2, r1
   225d0:	6814      	ldr	r4, [r2, #0]
   225d2:	b914      	cbnz	r4, 225da <net_buf_put+0xe>
}
   225d4:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   225d6:	f000 bc26 	b.w	22e26 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   225da:	7953      	ldrb	r3, [r2, #5]
   225dc:	f043 0301 	orr.w	r3, r3, #1
   225e0:	7153      	strb	r3, [r2, #5]
   225e2:	4622      	mov	r2, r4
   225e4:	e7f4      	b.n	225d0 <net_buf_put+0x4>

000225e6 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   225e6:	7902      	ldrb	r2, [r0, #4]
   225e8:	3201      	adds	r2, #1
   225ea:	7102      	strb	r2, [r0, #4]
	return buf;
}
   225ec:	4770      	bx	lr

000225ee <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   225ee:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   225f0:	4618      	mov	r0, r3
   225f2:	681b      	ldr	r3, [r3, #0]
   225f4:	2b00      	cmp	r3, #0
   225f6:	d1fb      	bne.n	225f0 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   225f8:	4770      	bx	lr

000225fa <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   225fa:	6802      	ldr	r2, [r0, #0]
{
   225fc:	b510      	push	{r4, lr}
	if (parent->frags) {
   225fe:	b12a      	cbz	r2, 2260c <net_buf_frag_insert+0x12>
   22600:	460b      	mov	r3, r1
	while (buf->frags) {
   22602:	461c      	mov	r4, r3
   22604:	681b      	ldr	r3, [r3, #0]
   22606:	2b00      	cmp	r3, #0
   22608:	d1fb      	bne.n	22602 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   2260a:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   2260c:	6001      	str	r1, [r0, #0]
}
   2260e:	bd10      	pop	{r4, pc}

00022610 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   22610:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   22612:	4604      	mov	r4, r0
   22614:	b920      	cbnz	r0, 22620 <net_buf_frag_add+0x10>
	buf->ref++;
   22616:	790b      	ldrb	r3, [r1, #4]
   22618:	3301      	adds	r3, #1
   2261a:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   2261c:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   2261e:	bd10      	pop	{r4, pc}
   22620:	4603      	mov	r3, r0
	while (buf->frags) {
   22622:	4618      	mov	r0, r3
   22624:	681b      	ldr	r3, [r3, #0]
   22626:	2b00      	cmp	r3, #0
   22628:	d1fb      	bne.n	22622 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   2262a:	f7ff ffe6 	bl	225fa <net_buf_frag_insert>
   2262e:	4620      	mov	r0, r4
   22630:	e7f5      	b.n	2261e <net_buf_frag_add+0xe>

00022632 <net_buf_simple_add>:
	return buf->data + buf->len;
   22632:	8883      	ldrh	r3, [r0, #4]
   22634:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   22636:	4419      	add	r1, r3
   22638:	8081      	strh	r1, [r0, #4]
	return tail;
}
   2263a:	18d0      	adds	r0, r2, r3
   2263c:	4770      	bx	lr

0002263e <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   2263e:	b510      	push	{r4, lr}
   22640:	6803      	ldr	r3, [r0, #0]
   22642:	8884      	ldrh	r4, [r0, #4]
   22644:	4423      	add	r3, r4
	buf->len += len;
   22646:	4414      	add	r4, r2
   22648:	8084      	strh	r4, [r0, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2264a:	4618      	mov	r0, r3
   2264c:	f001 f809 	bl	23662 <memcpy>
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
}
   22650:	bd10      	pop	{r4, pc}

00022652 <net_buf_simple_add_u8>:
   22652:	8883      	ldrh	r3, [r0, #4]
   22654:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   22656:	b510      	push	{r4, lr}
	buf->len += len;
   22658:	1c5c      	adds	r4, r3, #1
   2265a:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   2265c:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   2265e:	18d0      	adds	r0, r2, r3
   22660:	bd10      	pop	{r4, pc}

00022662 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   22662:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   22664:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   22666:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   22668:	1a40      	subs	r0, r0, r1
	buf->len += len;
   2266a:	4411      	add	r1, r2
	buf->data -= len;
   2266c:	6018      	str	r0, [r3, #0]
	buf->len += len;
   2266e:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   22670:	4770      	bx	lr

00022672 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   22672:	8882      	ldrh	r2, [r0, #4]
   22674:	1a52      	subs	r2, r2, r1
{
   22676:	4603      	mov	r3, r0
	buf->len -= len;
   22678:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   2267a:	6800      	ldr	r0, [r0, #0]
   2267c:	4408      	add	r0, r1
   2267e:	6018      	str	r0, [r3, #0]
}
   22680:	4770      	bx	lr

00022682 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   22682:	4603      	mov	r3, r0
	void *data = buf->data;
   22684:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   22686:	889a      	ldrh	r2, [r3, #4]
   22688:	1a52      	subs	r2, r2, r1
	buf->data += len;
   2268a:	4401      	add	r1, r0
	buf->len -= len;
   2268c:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   2268e:	6019      	str	r1, [r3, #0]

	return data;
}
   22690:	4770      	bx	lr

00022692 <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   22692:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   22694:	6803      	ldr	r3, [r0, #0]
   22696:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   22698:	2102      	movs	r1, #2
   2269a:	f7ff ffea 	bl	22672 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   2269e:	4620      	mov	r0, r4
   226a0:	bd10      	pop	{r4, pc}

000226a2 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   226a2:	6802      	ldr	r2, [r0, #0]
   226a4:	6880      	ldr	r0, [r0, #8]
}
   226a6:	1a10      	subs	r0, r2, r0
   226a8:	4770      	bx	lr

000226aa <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   226aa:	8883      	ldrh	r3, [r0, #4]
   226ac:	88c2      	ldrh	r2, [r0, #6]
   226ae:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   226b0:	6803      	ldr	r3, [r0, #0]
   226b2:	6880      	ldr	r0, [r0, #8]
   226b4:	1a18      	subs	r0, r3, r0
}
   226b6:	1a10      	subs	r0, r2, r0
   226b8:	4770      	bx	lr

000226ba <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
   226ba:	b570      	push	{r4, r5, r6, lr}
   226bc:	460e      	mov	r6, r1
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   226be:	6801      	ldr	r1, [r0, #0]
{
   226c0:	4615      	mov	r5, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   226c2:	b189      	cbz	r1, 226e8 <gpio_fire_callbacks+0x2e>
	return node->next;
   226c4:	680c      	ldr	r4, [r1, #0]
   226c6:	2c00      	cmp	r4, #0
   226c8:	bf38      	it	cc
   226ca:	2400      	movcc	r4, #0
		if (cb->pin_mask & pins) {
   226cc:	688a      	ldr	r2, [r1, #8]
   226ce:	402a      	ands	r2, r5
   226d0:	d002      	beq.n	226d8 <gpio_fire_callbacks+0x1e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   226d2:	684b      	ldr	r3, [r1, #4]
   226d4:	4630      	mov	r0, r6
   226d6:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   226d8:	b134      	cbz	r4, 226e8 <gpio_fire_callbacks+0x2e>
   226da:	6823      	ldr	r3, [r4, #0]
   226dc:	2b00      	cmp	r3, #0
   226de:	bf38      	it	cc
   226e0:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   226e2:	4621      	mov	r1, r4
   226e4:	461c      	mov	r4, r3
   226e6:	e7f1      	b.n	226cc <gpio_fire_callbacks+0x12>
		}
	}
}
   226e8:	bd70      	pop	{r4, r5, r6, pc}

000226ea <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   226ea:	6843      	ldr	r3, [r0, #4]
   226ec:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   226ee:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   226f2:	600b      	str	r3, [r1, #0]
}
   226f4:	2000      	movs	r0, #0
   226f6:	4770      	bx	lr

000226f8 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   226f8:	6843      	ldr	r3, [r0, #4]
   226fa:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   226fc:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   22700:	4042      	eors	r2, r0
   22702:	400a      	ands	r2, r1
   22704:	4042      	eors	r2, r0
    p_reg->OUT = value;
   22706:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   2270a:	2000      	movs	r0, #0
   2270c:	4770      	bx	lr

0002270e <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2270e:	6843      	ldr	r3, [r0, #4]
   22710:	685b      	ldr	r3, [r3, #4]
}
   22712:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   22714:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   22718:	4770      	bx	lr

0002271a <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2271a:	6843      	ldr	r3, [r0, #4]
   2271c:	685b      	ldr	r3, [r3, #4]
}
   2271e:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   22720:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   22724:	4770      	bx	lr

00022726 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   22726:	6843      	ldr	r3, [r0, #4]
   22728:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2272a:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   2272e:	404b      	eors	r3, r1
    p_reg->OUT = value;
   22730:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   22734:	2000      	movs	r0, #0
   22736:	4770      	bx	lr

00022738 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   22738:	6903      	ldr	r3, [r0, #16]
Z_GENLIST_IS_EMPTY(slist)
   2273a:	6858      	ldr	r0, [r3, #4]
{
   2273c:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   2273e:	b158      	cbz	r0, 22758 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   22740:	2400      	movs	r4, #0
   22742:	4281      	cmp	r1, r0
   22744:	d113      	bne.n	2276e <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   22746:	6808      	ldr	r0, [r1, #0]
   22748:	b95c      	cbnz	r4, 22762 <gpio_nrfx_manage_callback+0x2a>
   2274a:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   2274c:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   2274e:	42a1      	cmp	r1, r4
   22750:	d100      	bne.n	22754 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   22752:	6098      	str	r0, [r3, #8]
	parent->next = child;
   22754:	2000      	movs	r0, #0
   22756:	6008      	str	r0, [r1, #0]
	if (set) {
   22758:	b972      	cbnz	r2, 22778 <gpio_nrfx_manage_callback+0x40>
	return 0;
   2275a:	2000      	movs	r0, #0
}
   2275c:	bd30      	pop	{r4, r5, pc}
   2275e:	4628      	mov	r0, r5
   22760:	e7ef      	b.n	22742 <gpio_nrfx_manage_callback+0xa>
   22762:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   22764:	6898      	ldr	r0, [r3, #8]
   22766:	4281      	cmp	r1, r0
	list->tail = node;
   22768:	bf08      	it	eq
   2276a:	609c      	streq	r4, [r3, #8]
}
   2276c:	e7f2      	b.n	22754 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2276e:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   22770:	4604      	mov	r4, r0
   22772:	2d00      	cmp	r5, #0
   22774:	d1f3      	bne.n	2275e <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   22776:	b13a      	cbz	r2, 22788 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   22778:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2277a:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   2277c:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   2277e:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   22780:	2800      	cmp	r0, #0
   22782:	d1ea      	bne.n	2275a <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   22784:	6099      	str	r1, [r3, #8]
}
   22786:	e7e9      	b.n	2275c <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   22788:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   2278c:	e7e6      	b.n	2275c <gpio_nrfx_manage_callback+0x24>

0002278e <cfg_level_pins>:
{
   2278e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct gpio_nrfx_data *data = get_port_data(port);
   22792:	6907      	ldr	r7, [r0, #16]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   22794:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   22798:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   2279a:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
   2279e:	4313      	orrs	r3, r2
   227a0:	ea24 0403 	bic.w	r4, r4, r3
	uint32_t bit = 1U << pin;
   227a4:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   227a6:	2500      	movs	r5, #0
	while (level_pins) {
   227a8:	b90c      	cbnz	r4, 227ae <cfg_level_pins+0x20>
}
   227aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   227ae:	4226      	tst	r6, r4
   227b0:	d010      	beq.n	227d4 <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   227b2:	6939      	ldr	r1, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   227b4:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   227b8:	40e9      	lsrs	r1, r5
   227ba:	f001 0101 	and.w	r1, r1, #1
   227be:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   227c2:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   227c6:	b2c9      	uxtb	r1, r1
   227c8:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   227cc:	f7f7 fd7a 	bl	1a2c4 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   227d0:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   227d4:	3501      	adds	r5, #1
		bit <<= 1;
   227d6:	0076      	lsls	r6, r6, #1
   227d8:	e7e6      	b.n	227a8 <cfg_level_pins+0x1a>

000227da <gpio_pin_set>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   227da:	2301      	movs	r3, #1
   227dc:	fa03 f101 	lsl.w	r1, r3, r1
   227e0:	6903      	ldr	r3, [r0, #16]
   227e2:	681b      	ldr	r3, [r3, #0]
   227e4:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   227e6:	bf18      	it	ne
   227e8:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   227ec:	b112      	cbz	r2, 227f4 <gpio_pin_set+0x1a>
	return api->port_set_bits_raw(port, pins);
   227ee:	6883      	ldr	r3, [r0, #8]
   227f0:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   227f2:	4718      	bx	r3
   227f4:	6883      	ldr	r3, [r0, #8]
   227f6:	691b      	ldr	r3, [r3, #16]
   227f8:	e7fb      	b.n	227f2 <gpio_pin_set+0x18>

000227fa <_spi_context_cs_control.isra.0>:
static inline void _spi_context_cs_control(struct spi_context *ctx,
   227fa:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   227fc:	6805      	ldr	r5, [r0, #0]
static inline void _spi_context_cs_control(struct spi_context *ctx,
   227fe:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   22800:	b1fd      	cbz	r5, 22842 <_spi_context_cs_control.isra.0+0x48>
   22802:	68ab      	ldr	r3, [r5, #8]
   22804:	b1eb      	cbz	r3, 22842 <_spi_context_cs_control.isra.0+0x48>
   22806:	6818      	ldr	r0, [r3, #0]
   22808:	b1d8      	cbz	r0, 22842 <_spi_context_cs_control.isra.0+0x48>
		if (on) {
   2280a:	b151      	cbz	r1, 22822 <_spi_context_cs_control.isra.0+0x28>
			gpio_pin_set(ctx->config->cs->gpio_dev,
   2280c:	7a19      	ldrb	r1, [r3, #8]
   2280e:	2201      	movs	r2, #1
   22810:	f7ff ffe3 	bl	227da <gpio_pin_set>
			k_busy_wait(ctx->config->cs->delay);
   22814:	6823      	ldr	r3, [r4, #0]
   22816:	689b      	ldr	r3, [r3, #8]
   22818:	6858      	ldr	r0, [r3, #4]
}
   2281a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   2281e:	f000 bc6c 	b.w	230fa <z_impl_k_busy_wait>
			if (!force_off &&
   22822:	b912      	cbnz	r2, 2282a <_spi_context_cs_control.isra.0+0x30>
   22824:	88aa      	ldrh	r2, [r5, #4]
   22826:	0492      	lsls	r2, r2, #18
   22828:	d40b      	bmi.n	22842 <_spi_context_cs_control.isra.0+0x48>
			k_busy_wait(ctx->config->cs->delay);
   2282a:	6858      	ldr	r0, [r3, #4]
   2282c:	f000 fc65 	bl	230fa <z_impl_k_busy_wait>
			gpio_pin_set(ctx->config->cs->gpio_dev,
   22830:	6823      	ldr	r3, [r4, #0]
   22832:	689b      	ldr	r3, [r3, #8]
   22834:	2200      	movs	r2, #0
   22836:	7a19      	ldrb	r1, [r3, #8]
   22838:	6818      	ldr	r0, [r3, #0]
}
   2283a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set(ctx->config->cs->gpio_dev,
   2283e:	f7ff bfcc 	b.w	227da <gpio_pin_set>
}
   22842:	bd38      	pop	{r3, r4, r5, pc}

00022844 <spi_context_unlock_unconditionally>:
{
   22844:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   22846:	2201      	movs	r2, #1
   22848:	2100      	movs	r1, #0
{
   2284a:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   2284c:	f7ff ffd5 	bl	227fa <_spi_context_cs_control.isra.0>
	if (!k_sem_count_get(&ctx->lock)) {
   22850:	6923      	ldr	r3, [r4, #16]
   22852:	b933      	cbnz	r3, 22862 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
   22854:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   22856:	f104 0008 	add.w	r0, r4, #8
}
   2285a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2285e:	f7fa bf5d 	b.w	1d71c <z_impl_k_sem_give>
   22862:	bd10      	pop	{r4, pc}

00022864 <spi_nrfx_release>:
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   22864:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   22866:	6803      	ldr	r3, [r0, #0]
   22868:	428b      	cmp	r3, r1
{
   2286a:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   2286c:	d106      	bne.n	2287c <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   2286e:	f890 4064 	ldrb.w	r4, [r0, #100]	; 0x64
   22872:	b934      	cbnz	r4, 22882 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   22874:	f7ff ffe6 	bl	22844 <spi_context_unlock_unconditionally>
	return 0;
   22878:	4620      	mov	r0, r4
}
   2287a:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2287c:	f06f 0015 	mvn.w	r0, #21
   22880:	e7fb      	b.n	2287a <spi_nrfx_release+0x16>
		return -EBUSY;
   22882:	f06f 000f 	mvn.w	r0, #15
   22886:	e7f8      	b.n	2287a <spi_nrfx_release+0x16>

00022888 <timer_work_handler>:
	TimerIrqHandler();
   22888:	f7f9 ba5e 	b.w	1bd48 <TimerIrqHandler>

0002288c <k_uptime_get>:
{
   2288c:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   2288e:	f000 fd44 	bl	2331a <z_impl_k_uptime_ticks>
   22892:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   22896:	fba0 2304 	umull	r2, r3, r0, r4
   2289a:	fb04 3301 	mla	r3, r4, r1, r3
   2289e:	0bd0      	lsrs	r0, r2, #15
}
   228a0:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   228a4:	0bd9      	lsrs	r1, r3, #15
   228a6:	bd10      	pop	{r4, pc}

000228a8 <RtcGetTimerValue>:
{
   228a8:	b508      	push	{r3, lr}
	return (uint32_t)k_uptime_get();
   228aa:	f7ff ffef 	bl	2288c <k_uptime_get>
}
   228ae:	bd08      	pop	{r3, pc}

000228b0 <RtcGetMinimumTimeout>:
}
   228b0:	2001      	movs	r0, #1
   228b2:	4770      	bx	lr

000228b4 <DelayMsMcu>:

void DelayMsMcu(uint32_t ms)
{
   228b4:	b538      	push	{r3, r4, r5, lr}
   228b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   228ba:	f240 34e7 	movw	r4, #999	; 0x3e7
   228be:	2500      	movs	r5, #0
   228c0:	fbe1 4500 	umlal	r4, r5, r1, r0
   228c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   228c8:	2300      	movs	r3, #0
   228ca:	4620      	mov	r0, r4
   228cc:	4629      	mov	r1, r5
   228ce:	f7de f8b5 	bl	a3c <__aeabi_uldivmod>
	k_sleep(K_MSEC(ms));
}
   228d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return z_impl_k_sleep(timeout);
   228d6:	f7fa be85 	b.w	1d5e4 <z_impl_k_sleep>

000228da <RtcMs2Tick>:

uint32_t RtcMs2Tick(uint32_t milliseconds)
{
	return milliseconds;
}
   228da:	4770      	bx	lr

000228dc <RtcTick2Ms>:
   228dc:	4770      	bx	lr

000228de <BoardCriticalSectionBegin>:
	__asm__ volatile(
   228de:	f04f 0220 	mov.w	r2, #32
   228e2:	f3ef 8311 	mrs	r3, BASEPRI
   228e6:	f382 8811 	msr	BASEPRI, r2
   228ea:	f3bf 8f6f 	isb	sy
	return tick;
}

void BoardCriticalSectionBegin(uint32_t *mask)
{
	*mask = irq_lock();
   228ee:	6003      	str	r3, [r0, #0]
}
   228f0:	4770      	bx	lr

000228f2 <BoardCriticalSectionEnd>:
	__asm__ volatile(
   228f2:	6803      	ldr	r3, [r0, #0]
   228f4:	f383 8811 	msr	BASEPRI, r3
   228f8:	f3bf 8f6f 	isb	sy

void BoardCriticalSectionEnd(uint32_t *mask)
{
	irq_unlock(*mask);
}
   228fc:	4770      	bx	lr

000228fe <z_impl_gpio_pin_interrupt_configure>:
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   228fe:	0413      	lsls	r3, r2, #16
{
   22900:	b430      	push	{r4, r5}
	const struct gpio_driver_api *api =
   22902:	6884      	ldr	r4, [r0, #8]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   22904:	d507      	bpl.n	22916 <z_impl_gpio_pin_interrupt_configure+0x18>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   22906:	6905      	ldr	r5, [r0, #16]
   22908:	2301      	movs	r3, #1
   2290a:	682d      	ldr	r5, [r5, #0]
   2290c:	408b      	lsls	r3, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   2290e:	422b      	tst	r3, r5
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   22910:	bf18      	it	ne
   22912:	f482 22c0 	eorne.w	r2, r2, #393216	; 0x60000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   22916:	69a4      	ldr	r4, [r4, #24]
   22918:	f402 23c0 	and.w	r3, r2, #393216	; 0x60000
   2291c:	46a4      	mov	ip, r4
   2291e:	f402 32b0 	and.w	r2, r2, #90112	; 0x16000
}
   22922:	bc30      	pop	{r4, r5}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   22924:	4760      	bx	ip

00022926 <SX1276CheckRfFrequency>:
}
   22926:	2001      	movs	r0, #1
   22928:	4770      	bx	lr

0002292a <gpio_pin_set.constprop.0>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   2292a:	6903      	ldr	r3, [r0, #16]
   2292c:	681b      	ldr	r3, [r3, #0]
   2292e:	05db      	lsls	r3, r3, #23
		value = (value != 0) ? 0 : 1;
   22930:	bf48      	it	mi
   22932:	f081 0101 	eormi.w	r1, r1, #1
	if (value != 0)	{
   22936:	b121      	cbz	r1, 22942 <gpio_pin_set.constprop.0+0x18>
	return api->port_set_bits_raw(port, pins);
   22938:	6883      	ldr	r3, [r0, #8]
   2293a:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   2293c:	f44f 7180 	mov.w	r1, #256	; 0x100
   22940:	4718      	bx	r3
   22942:	6883      	ldr	r3, [r0, #8]
   22944:	691b      	ldr	r3, [r3, #16]
   22946:	e7f9      	b.n	2293c <gpio_pin_set.constprop.0+0x12>

00022948 <SX1276GetBoardTcxoWakeupTime>:
}
   22948:	2000      	movs	r0, #0
   2294a:	4770      	bx	lr

0002294c <SX1276SetAntSwLowPower>:
}
   2294c:	4770      	bx	lr

0002294e <SX1276SetBoardTcxo>:
}
   2294e:	4770      	bx	lr

00022950 <SX1276SetAntSw>:
   22950:	4770      	bx	lr

00022952 <SX1276Write>:
{
   22952:	b507      	push	{r0, r1, r2, lr}
    SX1276WriteBuffer( addr, &data, 1 );
   22954:	2201      	movs	r2, #1
{
   22956:	f88d 1007 	strb.w	r1, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
   2295a:	f10d 0107 	add.w	r1, sp, #7
   2295e:	f7f8 fb91 	bl	1b084 <SX1276WriteBuffer>
}
   22962:	b003      	add	sp, #12
   22964:	f85d fb04 	ldr.w	pc, [sp], #4

00022968 <SX1276Read>:
{
   22968:	b507      	push	{r0, r1, r2, lr}
    SX1276ReadBuffer( addr, &data, 1 );
   2296a:	2201      	movs	r2, #1
   2296c:	f10d 0107 	add.w	r1, sp, #7
   22970:	f7f8 fac2 	bl	1aef8 <SX1276ReadBuffer>
}
   22974:	f89d 0007 	ldrb.w	r0, [sp, #7]
   22978:	b003      	add	sp, #12
   2297a:	f85d fb04 	ldr.w	pc, [sp], #4

0002297e <SX1276SetOpMode>:
{
   2297e:	b510      	push	{r4, lr}
    if( opMode == RF_OPMODE_SLEEP )
   22980:	4604      	mov	r4, r0
        SX1276SetAntSwLowPower( true );
   22982:	2001      	movs	r0, #1
    if( opMode == RF_OPMODE_SLEEP )
   22984:	b964      	cbnz	r4, 229a0 <SX1276SetOpMode+0x22>
        SX1276SetAntSwLowPower( true );
   22986:	f7ff ffe1 	bl	2294c <SX1276SetAntSwLowPower>
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
   2298a:	2001      	movs	r0, #1
   2298c:	f7ff ffec 	bl	22968 <SX1276Read>
   22990:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
   22994:	4321      	orrs	r1, r4
   22996:	2001      	movs	r0, #1
}
   22998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
   2299c:	f7ff bfd9 	b.w	22952 <SX1276Write>
        SX1276SetBoardTcxo( true );
   229a0:	f7ff ffd5 	bl	2294e <SX1276SetBoardTcxo>
        SX1276SetAntSwLowPower( false );
   229a4:	2000      	movs	r0, #0
   229a6:	f7ff ffd1 	bl	2294c <SX1276SetAntSwLowPower>
        SX1276SetAntSw( opMode );
   229aa:	4620      	mov	r0, r4
   229ac:	f7ff ffd0 	bl	22950 <SX1276SetAntSw>
   229b0:	e7eb      	b.n	2298a <SX1276SetOpMode+0xc>

000229b2 <SX1276IsChannelFree>:
{
   229b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   229b4:	4604      	mov	r4, r0
   229b6:	460e      	mov	r6, r1
   229b8:	4617      	mov	r7, r2
   229ba:	461d      	mov	r5, r3
    SX1276SetSleep( );
   229bc:	f7f8 fc36 	bl	1b22c <SX1276SetSleep>
    SX1276SetModem( modem );
   229c0:	4620      	mov	r0, r4
   229c2:	f7f8 fdcf 	bl	1b564 <SX1276SetModem>
    SX1276SetChannel( freq );
   229c6:	4630      	mov	r0, r6
   229c8:	f7df fc16 	bl	21f8 <SX1276SetChannel>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
   229cc:	2005      	movs	r0, #5
   229ce:	f7ff ffd6 	bl	2297e <SX1276SetOpMode>
    DelayMs( 1 );
   229d2:	2001      	movs	r0, #1
   229d4:	f000 f887 	bl	22ae6 <DelayMs>
    carrierSenseTime = TimerGetCurrentTime( );
   229d8:	f000 f86f 	bl	22aba <TimerGetCurrentTime>
   229dc:	4606      	mov	r6, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
   229de:	4630      	mov	r0, r6
   229e0:	f000 f872 	bl	22ac8 <TimerGetElapsedTime>
   229e4:	42a8      	cmp	r0, r5
   229e6:	d304      	bcc.n	229f2 <SX1276IsChannelFree+0x40>
    bool status = true;
   229e8:	2401      	movs	r4, #1
    SX1276SetSleep( );
   229ea:	f7f8 fc1f 	bl	1b22c <SX1276SetSleep>
}
   229ee:	4620      	mov	r0, r4
   229f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rssi = SX1276ReadRssi( modem );
   229f2:	4620      	mov	r0, r4
   229f4:	f7f8 fbf6 	bl	1b1e4 <SX1276ReadRssi>
        if( rssi > rssiThresh )
   229f8:	42b8      	cmp	r0, r7
   229fa:	ddf0      	ble.n	229de <SX1276IsChannelFree+0x2c>
            status = false;
   229fc:	2400      	movs	r4, #0
   229fe:	e7f4      	b.n	229ea <SX1276IsChannelFree+0x38>

00022a00 <SX1276Random>:
{
   22a00:	b538      	push	{r3, r4, r5, lr}
    SX1276SetModem( MODEM_LORA );
   22a02:	2001      	movs	r0, #1
   22a04:	f7f8 fdae 	bl	1b564 <SX1276SetModem>
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
   22a08:	21ff      	movs	r1, #255	; 0xff
   22a0a:	2011      	movs	r0, #17
   22a0c:	f7ff ffa1 	bl	22952 <SX1276Write>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
   22a10:	2005      	movs	r0, #5
   22a12:	f7ff ffb4 	bl	2297e <SX1276SetOpMode>
   22a16:	2400      	movs	r4, #0
    uint32_t rnd = 0;
   22a18:	4625      	mov	r5, r4
        DelayMs( 1 );
   22a1a:	2001      	movs	r0, #1
   22a1c:	f000 f863 	bl	22ae6 <DelayMs>
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
   22a20:	202c      	movs	r0, #44	; 0x2c
   22a22:	f7ff ffa1 	bl	22968 <SX1276Read>
   22a26:	f000 0001 	and.w	r0, r0, #1
   22a2a:	40a0      	lsls	r0, r4
   22a2c:	3401      	adds	r4, #1
    for( i = 0; i < 32; i++ )
   22a2e:	2c20      	cmp	r4, #32
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
   22a30:	ea45 0500 	orr.w	r5, r5, r0
    for( i = 0; i < 32; i++ )
   22a34:	d1f1      	bne.n	22a1a <SX1276Random+0x1a>
    SX1276SetSleep( );
   22a36:	f7f8 fbf9 	bl	1b22c <SX1276SetSleep>
}
   22a3a:	4628      	mov	r0, r5
   22a3c:	bd38      	pop	{r3, r4, r5, pc}

00022a3e <SX1276WriteFifo>:
{
   22a3e:	460a      	mov	r2, r1
    SX1276WriteBuffer( 0, buffer, size );
   22a40:	4601      	mov	r1, r0
   22a42:	2000      	movs	r0, #0
   22a44:	f7f8 bb1e 	b.w	1b084 <SX1276WriteBuffer>

00022a48 <SX1276ReadFifo>:
{
   22a48:	460a      	mov	r2, r1
    SX1276ReadBuffer( 0, buffer, size );
   22a4a:	4601      	mov	r1, r0
   22a4c:	2000      	movs	r0, #0
   22a4e:	f7f8 ba53 	b.w	1aef8 <SX1276ReadBuffer>

00022a52 <SX1276GetWakeupTime>:
{
   22a52:	b508      	push	{r3, lr}
    return SX1276GetBoardTcxoWakeupTime( ) + RADIO_WAKEUP_TIME;
   22a54:	f7ff ff78 	bl	22948 <SX1276GetBoardTcxoWakeupTime>
}
   22a58:	3001      	adds	r0, #1
   22a5a:	bd08      	pop	{r3, pc}

00022a5c <TimerSetTimeout>:
    // Intentional wrap around. Works Ok if tick duration below 1ms
    return RtcTick2Ms( nowInTicks - pastInTicks );
}

static void TimerSetTimeout( TimerEvent_t *obj )
{
   22a5c:	b570      	push	{r4, r5, r6, lr}
   22a5e:	4604      	mov	r4, r0
    int32_t minTicks= RtcGetMinimumTimeout( );
   22a60:	f7ff ff26 	bl	228b0 <RtcGetMinimumTimeout>
    obj->IsNext2Expire = true;
   22a64:	2301      	movs	r3, #1
   22a66:	7263      	strb	r3, [r4, #9]

    // In case deadline too soon
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
   22a68:	6826      	ldr	r6, [r4, #0]
    int32_t minTicks= RtcGetMinimumTimeout( );
   22a6a:	4605      	mov	r5, r0
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
   22a6c:	f7f7 ffce 	bl	1aa0c <RtcGetTimerElapsedTime>
   22a70:	4428      	add	r0, r5
   22a72:	4286      	cmp	r6, r0
   22a74:	d203      	bcs.n	22a7e <TimerSetTimeout+0x22>
    {
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
   22a76:	f7f7 ffc9 	bl	1aa0c <RtcGetTimerElapsedTime>
   22a7a:	4405      	add	r5, r0
   22a7c:	6025      	str	r5, [r4, #0]
    }
    RtcSetAlarm( obj->Timestamp );
   22a7e:	6820      	ldr	r0, [r4, #0]
}
   22a80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    RtcSetAlarm( obj->Timestamp );
   22a84:	f7f7 bfd2 	b.w	1aa2c <RtcSetAlarm>

00022a88 <TimerInit>:
    obj->Timestamp = 0;
   22a88:	2300      	movs	r3, #0
    obj->ReloadValue = 0;
   22a8a:	e9c0 3300 	strd	r3, r3, [r0]
    obj->Context = NULL;
   22a8e:	e9c0 1303 	strd	r1, r3, [r0, #12]
    obj->IsStarted = false;
   22a92:	8103      	strh	r3, [r0, #8]
    obj->Next = NULL;
   22a94:	6143      	str	r3, [r0, #20]
}
   22a96:	4770      	bx	lr

00022a98 <TimerSetValue>:
{
   22a98:	b538      	push	{r3, r4, r5, lr}
   22a9a:	4605      	mov	r5, r0
    uint32_t ticks = RtcMs2Tick( value );
   22a9c:	4608      	mov	r0, r1
   22a9e:	f7ff ff1c 	bl	228da <RtcMs2Tick>
   22aa2:	4604      	mov	r4, r0
    TimerStop( obj );
   22aa4:	4628      	mov	r0, r5
   22aa6:	f7f9 f98d 	bl	1bdc4 <TimerStop>
    minValue = RtcGetMinimumTimeout( );
   22aaa:	f7ff ff01 	bl	228b0 <RtcGetMinimumTimeout>
    if( ticks < minValue )
   22aae:	42a0      	cmp	r0, r4
   22ab0:	bf38      	it	cc
   22ab2:	4620      	movcc	r0, r4
    obj->ReloadValue = ticks;
   22ab4:	e9c5 0000 	strd	r0, r0, [r5]
}
   22ab8:	bd38      	pop	{r3, r4, r5, pc}

00022aba <TimerGetCurrentTime>:
{
   22aba:	b508      	push	{r3, lr}
    uint32_t now = RtcGetTimerValue( );
   22abc:	f7ff fef4 	bl	228a8 <RtcGetTimerValue>
}
   22ac0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return  RtcTick2Ms( now );
   22ac4:	f7ff bf0a 	b.w	228dc <RtcTick2Ms>

00022ac8 <TimerGetElapsedTime>:
{
   22ac8:	b538      	push	{r3, r4, r5, lr}
    if ( past == 0 )
   22aca:	4604      	mov	r4, r0
   22acc:	b150      	cbz	r0, 22ae4 <TimerGetElapsedTime+0x1c>
    uint32_t nowInTicks = RtcGetTimerValue( );
   22ace:	f7ff feeb 	bl	228a8 <RtcGetTimerValue>
   22ad2:	4605      	mov	r5, r0
    uint32_t pastInTicks = RtcMs2Tick( past );
   22ad4:	4620      	mov	r0, r4
   22ad6:	f7ff ff00 	bl	228da <RtcMs2Tick>
    return RtcTick2Ms( nowInTicks - pastInTicks );
   22ada:	1a28      	subs	r0, r5, r0
}
   22adc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return RtcTick2Ms( nowInTicks - pastInTicks );
   22ae0:	f7ff befc 	b.w	228dc <RtcTick2Ms>
}
   22ae4:	bd38      	pop	{r3, r4, r5, pc}

00022ae6 <DelayMs>:
    DelayMs( s * 1000.0f );
}

void DelayMs( uint32_t ms )
{
    DelayMsMcu( ms );
   22ae6:	f7ff bee5 	b.w	228b4 <DelayMsMcu>

00022aea <memcpy1>:
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
}

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
   22aea:	3801      	subs	r0, #1
   22aec:	440a      	add	r2, r1
   22aee:	4291      	cmp	r1, r2
   22af0:	d100      	bne.n	22af4 <memcpy1+0xa>
    {
        *dst++ = *src++;
    }
}
   22af2:	4770      	bx	lr
        *dst++ = *src++;
   22af4:	f811 3b01 	ldrb.w	r3, [r1], #1
   22af8:	f800 3f01 	strb.w	r3, [r0, #1]!
   22afc:	e7f7      	b.n	22aee <memcpy1+0x4>

00022afe <uart_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   22afe:	6902      	ldr	r2, [r0, #16]
{
   22b00:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   22b02:	e892 0003 	ldmia.w	r2, {r0, r1}
   22b06:	e883 0003 	stmia.w	r3, {r0, r1}
}
   22b0a:	2000      	movs	r0, #0
   22b0c:	4770      	bx	lr

00022b0e <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   22b0e:	4700      	bx	r0

00022b10 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   22b10:	f000 baf3 	b.w	230fa <z_impl_k_busy_wait>

00022b14 <nrfx_clock_enable>:
{
   22b14:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   22b16:	2000      	movs	r0, #0
   22b18:	f7e2 fd20 	bl	555c <arch_irq_is_enabled>
   22b1c:	b918      	cbnz	r0, 22b26 <nrfx_clock_enable+0x12>
}
   22b1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   22b22:	f7e2 bcf7 	b.w	5514 <arch_irq_enable>
   22b26:	bd08      	pop	{r3, pc}

00022b28 <nrf_gpio_pin_set>:
{
   22b28:	b507      	push	{r0, r1, r2, lr}
   22b2a:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   22b2c:	a801      	add	r0, sp, #4
   22b2e:	f7f9 fe21 	bl	1c774 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   22b32:	9a01      	ldr	r2, [sp, #4]
   22b34:	2301      	movs	r3, #1
   22b36:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   22b38:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   22b3c:	b003      	add	sp, #12
   22b3e:	f85d fb04 	ldr.w	pc, [sp], #4

00022b42 <nrf_gpio_pin_clear>:
{
   22b42:	b507      	push	{r0, r1, r2, lr}
   22b44:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   22b46:	a801      	add	r0, sp, #4
   22b48:	f7f9 fe14 	bl	1c774 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   22b4c:	9a01      	ldr	r2, [sp, #4]
   22b4e:	2301      	movs	r3, #1
   22b50:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   22b52:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
   22b56:	b003      	add	sp, #12
   22b58:	f85d fb04 	ldr.w	pc, [sp], #4

00022b5c <transfer_byte>:
{
   22b5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return p_reg->RXD;
   22b5e:	f8d0 3518 	ldr.w	r3, [r0, #1304]	; 0x518
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   22b62:	698a      	ldr	r2, [r1, #24]
   22b64:	b2db      	uxtb	r3, r3
    volatile uint8_t rx_data = nrf_spi_rxd_get(p_spi);
   22b66:	f88d 3007 	strb.w	r3, [sp, #7]
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   22b6a:	6a0b      	ldr	r3, [r1, #32]
   22b6c:	4293      	cmp	r3, r2
        p_cb->evt.xfer_desc.p_rx_buffer[p_cb->bytes_transferred] = rx_data;
   22b6e:	bf3e      	ittt	cc
   22b70:	694a      	ldrcc	r2, [r1, #20]
   22b72:	f89d 4007 	ldrbcc.w	r4, [sp, #7]
   22b76:	54d4      	strbcc	r4, [r2, r3]
    ++p_cb->bytes_transferred;
   22b78:	6a0a      	ldr	r2, [r1, #32]
    if (p_cb->abort)
   22b7a:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
    ++p_cb->bytes_transferred;
   22b7e:	1c53      	adds	r3, r2, #1
   22b80:	620b      	str	r3, [r1, #32]
    size_t bytes_used = p_cb->bytes_transferred + 1;
   22b82:	3202      	adds	r2, #2
    if (p_cb->abort)
   22b84:	b13c      	cbz	r4, 22b96 <transfer_byte+0x3a>
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   22b86:	690c      	ldr	r4, [r1, #16]
   22b88:	42a2      	cmp	r2, r4
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   22b8a:	698c      	ldr	r4, [r1, #24]
            p_cb->evt.xfer_desc.tx_length = bytes_used;
   22b8c:	bf38      	it	cc
   22b8e:	610a      	strcc	r2, [r1, #16]
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   22b90:	4294      	cmp	r4, r2
            p_cb->evt.xfer_desc.rx_length = bytes_used;
   22b92:	bf88      	it	hi
   22b94:	618a      	strhi	r2, [r1, #24]
    if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   22b96:	690d      	ldr	r5, [r1, #16]
   22b98:	4295      	cmp	r5, r2
   22b9a:	d905      	bls.n	22ba8 <transfer_byte+0x4c>
        nrf_spi_txd_set(p_spi, p_cb->evt.xfer_desc.p_tx_buffer[bytes_used]);
   22b9c:	68cb      	ldr	r3, [r1, #12]
    p_reg->TXD = data;
   22b9e:	5c9b      	ldrb	r3, [r3, r2]
   22ba0:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   22ba4:	2001      	movs	r0, #1
   22ba6:	e00a      	b.n	22bbe <transfer_byte+0x62>
    else if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   22ba8:	698c      	ldr	r4, [r1, #24]
   22baa:	4294      	cmp	r4, r2
   22bac:	d901      	bls.n	22bb2 <transfer_byte+0x56>
   22bae:	7fcb      	ldrb	r3, [r1, #31]
   22bb0:	e7f6      	b.n	22ba0 <transfer_byte+0x44>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   22bb2:	42ab      	cmp	r3, r5
   22bb4:	d3f6      	bcc.n	22ba4 <transfer_byte+0x48>
   22bb6:	42a3      	cmp	r3, r4
   22bb8:	bf2c      	ite	cs
   22bba:	2000      	movcs	r0, #0
   22bbc:	2001      	movcc	r0, #1
}
   22bbe:	b003      	add	sp, #12
   22bc0:	bd30      	pop	{r4, r5, pc}

00022bc2 <z_device_state_init>:
}
   22bc2:	4770      	bx	lr

00022bc4 <z_device_ready>:
	return __device_end - __device_start;
}

bool z_device_ready(const struct device *dev)
{
	return dev->state->initialized && (dev->state->init_res == 0U);
   22bc4:	68c3      	ldr	r3, [r0, #12]
   22bc6:	8818      	ldrh	r0, [r3, #0]
   22bc8:	f3c0 0008 	ubfx	r0, r0, #0, #9
}
   22bcc:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   22bd0:	4258      	negs	r0, r3
   22bd2:	4158      	adcs	r0, r3
   22bd4:	4770      	bx	lr

00022bd6 <arch_system_halt>:
	__asm__ volatile(
   22bd6:	f04f 0220 	mov.w	r2, #32
   22bda:	f3ef 8311 	mrs	r3, BASEPRI
   22bde:	f382 8811 	msr	BASEPRI, r2
   22be2:	f3bf 8f6f 	isb	sy
	for (;;) {
   22be6:	e7fe      	b.n	22be6 <arch_system_halt+0x10>

00022be8 <z_pm_save_idle_exit>:
{
   22be8:	b508      	push	{r3, lr}
	pm_system_resume();
   22bea:	f7e1 fea7 	bl	493c <pm_system_resume>
}
   22bee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   22bf2:	f7fc bbb7 	b.w	1f364 <sys_clock_idle_exit>

00022bf6 <k_heap_init>:
{
   22bf6:	b410      	push	{r4}
   22bf8:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   22bfc:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   22c00:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   22c02:	f7fb bf0b 	b.w	1ea1c <sys_heap_init>

00022c06 <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   22c06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22c0a:	b087      	sub	sp, #28
   22c0c:	4604      	mov	r4, r0
   22c0e:	460e      	mov	r6, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   22c10:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
{
   22c14:	4617      	mov	r7, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   22c16:	f000 fb82 	bl	2331e <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   22c1a:	f104 0914 	add.w	r9, r4, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   22c1e:	4605      	mov	r5, r0
   22c20:	4688      	mov	r8, r1
   22c22:	f04f 0320 	mov.w	r3, #32
   22c26:	f3ef 8b11 	mrs	fp, BASEPRI
   22c2a:	f383 8811 	msr	BASEPRI, r3
   22c2e:	f3bf 8f6f 	isb	sy
		now = sys_clock_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   22c32:	f104 0a0c 	add.w	sl, r4, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   22c36:	463a      	mov	r2, r7
   22c38:	4631      	mov	r1, r6
   22c3a:	4620      	mov	r0, r4
   22c3c:	f7fb fe73 	bl	1e926 <sys_heap_aligned_alloc>
   22c40:	9005      	str	r0, [sp, #20]
		now = sys_clock_tick_get();
   22c42:	f7fb f981 	bl	1df48 <sys_clock_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   22c46:	9b05      	ldr	r3, [sp, #20]
   22c48:	b13b      	cbz	r3, 22c5a <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   22c4a:	f38b 8811 	msr	BASEPRI, fp
   22c4e:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   22c52:	4618      	mov	r0, r3
   22c54:	b007      	add	sp, #28
   22c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   22c5a:	1a2a      	subs	r2, r5, r0
   22c5c:	9202      	str	r2, [sp, #8]
   22c5e:	eb68 0201 	sbc.w	r2, r8, r1
   22c62:	9203      	str	r2, [sp, #12]
   22c64:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   22c68:	2901      	cmp	r1, #1
   22c6a:	f172 0200 	sbcs.w	r2, r2, #0
   22c6e:	dbec      	blt.n	22c4a <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   22c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   22c74:	4659      	mov	r1, fp
   22c76:	e9cd 2300 	strd	r2, r3, [sp]
   22c7a:	4648      	mov	r0, r9
   22c7c:	4652      	mov	r2, sl
   22c7e:	f7fa fa95 	bl	1d1ac <z_pend_curr>
	__asm__ volatile(
   22c82:	f04f 0320 	mov.w	r3, #32
   22c86:	f3ef 8b11 	mrs	fp, BASEPRI
   22c8a:	f383 8811 	msr	BASEPRI, r3
   22c8e:	f3bf 8f6f 	isb	sy
   22c92:	e7d0      	b.n	22c36 <k_heap_aligned_alloc+0x30>

00022c94 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   22c94:	b538      	push	{r3, r4, r5, lr}
   22c96:	4604      	mov	r4, r0
   22c98:	f04f 0320 	mov.w	r3, #32
   22c9c:	f3ef 8511 	mrs	r5, BASEPRI
   22ca0:	f383 8811 	msr	BASEPRI, r3
   22ca4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   22ca8:	f7fb fdf0 	bl	1e88c <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   22cac:	f104 000c 	add.w	r0, r4, #12
   22cb0:	f000 f9e0 	bl	23074 <z_unpend_all>
   22cb4:	b130      	cbz	r0, 22cc4 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   22cb6:	4629      	mov	r1, r5
   22cb8:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   22cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   22cc0:	f7fa b9f2 	b.w	1d0a8 <z_reschedule>
	__asm__ volatile(
   22cc4:	f385 8811 	msr	BASEPRI, r5
   22cc8:	f3bf 8f6f 	isb	sy
}
   22ccc:	bd38      	pop	{r3, r4, r5, pc}

00022cce <k_mem_slab_init>:
{
   22cce:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   22cd0:	2400      	movs	r4, #0
   22cd2:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   22cd4:	ea41 0402 	orr.w	r4, r1, r2
   22cd8:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   22cdc:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   22ce0:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   22ce2:	d10c      	bne.n	22cfe <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   22ce4:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   22ce6:	42a3      	cmp	r3, r4
   22ce8:	d103      	bne.n	22cf2 <k_mem_slab_init+0x24>
   22cea:	e9c0 0000 	strd	r0, r0, [r0]
}
   22cee:	2000      	movs	r0, #0
}
   22cf0:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   22cf2:	6945      	ldr	r5, [r0, #20]
   22cf4:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   22cf6:	3401      	adds	r4, #1
		slab->free_list = p;
   22cf8:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   22cfa:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   22cfc:	e7f3      	b.n	22ce6 <k_mem_slab_init+0x18>
		return -EINVAL;
   22cfe:	f06f 0015 	mvn.w	r0, #21
	return rc;
   22d02:	e7f5      	b.n	22cf0 <k_mem_slab_init+0x22>

00022d04 <queue_insert>:
{
   22d04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22d08:	4699      	mov	r9, r3
   22d0a:	4604      	mov	r4, r0
   22d0c:	f89d 3020 	ldrb.w	r3, [sp, #32]
   22d10:	460d      	mov	r5, r1
   22d12:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   22d14:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   22d18:	f04f 0220 	mov.w	r2, #32
   22d1c:	f3ef 8711 	mrs	r7, BASEPRI
   22d20:	f382 8811 	msr	BASEPRI, r2
   22d24:	f3bf 8f6f 	isb	sy
	if (is_append) {
   22d28:	b103      	cbz	r3, 22d2c <queue_insert+0x28>
		prev = sys_sflist_peek_tail(&queue->data_q);
   22d2a:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   22d2c:	4630      	mov	r0, r6
   22d2e:	f000 f989 	bl	23044 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   22d32:	b158      	cbz	r0, 22d4c <queue_insert+0x48>
   22d34:	2400      	movs	r4, #0
   22d36:	67c4      	str	r4, [r0, #124]	; 0x7c
   22d38:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   22d3c:	f000 f93b 	bl	22fb6 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   22d40:	4630      	mov	r0, r6
   22d42:	4639      	mov	r1, r7
   22d44:	f7fa f9b0 	bl	1d0a8 <z_reschedule>
	return 0;
   22d48:	2000      	movs	r0, #0
   22d4a:	e00c      	b.n	22d66 <queue_insert+0x62>
	if (alloc) {
   22d4c:	f1b9 0f00 	cmp.w	r9, #0
   22d50:	d01b      	beq.n	22d8a <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   22d52:	2108      	movs	r1, #8
   22d54:	f7fb fa1e 	bl	1e194 <z_thread_aligned_alloc>
		if (anode == NULL) {
   22d58:	b938      	cbnz	r0, 22d6a <queue_insert+0x66>
	__asm__ volatile(
   22d5a:	f387 8811 	msr	BASEPRI, r7
   22d5e:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   22d62:	f06f 000b 	mvn.w	r0, #11
}
   22d66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   22d6a:	2301      	movs	r3, #1
		anode->data = data;
   22d6c:	f8c0 8004 	str.w	r8, [r0, #4]
   22d70:	6003      	str	r3, [r0, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   22d72:	6803      	ldr	r3, [r0, #0]
   22d74:	f003 0203 	and.w	r2, r3, #3
   22d78:	b95d      	cbnz	r5, 22d92 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   22d7a:	6823      	ldr	r3, [r4, #0]
   22d7c:	4313      	orrs	r3, r2
   22d7e:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   22d80:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   22d82:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   22d84:	b973      	cbnz	r3, 22da4 <queue_insert+0xa0>
	list->tail = node;
   22d86:	6060      	str	r0, [r4, #4]
}
   22d88:	e00c      	b.n	22da4 <queue_insert+0xa0>
	node->next_and_flags = flags;
   22d8a:	f8c8 9000 	str.w	r9, [r8]
}
   22d8e:	4640      	mov	r0, r8
   22d90:	e7ef      	b.n	22d72 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   22d92:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   22d94:	f033 0303 	bics.w	r3, r3, #3
   22d98:	d110      	bne.n	22dbc <queue_insert+0xb8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   22d9a:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   22d9c:	6862      	ldr	r2, [r4, #4]
   22d9e:	b93a      	cbnz	r2, 22db0 <queue_insert+0xac>
	list->head = node;
   22da0:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   22da4:	2104      	movs	r1, #4
   22da6:	f104 0010 	add.w	r0, r4, #16
   22daa:	f000 fc36 	bl	2361a <z_handle_obj_poll_events>
   22dae:	e7c7      	b.n	22d40 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   22db0:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   22db2:	f003 0303 	and.w	r3, r3, #3
   22db6:	4303      	orrs	r3, r0
   22db8:	6013      	str	r3, [r2, #0]
   22dba:	e7e4      	b.n	22d86 <queue_insert+0x82>
   22dbc:	4313      	orrs	r3, r2
   22dbe:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   22dc0:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   22dc2:	f003 0303 	and.w	r3, r3, #3
   22dc6:	4303      	orrs	r3, r0
   22dc8:	602b      	str	r3, [r5, #0]
}
   22dca:	e7eb      	b.n	22da4 <queue_insert+0xa0>

00022dcc <z_queue_node_peek>:
{
   22dcc:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   22dce:	4604      	mov	r4, r0
   22dd0:	b130      	cbz	r0, 22de0 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   22dd2:	6802      	ldr	r2, [r0, #0]
   22dd4:	0793      	lsls	r3, r2, #30
   22dd6:	d003      	beq.n	22de0 <z_queue_node_peek+0x14>
		ret = anode->data;
   22dd8:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   22dda:	b109      	cbz	r1, 22de0 <z_queue_node_peek+0x14>
			k_free(anode);
   22ddc:	f000 fc2b 	bl	23636 <k_free>
}
   22de0:	4620      	mov	r0, r4
   22de2:	bd10      	pop	{r4, pc}

00022de4 <z_impl_k_queue_init>:
	list->head = NULL;
   22de4:	2300      	movs	r3, #0
	list->tail = NULL;
   22de6:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&w->waitq);
   22dea:	f100 0308 	add.w	r3, r0, #8
   22dee:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   22df2:	f100 0310 	add.w	r3, r0, #16
   22df6:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   22dfa:	4770      	bx	lr

00022dfc <k_queue_append>:
{
   22dfc:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   22dfe:	2301      	movs	r3, #1
   22e00:	9300      	str	r3, [sp, #0]
   22e02:	2300      	movs	r3, #0
{
   22e04:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   22e06:	4619      	mov	r1, r3
   22e08:	f7ff ff7c 	bl	22d04 <queue_insert>
}
   22e0c:	b003      	add	sp, #12
   22e0e:	f85d fb04 	ldr.w	pc, [sp], #4

00022e12 <k_queue_prepend>:
{
   22e12:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   22e14:	2300      	movs	r3, #0
{
   22e16:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   22e18:	9300      	str	r3, [sp, #0]
   22e1a:	4619      	mov	r1, r3
   22e1c:	f7ff ff72 	bl	22d04 <queue_insert>
}
   22e20:	b003      	add	sp, #12
   22e22:	f85d fb04 	ldr.w	pc, [sp], #4

00022e26 <k_queue_append_list>:
{
   22e26:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22e2a:	4605      	mov	r5, r0
   22e2c:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   22e2e:	460c      	mov	r4, r1
   22e30:	b391      	cbz	r1, 22e98 <k_queue_append_list+0x72>
   22e32:	b38a      	cbz	r2, 22e98 <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   22e34:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   22e38:	f04f 0320 	mov.w	r3, #32
   22e3c:	f3ef 8811 	mrs	r8, BASEPRI
   22e40:	f383 8811 	msr	BASEPRI, r3
   22e44:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   22e48:	4638      	mov	r0, r7
   22e4a:	f000 f8fb 	bl	23044 <z_unpend_first_thread>
   22e4e:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   22e52:	b920      	cbnz	r0, 22e5e <k_queue_append_list+0x38>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   22e54:	686b      	ldr	r3, [r5, #4]
   22e56:	b9cb      	cbnz	r3, 22e8c <k_queue_append_list+0x66>
	list->head = node;
   22e58:	602c      	str	r4, [r5, #0]
	list->tail = node;
   22e5a:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   22e5c:	e00a      	b.n	22e74 <k_queue_append_list+0x4e>
	thread->base.swap_data = data;
   22e5e:	6144      	str	r4, [r0, #20]
   22e60:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   22e64:	f000 f8a7 	bl	22fb6 <z_ready_thread>
		head = *(void **)head;
   22e68:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   22e6a:	4638      	mov	r0, r7
   22e6c:	f000 f8ea 	bl	23044 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   22e70:	2c00      	cmp	r4, #0
   22e72:	d1ee      	bne.n	22e52 <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   22e74:	2104      	movs	r1, #4
   22e76:	f105 0010 	add.w	r0, r5, #16
   22e7a:	f000 fbce 	bl	2361a <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   22e7e:	4638      	mov	r0, r7
   22e80:	4641      	mov	r1, r8
   22e82:	f7fa f911 	bl	1d0a8 <z_reschedule>
	return 0;
   22e86:	2000      	movs	r0, #0
}
   22e88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   22e8c:	6819      	ldr	r1, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   22e8e:	f001 0103 	and.w	r1, r1, #3
   22e92:	430c      	orrs	r4, r1
   22e94:	601c      	str	r4, [r3, #0]
}
   22e96:	e7e0      	b.n	22e5a <k_queue_append_list+0x34>
		return -EINVAL;
   22e98:	f06f 0015 	mvn.w	r0, #21
   22e9c:	e7f4      	b.n	22e88 <k_queue_append_list+0x62>

00022e9e <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   22e9e:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   22ea2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   22ea4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   22ea6:	2300      	movs	r3, #0
	node->prev = NULL;
   22ea8:	e9c0 3300 	strd	r3, r3, [r0]
}
   22eac:	4770      	bx	lr

00022eae <unpend_thread_no_timeout>:
{
   22eae:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   22eb0:	f7ff fff5 	bl	22e9e <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   22eb4:	7b43      	ldrb	r3, [r0, #13]
   22eb6:	f023 0302 	bic.w	r3, r3, #2
   22eba:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   22ebc:	2300      	movs	r3, #0
   22ebe:	6083      	str	r3, [r0, #8]
}
   22ec0:	bd08      	pop	{r3, pc}

00022ec2 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   22ec2:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   22ec6:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   22eca:	4283      	cmp	r3, r0
		return b2 - b1;
   22ecc:	bf14      	ite	ne
   22ece:	1ac0      	subne	r0, r0, r3
	return 0;
   22ed0:	2000      	moveq	r0, #0
}
   22ed2:	4770      	bx	lr

00022ed4 <z_unpend_thread_no_timeout>:
{
   22ed4:	b508      	push	{r3, lr}
   22ed6:	f04f 0320 	mov.w	r3, #32
   22eda:	f3ef 8111 	mrs	r1, BASEPRI
   22ede:	f383 8811 	msr	BASEPRI, r3
   22ee2:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   22ee6:	f7ff ffe2 	bl	22eae <unpend_thread_no_timeout>
	__asm__ volatile(
   22eea:	f381 8811 	msr	BASEPRI, r1
   22eee:	f3bf 8f6f 	isb	sy
}
   22ef2:	bd08      	pop	{r3, pc}

00022ef4 <z_unpend_thread>:
{
   22ef4:	b510      	push	{r4, lr}
	__asm__ volatile(
   22ef6:	f04f 0320 	mov.w	r3, #32
   22efa:	f3ef 8411 	mrs	r4, BASEPRI
   22efe:	f383 8811 	msr	BASEPRI, r3
   22f02:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   22f06:	f7ff ffd2 	bl	22eae <unpend_thread_no_timeout>
	__asm__ volatile(
   22f0a:	f384 8811 	msr	BASEPRI, r4
   22f0e:	f3bf 8f6f 	isb	sy
}
   22f12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_abort_timeout(&thread->base.timeout);
   22f16:	3018      	adds	r0, #24
   22f18:	f000 b9bb 	b.w	23292 <z_abort_timeout>

00022f1c <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   22f1c:	4603      	mov	r3, r0
   22f1e:	b920      	cbnz	r0, 22f2a <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   22f20:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   22f24:	b90a      	cbnz	r2, 22f2a <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   22f26:	f7e2 baa7 	b.w	5478 <arch_swap>
   22f2a:	f383 8811 	msr	BASEPRI, r3
   22f2e:	f3bf 8f6f 	isb	sy
}
   22f32:	4770      	bx	lr

00022f34 <z_reschedule_unlocked>:
	__asm__ volatile(
   22f34:	f04f 0320 	mov.w	r3, #32
   22f38:	f3ef 8011 	mrs	r0, BASEPRI
   22f3c:	f383 8811 	msr	BASEPRI, r3
   22f40:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   22f44:	f7ff bfea 	b.w	22f1c <z_reschedule_irqlock>

00022f48 <z_priq_dumb_best>:
{
   22f48:	4603      	mov	r3, r0
	return list->head == list;
   22f4a:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22f4c:	4283      	cmp	r3, r0
   22f4e:	d003      	beq.n	22f58 <z_priq_dumb_best+0x10>
	if (n != NULL) {
   22f50:	2800      	cmp	r0, #0
   22f52:	bf38      	it	cc
   22f54:	2000      	movcc	r0, #0
   22f56:	4770      	bx	lr
	struct k_thread *thread = NULL;
   22f58:	2000      	movs	r0, #0
}
   22f5a:	4770      	bx	lr

00022f5c <add_to_waitq_locked>:
{
   22f5c:	b538      	push	{r3, r4, r5, lr}
   22f5e:	4604      	mov	r4, r0
   22f60:	460d      	mov	r5, r1
	unready_thread(thread);
   22f62:	f7fa f8e5 	bl	1d130 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   22f66:	7b63      	ldrb	r3, [r4, #13]
   22f68:	f043 0302 	orr.w	r3, r3, #2
   22f6c:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   22f6e:	b1b5      	cbz	r5, 22f9e <add_to_waitq_locked+0x42>
	return list->head == list;
   22f70:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   22f72:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22f74:	429d      	cmp	r5, r3
   22f76:	bf08      	it	eq
   22f78:	2300      	moveq	r3, #0
   22f7a:	2b00      	cmp	r3, #0
   22f7c:	bf38      	it	cc
   22f7e:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22f80:	b19b      	cbz	r3, 22faa <add_to_waitq_locked+0x4e>
	int32_t b1 = thread_1->base.prio;
   22f82:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   22f86:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   22f8a:	4291      	cmp	r1, r2
   22f8c:	d008      	beq.n	22fa0 <add_to_waitq_locked+0x44>
		return b2 - b1;
   22f8e:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   22f90:	2a00      	cmp	r2, #0
   22f92:	dd05      	ble.n	22fa0 <add_to_waitq_locked+0x44>
	sys_dnode_t *const prev = successor->prev;
   22f94:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   22f96:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   22f9a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   22f9c:	605c      	str	r4, [r3, #4]
}
   22f9e:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   22fa0:	686a      	ldr	r2, [r5, #4]
   22fa2:	4293      	cmp	r3, r2
   22fa4:	d001      	beq.n	22faa <add_to_waitq_locked+0x4e>
   22fa6:	681b      	ldr	r3, [r3, #0]
   22fa8:	e7ea      	b.n	22f80 <add_to_waitq_locked+0x24>
	sys_dnode_t *const tail = list->tail;
   22faa:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   22fac:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   22fb0:	601c      	str	r4, [r3, #0]
	list->tail = node;
   22fb2:	606c      	str	r4, [r5, #4]
   22fb4:	e7f3      	b.n	22f9e <add_to_waitq_locked+0x42>

00022fb6 <z_ready_thread>:
{
   22fb6:	b510      	push	{r4, lr}
   22fb8:	f04f 0320 	mov.w	r3, #32
   22fbc:	f3ef 8411 	mrs	r4, BASEPRI
   22fc0:	f383 8811 	msr	BASEPRI, r3
   22fc4:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   22fc8:	f7fa fa0c 	bl	1d3e4 <ready_thread>
	__asm__ volatile(
   22fcc:	f384 8811 	msr	BASEPRI, r4
   22fd0:	f3bf 8f6f 	isb	sy
}
   22fd4:	bd10      	pop	{r4, pc}

00022fd6 <z_thread_timeout>:
{
   22fd6:	b510      	push	{r4, lr}
   22fd8:	4601      	mov	r1, r0
	__asm__ volatile(
   22fda:	f04f 0320 	mov.w	r3, #32
   22fde:	f3ef 8411 	mrs	r4, BASEPRI
   22fe2:	f383 8811 	msr	BASEPRI, r3
   22fe6:	f3bf 8f6f 	isb	sy
		if (!killed) {
   22fea:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   22fee:	f013 0f28 	tst.w	r3, #40	; 0x28
   22ff2:	d10d      	bne.n	23010 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   22ff4:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   22ff8:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   22ffa:	b10b      	cbz	r3, 23000 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   22ffc:	f7ff ff57 	bl	22eae <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   23000:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   23004:	f023 0314 	bic.w	r3, r3, #20
   23008:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   2300c:	f7fa f9ea 	bl	1d3e4 <ready_thread>
	__asm__ volatile(
   23010:	f384 8811 	msr	BASEPRI, r4
   23014:	f3bf 8f6f 	isb	sy
}
   23018:	bd10      	pop	{r4, pc}

0002301a <z_unpend1_no_timeout>:
{
   2301a:	b510      	push	{r4, lr}
	__asm__ volatile(
   2301c:	f04f 0320 	mov.w	r3, #32
   23020:	f3ef 8411 	mrs	r4, BASEPRI
   23024:	f383 8811 	msr	BASEPRI, r3
   23028:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   2302c:	f7ff ff8c 	bl	22f48 <z_priq_dumb_best>
		if (thread != NULL) {
   23030:	4601      	mov	r1, r0
   23032:	b108      	cbz	r0, 23038 <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
   23034:	f7ff ff3b 	bl	22eae <unpend_thread_no_timeout>
	__asm__ volatile(
   23038:	f384 8811 	msr	BASEPRI, r4
   2303c:	f3bf 8f6f 	isb	sy
}
   23040:	4608      	mov	r0, r1
   23042:	bd10      	pop	{r4, pc}

00023044 <z_unpend_first_thread>:
{
   23044:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   23046:	f04f 0320 	mov.w	r3, #32
   2304a:	f3ef 8511 	mrs	r5, BASEPRI
   2304e:	f383 8811 	msr	BASEPRI, r3
   23052:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   23056:	f7ff ff77 	bl	22f48 <z_priq_dumb_best>
		if (thread != NULL) {
   2305a:	4604      	mov	r4, r0
   2305c:	b120      	cbz	r0, 23068 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   2305e:	f7ff ff26 	bl	22eae <unpend_thread_no_timeout>
   23062:	3018      	adds	r0, #24
   23064:	f000 f915 	bl	23292 <z_abort_timeout>
	__asm__ volatile(
   23068:	f385 8811 	msr	BASEPRI, r5
   2306c:	f3bf 8f6f 	isb	sy
}
   23070:	4620      	mov	r0, r4
   23072:	bd38      	pop	{r3, r4, r5, pc}

00023074 <z_unpend_all>:
{
   23074:	b538      	push	{r3, r4, r5, lr}
   23076:	4605      	mov	r5, r0
	int need_sched = 0;
   23078:	2000      	movs	r0, #0
	return list->head == list;
   2307a:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2307c:	42a5      	cmp	r5, r4
   2307e:	d000      	beq.n	23082 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   23080:	b904      	cbnz	r4, 23084 <z_unpend_all+0x10>
}
   23082:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   23084:	4620      	mov	r0, r4
   23086:	f7ff ff35 	bl	22ef4 <z_unpend_thread>
		z_ready_thread(thread);
   2308a:	4620      	mov	r0, r4
   2308c:	f7ff ff93 	bl	22fb6 <z_ready_thread>
		need_sched = 1;
   23090:	2001      	movs	r0, #1
   23092:	e7f2      	b.n	2307a <z_unpend_all+0x6>

00023094 <z_sched_wake>:
{
   23094:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   23096:	f04f 0320 	mov.w	r3, #32
   2309a:	f3ef 8511 	mrs	r5, BASEPRI
   2309e:	f383 8811 	msr	BASEPRI, r3
   230a2:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   230a6:	f7ff ff4f 	bl	22f48 <z_priq_dumb_best>
		if (thread != NULL) {
   230aa:	4604      	mov	r4, r0
   230ac:	b150      	cbz	r0, 230c4 <z_sched_wake+0x30>
   230ae:	67c1      	str	r1, [r0, #124]	; 0x7c
   230b0:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   230b2:	f7ff fefc 	bl	22eae <unpend_thread_no_timeout>
   230b6:	3018      	adds	r0, #24
   230b8:	f000 f8eb 	bl	23292 <z_abort_timeout>
			ready_thread(thread);
   230bc:	4620      	mov	r0, r4
   230be:	f7fa f991 	bl	1d3e4 <ready_thread>
			ret = true;
   230c2:	2001      	movs	r0, #1
	__asm__ volatile(
   230c4:	f385 8811 	msr	BASEPRI, r5
   230c8:	f3bf 8f6f 	isb	sy
}
   230cc:	bd38      	pop	{r3, r4, r5, pc}

000230ce <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   230ce:	b15a      	cbz	r2, 230e8 <z_impl_k_sem_init+0x1a>
   230d0:	428a      	cmp	r2, r1
   230d2:	d309      	bcc.n	230e8 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   230d4:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   230d8:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   230dc:	e9c0 0000 	strd	r0, r0, [r0]
   230e0:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   230e4:	2000      	movs	r0, #0
   230e6:	4770      	bx	lr
		return -EINVAL;
   230e8:	f06f 0015 	mvn.w	r0, #21
}
   230ec:	4770      	bx	lr

000230ee <k_is_in_isr>:
   230ee:	f3ef 8005 	mrs	r0, IPSR
}
   230f2:	3800      	subs	r0, #0
   230f4:	bf18      	it	ne
   230f6:	2001      	movne	r0, #1
   230f8:	4770      	bx	lr

000230fa <z_impl_k_busy_wait>:
	if (usec_to_wait == 0U) {
   230fa:	b108      	cbz	r0, 23100 <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
   230fc:	f7e2 be5e 	b.w	5dbc <arch_busy_wait>
}
   23100:	4770      	bx	lr

00023102 <z_impl_k_thread_name_set>:
}
   23102:	f06f 0057 	mvn.w	r0, #87	; 0x57
   23106:	4770      	bx	lr

00023108 <k_thread_name_get>:
}
   23108:	2000      	movs	r0, #0
   2310a:	4770      	bx	lr

0002310c <z_impl_k_thread_start>:
	z_sched_start(thread);
   2310c:	f7fa b9a2 	b.w	1d454 <z_sched_start>

00023110 <notify_queue_locked>:
	if (queue != NULL) {
   23110:	b120      	cbz	r0, 2311c <notify_queue_locked+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   23112:	2200      	movs	r2, #0
   23114:	4611      	mov	r1, r2
   23116:	3088      	adds	r0, #136	; 0x88
   23118:	f7ff bfbc 	b.w	23094 <z_sched_wake>
}
   2311c:	4770      	bx	lr

0002311e <unschedule_locked>:
	bool ret = flag_test(flagp, bit);
   2311e:	68c3      	ldr	r3, [r0, #12]
{
   23120:	b510      	push	{r4, lr}
	*flagp &= ~BIT(bit);
   23122:	f023 0208 	bic.w	r2, r3, #8
	return (*flagp & BIT(bit)) != 0U;
   23126:	f3c3 04c0 	ubfx	r4, r3, #3, #1
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2312a:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   2312c:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2312e:	d502      	bpl.n	23136 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   23130:	3010      	adds	r0, #16
   23132:	f000 f8ae 	bl	23292 <z_abort_timeout>
}
   23136:	4620      	mov	r0, r4
   23138:	bd10      	pop	{r4, pc}

0002313a <cancel_async_locked>:
{
   2313a:	4603      	mov	r3, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2313c:	68c0      	ldr	r0, [r0, #12]
{
   2313e:	b510      	push	{r4, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   23140:	0784      	lsls	r4, r0, #30
   23142:	f3c0 0140 	ubfx	r1, r0, #1, #1
   23146:	d416      	bmi.n	23176 <cancel_async_locked+0x3c>
	*flagp &= ~BIT(bit);
   23148:	f020 0404 	bic.w	r4, r0, #4
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   2314c:	0740      	lsls	r0, r0, #29
		queue_remove_locked(work->queue, work);
   2314e:	689a      	ldr	r2, [r3, #8]
	*flagp &= ~BIT(bit);
   23150:	60dc      	str	r4, [r3, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   23152:	d510      	bpl.n	23176 <cancel_async_locked+0x3c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   23154:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
   23158:	b168      	cbz	r0, 23176 <cancel_async_locked+0x3c>
   2315a:	4283      	cmp	r3, r0
   2315c:	d11d      	bne.n	2319a <cancel_async_locked+0x60>
Z_GENLIST_REMOVE(slist, snode)
   2315e:	6818      	ldr	r0, [r3, #0]
   23160:	b999      	cbnz	r1, 2318a <cancel_async_locked+0x50>
   23162:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	list->head = node;
   23166:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   2316a:	428b      	cmp	r3, r1
   2316c:	d101      	bne.n	23172 <cancel_async_locked+0x38>
	list->tail = node;
   2316e:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
	parent->next = child;
   23172:	2200      	movs	r2, #0
   23174:	601a      	str	r2, [r3, #0]
	return flags_get(&work->flags) & K_WORK_MASK;
   23176:	68da      	ldr	r2, [r3, #12]
	if (ret != 0) {
   23178:	f012 000f 	ands.w	r0, r2, #15
	*flagp |= BIT(bit);
   2317c:	bf1e      	ittt	ne
   2317e:	f042 0202 	orrne.w	r2, r2, #2
   23182:	60da      	strne	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   23184:	f002 000f 	andne.w	r0, r2, #15
}
   23188:	bd10      	pop	{r4, pc}
   2318a:	6008      	str	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2318c:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
   23190:	4283      	cmp	r3, r0
	list->tail = node;
   23192:	bf08      	it	eq
   23194:	f8c2 1084 	streq.w	r1, [r2, #132]	; 0x84
}
   23198:	e7eb      	b.n	23172 <cancel_async_locked+0x38>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2319a:	4601      	mov	r1, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2319c:	6800      	ldr	r0, [r0, #0]
   2319e:	e7db      	b.n	23158 <cancel_async_locked+0x1e>

000231a0 <work_timeout>:
{
   231a0:	b513      	push	{r0, r1, r4, lr}
	__asm__ volatile(
   231a2:	f04f 0320 	mov.w	r3, #32
   231a6:	f3ef 8411 	mrs	r4, BASEPRI
   231aa:	f383 8811 	msr	BASEPRI, r3
   231ae:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   231b2:	2300      	movs	r3, #0
   231b4:	9301      	str	r3, [sp, #4]
	bool ret = flag_test(flagp, bit);
   231b6:	f850 3c04 	ldr.w	r3, [r0, #-4]
	*flagp &= ~BIT(bit);
   231ba:	f023 0208 	bic.w	r2, r3, #8
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   231be:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   231c0:	f840 2c04 	str.w	r2, [r0, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   231c4:	d505      	bpl.n	231d2 <work_timeout+0x32>
		queue = dw->queue;
   231c6:	6983      	ldr	r3, [r0, #24]
   231c8:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   231ca:	a901      	add	r1, sp, #4
   231cc:	3810      	subs	r0, #16
   231ce:	f7fa fbc9 	bl	1d964 <submit_to_queue_locked>
	__asm__ volatile(
   231d2:	f384 8811 	msr	BASEPRI, r4
   231d6:	f3bf 8f6f 	isb	sy
}
   231da:	b002      	add	sp, #8
   231dc:	bd10      	pop	{r4, pc}

000231de <k_work_init>:
{
   231de:	b538      	push	{r3, r4, r5, lr}
   231e0:	4604      	mov	r4, r0
   231e2:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   231e4:	2210      	movs	r2, #16
   231e6:	2100      	movs	r1, #0
   231e8:	f000 fa49 	bl	2367e <memset>
   231ec:	6065      	str	r5, [r4, #4]
}
   231ee:	bd38      	pop	{r3, r4, r5, pc}

000231f0 <k_work_submit_to_queue>:
{
   231f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   231f2:	9001      	str	r0, [sp, #4]
   231f4:	4608      	mov	r0, r1
	__asm__ volatile(
   231f6:	f04f 0320 	mov.w	r3, #32
   231fa:	f3ef 8511 	mrs	r5, BASEPRI
   231fe:	f383 8811 	msr	BASEPRI, r3
   23202:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   23206:	a901      	add	r1, sp, #4
   23208:	f7fa fbac 	bl	1d964 <submit_to_queue_locked>
   2320c:	4604      	mov	r4, r0
	__asm__ volatile(
   2320e:	f385 8811 	msr	BASEPRI, r5
   23212:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   23216:	2800      	cmp	r0, #0
   23218:	dd04      	ble.n	23224 <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
   2321a:	f7fa fa0b 	bl	1d634 <z_impl_k_is_preempt_thread>
   2321e:	b108      	cbz	r0, 23224 <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
   23220:	f7fa f98e 	bl	1d540 <z_impl_k_yield>
}
   23224:	4620      	mov	r0, r4
   23226:	b003      	add	sp, #12
   23228:	bd30      	pop	{r4, r5, pc}

0002322a <k_work_init_delayable>:
{
   2322a:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   2322c:	2230      	movs	r2, #48	; 0x30
{
   2322e:	4604      	mov	r4, r0
   23230:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   23232:	2100      	movs	r1, #0
   23234:	f000 fa23 	bl	2367e <memset>
   23238:	f44f 7380 	mov.w	r3, #256	; 0x100
   2323c:	6065      	str	r5, [r4, #4]
   2323e:	60e3      	str	r3, [r4, #12]
}
   23240:	bd38      	pop	{r3, r4, r5, pc}

00023242 <k_work_delayable_busy_get>:
	__asm__ volatile(
   23242:	f04f 0220 	mov.w	r2, #32
   23246:	f3ef 8311 	mrs	r3, BASEPRI
   2324a:	f382 8811 	msr	BASEPRI, r2
   2324e:	f3bf 8f6f 	isb	sy
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   23252:	f3bf 8f5b 	dmb	ish
   23256:	68c0      	ldr	r0, [r0, #12]
   23258:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
   2325c:	f383 8811 	msr	BASEPRI, r3
   23260:	f3bf 8f6f 	isb	sy
}
   23264:	f000 000f 	and.w	r0, r0, #15
   23268:	4770      	bx	lr

0002326a <k_work_cancel_delayable>:

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   2326a:	b538      	push	{r3, r4, r5, lr}
   2326c:	4604      	mov	r4, r0
	__asm__ volatile(
   2326e:	f04f 0320 	mov.w	r3, #32
   23272:	f3ef 8511 	mrs	r5, BASEPRI
   23276:	f383 8811 	msr	BASEPRI, r3
   2327a:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   2327e:	f7ff ff4e 	bl	2311e <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   23282:	4620      	mov	r0, r4
   23284:	f7ff ff59 	bl	2313a <cancel_async_locked>
	__asm__ volatile(
   23288:	f385 8811 	msr	BASEPRI, r5
   2328c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = cancel_delayable_async_locked(dwork);

	k_spin_unlock(&lock, key);
	return ret;
}
   23290:	bd38      	pop	{r3, r4, r5, pc}

00023292 <z_abort_timeout>:
{
   23292:	b510      	push	{r4, lr}
	__asm__ volatile(
   23294:	f04f 0220 	mov.w	r2, #32
   23298:	f3ef 8411 	mrs	r4, BASEPRI
   2329c:	f382 8811 	msr	BASEPRI, r2
   232a0:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   232a4:	6803      	ldr	r3, [r0, #0]
   232a6:	b13b      	cbz	r3, 232b8 <z_abort_timeout+0x26>
			remove_timeout(to);
   232a8:	f7fa fd0c 	bl	1dcc4 <remove_timeout>
			ret = 0;
   232ac:	2000      	movs	r0, #0
	__asm__ volatile(
   232ae:	f384 8811 	msr	BASEPRI, r4
   232b2:	f3bf 8f6f 	isb	sy
}
   232b6:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   232b8:	f06f 0015 	mvn.w	r0, #21
   232bc:	e7f7      	b.n	232ae <z_abort_timeout+0x1c>

000232be <z_get_next_timeout_expiry>:
{
   232be:	b510      	push	{r4, lr}
	__asm__ volatile(
   232c0:	f04f 0320 	mov.w	r3, #32
   232c4:	f3ef 8411 	mrs	r4, BASEPRI
   232c8:	f383 8811 	msr	BASEPRI, r3
   232cc:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   232d0:	f7fa fd12 	bl	1dcf8 <next_timeout>
	__asm__ volatile(
   232d4:	f384 8811 	msr	BASEPRI, r4
   232d8:	f3bf 8f6f 	isb	sy
}
   232dc:	bd10      	pop	{r4, pc}

000232de <z_set_timeout_expiry>:
{
   232de:	b570      	push	{r4, r5, r6, lr}
   232e0:	4604      	mov	r4, r0
   232e2:	460d      	mov	r5, r1
	__asm__ volatile(
   232e4:	f04f 0320 	mov.w	r3, #32
   232e8:	f3ef 8611 	mrs	r6, BASEPRI
   232ec:	f383 8811 	msr	BASEPRI, r3
   232f0:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   232f4:	f7fa fd00 	bl	1dcf8 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   232f8:	2801      	cmp	r0, #1
   232fa:	dd05      	ble.n	23308 <z_set_timeout_expiry+0x2a>
   232fc:	42a0      	cmp	r0, r4
   232fe:	db03      	blt.n	23308 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   23300:	4629      	mov	r1, r5
   23302:	4620      	mov	r0, r4
   23304:	f7e1 fe06 	bl	4f14 <sys_clock_set_timeout>
	__asm__ volatile(
   23308:	f386 8811 	msr	BASEPRI, r6
   2330c:	f3bf 8f6f 	isb	sy
}
   23310:	bd70      	pop	{r4, r5, r6, pc}

00023312 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   23312:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   23314:	f7fa fe18 	bl	1df48 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   23318:	bd08      	pop	{r3, pc}

0002331a <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   2331a:	f7fa be15 	b.w	1df48 <sys_clock_tick_get>

0002331e <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   2331e:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   23320:	1c4b      	adds	r3, r1, #1
   23322:	bf08      	it	eq
   23324:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   23328:	4604      	mov	r4, r0
   2332a:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2332c:	d013      	beq.n	23356 <sys_clock_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2332e:	ea54 0105 	orrs.w	r1, r4, r5
   23332:	d103      	bne.n	2333c <sys_clock_timeout_end_calc+0x1e>

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
	return sys_clock_tick_get() + MAX(1, dt);
}
   23334:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   23338:	f7fa be06 	b.w	1df48 <sys_clock_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2333c:	f06f 0101 	mvn.w	r1, #1
   23340:	1a0a      	subs	r2, r1, r0
   23342:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   23346:	eb61 0305 	sbc.w	r3, r1, r5
   2334a:	2a00      	cmp	r2, #0
   2334c:	f173 0100 	sbcs.w	r1, r3, #0
   23350:	db02      	blt.n	23358 <sys_clock_timeout_end_calc+0x3a>
		return Z_TICK_ABS(dt);
   23352:	4610      	mov	r0, r2
   23354:	4619      	mov	r1, r3
}
   23356:	bd38      	pop	{r3, r4, r5, pc}
	return sys_clock_tick_get() + MAX(1, dt);
   23358:	f7fa fdf6 	bl	1df48 <sys_clock_tick_get>
   2335c:	2c01      	cmp	r4, #1
   2335e:	f175 0300 	sbcs.w	r3, r5, #0
   23362:	bfbc      	itt	lt
   23364:	2401      	movlt	r4, #1
   23366:	2500      	movlt	r5, #0
   23368:	1820      	adds	r0, r4, r0
   2336a:	eb45 0101 	adc.w	r1, r5, r1
   2336e:	e7f2      	b.n	23356 <sys_clock_timeout_end_calc+0x38>

00023370 <k_timer_init>:
	timer->status = 0U;
   23370:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   23372:	e9c0 1208 	strd	r1, r2, [r0, #32]
   23376:	f100 0218 	add.w	r2, r0, #24
   2337a:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   2337e:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   23382:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   23384:	6343      	str	r3, [r0, #52]	; 0x34
}
   23386:	4770      	bx	lr

00023388 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   23388:	b510      	push	{r4, lr}
   2338a:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   2338c:	f7ff ff81 	bl	23292 <z_abort_timeout>

	if (inactive) {
   23390:	b9b0      	cbnz	r0, 233c0 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   23392:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23394:	b10b      	cbz	r3, 2339a <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   23396:	4620      	mov	r0, r4
   23398:	4798      	blx	r3
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   2339a:	f104 0018 	add.w	r0, r4, #24
   2339e:	f7ff fe3c 	bl	2301a <z_unpend1_no_timeout>

	if (pending_thread != NULL) {
   233a2:	b168      	cbz	r0, 233c0 <z_impl_k_timer_stop+0x38>
		z_ready_thread(pending_thread);
   233a4:	f7ff fe07 	bl	22fb6 <z_ready_thread>
	__asm__ volatile(
   233a8:	f04f 0320 	mov.w	r3, #32
   233ac:	f3ef 8011 	mrs	r0, BASEPRI
   233b0:	f383 8811 	msr	BASEPRI, r3
   233b4:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
   233b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   233bc:	f7ff bdae 	b.w	22f1c <z_reschedule_irqlock>
   233c0:	bd10      	pop	{r4, pc}

000233c2 <clear_event_registrations>:
	while (num_events--) {
   233c2:	2314      	movs	r3, #20
{
   233c4:	b530      	push	{r4, r5, lr}
   233c6:	fb03 0101 	mla	r1, r3, r1, r0
	event->poller = NULL;
   233ca:	2400      	movs	r4, #0
	while (num_events--) {
   233cc:	4281      	cmp	r1, r0
   233ce:	d100      	bne.n	233d2 <clear_event_registrations+0x10>
}
   233d0:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
   233d2:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   233d6:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   233da:	f003 030f 	and.w	r3, r3, #15
   233de:	2b02      	cmp	r3, #2
   233e0:	d80a      	bhi.n	233f8 <clear_event_registrations+0x36>
   233e2:	b15b      	cbz	r3, 233fc <clear_event_registrations+0x3a>
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   233e4:	f851 3c14 	ldr.w	r3, [r1, #-20]
   233e8:	b143      	cbz	r3, 233fc <clear_event_registrations+0x3a>
	sys_dnode_t *const prev = node->prev;
   233ea:	f851 5c10 	ldr.w	r5, [r1, #-16]
	prev->next = next;
   233ee:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   233f0:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   233f2:	e941 4405 	strd	r4, r4, [r1, #-20]
}
   233f6:	e001      	b.n	233fc <clear_event_registrations+0x3a>
	switch (event->type) {
   233f8:	2b04      	cmp	r3, #4
   233fa:	d0f3      	beq.n	233e4 <clear_event_registrations+0x22>
	__asm__ volatile(
   233fc:	f382 8811 	msr	BASEPRI, r2
   23400:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   23404:	f04f 0320 	mov.w	r3, #32
   23408:	f3ef 8211 	mrs	r2, BASEPRI
   2340c:	f383 8811 	msr	BASEPRI, r3
   23410:	f3bf 8f6f 	isb	sy
   23414:	3914      	subs	r1, #20
   23416:	e7d9      	b.n	233cc <clear_event_registrations+0xa>

00023418 <add_event>:
{
   23418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2341a:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2341c:	e9d0 2300 	ldrd	r2, r3, [r0]
   23420:	4290      	cmp	r0, r2
   23422:	4604      	mov	r4, r0
   23424:	460d      	mov	r5, r1
   23426:	d105      	bne.n	23434 <add_event+0x1c>
	sys_dnode_t *const tail = list->tail;
   23428:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   2342a:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   2342e:	601d      	str	r5, [r3, #0]
	list->tail = node;
   23430:	6065      	str	r5, [r4, #4]
}
   23432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   23434:	2b00      	cmp	r3, #0
   23436:	d0f7      	beq.n	23428 <add_event+0x10>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   23438:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2343a:	b100      	cbz	r0, 2343e <add_event+0x26>
   2343c:	3860      	subs	r0, #96	; 0x60
   2343e:	b107      	cbz	r7, 23442 <add_event+0x2a>
   23440:	3f60      	subs	r7, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   23442:	4639      	mov	r1, r7
   23444:	f7ff fd3d 	bl	22ec2 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   23448:	2800      	cmp	r0, #0
   2344a:	dced      	bgt.n	23428 <add_event+0x10>
	return list->head == list;
   2344c:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2344e:	42b4      	cmp	r4, r6
   23450:	d0ea      	beq.n	23428 <add_event+0x10>
   23452:	2e00      	cmp	r6, #0
   23454:	bf38      	it	cc
   23456:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   23458:	2e00      	cmp	r6, #0
   2345a:	d0e5      	beq.n	23428 <add_event+0x10>
		if (z_sched_prio_cmp(poller_thread(poller),
   2345c:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2345e:	b101      	cbz	r1, 23462 <add_event+0x4a>
   23460:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   23462:	4638      	mov	r0, r7
   23464:	f7ff fd2d 	bl	22ec2 <z_sched_prio_cmp>
   23468:	2800      	cmp	r0, #0
   2346a:	dd05      	ble.n	23478 <add_event+0x60>
	sys_dnode_t *const prev = successor->prev;
   2346c:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2346e:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   23472:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   23474:	6075      	str	r5, [r6, #4]
			return;
   23476:	e7dc      	b.n	23432 <add_event+0x1a>
	return (node == list->tail) ? NULL : node->next;
   23478:	6863      	ldr	r3, [r4, #4]
   2347a:	42b3      	cmp	r3, r6
   2347c:	d0d4      	beq.n	23428 <add_event+0x10>
   2347e:	6836      	ldr	r6, [r6, #0]
   23480:	e7ea      	b.n	23458 <add_event+0x40>

00023482 <register_events>:
{
   23482:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   23486:	f04f 0a00 	mov.w	sl, #0
{
   2348a:	460e      	mov	r6, r1
   2348c:	4614      	mov	r4, r2
   2348e:	461f      	mov	r7, r3
   23490:	4683      	mov	fp, r0
	int events_registered = 0;
   23492:	4655      	mov	r5, sl
	event->poller = NULL;
   23494:	46d0      	mov	r8, sl
	for (int ii = 0; ii < num_events; ii++) {
   23496:	45b2      	cmp	sl, r6
   23498:	db02      	blt.n	234a0 <register_events+0x1e>
}
   2349a:	4628      	mov	r0, r5
   2349c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   234a0:	f04f 0320 	mov.w	r3, #32
   234a4:	f3ef 8911 	mrs	r9, BASEPRI
   234a8:	f383 8811 	msr	BASEPRI, r3
   234ac:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   234b0:	f89b 200d 	ldrb.w	r2, [fp, #13]
   234b4:	f002 020f 	and.w	r2, r2, #15
   234b8:	2a02      	cmp	r2, #2
   234ba:	d006      	beq.n	234ca <register_events+0x48>
   234bc:	2a04      	cmp	r2, #4
   234be:	d008      	beq.n	234d2 <register_events+0x50>
   234c0:	2a01      	cmp	r2, #1
   234c2:	d120      	bne.n	23506 <register_events+0x84>
		if (event->signal->signaled != 0U) {
   234c4:	f8db 3010 	ldr.w	r3, [fp, #16]
   234c8:	e001      	b.n	234ce <register_events+0x4c>
		if (k_sem_count_get(event->sem) > 0U) {
   234ca:	f8db 3010 	ldr.w	r3, [fp, #16]
		if (event->signal->signaled != 0U) {
   234ce:	689b      	ldr	r3, [r3, #8]
   234d0:	e002      	b.n	234d8 <register_events+0x56>
		if (!k_queue_is_empty(event->queue)) {
   234d2:	f8db 3010 	ldr.w	r3, [fp, #16]
   234d6:	681b      	ldr	r3, [r3, #0]
		if (event->signal->signaled != 0U) {
   234d8:	b1ab      	cbz	r3, 23506 <register_events+0x84>
	event->state |= state;
   234da:	f8db 300c 	ldr.w	r3, [fp, #12]
	event->poller = NULL;
   234de:	f8cb 8008 	str.w	r8, [fp, #8]
	event->state |= state;
   234e2:	f3c3 3104 	ubfx	r1, r3, #12, #5
   234e6:	430a      	orrs	r2, r1
   234e8:	f362 3310 	bfi	r3, r2, #12, #5
   234ec:	f8cb 300c 	str.w	r3, [fp, #12]
			poller->is_polling = false;
   234f0:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   234f4:	f389 8811 	msr	BASEPRI, r9
   234f8:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   234fc:	f10a 0a01 	add.w	sl, sl, #1
   23500:	f10b 0b14 	add.w	fp, fp, #20
   23504:	e7c7      	b.n	23496 <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
   23506:	2f00      	cmp	r7, #0
   23508:	d1f4      	bne.n	234f4 <register_events+0x72>
   2350a:	7823      	ldrb	r3, [r4, #0]
   2350c:	2b00      	cmp	r3, #0
   2350e:	d0f1      	beq.n	234f4 <register_events+0x72>
	switch (event->type) {
   23510:	f89b 300d 	ldrb.w	r3, [fp, #13]
   23514:	f003 030f 	and.w	r3, r3, #15
   23518:	2b02      	cmp	r3, #2
   2351a:	d008      	beq.n	2352e <register_events+0xac>
   2351c:	2b04      	cmp	r3, #4
   2351e:	d006      	beq.n	2352e <register_events+0xac>
   23520:	2b01      	cmp	r3, #1
   23522:	d10b      	bne.n	2353c <register_events+0xba>
		add_event(&event->signal->poll_events, event, poller);
   23524:	f8db 0010 	ldr.w	r0, [fp, #16]
   23528:	4622      	mov	r2, r4
   2352a:	4659      	mov	r1, fp
   2352c:	e004      	b.n	23538 <register_events+0xb6>
		add_event(&event->queue->poll_events, event, poller);
   2352e:	f8db 0010 	ldr.w	r0, [fp, #16]
   23532:	4622      	mov	r2, r4
   23534:	4659      	mov	r1, fp
   23536:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   23538:	f7ff ff6e 	bl	23418 <add_event>
	event->poller = poller;
   2353c:	f8cb 4008 	str.w	r4, [fp, #8]
			events_registered += 1;
   23540:	3501      	adds	r5, #1
   23542:	e7d7      	b.n	234f4 <register_events+0x72>

00023544 <signal_poll_event>:
{
   23544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   23548:	6884      	ldr	r4, [r0, #8]
{
   2354a:	4605      	mov	r5, r0
   2354c:	460e      	mov	r6, r1
	if (poller != NULL) {
   2354e:	b144      	cbz	r4, 23562 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   23550:	7863      	ldrb	r3, [r4, #1]
   23552:	2b01      	cmp	r3, #1
   23554:	d138      	bne.n	235c8 <signal_poll_event+0x84>
	if (!z_is_thread_pending(thread)) {
   23556:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2355a:	f013 0302 	ands.w	r3, r3, #2
   2355e:	d10a      	bne.n	23576 <signal_poll_event+0x32>
		poller->is_polling = false;
   23560:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   23562:	68eb      	ldr	r3, [r5, #12]
   23564:	f3c3 3104 	ubfx	r1, r3, #12, #5
   23568:	430e      	orrs	r6, r1
	event->poller = NULL;
   2356a:	2000      	movs	r0, #0
	event->state |= state;
   2356c:	f366 3310 	bfi	r3, r6, #12, #5
	event->poller = NULL;
   23570:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   23572:	60eb      	str	r3, [r5, #12]
	return retcode;
   23574:	e00d      	b.n	23592 <signal_poll_event+0x4e>
	if (z_is_thread_timeout_expired(thread)) {
   23576:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   2357a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2357e:	f06f 0001 	mvn.w	r0, #1
   23582:	428b      	cmp	r3, r1
   23584:	bf08      	it	eq
   23586:	4282      	cmpeq	r2, r0
   23588:	d105      	bne.n	23596 <signal_poll_event+0x52>
		poller->is_polling = false;
   2358a:	2300      	movs	r3, #0
   2358c:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   2358e:	f06f 000a 	mvn.w	r0, #10
}
   23592:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   23596:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   2359a:	4640      	mov	r0, r8
   2359c:	f7ff fcaa 	bl	22ef4 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   235a0:	2e08      	cmp	r6, #8
   235a2:	bf0c      	ite	eq
   235a4:	f06f 0303 	mvneq.w	r3, #3
   235a8:	2300      	movne	r3, #0
   235aa:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   235ac:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   235b0:	06db      	lsls	r3, r3, #27
   235b2:	d102      	bne.n	235ba <signal_poll_event+0x76>
	if (!z_is_thread_ready(thread)) {
   235b4:	f854 7c48 	ldr.w	r7, [r4, #-72]
   235b8:	b10f      	cbz	r7, 235be <signal_poll_event+0x7a>
		poller->is_polling = false;
   235ba:	2300      	movs	r3, #0
   235bc:	e7d0      	b.n	23560 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   235be:	4640      	mov	r0, r8
   235c0:	f7ff fcf9 	bl	22fb6 <z_ready_thread>
		poller->is_polling = false;
   235c4:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   235c6:	e7cc      	b.n	23562 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   235c8:	2b02      	cmp	r3, #2
   235ca:	d1f6      	bne.n	235ba <signal_poll_event+0x76>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   235cc:	7823      	ldrb	r3, [r4, #0]
   235ce:	2b00      	cmp	r3, #0
   235d0:	d0c7      	beq.n	23562 <signal_poll_event+0x1e>
   235d2:	f854 7c04 	ldr.w	r7, [r4, #-4]
   235d6:	2f00      	cmp	r7, #0
   235d8:	d0f4      	beq.n	235c4 <signal_poll_event+0x80>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   235da:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   235de:	f1a4 0914 	sub.w	r9, r4, #20
   235e2:	f104 0014 	add.w	r0, r4, #20
   235e6:	f7ff fe54 	bl	23292 <z_abort_timeout>
		twork->poll_result = 0;
   235ea:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   235ee:	4649      	mov	r1, r9
   235f0:	4638      	mov	r0, r7
   235f2:	f7ff fdfd 	bl	231f0 <k_work_submit_to_queue>
		poller->is_polling = false;
   235f6:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   235fa:	e7b2      	b.n	23562 <signal_poll_event+0x1e>

000235fc <k_poll_event_init>:
{
   235fc:	b510      	push	{r4, lr}
	event->type = type;
   235fe:	0452      	lsls	r2, r2, #17
   23600:	0209      	lsls	r1, r1, #8
   23602:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
   23606:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
   2360a:	430a      	orrs	r2, r1
   2360c:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   2360e:	2400      	movs	r4, #0
	event->type = type;
   23610:	430a      	orrs	r2, r1
	event->obj = obj;
   23612:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   23616:	6084      	str	r4, [r0, #8]
}
   23618:	bd10      	pop	{r4, pc}

0002361a <z_handle_obj_poll_events>:
{
   2361a:	4603      	mov	r3, r0
	return list->head == list;
   2361c:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2361e:	4283      	cmp	r3, r0
   23620:	d008      	beq.n	23634 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   23622:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   23626:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   23628:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2362a:	2300      	movs	r3, #0
	node->prev = NULL;
   2362c:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   23630:	f7ff bf88 	b.w	23544 <signal_poll_event>
}
   23634:	4770      	bx	lr

00023636 <k_free>:
	if (ptr != NULL) {
   23636:	b120      	cbz	r0, 23642 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   23638:	1f01      	subs	r1, r0, #4
   2363a:	f850 0c04 	ldr.w	r0, [r0, #-4]
   2363e:	f7ff bb29 	b.w	22c94 <k_heap_free>
}
   23642:	4770      	bx	lr

00023644 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   23644:	4770      	bx	lr

00023646 <memcmp>:
   23646:	b530      	push	{r4, r5, lr}
   23648:	3901      	subs	r1, #1
   2364a:	2400      	movs	r4, #0
   2364c:	42a2      	cmp	r2, r4
   2364e:	d101      	bne.n	23654 <memcmp+0xe>
   23650:	2000      	movs	r0, #0
   23652:	e005      	b.n	23660 <memcmp+0x1a>
   23654:	5d03      	ldrb	r3, [r0, r4]
   23656:	3401      	adds	r4, #1
   23658:	5d0d      	ldrb	r5, [r1, r4]
   2365a:	42ab      	cmp	r3, r5
   2365c:	d0f6      	beq.n	2364c <memcmp+0x6>
   2365e:	1b58      	subs	r0, r3, r5
   23660:	bd30      	pop	{r4, r5, pc}

00023662 <memcpy>:
   23662:	440a      	add	r2, r1
   23664:	4291      	cmp	r1, r2
   23666:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   2366a:	d100      	bne.n	2366e <memcpy+0xc>
   2366c:	4770      	bx	lr
   2366e:	b510      	push	{r4, lr}
   23670:	f811 4b01 	ldrb.w	r4, [r1], #1
   23674:	f803 4f01 	strb.w	r4, [r3, #1]!
   23678:	4291      	cmp	r1, r2
   2367a:	d1f9      	bne.n	23670 <memcpy+0xe>
   2367c:	bd10      	pop	{r4, pc}

0002367e <memset>:
   2367e:	4402      	add	r2, r0
   23680:	4603      	mov	r3, r0
   23682:	4293      	cmp	r3, r2
   23684:	d100      	bne.n	23688 <memset+0xa>
   23686:	4770      	bx	lr
   23688:	f803 1b01 	strb.w	r1, [r3], #1
   2368c:	e7f9      	b.n	23682 <memset+0x4>

0002368e <strcpy>:
   2368e:	4603      	mov	r3, r0
   23690:	f811 2b01 	ldrb.w	r2, [r1], #1
   23694:	f803 2b01 	strb.w	r2, [r3], #1
   23698:	2a00      	cmp	r2, #0
   2369a:	d1f9      	bne.n	23690 <strcpy+0x2>
   2369c:	4770      	bx	lr

0002369e <strncpy>:
   2369e:	b510      	push	{r4, lr}
   236a0:	3901      	subs	r1, #1
   236a2:	4603      	mov	r3, r0
   236a4:	b132      	cbz	r2, 236b4 <strncpy+0x16>
   236a6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   236aa:	f803 4b01 	strb.w	r4, [r3], #1
   236ae:	3a01      	subs	r2, #1
   236b0:	2c00      	cmp	r4, #0
   236b2:	d1f7      	bne.n	236a4 <strncpy+0x6>
   236b4:	441a      	add	r2, r3
   236b6:	2100      	movs	r1, #0
   236b8:	4293      	cmp	r3, r2
   236ba:	d100      	bne.n	236be <strncpy+0x20>
   236bc:	bd10      	pop	{r4, pc}
   236be:	f803 1b01 	strb.w	r1, [r3], #1
   236c2:	e7f9      	b.n	236b8 <strncpy+0x1a>

000236c4 <strnlen>:
   236c4:	b510      	push	{r4, lr}
   236c6:	4602      	mov	r2, r0
   236c8:	4401      	add	r1, r0
   236ca:	428a      	cmp	r2, r1
   236cc:	4613      	mov	r3, r2
   236ce:	d101      	bne.n	236d4 <strnlen+0x10>
   236d0:	1a18      	subs	r0, r3, r0
   236d2:	bd10      	pop	{r4, pc}
   236d4:	781c      	ldrb	r4, [r3, #0]
   236d6:	3201      	adds	r2, #1
   236d8:	2c00      	cmp	r4, #0
   236da:	d1f6      	bne.n	236ca <strnlen+0x6>
   236dc:	e7f8      	b.n	236d0 <strnlen+0xc>
