
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	200015b0 	.word	0x200015b0
}
   4:	00003a99 	.word	0x00003a99
   8:	000087c1 	.word	0x000087c1
   c:	00003ac9 	.word	0x00003ac9
  10:	00003ac9 	.word	0x00003ac9
  14:	00003ac9 	.word	0x00003ac9
  18:	00003ac9 	.word	0x00003ac9
	...
  2c:	0000386d 	.word	0x0000386d
  30:	00003ac9 	.word	0x00003ac9
  34:	00000000 	.word	0x00000000
  38:	00003825 	.word	0x00003825
  3c:	000086f9 	.word	0x000086f9

00000040 <_irq_vector_table>:
  40:	00003a59 00003a59 00003a59 00003a59     Y:..Y:..Y:..Y:..
  50:	00003a59 00003a59 00003a59 00003a59     Y:..Y:..Y:..Y:..
  60:	00003a59 00003a59 00003a59 00003a59     Y:..Y:..Y:..Y:..
  70:	00003a59 00003a59 00003a59 00003a59     Y:..Y:..Y:..Y:..
  80:	00003a59 00003a59 00003a59 00003a59     Y:..Y:..Y:..Y:..
  90:	00003a59 00003a59 00003a59 00003a59     Y:..Y:..Y:..Y:..
  a0:	00003a59 00003a59 00003a59 00003a59     Y:..Y:..Y:..Y:..
  b0:	00003a59 00003a59 00003a59 00003a59     Y:..Y:..Y:..Y:..
  c0:	00003a59 00003a59 00003a59 00003a59     Y:..Y:..Y:..Y:..
  d0:	00003a59 00003a59 00003a59 00003a59     Y:..Y:..Y:..Y:..
  e0:	00003a59 00003a59 00003a59 00003a59     Y:..Y:..Y:..Y:..
  f0:	00003a59 00003a59 00003a59 00003a59     Y:..Y:..Y:..Y:..

Disassembly of section text:

00000100 <__aeabi_drsub>:
     100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     104:	e002      	b.n	10c <__adddf3>
     106:	bf00      	nop

00000108 <__aeabi_dsub>:
     108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000010c <__adddf3>:
     10c:	b530      	push	{r4, r5, lr}
     10e:	ea4f 0441 	mov.w	r4, r1, lsl #1
     112:	ea4f 0543 	mov.w	r5, r3, lsl #1
     116:	ea94 0f05 	teq	r4, r5
     11a:	bf08      	it	eq
     11c:	ea90 0f02 	teqeq	r0, r2
     120:	bf1f      	itttt	ne
     122:	ea54 0c00 	orrsne.w	ip, r4, r0
     126:	ea55 0c02 	orrsne.w	ip, r5, r2
     12a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     12e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     132:	f000 80e2 	beq.w	2fa <CONFIG_IDLE_STACK_SIZE+0x1ba>
     136:	ea4f 5454 	mov.w	r4, r4, lsr #21
     13a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     13e:	bfb8      	it	lt
     140:	426d      	neglt	r5, r5
     142:	dd0c      	ble.n	15e <CONFIG_IDLE_STACK_SIZE+0x1e>
     144:	442c      	add	r4, r5
     146:	ea80 0202 	eor.w	r2, r0, r2
     14a:	ea81 0303 	eor.w	r3, r1, r3
     14e:	ea82 0000 	eor.w	r0, r2, r0
     152:	ea83 0101 	eor.w	r1, r3, r1
     156:	ea80 0202 	eor.w	r2, r0, r2
     15a:	ea81 0303 	eor.w	r3, r1, r3
     15e:	2d36      	cmp	r5, #54	; 0x36
     160:	bf88      	it	hi
     162:	bd30      	pophi	{r4, r5, pc}
     164:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     168:	ea4f 3101 	mov.w	r1, r1, lsl #12
     16c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     174:	d002      	beq.n	17c <CONFIG_IDLE_STACK_SIZE+0x3c>
     176:	4240      	negs	r0, r0
     178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     17c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     180:	ea4f 3303 	mov.w	r3, r3, lsl #12
     184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     188:	d002      	beq.n	190 <CONFIG_IDLE_STACK_SIZE+0x50>
     18a:	4252      	negs	r2, r2
     18c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     190:	ea94 0f05 	teq	r4, r5
     194:	f000 80a7 	beq.w	2e6 <CONFIG_IDLE_STACK_SIZE+0x1a6>
     198:	f1a4 0401 	sub.w	r4, r4, #1
     19c:	f1d5 0e20 	rsbs	lr, r5, #32
     1a0:	db0d      	blt.n	1be <CONFIG_IDLE_STACK_SIZE+0x7e>
     1a2:	fa02 fc0e 	lsl.w	ip, r2, lr
     1a6:	fa22 f205 	lsr.w	r2, r2, r5
     1aa:	1880      	adds	r0, r0, r2
     1ac:	f141 0100 	adc.w	r1, r1, #0
     1b0:	fa03 f20e 	lsl.w	r2, r3, lr
     1b4:	1880      	adds	r0, r0, r2
     1b6:	fa43 f305 	asr.w	r3, r3, r5
     1ba:	4159      	adcs	r1, r3
     1bc:	e00e      	b.n	1dc <CONFIG_IDLE_STACK_SIZE+0x9c>
     1be:	f1a5 0520 	sub.w	r5, r5, #32
     1c2:	f10e 0e20 	add.w	lr, lr, #32
     1c6:	2a01      	cmp	r2, #1
     1c8:	fa03 fc0e 	lsl.w	ip, r3, lr
     1cc:	bf28      	it	cs
     1ce:	f04c 0c02 	orrcs.w	ip, ip, #2
     1d2:	fa43 f305 	asr.w	r3, r3, r5
     1d6:	18c0      	adds	r0, r0, r3
     1d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     1dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1e0:	d507      	bpl.n	1f2 <CONFIG_IDLE_STACK_SIZE+0xb2>
     1e2:	f04f 0e00 	mov.w	lr, #0
     1e6:	f1dc 0c00 	rsbs	ip, ip, #0
     1ea:	eb7e 0000 	sbcs.w	r0, lr, r0
     1ee:	eb6e 0101 	sbc.w	r1, lr, r1
     1f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1f6:	d31b      	bcc.n	230 <CONFIG_IDLE_STACK_SIZE+0xf0>
     1f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1fc:	d30c      	bcc.n	218 <CONFIG_IDLE_STACK_SIZE+0xd8>
     1fe:	0849      	lsrs	r1, r1, #1
     200:	ea5f 0030 	movs.w	r0, r0, rrx
     204:	ea4f 0c3c 	mov.w	ip, ip, rrx
     208:	f104 0401 	add.w	r4, r4, #1
     20c:	ea4f 5244 	mov.w	r2, r4, lsl #21
     210:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     214:	f080 809a 	bcs.w	34c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x4c>
     218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     21c:	bf08      	it	eq
     21e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     222:	f150 0000 	adcs.w	r0, r0, #0
     226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     22a:	ea41 0105 	orr.w	r1, r1, r5
     22e:	bd30      	pop	{r4, r5, pc}
     230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     234:	4140      	adcs	r0, r0
     236:	eb41 0101 	adc.w	r1, r1, r1
     23a:	3c01      	subs	r4, #1
     23c:	bf28      	it	cs
     23e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     242:	d2e9      	bcs.n	218 <CONFIG_IDLE_STACK_SIZE+0xd8>
     244:	f091 0f00 	teq	r1, #0
     248:	bf04      	itt	eq
     24a:	4601      	moveq	r1, r0
     24c:	2000      	moveq	r0, #0
     24e:	fab1 f381 	clz	r3, r1
     252:	bf08      	it	eq
     254:	3320      	addeq	r3, #32
     256:	f1a3 030b 	sub.w	r3, r3, #11
     25a:	f1b3 0220 	subs.w	r2, r3, #32
     25e:	da0c      	bge.n	27a <CONFIG_IDLE_STACK_SIZE+0x13a>
     260:	320c      	adds	r2, #12
     262:	dd08      	ble.n	276 <CONFIG_IDLE_STACK_SIZE+0x136>
     264:	f102 0c14 	add.w	ip, r2, #20
     268:	f1c2 020c 	rsb	r2, r2, #12
     26c:	fa01 f00c 	lsl.w	r0, r1, ip
     270:	fa21 f102 	lsr.w	r1, r1, r2
     274:	e00c      	b.n	290 <CONFIG_IDLE_STACK_SIZE+0x150>
     276:	f102 0214 	add.w	r2, r2, #20
     27a:	bfd8      	it	le
     27c:	f1c2 0c20 	rsble	ip, r2, #32
     280:	fa01 f102 	lsl.w	r1, r1, r2
     284:	fa20 fc0c 	lsr.w	ip, r0, ip
     288:	bfdc      	itt	le
     28a:	ea41 010c 	orrle.w	r1, r1, ip
     28e:	4090      	lslle	r0, r2
     290:	1ae4      	subs	r4, r4, r3
     292:	bfa2      	ittt	ge
     294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     298:	4329      	orrge	r1, r5
     29a:	bd30      	popge	{r4, r5, pc}
     29c:	ea6f 0404 	mvn.w	r4, r4
     2a0:	3c1f      	subs	r4, #31
     2a2:	da1c      	bge.n	2de <CONFIG_IDLE_STACK_SIZE+0x19e>
     2a4:	340c      	adds	r4, #12
     2a6:	dc0e      	bgt.n	2c6 <CONFIG_IDLE_STACK_SIZE+0x186>
     2a8:	f104 0414 	add.w	r4, r4, #20
     2ac:	f1c4 0220 	rsb	r2, r4, #32
     2b0:	fa20 f004 	lsr.w	r0, r0, r4
     2b4:	fa01 f302 	lsl.w	r3, r1, r2
     2b8:	ea40 0003 	orr.w	r0, r0, r3
     2bc:	fa21 f304 	lsr.w	r3, r1, r4
     2c0:	ea45 0103 	orr.w	r1, r5, r3
     2c4:	bd30      	pop	{r4, r5, pc}
     2c6:	f1c4 040c 	rsb	r4, r4, #12
     2ca:	f1c4 0220 	rsb	r2, r4, #32
     2ce:	fa20 f002 	lsr.w	r0, r0, r2
     2d2:	fa01 f304 	lsl.w	r3, r1, r4
     2d6:	ea40 0003 	orr.w	r0, r0, r3
     2da:	4629      	mov	r1, r5
     2dc:	bd30      	pop	{r4, r5, pc}
     2de:	fa21 f004 	lsr.w	r0, r1, r4
     2e2:	4629      	mov	r1, r5
     2e4:	bd30      	pop	{r4, r5, pc}
     2e6:	f094 0f00 	teq	r4, #0
     2ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ee:	bf06      	itte	eq
     2f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2f4:	3401      	addeq	r4, #1
     2f6:	3d01      	subne	r5, #1
     2f8:	e74e      	b.n	198 <CONFIG_IDLE_STACK_SIZE+0x58>
     2fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2fe:	bf18      	it	ne
     300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     304:	d029      	beq.n	35a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x5a>
     306:	ea94 0f05 	teq	r4, r5
     30a:	bf08      	it	eq
     30c:	ea90 0f02 	teqeq	r0, r2
     310:	d005      	beq.n	31e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x1e>
     312:	ea54 0c00 	orrs.w	ip, r4, r0
     316:	bf04      	itt	eq
     318:	4619      	moveq	r1, r3
     31a:	4610      	moveq	r0, r2
     31c:	bd30      	pop	{r4, r5, pc}
     31e:	ea91 0f03 	teq	r1, r3
     322:	bf1e      	ittt	ne
     324:	2100      	movne	r1, #0
     326:	2000      	movne	r0, #0
     328:	bd30      	popne	{r4, r5, pc}
     32a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     32e:	d105      	bne.n	33c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x3c>
     330:	0040      	lsls	r0, r0, #1
     332:	4149      	adcs	r1, r1
     334:	bf28      	it	cs
     336:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     33a:	bd30      	pop	{r4, r5, pc}
     33c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     340:	bf3c      	itt	cc
     342:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     346:	bd30      	popcc	{r4, r5, pc}
     348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     34c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     354:	f04f 0000 	mov.w	r0, #0
     358:	bd30      	pop	{r4, r5, pc}
     35a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     35e:	bf1a      	itte	ne
     360:	4619      	movne	r1, r3
     362:	4610      	movne	r0, r2
     364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     368:	bf1c      	itt	ne
     36a:	460b      	movne	r3, r1
     36c:	4602      	movne	r2, r0
     36e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     372:	bf06      	itte	eq
     374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     378:	ea91 0f03 	teqeq	r1, r3
     37c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     380:	bd30      	pop	{r4, r5, pc}
     382:	bf00      	nop

00000384 <__aeabi_ui2d>:
     384:	f090 0f00 	teq	r0, #0
     388:	bf04      	itt	eq
     38a:	2100      	moveq	r1, #0
     38c:	4770      	bxeq	lr
     38e:	b530      	push	{r4, r5, lr}
     390:	f44f 6480 	mov.w	r4, #1024	; 0x400
     394:	f104 0432 	add.w	r4, r4, #50	; 0x32
     398:	f04f 0500 	mov.w	r5, #0
     39c:	f04f 0100 	mov.w	r1, #0
     3a0:	e750      	b.n	244 <CONFIG_IDLE_STACK_SIZE+0x104>
     3a2:	bf00      	nop

000003a4 <__aeabi_i2d>:
     3a4:	f090 0f00 	teq	r0, #0
     3a8:	bf04      	itt	eq
     3aa:	2100      	moveq	r1, #0
     3ac:	4770      	bxeq	lr
     3ae:	b530      	push	{r4, r5, lr}
     3b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     3bc:	bf48      	it	mi
     3be:	4240      	negmi	r0, r0
     3c0:	f04f 0100 	mov.w	r1, #0
     3c4:	e73e      	b.n	244 <CONFIG_IDLE_STACK_SIZE+0x104>
     3c6:	bf00      	nop

000003c8 <__aeabi_f2d>:
     3c8:	0042      	lsls	r2, r0, #1
     3ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3ce:	ea4f 0131 	mov.w	r1, r1, rrx
     3d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3d6:	bf1f      	itttt	ne
     3d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     3dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3e4:	4770      	bxne	lr
     3e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3ea:	bf08      	it	eq
     3ec:	4770      	bxeq	lr
     3ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3f2:	bf04      	itt	eq
     3f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     3f8:	4770      	bxeq	lr
     3fa:	b530      	push	{r4, r5, lr}
     3fc:	f44f 7460 	mov.w	r4, #896	; 0x380
     400:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     408:	e71c      	b.n	244 <CONFIG_IDLE_STACK_SIZE+0x104>
     40a:	bf00      	nop

0000040c <__aeabi_ul2d>:
     40c:	ea50 0201 	orrs.w	r2, r0, r1
     410:	bf08      	it	eq
     412:	4770      	bxeq	lr
     414:	b530      	push	{r4, r5, lr}
     416:	f04f 0500 	mov.w	r5, #0
     41a:	e00a      	b.n	432 <__aeabi_l2d+0x16>

0000041c <__aeabi_l2d>:
     41c:	ea50 0201 	orrs.w	r2, r0, r1
     420:	bf08      	it	eq
     422:	4770      	bxeq	lr
     424:	b530      	push	{r4, r5, lr}
     426:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     42a:	d502      	bpl.n	432 <__aeabi_l2d+0x16>
     42c:	4240      	negs	r0, r0
     42e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     432:	f44f 6480 	mov.w	r4, #1024	; 0x400
     436:	f104 0432 	add.w	r4, r4, #50	; 0x32
     43a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     43e:	f43f aed8 	beq.w	1f2 <CONFIG_IDLE_STACK_SIZE+0xb2>
     442:	f04f 0203 	mov.w	r2, #3
     446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     44a:	bf18      	it	ne
     44c:	3203      	addne	r2, #3
     44e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     452:	bf18      	it	ne
     454:	3203      	addne	r2, #3
     456:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     45a:	f1c2 0320 	rsb	r3, r2, #32
     45e:	fa00 fc03 	lsl.w	ip, r0, r3
     462:	fa20 f002 	lsr.w	r0, r0, r2
     466:	fa01 fe03 	lsl.w	lr, r1, r3
     46a:	ea40 000e 	orr.w	r0, r0, lr
     46e:	fa21 f102 	lsr.w	r1, r1, r2
     472:	4414      	add	r4, r2
     474:	e6bd      	b.n	1f2 <CONFIG_IDLE_STACK_SIZE+0xb2>
     476:	bf00      	nop

00000478 <__aeabi_dmul>:
     478:	b570      	push	{r4, r5, r6, lr}
     47a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     47e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     482:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     486:	bf1d      	ittte	ne
     488:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     48c:	ea94 0f0c 	teqne	r4, ip
     490:	ea95 0f0c 	teqne	r5, ip
     494:	f000 f8de 	bleq	654 <__aeabi_dmul+0x1dc>
     498:	442c      	add	r4, r5
     49a:	ea81 0603 	eor.w	r6, r1, r3
     49e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     4a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     4a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     4aa:	bf18      	it	ne
     4ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     4b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     4b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     4b8:	d038      	beq.n	52c <__aeabi_dmul+0xb4>
     4ba:	fba0 ce02 	umull	ip, lr, r0, r2
     4be:	f04f 0500 	mov.w	r5, #0
     4c2:	fbe1 e502 	umlal	lr, r5, r1, r2
     4c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     4ca:	fbe0 e503 	umlal	lr, r5, r0, r3
     4ce:	f04f 0600 	mov.w	r6, #0
     4d2:	fbe1 5603 	umlal	r5, r6, r1, r3
     4d6:	f09c 0f00 	teq	ip, #0
     4da:	bf18      	it	ne
     4dc:	f04e 0e01 	orrne.w	lr, lr, #1
     4e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     4e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4ec:	d204      	bcs.n	4f8 <__aeabi_dmul+0x80>
     4ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4f2:	416d      	adcs	r5, r5
     4f4:	eb46 0606 	adc.w	r6, r6, r6
     4f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     500:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     504:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     508:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     50c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     510:	bf88      	it	hi
     512:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     516:	d81e      	bhi.n	556 <__aeabi_dmul+0xde>
     518:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     51c:	bf08      	it	eq
     51e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     522:	f150 0000 	adcs.w	r0, r0, #0
     526:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     52a:	bd70      	pop	{r4, r5, r6, pc}
     52c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     530:	ea46 0101 	orr.w	r1, r6, r1
     534:	ea40 0002 	orr.w	r0, r0, r2
     538:	ea81 0103 	eor.w	r1, r1, r3
     53c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     540:	bfc2      	ittt	gt
     542:	ebd4 050c 	rsbsgt	r5, r4, ip
     546:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     54a:	bd70      	popgt	{r4, r5, r6, pc}
     54c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     550:	f04f 0e00 	mov.w	lr, #0
     554:	3c01      	subs	r4, #1
     556:	f300 80ab 	bgt.w	6b0 <__aeabi_dmul+0x238>
     55a:	f114 0f36 	cmn.w	r4, #54	; 0x36
     55e:	bfde      	ittt	le
     560:	2000      	movle	r0, #0
     562:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     566:	bd70      	pople	{r4, r5, r6, pc}
     568:	f1c4 0400 	rsb	r4, r4, #0
     56c:	3c20      	subs	r4, #32
     56e:	da35      	bge.n	5dc <__aeabi_dmul+0x164>
     570:	340c      	adds	r4, #12
     572:	dc1b      	bgt.n	5ac <__aeabi_dmul+0x134>
     574:	f104 0414 	add.w	r4, r4, #20
     578:	f1c4 0520 	rsb	r5, r4, #32
     57c:	fa00 f305 	lsl.w	r3, r0, r5
     580:	fa20 f004 	lsr.w	r0, r0, r4
     584:	fa01 f205 	lsl.w	r2, r1, r5
     588:	ea40 0002 	orr.w	r0, r0, r2
     58c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     590:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     594:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     598:	fa21 f604 	lsr.w	r6, r1, r4
     59c:	eb42 0106 	adc.w	r1, r2, r6
     5a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5a4:	bf08      	it	eq
     5a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5aa:	bd70      	pop	{r4, r5, r6, pc}
     5ac:	f1c4 040c 	rsb	r4, r4, #12
     5b0:	f1c4 0520 	rsb	r5, r4, #32
     5b4:	fa00 f304 	lsl.w	r3, r0, r4
     5b8:	fa20 f005 	lsr.w	r0, r0, r5
     5bc:	fa01 f204 	lsl.w	r2, r1, r4
     5c0:	ea40 0002 	orr.w	r0, r0, r2
     5c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5cc:	f141 0100 	adc.w	r1, r1, #0
     5d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5d4:	bf08      	it	eq
     5d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5da:	bd70      	pop	{r4, r5, r6, pc}
     5dc:	f1c4 0520 	rsb	r5, r4, #32
     5e0:	fa00 f205 	lsl.w	r2, r0, r5
     5e4:	ea4e 0e02 	orr.w	lr, lr, r2
     5e8:	fa20 f304 	lsr.w	r3, r0, r4
     5ec:	fa01 f205 	lsl.w	r2, r1, r5
     5f0:	ea43 0302 	orr.w	r3, r3, r2
     5f4:	fa21 f004 	lsr.w	r0, r1, r4
     5f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5fc:	fa21 f204 	lsr.w	r2, r1, r4
     600:	ea20 0002 	bic.w	r0, r0, r2
     604:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     60c:	bf08      	it	eq
     60e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     612:	bd70      	pop	{r4, r5, r6, pc}
     614:	f094 0f00 	teq	r4, #0
     618:	d10f      	bne.n	63a <__aeabi_dmul+0x1c2>
     61a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     61e:	0040      	lsls	r0, r0, #1
     620:	eb41 0101 	adc.w	r1, r1, r1
     624:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     628:	bf08      	it	eq
     62a:	3c01      	subeq	r4, #1
     62c:	d0f7      	beq.n	61e <__aeabi_dmul+0x1a6>
     62e:	ea41 0106 	orr.w	r1, r1, r6
     632:	f095 0f00 	teq	r5, #0
     636:	bf18      	it	ne
     638:	4770      	bxne	lr
     63a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     63e:	0052      	lsls	r2, r2, #1
     640:	eb43 0303 	adc.w	r3, r3, r3
     644:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     648:	bf08      	it	eq
     64a:	3d01      	subeq	r5, #1
     64c:	d0f7      	beq.n	63e <__aeabi_dmul+0x1c6>
     64e:	ea43 0306 	orr.w	r3, r3, r6
     652:	4770      	bx	lr
     654:	ea94 0f0c 	teq	r4, ip
     658:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     65c:	bf18      	it	ne
     65e:	ea95 0f0c 	teqne	r5, ip
     662:	d00c      	beq.n	67e <__aeabi_dmul+0x206>
     664:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     668:	bf18      	it	ne
     66a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     66e:	d1d1      	bne.n	614 <__aeabi_dmul+0x19c>
     670:	ea81 0103 	eor.w	r1, r1, r3
     674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     678:	f04f 0000 	mov.w	r0, #0
     67c:	bd70      	pop	{r4, r5, r6, pc}
     67e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     682:	bf06      	itte	eq
     684:	4610      	moveq	r0, r2
     686:	4619      	moveq	r1, r3
     688:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     68c:	d019      	beq.n	6c2 <__aeabi_dmul+0x24a>
     68e:	ea94 0f0c 	teq	r4, ip
     692:	d102      	bne.n	69a <__aeabi_dmul+0x222>
     694:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     698:	d113      	bne.n	6c2 <__aeabi_dmul+0x24a>
     69a:	ea95 0f0c 	teq	r5, ip
     69e:	d105      	bne.n	6ac <__aeabi_dmul+0x234>
     6a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     6a4:	bf1c      	itt	ne
     6a6:	4610      	movne	r0, r2
     6a8:	4619      	movne	r1, r3
     6aa:	d10a      	bne.n	6c2 <__aeabi_dmul+0x24a>
     6ac:	ea81 0103 	eor.w	r1, r1, r3
     6b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     6bc:	f04f 0000 	mov.w	r0, #0
     6c0:	bd70      	pop	{r4, r5, r6, pc}
     6c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     6ca:	bd70      	pop	{r4, r5, r6, pc}

000006cc <__aeabi_ddiv>:
     6cc:	b570      	push	{r4, r5, r6, lr}
     6ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
     6d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     6d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     6da:	bf1d      	ittte	ne
     6dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     6e0:	ea94 0f0c 	teqne	r4, ip
     6e4:	ea95 0f0c 	teqne	r5, ip
     6e8:	f000 f8a7 	bleq	83a <CONFIG_ISR_STACK_SIZE+0x3a>
     6ec:	eba4 0405 	sub.w	r4, r4, r5
     6f0:	ea81 0e03 	eor.w	lr, r1, r3
     6f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6fc:	f000 8088 	beq.w	810 <CONFIG_ISR_STACK_SIZE+0x10>
     700:	ea4f 3303 	mov.w	r3, r3, lsl #12
     704:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     708:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     70c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     710:	ea4f 2202 	mov.w	r2, r2, lsl #8
     714:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     718:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     71c:	ea4f 2600 	mov.w	r6, r0, lsl #8
     720:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     724:	429d      	cmp	r5, r3
     726:	bf08      	it	eq
     728:	4296      	cmpeq	r6, r2
     72a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     72e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     732:	d202      	bcs.n	73a <__aeabi_ddiv+0x6e>
     734:	085b      	lsrs	r3, r3, #1
     736:	ea4f 0232 	mov.w	r2, r2, rrx
     73a:	1ab6      	subs	r6, r6, r2
     73c:	eb65 0503 	sbc.w	r5, r5, r3
     740:	085b      	lsrs	r3, r3, #1
     742:	ea4f 0232 	mov.w	r2, r2, rrx
     746:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     74a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     74e:	ebb6 0e02 	subs.w	lr, r6, r2
     752:	eb75 0e03 	sbcs.w	lr, r5, r3
     756:	bf22      	ittt	cs
     758:	1ab6      	subcs	r6, r6, r2
     75a:	4675      	movcs	r5, lr
     75c:	ea40 000c 	orrcs.w	r0, r0, ip
     760:	085b      	lsrs	r3, r3, #1
     762:	ea4f 0232 	mov.w	r2, r2, rrx
     766:	ebb6 0e02 	subs.w	lr, r6, r2
     76a:	eb75 0e03 	sbcs.w	lr, r5, r3
     76e:	bf22      	ittt	cs
     770:	1ab6      	subcs	r6, r6, r2
     772:	4675      	movcs	r5, lr
     774:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     778:	085b      	lsrs	r3, r3, #1
     77a:	ea4f 0232 	mov.w	r2, r2, rrx
     77e:	ebb6 0e02 	subs.w	lr, r6, r2
     782:	eb75 0e03 	sbcs.w	lr, r5, r3
     786:	bf22      	ittt	cs
     788:	1ab6      	subcs	r6, r6, r2
     78a:	4675      	movcs	r5, lr
     78c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     790:	085b      	lsrs	r3, r3, #1
     792:	ea4f 0232 	mov.w	r2, r2, rrx
     796:	ebb6 0e02 	subs.w	lr, r6, r2
     79a:	eb75 0e03 	sbcs.w	lr, r5, r3
     79e:	bf22      	ittt	cs
     7a0:	1ab6      	subcs	r6, r6, r2
     7a2:	4675      	movcs	r5, lr
     7a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     7a8:	ea55 0e06 	orrs.w	lr, r5, r6
     7ac:	d018      	beq.n	7e0 <__aeabi_ddiv+0x114>
     7ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
     7b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     7b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
     7ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     7be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     7c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     7c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     7ca:	d1c0      	bne.n	74e <__aeabi_ddiv+0x82>
     7cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7d0:	d10b      	bne.n	7ea <__aeabi_ddiv+0x11e>
     7d2:	ea41 0100 	orr.w	r1, r1, r0
     7d6:	f04f 0000 	mov.w	r0, #0
     7da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     7de:	e7b6      	b.n	74e <__aeabi_ddiv+0x82>
     7e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7e4:	bf04      	itt	eq
     7e6:	4301      	orreq	r1, r0
     7e8:	2000      	moveq	r0, #0
     7ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7ee:	bf88      	it	hi
     7f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7f4:	f63f aeaf 	bhi.w	556 <__aeabi_dmul+0xde>
     7f8:	ebb5 0c03 	subs.w	ip, r5, r3
     7fc:	bf04      	itt	eq
     7fe:	ebb6 0c02 	subseq.w	ip, r6, r2
     802:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     806:	f150 0000 	adcs.w	r0, r0, #0
     80a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     80e:	bd70      	pop	{r4, r5, r6, pc}
     810:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     814:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     818:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     81c:	bfc2      	ittt	gt
     81e:	ebd4 050c 	rsbsgt	r5, r4, ip
     822:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     826:	bd70      	popgt	{r4, r5, r6, pc}
     828:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     82c:	f04f 0e00 	mov.w	lr, #0
     830:	3c01      	subs	r4, #1
     832:	e690      	b.n	556 <__aeabi_dmul+0xde>
     834:	ea45 0e06 	orr.w	lr, r5, r6
     838:	e68d      	b.n	556 <__aeabi_dmul+0xde>
     83a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     83e:	ea94 0f0c 	teq	r4, ip
     842:	bf08      	it	eq
     844:	ea95 0f0c 	teqeq	r5, ip
     848:	f43f af3b 	beq.w	6c2 <__aeabi_dmul+0x24a>
     84c:	ea94 0f0c 	teq	r4, ip
     850:	d10a      	bne.n	868 <CONFIG_ISR_STACK_SIZE+0x68>
     852:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     856:	f47f af34 	bne.w	6c2 <__aeabi_dmul+0x24a>
     85a:	ea95 0f0c 	teq	r5, ip
     85e:	f47f af25 	bne.w	6ac <__aeabi_dmul+0x234>
     862:	4610      	mov	r0, r2
     864:	4619      	mov	r1, r3
     866:	e72c      	b.n	6c2 <__aeabi_dmul+0x24a>
     868:	ea95 0f0c 	teq	r5, ip
     86c:	d106      	bne.n	87c <CONFIG_ISR_STACK_SIZE+0x7c>
     86e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     872:	f43f aefd 	beq.w	670 <__aeabi_dmul+0x1f8>
     876:	4610      	mov	r0, r2
     878:	4619      	mov	r1, r3
     87a:	e722      	b.n	6c2 <__aeabi_dmul+0x24a>
     87c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     880:	bf18      	it	ne
     882:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     886:	f47f aec5 	bne.w	614 <__aeabi_dmul+0x19c>
     88a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     88e:	f47f af0d 	bne.w	6ac <__aeabi_dmul+0x234>
     892:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     896:	f47f aeeb 	bne.w	670 <__aeabi_dmul+0x1f8>
     89a:	e712      	b.n	6c2 <__aeabi_dmul+0x24a>

0000089c <__gedf2>:
     89c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
     8a0:	e006      	b.n	8b0 <__cmpdf2+0x4>
     8a2:	bf00      	nop

000008a4 <__ledf2>:
     8a4:	f04f 0c01 	mov.w	ip, #1
     8a8:	e002      	b.n	8b0 <__cmpdf2+0x4>
     8aa:	bf00      	nop

000008ac <__cmpdf2>:
     8ac:	f04f 0c01 	mov.w	ip, #1
     8b0:	f84d cd04 	str.w	ip, [sp, #-4]!
     8b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     8b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     8bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     8c0:	bf18      	it	ne
     8c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     8c6:	d01b      	beq.n	900 <__cmpdf2+0x54>
     8c8:	b001      	add	sp, #4
     8ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     8ce:	bf0c      	ite	eq
     8d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     8d4:	ea91 0f03 	teqne	r1, r3
     8d8:	bf02      	ittt	eq
     8da:	ea90 0f02 	teqeq	r0, r2
     8de:	2000      	moveq	r0, #0
     8e0:	4770      	bxeq	lr
     8e2:	f110 0f00 	cmn.w	r0, #0
     8e6:	ea91 0f03 	teq	r1, r3
     8ea:	bf58      	it	pl
     8ec:	4299      	cmppl	r1, r3
     8ee:	bf08      	it	eq
     8f0:	4290      	cmpeq	r0, r2
     8f2:	bf2c      	ite	cs
     8f4:	17d8      	asrcs	r0, r3, #31
     8f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     8fa:	f040 0001 	orr.w	r0, r0, #1
     8fe:	4770      	bx	lr
     900:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     908:	d102      	bne.n	910 <__cmpdf2+0x64>
     90a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     90e:	d107      	bne.n	920 <__cmpdf2+0x74>
     910:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     914:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     918:	d1d6      	bne.n	8c8 <__cmpdf2+0x1c>
     91a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     91e:	d0d3      	beq.n	8c8 <__cmpdf2+0x1c>
     920:	f85d 0b04 	ldr.w	r0, [sp], #4
     924:	4770      	bx	lr
     926:	bf00      	nop

00000928 <__aeabi_cdrcmple>:
     928:	4684      	mov	ip, r0
     92a:	4610      	mov	r0, r2
     92c:	4662      	mov	r2, ip
     92e:	468c      	mov	ip, r1
     930:	4619      	mov	r1, r3
     932:	4663      	mov	r3, ip
     934:	e000      	b.n	938 <__aeabi_cdcmpeq>
     936:	bf00      	nop

00000938 <__aeabi_cdcmpeq>:
     938:	b501      	push	{r0, lr}
     93a:	f7ff ffb7 	bl	8ac <__cmpdf2>
     93e:	2800      	cmp	r0, #0
     940:	bf48      	it	mi
     942:	f110 0f00 	cmnmi.w	r0, #0
     946:	bd01      	pop	{r0, pc}

00000948 <__aeabi_dcmpeq>:
     948:	f84d ed08 	str.w	lr, [sp, #-8]!
     94c:	f7ff fff4 	bl	938 <__aeabi_cdcmpeq>
     950:	bf0c      	ite	eq
     952:	2001      	moveq	r0, #1
     954:	2000      	movne	r0, #0
     956:	f85d fb08 	ldr.w	pc, [sp], #8
     95a:	bf00      	nop

0000095c <__aeabi_dcmplt>:
     95c:	f84d ed08 	str.w	lr, [sp, #-8]!
     960:	f7ff ffea 	bl	938 <__aeabi_cdcmpeq>
     964:	bf34      	ite	cc
     966:	2001      	movcc	r0, #1
     968:	2000      	movcs	r0, #0
     96a:	f85d fb08 	ldr.w	pc, [sp], #8
     96e:	bf00      	nop

00000970 <__aeabi_dcmple>:
     970:	f84d ed08 	str.w	lr, [sp, #-8]!
     974:	f7ff ffe0 	bl	938 <__aeabi_cdcmpeq>
     978:	bf94      	ite	ls
     97a:	2001      	movls	r0, #1
     97c:	2000      	movhi	r0, #0
     97e:	f85d fb08 	ldr.w	pc, [sp], #8
     982:	bf00      	nop

00000984 <__aeabi_dcmpge>:
     984:	f84d ed08 	str.w	lr, [sp, #-8]!
     988:	f7ff ffce 	bl	928 <__aeabi_cdrcmple>
     98c:	bf94      	ite	ls
     98e:	2001      	movls	r0, #1
     990:	2000      	movhi	r0, #0
     992:	f85d fb08 	ldr.w	pc, [sp], #8
     996:	bf00      	nop

00000998 <__aeabi_dcmpgt>:
     998:	f84d ed08 	str.w	lr, [sp, #-8]!
     99c:	f7ff ffc4 	bl	928 <__aeabi_cdrcmple>
     9a0:	bf34      	ite	cc
     9a2:	2001      	movcc	r0, #1
     9a4:	2000      	movcs	r0, #0
     9a6:	f85d fb08 	ldr.w	pc, [sp], #8
     9aa:	bf00      	nop

000009ac <__aeabi_d2iz>:
     9ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
     9b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     9b4:	d215      	bcs.n	9e2 <__aeabi_d2iz+0x36>
     9b6:	d511      	bpl.n	9dc <__aeabi_d2iz+0x30>
     9b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     9bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     9c0:	d912      	bls.n	9e8 <__aeabi_d2iz+0x3c>
     9c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     9c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     9ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     9ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     9d2:	fa23 f002 	lsr.w	r0, r3, r2
     9d6:	bf18      	it	ne
     9d8:	4240      	negne	r0, r0
     9da:	4770      	bx	lr
     9dc:	f04f 0000 	mov.w	r0, #0
     9e0:	4770      	bx	lr
     9e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     9e6:	d105      	bne.n	9f4 <__aeabi_d2iz+0x48>
     9e8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     9ec:	bf08      	it	eq
     9ee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     9f2:	4770      	bx	lr
     9f4:	f04f 0000 	mov.w	r0, #0
     9f8:	4770      	bx	lr
     9fa:	bf00      	nop

000009fc <__aeabi_d2uiz>:
     9fc:	004a      	lsls	r2, r1, #1
     9fe:	d211      	bcs.n	a24 <__aeabi_d2uiz+0x28>
     a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     a04:	d211      	bcs.n	a2a <__aeabi_d2uiz+0x2e>
     a06:	d50d      	bpl.n	a24 <__aeabi_d2uiz+0x28>
     a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     a10:	d40e      	bmi.n	a30 <__aeabi_d2uiz+0x34>
     a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     a1e:	fa23 f002 	lsr.w	r0, r3, r2
     a22:	4770      	bx	lr
     a24:	f04f 0000 	mov.w	r0, #0
     a28:	4770      	bx	lr
     a2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     a2e:	d102      	bne.n	a36 <__aeabi_d2uiz+0x3a>
     a30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     a34:	4770      	bx	lr
     a36:	f04f 0000 	mov.w	r0, #0
     a3a:	4770      	bx	lr

00000a3c <__aeabi_uldivmod>:
     a3c:	b953      	cbnz	r3, a54 <__aeabi_uldivmod+0x18>
     a3e:	b94a      	cbnz	r2, a54 <__aeabi_uldivmod+0x18>
     a40:	2900      	cmp	r1, #0
     a42:	bf08      	it	eq
     a44:	2800      	cmpeq	r0, #0
     a46:	bf1c      	itt	ne
     a48:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     a4c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     a50:	f000 b96e 	b.w	d30 <__aeabi_idiv0>
     a54:	f1ad 0c08 	sub.w	ip, sp, #8
     a58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     a5c:	f000 f806 	bl	a6c <__udivmoddi4>
     a60:	f8dd e004 	ldr.w	lr, [sp, #4]
     a64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     a68:	b004      	add	sp, #16
     a6a:	4770      	bx	lr

00000a6c <__udivmoddi4>:
     a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     a70:	9d08      	ldr	r5, [sp, #32]
     a72:	460e      	mov	r6, r1
     a74:	4604      	mov	r4, r0
     a76:	468c      	mov	ip, r1
     a78:	2b00      	cmp	r3, #0
     a7a:	f040 8081 	bne.w	b80 <__udivmoddi4+0x114>
     a7e:	428a      	cmp	r2, r1
     a80:	4617      	mov	r7, r2
     a82:	d945      	bls.n	b10 <__udivmoddi4+0xa4>
     a84:	fab2 f282 	clz	r2, r2
     a88:	b14a      	cbz	r2, a9e <__udivmoddi4+0x32>
     a8a:	f1c2 0120 	rsb	r1, r2, #32
     a8e:	fa06 f302 	lsl.w	r3, r6, r2
     a92:	fa20 f101 	lsr.w	r1, r0, r1
     a96:	4097      	lsls	r7, r2
     a98:	ea41 0c03 	orr.w	ip, r1, r3
     a9c:	4094      	lsls	r4, r2
     a9e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     aa2:	0c23      	lsrs	r3, r4, #16
     aa4:	fbbc f6fe 	udiv	r6, ip, lr
     aa8:	b2b9      	uxth	r1, r7
     aaa:	fb0e cc16 	mls	ip, lr, r6, ip
     aae:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     ab2:	fb06 f001 	mul.w	r0, r6, r1
     ab6:	4298      	cmp	r0, r3
     ab8:	d909      	bls.n	ace <__udivmoddi4+0x62>
     aba:	18fb      	adds	r3, r7, r3
     abc:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
     ac0:	f080 8115 	bcs.w	cee <__udivmoddi4+0x282>
     ac4:	4298      	cmp	r0, r3
     ac6:	f240 8112 	bls.w	cee <__udivmoddi4+0x282>
     aca:	3e02      	subs	r6, #2
     acc:	443b      	add	r3, r7
     ace:	1a1b      	subs	r3, r3, r0
     ad0:	b2a4      	uxth	r4, r4
     ad2:	fbb3 f0fe 	udiv	r0, r3, lr
     ad6:	fb0e 3310 	mls	r3, lr, r0, r3
     ada:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     ade:	fb00 f101 	mul.w	r1, r0, r1
     ae2:	42a1      	cmp	r1, r4
     ae4:	d909      	bls.n	afa <__udivmoddi4+0x8e>
     ae6:	193c      	adds	r4, r7, r4
     ae8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     aec:	f080 8101 	bcs.w	cf2 <__udivmoddi4+0x286>
     af0:	42a1      	cmp	r1, r4
     af2:	f240 80fe 	bls.w	cf2 <__udivmoddi4+0x286>
     af6:	3802      	subs	r0, #2
     af8:	443c      	add	r4, r7
     afa:	1a64      	subs	r4, r4, r1
     afc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     b00:	2100      	movs	r1, #0
     b02:	b11d      	cbz	r5, b0c <__udivmoddi4+0xa0>
     b04:	40d4      	lsrs	r4, r2
     b06:	2300      	movs	r3, #0
     b08:	e9c5 4300 	strd	r4, r3, [r5]
     b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     b10:	b902      	cbnz	r2, b14 <__udivmoddi4+0xa8>
     b12:	deff      	udf	#255	; 0xff
     b14:	fab2 f282 	clz	r2, r2
     b18:	2a00      	cmp	r2, #0
     b1a:	d14f      	bne.n	bbc <__udivmoddi4+0x150>
     b1c:	1bcb      	subs	r3, r1, r7
     b1e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     b22:	fa1f f887 	uxth.w	r8, r7
     b26:	2101      	movs	r1, #1
     b28:	fbb3 fcfe 	udiv	ip, r3, lr
     b2c:	0c26      	lsrs	r6, r4, #16
     b2e:	fb0e 331c 	mls	r3, lr, ip, r3
     b32:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
     b36:	fb08 f30c 	mul.w	r3, r8, ip
     b3a:	42b3      	cmp	r3, r6
     b3c:	d907      	bls.n	b4e <__udivmoddi4+0xe2>
     b3e:	19be      	adds	r6, r7, r6
     b40:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     b44:	d202      	bcs.n	b4c <__udivmoddi4+0xe0>
     b46:	42b3      	cmp	r3, r6
     b48:	f200 80eb 	bhi.w	d22 <__udivmoddi4+0x2b6>
     b4c:	4684      	mov	ip, r0
     b4e:	1af6      	subs	r6, r6, r3
     b50:	b2a3      	uxth	r3, r4
     b52:	fbb6 f0fe 	udiv	r0, r6, lr
     b56:	fb0e 6610 	mls	r6, lr, r0, r6
     b5a:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
     b5e:	fb08 f800 	mul.w	r8, r8, r0
     b62:	45a0      	cmp	r8, r4
     b64:	d907      	bls.n	b76 <__udivmoddi4+0x10a>
     b66:	193c      	adds	r4, r7, r4
     b68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     b6c:	d202      	bcs.n	b74 <__udivmoddi4+0x108>
     b6e:	45a0      	cmp	r8, r4
     b70:	f200 80d2 	bhi.w	d18 <__udivmoddi4+0x2ac>
     b74:	4618      	mov	r0, r3
     b76:	eba4 0408 	sub.w	r4, r4, r8
     b7a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     b7e:	e7c0      	b.n	b02 <__udivmoddi4+0x96>
     b80:	428b      	cmp	r3, r1
     b82:	d908      	bls.n	b96 <__udivmoddi4+0x12a>
     b84:	2d00      	cmp	r5, #0
     b86:	f000 80af 	beq.w	ce8 <__udivmoddi4+0x27c>
     b8a:	2100      	movs	r1, #0
     b8c:	e9c5 0600 	strd	r0, r6, [r5]
     b90:	4608      	mov	r0, r1
     b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     b96:	fab3 f183 	clz	r1, r3
     b9a:	2900      	cmp	r1, #0
     b9c:	d149      	bne.n	c32 <__udivmoddi4+0x1c6>
     b9e:	42b3      	cmp	r3, r6
     ba0:	d302      	bcc.n	ba8 <__udivmoddi4+0x13c>
     ba2:	4282      	cmp	r2, r0
     ba4:	f200 80bb 	bhi.w	d1e <__udivmoddi4+0x2b2>
     ba8:	1a84      	subs	r4, r0, r2
     baa:	eb66 0303 	sbc.w	r3, r6, r3
     bae:	2001      	movs	r0, #1
     bb0:	469c      	mov	ip, r3
     bb2:	2d00      	cmp	r5, #0
     bb4:	d0aa      	beq.n	b0c <__udivmoddi4+0xa0>
     bb6:	e9c5 4c00 	strd	r4, ip, [r5]
     bba:	e7a7      	b.n	b0c <__udivmoddi4+0xa0>
     bbc:	f1c2 0320 	rsb	r3, r2, #32
     bc0:	4097      	lsls	r7, r2
     bc2:	40d8      	lsrs	r0, r3
     bc4:	4091      	lsls	r1, r2
     bc6:	40de      	lsrs	r6, r3
     bc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     bcc:	4308      	orrs	r0, r1
     bce:	ea4f 4c10 	mov.w	ip, r0, lsr #16
     bd2:	fbb6 f1fe 	udiv	r1, r6, lr
     bd6:	fa1f f887 	uxth.w	r8, r7
     bda:	fb0e 6611 	mls	r6, lr, r1, r6
     bde:	ea4c 4606 	orr.w	r6, ip, r6, lsl #16
     be2:	fb01 f308 	mul.w	r3, r1, r8
     be6:	42b3      	cmp	r3, r6
     be8:	fa04 f402 	lsl.w	r4, r4, r2
     bec:	d909      	bls.n	c02 <__udivmoddi4+0x196>
     bee:	19be      	adds	r6, r7, r6
     bf0:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
     bf4:	f080 808e 	bcs.w	d14 <__udivmoddi4+0x2a8>
     bf8:	42b3      	cmp	r3, r6
     bfa:	f240 808b 	bls.w	d14 <__udivmoddi4+0x2a8>
     bfe:	3902      	subs	r1, #2
     c00:	443e      	add	r6, r7
     c02:	1af3      	subs	r3, r6, r3
     c04:	b286      	uxth	r6, r0
     c06:	fbb3 f0fe 	udiv	r0, r3, lr
     c0a:	fb0e 3310 	mls	r3, lr, r0, r3
     c0e:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
     c12:	fb00 f308 	mul.w	r3, r0, r8
     c16:	42b3      	cmp	r3, r6
     c18:	d907      	bls.n	c2a <__udivmoddi4+0x1be>
     c1a:	19be      	adds	r6, r7, r6
     c1c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     c20:	d274      	bcs.n	d0c <__udivmoddi4+0x2a0>
     c22:	42b3      	cmp	r3, r6
     c24:	d972      	bls.n	d0c <__udivmoddi4+0x2a0>
     c26:	3802      	subs	r0, #2
     c28:	443e      	add	r6, r7
     c2a:	1af3      	subs	r3, r6, r3
     c2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     c30:	e77a      	b.n	b28 <__udivmoddi4+0xbc>
     c32:	f1c1 0720 	rsb	r7, r1, #32
     c36:	fa03 f401 	lsl.w	r4, r3, r1
     c3a:	fa22 f307 	lsr.w	r3, r2, r7
     c3e:	431c      	orrs	r4, r3
     c40:	fa20 f907 	lsr.w	r9, r0, r7
     c44:	fa06 f301 	lsl.w	r3, r6, r1
     c48:	ea4f 4c14 	mov.w	ip, r4, lsr #16
     c4c:	40fe      	lsrs	r6, r7
     c4e:	ea49 0903 	orr.w	r9, r9, r3
     c52:	ea4f 4319 	mov.w	r3, r9, lsr #16
     c56:	fbb6 fefc 	udiv	lr, r6, ip
     c5a:	fa1f f884 	uxth.w	r8, r4
     c5e:	fb0c 661e 	mls	r6, ip, lr, r6
     c62:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
     c66:	fb0e fa08 	mul.w	sl, lr, r8
     c6a:	45b2      	cmp	sl, r6
     c6c:	fa02 f201 	lsl.w	r2, r2, r1
     c70:	fa00 f301 	lsl.w	r3, r0, r1
     c74:	d908      	bls.n	c88 <__udivmoddi4+0x21c>
     c76:	19a6      	adds	r6, r4, r6
     c78:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
     c7c:	d248      	bcs.n	d10 <__udivmoddi4+0x2a4>
     c7e:	45b2      	cmp	sl, r6
     c80:	d946      	bls.n	d10 <__udivmoddi4+0x2a4>
     c82:	f1ae 0e02 	sub.w	lr, lr, #2
     c86:	4426      	add	r6, r4
     c88:	eba6 060a 	sub.w	r6, r6, sl
     c8c:	fa1f f989 	uxth.w	r9, r9
     c90:	fbb6 f0fc 	udiv	r0, r6, ip
     c94:	fb0c 6610 	mls	r6, ip, r0, r6
     c98:	ea49 4606 	orr.w	r6, r9, r6, lsl #16
     c9c:	fb00 f808 	mul.w	r8, r0, r8
     ca0:	45b0      	cmp	r8, r6
     ca2:	d907      	bls.n	cb4 <__udivmoddi4+0x248>
     ca4:	19a6      	adds	r6, r4, r6
     ca6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     caa:	d22d      	bcs.n	d08 <__udivmoddi4+0x29c>
     cac:	45b0      	cmp	r8, r6
     cae:	d92b      	bls.n	d08 <__udivmoddi4+0x29c>
     cb0:	3802      	subs	r0, #2
     cb2:	4426      	add	r6, r4
     cb4:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     cb8:	eba6 0608 	sub.w	r6, r6, r8
     cbc:	fba0 8902 	umull	r8, r9, r0, r2
     cc0:	454e      	cmp	r6, r9
     cc2:	46c4      	mov	ip, r8
     cc4:	46ce      	mov	lr, r9
     cc6:	d318      	bcc.n	cfa <__udivmoddi4+0x28e>
     cc8:	d015      	beq.n	cf6 <__udivmoddi4+0x28a>
     cca:	b375      	cbz	r5, d2a <__udivmoddi4+0x2be>
     ccc:	ebb3 020c 	subs.w	r2, r3, ip
     cd0:	eb66 060e 	sbc.w	r6, r6, lr
     cd4:	fa06 f707 	lsl.w	r7, r6, r7
     cd8:	fa22 f301 	lsr.w	r3, r2, r1
     cdc:	40ce      	lsrs	r6, r1
     cde:	431f      	orrs	r7, r3
     ce0:	e9c5 7600 	strd	r7, r6, [r5]
     ce4:	2100      	movs	r1, #0
     ce6:	e711      	b.n	b0c <__udivmoddi4+0xa0>
     ce8:	4629      	mov	r1, r5
     cea:	4628      	mov	r0, r5
     cec:	e70e      	b.n	b0c <__udivmoddi4+0xa0>
     cee:	4666      	mov	r6, ip
     cf0:	e6ed      	b.n	ace <__udivmoddi4+0x62>
     cf2:	4618      	mov	r0, r3
     cf4:	e701      	b.n	afa <__udivmoddi4+0x8e>
     cf6:	4543      	cmp	r3, r8
     cf8:	d2e7      	bcs.n	cca <__udivmoddi4+0x25e>
     cfa:	ebb8 0c02 	subs.w	ip, r8, r2
     cfe:	eb69 0404 	sbc.w	r4, r9, r4
     d02:	3801      	subs	r0, #1
     d04:	46a6      	mov	lr, r4
     d06:	e7e0      	b.n	cca <__udivmoddi4+0x25e>
     d08:	4660      	mov	r0, ip
     d0a:	e7d3      	b.n	cb4 <__udivmoddi4+0x248>
     d0c:	4660      	mov	r0, ip
     d0e:	e78c      	b.n	c2a <__udivmoddi4+0x1be>
     d10:	4686      	mov	lr, r0
     d12:	e7b9      	b.n	c88 <__udivmoddi4+0x21c>
     d14:	4661      	mov	r1, ip
     d16:	e774      	b.n	c02 <__udivmoddi4+0x196>
     d18:	3802      	subs	r0, #2
     d1a:	443c      	add	r4, r7
     d1c:	e72b      	b.n	b76 <__udivmoddi4+0x10a>
     d1e:	4608      	mov	r0, r1
     d20:	e747      	b.n	bb2 <__udivmoddi4+0x146>
     d22:	f1ac 0c02 	sub.w	ip, ip, #2
     d26:	443e      	add	r6, r7
     d28:	e711      	b.n	b4e <__udivmoddi4+0xe2>
     d2a:	4629      	mov	r1, r5
     d2c:	e6ee      	b.n	b0c <__udivmoddi4+0xa0>
     d2e:	bf00      	nop

00000d30 <__aeabi_idiv0>:
     d30:	4770      	bx	lr
     d32:	bf00      	nop

00000d34 <strcmp>:
     d34:	f810 2b01 	ldrb.w	r2, [r0], #1
     d38:	f811 3b01 	ldrb.w	r3, [r1], #1
     d3c:	2a01      	cmp	r2, #1
     d3e:	bf28      	it	cs
     d40:	429a      	cmpcs	r2, r3
     d42:	d0f7      	beq.n	d34 <strcmp>
     d44:	1ad0      	subs	r0, r2, r3
     d46:	4770      	bx	lr

00000d48 <strlen>:
     d48:	4603      	mov	r3, r0
     d4a:	f813 2b01 	ldrb.w	r2, [r3], #1
     d4e:	2a00      	cmp	r2, #0
     d50:	d1fb      	bne.n	d4a <strlen+0x2>
     d52:	1a18      	subs	r0, r3, r0
     d54:	3801      	subs	r0, #1
     d56:	4770      	bx	lr

00000d58 <SX1276SetChannel>:
    return SX1276.Settings.State;
}

void SX1276SetChannel( uint32_t freq )
{
    SX1276.Settings.Channel = freq;
     d58:	4b11      	ldr	r3, [pc, #68]	; (da0 <SX1276SetChannel+0x48>)
{
     d5a:	b510      	push	{r4, lr}
    SX1276.Settings.Channel = freq;
     d5c:	f8c3 00e4 	str.w	r0, [r3, #228]	; 0xe4
    freq = ( uint32_t )( ( double )freq / ( double )FREQ_STEP );
     d60:	f7ff fb10 	bl	384 <__aeabi_ui2d>
     d64:	a30c      	add	r3, pc, #48	; (adr r3, d98 <SX1276SetChannel+0x40>)
     d66:	e9d3 2300 	ldrd	r2, r3, [r3]
     d6a:	f7ff fcaf 	bl	6cc <__aeabi_ddiv>
     d6e:	f7ff fe45 	bl	9fc <__aeabi_d2uiz>
     d72:	4604      	mov	r4, r0
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freq >> 16 ) & 0xFF ) );
     d74:	f3c0 4107 	ubfx	r1, r0, #16, #8
     d78:	2006      	movs	r0, #6
     d7a:	f007 fe97 	bl	8aac <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( freq >> 8 ) & 0xFF ) );
     d7e:	f3c4 2107 	ubfx	r1, r4, #8, #8
     d82:	2007      	movs	r0, #7
     d84:	f007 fe92 	bl	8aac <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( freq & 0xFF ) );
     d88:	b2e1      	uxtb	r1, r4
     d8a:	2008      	movs	r0, #8
}
     d8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SX1276Write( REG_FRFLSB, ( uint8_t )( freq & 0xFF ) );
     d90:	f007 be8c 	b.w	8aac <SX1276Write>
     d94:	f3af 8000 	nop.w
     d98:	00000000 	.word	0x00000000
     d9c:	404e8480 	.word	0x404e8480
     da0:	20000748 	.word	0x20000748
     da4:	00000000 	.word	0x00000000

00000da8 <RxChainCalibration>:
 * Performs the Rx chain calibration for LF and HF bands
 * \remark Must be called just after the reset so all registers are at their
 *         default values
 */
static void RxChainCalibration( void )
{
     da8:	b570      	push	{r4, r5, r6, lr}
    uint8_t regPaConfigInitVal;
    uint32_t initialFreq;

    // Save context
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
     daa:	2009      	movs	r0, #9
     dac:	f007 fe89 	bl	8ac2 <SX1276Read>
     db0:	4605      	mov	r5, r0
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
     db2:	2006      	movs	r0, #6
     db4:	f007 fe85 	bl	8ac2 <SX1276Read>
     db8:	4606      	mov	r6, r0
                              ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
     dba:	2007      	movs	r0, #7
     dbc:	f007 fe81 	bl	8ac2 <SX1276Read>
     dc0:	0204      	lsls	r4, r0, #8
                              ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) * ( double )FREQ_STEP;
     dc2:	2008      	movs	r0, #8
     dc4:	f007 fe7d 	bl	8ac2 <SX1276Read>
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
     dc8:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     dcc:	4320      	orrs	r0, r4
     dce:	f7ff fad9 	bl	384 <__aeabi_ui2d>
                              ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) * ( double )FREQ_STEP;
     dd2:	a31b      	add	r3, pc, #108	; (adr r3, e40 <RxChainCalibration+0x98>)
     dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
     dd8:	f7ff fb4e 	bl	478 <__aeabi_dmul>
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
     ddc:	f7ff fe0e 	bl	9fc <__aeabi_d2uiz>

    // Cut the PA just in case, RFO output, power = -1 dBm
    SX1276Write( REG_PACONFIG, 0x00 );
     de0:	2100      	movs	r1, #0
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
     de2:	4604      	mov	r4, r0
    SX1276Write( REG_PACONFIG, 0x00 );
     de4:	2009      	movs	r0, #9
     de6:	f007 fe61 	bl	8aac <SX1276Write>

    // Launch Rx chain calibration for LF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
     dea:	203b      	movs	r0, #59	; 0x3b
     dec:	f007 fe69 	bl	8ac2 <SX1276Read>
     df0:	f040 0140 	orr.w	r1, r0, #64	; 0x40
     df4:	b2c9      	uxtb	r1, r1
     df6:	203b      	movs	r0, #59	; 0x3b
     df8:	f007 fe58 	bl	8aac <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
     dfc:	203b      	movs	r0, #59	; 0x3b
     dfe:	f007 fe60 	bl	8ac2 <SX1276Read>
     e02:	0682      	lsls	r2, r0, #26
     e04:	d4fa      	bmi.n	dfc <RxChainCalibration+0x54>
    {
    }

    // Sets a Frequency in HF band
    SX1276SetChannel( 868000000 );
     e06:	4810      	ldr	r0, [pc, #64]	; (e48 <RxChainCalibration+0xa0>)
     e08:	f7ff ffa6 	bl	d58 <SX1276SetChannel>

    // Launch Rx chain calibration for HF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
     e0c:	203b      	movs	r0, #59	; 0x3b
     e0e:	f007 fe58 	bl	8ac2 <SX1276Read>
     e12:	f040 0140 	orr.w	r1, r0, #64	; 0x40
     e16:	b2c9      	uxtb	r1, r1
     e18:	203b      	movs	r0, #59	; 0x3b
     e1a:	f007 fe47 	bl	8aac <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
     e1e:	203b      	movs	r0, #59	; 0x3b
     e20:	f007 fe4f 	bl	8ac2 <SX1276Read>
     e24:	0683      	lsls	r3, r0, #26
     e26:	d4fa      	bmi.n	e1e <RxChainCalibration+0x76>
    {
    }

    // Restore context
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
     e28:	4629      	mov	r1, r5
     e2a:	2009      	movs	r0, #9
     e2c:	f007 fe3e 	bl	8aac <SX1276Write>
    SX1276SetChannel( initialFreq );
     e30:	4620      	mov	r0, r4
}
     e32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    SX1276SetChannel( initialFreq );
     e36:	f7ff bf8f 	b.w	d58 <SX1276SetChannel>
     e3a:	bf00      	nop
     e3c:	f3af 8000 	nop.w
     e40:	00000000 	.word	0x00000000
     e44:	404e8480 	.word	0x404e8480
     e48:	33bca100 	.word	0x33bca100
     e4c:	00000000 	.word	0x00000000

00000e50 <SX1276GetTimeOnAir>:
        break;
    }
}

uint32_t SX1276GetTimeOnAir( RadioModems_t modem, uint8_t pktLen )
{
     e50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     e54:	4688      	mov	r8, r1
    uint32_t airTime = 0;

    switch( modem )
     e56:	b120      	cbz	r0, e62 <SX1276GetTimeOnAir+0x12>
     e58:	2801      	cmp	r0, #1
     e5a:	d055      	beq.n	f08 <SX1276GetTimeOnAir+0xb8>
     e5c:	2000      	movs	r0, #0
            airTime = floor( tOnAir * 1000 + 0.999 );
        }
        break;
    }
    return airTime;
}
     e5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
     e62:	4c71      	ldr	r4, [pc, #452]	; (1028 <SX1276GetTimeOnAir+0x1d8>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
     e64:	2027      	movs	r0, #39	; 0x27
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
     e66:	f8b4 50fc 	ldrh.w	r5, [r4, #252]	; 0xfc
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
     e6a:	f007 fe2a 	bl	8ac2 <SX1276Read>
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
     e6e:	3501      	adds	r5, #1
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
     e70:	f020 00f8 	bic.w	r0, r0, #248	; 0xf8
     e74:	4428      	add	r0, r5
     e76:	f7ff fa95 	bl	3a4 <__aeabi_i2d>
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
     e7a:	f894 30fe 	ldrb.w	r3, [r4, #254]	; 0xfe
     e7e:	2200      	movs	r2, #0
     e80:	2b00      	cmp	r3, #0
     e82:	d13c      	bne.n	efe <SX1276GetTimeOnAir+0xae>
     e84:	4b69      	ldr	r3, [pc, #420]	; (102c <SX1276GetTimeOnAir+0x1dc>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
     e86:	f7ff f941 	bl	10c <__adddf3>
     e8a:	4606      	mov	r6, r0
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
     e8c:	2030      	movs	r0, #48	; 0x30
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
     e8e:	460f      	mov	r7, r1
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
     e90:	f007 fe17 	bl	8ac2 <SX1276Read>
     e94:	f030 03f9 	bics.w	r3, r0, #249	; 0xf9
     e98:	bf14      	ite	ne
     e9a:	4b64      	ldrne	r3, [pc, #400]	; (102c <SX1276GetTimeOnAir+0x1dc>)
     e9c:	2300      	moveq	r3, #0
     e9e:	2200      	movs	r2, #0
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
     ea0:	4630      	mov	r0, r6
     ea2:	4639      	mov	r1, r7
     ea4:	f7ff f932 	bl	10c <__adddf3>
     ea8:	4606      	mov	r6, r0
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
     eaa:	4640      	mov	r0, r8
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
     eac:	460f      	mov	r7, r1
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
     eae:	f7ff fa79 	bl	3a4 <__aeabi_i2d>
     eb2:	4602      	mov	r2, r0
     eb4:	460b      	mov	r3, r1
     eb6:	4630      	mov	r0, r6
     eb8:	4639      	mov	r1, r7
     eba:	f7ff f927 	bl	10c <__adddf3>
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
     ebe:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
     ec2:	2200      	movs	r2, #0
     ec4:	b9eb      	cbnz	r3, f02 <SX1276GetTimeOnAir+0xb2>
     ec6:	2300      	movs	r3, #0
                                     pktLen +
     ec8:	f7ff f920 	bl	10c <__adddf3>
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
     ecc:	4b58      	ldr	r3, [pc, #352]	; (1030 <SX1276GetTimeOnAir+0x1e0>)
     ece:	2200      	movs	r2, #0
     ed0:	f7ff fad2 	bl	478 <__aeabi_dmul>
     ed4:	4606      	mov	r6, r0
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
     ed6:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
     eda:	460f      	mov	r7, r1
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
     edc:	f7ff fa52 	bl	384 <__aeabi_ui2d>
     ee0:	4602      	mov	r2, r0
     ee2:	460b      	mov	r3, r1
     ee4:	4630      	mov	r0, r6
     ee6:	4639      	mov	r1, r7
     ee8:	f7ff fbf0 	bl	6cc <__aeabi_ddiv>
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
     eec:	4b51      	ldr	r3, [pc, #324]	; (1034 <SX1276GetTimeOnAir+0x1e4>)
     eee:	2200      	movs	r2, #0
     ef0:	f7ff fac2 	bl	478 <__aeabi_dmul>
     ef4:	f006 fea4 	bl	7c40 <round>
            airTime = floor( tOnAir * 1000 + 0.999 );
     ef8:	f7ff fd80 	bl	9fc <__aeabi_d2uiz>
    return airTime;
     efc:	e7af      	b.n	e5e <SX1276GetTimeOnAir+0xe>
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
     efe:	2300      	movs	r3, #0
     f00:	e7c1      	b.n	e86 <SX1276GetTimeOnAir+0x36>
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
     f02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     f06:	e7df      	b.n	ec8 <SX1276GetTimeOnAir+0x78>
            switch( SX1276.Settings.LoRa.Bandwidth )
     f08:	4a47      	ldr	r2, [pc, #284]	; (1028 <SX1276GetTimeOnAir+0x1d8>)
     f0a:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
     f0e:	3b07      	subs	r3, #7
     f10:	2b02      	cmp	r3, #2
     f12:	4692      	mov	sl, r2
     f14:	d87f      	bhi.n	1016 <SX1276GetTimeOnAir+0x1c6>
     f16:	4a48      	ldr	r2, [pc, #288]	; (1038 <SX1276GetTimeOnAir+0x1e8>)
     f18:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     f1c:	e9d3 4500 	ldrd	r4, r5, [r3]
            double rs = bw / ( 1 << SX1276.Settings.LoRa.Datarate );
     f20:	f8da b124 	ldr.w	fp, [sl, #292]	; 0x124
     f24:	2001      	movs	r0, #1
     f26:	fa00 f00b 	lsl.w	r0, r0, fp
     f2a:	f7ff fa3b 	bl	3a4 <__aeabi_i2d>
     f2e:	4602      	mov	r2, r0
     f30:	460b      	mov	r3, r1
     f32:	4620      	mov	r0, r4
     f34:	4629      	mov	r1, r5
     f36:	f7ff fbc9 	bl	6cc <__aeabi_ddiv>
     f3a:	4602      	mov	r2, r0
     f3c:	460b      	mov	r3, r1
            double ts = 1 / rs;
     f3e:	2000      	movs	r0, #0
     f40:	493a      	ldr	r1, [pc, #232]	; (102c <SX1276GetTimeOnAir+0x1dc>)
     f42:	f7ff fbc3 	bl	6cc <__aeabi_ddiv>
     f46:	4604      	mov	r4, r0
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
     f48:	f8ba 012a 	ldrh.w	r0, [sl, #298]	; 0x12a
            double ts = 1 / rs;
     f4c:	460d      	mov	r5, r1
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
     f4e:	f7ff fa29 	bl	3a4 <__aeabi_i2d>
     f52:	4b3a      	ldr	r3, [pc, #232]	; (103c <SX1276GetTimeOnAir+0x1ec>)
     f54:	2200      	movs	r2, #0
     f56:	f7ff f8d9 	bl	10c <__adddf3>
     f5a:	4622      	mov	r2, r4
     f5c:	462b      	mov	r3, r5
     f5e:	f7ff fa8b 	bl	478 <__aeabi_dmul>
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
     f62:	f89a 212c 	ldrb.w	r2, [sl, #300]	; 0x12c
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
     f66:	f89a 312e 	ldrb.w	r3, [sl, #302]	; 0x12e
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
     f6a:	460f      	mov	r7, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
     f6c:	ea4f 018b 	mov.w	r1, fp, lsl #2
     f70:	f1c1 011c 	rsb	r1, r1, #28
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
     f74:	2a00      	cmp	r2, #0
     f76:	eb01 1303 	add.w	r3, r1, r3, lsl #4
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
     f7a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
     f7e:	4606      	mov	r6, r0
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
     f80:	bf14      	ite	ne
     f82:	2014      	movne	r0, #20
     f84:	2000      	moveq	r0, #0
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
     f86:	1a18      	subs	r0, r3, r0
     f88:	f7ff f9fc 	bl	384 <__aeabi_ui2d>
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
     f8c:	f89a 3128 	ldrb.w	r3, [sl, #296]	; 0x128
     f90:	2b00      	cmp	r3, #0
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
     f92:	4680      	mov	r8, r0
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
     f94:	bf14      	ite	ne
     f96:	2002      	movne	r0, #2
     f98:	2000      	moveq	r0, #0
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
     f9a:	ebab 0000 	sub.w	r0, fp, r0
     f9e:	0080      	lsls	r0, r0, #2
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
     fa0:	4689      	mov	r9, r1
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
     fa2:	f7ff f9ef 	bl	384 <__aeabi_ui2d>
     fa6:	4602      	mov	r2, r0
     fa8:	460b      	mov	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
     faa:	4640      	mov	r0, r8
     fac:	4649      	mov	r1, r9
     fae:	f7ff fb8d 	bl	6cc <__aeabi_ddiv>
     fb2:	f000 fb61 	bl	1678 <ceil>
     fb6:	4680      	mov	r8, r0
                                 ( SX1276.Settings.LoRa.Coderate + 4 );
     fb8:	f89a 0129 	ldrb.w	r0, [sl, #297]	; 0x129
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
     fbc:	4689      	mov	r9, r1
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
     fbe:	3004      	adds	r0, #4
     fc0:	f7ff f9f0 	bl	3a4 <__aeabi_i2d>
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
     fc4:	4642      	mov	r2, r8
     fc6:	464b      	mov	r3, r9
     fc8:	f7ff fa56 	bl	478 <__aeabi_dmul>
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
     fcc:	2200      	movs	r2, #0
     fce:	2300      	movs	r3, #0
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
     fd0:	4680      	mov	r8, r0
     fd2:	4689      	mov	r9, r1
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
     fd4:	f7ff fce0 	bl	998 <__aeabi_dcmpgt>
     fd8:	b918      	cbnz	r0, fe2 <SX1276GetTimeOnAir+0x192>
     fda:	f04f 0800 	mov.w	r8, #0
     fde:	f04f 0900 	mov.w	r9, #0
     fe2:	4b13      	ldr	r3, [pc, #76]	; (1030 <SX1276GetTimeOnAir+0x1e0>)
     fe4:	2200      	movs	r2, #0
     fe6:	4640      	mov	r0, r8
     fe8:	4649      	mov	r1, r9
     fea:	f7ff f88f 	bl	10c <__adddf3>
            double tPayload = nPayload * ts;
     fee:	4622      	mov	r2, r4
     ff0:	462b      	mov	r3, r5
     ff2:	f7ff fa41 	bl	478 <__aeabi_dmul>
            double tOnAir = tPreamble + tPayload;
     ff6:	4632      	mov	r2, r6
     ff8:	463b      	mov	r3, r7
     ffa:	f7ff f887 	bl	10c <__adddf3>
            airTime = floor( tOnAir * 1000 + 0.999 );
     ffe:	4b0d      	ldr	r3, [pc, #52]	; (1034 <SX1276GetTimeOnAir+0x1e4>)
    1000:	2200      	movs	r2, #0
    1002:	f7ff fa39 	bl	478 <__aeabi_dmul>
    1006:	a306      	add	r3, pc, #24	; (adr r3, 1020 <SX1276GetTimeOnAir+0x1d0>)
    1008:	e9d3 2300 	ldrd	r2, r3, [r3]
    100c:	f7ff f87e 	bl	10c <__adddf3>
    1010:	f000 fc1a 	bl	1848 <floor>
    1014:	e770      	b.n	ef8 <SX1276GetTimeOnAir+0xa8>
            switch( SX1276.Settings.LoRa.Bandwidth )
    1016:	2400      	movs	r4, #0
    1018:	2500      	movs	r5, #0
    101a:	e781      	b.n	f20 <SX1276GetTimeOnAir+0xd0>
    101c:	f3af 8000 	nop.w
    1020:	d916872b 	.word	0xd916872b
    1024:	3feff7ce 	.word	0x3feff7ce
    1028:	20000748 	.word	0x20000748
    102c:	3ff00000 	.word	0x3ff00000
    1030:	40200000 	.word	0x40200000
    1034:	408f4000 	.word	0x408f4000
    1038:	000093f8 	.word	0x000093f8
    103c:	40110000 	.word	0x40110000

00001040 <SX1276SetRxConfig>:
{
    1040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1044:	b089      	sub	sp, #36	; 0x24
    1046:	4699      	mov	r9, r3
    1048:	9b12      	ldr	r3, [sp, #72]	; 0x48
    104a:	9304      	str	r3, [sp, #16]
    104c:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
    1050:	9301      	str	r3, [sp, #4]
    1052:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
    1056:	9302      	str	r3, [sp, #8]
    1058:	4683      	mov	fp, r0
    105a:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
    105e:	9305      	str	r3, [sp, #20]
    1060:	460c      	mov	r4, r1
    1062:	4690      	mov	r8, r2
    1064:	f89d 1060 	ldrb.w	r1, [sp, #96]	; 0x60
    1068:	f89d 2068 	ldrb.w	r2, [sp, #104]	; 0x68
    106c:	9206      	str	r2, [sp, #24]
    106e:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
    1072:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
    1076:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
    107a:	f89d a05c 	ldrb.w	sl, [sp, #92]	; 0x5c
    107e:	9107      	str	r1, [sp, #28]
    SX1276SetModem( modem );
    1080:	f004 fa1e 	bl	54c0 <SX1276SetModem>
    switch( modem )
    1084:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
    1088:	f1bb 0f00 	cmp.w	fp, #0
    108c:	d007      	beq.n	109e <SX1276SetRxConfig+0x5e>
    108e:	f1bb 0f01 	cmp.w	fp, #1
    1092:	9907      	ldr	r1, [sp, #28]
    1094:	f000 8089 	beq.w	11aa <SX1276SetRxConfig+0x16a>
}
    1098:	b009      	add	sp, #36	; 0x24
    109a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
    109e:	f8df b29c 	ldr.w	fp, [pc, #668]	; 133c <SX1276SetRxConfig+0x2fc>
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
    10a2:	9904      	ldr	r1, [sp, #16]
            SX1276.Settings.Fsk.Datarate = datarate;
    10a4:	f8cb 80f8 	str.w	r8, [fp, #248]	; 0xf8
            SX1276.Settings.Fsk.IqInverted = iqInverted;
    10a8:	f88b 2101 	strb.w	r2, [fp, #257]	; 0x101
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
    10ac:	f88b 3102 	strb.w	r3, [fp, #258]	; 0x102
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
    10b0:	4640      	mov	r0, r8
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
    10b2:	f8cb 40f0 	str.w	r4, [fp, #240]	; 0xf0
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
    10b6:	f8cb 10f4 	str.w	r1, [fp, #244]	; 0xf4
            SX1276.Settings.Fsk.FixLen = fixLen;
    10ba:	f88b 50fe 	strb.w	r5, [fp, #254]	; 0xfe
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
    10be:	f88b 70ff 	strb.w	r7, [fp, #255]	; 0xff
            SX1276.Settings.Fsk.CrcOn = crcOn;
    10c2:	f88b a100 	strb.w	sl, [fp, #256]	; 0x100
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
    10c6:	f8ab 60fc 	strh.w	r6, [fp, #252]	; 0xfc
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
    10ca:	f7ff f95b 	bl	384 <__aeabi_ui2d>
    10ce:	4680      	mov	r8, r0
    10d0:	4602      	mov	r2, r0
    10d2:	460b      	mov	r3, r1
    10d4:	4689      	mov	r9, r1
    10d6:	2000      	movs	r0, #0
    10d8:	4995      	ldr	r1, [pc, #596]	; (1330 <SX1276SetRxConfig+0x2f0>)
    10da:	f7ff faf7 	bl	6cc <__aeabi_ddiv>
    10de:	4b95      	ldr	r3, [pc, #596]	; (1334 <SX1276SetRxConfig+0x2f4>)
    10e0:	2200      	movs	r2, #0
    10e2:	f7ff f9c9 	bl	478 <__aeabi_dmul>
    10e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
    10ea:	9801      	ldr	r0, [sp, #4]
    10ec:	f7ff f95a 	bl	3a4 <__aeabi_i2d>
    10f0:	4602      	mov	r2, r0
    10f2:	460b      	mov	r3, r1
    10f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    10f8:	f7ff f9be 	bl	478 <__aeabi_dmul>
    10fc:	4b8e      	ldr	r3, [pc, #568]	; (1338 <SX1276SetRxConfig+0x2f8>)
    10fe:	2200      	movs	r2, #0
    1100:	f7ff f9ba 	bl	478 <__aeabi_dmul>
    1104:	f7ff fc7a 	bl	9fc <__aeabi_d2uiz>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
    1108:	4642      	mov	r2, r8
    110a:	464b      	mov	r3, r9
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
    110c:	f8cb 0108 	str.w	r0, [fp, #264]	; 0x108
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
    1110:	a185      	add	r1, pc, #532	; (adr r1, 1328 <SX1276SetRxConfig+0x2e8>)
    1112:	e9d1 0100 	ldrd	r0, r1, [r1]
    1116:	f7ff fad9 	bl	6cc <__aeabi_ddiv>
    111a:	f7ff fc6f 	bl	9fc <__aeabi_d2uiz>
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
    111e:	f3c0 2107 	ubfx	r1, r0, #8, #8
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
    1122:	fa1f f880 	uxth.w	r8, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
    1126:	2002      	movs	r0, #2
    1128:	f007 fcc0 	bl	8aac <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
    112c:	fa5f f188 	uxtb.w	r1, r8
    1130:	2003      	movs	r0, #3
    1132:	f007 fcbb 	bl	8aac <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
    1136:	4620      	mov	r0, r4
    1138:	f003 ffd8 	bl	50ec <GetFskBandwidthRegValue>
    113c:	4601      	mov	r1, r0
    113e:	2012      	movs	r0, #18
    1140:	f007 fcb4 	bl	8aac <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
    1144:	9804      	ldr	r0, [sp, #16]
    1146:	f003 ffd1 	bl	50ec <GetFskBandwidthRegValue>
    114a:	4601      	mov	r1, r0
    114c:	2013      	movs	r0, #19
    114e:	f007 fcad 	bl	8aac <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
    1152:	0a31      	lsrs	r1, r6, #8
    1154:	2025      	movs	r0, #37	; 0x25
    1156:	f007 fca9 	bl	8aac <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
    115a:	b2f1      	uxtb	r1, r6
    115c:	2026      	movs	r0, #38	; 0x26
    115e:	f007 fca5 	bl	8aac <SX1276Write>
            if( fixLen == 1 )
    1162:	b305      	cbz	r5, 11a6 <SX1276SetRxConfig+0x166>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
    1164:	4639      	mov	r1, r7
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
    1166:	2032      	movs	r0, #50	; 0x32
    1168:	f007 fca0 	bl	8aac <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
    116c:	2030      	movs	r0, #48	; 0x30
    116e:	f007 fca8 	bl	8ac2 <SX1276Read>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
    1172:	2d00      	cmp	r5, #0
                           RF_PACKETCONFIG1_CRC_MASK &
    1174:	f000 016f 	and.w	r1, r0, #111	; 0x6f
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
    1178:	ea41 110a 	orr.w	r1, r1, sl, lsl #4
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
    117c:	bf14      	ite	ne
    117e:	2000      	movne	r0, #0
    1180:	f06f 007f 	mvneq.w	r0, #127	; 0x7f
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
    1184:	4301      	orrs	r1, r0
            SX1276Write( REG_PACKETCONFIG1,
    1186:	b2c9      	uxtb	r1, r1
    1188:	2030      	movs	r0, #48	; 0x30
    118a:	f007 fc8f 	bl	8aac <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
    118e:	2031      	movs	r0, #49	; 0x31
    1190:	f007 fc97 	bl	8ac2 <SX1276Read>
    1194:	f040 0140 	orr.w	r1, r0, #64	; 0x40
    1198:	b2c9      	uxtb	r1, r1
    119a:	2031      	movs	r0, #49	; 0x31
}
    119c:	b009      	add	sp, #36	; 0x24
    119e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    11a2:	f007 bc83 	b.w	8aac <SX1276Write>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
    11a6:	21ff      	movs	r1, #255	; 0xff
    11a8:	e7dd      	b.n	1166 <SX1276SetRxConfig+0x126>
            if( bandwidth > 2 )
    11aa:	2c02      	cmp	r4, #2
    11ac:	d900      	bls.n	11b0 <SX1276SetRxConfig+0x170>
                while( 1 );
    11ae:	e7fe      	b.n	11ae <SX1276SetRxConfig+0x16e>
            bandwidth += 7;
    11b0:	f104 0b07 	add.w	fp, r4, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
    11b4:	4c61      	ldr	r4, [pc, #388]	; (133c <SX1276SetRxConfig+0x2fc>)
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
    11b6:	f884 112f 	strb.w	r1, [r4, #303]	; 0x12f
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
    11ba:	9902      	ldr	r1, [sp, #8]
    11bc:	f884 1130 	strb.w	r1, [r4, #304]	; 0x130
    11c0:	4641      	mov	r1, r8
    11c2:	2906      	cmp	r1, #6
    11c4:	bf38      	it	cc
    11c6:	2106      	movcc	r1, #6
    11c8:	290c      	cmp	r1, #12
            SX1276.Settings.LoRa.IqInverted = iqInverted;
    11ca:	f884 2131 	strb.w	r2, [r4, #305]	; 0x131
    11ce:	460a      	mov	r2, r1
    11d0:	bf28      	it	cs
    11d2:	220c      	movcs	r2, #12
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    11d4:	f1bb 0f07 	cmp.w	fp, #7
            SX1276.Settings.LoRa.Datarate = datarate;
    11d8:	e9c4 b848 	strd	fp, r8, [r4, #288]	; 0x120
            SX1276.Settings.LoRa.Coderate = coderate;
    11dc:	f884 9129 	strb.w	r9, [r4, #297]	; 0x129
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
    11e0:	f8a4 612a 	strh.w	r6, [r4, #298]	; 0x12a
            SX1276.Settings.LoRa.FixLen = fixLen;
    11e4:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
    11e8:	f884 712d 	strb.w	r7, [r4, #301]	; 0x12d
            SX1276.Settings.LoRa.CrcOn = crcOn;
    11ec:	f884 a12e 	strb.w	sl, [r4, #302]	; 0x12e
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
    11f0:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    11f4:	d178      	bne.n	12e8 <SX1276SetRxConfig+0x2a8>
    11f6:	f1a2 030b 	sub.w	r3, r2, #11
    11fa:	2b01      	cmp	r3, #1
    11fc:	bf8c      	ite	hi
    11fe:	2300      	movhi	r3, #0
    1200:	2301      	movls	r3, #1
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
    1202:	201d      	movs	r0, #29
    1204:	9204      	str	r2, [sp, #16]
    1206:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    120a:	f007 fc5a 	bl	8ac2 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
    120e:	ea45 0149 	orr.w	r1, r5, r9, lsl #1
    1212:	ea41 110b 	orr.w	r1, r1, fp, lsl #4
            SX1276Write( REG_LR_MODEMCONFIG1,
    1216:	b2c9      	uxtb	r1, r1
    1218:	201d      	movs	r0, #29
    121a:	f007 fc47 	bl	8aac <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
    121e:	201e      	movs	r0, #30
    1220:	f007 fc4f 	bl	8ac2 <SX1276Read>
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
    1224:	9b01      	ldr	r3, [sp, #4]
            SX1276Write( REG_LR_MODEMCONFIG2,
    1226:	9a04      	ldr	r2, [sp, #16]
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
    1228:	f3c3 2101 	ubfx	r1, r3, #8, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
    122c:	ea41 018a 	orr.w	r1, r1, sl, lsl #2
    1230:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
    1234:	f000 0008 	and.w	r0, r0, #8
            SX1276Write( REG_LR_MODEMCONFIG2,
    1238:	4301      	orrs	r1, r0
    123a:	b2c9      	uxtb	r1, r1
    123c:	201e      	movs	r0, #30
    123e:	f007 fc35 	bl	8aac <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
    1242:	2026      	movs	r0, #38	; 0x26
    1244:	f007 fc3d 	bl	8ac2 <SX1276Read>
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
    1248:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
    124c:	f020 0108 	bic.w	r1, r0, #8
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
    1250:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
            SX1276Write( REG_LR_MODEMCONFIG3,
    1254:	b2c9      	uxtb	r1, r1
    1256:	2026      	movs	r0, #38	; 0x26
    1258:	f007 fc28 	bl	8aac <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
    125c:	f89d 1004 	ldrb.w	r1, [sp, #4]
    1260:	201f      	movs	r0, #31
    1262:	f007 fc23 	bl	8aac <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
    1266:	0a31      	lsrs	r1, r6, #8
    1268:	2020      	movs	r0, #32
    126a:	f007 fc1f 	bl	8aac <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
    126e:	b2f1      	uxtb	r1, r6
    1270:	2021      	movs	r0, #33	; 0x21
    1272:	f007 fc1b 	bl	8aac <SX1276Write>
            if( fixLen == 1 )
    1276:	b11d      	cbz	r5, 1280 <SX1276SetRxConfig+0x240>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
    1278:	4639      	mov	r1, r7
    127a:	2022      	movs	r0, #34	; 0x22
    127c:	f007 fc16 	bl	8aac <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
    1280:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
    1284:	b16b      	cbz	r3, 12a2 <SX1276SetRxConfig+0x262>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
    1286:	2044      	movs	r0, #68	; 0x44
    1288:	f007 fc1b 	bl	8ac2 <SX1276Read>
    128c:	f060 017f 	orn	r1, r0, #127	; 0x7f
    1290:	b2c9      	uxtb	r1, r1
    1292:	2044      	movs	r0, #68	; 0x44
    1294:	f007 fc0a 	bl	8aac <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
    1298:	f894 1130 	ldrb.w	r1, [r4, #304]	; 0x130
    129c:	2024      	movs	r0, #36	; 0x24
    129e:	f007 fc05 	bl	8aac <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
    12a2:	f1bb 0f09 	cmp.w	fp, #9
    12a6:	d12e      	bne.n	1306 <SX1276SetRxConfig+0x2c6>
    12a8:	f8d4 20e4 	ldr.w	r2, [r4, #228]	; 0xe4
    12ac:	4b24      	ldr	r3, [pc, #144]	; (1340 <SX1276SetRxConfig+0x300>)
    12ae:	429a      	cmp	r2, r3
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
    12b0:	f04f 0102 	mov.w	r1, #2
    12b4:	f04f 0036 	mov.w	r0, #54	; 0x36
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
    12b8:	d921      	bls.n	12fe <SX1276SetRxConfig+0x2be>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
    12ba:	f007 fbf7 	bl	8aac <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
    12be:	2164      	movs	r1, #100	; 0x64
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
    12c0:	203a      	movs	r0, #58	; 0x3a
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
    12c2:	f007 fbf3 	bl	8aac <SX1276Write>
            if( datarate == 6 )
    12c6:	f1b8 0f06 	cmp.w	r8, #6
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
    12ca:	f04f 0031 	mov.w	r0, #49	; 0x31
            if( datarate == 6 )
    12ce:	d81d      	bhi.n	130c <SX1276SetRxConfig+0x2cc>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
    12d0:	f007 fbf7 	bl	8ac2 <SX1276Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
    12d4:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
                SX1276Write( REG_LR_DETECTOPTIMIZE,
    12d8:	f041 0105 	orr.w	r1, r1, #5
    12dc:	2031      	movs	r0, #49	; 0x31
    12de:	f007 fbe5 	bl	8aac <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    12e2:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    12e4:	2037      	movs	r0, #55	; 0x37
    12e6:	e759      	b.n	119c <SX1276SetRxConfig+0x15c>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    12e8:	f1bb 0f08 	cmp.w	fp, #8
    12ec:	d105      	bne.n	12fa <SX1276SetRxConfig+0x2ba>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
    12ee:	f1b8 0f0b 	cmp.w	r8, #11
    12f2:	bf94      	ite	ls
    12f4:	2300      	movls	r3, #0
    12f6:	2301      	movhi	r3, #1
    12f8:	e783      	b.n	1202 <SX1276SetRxConfig+0x1c2>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
    12fa:	2300      	movs	r3, #0
    12fc:	e781      	b.n	1202 <SX1276SetRxConfig+0x1c2>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
    12fe:	f007 fbd5 	bl	8aac <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
    1302:	217f      	movs	r1, #127	; 0x7f
    1304:	e7dc      	b.n	12c0 <SX1276SetRxConfig+0x280>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
    1306:	2103      	movs	r1, #3
    1308:	2036      	movs	r0, #54	; 0x36
    130a:	e7da      	b.n	12c2 <SX1276SetRxConfig+0x282>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
    130c:	f007 fbd9 	bl	8ac2 <SX1276Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
    1310:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
                SX1276Write( REG_LR_DETECTOPTIMIZE,
    1314:	f041 0103 	orr.w	r1, r1, #3
    1318:	2031      	movs	r0, #49	; 0x31
    131a:	f007 fbc7 	bl	8aac <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    131e:	210a      	movs	r1, #10
    1320:	e7e0      	b.n	12e4 <SX1276SetRxConfig+0x2a4>
    1322:	bf00      	nop
    1324:	f3af 8000 	nop.w
    1328:	00000000 	.word	0x00000000
    132c:	417e8480 	.word	0x417e8480
    1330:	3ff00000 	.word	0x3ff00000
    1334:	40200000 	.word	0x40200000
    1338:	408f4000 	.word	0x408f4000
    133c:	20000748 	.word	0x20000748
    1340:	1f4add40 	.word	0x1f4add40
    1344:	00000000 	.word	0x00000000

00001348 <SX1276SetTxConfig>:
{
    1348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    134c:	b087      	sub	sp, #28
    134e:	461d      	mov	r5, r3
    1350:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
    1354:	9302      	str	r3, [sp, #8]
    1356:	4689      	mov	r9, r1
    1358:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
    135c:	9918      	ldr	r1, [sp, #96]	; 0x60
    135e:	9304      	str	r3, [sp, #16]
    1360:	4692      	mov	sl, r2
    1362:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
    1366:	9205      	str	r2, [sp, #20]
    1368:	9103      	str	r1, [sp, #12]
    136a:	9001      	str	r0, [sp, #4]
    136c:	9f10      	ldr	r7, [sp, #64]	; 0x40
    136e:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
    1372:	f8bd 8048 	ldrh.w	r8, [sp, #72]	; 0x48
    1376:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
    137a:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
    SX1276SetModem( modem );
    137e:	f004 f89f 	bl	54c0 <SX1276SetModem>
    SX1276SetRfTxPower( power );
    1382:	4648      	mov	r0, r9
    1384:	f003 fe32 	bl	4fec <SX1276SetRfTxPower>
    switch( modem )
    1388:	9a01      	ldr	r2, [sp, #4]
    138a:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
    138e:	b12a      	cbz	r2, 139c <SX1276SetTxConfig+0x54>
    1390:	2a01      	cmp	r2, #1
    1392:	9a05      	ldr	r2, [sp, #20]
    1394:	d064      	beq.n	1460 <SX1276SetTxConfig+0x118>
}
    1396:	b007      	add	sp, #28
    1398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Power = power;
    139c:	4a7e      	ldr	r2, [pc, #504]	; (1598 <SX1276SetTxConfig+0x250>)
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
    139e:	4650      	mov	r0, sl
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
    13a0:	e9c2 a53b 	strd	sl, r5, [r2, #236]	; 0xec
            SX1276.Settings.Fsk.CrcOn = crcOn;
    13a4:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
            SX1276.Settings.Fsk.Power = power;
    13a8:	f882 90e8 	strb.w	r9, [r2, #232]	; 0xe8
            SX1276.Settings.Fsk.Datarate = datarate;
    13ac:	f8c2 70f8 	str.w	r7, [r2, #248]	; 0xf8
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
    13b0:	f8a2 80fc 	strh.w	r8, [r2, #252]	; 0xfc
            SX1276.Settings.Fsk.FixLen = fixLen;
    13b4:	f882 60fe 	strb.w	r6, [r2, #254]	; 0xfe
            SX1276.Settings.Fsk.IqInverted = iqInverted;
    13b8:	f882 3101 	strb.w	r3, [r2, #257]	; 0x101
            SX1276.Settings.Fsk.TxTimeout = timeout;
    13bc:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
    13c0:	f7fe ffe0 	bl	384 <__aeabi_ui2d>
    13c4:	a370      	add	r3, pc, #448	; (adr r3, 1588 <SX1276SetTxConfig+0x240>)
    13c6:	e9d3 2300 	ldrd	r2, r3, [r3]
    13ca:	f7ff f97f 	bl	6cc <__aeabi_ddiv>
    13ce:	f7ff fb15 	bl	9fc <__aeabi_d2uiz>
    13d2:	b285      	uxth	r5, r0
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
    13d4:	f3c0 2107 	ubfx	r1, r0, #8, #8
    13d8:	2004      	movs	r0, #4
    13da:	f007 fb67 	bl	8aac <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
    13de:	b2e9      	uxtb	r1, r5
    13e0:	2005      	movs	r0, #5
    13e2:	f007 fb63 	bl	8aac <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
    13e6:	4638      	mov	r0, r7
    13e8:	f7fe ffcc 	bl	384 <__aeabi_ui2d>
    13ec:	4602      	mov	r2, r0
    13ee:	460b      	mov	r3, r1
    13f0:	a167      	add	r1, pc, #412	; (adr r1, 1590 <SX1276SetTxConfig+0x248>)
    13f2:	e9d1 0100 	ldrd	r0, r1, [r1]
    13f6:	f7ff f969 	bl	6cc <__aeabi_ddiv>
    13fa:	f7ff faff 	bl	9fc <__aeabi_d2uiz>
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
    13fe:	f3c0 2107 	ubfx	r1, r0, #8, #8
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
    1402:	b285      	uxth	r5, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
    1404:	2002      	movs	r0, #2
    1406:	f007 fb51 	bl	8aac <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
    140a:	b2e9      	uxtb	r1, r5
    140c:	2003      	movs	r0, #3
    140e:	f007 fb4d 	bl	8aac <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
    1412:	ea4f 2118 	mov.w	r1, r8, lsr #8
    1416:	2025      	movs	r0, #37	; 0x25
    1418:	f007 fb48 	bl	8aac <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
    141c:	fa5f f188 	uxtb.w	r1, r8
    1420:	2026      	movs	r0, #38	; 0x26
    1422:	f007 fb43 	bl	8aac <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
    1426:	2030      	movs	r0, #48	; 0x30
    1428:	f007 fb4b 	bl	8ac2 <SX1276Read>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
    142c:	2e00      	cmp	r6, #0
                           RF_PACKETCONFIG1_CRC_MASK &
    142e:	f000 006f 	and.w	r0, r0, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
    1432:	bf14      	ite	ne
    1434:	2100      	movne	r1, #0
    1436:	f06f 017f 	mvneq.w	r1, #127	; 0x7f
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
    143a:	ea40 1404 	orr.w	r4, r0, r4, lsl #4
    143e:	4321      	orrs	r1, r4
            SX1276Write( REG_PACKETCONFIG1,
    1440:	b2c9      	uxtb	r1, r1
    1442:	2030      	movs	r0, #48	; 0x30
    1444:	f007 fb32 	bl	8aac <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
    1448:	2031      	movs	r0, #49	; 0x31
    144a:	f007 fb3a 	bl	8ac2 <SX1276Read>
    144e:	f040 0140 	orr.w	r1, r0, #64	; 0x40
    1452:	b2c9      	uxtb	r1, r1
    1454:	2031      	movs	r0, #49	; 0x31
}
    1456:	b007      	add	sp, #28
    1458:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    145c:	f007 bb26 	b.w	8aac <SX1276Write>
            SX1276.Settings.LoRa.Power = power;
    1460:	484d      	ldr	r0, [pc, #308]	; (1598 <SX1276SetTxConfig+0x250>)
            if( bandwidth > 2 )
    1462:	2d02      	cmp	r5, #2
            SX1276.Settings.LoRa.Power = power;
    1464:	f880 911c 	strb.w	r9, [r0, #284]	; 0x11c
            if( bandwidth > 2 )
    1468:	4681      	mov	r9, r0
    146a:	d900      	bls.n	146e <SX1276SetTxConfig+0x126>
                while( 1 );
    146c:	e7fe      	b.n	146c <SX1276SetTxConfig+0x124>
            bandwidth += 7;
    146e:	2f06      	cmp	r7, #6
    1470:	46ba      	mov	sl, r7
    1472:	bf38      	it	cc
    1474:	f04f 0a06 	movcc.w	sl, #6
    1478:	3507      	adds	r5, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
    147a:	f1ba 0f0c 	cmp.w	sl, #12
            SX1276.Settings.LoRa.Datarate = datarate;
    147e:	e9c0 5748 	strd	r5, r7, [r0, #288]	; 0x120
            SX1276.Settings.LoRa.Coderate = coderate;
    1482:	f880 b129 	strb.w	fp, [r0, #297]	; 0x129
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
    1486:	f8a0 812a 	strh.w	r8, [r0, #298]	; 0x12a
            SX1276.Settings.LoRa.FixLen = fixLen;
    148a:	f880 612c 	strb.w	r6, [r0, #300]	; 0x12c
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
    148e:	f880 212f 	strb.w	r2, [r0, #303]	; 0x12f
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
    1492:	bf28      	it	cs
    1494:	f04f 0a0c 	movcs.w	sl, #12
    1498:	9802      	ldr	r0, [sp, #8]
    149a:	f889 0130 	strb.w	r0, [r9, #304]	; 0x130
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    149e:	2d07      	cmp	r5, #7
            SX1276.Settings.LoRa.CrcOn = crcOn;
    14a0:	f889 412e 	strb.w	r4, [r9, #302]	; 0x12e
            SX1276.Settings.LoRa.IqInverted = iqInverted;
    14a4:	f889 3131 	strb.w	r3, [r9, #305]	; 0x131
            SX1276.Settings.LoRa.TxTimeout = timeout;
    14a8:	f8c9 1134 	str.w	r1, [r9, #308]	; 0x134
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    14ac:	d157      	bne.n	155e <SX1276SetTxConfig+0x216>
    14ae:	f1aa 030b 	sub.w	r3, sl, #11
    14b2:	2b01      	cmp	r3, #1
    14b4:	bf8c      	ite	hi
    14b6:	2300      	movhi	r3, #0
    14b8:	2301      	movls	r3, #1
    14ba:	f889 3128 	strb.w	r3, [r9, #296]	; 0x128
            if( SX1276.Settings.LoRa.FreqHopOn == true )
    14be:	b16a      	cbz	r2, 14dc <SX1276SetTxConfig+0x194>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
    14c0:	2044      	movs	r0, #68	; 0x44
    14c2:	f007 fafe 	bl	8ac2 <SX1276Read>
    14c6:	f060 017f 	orn	r1, r0, #127	; 0x7f
    14ca:	b2c9      	uxtb	r1, r1
    14cc:	2044      	movs	r0, #68	; 0x44
    14ce:	f007 faed 	bl	8aac <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
    14d2:	f899 1130 	ldrb.w	r1, [r9, #304]	; 0x130
    14d6:	2024      	movs	r0, #36	; 0x24
    14d8:	f007 fae8 	bl	8aac <SX1276Write>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
    14dc:	ea46 064b 	orr.w	r6, r6, fp, lsl #1
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
    14e0:	201d      	movs	r0, #29
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
    14e2:	ea46 1505 	orr.w	r5, r6, r5, lsl #4
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
    14e6:	f007 faec 	bl	8ac2 <SX1276Read>
            SX1276Write( REG_LR_MODEMCONFIG1,
    14ea:	b2e9      	uxtb	r1, r5
    14ec:	201d      	movs	r0, #29
    14ee:	f007 fadd 	bl	8aac <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
    14f2:	201e      	movs	r0, #30
    14f4:	f007 fae5 	bl	8ac2 <SX1276Read>
                           ( datarate << 4 ) | ( crcOn << 2 ) );
    14f8:	00a4      	lsls	r4, r4, #2
                           RFLR_MODEMCONFIG2_SF_MASK &
    14fa:	f000 000b 	and.w	r0, r0, #11
            SX1276Write( REG_LR_MODEMCONFIG2,
    14fe:	ea44 1a0a 	orr.w	sl, r4, sl, lsl #4
    1502:	ea4a 0a00 	orr.w	sl, sl, r0
    1506:	fa5f f18a 	uxtb.w	r1, sl
    150a:	201e      	movs	r0, #30
    150c:	f007 face 	bl	8aac <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
    1510:	2026      	movs	r0, #38	; 0x26
    1512:	f007 fad6 	bl	8ac2 <SX1276Read>
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
    1516:	f899 3128 	ldrb.w	r3, [r9, #296]	; 0x128
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
    151a:	f020 0108 	bic.w	r1, r0, #8
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
    151e:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
            SX1276Write( REG_LR_MODEMCONFIG3,
    1522:	b2c9      	uxtb	r1, r1
    1524:	2026      	movs	r0, #38	; 0x26
    1526:	f007 fac1 	bl	8aac <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
    152a:	ea4f 2118 	mov.w	r1, r8, lsr #8
    152e:	2020      	movs	r0, #32
    1530:	f007 fabc 	bl	8aac <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
    1534:	2021      	movs	r0, #33	; 0x21
    1536:	fa5f f188 	uxtb.w	r1, r8
    153a:	f007 fab7 	bl	8aac <SX1276Write>
            if( datarate == 6 )
    153e:	2f06      	cmp	r7, #6
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
    1540:	f04f 0031 	mov.w	r0, #49	; 0x31
            if( datarate == 6 )
    1544:	d814      	bhi.n	1570 <SX1276SetTxConfig+0x228>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
    1546:	f007 fabc 	bl	8ac2 <SX1276Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
    154a:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
                SX1276Write( REG_LR_DETECTOPTIMIZE,
    154e:	f041 0105 	orr.w	r1, r1, #5
    1552:	2031      	movs	r0, #49	; 0x31
    1554:	f007 faaa 	bl	8aac <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    1558:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    155a:	2037      	movs	r0, #55	; 0x37
    155c:	e77b      	b.n	1456 <SX1276SetTxConfig+0x10e>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    155e:	2d08      	cmp	r5, #8
    1560:	d104      	bne.n	156c <SX1276SetTxConfig+0x224>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
    1562:	2f0b      	cmp	r7, #11
    1564:	bf94      	ite	ls
    1566:	2300      	movls	r3, #0
    1568:	2301      	movhi	r3, #1
    156a:	e7a6      	b.n	14ba <SX1276SetTxConfig+0x172>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
    156c:	2300      	movs	r3, #0
    156e:	e7a4      	b.n	14ba <SX1276SetTxConfig+0x172>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
    1570:	f007 faa7 	bl	8ac2 <SX1276Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
    1574:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
                SX1276Write( REG_LR_DETECTOPTIMIZE,
    1578:	f041 0103 	orr.w	r1, r1, #3
    157c:	2031      	movs	r0, #49	; 0x31
    157e:	f007 fa95 	bl	8aac <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    1582:	210a      	movs	r1, #10
    1584:	e7e9      	b.n	155a <SX1276SetTxConfig+0x212>
    1586:	bf00      	nop
    1588:	00000000 	.word	0x00000000
    158c:	404e8480 	.word	0x404e8480
    1590:	00000000 	.word	0x00000000
    1594:	417e8480 	.word	0x417e8480
    1598:	20000748 	.word	0x20000748
    159c:	00000000 	.word	0x00000000

000015a0 <SX1276OnDio2Irq>:
            break;
    }
}

void SX1276OnDio2Irq( void* context )
{
    15a0:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
    15a2:	4b31      	ldr	r3, [pc, #196]	; (1668 <SX1276OnDio2Irq+0xc8>)
    15a4:	f893 10e0 	ldrb.w	r1, [r3, #224]	; 0xe0
    15a8:	2901      	cmp	r1, #1
    15aa:	461c      	mov	r4, r3
    15ac:	d002      	beq.n	15b4 <SX1276OnDio2Irq+0x14>
    15ae:	2902      	cmp	r1, #2
    15b0:	d04c      	beq.n	164c <SX1276OnDio2Irq+0xac>
            }
            break;
        default:
            break;
    }
}
    15b2:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
    15b4:	f893 20e1 	ldrb.w	r2, [r3, #225]	; 0xe1
    15b8:	b1ca      	cbz	r2, 15ee <SX1276OnDio2Irq+0x4e>
    15ba:	2a01      	cmp	r2, #1
    15bc:	d1f9      	bne.n	15b2 <SX1276OnDio2Irq+0x12>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
    15be:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
    15c2:	2b00      	cmp	r3, #0
    15c4:	d0f5      	beq.n	15b2 <SX1276OnDio2Irq+0x12>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
    15c6:	2102      	movs	r1, #2
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
    15c8:	2012      	movs	r0, #18
    15ca:	f007 fa6f 	bl	8aac <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
    15ce:	4b27      	ldr	r3, [pc, #156]	; (166c <SX1276OnDio2Irq+0xcc>)
    15d0:	681b      	ldr	r3, [r3, #0]
    15d2:	2b00      	cmp	r3, #0
    15d4:	d0ed      	beq.n	15b2 <SX1276OnDio2Irq+0x12>
    15d6:	695c      	ldr	r4, [r3, #20]
    15d8:	2c00      	cmp	r4, #0
    15da:	d0ea      	beq.n	15b2 <SX1276OnDio2Irq+0x12>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
    15dc:	201c      	movs	r0, #28
    15de:	f007 fa70 	bl	8ac2 <SX1276Read>
    15e2:	4623      	mov	r3, r4
    15e4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
}
    15e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
    15ec:	4718      	bx	r3
                if( SX1276.DIO4.port == NULL )
    15ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    15f0:	b90b      	cbnz	r3, 15f6 <SX1276OnDio2Irq+0x56>
                    SX1276.Settings.FskPacketHandler.PreambleDetected = true;
    15f2:	f884 110c 	strb.w	r1, [r4, #268]	; 0x10c
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected == true ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == false ) )
    15f6:	f8b4 510c 	ldrh.w	r5, [r4, #268]	; 0x10c
    15fa:	2d01      	cmp	r5, #1
    15fc:	d1d9      	bne.n	15b2 <SX1276OnDio2Irq+0x12>
                    TimerStop( &RxTimeoutSyncWord );
    15fe:	481c      	ldr	r0, [pc, #112]	; (1670 <SX1276OnDio2Irq+0xd0>)
    1600:	f004 fb8e 	bl	5d20 <TimerStop>
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
    1604:	2011      	movs	r0, #17
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
    1606:	f884 510d 	strb.w	r5, [r4, #269]	; 0x10d
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
    160a:	f007 fa5a 	bl	8ac2 <SX1276Read>
    160e:	0840      	lsrs	r0, r0, #1
    1610:	4240      	negs	r0, r0
    1612:	f884 010e 	strb.w	r0, [r4, #270]	; 0x10e
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )( double )( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
    1616:	201b      	movs	r0, #27
    1618:	f007 fa53 	bl	8ac2 <SX1276Read>
    161c:	4605      	mov	r5, r0
                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) ) *
    161e:	201c      	movs	r0, #28
    1620:	f007 fa4f 	bl	8ac2 <SX1276Read>
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )( double )( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
    1624:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
    1628:	f7fe febc 	bl	3a4 <__aeabi_i2d>
                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) ) *
    162c:	a30c      	add	r3, pc, #48	; (adr r3, 1660 <SX1276OnDio2Irq+0xc0>)
    162e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1632:	f7fe ff21 	bl	478 <__aeabi_dmul>
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )( double )( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
    1636:	f7ff f9b9 	bl	9ac <__aeabi_d2iz>
    163a:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
    163e:	200c      	movs	r0, #12
    1640:	f007 fa3f 	bl	8ac2 <SX1276Read>
    1644:	0940      	lsrs	r0, r0, #5
    1646:	f884 0114 	strb.w	r0, [r4, #276]	; 0x114
    164a:	e7b2      	b.n	15b2 <SX1276OnDio2Irq+0x12>
            switch( SX1276.Settings.Modem )
    164c:	f893 20e1 	ldrb.w	r2, [r3, #225]	; 0xe1
    1650:	2a01      	cmp	r2, #1
    1652:	d1ae      	bne.n	15b2 <SX1276OnDio2Irq+0x12>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
    1654:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
    1658:	2b00      	cmp	r3, #0
    165a:	d0aa      	beq.n	15b2 <SX1276OnDio2Irq+0x12>
    165c:	e7b4      	b.n	15c8 <SX1276OnDio2Irq+0x28>
    165e:	bf00      	nop
    1660:	00000000 	.word	0x00000000
    1664:	404e8480 	.word	0x404e8480
    1668:	20000748 	.word	0x20000748
    166c:	20000714 	.word	0x20000714
    1670:	20000718 	.word	0x20000718
    1674:	00000000 	.word	0x00000000

00001678 <ceil>:
    1678:	b580      	push	{r7, lr}
    167a:	b08c      	sub	sp, #48	; 0x30
    167c:	af00      	add	r7, sp, #0
    167e:	e9c7 0100 	strd	r0, r1, [r7]
    1682:	e9d7 2300 	ldrd	r2, r3, [r7]
    1686:	e9c7 2304 	strd	r2, r3, [r7, #16]
    168a:	697b      	ldr	r3, [r7, #20]
    168c:	62fb      	str	r3, [r7, #44]	; 0x2c
    168e:	693b      	ldr	r3, [r7, #16]
    1690:	62bb      	str	r3, [r7, #40]	; 0x28
    1692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1694:	151b      	asrs	r3, r3, #20
    1696:	f3c3 030a 	ubfx	r3, r3, #0, #11
    169a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
    169e:	627b      	str	r3, [r7, #36]	; 0x24
    16a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    16a2:	2b13      	cmp	r3, #19
    16a4:	dc61      	bgt.n	176a <ceil+0xf2>
    16a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    16a8:	2b00      	cmp	r3, #0
    16aa:	da28      	bge.n	16fe <ceil+0x86>
    16ac:	a162      	add	r1, pc, #392	; (adr r1, 1838 <ceil+0x1c0>)
    16ae:	e9d1 0100 	ldrd	r0, r1, [r1]
    16b2:	e9d7 2300 	ldrd	r2, r3, [r7]
    16b6:	f7fe fd29 	bl	10c <__adddf3>
    16ba:	4602      	mov	r2, r0
    16bc:	460b      	mov	r3, r1
    16be:	4610      	mov	r0, r2
    16c0:	4619      	mov	r1, r3
    16c2:	f04f 0200 	mov.w	r2, #0
    16c6:	f04f 0300 	mov.w	r3, #0
    16ca:	f7ff f965 	bl	998 <__aeabi_dcmpgt>
    16ce:	4603      	mov	r3, r0
    16d0:	2b00      	cmp	r3, #0
    16d2:	f000 80a0 	beq.w	1816 <ceil+0x19e>
    16d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    16d8:	2b00      	cmp	r3, #0
    16da:	da05      	bge.n	16e8 <ceil+0x70>
    16dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    16e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    16e2:	2300      	movs	r3, #0
    16e4:	62bb      	str	r3, [r7, #40]	; 0x28
    16e6:	e096      	b.n	1816 <ceil+0x19e>
    16e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    16ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
    16ec:	4313      	orrs	r3, r2
    16ee:	2b00      	cmp	r3, #0
    16f0:	f000 8091 	beq.w	1816 <ceil+0x19e>
    16f4:	4b52      	ldr	r3, [pc, #328]	; (1840 <ceil+0x1c8>)
    16f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    16f8:	2300      	movs	r3, #0
    16fa:	62bb      	str	r3, [r7, #40]	; 0x28
    16fc:	e08b      	b.n	1816 <ceil+0x19e>
    16fe:	4a51      	ldr	r2, [pc, #324]	; (1844 <ceil+0x1cc>)
    1700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1702:	fa42 f303 	asr.w	r3, r2, r3
    1706:	623b      	str	r3, [r7, #32]
    1708:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    170a:	6a3b      	ldr	r3, [r7, #32]
    170c:	401a      	ands	r2, r3
    170e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1710:	4313      	orrs	r3, r2
    1712:	2b00      	cmp	r3, #0
    1714:	d102      	bne.n	171c <ceil+0xa4>
    1716:	e9d7 2300 	ldrd	r2, r3, [r7]
    171a:	e086      	b.n	182a <ceil+0x1b2>
    171c:	a146      	add	r1, pc, #280	; (adr r1, 1838 <ceil+0x1c0>)
    171e:	e9d1 0100 	ldrd	r0, r1, [r1]
    1722:	e9d7 2300 	ldrd	r2, r3, [r7]
    1726:	f7fe fcf1 	bl	10c <__adddf3>
    172a:	4602      	mov	r2, r0
    172c:	460b      	mov	r3, r1
    172e:	4610      	mov	r0, r2
    1730:	4619      	mov	r1, r3
    1732:	f04f 0200 	mov.w	r2, #0
    1736:	f04f 0300 	mov.w	r3, #0
    173a:	f7ff f92d 	bl	998 <__aeabi_dcmpgt>
    173e:	4603      	mov	r3, r0
    1740:	2b00      	cmp	r3, #0
    1742:	d068      	beq.n	1816 <ceil+0x19e>
    1744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1746:	2b00      	cmp	r3, #0
    1748:	dd07      	ble.n	175a <ceil+0xe2>
    174a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    174e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1750:	fa42 f303 	asr.w	r3, r2, r3
    1754:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1756:	4413      	add	r3, r2
    1758:	62fb      	str	r3, [r7, #44]	; 0x2c
    175a:	6a3b      	ldr	r3, [r7, #32]
    175c:	43da      	mvns	r2, r3
    175e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1760:	4013      	ands	r3, r2
    1762:	62fb      	str	r3, [r7, #44]	; 0x2c
    1764:	2300      	movs	r3, #0
    1766:	62bb      	str	r3, [r7, #40]	; 0x28
    1768:	e055      	b.n	1816 <ceil+0x19e>
    176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    176c:	2b33      	cmp	r3, #51	; 0x33
    176e:	dd0f      	ble.n	1790 <ceil+0x118>
    1770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    1776:	d108      	bne.n	178a <ceil+0x112>
    1778:	e9d7 0100 	ldrd	r0, r1, [r7]
    177c:	4602      	mov	r2, r0
    177e:	460b      	mov	r3, r1
    1780:	f7fe fcc4 	bl	10c <__adddf3>
    1784:	4602      	mov	r2, r0
    1786:	460b      	mov	r3, r1
    1788:	e04f      	b.n	182a <ceil+0x1b2>
    178a:	e9d7 2300 	ldrd	r2, r3, [r7]
    178e:	e04c      	b.n	182a <ceil+0x1b2>
    1790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1792:	3b14      	subs	r3, #20
    1794:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1798:	fa22 f303 	lsr.w	r3, r2, r3
    179c:	623b      	str	r3, [r7, #32]
    179e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    17a0:	6a3b      	ldr	r3, [r7, #32]
    17a2:	4013      	ands	r3, r2
    17a4:	2b00      	cmp	r3, #0
    17a6:	d102      	bne.n	17ae <ceil+0x136>
    17a8:	e9d7 2300 	ldrd	r2, r3, [r7]
    17ac:	e03d      	b.n	182a <ceil+0x1b2>
    17ae:	a122      	add	r1, pc, #136	; (adr r1, 1838 <ceil+0x1c0>)
    17b0:	e9d1 0100 	ldrd	r0, r1, [r1]
    17b4:	e9d7 2300 	ldrd	r2, r3, [r7]
    17b8:	f7fe fca8 	bl	10c <__adddf3>
    17bc:	4602      	mov	r2, r0
    17be:	460b      	mov	r3, r1
    17c0:	4610      	mov	r0, r2
    17c2:	4619      	mov	r1, r3
    17c4:	f04f 0200 	mov.w	r2, #0
    17c8:	f04f 0300 	mov.w	r3, #0
    17cc:	f7ff f8e4 	bl	998 <__aeabi_dcmpgt>
    17d0:	4603      	mov	r3, r0
    17d2:	2b00      	cmp	r3, #0
    17d4:	d01f      	beq.n	1816 <ceil+0x19e>
    17d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17d8:	2b00      	cmp	r3, #0
    17da:	dd17      	ble.n	180c <ceil+0x194>
    17dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    17de:	2b14      	cmp	r3, #20
    17e0:	d103      	bne.n	17ea <ceil+0x172>
    17e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17e4:	3301      	adds	r3, #1
    17e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    17e8:	e010      	b.n	180c <ceil+0x194>
    17ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    17ec:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
    17f0:	2201      	movs	r2, #1
    17f2:	409a      	lsls	r2, r3
    17f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    17f6:	4413      	add	r3, r2
    17f8:	61fb      	str	r3, [r7, #28]
    17fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    17fc:	69fa      	ldr	r2, [r7, #28]
    17fe:	429a      	cmp	r2, r3
    1800:	d202      	bcs.n	1808 <ceil+0x190>
    1802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1804:	3301      	adds	r3, #1
    1806:	62fb      	str	r3, [r7, #44]	; 0x2c
    1808:	69fb      	ldr	r3, [r7, #28]
    180a:	62bb      	str	r3, [r7, #40]	; 0x28
    180c:	6a3b      	ldr	r3, [r7, #32]
    180e:	43da      	mvns	r2, r3
    1810:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1812:	4013      	ands	r3, r2
    1814:	62bb      	str	r3, [r7, #40]	; 0x28
    1816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1818:	60fb      	str	r3, [r7, #12]
    181a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    181c:	60bb      	str	r3, [r7, #8]
    181e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    1822:	e9c7 2300 	strd	r2, r3, [r7]
    1826:	e9d7 2300 	ldrd	r2, r3, [r7]
    182a:	4610      	mov	r0, r2
    182c:	4619      	mov	r1, r3
    182e:	3730      	adds	r7, #48	; 0x30
    1830:	46bd      	mov	sp, r7
    1832:	bd80      	pop	{r7, pc}
    1834:	f3af 8000 	nop.w
    1838:	8800759c 	.word	0x8800759c
    183c:	7e37e43c 	.word	0x7e37e43c
    1840:	3ff00000 	.word	0x3ff00000
    1844:	000fffff 	.word	0x000fffff

00001848 <floor>:
    1848:	b580      	push	{r7, lr}
    184a:	b08c      	sub	sp, #48	; 0x30
    184c:	af00      	add	r7, sp, #0
    184e:	e9c7 0100 	strd	r0, r1, [r7]
    1852:	e9d7 2300 	ldrd	r2, r3, [r7]
    1856:	e9c7 2304 	strd	r2, r3, [r7, #16]
    185a:	697b      	ldr	r3, [r7, #20]
    185c:	62fb      	str	r3, [r7, #44]	; 0x2c
    185e:	693b      	ldr	r3, [r7, #16]
    1860:	62bb      	str	r3, [r7, #40]	; 0x28
    1862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1864:	151b      	asrs	r3, r3, #20
    1866:	f3c3 030a 	ubfx	r3, r3, #0, #11
    186a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
    186e:	627b      	str	r3, [r7, #36]	; 0x24
    1870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1872:	2b13      	cmp	r3, #19
    1874:	dc62      	bgt.n	193c <floor+0xf4>
    1876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1878:	2b00      	cmp	r3, #0
    187a:	da29      	bge.n	18d0 <floor+0x88>
    187c:	a162      	add	r1, pc, #392	; (adr r1, 1a08 <floor+0x1c0>)
    187e:	e9d1 0100 	ldrd	r0, r1, [r1]
    1882:	e9d7 2300 	ldrd	r2, r3, [r7]
    1886:	f7fe fc41 	bl	10c <__adddf3>
    188a:	4602      	mov	r2, r0
    188c:	460b      	mov	r3, r1
    188e:	4610      	mov	r0, r2
    1890:	4619      	mov	r1, r3
    1892:	f04f 0200 	mov.w	r2, #0
    1896:	f04f 0300 	mov.w	r3, #0
    189a:	f7ff f87d 	bl	998 <__aeabi_dcmpgt>
    189e:	4603      	mov	r3, r0
    18a0:	2b00      	cmp	r3, #0
    18a2:	f000 80a1 	beq.w	19e8 <floor+0x1a0>
    18a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    18a8:	2b00      	cmp	r3, #0
    18aa:	db04      	blt.n	18b6 <floor+0x6e>
    18ac:	2300      	movs	r3, #0
    18ae:	62bb      	str	r3, [r7, #40]	; 0x28
    18b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    18b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    18b4:	e098      	b.n	19e8 <floor+0x1a0>
    18b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    18b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    18bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    18be:	4313      	orrs	r3, r2
    18c0:	2b00      	cmp	r3, #0
    18c2:	f000 8091 	beq.w	19e8 <floor+0x1a0>
    18c6:	4b52      	ldr	r3, [pc, #328]	; (1a10 <floor+0x1c8>)
    18c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    18ca:	2300      	movs	r3, #0
    18cc:	62bb      	str	r3, [r7, #40]	; 0x28
    18ce:	e08b      	b.n	19e8 <floor+0x1a0>
    18d0:	4a50      	ldr	r2, [pc, #320]	; (1a14 <floor+0x1cc>)
    18d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    18d4:	fa42 f303 	asr.w	r3, r2, r3
    18d8:	623b      	str	r3, [r7, #32]
    18da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    18dc:	6a3b      	ldr	r3, [r7, #32]
    18de:	401a      	ands	r2, r3
    18e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    18e2:	4313      	orrs	r3, r2
    18e4:	2b00      	cmp	r3, #0
    18e6:	d102      	bne.n	18ee <floor+0xa6>
    18e8:	e9d7 2300 	ldrd	r2, r3, [r7]
    18ec:	e086      	b.n	19fc <floor+0x1b4>
    18ee:	a146      	add	r1, pc, #280	; (adr r1, 1a08 <floor+0x1c0>)
    18f0:	e9d1 0100 	ldrd	r0, r1, [r1]
    18f4:	e9d7 2300 	ldrd	r2, r3, [r7]
    18f8:	f7fe fc08 	bl	10c <__adddf3>
    18fc:	4602      	mov	r2, r0
    18fe:	460b      	mov	r3, r1
    1900:	4610      	mov	r0, r2
    1902:	4619      	mov	r1, r3
    1904:	f04f 0200 	mov.w	r2, #0
    1908:	f04f 0300 	mov.w	r3, #0
    190c:	f7ff f844 	bl	998 <__aeabi_dcmpgt>
    1910:	4603      	mov	r3, r0
    1912:	2b00      	cmp	r3, #0
    1914:	d068      	beq.n	19e8 <floor+0x1a0>
    1916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1918:	2b00      	cmp	r3, #0
    191a:	da07      	bge.n	192c <floor+0xe4>
    191c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    1920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1922:	fa42 f303 	asr.w	r3, r2, r3
    1926:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1928:	4413      	add	r3, r2
    192a:	62fb      	str	r3, [r7, #44]	; 0x2c
    192c:	6a3b      	ldr	r3, [r7, #32]
    192e:	43da      	mvns	r2, r3
    1930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1932:	4013      	ands	r3, r2
    1934:	62fb      	str	r3, [r7, #44]	; 0x2c
    1936:	2300      	movs	r3, #0
    1938:	62bb      	str	r3, [r7, #40]	; 0x28
    193a:	e055      	b.n	19e8 <floor+0x1a0>
    193c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    193e:	2b33      	cmp	r3, #51	; 0x33
    1940:	dd0f      	ble.n	1962 <floor+0x11a>
    1942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1944:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    1948:	d108      	bne.n	195c <floor+0x114>
    194a:	e9d7 0100 	ldrd	r0, r1, [r7]
    194e:	4602      	mov	r2, r0
    1950:	460b      	mov	r3, r1
    1952:	f7fe fbdb 	bl	10c <__adddf3>
    1956:	4602      	mov	r2, r0
    1958:	460b      	mov	r3, r1
    195a:	e04f      	b.n	19fc <floor+0x1b4>
    195c:	e9d7 2300 	ldrd	r2, r3, [r7]
    1960:	e04c      	b.n	19fc <floor+0x1b4>
    1962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1964:	3b14      	subs	r3, #20
    1966:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    196a:	fa22 f303 	lsr.w	r3, r2, r3
    196e:	623b      	str	r3, [r7, #32]
    1970:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1972:	6a3b      	ldr	r3, [r7, #32]
    1974:	4013      	ands	r3, r2
    1976:	2b00      	cmp	r3, #0
    1978:	d102      	bne.n	1980 <floor+0x138>
    197a:	e9d7 2300 	ldrd	r2, r3, [r7]
    197e:	e03d      	b.n	19fc <floor+0x1b4>
    1980:	a121      	add	r1, pc, #132	; (adr r1, 1a08 <floor+0x1c0>)
    1982:	e9d1 0100 	ldrd	r0, r1, [r1]
    1986:	e9d7 2300 	ldrd	r2, r3, [r7]
    198a:	f7fe fbbf 	bl	10c <__adddf3>
    198e:	4602      	mov	r2, r0
    1990:	460b      	mov	r3, r1
    1992:	4610      	mov	r0, r2
    1994:	4619      	mov	r1, r3
    1996:	f04f 0200 	mov.w	r2, #0
    199a:	f04f 0300 	mov.w	r3, #0
    199e:	f7fe fffb 	bl	998 <__aeabi_dcmpgt>
    19a2:	4603      	mov	r3, r0
    19a4:	2b00      	cmp	r3, #0
    19a6:	d01f      	beq.n	19e8 <floor+0x1a0>
    19a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    19aa:	2b00      	cmp	r3, #0
    19ac:	da17      	bge.n	19de <floor+0x196>
    19ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    19b0:	2b14      	cmp	r3, #20
    19b2:	d103      	bne.n	19bc <floor+0x174>
    19b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    19b6:	3301      	adds	r3, #1
    19b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    19ba:	e010      	b.n	19de <floor+0x196>
    19bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    19be:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
    19c2:	2201      	movs	r2, #1
    19c4:	409a      	lsls	r2, r3
    19c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    19c8:	4413      	add	r3, r2
    19ca:	61fb      	str	r3, [r7, #28]
    19cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    19ce:	69fa      	ldr	r2, [r7, #28]
    19d0:	429a      	cmp	r2, r3
    19d2:	d202      	bcs.n	19da <floor+0x192>
    19d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    19d6:	3301      	adds	r3, #1
    19d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    19da:	69fb      	ldr	r3, [r7, #28]
    19dc:	62bb      	str	r3, [r7, #40]	; 0x28
    19de:	6a3b      	ldr	r3, [r7, #32]
    19e0:	43da      	mvns	r2, r3
    19e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    19e4:	4013      	ands	r3, r2
    19e6:	62bb      	str	r3, [r7, #40]	; 0x28
    19e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    19ea:	60fb      	str	r3, [r7, #12]
    19ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
    19ee:	60bb      	str	r3, [r7, #8]
    19f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    19f4:	e9c7 2300 	strd	r2, r3, [r7]
    19f8:	e9d7 2300 	ldrd	r2, r3, [r7]
    19fc:	4610      	mov	r0, r2
    19fe:	4619      	mov	r1, r3
    1a00:	3730      	adds	r7, #48	; 0x30
    1a02:	46bd      	mov	sp, r7
    1a04:	bd80      	pop	{r7, pc}
    1a06:	bf00      	nop
    1a08:	8800759c 	.word	0x8800759c
    1a0c:	7e37e43c 	.word	0x7e37e43c
    1a10:	bff00000 	.word	0xbff00000
    1a14:	000fffff 	.word	0x000fffff

00001a18 <main>:
LOG_MODULE_REGISTER(lora_send);

char data[MAX_DATA_LEN] = {'h', 'e', 'l', 'l', 'o', 'w', 'o', 'r', 'l', '.','h', 'e', 'l', 'l', 'o', 'w', 'o', 'r', 'l', '.', 'h', 'e', 'l', 'l', 'o', 'w', 'o', 'r', 'l', '.'};

void main(void)
{
    1a18:	b530      	push	{r4, r5, lr}
	printk("started lora send...\n");
    1a1a:	481b      	ldr	r0, [pc, #108]	; (1a88 <main+0x70>)
{
    1a1c:	b085      	sub	sp, #20
	printk("started lora send...\n");
    1a1e:	f006 f9d8 	bl	7dd2 <printk>
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    1a22:	481a      	ldr	r0, [pc, #104]	; (1a8c <main+0x74>)
    1a24:	4c1a      	ldr	r4, [pc, #104]	; (1a90 <main+0x78>)
    1a26:	f004 fe67 	bl	66f8 <z_impl_device_get_binding>
	const struct device *lora_dev;
	struct lora_modem_config config;

	lora_dev = device_get_binding(DEFAULT_RADIO);
	if (!lora_dev) {
    1a2a:	4b1a      	ldr	r3, [pc, #104]	; (1a94 <main+0x7c>)
    1a2c:	1ae4      	subs	r4, r4, r3
    1a2e:	08e4      	lsrs	r4, r4, #3
    1a30:	4605      	mov	r5, r0
    1a32:	01a4      	lsls	r4, r4, #6
    1a34:	b938      	cbnz	r0, 1a46 <main+0x2e>
		LOG_ERR("%s Device not found", DEFAULT_RADIO);
    1a36:	4915      	ldr	r1, [pc, #84]	; (1a8c <main+0x74>)
    1a38:	4817      	ldr	r0, [pc, #92]	; (1a98 <main+0x80>)
    1a3a:	f044 0201 	orr.w	r2, r4, #1
    1a3e:	f006 fade 	bl	7ffe <log_1>

		lora_send(lora_dev, data, MAX_DATA_LEN);

		LOG_INF("Data sent!");
	
    1a42:	b005      	add	sp, #20
    1a44:	bd30      	pop	{r4, r5, pc}
		parm0.val = timeout;
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
    1a46:	2100      	movs	r1, #0
    1a48:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    1a4c:	f005 fbd8 	bl	7200 <z_impl_k_sleep>
		config.frequency = 869500000;
    1a50:	4b12      	ldr	r3, [pc, #72]	; (1a9c <main+0x84>)
    1a52:	9301      	str	r3, [sp, #4]
			config.bandwidth = BW_125_KHZ;
    1a54:	f44f 6320 	mov.w	r3, #2560	; 0xa00
    1a58:	f8ad 3008 	strh.w	r3, [sp, #8]
			config.coding_rate = CR_4_5;
    1a5c:	2301      	movs	r3, #1
    1a5e:	f88d 300a 	strb.w	r3, [sp, #10]
			config.preamble_len = 8;
    1a62:	4b0f      	ldr	r3, [pc, #60]	; (1aa0 <main+0x88>)
    1a64:	9303      	str	r3, [sp, #12]
			      struct lora_modem_config *config)
{
	const struct lora_driver_api *api =
		(const struct lora_driver_api *)dev->api;

	return api->config(dev, config);
    1a66:	68ab      	ldr	r3, [r5, #8]
    1a68:	a901      	add	r1, sp, #4
    1a6a:	681b      	ldr	r3, [r3, #0]
    1a6c:	4628      	mov	r0, r5
    1a6e:	4798      	blx	r3
			    uint8_t *data, uint32_t data_len)
{
	const struct lora_driver_api *api =
		(const struct lora_driver_api *)dev->api;

	return api->send(dev, data, data_len);
    1a70:	68ab      	ldr	r3, [r5, #8]
    1a72:	490c      	ldr	r1, [pc, #48]	; (1aa4 <main+0x8c>)
    1a74:	685b      	ldr	r3, [r3, #4]
    1a76:	221e      	movs	r2, #30
    1a78:	4628      	mov	r0, r5
    1a7a:	4798      	blx	r3
		LOG_INF("Data sent!");
    1a7c:	480a      	ldr	r0, [pc, #40]	; (1aa8 <main+0x90>)
    1a7e:	f044 0103 	orr.w	r1, r4, #3
    1a82:	f006 faaf 	bl	7fe4 <log_0>
    1a86:	e7dc      	b.n	1a42 <main+0x2a>
    1a88:	000096b4 	.word	0x000096b4
    1a8c:	000096ca 	.word	0x000096ca
    1a90:	00009354 	.word	0x00009354
    1a94:	00009344 	.word	0x00009344
    1a98:	000096d1 	.word	0x000096d1
    1a9c:	33d38460 	.word	0x33d38460
    1aa0:	01050008 	.word	0x01050008
    1aa4:	200000a4 	.word	0x200000a4
    1aa8:	000096e5 	.word	0x000096e5

00001aac <__printk_hook_install>:
 *
 * @return N/A
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
    1aac:	4b01      	ldr	r3, [pc, #4]	; (1ab4 <__printk_hook_install+0x8>)
    1aae:	6018      	str	r0, [r3, #0]
}
    1ab0:	4770      	bx	lr
    1ab2:	bf00      	nop
    1ab4:	20000000 	.word	0x20000000

00001ab8 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    1ab8:	b530      	push	{r4, r5, lr}
    1aba:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    1abc:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    1ac0:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    1ac2:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
    1ac4:	a901      	add	r1, sp, #4
    1ac6:	4805      	ldr	r0, [pc, #20]	; (1adc <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    1ac8:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    1aca:	f000 f955 	bl	1d78 <cbvprintf>

	if (ctx.count < ctx.max) {
    1ace:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    1ad2:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    1ad4:	bfb8      	it	lt
    1ad6:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    1ad8:	b005      	add	sp, #20
    1ada:	bd30      	pop	{r4, r5, pc}
    1adc:	00007dad 	.word	0x00007dad

00001ae0 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    1ae0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1ae4:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    1ae8:	f019 0808 	ands.w	r8, r9, #8
{
    1aec:	4604      	mov	r4, r0
    1aee:	4693      	mov	fp, r2
	if (processing) {
    1af0:	d00d      	beq.n	1b0e <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    1af2:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    1af4:	bf0c      	ite	eq
    1af6:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    1afa:	f049 0920 	orrne.w	r9, r9, #32
    1afe:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    1b02:	f38b 8811 	msr	BASEPRI, fp
    1b06:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    1b0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1b0e:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    1b12:	2902      	cmp	r1, #2
    1b14:	d107      	bne.n	1b26 <process_event+0x46>
			evt = process_recheck(mgr);
    1b16:	4620      	mov	r0, r4
    1b18:	f006 f975 	bl	7e06 <process_recheck>
		if (evt == EVT_NOP) {
    1b1c:	2800      	cmp	r0, #0
    1b1e:	d0f0      	beq.n	1b02 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    1b20:	2801      	cmp	r0, #1
    1b22:	8b23      	ldrh	r3, [r4, #24]
    1b24:	d150      	bne.n	1bc8 <process_event+0xe8>
			res = mgr->last_res;
    1b26:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1b28:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    1b2a:	2f00      	cmp	r7, #0
    1b2c:	da15      	bge.n	1b5a <process_event+0x7a>
		*clients = mgr->clients;
    1b2e:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1b30:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    1b34:	e9c4 8800 	strd	r8, r8, [r4]
    1b38:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    1b3c:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    1b3e:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1b40:	8b21      	ldrh	r1, [r4, #24]
    1b42:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1b46:	45ca      	cmp	sl, r9
    1b48:	d002      	beq.n	1b50 <process_event+0x70>
		if (do_monitors
    1b4a:	68a3      	ldr	r3, [r4, #8]
    1b4c:	2b00      	cmp	r3, #0
    1b4e:	d15c      	bne.n	1c0a <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
    1b50:	b90d      	cbnz	r5, 1b56 <process_event+0x76>
		    || (transit != NULL)) {
    1b52:	2e00      	cmp	r6, #0
    1b54:	d074      	beq.n	1c40 <process_event+0x160>
    1b56:	2300      	movs	r3, #0
    1b58:	e058      	b.n	1c0c <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1b5a:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    1b5e:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    1b60:	2a01      	cmp	r2, #1
    1b62:	d820      	bhi.n	1ba6 <process_event+0xc6>
		*clients = mgr->clients;
    1b64:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    1b68:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    1b6a:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
    1b6c:	b289      	uxth	r1, r1
	list->tail = NULL;
    1b6e:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    1b72:	d10c      	bne.n	1b8e <process_event+0xae>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    1b74:	2d00      	cmp	r5, #0
    1b76:	462b      	mov	r3, r5
    1b78:	bf38      	it	cc
    1b7a:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1b7c:	b12b      	cbz	r3, 1b8a <process_event+0xaa>
				mgr->refs += 1U;
    1b7e:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1b80:	681b      	ldr	r3, [r3, #0]
    1b82:	3201      	adds	r2, #1
    1b84:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1b86:	2b00      	cmp	r3, #0
    1b88:	d1f8      	bne.n	1b7c <process_event+0x9c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1b8a:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    1b8e:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1b90:	4620      	mov	r0, r4
    1b92:	f006 f938 	bl	7e06 <process_recheck>
    1b96:	4606      	mov	r6, r0
    1b98:	2800      	cmp	r0, #0
    1b9a:	d0d1      	beq.n	1b40 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1b9c:	8b23      	ldrh	r3, [r4, #24]
    1b9e:	f043 0320 	orr.w	r3, r3, #32
    1ba2:	8323      	strh	r3, [r4, #24]
    1ba4:	e7cb      	b.n	1b3e <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    1ba6:	2b04      	cmp	r3, #4
    1ba8:	d10c      	bne.n	1bc4 <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1baa:	f021 0107 	bic.w	r1, r1, #7
    1bae:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    1bb0:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1bb2:	4620      	mov	r0, r4
    1bb4:	f006 f927 	bl	7e06 <process_recheck>
    1bb8:	4605      	mov	r5, r0
    1bba:	2800      	cmp	r0, #0
    1bbc:	d0bf      	beq.n	1b3e <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1bbe:	f041 0120 	orr.w	r1, r1, #32
    1bc2:	8321      	strh	r1, [r4, #24]
    1bc4:	2500      	movs	r5, #0
    1bc6:	e7ba      	b.n	1b3e <process_event+0x5e>
		} else if (evt == EVT_START) {
    1bc8:	2803      	cmp	r0, #3
    1bca:	d109      	bne.n	1be0 <process_event+0x100>
			transit = mgr->transitions->start;
    1bcc:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1bce:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    1bd2:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1bd4:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    1bd8:	8323      	strh	r3, [r4, #24]
}
    1bda:	2500      	movs	r5, #0
		res = 0;
    1bdc:	462f      	mov	r7, r5
    1bde:	e7af      	b.n	1b40 <process_event+0x60>
		} else if (evt == EVT_STOP) {
    1be0:	2804      	cmp	r0, #4
    1be2:	d106      	bne.n	1bf2 <process_event+0x112>
			transit = mgr->transitions->stop;
    1be4:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1be6:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    1bea:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1bec:	f043 0304 	orr.w	r3, r3, #4
    1bf0:	e7f2      	b.n	1bd8 <process_event+0xf8>
		} else if (evt == EVT_RESET) {
    1bf2:	2805      	cmp	r0, #5
    1bf4:	d106      	bne.n	1c04 <process_event+0x124>
			transit = mgr->transitions->reset;
    1bf6:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1bf8:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    1bfc:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1bfe:	f043 0305 	orr.w	r3, r3, #5
    1c02:	e7e9      	b.n	1bd8 <process_event+0xf8>
    1c04:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    1c06:	462e      	mov	r6, r5
    1c08:	e7e8      	b.n	1bdc <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
    1c0a:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1c0c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1c10:	8321      	strh	r1, [r4, #24]
    1c12:	f38b 8811 	msr	BASEPRI, fp
    1c16:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    1c1a:	bb03      	cbnz	r3, 1c5e <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
    1c1c:	2d00      	cmp	r5, #0
    1c1e:	d133      	bne.n	1c88 <process_event+0x1a8>
			if (transit != NULL) {
    1c20:	b116      	cbz	r6, 1c28 <process_event+0x148>
				transit(mgr, transition_complete);
    1c22:	4921      	ldr	r1, [pc, #132]	; (1ca8 <process_event+0x1c8>)
    1c24:	4620      	mov	r0, r4
    1c26:	47b0      	blx	r6
	__asm__ volatile(
    1c28:	f04f 0320 	mov.w	r3, #32
    1c2c:	f3ef 8b11 	mrs	fp, BASEPRI
    1c30:	f383 8811 	msr	BASEPRI, r3
    1c34:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    1c38:	8b23      	ldrh	r3, [r4, #24]
    1c3a:	f023 0308 	bic.w	r3, r3, #8
    1c3e:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    1c40:	8b23      	ldrh	r3, [r4, #24]
    1c42:	06da      	lsls	r2, r3, #27
    1c44:	d528      	bpl.n	1c98 <process_event+0x1b8>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1c46:	f023 0310 	bic.w	r3, r3, #16
    1c4a:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    1c4c:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    1c4e:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    1c52:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    1c56:	2900      	cmp	r1, #0
    1c58:	f47f af5b 	bne.w	1b12 <process_event+0x32>
out:
    1c5c:	e751      	b.n	1b02 <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1c5e:	68a1      	ldr	r1, [r4, #8]
    1c60:	2900      	cmp	r1, #0
    1c62:	d0db      	beq.n	1c1c <process_event+0x13c>
	return node->next;
    1c64:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
    1c66:	f8d1 b004 	ldr.w	fp, [r1, #4]
    1c6a:	2b00      	cmp	r3, #0
    1c6c:	bf38      	it	cc
    1c6e:	2300      	movcc	r3, #0
    1c70:	4699      	mov	r9, r3
    1c72:	4652      	mov	r2, sl
    1c74:	463b      	mov	r3, r7
    1c76:	4620      	mov	r0, r4
    1c78:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1c7a:	f1b9 0f00 	cmp.w	r9, #0
    1c7e:	d0cd      	beq.n	1c1c <process_event+0x13c>
    1c80:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1c84:	4649      	mov	r1, r9
    1c86:	e7ee      	b.n	1c66 <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    1c88:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    1c8a:	463b      	mov	r3, r7
    1c8c:	4652      	mov	r2, sl
    1c8e:	4620      	mov	r0, r4
    1c90:	682d      	ldr	r5, [r5, #0]
    1c92:	f006 f8d4 	bl	7e3e <notify_one>
    1c96:	e7c1      	b.n	1c1c <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    1c98:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1c9c:	bf1e      	ittt	ne
    1c9e:	f023 0320 	bicne.w	r3, r3, #32
    1ca2:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    1ca4:	2102      	movne	r1, #2
    1ca6:	e7d2      	b.n	1c4e <process_event+0x16e>
    1ca8:	00007e6b 	.word	0x00007e6b

00001cac <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    1cac:	b5f0      	push	{r4, r5, r6, r7, lr}
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
    1cae:	4e09      	ldr	r6, [pc, #36]	; (1cd4 <extract_decimal+0x28>)
    1cb0:	6801      	ldr	r1, [r0, #0]
{
    1cb2:	4602      	mov	r2, r0
		val = 10U * val + *sp++ - '0';
    1cb4:	270a      	movs	r7, #10
	size_t val = 0;
    1cb6:	2000      	movs	r0, #0
    1cb8:	460c      	mov	r4, r1
	while (isdigit((int)(unsigned char)*sp)) {
    1cba:	3101      	adds	r1, #1
    1cbc:	7823      	ldrb	r3, [r4, #0]
    1cbe:	5d9d      	ldrb	r5, [r3, r6]
    1cc0:	076d      	lsls	r5, r5, #29
    1cc2:	d401      	bmi.n	1cc8 <extract_decimal+0x1c>
	}
	*str = sp;
    1cc4:	6014      	str	r4, [r2, #0]
	return val;
}
    1cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    1cc8:	fb07 3300 	mla	r3, r7, r0, r3
    1ccc:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    1cd0:	e7f2      	b.n	1cb8 <extract_decimal+0xc>
    1cd2:	bf00      	nop
    1cd4:	0000a095 	.word	0x0000a095

00001cd8 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    1cd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1cdc:	4614      	mov	r4, r2
    1cde:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
    1ce0:	78d3      	ldrb	r3, [r2, #3]
    1ce2:	4a24      	ldr	r2, [pc, #144]	; (1d74 <encode_uint+0x9c>)
    1ce4:	f813 a002 	ldrb.w	sl, [r3, r2]
	switch (specifier) {
    1ce8:	2b6f      	cmp	r3, #111	; 0x6f
    1cea:	f00a 0203 	and.w	r2, sl, #3
{
    1cee:	4606      	mov	r6, r0
    1cf0:	460f      	mov	r7, r1
    1cf2:	9201      	str	r2, [sp, #4]
	switch (specifier) {
    1cf4:	d02d      	beq.n	1d52 <encode_uint+0x7a>
    1cf6:	d828      	bhi.n	1d4a <encode_uint+0x72>
		return 16;
    1cf8:	2b58      	cmp	r3, #88	; 0x58
    1cfa:	bf14      	ite	ne
    1cfc:	250a      	movne	r5, #10
    1cfe:	2510      	moveq	r5, #16
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    1d00:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30

	do {
		unsigned int lsv = (unsigned int)(value % radix);
    1d04:	46aa      	mov	sl, r5
    1d06:	f04f 0b00 	mov.w	fp, #0
    1d0a:	4652      	mov	r2, sl
    1d0c:	465b      	mov	r3, fp
    1d0e:	4630      	mov	r0, r6
    1d10:	4639      	mov	r1, r7
    1d12:	f7fe fe93 	bl	a3c <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
    1d16:	2a09      	cmp	r2, #9
    1d18:	b2d3      	uxtb	r3, r2
    1d1a:	d81f      	bhi.n	1d5c <encode_uint+0x84>
    1d1c:	3330      	adds	r3, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
    1d1e:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
    1d20:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
    1d22:	bf08      	it	eq
    1d24:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
    1d26:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
    1d2a:	d301      	bcc.n	1d30 <encode_uint+0x58>
    1d2c:	45c8      	cmp	r8, r9
    1d2e:	d812      	bhi.n	1d56 <encode_uint+0x7e>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    1d30:	7823      	ldrb	r3, [r4, #0]
    1d32:	069b      	lsls	r3, r3, #26
    1d34:	d505      	bpl.n	1d42 <encode_uint+0x6a>
		if (radix == 8) {
    1d36:	2d08      	cmp	r5, #8
    1d38:	d116      	bne.n	1d68 <encode_uint+0x90>
			conv->altform_0 = true;
    1d3a:	78a3      	ldrb	r3, [r4, #2]
    1d3c:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
    1d40:	70a3      	strb	r3, [r4, #2]
		}
	}

	return bp;
}
    1d42:	4640      	mov	r0, r8
    1d44:	b003      	add	sp, #12
    1d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    1d4a:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    1d4e:	2b70      	cmp	r3, #112	; 0x70
    1d50:	e7d3      	b.n	1cfa <encode_uint+0x22>
	switch (specifier) {
    1d52:	2508      	movs	r5, #8
    1d54:	e7d4      	b.n	1d00 <encode_uint+0x28>
		value /= radix;
    1d56:	4606      	mov	r6, r0
    1d58:	460f      	mov	r7, r1
    1d5a:	e7d6      	b.n	1d0a <encode_uint+0x32>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    1d5c:	9a01      	ldr	r2, [sp, #4]
    1d5e:	2a01      	cmp	r2, #1
    1d60:	bf0c      	ite	eq
    1d62:	3337      	addeq	r3, #55	; 0x37
    1d64:	3357      	addne	r3, #87	; 0x57
    1d66:	e7da      	b.n	1d1e <encode_uint+0x46>
		} else if (radix == 16) {
    1d68:	2d10      	cmp	r5, #16
    1d6a:	d1ea      	bne.n	1d42 <encode_uint+0x6a>
			conv->altform_0c = true;
    1d6c:	78a3      	ldrb	r3, [r4, #2]
    1d6e:	f043 0310 	orr.w	r3, r3, #16
    1d72:	e7e5      	b.n	1d40 <encode_uint+0x68>
    1d74:	0000a095 	.word	0x0000a095

00001d78 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    1d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1d7c:	4682      	mov	sl, r0
    1d7e:	b093      	sub	sp, #76	; 0x4c
    1d80:	468b      	mov	fp, r1
    1d82:	4691      	mov	r9, r2
    1d84:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    1d86:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    1d88:	f899 0000 	ldrb.w	r0, [r9]
    1d8c:	b908      	cbnz	r0, 1d92 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    1d8e:	4628      	mov	r0, r5
    1d90:	e33a      	b.n	2408 <cbvprintf+0x690>
		if (*fp != '%') {
    1d92:	f109 0301 	add.w	r3, r9, #1
    1d96:	2825      	cmp	r0, #37	; 0x25
    1d98:	9302      	str	r3, [sp, #8]
    1d9a:	d006      	beq.n	1daa <cbvprintf+0x32>
			OUTC('%');
    1d9c:	4659      	mov	r1, fp
    1d9e:	47d0      	blx	sl
    1da0:	2800      	cmp	r0, #0
    1da2:	f2c0 8331 	blt.w	2408 <cbvprintf+0x690>
    1da6:	3501      	adds	r5, #1
			break;
    1da8:	e1f1      	b.n	218e <cbvprintf+0x416>
		} state = {
    1daa:	2218      	movs	r2, #24
    1dac:	2100      	movs	r1, #0
    1dae:	a80c      	add	r0, sp, #48	; 0x30
    1db0:	f007 f99c 	bl	90ec <memset>
	if (*sp == '%') {
    1db4:	f899 3001 	ldrb.w	r3, [r9, #1]
    1db8:	2b25      	cmp	r3, #37	; 0x25
    1dba:	d059      	beq.n	1e70 <cbvprintf+0xf8>
    1dbc:	9a02      	ldr	r2, [sp, #8]
    1dbe:	4616      	mov	r6, r2
		switch (*sp) {
    1dc0:	f812 3b01 	ldrb.w	r3, [r2], #1
    1dc4:	2b2b      	cmp	r3, #43	; 0x2b
    1dc6:	f000 808b 	beq.w	1ee0 <cbvprintf+0x168>
    1dca:	d879      	bhi.n	1ec0 <cbvprintf+0x148>
    1dcc:	2b20      	cmp	r3, #32
    1dce:	f000 808c 	beq.w	1eea <cbvprintf+0x172>
    1dd2:	2b23      	cmp	r3, #35	; 0x23
    1dd4:	f000 808e 	beq.w	1ef4 <cbvprintf+0x17c>
	if (conv->flag_zero && conv->flag_dash) {
    1dd8:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    1ddc:	f003 0244 	and.w	r2, r3, #68	; 0x44
    1de0:	2a44      	cmp	r2, #68	; 0x44
    1de2:	d103      	bne.n	1dec <cbvprintf+0x74>
		conv->flag_zero = false;
    1de4:	f36f 1386 	bfc	r3, #6, #1
    1de8:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	conv->width_present = true;
    1dec:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    1df0:	9605      	str	r6, [sp, #20]
    1df2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1df6:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (*sp == '*') {
    1dfa:	7833      	ldrb	r3, [r6, #0]
    1dfc:	2b2a      	cmp	r3, #42	; 0x2a
    1dfe:	d17e      	bne.n	1efe <cbvprintf+0x186>
		conv->width_star = true;
    1e00:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    1e04:	f043 0301 	orr.w	r3, r3, #1
    1e08:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		return ++sp;
    1e0c:	1c73      	adds	r3, r6, #1
	sp = extract_prec(conv, sp);
    1e0e:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
    1e10:	781a      	ldrb	r2, [r3, #0]
    1e12:	2a2e      	cmp	r2, #46	; 0x2e
    1e14:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    1e18:	bf0c      	ite	eq
    1e1a:	2101      	moveq	r1, #1
    1e1c:	2100      	movne	r1, #0
    1e1e:	f361 0241 	bfi	r2, r1, #1, #1
    1e22:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
    1e26:	d10b      	bne.n	1e40 <cbvprintf+0xc8>
	++sp;
    1e28:	1c5a      	adds	r2, r3, #1
    1e2a:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
    1e2c:	785a      	ldrb	r2, [r3, #1]
    1e2e:	2a2a      	cmp	r2, #42	; 0x2a
    1e30:	d17b      	bne.n	1f2a <cbvprintf+0x1b2>
		conv->prec_star = true;
    1e32:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    1e36:	f042 0204 	orr.w	r2, r2, #4
    1e3a:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		return ++sp;
    1e3e:	3302      	adds	r3, #2
	switch (*sp) {
    1e40:	4619      	mov	r1, r3
    1e42:	f811 0b01 	ldrb.w	r0, [r1], #1
    1e46:	286c      	cmp	r0, #108	; 0x6c
    1e48:	f000 80b6 	beq.w	1fb8 <cbvprintf+0x240>
    1e4c:	d87d      	bhi.n	1f4a <cbvprintf+0x1d2>
    1e4e:	2868      	cmp	r0, #104	; 0x68
    1e50:	f000 8084 	beq.w	1f5c <cbvprintf+0x1e4>
    1e54:	286a      	cmp	r0, #106	; 0x6a
    1e56:	f000 80b9 	beq.w	1fcc <cbvprintf+0x254>
    1e5a:	284c      	cmp	r0, #76	; 0x4c
    1e5c:	f000 80bd 	beq.w	1fda <cbvprintf+0x262>
		conv->length_mod = LENGTH_NONE;
    1e60:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    1e64:	f36f 02c6 	bfc	r2, #3, #4
    1e68:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		break;
    1e6c:	4619      	mov	r1, r3
    1e6e:	e080      	b.n	1f72 <cbvprintf+0x1fa>
		conv->specifier = *sp++;
    1e70:	f109 0202 	add.w	r2, r9, #2
    1e74:	9202      	str	r2, [sp, #8]
    1e76:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
    1e7a:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    1e7e:	07d9      	lsls	r1, r3, #31
    1e80:	f140 8149 	bpl.w	2116 <cbvprintf+0x39e>
			width = va_arg(ap, int);
    1e84:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    1e88:	f1b8 0f00 	cmp.w	r8, #0
    1e8c:	da07      	bge.n	1e9e <cbvprintf+0x126>
				conv->flag_dash = true;
    1e8e:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    1e92:	f042 0204 	orr.w	r2, r2, #4
    1e96:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
    1e9a:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
    1e9e:	075a      	lsls	r2, r3, #29
    1ea0:	f140 8142 	bpl.w	2128 <cbvprintf+0x3b0>
			int arg = va_arg(ap, int);
    1ea4:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
    1ea8:	2f00      	cmp	r7, #0
    1eaa:	f280 8141 	bge.w	2130 <cbvprintf+0x3b8>
				conv->prec_present = false;
    1eae:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    1eb2:	f36f 0341 	bfc	r3, #1, #1
    1eb6:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
    1eba:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    1ebe:	e137      	b.n	2130 <cbvprintf+0x3b8>
		switch (*sp) {
    1ec0:	2b2d      	cmp	r3, #45	; 0x2d
    1ec2:	d006      	beq.n	1ed2 <cbvprintf+0x15a>
    1ec4:	2b30      	cmp	r3, #48	; 0x30
    1ec6:	d187      	bne.n	1dd8 <cbvprintf+0x60>
			conv->flag_zero = true;
    1ec8:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    1ecc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1ed0:	e003      	b.n	1eda <cbvprintf+0x162>
			conv->flag_dash = true;
    1ed2:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    1ed6:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
    1eda:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
			break;
    1ede:	e76e      	b.n	1dbe <cbvprintf+0x46>
			conv->flag_plus = true;
    1ee0:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    1ee4:	f043 0308 	orr.w	r3, r3, #8
    1ee8:	e7f7      	b.n	1eda <cbvprintf+0x162>
			conv->flag_space = true;
    1eea:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    1eee:	f043 0310 	orr.w	r3, r3, #16
    1ef2:	e7f2      	b.n	1eda <cbvprintf+0x162>
			conv->flag_hash = true;
    1ef4:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    1ef8:	f043 0320 	orr.w	r3, r3, #32
    1efc:	e7ed      	b.n	1eda <cbvprintf+0x162>
	size_t width = extract_decimal(&sp);
    1efe:	a805      	add	r0, sp, #20
    1f00:	f7ff fed4 	bl	1cac <extract_decimal>
	if (sp != wp) {
    1f04:	9b05      	ldr	r3, [sp, #20]
    1f06:	42b3      	cmp	r3, r6
    1f08:	d081      	beq.n	1e0e <cbvprintf+0x96>
		conv->unsupported |= ((conv->width_value < 0)
    1f0a:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		conv->width_value = width;
    1f0e:	900f      	str	r0, [sp, #60]	; 0x3c
		conv->unsupported |= ((conv->width_value < 0)
    1f10:	f3c1 0240 	ubfx	r2, r1, #1, #1
    1f14:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
    1f18:	0052      	lsls	r2, r2, #1
    1f1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
    1f1e:	f001 017d 	and.w	r1, r1, #125	; 0x7d
    1f22:	430a      	orrs	r2, r1
    1f24:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
    1f28:	e771      	b.n	1e0e <cbvprintf+0x96>
	size_t prec = extract_decimal(&sp);
    1f2a:	a805      	add	r0, sp, #20
    1f2c:	f7ff febe 	bl	1cac <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    1f30:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	conv->prec_value = prec;
    1f34:	9010      	str	r0, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
    1f36:	f3c3 0240 	ubfx	r2, r3, #1, #1
    1f3a:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
    1f3e:	f360 0341 	bfi	r3, r0, #1, #1
    1f42:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	return sp;
    1f46:	9b05      	ldr	r3, [sp, #20]
    1f48:	e77a      	b.n	1e40 <cbvprintf+0xc8>
	switch (*sp) {
    1f4a:	2874      	cmp	r0, #116	; 0x74
    1f4c:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    1f50:	d040      	beq.n	1fd4 <cbvprintf+0x25c>
    1f52:	287a      	cmp	r0, #122	; 0x7a
    1f54:	d184      	bne.n	1e60 <cbvprintf+0xe8>
		conv->length_mod = LENGTH_Z;
    1f56:	4613      	mov	r3, r2
    1f58:	2206      	movs	r2, #6
    1f5a:	e028      	b.n	1fae <cbvprintf+0x236>
		if (*++sp == 'h') {
    1f5c:	785a      	ldrb	r2, [r3, #1]
    1f5e:	2a68      	cmp	r2, #104	; 0x68
    1f60:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    1f64:	d121      	bne.n	1faa <cbvprintf+0x232>
			conv->length_mod = LENGTH_HH;
    1f66:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    1f68:	f361 02c6 	bfi	r2, r1, #3, #4
    1f6c:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			++sp;
    1f70:	1c99      	adds	r1, r3, #2
	conv->specifier = *sp++;
    1f72:	460b      	mov	r3, r1
    1f74:	f813 2b01 	ldrb.w	r2, [r3], #1
    1f78:	9302      	str	r3, [sp, #8]
	switch (conv->specifier) {
    1f7a:	2a78      	cmp	r2, #120	; 0x78
    1f7c:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
	conv->specifier = *sp++;
    1f80:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
    1f84:	f200 80bf 	bhi.w	2106 <cbvprintf+0x38e>
    1f88:	2a57      	cmp	r2, #87	; 0x57
    1f8a:	d833      	bhi.n	1ff4 <cbvprintf+0x27c>
    1f8c:	2a41      	cmp	r2, #65	; 0x41
    1f8e:	d003      	beq.n	1f98 <cbvprintf+0x220>
    1f90:	3a45      	subs	r2, #69	; 0x45
    1f92:	2a02      	cmp	r2, #2
    1f94:	f200 80b7 	bhi.w	2106 <cbvprintf+0x38e>
		conv->specifier_cat = SPECIFIER_FP;
    1f98:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    1f9c:	2204      	movs	r2, #4
    1f9e:	f362 0302 	bfi	r3, r2, #0, #3
    1fa2:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			unsupported = true;
    1fa6:	2301      	movs	r3, #1
			break;
    1fa8:	e084      	b.n	20b4 <cbvprintf+0x33c>
			conv->length_mod = LENGTH_H;
    1faa:	4613      	mov	r3, r2
    1fac:	2202      	movs	r2, #2
			conv->length_mod = LENGTH_L;
    1fae:	f362 03c6 	bfi	r3, r2, #3, #4
    1fb2:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    1fb6:	e7dc      	b.n	1f72 <cbvprintf+0x1fa>
		if (*++sp == 'l') {
    1fb8:	785a      	ldrb	r2, [r3, #1]
    1fba:	2a6c      	cmp	r2, #108	; 0x6c
    1fbc:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    1fc0:	d101      	bne.n	1fc6 <cbvprintf+0x24e>
			conv->length_mod = LENGTH_LL;
    1fc2:	2104      	movs	r1, #4
    1fc4:	e7d0      	b.n	1f68 <cbvprintf+0x1f0>
			conv->length_mod = LENGTH_L;
    1fc6:	4613      	mov	r3, r2
    1fc8:	2203      	movs	r2, #3
    1fca:	e7f0      	b.n	1fae <cbvprintf+0x236>
		conv->length_mod = LENGTH_J;
    1fcc:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    1fd0:	2205      	movs	r2, #5
    1fd2:	e7ec      	b.n	1fae <cbvprintf+0x236>
		conv->length_mod = LENGTH_T;
    1fd4:	4613      	mov	r3, r2
    1fd6:	2207      	movs	r2, #7
    1fd8:	e7e9      	b.n	1fae <cbvprintf+0x236>
		conv->unsupported = true;
    1fda:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    1fde:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    1fe2:	f023 0302 	bic.w	r3, r3, #2
    1fe6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1fea:	f043 0302 	orr.w	r3, r3, #2
    1fee:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
    1ff2:	e7be      	b.n	1f72 <cbvprintf+0x1fa>
    1ff4:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    1ff8:	2920      	cmp	r1, #32
    1ffa:	f200 8084 	bhi.w	2106 <cbvprintf+0x38e>
    1ffe:	a001      	add	r0, pc, #4	; (adr r0, 2004 <cbvprintf+0x28c>)
    2000:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    2004:	000020c9 	.word	0x000020c9
    2008:	00002107 	.word	0x00002107
    200c:	00002107 	.word	0x00002107
    2010:	00002107 	.word	0x00002107
    2014:	00002107 	.word	0x00002107
    2018:	00002107 	.word	0x00002107
    201c:	00002107 	.word	0x00002107
    2020:	00002107 	.word	0x00002107
    2024:	00002107 	.word	0x00002107
    2028:	00001f99 	.word	0x00001f99
    202c:	00002107 	.word	0x00002107
    2030:	000020c9 	.word	0x000020c9
    2034:	00002089 	.word	0x00002089
    2038:	00001f99 	.word	0x00001f99
    203c:	00001f99 	.word	0x00001f99
    2040:	00001f99 	.word	0x00001f99
    2044:	00002107 	.word	0x00002107
    2048:	00002089 	.word	0x00002089
    204c:	00002107 	.word	0x00002107
    2050:	00002107 	.word	0x00002107
    2054:	00002107 	.word	0x00002107
    2058:	00002107 	.word	0x00002107
    205c:	000020d1 	.word	0x000020d1
    2060:	000020c9 	.word	0x000020c9
    2064:	000020ed 	.word	0x000020ed
    2068:	00002107 	.word	0x00002107
    206c:	00002107 	.word	0x00002107
    2070:	000020ed 	.word	0x000020ed
    2074:	00002107 	.word	0x00002107
    2078:	000020c9 	.word	0x000020c9
    207c:	00002107 	.word	0x00002107
    2080:	00002107 	.word	0x00002107
    2084:	000020c9 	.word	0x000020c9
		conv->specifier_cat = SPECIFIER_SINT;
    2088:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
    208c:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    208e:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    2092:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    2096:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    2098:	f88d 103a 	strb.w	r1, [sp, #58]	; 0x3a
			conv->invalid = true;
    209c:	bf02      	ittt	eq
    209e:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
    20a2:	f041 0101 	orreq.w	r1, r1, #1
    20a6:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
    20aa:	2a63      	cmp	r2, #99	; 0x63
    20ac:	d131      	bne.n	2112 <cbvprintf+0x39a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    20ae:	3b00      	subs	r3, #0
    20b0:	bf18      	it	ne
    20b2:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    20b4:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    20b8:	f3c2 0140 	ubfx	r1, r2, #1, #1
    20bc:	430b      	orrs	r3, r1
    20be:	f363 0241 	bfi	r2, r3, #1, #1
    20c2:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
    20c6:	e6d8      	b.n	1e7a <cbvprintf+0x102>
		conv->specifier_cat = SPECIFIER_UINT;
    20c8:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
    20cc:	2002      	movs	r0, #2
    20ce:	e7de      	b.n	208e <cbvprintf+0x316>
		conv->specifier_cat = SPECIFIER_PTR;
    20d0:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    20d4:	f003 0378 	and.w	r3, r3, #120	; 0x78
    20d8:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    20dc:	2103      	movs	r1, #3
    20de:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    20e2:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    20e4:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    20e8:	4143      	adcs	r3, r0
    20ea:	e7e3      	b.n	20b4 <cbvprintf+0x33c>
		conv->specifier_cat = SPECIFIER_PTR;
    20ec:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
    20f0:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    20f2:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    20f6:	f361 0202 	bfi	r2, r1, #0, #3
    20fa:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
    20fe:	bf14      	ite	ne
    2100:	2301      	movne	r3, #1
    2102:	2300      	moveq	r3, #0
    2104:	e7d6      	b.n	20b4 <cbvprintf+0x33c>
		conv->invalid = true;
    2106:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    210a:	f043 0301 	orr.w	r3, r3, #1
    210e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	bool unsupported = false;
    2112:	2300      	movs	r3, #0
    2114:	e7ce      	b.n	20b4 <cbvprintf+0x33c>
		} else if (conv->width_present) {
    2116:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
    211a:	2a00      	cmp	r2, #0
			width = conv->width_value;
    211c:	bfb4      	ite	lt
    211e:	f8dd 803c 	ldrlt.w	r8, [sp, #60]	; 0x3c
		int width = -1;
    2122:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
    2126:	e6ba      	b.n	1e9e <cbvprintf+0x126>
		} else if (conv->prec_present) {
    2128:	079f      	lsls	r7, r3, #30
    212a:	f57f aec6 	bpl.w	1eba <cbvprintf+0x142>
			precision = conv->prec_value;
    212e:	9f10      	ldr	r7, [sp, #64]	; 0x40
			= (enum length_mod_enum)conv->length_mod;
    2130:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		conv->pad0_value = 0;
    2134:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    2136:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
			= (enum specifier_cat_enum)conv->specifier_cat;
    213a:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		enum specifier_cat_enum specifier_cat
    213e:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    2142:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    2144:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    2148:	d137      	bne.n	21ba <cbvprintf+0x442>
			switch (length_mod) {
    214a:	1ecb      	subs	r3, r1, #3
    214c:	2b04      	cmp	r3, #4
    214e:	d821      	bhi.n	2194 <cbvprintf+0x41c>
    2150:	e8df f003 	tbb	[pc, r3]
    2154:	20070703 	.word	0x20070703
    2158:	20          	.byte	0x20
    2159:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    215a:	f854 2b04 	ldr.w	r2, [r4], #4
				value->sint = (short)value->sint;
    215e:	17d3      	asrs	r3, r2, #31
    2160:	e004      	b.n	216c <cbvprintf+0x3f4>
					(sint_value_type)va_arg(ap, intmax_t);
    2162:	3407      	adds	r4, #7
    2164:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    2168:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->sint = (short)value->sint;
    216c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
    2170:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    2174:	f013 0603 	ands.w	r6, r3, #3
    2178:	d055      	beq.n	2226 <cbvprintf+0x4ae>
			OUTS(sp, fp);
    217a:	9b02      	ldr	r3, [sp, #8]
    217c:	464a      	mov	r2, r9
    217e:	4659      	mov	r1, fp
    2180:	4650      	mov	r0, sl
    2182:	f005 fef5 	bl	7f70 <outs>
    2186:	2800      	cmp	r0, #0
    2188:	f2c0 813e 	blt.w	2408 <cbvprintf+0x690>
    218c:	4405      	add	r5, r0
			OUTS(bps, bpe);
    218e:	f8dd 9008 	ldr.w	r9, [sp, #8]
    2192:	e5f9      	b.n	1d88 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    2194:	f854 2b04 	ldr.w	r2, [r4], #4
			if (length_mod == LENGTH_HH) {
    2198:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    219a:	ea4f 73e2 	mov.w	r3, r2, asr #31
    219e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    21a2:	d105      	bne.n	21b0 <cbvprintf+0x438>
				value->uint = (unsigned char)value->uint;
    21a4:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
    21a8:	930c      	str	r3, [sp, #48]	; 0x30
    21aa:	2300      	movs	r3, #0
    21ac:	930d      	str	r3, [sp, #52]	; 0x34
    21ae:	e7df      	b.n	2170 <cbvprintf+0x3f8>
			} else if (length_mod == LENGTH_H) {
    21b0:	2902      	cmp	r1, #2
    21b2:	d1dd      	bne.n	2170 <cbvprintf+0x3f8>
				value->sint = (short)value->sint;
    21b4:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
    21b8:	e7d1      	b.n	215e <cbvprintf+0x3e6>
		} else if (specifier_cat == SPECIFIER_UINT) {
    21ba:	2b02      	cmp	r3, #2
    21bc:	d123      	bne.n	2206 <cbvprintf+0x48e>
			switch (length_mod) {
    21be:	1ecb      	subs	r3, r1, #3
    21c0:	2b04      	cmp	r3, #4
    21c2:	d813      	bhi.n	21ec <cbvprintf+0x474>
    21c4:	e8df f003 	tbb	[pc, r3]
    21c8:	120a0a03 	.word	0x120a0a03
    21cc:	12          	.byte	0x12
    21cd:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    21ce:	6822      	ldr	r2, [r4, #0]
    21d0:	920c      	str	r2, [sp, #48]	; 0x30
    21d2:	2300      	movs	r3, #0
    21d4:	1d20      	adds	r0, r4, #4
    21d6:	930d      	str	r3, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
    21d8:	4604      	mov	r4, r0
    21da:	e7c9      	b.n	2170 <cbvprintf+0x3f8>
					(uint_value_type)va_arg(ap,
    21dc:	3407      	adds	r4, #7
    21de:	f024 0007 	bic.w	r0, r4, #7
				value->uint =
    21e2:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    21e6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				break;
    21ea:	e7f5      	b.n	21d8 <cbvprintf+0x460>
					(uint_value_type)va_arg(ap, size_t);
    21ec:	f854 3b04 	ldr.w	r3, [r4], #4
    21f0:	930c      	str	r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    21f2:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    21f4:	f04f 0300 	mov.w	r3, #0
    21f8:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
    21fa:	d0d3      	beq.n	21a4 <cbvprintf+0x42c>
			} else if (length_mod == LENGTH_H) {
    21fc:	2902      	cmp	r1, #2
    21fe:	d1b7      	bne.n	2170 <cbvprintf+0x3f8>
				value->uint = (unsigned short)value->uint;
    2200:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    2204:	e7d0      	b.n	21a8 <cbvprintf+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
    2206:	2b04      	cmp	r3, #4
    2208:	d107      	bne.n	221a <cbvprintf+0x4a2>
			if (length_mod == LENGTH_UPPER_L) {
    220a:	3407      	adds	r4, #7
    220c:	f024 0407 	bic.w	r4, r4, #7
    2210:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->ldbl = va_arg(ap, long double);
    2214:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    2218:	e7aa      	b.n	2170 <cbvprintf+0x3f8>
		} else if (specifier_cat == SPECIFIER_PTR) {
    221a:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    221c:	bf04      	itt	eq
    221e:	f854 3b04 	ldreq.w	r3, [r4], #4
    2222:	930c      	streq	r3, [sp, #48]	; 0x30
    2224:	e7a4      	b.n	2170 <cbvprintf+0x3f8>
		switch (conv->specifier) {
    2226:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    222a:	2878      	cmp	r0, #120	; 0x78
    222c:	d8af      	bhi.n	218e <cbvprintf+0x416>
    222e:	2862      	cmp	r0, #98	; 0x62
    2230:	d820      	bhi.n	2274 <cbvprintf+0x4fc>
    2232:	2825      	cmp	r0, #37	; 0x25
    2234:	f43f adb2 	beq.w	1d9c <cbvprintf+0x24>
    2238:	2858      	cmp	r0, #88	; 0x58
    223a:	d1a8      	bne.n	218e <cbvprintf+0x416>
			bps = encode_uint(value->uint, conv, buf, bpe);
    223c:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
    2240:	9300      	str	r3, [sp, #0]
    2242:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    2246:	ab06      	add	r3, sp, #24
    2248:	aa0e      	add	r2, sp, #56	; 0x38
    224a:	f7ff fd45 	bl	1cd8 <encode_uint>
    224e:	4681      	mov	r9, r0
			if (precision >= 0) {
    2250:	2f00      	cmp	r7, #0
    2252:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
    2256:	db0b      	blt.n	2270 <cbvprintf+0x4f8>
				conv->flag_zero = false;
    2258:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
				size_t len = bpe - bps;
    225c:	eba0 0309 	sub.w	r3, r0, r9
				conv->flag_zero = false;
    2260:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    2264:	429f      	cmp	r7, r3
				conv->flag_zero = false;
    2266:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
    226a:	d901      	bls.n	2270 <cbvprintf+0x4f8>
					conv->pad0_value = precision - (int)len;
    226c:	1aff      	subs	r7, r7, r3
    226e:	970f      	str	r7, [sp, #60]	; 0x3c
		const char *bpe = buf + sizeof(buf);
    2270:	4607      	mov	r7, r0
    2272:	e03c      	b.n	22ee <cbvprintf+0x576>
    2274:	3863      	subs	r0, #99	; 0x63
    2276:	2815      	cmp	r0, #21
    2278:	d889      	bhi.n	218e <cbvprintf+0x416>
    227a:	a201      	add	r2, pc, #4	; (adr r2, 2280 <cbvprintf+0x508>)
    227c:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    2280:	000022ff 	.word	0x000022ff
    2284:	00002361 	.word	0x00002361
    2288:	0000218f 	.word	0x0000218f
    228c:	0000218f 	.word	0x0000218f
    2290:	0000218f 	.word	0x0000218f
    2294:	0000218f 	.word	0x0000218f
    2298:	00002361 	.word	0x00002361
    229c:	0000218f 	.word	0x0000218f
    22a0:	0000218f 	.word	0x0000218f
    22a4:	0000218f 	.word	0x0000218f
    22a8:	0000218f 	.word	0x0000218f
    22ac:	000023bf 	.word	0x000023bf
    22b0:	0000238d 	.word	0x0000238d
    22b4:	00002391 	.word	0x00002391
    22b8:	0000218f 	.word	0x0000218f
    22bc:	0000218f 	.word	0x0000218f
    22c0:	000022d9 	.word	0x000022d9
    22c4:	0000218f 	.word	0x0000218f
    22c8:	0000238d 	.word	0x0000238d
    22cc:	0000218f 	.word	0x0000218f
    22d0:	0000218f 	.word	0x0000218f
    22d4:	0000238d 	.word	0x0000238d
			if (precision >= 0) {
    22d8:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
    22da:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
			if (precision >= 0) {
    22de:	db0a      	blt.n	22f6 <cbvprintf+0x57e>
				len = strnlen(bps, precision);
    22e0:	4639      	mov	r1, r7
    22e2:	4648      	mov	r0, r9
    22e4:	f006 ff25 	bl	9132 <strnlen>
			bpe = bps + len;
    22e8:	eb09 0700 	add.w	r7, r9, r0
		char sign = 0;
    22ec:	2600      	movs	r6, #0
		if (bps == NULL) {
    22ee:	f1b9 0f00 	cmp.w	r9, #0
    22f2:	d10c      	bne.n	230e <cbvprintf+0x596>
    22f4:	e74b      	b.n	218e <cbvprintf+0x416>
				len = strlen(bps);
    22f6:	4648      	mov	r0, r9
    22f8:	f7fe fd26 	bl	d48 <strlen>
    22fc:	e7f4      	b.n	22e8 <cbvprintf+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    22fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2300:	f88d 3018 	strb.w	r3, [sp, #24]
			break;
    2304:	2600      	movs	r6, #0
			bpe = buf + 1;
    2306:	f10d 0719 	add.w	r7, sp, #25
			bps = buf;
    230a:	f10d 0918 	add.w	r9, sp, #24
		size_t nj_len = (bpe - bps);
    230e:	eba7 0309 	sub.w	r3, r7, r9
		if (sign != 0) {
    2312:	b106      	cbz	r6, 2316 <cbvprintf+0x59e>
			nj_len += 1U;
    2314:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    2316:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
    231a:	06d0      	lsls	r0, r2, #27
    231c:	d569      	bpl.n	23f2 <cbvprintf+0x67a>
			nj_len += 2U;
    231e:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    2320:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    2322:	990f      	ldr	r1, [sp, #60]	; 0x3c
			nj_len += conv->pad0_pre_exp;
    2324:	bf48      	it	mi
    2326:	9a10      	ldrmi	r2, [sp, #64]	; 0x40
		nj_len += conv->pad0_value;
    2328:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    232a:	bf48      	it	mi
    232c:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    232e:	f1b8 0f00 	cmp.w	r8, #0
    2332:	dd76      	ble.n	2422 <cbvprintf+0x6aa>
			if (!conv->flag_dash) {
    2334:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
			width -= (int)nj_len;
    2338:	eba8 0803 	sub.w	r8, r8, r3
			if (!conv->flag_dash) {
    233c:	f3c2 0380 	ubfx	r3, r2, #2, #1
    2340:	9303      	str	r3, [sp, #12]
    2342:	0753      	lsls	r3, r2, #29
    2344:	d46d      	bmi.n	2422 <cbvprintf+0x6aa>
				if (conv->flag_zero) {
    2346:	0650      	lsls	r0, r2, #25
    2348:	d561      	bpl.n	240e <cbvprintf+0x696>
					if (sign != 0) {
    234a:	b13e      	cbz	r6, 235c <cbvprintf+0x5e4>
						OUTC(sign);
    234c:	4659      	mov	r1, fp
    234e:	4630      	mov	r0, r6
    2350:	47d0      	blx	sl
    2352:	2800      	cmp	r0, #0
    2354:	db58      	blt.n	2408 <cbvprintf+0x690>
						sign = 0;
    2356:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    2358:	3501      	adds	r5, #1
						sign = 0;
    235a:	461e      	mov	r6, r3
					pad = '0';
    235c:	2330      	movs	r3, #48	; 0x30
    235e:	e057      	b.n	2410 <cbvprintf+0x698>
			if (conv->flag_plus) {
    2360:	071e      	lsls	r6, r3, #28
    2362:	d411      	bmi.n	2388 <cbvprintf+0x610>
				sign = ' ';
    2364:	f013 0610 	ands.w	r6, r3, #16
    2368:	bf18      	it	ne
    236a:	2620      	movne	r6, #32
			sint = value->sint;
    236c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
    2370:	2a00      	cmp	r2, #0
    2372:	f173 0100 	sbcs.w	r1, r3, #0
    2376:	f6bf af61 	bge.w	223c <cbvprintf+0x4c4>
				value->uint = (uint_value_type)-sint;
    237a:	4252      	negs	r2, r2
    237c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    2380:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
    2384:	262d      	movs	r6, #45	; 0x2d
    2386:	e759      	b.n	223c <cbvprintf+0x4c4>
				sign = '+';
    2388:	262b      	movs	r6, #43	; 0x2b
    238a:	e7ef      	b.n	236c <cbvprintf+0x5f4>
		switch (conv->specifier) {
    238c:	2600      	movs	r6, #0
    238e:	e755      	b.n	223c <cbvprintf+0x4c4>
			if (value->ptr != NULL) {
    2390:	980c      	ldr	r0, [sp, #48]	; 0x30
    2392:	b348      	cbz	r0, 23e8 <cbvprintf+0x670>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    2394:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
    2398:	9300      	str	r3, [sp, #0]
    239a:	aa0e      	add	r2, sp, #56	; 0x38
    239c:	ab06      	add	r3, sp, #24
    239e:	2100      	movs	r1, #0
    23a0:	f7ff fc9a 	bl	1cd8 <encode_uint>
				conv->altform_0c = true;
    23a4:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
    23a8:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    23ac:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    23b0:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    23b4:	4681      	mov	r9, r0
				conv->altform_0c = true;
    23b6:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		char sign = 0;
    23ba:	2600      	movs	r6, #0
				goto prec_int_pad0;
    23bc:	e748      	b.n	2250 <cbvprintf+0x4d8>
				store_count(conv, value->ptr, count);
    23be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
    23c0:	2907      	cmp	r1, #7
    23c2:	f63f aee4 	bhi.w	218e <cbvprintf+0x416>
    23c6:	e8df f001 	tbb	[pc, r1]
    23ca:	040d      	.short	0x040d
    23cc:	08080d06 	.word	0x08080d06
    23d0:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
    23d2:	701d      	strb	r5, [r3, #0]
		break;
    23d4:	e6db      	b.n	218e <cbvprintf+0x416>
		*(short *)dp = (short)count;
    23d6:	801d      	strh	r5, [r3, #0]
		break;
    23d8:	e6d9      	b.n	218e <cbvprintf+0x416>
		*(intmax_t *)dp = (intmax_t)count;
    23da:	4628      	mov	r0, r5
    23dc:	17e9      	asrs	r1, r5, #31
    23de:	e9c3 0100 	strd	r0, r1, [r3]
		break;
    23e2:	e6d4      	b.n	218e <cbvprintf+0x416>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    23e4:	601d      	str	r5, [r3, #0]
		break;
    23e6:	e6d2      	b.n	218e <cbvprintf+0x416>
			bpe = bps + 5;
    23e8:	4f2e      	ldr	r7, [pc, #184]	; (24a4 <cbvprintf+0x72c>)
    23ea:	4606      	mov	r6, r0
			bps = "(nil)";
    23ec:	f1a7 0905 	sub.w	r9, r7, #5
    23f0:	e78d      	b.n	230e <cbvprintf+0x596>
		} else if (conv->altform_0) {
    23f2:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    23f4:	bf48      	it	mi
    23f6:	3301      	addmi	r3, #1
    23f8:	e792      	b.n	2320 <cbvprintf+0x5a8>
					OUTC(pad);
    23fa:	4618      	mov	r0, r3
    23fc:	4659      	mov	r1, fp
    23fe:	9303      	str	r3, [sp, #12]
    2400:	47d0      	blx	sl
    2402:	2800      	cmp	r0, #0
    2404:	9b03      	ldr	r3, [sp, #12]
    2406:	da04      	bge.n	2412 <cbvprintf+0x69a>
#undef OUTS
#undef OUTC
}
    2408:	b013      	add	sp, #76	; 0x4c
    240a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    240e:	2320      	movs	r3, #32
    2410:	4445      	add	r5, r8
    2412:	4642      	mov	r2, r8
				while (width-- > 0) {
    2414:	2a00      	cmp	r2, #0
    2416:	eba5 0108 	sub.w	r1, r5, r8
    241a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    241e:	dcec      	bgt.n	23fa <cbvprintf+0x682>
    2420:	460d      	mov	r5, r1
		if (sign != 0) {
    2422:	b12e      	cbz	r6, 2430 <cbvprintf+0x6b8>
			OUTC(sign);
    2424:	4659      	mov	r1, fp
    2426:	4630      	mov	r0, r6
    2428:	47d0      	blx	sl
    242a:	2800      	cmp	r0, #0
    242c:	dbec      	blt.n	2408 <cbvprintf+0x690>
    242e:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    2430:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    2434:	06d9      	lsls	r1, r3, #27
    2436:	d401      	bmi.n	243c <cbvprintf+0x6c4>
    2438:	071a      	lsls	r2, r3, #28
    243a:	d505      	bpl.n	2448 <cbvprintf+0x6d0>
				OUTC('0');
    243c:	4659      	mov	r1, fp
    243e:	2030      	movs	r0, #48	; 0x30
    2440:	47d0      	blx	sl
    2442:	2800      	cmp	r0, #0
    2444:	dbe0      	blt.n	2408 <cbvprintf+0x690>
    2446:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    2448:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    244c:	06db      	lsls	r3, r3, #27
    244e:	d506      	bpl.n	245e <cbvprintf+0x6e6>
				OUTC(conv->specifier);
    2450:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    2454:	4659      	mov	r1, fp
    2456:	47d0      	blx	sl
    2458:	2800      	cmp	r0, #0
    245a:	dbd5      	blt.n	2408 <cbvprintf+0x690>
    245c:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    245e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    2460:	442e      	add	r6, r5
    2462:	1b73      	subs	r3, r6, r5
    2464:	2b00      	cmp	r3, #0
    2466:	dc15      	bgt.n	2494 <cbvprintf+0x71c>
			OUTS(bps, bpe);
    2468:	463b      	mov	r3, r7
    246a:	464a      	mov	r2, r9
    246c:	4659      	mov	r1, fp
    246e:	4650      	mov	r0, sl
    2470:	f005 fd7e 	bl	7f70 <outs>
    2474:	2800      	cmp	r0, #0
    2476:	dbc7      	blt.n	2408 <cbvprintf+0x690>
    2478:	4405      	add	r5, r0
		while (width > 0) {
    247a:	44a8      	add	r8, r5
    247c:	eba8 0305 	sub.w	r3, r8, r5
    2480:	2b00      	cmp	r3, #0
    2482:	f77f ae84 	ble.w	218e <cbvprintf+0x416>
			OUTC(' ');
    2486:	4659      	mov	r1, fp
    2488:	2020      	movs	r0, #32
    248a:	47d0      	blx	sl
    248c:	2800      	cmp	r0, #0
    248e:	dbbb      	blt.n	2408 <cbvprintf+0x690>
    2490:	3501      	adds	r5, #1
			--width;
    2492:	e7f3      	b.n	247c <cbvprintf+0x704>
				OUTC('0');
    2494:	4659      	mov	r1, fp
    2496:	2030      	movs	r0, #48	; 0x30
    2498:	47d0      	blx	sl
    249a:	2800      	cmp	r0, #0
    249c:	dbb4      	blt.n	2408 <cbvprintf+0x690>
    249e:	3501      	adds	r5, #1
    24a0:	e7df      	b.n	2462 <cbvprintf+0x6ea>
    24a2:	bf00      	nop
    24a4:	000096ff 	.word	0x000096ff

000024a8 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    24a8:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    24aa:	4910      	ldr	r1, [pc, #64]	; (24ec <enable_logger+0x44>)
    24ac:	4810      	ldr	r0, [pc, #64]	; (24f0 <enable_logger+0x48>)
{
    24ae:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    24b0:	2200      	movs	r2, #0
    24b2:	f006 fde3 	bl	907c <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    24b6:	4d0f      	ldr	r5, [pc, #60]	; (24f4 <enable_logger+0x4c>)
    24b8:	490f      	ldr	r1, [pc, #60]	; (24f8 <enable_logger+0x50>)
    24ba:	2200      	movs	r2, #0
    24bc:	2300      	movs	r3, #0
    24be:	e9cd 2306 	strd	r2, r3, [sp, #24]
    24c2:	2400      	movs	r4, #0
    24c4:	230e      	movs	r3, #14
    24c6:	e9cd 3403 	strd	r3, r4, [sp, #12]
    24ca:	e9cd 4401 	strd	r4, r4, [sp, #4]
    24ce:	4b0b      	ldr	r3, [pc, #44]	; (24fc <enable_logger+0x54>)
    24d0:	9400      	str	r4, [sp, #0]
    24d2:	f44f 7240 	mov.w	r2, #768	; 0x300
    24d6:	4628      	mov	r0, r5
    24d8:	f004 ffc2 	bl	7460 <z_impl_k_thread_create>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&thread, *(uintptr_t *)&str, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread, str);
    24dc:	4908      	ldr	r1, [pc, #32]	; (2500 <enable_logger+0x58>)
    24de:	4628      	mov	r0, r5
    24e0:	f006 fd52 	bl	8f88 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    24e4:	4620      	mov	r0, r4
    24e6:	b009      	add	sp, #36	; 0x24
    24e8:	bd30      	pop	{r4, r5, pc}
    24ea:	bf00      	nop
    24ec:	00002505 	.word	0x00002505
    24f0:	200001d0 	.word	0x200001d0
    24f4:	20000208 	.word	0x20000208
    24f8:	20000eb0 	.word	0x20000eb0
    24fc:	00002969 	.word	0x00002969
    2500:	00009700 	.word	0x00009700

00002504 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    2504:	4801      	ldr	r0, [pc, #4]	; (250c <log_process_thread_timer_expiry_fn+0x8>)
    2506:	f004 bf17 	b.w	7338 <z_impl_k_sem_give>
    250a:	bf00      	nop
    250c:	200001bc 	.word	0x200001bc

00002510 <z_log_get_s_mask>:
{
    2510:	b5f0      	push	{r4, r5, r6, r7, lr}
    2512:	4605      	mov	r5, r0
		} else if (arm && isalpha((int)curr)) {
    2514:	4e0f      	ldr	r6, [pc, #60]	; (2554 <z_log_get_s_mask+0x44>)
	uint32_t mask = 0U;
    2516:	2000      	movs	r0, #0
	uint32_t arg = 0U;
    2518:	4603      	mov	r3, r0
	bool arm = false;
    251a:	4602      	mov	r2, r0
				mask |= BIT(arg);
    251c:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
    251e:	f815 4b01 	ldrb.w	r4, [r5], #1
    2522:	b10c      	cbz	r4, 2528 <z_log_get_s_mask+0x18>
    2524:	428b      	cmp	r3, r1
    2526:	d300      	bcc.n	252a <z_log_get_s_mask+0x1a>
}
    2528:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
    252a:	2c25      	cmp	r4, #37	; 0x25
    252c:	d102      	bne.n	2534 <z_log_get_s_mask+0x24>
			arm = !arm;
    252e:	f082 0201 	eor.w	r2, r2, #1
    2532:	e7f4      	b.n	251e <z_log_get_s_mask+0xe>
		} else if (arm && isalpha((int)curr)) {
    2534:	2a00      	cmp	r2, #0
    2536:	d0f2      	beq.n	251e <z_log_get_s_mask+0xe>
    2538:	f814 c006 	ldrb.w	ip, [r4, r6]
    253c:	f01c 0f03 	tst.w	ip, #3
    2540:	d0ed      	beq.n	251e <z_log_get_s_mask+0xe>
			if (curr == 's') {
    2542:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
    2544:	bf04      	itt	eq
    2546:	fa07 f203 	lsleq.w	r2, r7, r3
    254a:	4310      	orreq	r0, r2
			arg++;
    254c:	3301      	adds	r3, #1
			arm = false;
    254e:	2200      	movs	r2, #0
    2550:	e7e5      	b.n	251e <z_log_get_s_mask+0xe>
    2552:	bf00      	nop
    2554:	0000a095 	.word	0x0000a095

00002558 <log_core_init>:
{
    2558:	b508      	push	{r3, lr}
		log_msg_pool_init();
    255a:	f000 fa67 	bl	2a2c <log_msg_pool_init>
		log_list_init(&list);
    255e:	4809      	ldr	r0, [pc, #36]	; (2584 <log_core_init+0x2c>)
    2560:	f005 fd1d 	bl	7f9e <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    2564:	2304      	movs	r3, #4
    2566:	2228      	movs	r2, #40	; 0x28
    2568:	4907      	ldr	r1, [pc, #28]	; (2588 <log_core_init+0x30>)
    256a:	4808      	ldr	r0, [pc, #32]	; (258c <log_core_init+0x34>)
    256c:	f006 fbf0 	bl	8d50 <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
    2570:	4b07      	ldr	r3, [pc, #28]	; (2590 <log_core_init+0x38>)
    2572:	4a08      	ldr	r2, [pc, #32]	; (2594 <log_core_init+0x3c>)
    2574:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    2576:	f44f 4000 	mov.w	r0, #32768	; 0x8000
}
    257a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
    257e:	f000 bc9f 	b.w	2ec0 <log_output_timestamp_freq_set>
    2582:	bf00      	nop
    2584:	2000043c 	.word	0x2000043c
    2588:	200022f0 	.word	0x200022f0
    258c:	20000444 	.word	0x20000444
    2590:	20000004 	.word	0x20000004
    2594:	00007fdd 	.word	0x00007fdd

00002598 <dropped_notify>:
{
    2598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    259a:	4b0f      	ldr	r3, [pc, #60]	; (25d8 <dropped_notify+0x40>)
    259c:	f3bf 8f5b 	dmb	ish
    25a0:	2500      	movs	r5, #0
    25a2:	e853 7f00 	ldrex	r7, [r3]
    25a6:	e843 5200 	strex	r2, r5, [r3]
    25aa:	2a00      	cmp	r2, #0
    25ac:	d1f9      	bne.n	25a2 <dropped_notify+0xa>
    25ae:	f3bf 8f5b 	dmb	ish
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    25b2:	4c0a      	ldr	r4, [pc, #40]	; (25dc <dropped_notify+0x44>)
    25b4:	4e0a      	ldr	r6, [pc, #40]	; (25e0 <dropped_notify+0x48>)
    25b6:	1b36      	subs	r6, r6, r4
    25b8:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    25ba:	42b5      	cmp	r5, r6
    25bc:	db00      	blt.n	25c0 <dropped_notify+0x28>
}
    25be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    25c0:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    25c2:	795b      	ldrb	r3, [r3, #5]
    25c4:	b12b      	cbz	r3, 25d2 <dropped_notify+0x3a>
	if (backend->api->dropped != NULL) {
    25c6:	6823      	ldr	r3, [r4, #0]
    25c8:	68db      	ldr	r3, [r3, #12]
    25ca:	b113      	cbz	r3, 25d2 <dropped_notify+0x3a>
		backend->api->dropped(backend, cnt);
    25cc:	4639      	mov	r1, r7
    25ce:	4620      	mov	r0, r4
    25d0:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    25d2:	3501      	adds	r5, #1
    25d4:	3410      	adds	r4, #16
    25d6:	e7f0      	b.n	25ba <dropped_notify+0x22>
    25d8:	20000434 	.word	0x20000434
    25dc:	00009394 	.word	0x00009394
    25e0:	000093a4 	.word	0x000093a4

000025e4 <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    25e4:	4b06      	ldr	r3, [pc, #24]	; (2600 <log_dropped+0x1c>)
    25e6:	f3bf 8f5b 	dmb	ish
    25ea:	e853 2f00 	ldrex	r2, [r3]
    25ee:	3201      	adds	r2, #1
    25f0:	e843 2100 	strex	r1, r2, [r3]
    25f4:	2900      	cmp	r1, #0
    25f6:	d1f8      	bne.n	25ea <log_dropped+0x6>
    25f8:	f3bf 8f5b 	dmb	ish
}
    25fc:	4770      	bx	lr
    25fe:	bf00      	nop
    2600:	20000434 	.word	0x20000434

00002604 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    2604:	4a04      	ldr	r2, [pc, #16]	; (2618 <log_source_name_get+0x14>)
    2606:	4b05      	ldr	r3, [pc, #20]	; (261c <log_source_name_get+0x18>)
    2608:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    260a:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    260e:	bf34      	ite	cc
    2610:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    2614:	2000      	movcs	r0, #0
}
    2616:	4770      	bx	lr
    2618:	00009344 	.word	0x00009344
    261c:	00009394 	.word	0x00009394

00002620 <log_backend_enable>:
	id += backend - log_backend_get(0);
    2620:	4b09      	ldr	r3, [pc, #36]	; (2648 <log_backend_enable+0x28>)
	log_backend_id_set(backend, id);
    2622:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
    2624:	1ac3      	subs	r3, r0, r3
    2626:	111b      	asrs	r3, r3, #4
    2628:	3301      	adds	r3, #1
{
    262a:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
    262c:	7113      	strb	r3, [r2, #4]
	log_backend_activate(backend, ctx);
    262e:	6843      	ldr	r3, [r0, #4]
	if (!backend_attached) {
    2630:	4c06      	ldr	r4, [pc, #24]	; (264c <log_backend_enable+0x2c>)
	backend->cb->ctx = ctx;
    2632:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    2634:	2201      	movs	r2, #1
    2636:	715a      	strb	r2, [r3, #5]
    2638:	7822      	ldrb	r2, [r4, #0]
    263a:	b912      	cbnz	r2, 2642 <log_backend_enable+0x22>
    263c:	4804      	ldr	r0, [pc, #16]	; (2650 <log_backend_enable+0x30>)
    263e:	f004 fe7b 	bl	7338 <z_impl_k_sem_give>
	backend_attached = true;
    2642:	2301      	movs	r3, #1
    2644:	7023      	strb	r3, [r4, #0]
}
    2646:	bd10      	pop	{r4, pc}
    2648:	00009394 	.word	0x00009394
    264c:	20000988 	.word	0x20000988
    2650:	200001bc 	.word	0x200001bc

00002654 <log_init>:
{
    2654:	b570      	push	{r4, r5, r6, lr}
    2656:	4b11      	ldr	r3, [pc, #68]	; (269c <log_init+0x48>)
    2658:	f3bf 8f5b 	dmb	ish
    265c:	e853 5f00 	ldrex	r5, [r3]
    2660:	1c6a      	adds	r2, r5, #1
    2662:	e843 2100 	strex	r1, r2, [r3]
    2666:	2900      	cmp	r1, #0
    2668:	d1f8      	bne.n	265c <log_init+0x8>
    266a:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    266e:	b92d      	cbnz	r5, 267c <log_init+0x28>
	return __log_backends_end - __log_backends_start;
    2670:	4c0b      	ldr	r4, [pc, #44]	; (26a0 <log_init+0x4c>)
    2672:	4e0c      	ldr	r6, [pc, #48]	; (26a4 <log_init+0x50>)
    2674:	1b36      	subs	r6, r6, r4
    2676:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    2678:	42b5      	cmp	r5, r6
    267a:	db00      	blt.n	267e <log_init+0x2a>
}
    267c:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    267e:	7b23      	ldrb	r3, [r4, #12]
    2680:	b14b      	cbz	r3, 2696 <log_init+0x42>
			if (backend->api->init != NULL) {
    2682:	6823      	ldr	r3, [r4, #0]
    2684:	695b      	ldr	r3, [r3, #20]
    2686:	b10b      	cbz	r3, 268c <log_init+0x38>
				backend->api->init(backend);
    2688:	4620      	mov	r0, r4
    268a:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    268c:	2204      	movs	r2, #4
    268e:	2100      	movs	r1, #0
    2690:	4620      	mov	r0, r4
    2692:	f7ff ffc5 	bl	2620 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    2696:	3501      	adds	r5, #1
    2698:	3410      	adds	r4, #16
    269a:	e7ed      	b.n	2678 <log_init+0x24>
    269c:	20000438 	.word	0x20000438
    26a0:	00009394 	.word	0x00009394
    26a4:	000093a4 	.word	0x000093a4

000026a8 <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    26a8:	4b17      	ldr	r3, [pc, #92]	; (2708 <log_strdup+0x60>)
    26aa:	4298      	cmp	r0, r3
{
    26ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
    26ae:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    26b0:	d302      	bcc.n	26b8 <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    26b2:	4b16      	ldr	r3, [pc, #88]	; (270c <log_strdup+0x64>)
    26b4:	4298      	cmp	r0, r3
    26b6:	d321      	bcc.n	26fc <log_strdup+0x54>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    26b8:	4815      	ldr	r0, [pc, #84]	; (2710 <log_strdup+0x68>)
    26ba:	2200      	movs	r2, #0
    26bc:	2300      	movs	r3, #0
    26be:	a901      	add	r1, sp, #4
    26c0:	f004 f99e 	bl	6a00 <k_mem_slab_alloc>
	if (err != 0) {
    26c4:	4605      	mov	r5, r0
    26c6:	b9e0      	cbnz	r0, 2702 <log_strdup+0x5a>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    26c8:	2201      	movs	r2, #1
    26ca:	9b01      	ldr	r3, [sp, #4]
    26cc:	f3bf 8f5b 	dmb	ish
    26d0:	e853 1f00 	ldrex	r1, [r3]
    26d4:	e843 2000 	strex	r0, r2, [r3]
    26d8:	2800      	cmp	r0, #0
    26da:	d1f9      	bne.n	26d0 <log_strdup+0x28>
    26dc:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    26e0:	9e01      	ldr	r6, [sp, #4]
    26e2:	1d33      	adds	r3, r6, #4
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
    26e4:	221f      	movs	r2, #31
    26e6:	4618      	mov	r0, r3
    26e8:	4621      	mov	r1, r4
    26ea:	f006 fd0f 	bl	910c <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    26ee:	227e      	movs	r2, #126	; 0x7e
    26f0:	4603      	mov	r3, r0
    26f2:	f886 2023 	strb.w	r2, [r6, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    26f6:	f886 5024 	strb.w	r5, [r6, #36]	; 0x24
	return dup->buf;
    26fa:	461c      	mov	r4, r3
}
    26fc:	4620      	mov	r0, r4
    26fe:	b002      	add	sp, #8
    2700:	bd70      	pop	{r4, r5, r6, pc}
		return (char *)log_strdup_fail_msg;
    2702:	4b04      	ldr	r3, [pc, #16]	; (2714 <log_strdup+0x6c>)
    2704:	e7f9      	b.n	26fa <log_strdup+0x52>
    2706:	bf00      	nop
    2708:	00009154 	.word	0x00009154
    270c:	0000a198 	.word	0x0000a198
    2710:	20000444 	.word	0x20000444
    2714:	00009708 	.word	0x00009708

00002718 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
    2718:	b148      	cbz	r0, 272e <log_is_strdup+0x16>
    271a:	4b05      	ldr	r3, [pc, #20]	; (2730 <log_is_strdup+0x18>)
    271c:	4298      	cmp	r0, r3
    271e:	d305      	bcc.n	272c <log_is_strdup+0x14>
    2720:	33a0      	adds	r3, #160	; 0xa0
    2722:	4298      	cmp	r0, r3
    2724:	bf2c      	ite	cs
    2726:	2000      	movcs	r0, #0
    2728:	2001      	movcc	r0, #1
    272a:	4770      	bx	lr
    272c:	2000      	movs	r0, #0
}
    272e:	4770      	bx	lr
    2730:	200022f0 	.word	0x200022f0

00002734 <z_impl_log_process>:
{
    2734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
    2738:	4b4c      	ldr	r3, [pc, #304]	; (286c <z_impl_log_process+0x138>)
    273a:	781b      	ldrb	r3, [r3, #0]
{
    273c:	b085      	sub	sp, #20
    273e:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    2740:	b903      	cbnz	r3, 2744 <z_impl_log_process+0x10>
    2742:	b360      	cbz	r0, 279e <z_impl_log_process+0x6a>
    2744:	f04f 0320 	mov.w	r3, #32
    2748:	f3ef 8611 	mrs	r6, BASEPRI
    274c:	f383 8811 	msr	BASEPRI, r3
    2750:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
    2754:	4846      	ldr	r0, [pc, #280]	; (2870 <z_impl_log_process+0x13c>)
    2756:	f005 fc32 	bl	7fbe <log_list_head_get>
    275a:	4605      	mov	r5, r0
	__asm__ volatile(
    275c:	f386 8811 	msr	BASEPRI, r6
    2760:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
    2764:	b178      	cbz	r0, 2786 <z_impl_log_process+0x52>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    2766:	f3bf 8f5b 	dmb	ish
    276a:	4b42      	ldr	r3, [pc, #264]	; (2874 <z_impl_log_process+0x140>)
    276c:	e853 2f00 	ldrex	r2, [r3]
    2770:	3a01      	subs	r2, #1
    2772:	e843 2100 	strex	r1, r2, [r3]
    2776:	2900      	cmp	r1, #0
    2778:	d1f8      	bne.n	276c <z_impl_log_process+0x38>
    277a:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
    277e:	b194      	cbz	r4, 27a6 <z_impl_log_process+0x72>
	log_msg_put(msg);
    2780:	4628      	mov	r0, r5
    2782:	f005 fd22 	bl	81ca <log_msg_put>
	if (!bypass && dropped_cnt) {
    2786:	b924      	cbnz	r4, 2792 <z_impl_log_process+0x5e>
    2788:	4b3b      	ldr	r3, [pc, #236]	; (2878 <z_impl_log_process+0x144>)
    278a:	681b      	ldr	r3, [r3, #0]
    278c:	b10b      	cbz	r3, 2792 <z_impl_log_process+0x5e>
		dropped_notify();
    278e:	f7ff ff03 	bl	2598 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    2792:	4837      	ldr	r0, [pc, #220]	; (2870 <z_impl_log_process+0x13c>)
    2794:	f005 fc11 	bl	7fba <log_list_head_peek>
    2798:	1e04      	subs	r4, r0, #0
    279a:	bf18      	it	ne
    279c:	2401      	movne	r4, #1
}
    279e:	4620      	mov	r0, r4
    27a0:	b005      	add	sp, #20
    27a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
    27a6:	4b35      	ldr	r3, [pc, #212]	; (287c <z_impl_log_process+0x148>)
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
    27a8:	781b      	ldrb	r3, [r3, #0]
    27aa:	b9cb      	cbnz	r3, 27e0 <z_impl_log_process+0xac>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    27ac:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
    27ae:	07db      	lsls	r3, r3, #31
    27b0:	d416      	bmi.n	27e0 <z_impl_log_process+0xac>
	msg_str = log_msg_str_get(msg);
    27b2:	f005 fd1d 	bl	81f0 <log_msg_str_get>
    27b6:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    27b8:	4628      	mov	r0, r5
    27ba:	f005 fce4 	bl	8186 <log_msg_nargs_get>
    27be:	4601      	mov	r1, r0
    27c0:	4640      	mov	r0, r8
    27c2:	f7ff fea5 	bl	2510 <z_log_get_s_mask>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    27c6:	4f2e      	ldr	r7, [pc, #184]	; (2880 <z_impl_log_process+0x14c>)
    27c8:	4b2e      	ldr	r3, [pc, #184]	; (2884 <z_impl_log_process+0x150>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    27ca:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 28a0 <z_impl_log_process+0x16c>
    27ce:	1bdb      	subs	r3, r3, r7
    27d0:	08db      	lsrs	r3, r3, #3
    27d2:	9303      	str	r3, [sp, #12]
    27d4:	4b2c      	ldr	r3, [pc, #176]	; (2888 <z_impl_log_process+0x154>)
    27d6:	1bdb      	subs	r3, r3, r7
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    27d8:	4606      	mov	r6, r0
    27da:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
	while (mask) {
    27de:	b936      	cbnz	r6, 27ee <z_impl_log_process+0xba>
    27e0:	4e2a      	ldr	r6, [pc, #168]	; (288c <z_impl_log_process+0x158>)
    27e2:	4f2b      	ldr	r7, [pc, #172]	; (2890 <z_impl_log_process+0x15c>)
    27e4:	1bbf      	subs	r7, r7, r6
    27e6:	113f      	asrs	r7, r7, #4
    27e8:	f04f 0800 	mov.w	r8, #0
    27ec:	e03a      	b.n	2864 <z_impl_log_process+0x130>
		idx = 31 - __builtin_clz(mask);
    27ee:	fab6 f186 	clz	r1, r6
    27f2:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    27f6:	4649      	mov	r1, r9
    27f8:	4628      	mov	r0, r5
    27fa:	f005 fcc7 	bl	818c <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
    27fe:	4b25      	ldr	r3, [pc, #148]	; (2894 <z_impl_log_process+0x160>)
    2800:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
    2802:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    2804:	d302      	bcc.n	280c <z_impl_log_process+0xd8>
		if (!is_rodata(str) && !log_is_strdup(str) &&
    2806:	4b24      	ldr	r3, [pc, #144]	; (2898 <z_impl_log_process+0x164>)
    2808:	4298      	cmp	r0, r3
    280a:	d31a      	bcc.n	2842 <z_impl_log_process+0x10e>
    280c:	4608      	mov	r0, r1
    280e:	f7ff ff83 	bl	2718 <log_is_strdup>
    2812:	4602      	mov	r2, r0
    2814:	b9a8      	cbnz	r0, 2842 <z_impl_log_process+0x10e>
    2816:	4b21      	ldr	r3, [pc, #132]	; (289c <z_impl_log_process+0x168>)
    2818:	4299      	cmp	r1, r3
    281a:	d012      	beq.n	2842 <z_impl_log_process+0x10e>
	return msg->hdr.ids.source_id;
    281c:	896b      	ldrh	r3, [r5, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    281e:	9803      	ldr	r0, [sp, #12]
    2820:	0999      	lsrs	r1, r3, #6
    2822:	ebb0 1f93 	cmp.w	r0, r3, lsr #6
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    2826:	ea4f 138a 	mov.w	r3, sl, lsl #6
    282a:	f043 0301 	orr.w	r3, r3, #1
	return __log_const_start[source_id].name;
    282e:	bf88      	it	hi
    2830:	f857 2031 	ldrhi.w	r2, [r7, r1, lsl #3]
    2834:	f8ad 3000 	strh.w	r3, [sp]
    2838:	4649      	mov	r1, r9
    283a:	4643      	mov	r3, r8
    283c:	4658      	mov	r0, fp
    283e:	f005 fc0b 	bl	8058 <log_3>
		mask &= ~BIT(idx);
    2842:	2101      	movs	r1, #1
    2844:	fa01 f109 	lsl.w	r1, r1, r9
    2848:	ea26 0601 	bic.w	r6, r6, r1
    284c:	e7c7      	b.n	27de <z_impl_log_process+0xaa>
	return backend->cb->active;
    284e:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
    2850:	795b      	ldrb	r3, [r3, #5]
    2852:	b123      	cbz	r3, 285e <z_impl_log_process+0x12a>
	backend->api->put(backend, msg);
    2854:	6833      	ldr	r3, [r6, #0]
    2856:	4629      	mov	r1, r5
    2858:	681b      	ldr	r3, [r3, #0]
    285a:	4630      	mov	r0, r6
    285c:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    285e:	f108 0801 	add.w	r8, r8, #1
    2862:	3610      	adds	r6, #16
    2864:	45b8      	cmp	r8, r7
    2866:	dbf2      	blt.n	284e <z_impl_log_process+0x11a>
    2868:	e78a      	b.n	2780 <z_impl_log_process+0x4c>
    286a:	bf00      	nop
    286c:	20000988 	.word	0x20000988
    2870:	2000043c 	.word	0x2000043c
    2874:	20000430 	.word	0x20000430
    2878:	20000434 	.word	0x20000434
    287c:	20000989 	.word	0x20000989
    2880:	00009344 	.word	0x00009344
    2884:	00009394 	.word	0x00009394
    2888:	0000934c 	.word	0x0000934c
    288c:	00009394 	.word	0x00009394
    2890:	000093a4 	.word	0x000093a4
    2894:	00009154 	.word	0x00009154
    2898:	0000a198 	.word	0x0000a198
    289c:	00009708 	.word	0x00009708
    28a0:	00009722 	.word	0x00009722

000028a4 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    28a4:	4b29      	ldr	r3, [pc, #164]	; (294c <msg_finalize+0xa8>)
{
    28a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
	msg->hdr.timestamp = timestamp_func();
    28a8:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    28aa:	8141      	strh	r1, [r0, #10]
{
    28ac:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    28ae:	4798      	blx	r3
    28b0:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    28b2:	f04f 0320 	mov.w	r3, #32
    28b6:	f3ef 8511 	mrs	r5, BASEPRI
    28ba:	f383 8811 	msr	BASEPRI, r3
    28be:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    28c2:	4823      	ldr	r0, [pc, #140]	; (2950 <msg_finalize+0xac>)
    28c4:	4621      	mov	r1, r4
    28c6:	f005 fb6e 	bl	7fa6 <log_list_add_tail>
	__asm__ volatile(
    28ca:	f385 8811 	msr	BASEPRI, r5
    28ce:	f3bf 8f6f 	isb	sy
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    28d2:	f3bf 8f5b 	dmb	ish
    28d6:	4b1f      	ldr	r3, [pc, #124]	; (2954 <msg_finalize+0xb0>)
    28d8:	e853 2f00 	ldrex	r2, [r3]
    28dc:	3201      	adds	r2, #1
    28de:	e843 2100 	strex	r1, r2, [r3]
    28e2:	2900      	cmp	r1, #0
    28e4:	d1f8      	bne.n	28d8 <msg_finalize+0x34>
    28e6:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
    28ea:	4a1b      	ldr	r2, [pc, #108]	; (2958 <msg_finalize+0xb4>)
    28ec:	7812      	ldrb	r2, [r2, #0]
    28ee:	b182      	cbz	r2, 2912 <msg_finalize+0x6e>
	__asm__ volatile(
    28f0:	f04f 0320 	mov.w	r3, #32
    28f4:	f3ef 8411 	mrs	r4, BASEPRI
    28f8:	f383 8811 	msr	BASEPRI, r3
    28fc:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    2900:	2000      	movs	r0, #0
    2902:	f7ff ff17 	bl	2734 <z_impl_log_process>
	__asm__ volatile(
    2906:	f384 8811 	msr	BASEPRI, r4
    290a:	f3bf 8f6f 	isb	sy
}
    290e:	b003      	add	sp, #12
    2910:	bd30      	pop	{r4, r5, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    2912:	4a12      	ldr	r2, [pc, #72]	; (295c <msg_finalize+0xb8>)
    2914:	681b      	ldr	r3, [r3, #0]
    2916:	6812      	ldr	r2, [r2, #0]
    2918:	2a00      	cmp	r2, #0
    291a:	d0f8      	beq.n	290e <msg_finalize+0x6a>
    291c:	2b01      	cmp	r3, #1
    291e:	d10a      	bne.n	2936 <msg_finalize+0x92>
	z_impl_k_timer_start(timer, duration, period);
    2920:	2200      	movs	r2, #0
    2922:	2300      	movs	r3, #0
    2924:	e9cd 2300 	strd	r2, r3, [sp]
    2928:	480d      	ldr	r0, [pc, #52]	; (2960 <msg_finalize+0xbc>)
    292a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    292e:	2300      	movs	r3, #0
    2930:	f005 f926 	bl	7b80 <z_impl_k_timer_start>
    2934:	e7eb      	b.n	290e <msg_finalize+0x6a>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    2936:	2b0a      	cmp	r3, #10
    2938:	d1e9      	bne.n	290e <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
    293a:	4809      	ldr	r0, [pc, #36]	; (2960 <msg_finalize+0xbc>)
    293c:	f006 fbaa 	bl	9094 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    2940:	4808      	ldr	r0, [pc, #32]	; (2964 <msg_finalize+0xc0>)
}
    2942:	b003      	add	sp, #12
    2944:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    2948:	f004 bcf6 	b.w	7338 <z_impl_k_sem_give>
    294c:	20000004 	.word	0x20000004
    2950:	2000043c 	.word	0x2000043c
    2954:	20000430 	.word	0x20000430
    2958:	20000989 	.word	0x20000989
    295c:	20000460 	.word	0x20000460
    2960:	200001d0 	.word	0x200001d0
    2964:	200001bc 	.word	0x200001bc

00002968 <log_process_thread_func>:
{
    2968:	b510      	push	{r4, lr}
	log_init();
    296a:	f7ff fe73 	bl	2654 <log_init>
	return z_impl_k_current_get();
    296e:	f004 fc69 	bl	7244 <z_impl_k_current_get>
	proc_tid = process_tid;
    2972:	4b0c      	ldr	r3, [pc, #48]	; (29a4 <log_process_thread_func+0x3c>)
    2974:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    2976:	b130      	cbz	r0, 2986 <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    2978:	4b0b      	ldr	r3, [pc, #44]	; (29a8 <log_process_thread_func+0x40>)
	    process_tid &&
    297a:	681b      	ldr	r3, [r3, #0]
    297c:	2b09      	cmp	r3, #9
    297e:	dd02      	ble.n	2986 <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    2980:	480a      	ldr	r0, [pc, #40]	; (29ac <log_process_thread_func+0x44>)
    2982:	f004 fcd9 	bl	7338 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    2986:	4c09      	ldr	r4, [pc, #36]	; (29ac <log_process_thread_func+0x44>)
    2988:	2000      	movs	r0, #0
    298a:	f7ff fed3 	bl	2734 <z_impl_log_process>
		if (log_process(false) == false) {
    298e:	2800      	cmp	r0, #0
    2990:	d1fa      	bne.n	2988 <log_process_thread_func+0x20>
    2992:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2996:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    299a:	4620      	mov	r0, r4
    299c:	f004 fcec 	bl	7378 <z_impl_k_sem_take>
    29a0:	e7f2      	b.n	2988 <log_process_thread_func+0x20>
    29a2:	bf00      	nop
    29a4:	20000460 	.word	0x20000460
    29a8:	20000430 	.word	0x20000430
    29ac:	200001bc 	.word	0x200001bc

000029b0 <z_impl_log_panic>:
{
    29b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    29b2:	4f0e      	ldr	r7, [pc, #56]	; (29ec <z_impl_log_panic+0x3c>)
    29b4:	783d      	ldrb	r5, [r7, #0]
    29b6:	b975      	cbnz	r5, 29d6 <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
    29b8:	4c0d      	ldr	r4, [pc, #52]	; (29f0 <z_impl_log_panic+0x40>)
    29ba:	4e0e      	ldr	r6, [pc, #56]	; (29f4 <z_impl_log_panic+0x44>)
	log_init();
    29bc:	f7ff fe4a 	bl	2654 <log_init>
    29c0:	1b36      	subs	r6, r6, r4
    29c2:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    29c4:	42b5      	cmp	r5, r6
    29c6:	db07      	blt.n	29d8 <z_impl_log_panic+0x28>
    29c8:	2000      	movs	r0, #0
    29ca:	f7ff feb3 	bl	2734 <z_impl_log_process>
		while (log_process(false) == true) {
    29ce:	2800      	cmp	r0, #0
    29d0:	d1fa      	bne.n	29c8 <z_impl_log_panic+0x18>
	panic_mode = true;
    29d2:	2301      	movs	r3, #1
    29d4:	703b      	strb	r3, [r7, #0]
}
    29d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    29d8:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    29da:	795b      	ldrb	r3, [r3, #5]
    29dc:	b11b      	cbz	r3, 29e6 <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    29de:	6823      	ldr	r3, [r4, #0]
    29e0:	4620      	mov	r0, r4
    29e2:	691b      	ldr	r3, [r3, #16]
    29e4:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    29e6:	3501      	adds	r5, #1
    29e8:	3410      	adds	r4, #16
    29ea:	e7eb      	b.n	29c4 <z_impl_log_panic+0x14>
    29ec:	20000989 	.word	0x20000989
    29f0:	00009394 	.word	0x00009394
    29f4:	000093a4 	.word	0x000093a4

000029f8 <log_free>:
{
    29f8:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    29fa:	3804      	subs	r0, #4
    29fc:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    29fe:	f3bf 8f5b 	dmb	ish
    2a02:	e850 3f00 	ldrex	r3, [r0]
    2a06:	1e5a      	subs	r2, r3, #1
    2a08:	e840 2100 	strex	r1, r2, [r0]
    2a0c:	2900      	cmp	r1, #0
    2a0e:	d1f8      	bne.n	2a02 <log_free+0xa>
    2a10:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
    2a14:	2b01      	cmp	r3, #1
    2a16:	d103      	bne.n	2a20 <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    2a18:	4803      	ldr	r0, [pc, #12]	; (2a28 <log_free+0x30>)
    2a1a:	a901      	add	r1, sp, #4
    2a1c:	f004 f822 	bl	6a64 <k_mem_slab_free>
}
    2a20:	b003      	add	sp, #12
    2a22:	f85d fb04 	ldr.w	pc, [sp], #4
    2a26:	bf00      	nop
    2a28:	20000444 	.word	0x20000444

00002a2c <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    2a2c:	2320      	movs	r3, #32
    2a2e:	4902      	ldr	r1, [pc, #8]	; (2a38 <log_msg_pool_init+0xc>)
    2a30:	4802      	ldr	r0, [pc, #8]	; (2a3c <log_msg_pool_init+0x10>)
    2a32:	461a      	mov	r2, r3
    2a34:	f006 b98c 	b.w	8d50 <k_mem_slab_init>
    2a38:	20002390 	.word	0x20002390
    2a3c:	20000464 	.word	0x20000464

00002a40 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
    2a40:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
    2a42:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    2a44:	4d09      	ldr	r5, [pc, #36]	; (2a6c <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    2a46:	9301      	str	r3, [sp, #4]
    2a48:	2001      	movs	r0, #1
    2a4a:	f7ff fe73 	bl	2734 <z_impl_log_process>
    2a4e:	4604      	mov	r4, r0
			log_dropped();
    2a50:	f7ff fdc8 	bl	25e4 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    2a54:	2200      	movs	r2, #0
    2a56:	2300      	movs	r3, #0
    2a58:	a901      	add	r1, sp, #4
    2a5a:	4628      	mov	r0, r5
    2a5c:	f003 ffd0 	bl	6a00 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    2a60:	b108      	cbz	r0, 2a66 <log_msg_no_space_handle+0x26>
    2a62:	2c00      	cmp	r4, #0
    2a64:	d1f0      	bne.n	2a48 <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
    2a66:	9801      	ldr	r0, [sp, #4]
    2a68:	b003      	add	sp, #12
    2a6a:	bd30      	pop	{r4, r5, pc}
    2a6c:	20000464 	.word	0x20000464

00002a70 <log_msg_chunk_alloc>:
{
    2a70:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    2a72:	2300      	movs	r3, #0
    2a74:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    2a76:	4807      	ldr	r0, [pc, #28]	; (2a94 <log_msg_chunk_alloc+0x24>)
    2a78:	2200      	movs	r2, #0
    2a7a:	2300      	movs	r3, #0
    2a7c:	a901      	add	r1, sp, #4
    2a7e:	f003 ffbf 	bl	6a00 <k_mem_slab_alloc>
	if (err != 0) {
    2a82:	b110      	cbz	r0, 2a8a <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
    2a84:	f7ff ffdc 	bl	2a40 <log_msg_no_space_handle>
    2a88:	9001      	str	r0, [sp, #4]
}
    2a8a:	9801      	ldr	r0, [sp, #4]
    2a8c:	b003      	add	sp, #12
    2a8e:	f85d fb04 	ldr.w	pc, [sp], #4
    2a92:	bf00      	nop
    2a94:	20000464 	.word	0x20000464

00002a98 <msg_free>:
{
    2a98:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    2a9a:	7a03      	ldrb	r3, [r0, #8]
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
    2a9c:	7a45      	ldrb	r5, [r0, #9]
{
    2a9e:	b085      	sub	sp, #20
	return msg->hdr.params.std.nargs;
    2aa0:	092d      	lsrs	r5, r5, #4
{
    2aa2:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
    2aa4:	07d8      	lsls	r0, r3, #31
    2aa6:	d41c      	bmi.n	2ae2 <msg_free+0x4a>
    2aa8:	b1dd      	cbz	r5, 2ae2 <msg_free+0x4a>
		uint32_t smask = 0U;
    2aaa:	2400      	movs	r4, #0
		for (i = 0U; i < nargs; i++) {
    2aac:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
    2aae:	9801      	ldr	r0, [sp, #4]
    2ab0:	4631      	mov	r1, r6
    2ab2:	f005 fb6b 	bl	818c <log_msg_arg_get>
    2ab6:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
    2ab8:	f7ff fe2e 	bl	2718 <log_is_strdup>
    2abc:	b170      	cbz	r0, 2adc <msg_free+0x44>
				if (smask == 0U) {
    2abe:	b934      	cbnz	r4, 2ace <msg_free+0x36>
					smask = z_log_get_s_mask(
    2ac0:	9b01      	ldr	r3, [sp, #4]
    2ac2:	4629      	mov	r1, r5
    2ac4:	6918      	ldr	r0, [r3, #16]
    2ac6:	f7ff fd23 	bl	2510 <z_log_get_s_mask>
					if (smask == 0U) {
    2aca:	4604      	mov	r4, r0
    2acc:	b148      	cbz	r0, 2ae2 <msg_free+0x4a>
				if (smask & BIT(i)) {
    2ace:	fa24 f306 	lsr.w	r3, r4, r6
    2ad2:	07d9      	lsls	r1, r3, #31
    2ad4:	d502      	bpl.n	2adc <msg_free+0x44>
					log_free(buf);
    2ad6:	4638      	mov	r0, r7
    2ad8:	f7ff ff8e 	bl	29f8 <log_free>
		for (i = 0U; i < nargs; i++) {
    2adc:	3601      	adds	r6, #1
    2ade:	42ae      	cmp	r6, r5
    2ae0:	d3e5      	bcc.n	2aae <msg_free+0x16>
	if (msg->hdr.params.generic.ext == 1) {
    2ae2:	9b01      	ldr	r3, [sp, #4]
    2ae4:	7a1a      	ldrb	r2, [r3, #8]
    2ae6:	0792      	lsls	r2, r2, #30
    2ae8:	d504      	bpl.n	2af4 <msg_free+0x5c>
		cont_free(msg->payload.ext.next);
    2aea:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    2aec:	4c08      	ldr	r4, [pc, #32]	; (2b10 <msg_free+0x78>)
    2aee:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    2af0:	9b03      	ldr	r3, [sp, #12]
    2af2:	b92b      	cbnz	r3, 2b00 <msg_free+0x68>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    2af4:	4806      	ldr	r0, [pc, #24]	; (2b10 <msg_free+0x78>)
    2af6:	a901      	add	r1, sp, #4
    2af8:	f003 ffb4 	bl	6a64 <k_mem_slab_free>
}
    2afc:	b005      	add	sp, #20
    2afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
    2b00:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    2b02:	a903      	add	r1, sp, #12
    2b04:	4620      	mov	r0, r4
    2b06:	f003 ffad 	bl	6a64 <k_mem_slab_free>
		cont = next;
    2b0a:	9503      	str	r5, [sp, #12]
    2b0c:	e7f0      	b.n	2af0 <msg_free+0x58>
    2b0e:	bf00      	nop
    2b10:	20000464 	.word	0x20000464

00002b14 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    2b14:	b40e      	push	{r1, r2, r3}
    2b16:	b503      	push	{r0, r1, lr}
    2b18:	ab03      	add	r3, sp, #12
    2b1a:	4601      	mov	r1, r0
    2b1c:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    2b20:	4804      	ldr	r0, [pc, #16]	; (2b34 <print_formatted+0x20>)
	va_start(args, fmt);
    2b22:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    2b24:	f7ff f928 	bl	1d78 <cbvprintf>
	va_end(args);

	return length;
}
    2b28:	b002      	add	sp, #8
    2b2a:	f85d eb04 	ldr.w	lr, [sp], #4
    2b2e:	b003      	add	sp, #12
    2b30:	4770      	bx	lr
    2b32:	bf00      	nop
    2b34:	00008595 	.word	0x00008595

00002b38 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, uint16_t source_id)
{
    2b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2b3c:	b085      	sub	sp, #20
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    2b3e:	f011 0402 	ands.w	r4, r1, #2
{
    2b42:	4690      	mov	r8, r2
    2b44:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
    2b48:	4606      	mov	r6, r0
    2b4a:	461a      	mov	r2, r3
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    2b4c:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    2b50:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    2b54:	d007      	beq.n	2b66 <prefix_print+0x2e>
	if (!format) {
    2b56:	f011 0f44 	tst.w	r1, #68	; 0x44
    2b5a:	d137      	bne.n	2bcc <prefix_print+0x94>
		length = print_formatted(output, "[%08lu] ", timestamp);
    2b5c:	4932      	ldr	r1, [pc, #200]	; (2c28 <prefix_print+0xf0>)
    2b5e:	f7ff ffd9 	bl	2b14 <print_formatted>
			length = print_formatted(output,
    2b62:	4601      	mov	r1, r0
		length += timestamp_print(output, flags, timestamp);
    2b64:	460c      	mov	r4, r1
	if (color) {
    2b66:	f1b9 0f00 	cmp.w	r9, #0
    2b6a:	d00a      	beq.n	2b82 <prefix_print+0x4a>
		const char *log_color = start && (colors[level] != NULL) ?
    2b6c:	4b2f      	ldr	r3, [pc, #188]	; (2c2c <prefix_print+0xf4>)
		print_formatted(output, "%s", log_color);
    2b6e:	4930      	ldr	r1, [pc, #192]	; (2c30 <prefix_print+0xf8>)
		const char *log_color = start && (colors[level] != NULL) ?
    2b70:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(output, "%s", log_color);
    2b74:	4b2f      	ldr	r3, [pc, #188]	; (2c34 <prefix_print+0xfc>)
    2b76:	4630      	mov	r0, r6
    2b78:	2a00      	cmp	r2, #0
    2b7a:	bf08      	it	eq
    2b7c:	461a      	moveq	r2, r3
    2b7e:	f7ff ffc9 	bl	2b14 <print_formatted>
	if (level_on) {
    2b82:	b13d      	cbz	r5, 2b94 <prefix_print+0x5c>
		total += print_formatted(output, "<%s> ", severity[level]);
    2b84:	4b2c      	ldr	r3, [pc, #176]	; (2c38 <prefix_print+0x100>)
    2b86:	492d      	ldr	r1, [pc, #180]	; (2c3c <prefix_print+0x104>)
    2b88:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    2b8c:	4630      	mov	r0, r6
    2b8e:	f7ff ffc1 	bl	2b14 <print_formatted>
    2b92:	4605      	mov	r5, r0
	total += print_formatted(output,
    2b94:	f1b8 0f00 	cmp.w	r8, #0
    2b98:	d043      	beq.n	2c22 <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    2b9a:	2301      	movs	r3, #1
    2b9c:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(output,
    2ba0:	4b27      	ldr	r3, [pc, #156]	; (2c40 <prefix_print+0x108>)
    2ba2:	f017 0f10 	tst.w	r7, #16
    2ba6:	4f27      	ldr	r7, [pc, #156]	; (2c44 <prefix_print+0x10c>)
    2ba8:	bf18      	it	ne
    2baa:	461f      	movne	r7, r3
    2bac:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    2bb0:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    2bb4:	f7ff fd26 	bl	2604 <log_source_name_get>
    2bb8:	4639      	mov	r1, r7
    2bba:	4602      	mov	r2, r0
    2bbc:	4630      	mov	r0, r6
    2bbe:	f7ff ffa9 	bl	2b14 <print_formatted>
    2bc2:	4428      	add	r0, r5

	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);

	return length;
}
    2bc4:	4420      	add	r0, r4
    2bc6:	b005      	add	sp, #20
    2bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    2bcc:	4b1e      	ldr	r3, [pc, #120]	; (2c48 <prefix_print+0x110>)
    2bce:	6819      	ldr	r1, [r3, #0]
    2bd0:	2900      	cmp	r1, #0
    2bd2:	d0c7      	beq.n	2b64 <prefix_print+0x2c>
		timestamp /= timestamp_div;
    2bd4:	4b1d      	ldr	r3, [pc, #116]	; (2c4c <prefix_print+0x114>)
    2bd6:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    2bda:	681b      	ldr	r3, [r3, #0]
    2bdc:	fbb2 f3f3 	udiv	r3, r2, r3
		ms = (remainder * 1000U) / freq;
    2be0:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		total_seconds = timestamp / freq;
    2be4:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    2be8:	fbb4 f2fe 	udiv	r2, r4, lr
    2bec:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
    2bf0:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    2bf4:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    2bf8:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    2bfc:	fbb4 fbf1 	udiv	fp, r4, r1
    2c00:	fb01 441b 	mls	r4, r1, fp, r4
    2c04:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    2c08:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    2c0c:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(output,
    2c10:	e9cd b101 	strd	fp, r1, [sp, #4]
    2c14:	fb0a e113 	mls	r1, sl, r3, lr
    2c18:	9100      	str	r1, [sp, #0]
    2c1a:	490d      	ldr	r1, [pc, #52]	; (2c50 <prefix_print+0x118>)
    2c1c:	f7ff ff7a 	bl	2b14 <print_formatted>
    2c20:	e79f      	b.n	2b62 <prefix_print+0x2a>
	total += print_formatted(output,
    2c22:	4f08      	ldr	r7, [pc, #32]	; (2c44 <prefix_print+0x10c>)
    2c24:	e7c2      	b.n	2bac <prefix_print+0x74>
    2c26:	bf00      	nop
    2c28:	00009773 	.word	0x00009773
    2c2c:	00009410 	.word	0x00009410
    2c30:	00009c88 	.word	0x00009c88
    2c34:	00009765 	.word	0x00009765
    2c38:	00009424 	.word	0x00009424
    2c3c:	00009798 	.word	0x00009798
    2c40:	0000976f 	.word	0x0000976f
    2c44:	0000976a 	.word	0x0000976a
    2c48:	20000480 	.word	0x20000480
    2c4c:	20000484 	.word	0x20000484
    2c50:	0000977c 	.word	0x0000977c

00002c54 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
    2c54:	b538      	push	{r3, r4, r5, lr}
    2c56:	460c      	mov	r4, r1
	if (color) {
    2c58:	07e1      	lsls	r1, r4, #31
{
    2c5a:	4605      	mov	r5, r0
	if (color) {
    2c5c:	d503      	bpl.n	2c66 <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
    2c5e:	4a08      	ldr	r2, [pc, #32]	; (2c80 <postfix_print+0x2c>)
    2c60:	4908      	ldr	r1, [pc, #32]	; (2c84 <postfix_print+0x30>)
    2c62:	f7ff ff57 	bl	2b14 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    2c66:	06e2      	lsls	r2, r4, #27
    2c68:	d408      	bmi.n	2c7c <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    2c6a:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    2c6c:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    2c6e:	bf4c      	ite	mi
    2c70:	4905      	ldrmi	r1, [pc, #20]	; (2c88 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    2c72:	4906      	ldrpl	r1, [pc, #24]	; (2c8c <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
    2c74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    2c78:	f7ff bf4c 	b.w	2b14 <print_formatted>
}
    2c7c:	bd38      	pop	{r3, r4, r5, pc}
    2c7e:	bf00      	nop
    2c80:	00009765 	.word	0x00009765
    2c84:	00009c88 	.word	0x00009c88
    2c88:	0000979f 	.word	0x0000979f
    2c8c:	0000979e 	.word	0x0000979e

00002c90 <hexdump_line_print>:
{
    2c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2c94:	461d      	mov	r5, r3
    2c96:	9b08      	ldr	r3, [sp, #32]
    2c98:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    2c9a:	06da      	lsls	r2, r3, #27
{
    2c9c:	4604      	mov	r4, r0
    2c9e:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    2ca0:	d405      	bmi.n	2cae <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    2ca2:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    2ca4:	bf4c      	ite	mi
    2ca6:	492b      	ldrmi	r1, [pc, #172]	; (2d54 <hexdump_line_print+0xc4>)
		print_formatted(ctx, "\r\n");
    2ca8:	492b      	ldrpl	r1, [pc, #172]	; (2d58 <hexdump_line_print+0xc8>)
    2caa:	f7ff ff33 	bl	2b14 <print_formatted>
		print_formatted(output, " ");
    2cae:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 2d60 <hexdump_line_print+0xd0>
{
    2cb2:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    2cb6:	45a8      	cmp	r8, r5
    2cb8:	db2d      	blt.n	2d16 <hexdump_line_print+0x86>
			print_formatted(output, "   ");
    2cba:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 2d64 <hexdump_line_print+0xd4>
			print_formatted(output, "%02x ", data[i]);
    2cbe:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 2d68 <hexdump_line_print+0xd8>
			print_formatted(output, " ");
    2cc2:	f8df a09c 	ldr.w	sl, [pc, #156]	; 2d60 <hexdump_line_print+0xd0>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2cc6:	2500      	movs	r5, #0
		if (i < length) {
    2cc8:	42bd      	cmp	r5, r7
    2cca:	d232      	bcs.n	2d32 <hexdump_line_print+0xa2>
			print_formatted(output, "%02x ", data[i]);
    2ccc:	5d72      	ldrb	r2, [r6, r5]
    2cce:	4649      	mov	r1, r9
    2cd0:	4620      	mov	r0, r4
    2cd2:	f7ff ff1f 	bl	2b14 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2cd6:	3501      	adds	r5, #1
    2cd8:	2d10      	cmp	r5, #16
    2cda:	d123      	bne.n	2d24 <hexdump_line_print+0x94>
	print_formatted(output, "|");
    2cdc:	491f      	ldr	r1, [pc, #124]	; (2d5c <hexdump_line_print+0xcc>)
			print_formatted(output, " ");
    2cde:	f8df 8080 	ldr.w	r8, [pc, #128]	; 2d60 <hexdump_line_print+0xd0>
			      isprint((int)c) ? c : '.');
    2ce2:	f8df 9088 	ldr.w	r9, [pc, #136]	; 2d6c <hexdump_line_print+0xdc>
			print_formatted(output, "%c",
    2ce6:	f8df a088 	ldr.w	sl, [pc, #136]	; 2d70 <hexdump_line_print+0xe0>
	print_formatted(output, "|");
    2cea:	4620      	mov	r0, r4
    2cec:	f7ff ff12 	bl	2b14 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2cf0:	2500      	movs	r5, #0
		if (i < length) {
    2cf2:	42af      	cmp	r7, r5
    2cf4:	d929      	bls.n	2d4a <hexdump_line_print+0xba>
			char c = (char)data[i];
    2cf6:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(output, "%c",
    2cf8:	f812 3009 	ldrb.w	r3, [r2, r9]
    2cfc:	f013 0f97 	tst.w	r3, #151	; 0x97
    2d00:	bf08      	it	eq
    2d02:	222e      	moveq	r2, #46	; 0x2e
    2d04:	4651      	mov	r1, sl
    2d06:	4620      	mov	r0, r4
    2d08:	f7ff ff04 	bl	2b14 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2d0c:	3501      	adds	r5, #1
    2d0e:	2d10      	cmp	r5, #16
    2d10:	d114      	bne.n	2d3c <hexdump_line_print+0xac>
}
    2d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
    2d16:	4649      	mov	r1, r9
    2d18:	4620      	mov	r0, r4
    2d1a:	f7ff fefb 	bl	2b14 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    2d1e:	f108 0801 	add.w	r8, r8, #1
    2d22:	e7c8      	b.n	2cb6 <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    2d24:	076a      	lsls	r2, r5, #29
    2d26:	d1cf      	bne.n	2cc8 <hexdump_line_print+0x38>
			print_formatted(output, " ");
    2d28:	4651      	mov	r1, sl
    2d2a:	4620      	mov	r0, r4
    2d2c:	f7ff fef2 	bl	2b14 <print_formatted>
    2d30:	e7ca      	b.n	2cc8 <hexdump_line_print+0x38>
			print_formatted(output, "   ");
    2d32:	4641      	mov	r1, r8
    2d34:	4620      	mov	r0, r4
    2d36:	f7ff feed 	bl	2b14 <print_formatted>
    2d3a:	e7cc      	b.n	2cd6 <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    2d3c:	076b      	lsls	r3, r5, #29
    2d3e:	d1d8      	bne.n	2cf2 <hexdump_line_print+0x62>
			print_formatted(output, " ");
    2d40:	4641      	mov	r1, r8
    2d42:	4620      	mov	r0, r4
    2d44:	f7ff fee6 	bl	2b14 <print_formatted>
    2d48:	e7d3      	b.n	2cf2 <hexdump_line_print+0x62>
			print_formatted(output, " ");
    2d4a:	4641      	mov	r1, r8
    2d4c:	4620      	mov	r0, r4
    2d4e:	f7ff fee1 	bl	2b14 <print_formatted>
    2d52:	e7db      	b.n	2d0c <hexdump_line_print+0x7c>
    2d54:	0000979f 	.word	0x0000979f
    2d58:	0000979e 	.word	0x0000979e
    2d5c:	000097ab 	.word	0x000097ab
    2d60:	000097a9 	.word	0x000097a9
    2d64:	000097a7 	.word	0x000097a7
    2d68:	000097a1 	.word	0x000097a1
    2d6c:	0000a095 	.word	0x0000a095
    2d70:	000097ad 	.word	0x000097ad

00002d74 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg,
			    uint32_t flags)
{
    2d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
    2d78:	7a8b      	ldrb	r3, [r1, #10]
		log_output_msg_syst_process(output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(output, flags, std_msg, timestamp,
    2d7a:	f013 0807 	ands.w	r8, r3, #7
{
    2d7e:	4617      	mov	r7, r2
    2d80:	b08a      	sub	sp, #40	; 0x28
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    2d82:	7a0a      	ldrb	r2, [r1, #8]
    2d84:	4605      	mov	r5, r0
    2d86:	460e      	mov	r6, r1
			0 : prefix_print(output, flags, std_msg, timestamp,
    2d88:	d020      	beq.n	2dcc <log_output_msg_process+0x58>
	return msg->hdr.ids.source_id;
    2d8a:	8949      	ldrh	r1, [r1, #10]
    2d8c:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    2d90:	0989      	lsrs	r1, r1, #6
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    2d92:	43d2      	mvns	r2, r2
    2d94:	e9cd 8300 	strd	r8, r3, [sp]
    2d98:	9102      	str	r1, [sp, #8]
    2d9a:	68f3      	ldr	r3, [r6, #12]
    2d9c:	f002 0201 	and.w	r2, r2, #1
    2da0:	4639      	mov	r1, r7
    2da2:	f7ff fec9 	bl	2b38 <prefix_print>
    2da6:	4681      	mov	r9, r0
    2da8:	7a34      	ldrb	r4, [r6, #8]
    2daa:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    2dac:	f014 0401 	ands.w	r4, r4, #1
    2db0:	d00e      	beq.n	2dd0 <log_output_msg_process+0x5c>
		std_print(msg, output);
    2db2:	4629      	mov	r1, r5
    2db4:	4630      	mov	r0, r6
    2db6:	f005 fa83 	bl	82c0 <std_print>
		raw_string_print(msg, output);
	} else {
		hexdump_print(msg, output, prefix_offset, flags);
	}

	if (!raw_string) {
    2dba:	f1b8 0f00 	cmp.w	r8, #0
    2dbe:	d02b      	beq.n	2e18 <log_output_msg_process+0xa4>
		postfix_print(output, flags, level);
    2dc0:	4642      	mov	r2, r8
    2dc2:	4639      	mov	r1, r7
    2dc4:	4628      	mov	r0, r5
    2dc6:	f7ff ff45 	bl	2c54 <postfix_print>
    2dca:	e025      	b.n	2e18 <log_output_msg_process+0xa4>
			0 : prefix_print(output, flags, std_msg, timestamp,
    2dcc:	46c1      	mov	r9, r8
    2dce:	e7eb      	b.n	2da8 <log_output_msg_process+0x34>
	} else if (raw_string) {
    2dd0:	f1b8 0f00 	cmp.w	r8, #0
    2dd4:	d126      	bne.n	2e24 <log_output_msg_process+0xb0>
	size_t offset = 0;
    2dd6:	4627      	mov	r7, r4
		length = output->size;
    2dd8:	68eb      	ldr	r3, [r5, #12]
    2dda:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
    2ddc:	aa06      	add	r2, sp, #24
    2dde:	463b      	mov	r3, r7
    2de0:	68a9      	ldr	r1, [r5, #8]
    2de2:	4630      	mov	r0, r6
    2de4:	f005 fa58 	bl	8298 <log_msg_hexdump_data_get>
		output->control_block->offset = length;
    2de8:	9a06      	ldr	r2, [sp, #24]
    2dea:	686b      	ldr	r3, [r5, #4]
    2dec:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    2dee:	b13a      	cbz	r2, 2e00 <log_output_msg_process+0x8c>
			eol = (output->buf[length - 1] == '\n');
    2df0:	68ab      	ldr	r3, [r5, #8]
    2df2:	4413      	add	r3, r2
    2df4:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    2df8:	f1a4 030a 	sub.w	r3, r4, #10
    2dfc:	425c      	negs	r4, r3
    2dfe:	415c      	adcs	r4, r3
		log_output_flush(output);
    2e00:	4628      	mov	r0, r5
    2e02:	f005 fbba 	bl	857a <log_output_flush>
		offset += length;
    2e06:	9b06      	ldr	r3, [sp, #24]
    2e08:	441f      	add	r7, r3
	} while (length > 0);
    2e0a:	2b00      	cmp	r3, #0
    2e0c:	d1e4      	bne.n	2dd8 <log_output_msg_process+0x64>
	if (eol) {
    2e0e:	b11c      	cbz	r4, 2e18 <log_output_msg_process+0xa4>
		print_formatted(output, "\r");
    2e10:	4913      	ldr	r1, [pc, #76]	; (2e60 <log_output_msg_process+0xec>)
    2e12:	4628      	mov	r0, r5
    2e14:	f7ff fe7e 	bl	2b14 <print_formatted>
	}

	log_output_flush(output);
    2e18:	4628      	mov	r0, r5
    2e1a:	f005 fbae 	bl	857a <log_output_flush>
}
    2e1e:	b00a      	add	sp, #40	; 0x28
    2e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(output, "%s", log_msg_str_get(msg));
    2e24:	4630      	mov	r0, r6
    2e26:	f005 f9e3 	bl	81f0 <log_msg_str_get>
    2e2a:	490e      	ldr	r1, [pc, #56]	; (2e64 <log_output_msg_process+0xf0>)
    2e2c:	4602      	mov	r2, r0
    2e2e:	4628      	mov	r0, r5
    2e30:	f7ff fe70 	bl	2b14 <print_formatted>
		length = sizeof(buf);
    2e34:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    2e38:	aa05      	add	r2, sp, #20
    2e3a:	4623      	mov	r3, r4
    2e3c:	a906      	add	r1, sp, #24
    2e3e:	4630      	mov	r0, r6
		length = sizeof(buf);
    2e40:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    2e44:	f005 fa28 	bl	8298 <log_msg_hexdump_data_get>
		if (length) {
    2e48:	9a05      	ldr	r2, [sp, #20]
    2e4a:	2a00      	cmp	r2, #0
    2e4c:	d0b8      	beq.n	2dc0 <log_output_msg_process+0x4c>
			hexdump_line_print(output, buf, length,
    2e4e:	464b      	mov	r3, r9
    2e50:	9700      	str	r7, [sp, #0]
    2e52:	a906      	add	r1, sp, #24
    2e54:	4628      	mov	r0, r5
    2e56:	f7ff ff1b 	bl	2c90 <hexdump_line_print>
			offset += length;
    2e5a:	9b05      	ldr	r3, [sp, #20]
    2e5c:	441c      	add	r4, r3
		length = sizeof(buf);
    2e5e:	e7eb      	b.n	2e38 <log_output_msg_process+0xc4>
    2e60:	000097b0 	.word	0x000097b0
    2e64:	00009c88 	.word	0x00009c88

00002e68 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    2e68:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    2e6a:	f242 730f 	movw	r3, #9999	; 0x270f
    2e6e:	428b      	cmp	r3, r1
    2e70:	bf28      	it	cs
    2e72:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    2e74:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    2e76:	4a0f      	ldr	r2, [pc, #60]	; (2eb4 <log_output_dropped_process+0x4c>)
{
    2e78:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    2e7a:	2105      	movs	r1, #5
    2e7c:	4668      	mov	r0, sp
    2e7e:	f004 ffb5 	bl	7dec <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    2e82:	6863      	ldr	r3, [r4, #4]
    2e84:	490c      	ldr	r1, [pc, #48]	; (2eb8 <log_output_dropped_process+0x50>)
    2e86:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    2e88:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    2e8a:	220b      	movs	r2, #11
    2e8c:	4628      	mov	r0, r5
    2e8e:	f005 fa0a 	bl	82a6 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    2e92:	6863      	ldr	r3, [r4, #4]
    2e94:	4632      	mov	r2, r6
    2e96:	4669      	mov	r1, sp
    2e98:	4628      	mov	r0, r5
    2e9a:	685b      	ldr	r3, [r3, #4]
    2e9c:	f005 fa03 	bl	82a6 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    2ea0:	6863      	ldr	r3, [r4, #4]
    2ea2:	4906      	ldr	r1, [pc, #24]	; (2ebc <log_output_dropped_process+0x54>)
    2ea4:	685b      	ldr	r3, [r3, #4]
    2ea6:	221b      	movs	r2, #27
    2ea8:	4628      	mov	r0, r5
    2eaa:	f005 f9fc 	bl	82a6 <buffer_write>
		     output->control_block->ctx);
}
    2eae:	b002      	add	sp, #8
    2eb0:	bd70      	pop	{r4, r5, r6, pc}
    2eb2:	bf00      	nop
    2eb4:	00009de3 	.word	0x00009de3
    2eb8:	000097ee 	.word	0x000097ee
    2ebc:	000097d2 	.word	0x000097d2

00002ec0 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    2ec0:	4a08      	ldr	r2, [pc, #32]	; (2ee4 <log_output_timestamp_freq_set+0x24>)
{
    2ec2:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    2ec4:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    2ec6:	4c08      	ldr	r4, [pc, #32]	; (2ee8 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    2ec8:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    2eca:	2100      	movs	r1, #0
    2ecc:	42a0      	cmp	r0, r4
    2ece:	d804      	bhi.n	2eda <log_output_timestamp_freq_set+0x1a>
    2ed0:	b101      	cbz	r1, 2ed4 <log_output_timestamp_freq_set+0x14>
    2ed2:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    2ed4:	4b05      	ldr	r3, [pc, #20]	; (2eec <log_output_timestamp_freq_set+0x2c>)
    2ed6:	6018      	str	r0, [r3, #0]
}
    2ed8:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    2eda:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    2edc:	005b      	lsls	r3, r3, #1
    2ede:	2101      	movs	r1, #1
    2ee0:	e7f4      	b.n	2ecc <log_output_timestamp_freq_set+0xc>
    2ee2:	bf00      	nop
    2ee4:	20000484 	.word	0x20000484
    2ee8:	000f4240 	.word	0x000f4240
    2eec:	20000480 	.word	0x20000480

00002ef0 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    2ef0:	4b01      	ldr	r3, [pc, #4]	; (2ef8 <log_backend_rtt_init+0x8>)
    2ef2:	2201      	movs	r2, #1
    2ef4:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    2ef6:	4770      	bx	lr
    2ef8:	2000099a 	.word	0x2000099a

00002efc <panic>:

static void panic(struct log_backend const *const backend)
{
	panic_mode = true;
    2efc:	4b02      	ldr	r3, [pc, #8]	; (2f08 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    2efe:	4803      	ldr	r0, [pc, #12]	; (2f0c <panic+0x10>)
    2f00:	2201      	movs	r2, #1
    2f02:	701a      	strb	r2, [r3, #0]
    2f04:	f005 bb39 	b.w	857a <log_output_flush>
    2f08:	2000099b 	.word	0x2000099b
    2f0c:	00009450 	.word	0x00009450

00002f10 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    2f10:	4801      	ldr	r0, [pc, #4]	; (2f18 <dropped+0x8>)
    2f12:	f7ff bfa9 	b.w	2e68 <log_output_dropped_process>
    2f16:	bf00      	nop
    2f18:	00009450 	.word	0x00009450

00002f1c <put>:
{
    2f1c:	b510      	push	{r4, lr}
	log_msg_get(msg);
    2f1e:	4608      	mov	r0, r1
    2f20:	460c      	mov	r4, r1
    2f22:	f005 f923 	bl	816c <log_msg_get>
	log_output_msg_process(output, msg, flags);
    2f26:	4805      	ldr	r0, [pc, #20]	; (2f3c <put+0x20>)
    2f28:	4621      	mov	r1, r4
    2f2a:	220f      	movs	r2, #15
    2f2c:	f7ff ff22 	bl	2d74 <log_output_msg_process>
	log_msg_put(msg);
    2f30:	4620      	mov	r0, r4
}
    2f32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2f36:	f005 b948 	b.w	81ca <log_msg_put>
    2f3a:	bf00      	nop
    2f3c:	00009450 	.word	0x00009450

00002f40 <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    2f40:	4b05      	ldr	r3, [pc, #20]	; (2f58 <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
    2f42:	781b      	ldrb	r3, [r3, #0]
    2f44:	b11b      	cbz	r3, 2f4e <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
    2f46:	f241 3088 	movw	r0, #5000	; 0x1388
    2f4a:	f006 b819 	b.w	8f80 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    2f4e:	20a4      	movs	r0, #164	; 0xa4
    2f50:	2100      	movs	r1, #0
    2f52:	f004 b955 	b.w	7200 <z_impl_k_sleep>
    2f56:	bf00      	nop
    2f58:	2000099b 	.word	0x2000099b

00002f5c <data_out_block_mode>:
{
    2f5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    2f60:	f8df 9090 	ldr.w	r9, [pc, #144]	; 2ff4 <data_out_block_mode+0x98>
	return z_impl_k_mutex_lock(mutex, timeout);
    2f64:	f8df b090 	ldr.w	fp, [pc, #144]	; 2ff8 <data_out_block_mode+0x9c>
{
    2f68:	4607      	mov	r7, r0
    2f6a:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    2f6c:	2404      	movs	r4, #4
    2f6e:	46ca      	mov	sl, r9
		if (!is_sync_mode()) {
    2f70:	f899 3000 	ldrb.w	r3, [r9]
    2f74:	b933      	cbnz	r3, 2f84 <data_out_block_mode+0x28>
    2f76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2f7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2f7e:	4658      	mov	r0, fp
    2f80:	f003 fd9a 	bl	6ab8 <z_impl_k_mutex_lock>
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    2f84:	4632      	mov	r2, r6
    2f86:	4639      	mov	r1, r7
    2f88:	2000      	movs	r0, #0
    2f8a:	f000 fba7 	bl	36dc <SEGGER_RTT_WriteSkipNoLock>
		if (!is_sync_mode()) {
    2f8e:	f89a 3000 	ldrb.w	r3, [sl]
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    2f92:	4680      	mov	r8, r0
		if (!is_sync_mode()) {
    2f94:	b913      	cbnz	r3, 2f9c <data_out_block_mode+0x40>
	return z_impl_k_mutex_unlock(mutex);
    2f96:	4658      	mov	r0, fp
    2f98:	f003 fe06 	bl	6ba8 <z_impl_k_mutex_unlock>
		if (ret) {
    2f9c:	4d14      	ldr	r5, [pc, #80]	; (2ff0 <data_out_block_mode+0x94>)
    2f9e:	f1b8 0f00 	cmp.w	r8, #0
    2fa2:	d018      	beq.n	2fd6 <data_out_block_mode+0x7a>
	host_present = true;
    2fa4:	2301      	movs	r3, #1
    2fa6:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
    2fa8:	f89a 3000 	ldrb.w	r3, [sl]
    2fac:	b933      	cbnz	r3, 2fbc <data_out_block_mode+0x60>
}
    2fae:	4630      	mov	r0, r6
    2fb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (retry_cnt == 0) {
    2fb4:	b95c      	cbnz	r4, 2fce <data_out_block_mode+0x72>
		host_present = false;
    2fb6:	702c      	strb	r4, [r5, #0]
    2fb8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    2fbc:	2000      	movs	r0, #0
    2fbe:	f000 fc0d 	bl	37dc <SEGGER_RTT_HasDataUp>
    2fc2:	2800      	cmp	r0, #0
    2fc4:	d0f3      	beq.n	2fae <data_out_block_mode+0x52>
    2fc6:	782b      	ldrb	r3, [r5, #0]
    2fc8:	2b00      	cmp	r3, #0
    2fca:	d1f3      	bne.n	2fb4 <data_out_block_mode+0x58>
    2fcc:	e7ef      	b.n	2fae <data_out_block_mode+0x52>
			on_failed_write(retry_cnt--);
    2fce:	3c01      	subs	r4, #1
    2fd0:	f7ff ffb6 	bl	2f40 <on_failed_write.part.0>
    2fd4:	e7f2      	b.n	2fbc <data_out_block_mode+0x60>
		} else if (host_present) {
    2fd6:	782b      	ldrb	r3, [r5, #0]
    2fd8:	b113      	cbz	r3, 2fe0 <data_out_block_mode+0x84>
	if (retry_cnt == 0) {
    2fda:	3c01      	subs	r4, #1
    2fdc:	d104      	bne.n	2fe8 <data_out_block_mode+0x8c>
		host_present = false;
    2fde:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    2fe0:	782b      	ldrb	r3, [r5, #0]
    2fe2:	2b00      	cmp	r3, #0
    2fe4:	d1c4      	bne.n	2f70 <data_out_block_mode+0x14>
    2fe6:	e7e2      	b.n	2fae <data_out_block_mode+0x52>
    2fe8:	f7ff ffaa 	bl	2f40 <on_failed_write.part.0>
    2fec:	e7f8      	b.n	2fe0 <data_out_block_mode+0x84>
    2fee:	bf00      	nop
    2ff0:	2000099a 	.word	0x2000099a
    2ff4:	2000099b 	.word	0x2000099b
    2ff8:	200001a8 	.word	0x200001a8

00002ffc <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    2ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2ffe:	4605      	mov	r5, r0
	__asm__ volatile(
    3000:	f04f 0320 	mov.w	r3, #32
    3004:	f3ef 8611 	mrs	r6, BASEPRI
    3008:	f383 8811 	msr	BASEPRI, r3
    300c:	f3bf 8f6f 	isb	sy
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3010:	4b0b      	ldr	r3, [pc, #44]	; (3040 <pm_state_notify+0x44>)
    3012:	681c      	ldr	r4, [r3, #0]
    3014:	2c00      	cmp	r4, #0
    3016:	bf38      	it	cc
    3018:	2400      	movcc	r4, #0
    301a:	b15c      	cbz	r4, 3034 <pm_state_notify+0x38>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
    301c:	4f09      	ldr	r7, [pc, #36]	; (3044 <pm_state_notify+0x48>)
			callback = notifier->state_exit;
    301e:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    3022:	2d00      	cmp	r5, #0
    3024:	bf08      	it	eq
    3026:	4613      	moveq	r3, r2
		if (callback) {
    3028:	b10b      	cbz	r3, 302e <pm_state_notify+0x32>
			callback(z_power_state.state);
    302a:	7838      	ldrb	r0, [r7, #0]
    302c:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    302e:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3030:	2c00      	cmp	r4, #0
    3032:	d1f4      	bne.n	301e <pm_state_notify+0x22>
	__asm__ volatile(
    3034:	f386 8811 	msr	BASEPRI, r6
    3038:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    303c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    303e:	bf00      	nop
    3040:	2000049c 	.word	0x2000049c
    3044:	200004a4 	.word	0x200004a4

00003048 <pm_system_resume>:
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
    3048:	4b08      	ldr	r3, [pc, #32]	; (306c <pm_system_resume+0x24>)
{
    304a:	b510      	push	{r4, lr}
	if (!post_ops_done) {
    304c:	681c      	ldr	r4, [r3, #0]
    304e:	b95c      	cbnz	r4, 3068 <pm_system_resume+0x20>
		post_ops_done = 1;
    3050:	2201      	movs	r2, #1
    3052:	601a      	str	r2, [r3, #0]
		pm_power_state_exit_post_ops(z_power_state);
    3054:	4b06      	ldr	r3, [pc, #24]	; (3070 <pm_system_resume+0x28>)
    3056:	e893 0003 	ldmia.w	r3, {r0, r1}
    305a:	f005 fbd0 	bl	87fe <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    305e:	4620      	mov	r0, r4
	}
}
    3060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		pm_state_notify(false);
    3064:	f7ff bfca 	b.w	2ffc <pm_state_notify>
}
    3068:	bd10      	pop	{r4, pc}
    306a:	bf00      	nop
    306c:	20000008 	.word	0x20000008
    3070:	200004a4 	.word	0x200004a4

00003074 <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
    3074:	b537      	push	{r0, r1, r2, r4, r5, lr}
	z_power_state = pm_policy_next_state(ticks);
    3076:	466d      	mov	r5, sp
{
    3078:	4601      	mov	r1, r0
	z_power_state = pm_policy_next_state(ticks);
    307a:	4628      	mov	r0, r5
    307c:	f005 faa5 	bl	85ca <pm_policy_next_state>
    3080:	e895 0003 	ldmia.w	r5, {r0, r1}
    3084:	4c0b      	ldr	r4, [pc, #44]	; (30b4 <pm_system_suspend+0x40>)
    3086:	e884 0003 	stmia.w	r4, {r0, r1}
	if (z_power_state.state == PM_STATE_ACTIVE) {
    308a:	7820      	ldrb	r0, [r4, #0]
    308c:	b180      	cbz	r0, 30b0 <pm_system_suspend+0x3c>
		LOG_DBG("No PM operations done.");
		return z_power_state.state;
	}
	post_ops_done = 0;
    308e:	4b0a      	ldr	r3, [pc, #40]	; (30b8 <pm_system_suspend+0x44>)
    3090:	2200      	movs	r2, #0
    3092:	601a      	str	r2, [r3, #0]
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    3094:	f003 fe28 	bl	6ce8 <k_sched_lock>
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
    3098:	2001      	movs	r0, #1
    309a:	f7ff ffaf 	bl	2ffc <pm_state_notify>
	pm_power_state_set(z_power_state);
    309e:	e894 0003 	ldmia.w	r4, {r0, r1}
    30a2:	f005 fb99 	bl	87d8 <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
    30a6:	f7ff ffcf 	bl	3048 <pm_system_resume>
	k_sched_unlock();
    30aa:	f003 ff0d 	bl	6ec8 <k_sched_unlock>

	return z_power_state.state;
    30ae:	7820      	ldrb	r0, [r4, #0]
}
    30b0:	b003      	add	sp, #12
    30b2:	bd30      	pop	{r4, r5, pc}
    30b4:	200004a4 	.word	0x200004a4
    30b8:	20000008 	.word	0x20000008

000030bc <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
    30bc:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
    30be:	4c04      	ldr	r4, [pc, #16]	; (30d0 <rtt_console_init+0x14>)
    30c0:	4620      	mov	r0, r4
    30c2:	f7fe fcf3 	bl	1aac <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
    30c6:	4620      	mov	r0, r4
    30c8:	f000 fff4 	bl	40b4 <__stdout_hook_install>

	return 0;
}
    30cc:	2000      	movs	r0, #0
    30ce:	bd10      	pop	{r4, pc}
    30d0:	000030d5 	.word	0x000030d5

000030d4 <rtt_console_out>:
{
    30d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
    30d8:	f8df 8060 	ldr.w	r8, [pc, #96]	; 313c <rtt_console_out+0x68>
    30dc:	4e16      	ldr	r6, [pc, #88]	; (3138 <rtt_console_out+0x64>)
	char c = (char)character;
    30de:	f88d 0007 	strb.w	r0, [sp, #7]
{
    30e2:	4604      	mov	r4, r0
	char c = (char)character;
    30e4:	2503      	movs	r5, #3
    30e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    30ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    30ee:	4640      	mov	r0, r8
    30f0:	f003 fce2 	bl	6ab8 <z_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    30f4:	2201      	movs	r2, #1
    30f6:	f10d 0107 	add.w	r1, sp, #7
    30fa:	2000      	movs	r0, #0
    30fc:	f000 fb3a 	bl	3774 <SEGGER_RTT_WriteNoLock>
    3100:	4607      	mov	r7, r0
	return z_impl_k_mutex_unlock(mutex);
    3102:	4640      	mov	r0, r8
    3104:	f003 fd50 	bl	6ba8 <z_impl_k_mutex_unlock>
		if (cnt) {
    3108:	b12f      	cbz	r7, 3116 <rtt_console_out+0x42>
			host_present = true;
    310a:	2301      	movs	r3, #1
    310c:	7033      	strb	r3, [r6, #0]
}
    310e:	4620      	mov	r0, r4
    3110:	b002      	add	sp, #8
    3112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (host_present) {
    3116:	7833      	ldrb	r3, [r6, #0]
    3118:	2b00      	cmp	r3, #0
    311a:	d0f8      	beq.n	310e <rtt_console_out+0x3a>
			if (max_cnt) {
    311c:	3d01      	subs	r5, #1
    311e:	d008      	beq.n	3132 <rtt_console_out+0x5e>
	if (k_is_in_isr()) {
    3120:	f005 ff28 	bl	8f74 <k_is_in_isr>
    3124:	2800      	cmp	r0, #0
    3126:	d1de      	bne.n	30e6 <rtt_console_out+0x12>
	return z_impl_k_sleep(timeout);
    3128:	2100      	movs	r1, #0
    312a:	2042      	movs	r0, #66	; 0x42
    312c:	f004 f868 	bl	7200 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
    3130:	e7d9      	b.n	30e6 <rtt_console_out+0x12>
				host_present = false;
    3132:	7035      	strb	r5, [r6, #0]
    3134:	e7eb      	b.n	310e <rtt_console_out+0x3a>
    3136:	bf00      	nop
    3138:	2000099c 	.word	0x2000099c
    313c:	200001a8 	.word	0x200001a8

00003140 <onoff_stop>:
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    3140:	b570      	push	{r4, r5, r6, lr}
    3142:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
    3144:	480d      	ldr	r0, [pc, #52]	; (317c <onoff_stop+0x3c>)
    3146:	1a23      	subs	r3, r4, r0
    3148:	109a      	asrs	r2, r3, #2
    314a:	4b0d      	ldr	r3, [pc, #52]	; (3180 <onoff_stop+0x40>)
    314c:	4353      	muls	r3, r2
    314e:	b2db      	uxtb	r3, r3
	err = set_off_state(&subdata->flags, ctx);
    3150:	250c      	movs	r5, #12
    3152:	435d      	muls	r5, r3
    3154:	f105 0340 	add.w	r3, r5, #64	; 0x40
{
    3158:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
    315a:	4418      	add	r0, r3
    315c:	2140      	movs	r1, #64	; 0x40
    315e:	f005 fa41 	bl	85e4 <set_off_state>
	if (err < 0) {
    3162:	1e01      	subs	r1, r0, #0
    3164:	db04      	blt.n	3170 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
    3166:	4b07      	ldr	r3, [pc, #28]	; (3184 <onoff_stop+0x44>)
    3168:	442b      	add	r3, r5
    316a:	685b      	ldr	r3, [r3, #4]
    316c:	4798      	blx	r3
	return 0;
    316e:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
    3170:	4620      	mov	r0, r4
    3172:	4633      	mov	r3, r6
}
    3174:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    3178:	4718      	bx	r3
    317a:	bf00      	nop
    317c:	200004c0 	.word	0x200004c0
    3180:	b6db6db7 	.word	0xb6db6db7
    3184:	00009474 	.word	0x00009474

00003188 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    3188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    318c:	4c0f      	ldr	r4, [pc, #60]	; (31cc <onoff_start+0x44>)
    318e:	4d10      	ldr	r5, [pc, #64]	; (31d0 <onoff_start+0x48>)
    3190:	1b03      	subs	r3, r0, r4
    3192:	109b      	asrs	r3, r3, #2
    3194:	435d      	muls	r5, r3
    3196:	b2eb      	uxtb	r3, r5
	err = set_starting_state(&subdata->flags, ctx);
    3198:	250c      	movs	r5, #12
    319a:	435d      	muls	r5, r3
{
    319c:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
    319e:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
    31a2:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
    31a4:	4420      	add	r0, r4
    31a6:	2140      	movs	r1, #64	; 0x40
    31a8:	f005 fa35 	bl	8616 <set_starting_state>
	if (err < 0) {
    31ac:	1e01      	subs	r1, r0, #0
    31ae:	db08      	blt.n	31c2 <onoff_start+0x3a>
	subdata->cb = cb;
    31b0:	4b08      	ldr	r3, [pc, #32]	; (31d4 <onoff_start+0x4c>)
    31b2:	442c      	add	r4, r5
	subdata->user_data = user_data;
    31b4:	e9c4 360e 	strd	r3, r6, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    31b8:	4b07      	ldr	r3, [pc, #28]	; (31d8 <onoff_start+0x50>)
    31ba:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    31bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    31c0:	4718      	bx	r3
		notify(mgr, err);
    31c2:	4638      	mov	r0, r7
    31c4:	4633      	mov	r3, r6
}
    31c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    31ca:	4718      	bx	r3
    31cc:	200004c0 	.word	0x200004c0
    31d0:	b6db6db7 	.word	0xb6db6db7
    31d4:	00008679 	.word	0x00008679
    31d8:	00009474 	.word	0x00009474

000031dc <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    31dc:	2200      	movs	r2, #0
{
    31de:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    31e0:	2101      	movs	r1, #1
{
    31e2:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    31e4:	4610      	mov	r0, r2
    31e6:	f000 fb6f 	bl	38c8 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    31ea:	2000      	movs	r0, #0
    31ec:	f000 fb4e 	bl	388c <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    31f0:	480f      	ldr	r0, [pc, #60]	; (3230 <clk_init+0x54>)
    31f2:	f002 fffd 	bl	61f0 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    31f6:	4b0f      	ldr	r3, [pc, #60]	; (3234 <clk_init+0x58>)
    31f8:	4298      	cmp	r0, r3
    31fa:	d115      	bne.n	3228 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    31fc:	f005 fd37 	bl	8c6e <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    3200:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    3202:	490d      	ldr	r1, [pc, #52]	; (3238 <clk_init+0x5c>)
    3204:	4630      	mov	r0, r6
    3206:	f004 fe4d 	bl	7ea4 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    320a:	2800      	cmp	r0, #0
    320c:	db0b      	blt.n	3226 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    320e:	2501      	movs	r5, #1
    3210:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
    3212:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    3214:	4908      	ldr	r1, [pc, #32]	; (3238 <clk_init+0x5c>)
    3216:	f104 001c 	add.w	r0, r4, #28
    321a:	f004 fe43 	bl	7ea4 <onoff_manager_init>
		if (err < 0) {
    321e:	2800      	cmp	r0, #0
    3220:	db01      	blt.n	3226 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    3222:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    3224:	2000      	movs	r0, #0
}
    3226:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    3228:	f06f 0004 	mvn.w	r0, #4
    322c:	e7fb      	b.n	3226 <clk_init+0x4a>
    322e:	bf00      	nop
    3230:	00003271 	.word	0x00003271
    3234:	0bad0000 	.word	0x0bad0000
    3238:	0000948c 	.word	0x0000948c

0000323c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    323c:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    323e:	230c      	movs	r3, #12
    3240:	4809      	ldr	r0, [pc, #36]	; (3268 <clkstarted_handle.constprop.0+0x2c>)
    3242:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    3244:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    3246:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    3248:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    324c:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    324e:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    3250:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    3252:	4418      	add	r0, r3
    3254:	f005 f9fd 	bl	8652 <set_on_state>
	if (callback) {
    3258:	b12d      	cbz	r5, 3266 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    325a:	4632      	mov	r2, r6
    325c:	462b      	mov	r3, r5
    325e:	4803      	ldr	r0, [pc, #12]	; (326c <clkstarted_handle.constprop.0+0x30>)
}
    3260:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    3264:	4718      	bx	r3
}
    3266:	bd70      	pop	{r4, r5, r6, pc}
    3268:	200004c0 	.word	0x200004c0
    326c:	200000c4 	.word	0x200000c4

00003270 <clock_event_handler>:
	switch (event) {
    3270:	b110      	cbz	r0, 3278 <clock_event_handler+0x8>
    3272:	2801      	cmp	r0, #1
    3274:	d004      	beq.n	3280 <clock_event_handler+0x10>
    3276:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    3278:	4b03      	ldr	r3, [pc, #12]	; (3288 <clock_event_handler+0x18>)
    327a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    327c:	075b      	lsls	r3, r3, #29
    327e:	d101      	bne.n	3284 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    3280:	f7ff bfdc 	b.w	323c <clkstarted_handle.constprop.0>
}
    3284:	4770      	bx	lr
    3286:	bf00      	nop
    3288:	200004c0 	.word	0x200004c0

0000328c <generic_hfclk_start>:
{
    328c:	b508      	push	{r3, lr}
	__asm__ volatile(
    328e:	f04f 0320 	mov.w	r3, #32
    3292:	f3ef 8111 	mrs	r1, BASEPRI
    3296:	f383 8811 	msr	BASEPRI, r3
    329a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    329e:	4a12      	ldr	r2, [pc, #72]	; (32e8 <generic_hfclk_start+0x5c>)
    32a0:	6813      	ldr	r3, [r2, #0]
    32a2:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    32a6:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    32aa:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    32ac:	d00c      	beq.n	32c8 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    32ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    32b2:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    32b6:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    32ba:	f013 0301 	ands.w	r3, r3, #1
    32be:	d003      	beq.n	32c8 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    32c0:	480a      	ldr	r0, [pc, #40]	; (32ec <generic_hfclk_start+0x60>)
    32c2:	f005 f9c6 	bl	8652 <set_on_state>
			already_started = true;
    32c6:	2301      	movs	r3, #1
	__asm__ volatile(
    32c8:	f381 8811 	msr	BASEPRI, r1
    32cc:	f3bf 8f6f 	isb	sy
	if (already_started) {
    32d0:	b123      	cbz	r3, 32dc <generic_hfclk_start+0x50>
}
    32d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    32d6:	2000      	movs	r0, #0
    32d8:	f7ff bfb0 	b.w	323c <clkstarted_handle.constprop.0>
}
    32dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    32e0:	2001      	movs	r0, #1
    32e2:	f002 bf95 	b.w	6210 <nrfx_clock_start>
    32e6:	bf00      	nop
    32e8:	20000510 	.word	0x20000510
    32ec:	20000500 	.word	0x20000500

000032f0 <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    32f0:	4b09      	ldr	r3, [pc, #36]	; (3318 <generic_hfclk_stop+0x28>)
    32f2:	f3bf 8f5b 	dmb	ish
    32f6:	e853 2f00 	ldrex	r2, [r3]
    32fa:	f022 0102 	bic.w	r1, r2, #2
    32fe:	e843 1000 	strex	r0, r1, [r3]
    3302:	2800      	cmp	r0, #0
    3304:	d1f7      	bne.n	32f6 <generic_hfclk_stop+0x6>
    3306:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    330a:	07d3      	lsls	r3, r2, #31
    330c:	d402      	bmi.n	3314 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    330e:	2001      	movs	r0, #1
    3310:	f002 bfb0 	b.w	6274 <nrfx_clock_stop>
}
    3314:	4770      	bx	lr
    3316:	bf00      	nop
    3318:	20000510 	.word	0x20000510

0000331c <api_blocking_start>:
{
    331c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    331e:	2200      	movs	r2, #0
    3320:	2301      	movs	r3, #1
    3322:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3326:	4a09      	ldr	r2, [pc, #36]	; (334c <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3328:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    332c:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    332e:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3332:	f005 f9c7 	bl	86c4 <api_start>
	if (err < 0) {
    3336:	2800      	cmp	r0, #0
    3338:	db05      	blt.n	3346 <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    333a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    333e:	2300      	movs	r3, #0
    3340:	4668      	mov	r0, sp
    3342:	f004 f819 	bl	7378 <z_impl_k_sem_take>
}
    3346:	b005      	add	sp, #20
    3348:	f85d fb04 	ldr.w	pc, [sp], #4
    334c:	00008697 	.word	0x00008697

00003350 <z_nrf_clock_control_lf_on>:
{
    3350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3354:	493a      	ldr	r1, [pc, #232]	; (3440 <z_nrf_clock_control_lf_on+0xf0>)
    3356:	f3bf 8f5b 	dmb	ish
    335a:	4606      	mov	r6, r0
    335c:	2201      	movs	r2, #1
    335e:	e851 3f00 	ldrex	r3, [r1]
    3362:	e841 2000 	strex	r0, r2, [r1]
    3366:	2800      	cmp	r0, #0
    3368:	d1f9      	bne.n	335e <z_nrf_clock_control_lf_on+0xe>
    336a:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    336e:	b933      	cbnz	r3, 337e <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    3370:	4934      	ldr	r1, [pc, #208]	; (3444 <z_nrf_clock_control_lf_on+0xf4>)
		err = onoff_request(mgr, &cli);
    3372:	4835      	ldr	r0, [pc, #212]	; (3448 <z_nrf_clock_control_lf_on+0xf8>)
    3374:	604b      	str	r3, [r1, #4]
    3376:	60cb      	str	r3, [r1, #12]
    3378:	608a      	str	r2, [r1, #8]
    337a:	f004 fda6 	bl	7eca <onoff_request>
	switch (start_mode) {
    337e:	1e73      	subs	r3, r6, #1
    3380:	2b01      	cmp	r3, #1
    3382:	d832      	bhi.n	33ea <z_nrf_clock_control_lf_on+0x9a>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    3384:	2e01      	cmp	r6, #1
    3386:	d107      	bne.n	3398 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    3388:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    338c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    3390:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    3394:	2b01      	cmp	r3, #1
    3396:	d028      	beq.n	33ea <z_nrf_clock_control_lf_on+0x9a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3398:	f005 fdec 	bl	8f74 <k_is_in_isr>
    339c:	4604      	mov	r4, r0
    339e:	b918      	cbnz	r0, 33a8 <z_nrf_clock_control_lf_on+0x58>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    33a0:	4b2a      	ldr	r3, [pc, #168]	; (344c <z_nrf_clock_control_lf_on+0xfc>)
	int key = isr_mode ? irq_lock() : 0;
    33a2:	781b      	ldrb	r3, [r3, #0]
    33a4:	2b00      	cmp	r3, #0
    33a6:	d144      	bne.n	3432 <z_nrf_clock_control_lf_on+0xe2>
	__asm__ volatile(
    33a8:	f04f 0320 	mov.w	r3, #32
    33ac:	f3ef 8511 	mrs	r5, BASEPRI
    33b0:	f383 8811 	msr	BASEPRI, r3
    33b4:	f3bf 8f6f 	isb	sy
    33b8:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    33ba:	4f25      	ldr	r7, [pc, #148]	; (3450 <z_nrf_clock_control_lf_on+0x100>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    33bc:	f8df 8094 	ldr.w	r8, [pc, #148]	; 3454 <z_nrf_clock_control_lf_on+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    33c0:	f8df 9094 	ldr.w	r9, [pc, #148]	; 3458 <z_nrf_clock_control_lf_on+0x108>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    33c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    33c8:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    33cc:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    33d0:	03d2      	lsls	r2, r2, #15
    33d2:	d50c      	bpl.n	33ee <z_nrf_clock_control_lf_on+0x9e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    33d4:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    33d8:	2b01      	cmp	r3, #1
    33da:	d001      	beq.n	33e0 <z_nrf_clock_control_lf_on+0x90>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    33dc:	2e01      	cmp	r6, #1
    33de:	d106      	bne.n	33ee <z_nrf_clock_control_lf_on+0x9e>
	if (isr_mode) {
    33e0:	b30c      	cbz	r4, 3426 <z_nrf_clock_control_lf_on+0xd6>
	__asm__ volatile(
    33e2:	f385 8811 	msr	BASEPRI, r5
    33e6:	f3bf 8f6f 	isb	sy
}
    33ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
    33ee:	b1ac      	cbz	r4, 341c <z_nrf_clock_control_lf_on+0xcc>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    33f0:	4628      	mov	r0, r5
    33f2:	f000 fac9 	bl	3988 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    33f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    33fa:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    33fe:	2b00      	cmp	r3, #0
    3400:	d1e0      	bne.n	33c4 <z_nrf_clock_control_lf_on+0x74>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3402:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    3404:	2900      	cmp	r1, #0
    3406:	d0dd      	beq.n	33c4 <z_nrf_clock_control_lf_on+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3408:	603b      	str	r3, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    340a:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    340c:	2301      	movs	r3, #1
    340e:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    3412:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3416:	f8c9 3000 	str.w	r3, [r9]
}
    341a:	e7d3      	b.n	33c4 <z_nrf_clock_control_lf_on+0x74>
	return z_impl_k_sleep(timeout);
    341c:	2100      	movs	r1, #0
    341e:	2021      	movs	r0, #33	; 0x21
    3420:	f003 feee 	bl	7200 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    3424:	e7e7      	b.n	33f6 <z_nrf_clock_control_lf_on+0xa6>
    p_reg->INTENSET = mask;
    3426:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    342a:	2202      	movs	r2, #2
    342c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    3430:	e7db      	b.n	33ea <z_nrf_clock_control_lf_on+0x9a>
    p_reg->INTENCLR = mask;
    3432:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3436:	2202      	movs	r2, #2
    3438:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    343c:	4605      	mov	r5, r0
}
    343e:	e7bc      	b.n	33ba <z_nrf_clock_control_lf_on+0x6a>
    3440:	20000514 	.word	0x20000514
    3444:	200004b0 	.word	0x200004b0
    3448:	200004dc 	.word	0x200004dc
    344c:	20000eaf 	.word	0x20000eaf
    3450:	40000104 	.word	0x40000104
    3454:	e000e100 	.word	0xe000e100
    3458:	40000008 	.word	0x40000008

0000345c <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(int32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    345c:	4a04      	ldr	r2, [pc, #16]	; (3470 <sys_clock_timeout_handler+0x14>)
    345e:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    3460:	1ac8      	subs	r0, r1, r3
    3462:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    3466:	4403      	add	r3, r0
    3468:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    346a:	f004 badb 	b.w	7a24 <sys_clock_announce>
    346e:	bf00      	nop
    3470:	20000528 	.word	0x20000528

00003474 <set_absolute_alarm>:
{
    3474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3478:	0086      	lsls	r6, r0, #2
    347a:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    347e:	f100 0450 	add.w	r4, r0, #80	; 0x50
    3482:	f506 3688 	add.w	r6, r6, #69632	; 0x11000
    3486:	00a4      	lsls	r4, r4, #2
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    3488:	f8df 807c 	ldr.w	r8, [pc, #124]	; 3508 <set_absolute_alarm+0x94>
    return p_reg->CC[ch];
    348c:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3490:	b2a4      	uxth	r4, r4
    3492:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3496:	f44f 3780 	mov.w	r7, #65536	; 0x10000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    349a:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    349e:	f504 3488 	add.w	r4, r4, #69632	; 0x11000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    34a2:	4087      	lsls	r7, r0
    34a4:	46c1      	mov	r9, r8
     return p_reg->COUNTER;
    34a6:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    34aa:	eba3 030a 	sub.w	r3, r3, sl
    34ae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    34b2:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    34b6:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    34b8:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    34bc:	d102      	bne.n	34c4 <set_absolute_alarm+0x50>
	z_impl_k_busy_wait(usec_to_wait);
    34be:	2013      	movs	r0, #19
    34c0:	f005 fd5e 	bl	8f80 <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    34c4:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
    34c8:	1aab      	subs	r3, r5, r2
    34ca:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    34ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    34d2:	bf88      	it	hi
    34d4:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    34d6:	2300      	movs	r3, #0
    34d8:	6023      	str	r3, [r4, #0]
    34da:	6823      	ldr	r3, [r4, #0]
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    34dc:	f8c9 7344 	str.w	r7, [r9, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    34e0:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    34e4:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    34e8:	f8d9 3504 	ldr.w	r3, [r9, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    34ec:	459a      	cmp	sl, r3
    34ee:	d006      	beq.n	34fe <set_absolute_alarm+0x8a>
	return (a - b) & COUNTER_MAX;
    34f0:	1aeb      	subs	r3, r5, r3
    34f2:	3b02      	subs	r3, #2
    34f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    34f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    34fc:	d801      	bhi.n	3502 <set_absolute_alarm+0x8e>
}
    34fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
    3502:	462b      	mov	r3, r5
    3504:	e7cf      	b.n	34a6 <set_absolute_alarm+0x32>
    3506:	bf00      	nop
    3508:	40011000 	.word	0x40011000

0000350c <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    350c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return p_reg->INTENSET & mask;
    350e:	4e10      	ldr	r6, [pc, #64]	; (3550 <rtc_nrf_isr+0x44>)
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3510:	4f10      	ldr	r7, [pc, #64]	; (3554 <rtc_nrf_isr+0x48>)
	ARG_UNUSED(arg);

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    3512:	2500      	movs	r5, #0
    3514:	4b10      	ldr	r3, [pc, #64]	; (3558 <rtc_nrf_isr+0x4c>)
    3516:	2000      	movs	r0, #0
    3518:	681c      	ldr	r4, [r3, #0]
    351a:	461a      	mov	r2, r3
    351c:	b105      	cbz	r5, 3520 <rtc_nrf_isr+0x14>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    351e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return p_reg->INTENSET & mask;
    3520:	f8d6 1304 	ldr.w	r1, [r6, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    3524:	03c9      	lsls	r1, r1, #15
    3526:	d5fa      	bpl.n	351e <rtc_nrf_isr+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3528:	6839      	ldr	r1, [r7, #0]
    352a:	2900      	cmp	r1, #0
    352c:	d0f7      	beq.n	351e <rtc_nrf_isr+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    352e:	603d      	str	r5, [r7, #0]
    3530:	6839      	ldr	r1, [r7, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    3532:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    3536:	f8c6 1348 	str.w	r1, [r6, #840]	; 0x348
    return p_reg->CC[ch];
    353a:	f8d6 1540 	ldr.w	r1, [r6, #1344]	; 0x540
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    353e:	2501      	movs	r5, #1
			if (handler) {
    3540:	b11c      	cbz	r4, 354a <rtc_nrf_isr+0x3e>
				handler(chan, cc_val,
    3542:	685a      	ldr	r2, [r3, #4]
    3544:	6018      	str	r0, [r3, #0]
    3546:	47a0      	blx	r4
    3548:	e7e4      	b.n	3514 <rtc_nrf_isr+0x8>
    354a:	6014      	str	r4, [r2, #0]
}
    354c:	e7e7      	b.n	351e <rtc_nrf_isr+0x12>
    354e:	bf00      	nop
    3550:	40011000 	.word	0x40011000
    3554:	40011140 	.word	0x40011140
    3558:	2000051c 	.word	0x2000051c

0000355c <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
    355c:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    355e:	4d10      	ldr	r5, [pc, #64]	; (35a0 <sys_clock_driver_init+0x44>)
    3560:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
    3562:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
    3566:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->INTENSET = mask;
    356a:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    356e:	4b0d      	ldr	r3, [pc, #52]	; (35a4 <sys_clock_driver_init+0x48>)
    3570:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    3574:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    3578:	2101      	movs	r1, #1
    357a:	4622      	mov	r2, r4
    357c:	2011      	movs	r0, #17
    357e:	f000 f9a3 	bl	38c8 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    3582:	2011      	movs	r0, #17
    3584:	f000 f982 	bl	388c <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    3588:	4a07      	ldr	r2, [pc, #28]	; (35a8 <sys_clock_driver_init+0x4c>)
    358a:	2301      	movs	r3, #1
    358c:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    358e:	4a07      	ldr	r2, [pc, #28]	; (35ac <sys_clock_driver_init+0x50>)
    3590:	602b      	str	r3, [r5, #0]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    3592:	2002      	movs	r0, #2
	int_mask = BIT_MASK(CHAN_COUNT);
    3594:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    3596:	f7ff fedb 	bl	3350 <z_nrf_clock_control_lf_on>

	return 0;
}
    359a:	4620      	mov	r0, r4
    359c:	bd38      	pop	{r3, r4, r5, pc}
    359e:	bf00      	nop
    35a0:	40011000 	.word	0x40011000
    35a4:	e000e100 	.word	0xe000e100
    35a8:	40011008 	.word	0x40011008
    35ac:	20000524 	.word	0x20000524

000035b0 <sys_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    35b0:	4b13      	ldr	r3, [pc, #76]	; (3600 <sys_clock_set_timeout+0x50>)
    35b2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    35b6:	bf08      	it	eq
    35b8:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    35ba:	3801      	subs	r0, #1
    35bc:	2800      	cmp	r0, #0
    35be:	dd1c      	ble.n	35fa <sys_clock_set_timeout+0x4a>
    35c0:	4298      	cmp	r0, r3
    35c2:	bfa8      	it	ge
    35c4:	4618      	movge	r0, r3
     return p_reg->COUNTER;
    35c6:	4b0f      	ldr	r3, [pc, #60]	; (3604 <sys_clock_set_timeout+0x54>)
    35c8:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    35cc:	4b0e      	ldr	r3, [pc, #56]	; (3608 <sys_clock_set_timeout+0x58>)
    35ce:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
    35d0:	1a52      	subs	r2, r2, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    35d2:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
    35d6:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
		ticks = 0;
    35da:	bf18      	it	ne
    35dc:	2000      	movne	r0, #0
	cc_data[chan].callback = handler;
    35de:	4a0b      	ldr	r2, [pc, #44]	; (360c <sys_clock_set_timeout+0x5c>)
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    35e0:	3301      	adds	r3, #1
    35e2:	4403      	add	r3, r0
	cc_data[chan].callback = handler;
    35e4:	480a      	ldr	r0, [pc, #40]	; (3610 <sys_clock_set_timeout+0x60>)
    35e6:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    35e8:	2000      	movs	r0, #0
    35ea:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    35ec:	4a04      	ldr	r2, [pc, #16]	; (3600 <sys_clock_set_timeout+0x50>)
    35ee:	4293      	cmp	r3, r2
    35f0:	bf94      	ite	ls
    35f2:	18c9      	addls	r1, r1, r3
    35f4:	1889      	addhi	r1, r1, r2
    35f6:	f7ff bf3d 	b.w	3474 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    35fa:	2000      	movs	r0, #0
    35fc:	e7e3      	b.n	35c6 <sys_clock_set_timeout+0x16>
    35fe:	bf00      	nop
    3600:	007fffff 	.word	0x007fffff
    3604:	40011000 	.word	0x40011000
    3608:	20000528 	.word	0x20000528
    360c:	2000051c 	.word	0x2000051c
    3610:	0000345d 	.word	0x0000345d

00003614 <sys_clock_elapsed>:
	__asm__ volatile(
    3614:	f04f 0220 	mov.w	r2, #32
    3618:	f3ef 8311 	mrs	r3, BASEPRI
    361c:	f382 8811 	msr	BASEPRI, r2
    3620:	f3bf 8f6f 	isb	sy
    3624:	4a06      	ldr	r2, [pc, #24]	; (3640 <sys_clock_elapsed+0x2c>)
    3626:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    362a:	4a06      	ldr	r2, [pc, #24]	; (3644 <sys_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    362c:	6812      	ldr	r2, [r2, #0]
    362e:	1a80      	subs	r0, r0, r2
    3630:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    3634:	f383 8811 	msr	BASEPRI, r3
    3638:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    363c:	4770      	bx	lr
    363e:	bf00      	nop
    3640:	40011000 	.word	0x40011000
    3644:	20000528 	.word	0x20000528

00003648 <sys_clock_cycle_get_32>:
	__asm__ volatile(
    3648:	f04f 0320 	mov.w	r3, #32
    364c:	f3ef 8211 	mrs	r2, BASEPRI
    3650:	f383 8811 	msr	BASEPRI, r3
    3654:	f3bf 8f6f 	isb	sy

uint32_t sys_clock_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
    3658:	4906      	ldr	r1, [pc, #24]	; (3674 <sys_clock_cycle_get_32+0x2c>)
    365a:	4b07      	ldr	r3, [pc, #28]	; (3678 <sys_clock_cycle_get_32+0x30>)
    365c:	6808      	ldr	r0, [r1, #0]
    365e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    3662:	f382 8811 	msr	BASEPRI, r2
    3666:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    366a:	1a1b      	subs	r3, r3, r0
    366c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    3670:	4418      	add	r0, r3
    3672:	4770      	bx	lr
    3674:	20000528 	.word	0x20000528
    3678:	40011000 	.word	0x40011000

0000367c <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
    367c:	b510      	push	{r4, lr}
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    367e:	4c11      	ldr	r4, [pc, #68]	; (36c4 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    3680:	4a11      	ldr	r2, [pc, #68]	; (36c8 <_DoInit+0x4c>)
    3682:	61a2      	str	r2, [r4, #24]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    3684:	2303      	movs	r3, #3
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    3686:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
    368a:	4b10      	ldr	r3, [pc, #64]	; (36cc <_DoInit+0x50>)
    368c:	61e3      	str	r3, [r4, #28]
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    368e:	6622      	str	r2, [r4, #96]	; 0x60
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    3690:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aDown[0].pBuffer       = _acDownBuffer;
    3694:	4a0e      	ldr	r2, [pc, #56]	; (36d0 <_DoInit+0x54>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
    3696:	490f      	ldr	r1, [pc, #60]	; (36d4 <_DoInit+0x58>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    3698:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
    369a:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
    369c:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    369e:	2210      	movs	r2, #16
  strcpy(&p->acID[7], "RTT");
    36a0:	1de0      	adds	r0, r4, #7
  p->aUp[0].RdOff         = 0u;
    36a2:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    36a4:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    36a6:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
    36a8:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    36aa:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    36ac:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    36ae:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
    36b0:	f005 fd24 	bl	90fc <strcpy>
  strcpy(&p->acID[0], "SEGGER");
    36b4:	4908      	ldr	r1, [pc, #32]	; (36d8 <_DoInit+0x5c>)
    36b6:	4620      	mov	r0, r4
    36b8:	f005 fd20 	bl	90fc <strcpy>
  p->acID[6] = ' ';
    36bc:	2320      	movs	r3, #32
    36be:	71a3      	strb	r3, [r4, #6]
}
    36c0:	bd10      	pop	{r4, pc}
    36c2:	bf00      	nop
    36c4:	2000052c 	.word	0x2000052c
    36c8:	0000983a 	.word	0x0000983a
    36cc:	200009ad 	.word	0x200009ad
    36d0:	2000099d 	.word	0x2000099d
    36d4:	00009843 	.word	0x00009843
    36d8:	00009847 	.word	0x00009847

000036dc <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    36dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  RdOff = pRing->RdOff;
    36e0:	4f23      	ldr	r7, [pc, #140]	; (3770 <SEGGER_RTT_WriteSkipNoLock+0x94>)
    36e2:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    36e6:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    36e8:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    36ec:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    36ee:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    36f0:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    36f2:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    36f4:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    36f6:	d834      	bhi.n	3762 <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    36f8:	f8d2 a020 	ldr.w	sl, [r2, #32]
    36fc:	ebaa 0905 	sub.w	r9, sl, r5
    3700:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    3704:	4294      	cmp	r4, r2
    3706:	d811      	bhi.n	372c <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
    3708:	f04f 0918 	mov.w	r9, #24
    370c:	fb06 9309 	mla	r3, r6, r9, r9
    3710:	443b      	add	r3, r7
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    3712:	4622      	mov	r2, r4
    3714:	6858      	ldr	r0, [r3, #4]
    3716:	4641      	mov	r1, r8
    3718:	4428      	add	r0, r5
    371a:	f005 fcd9 	bl	90d0 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    371e:	fb09 7606 	mla	r6, r9, r6, r7
    3722:	442c      	add	r4, r5
      // Therefore, check if 2nd memcpy is necessary at all
      //
      if (NumBytes) {
        memcpy(pRing->pBuffer, pData + Rem, NumBytes);
      }
      pRing->WrOff = NumBytes;
    3724:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
    3726:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    3728:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    372c:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    372e:	429c      	cmp	r4, r3
    3730:	d81b      	bhi.n	376a <SEGGER_RTT_WriteSkipNoLock+0x8e>
      memcpy(pRing->pBuffer + WrOff, pData, Rem);       // Copy 1st chunk
    3732:	fb00 bb0b 	mla	fp, r0, fp, fp
    3736:	44bb      	add	fp, r7
    3738:	464a      	mov	r2, r9
    373a:	f8db 0004 	ldr.w	r0, [fp, #4]
    373e:	442c      	add	r4, r5
    3740:	4428      	add	r0, r5
    3742:	f005 fcc5 	bl	90d0 <memcpy>
      if (NumBytes) {
    3746:	ebb4 040a 	subs.w	r4, r4, sl
    374a:	d006      	beq.n	375a <SEGGER_RTT_WriteSkipNoLock+0x7e>
    374c:	f8db 0004 	ldr.w	r0, [fp, #4]
    3750:	4622      	mov	r2, r4
    3752:	eb08 0109 	add.w	r1, r8, r9
    3756:	f005 fcbb 	bl	90d0 <memcpy>
      pRing->WrOff = NumBytes;
    375a:	2018      	movs	r0, #24
    375c:	fb00 7606 	mla	r6, r0, r6, r7
    3760:	e7e0      	b.n	3724 <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
    3762:	3b01      	subs	r3, #1
    3764:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    3766:	42a3      	cmp	r3, r4
    3768:	d2ce      	bcs.n	3708 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    376a:	2000      	movs	r0, #0
    376c:	e7dc      	b.n	3728 <SEGGER_RTT_WriteSkipNoLock+0x4c>
    376e:	bf00      	nop
    3770:	2000052c 	.word	0x2000052c

00003774 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    3774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    3776:	4c18      	ldr	r4, [pc, #96]	; (37d8 <SEGGER_RTT_WriteNoLock+0x64>)
    3778:	2318      	movs	r3, #24
    377a:	fb00 3503 	mla	r5, r0, r3, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    377e:	fb03 4000 	mla	r0, r3, r0, r4
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    3782:	4425      	add	r5, r4
  switch (pRing->Flags) {
    3784:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    3786:	2c01      	cmp	r4, #1
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    3788:	460f      	mov	r7, r1
    378a:	4616      	mov	r6, r2
  switch (pRing->Flags) {
    378c:	d00f      	beq.n	37ae <SEGGER_RTT_WriteNoLock+0x3a>
    378e:	2c02      	cmp	r4, #2
    3790:	d01a      	beq.n	37c8 <SEGGER_RTT_WriteNoLock+0x54>
    3792:	b9f4      	cbnz	r4, 37d2 <SEGGER_RTT_WriteNoLock+0x5e>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    3794:	4628      	mov	r0, r5
    3796:	f004 ffb1 	bl	86fc <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    379a:	4286      	cmp	r6, r0
    379c:	d805      	bhi.n	37aa <SEGGER_RTT_WriteNoLock+0x36>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    379e:	4632      	mov	r2, r6
    37a0:	4639      	mov	r1, r7
    37a2:	4628      	mov	r0, r5
    37a4:	f004 ffb8 	bl	8718 <_WriteNoCheck>
    37a8:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
    37aa:	4620      	mov	r0, r4
    37ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
    37ae:	4628      	mov	r0, r5
    37b0:	f004 ffa4 	bl	86fc <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    37b4:	4286      	cmp	r6, r0
    37b6:	4634      	mov	r4, r6
    37b8:	bf28      	it	cs
    37ba:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    37bc:	4622      	mov	r2, r4
    37be:	4639      	mov	r1, r7
    37c0:	4628      	mov	r0, r5
    37c2:	f004 ffa9 	bl	8718 <_WriteNoCheck>
    break;
    37c6:	e7f0      	b.n	37aa <SEGGER_RTT_WriteNoLock+0x36>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    37c8:	4628      	mov	r0, r5
}
    37ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    37ce:	f004 bfbf 	b.w	8750 <_WriteBlocking>
  switch (pRing->Flags) {
    37d2:	2400      	movs	r4, #0
  return Status;
    37d4:	e7e9      	b.n	37aa <SEGGER_RTT_WriteNoLock+0x36>
    37d6:	bf00      	nop
    37d8:	2000052c 	.word	0x2000052c

000037dc <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  v = pRing->RdOff;
    37dc:	4b03      	ldr	r3, [pc, #12]	; (37ec <SEGGER_RTT_HasDataUp+0x10>)
    37de:	2218      	movs	r2, #24
    37e0:	fb02 3300 	mla	r3, r2, r0, r3
    37e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    37e6:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    37e8:	1a80      	subs	r0, r0, r2
    37ea:	4770      	bx	lr
    37ec:	2000052c 	.word	0x2000052c

000037f0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    37f0:	4a09      	ldr	r2, [pc, #36]	; (3818 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    37f2:	490a      	ldr	r1, [pc, #40]	; (381c <arch_swap+0x2c>)
	_current->arch.basepri = key;
    37f4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    37f6:	6809      	ldr	r1, [r1, #0]
    37f8:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    37fa:	4909      	ldr	r1, [pc, #36]	; (3820 <arch_swap+0x30>)
	_current->arch.basepri = key;
    37fc:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    37fe:	684b      	ldr	r3, [r1, #4]
    3800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3804:	604b      	str	r3, [r1, #4]
    3806:	2300      	movs	r3, #0
    3808:	f383 8811 	msr	BASEPRI, r3
    380c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    3810:	6893      	ldr	r3, [r2, #8]
}
    3812:	6f98      	ldr	r0, [r3, #120]	; 0x78
    3814:	4770      	bx	lr
    3816:	bf00      	nop
    3818:	20000940 	.word	0x20000940
    381c:	0000969c 	.word	0x0000969c
    3820:	e000ed00 	.word	0xe000ed00

00003824 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    3824:	490f      	ldr	r1, [pc, #60]	; (3864 <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
    3826:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    3828:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    382c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    382e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    3832:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3836:	2020      	movs	r0, #32
    msr BASEPRI, r0
    3838:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    383c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    3840:	4f09      	ldr	r7, [pc, #36]	; (3868 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    3842:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    3846:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    3848:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    384a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    384c:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    384e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    3850:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    3852:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    3856:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    385a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    385e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    3862:	4770      	bx	lr
    ldr r1, =_kernel
    3864:	20000940 	.word	0x20000940
    ldr v4, =_SCS_ICSR
    3868:	e000ed04 	.word	0xe000ed04

0000386c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    386c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    3870:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    3872:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    3876:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    387a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    387c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    3880:	2902      	cmp	r1, #2
    beq _oops
    3882:	d0ff      	beq.n	3884 <_oops>

00003884 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    3884:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    3886:	f004 ff97 	bl	87b8 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    388a:	bd01      	pop	{r0, pc}

0000388c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    388c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    388e:	2b00      	cmp	r3, #0
    3890:	db08      	blt.n	38a4 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3892:	2201      	movs	r2, #1
    3894:	f000 001f 	and.w	r0, r0, #31
    3898:	fa02 f000 	lsl.w	r0, r2, r0
    389c:	095b      	lsrs	r3, r3, #5
    389e:	4a02      	ldr	r2, [pc, #8]	; (38a8 <arch_irq_enable+0x1c>)
    38a0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    38a4:	4770      	bx	lr
    38a6:	bf00      	nop
    38a8:	e000e100 	.word	0xe000e100

000038ac <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    38ac:	4b05      	ldr	r3, [pc, #20]	; (38c4 <arch_irq_is_enabled+0x18>)
    38ae:	0942      	lsrs	r2, r0, #5
    38b0:	f000 001f 	and.w	r0, r0, #31
    38b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    38b8:	2301      	movs	r3, #1
    38ba:	fa03 f000 	lsl.w	r0, r3, r0
}
    38be:	4010      	ands	r0, r2
    38c0:	4770      	bx	lr
    38c2:	bf00      	nop
    38c4:	e000e100 	.word	0xe000e100

000038c8 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    38c8:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    38ca:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    38cc:	bfa8      	it	ge
    38ce:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    38d2:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    38d6:	bfb8      	it	lt
    38d8:	4b06      	ldrlt	r3, [pc, #24]	; (38f4 <z_arm_irq_priority_set+0x2c>)
    38da:	ea4f 1141 	mov.w	r1, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    38de:	bfac      	ite	ge
    38e0:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    38e4:	f000 000f 	andlt.w	r0, r0, #15
    38e8:	b2c9      	uxtb	r1, r1
    38ea:	bfb4      	ite	lt
    38ec:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    38ee:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    38f2:	4770      	bx	lr
    38f4:	e000ed14 	.word	0xe000ed14

000038f8 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    38f8:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    38fc:	9b00      	ldr	r3, [sp, #0]
    38fe:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    3902:	490a      	ldr	r1, [pc, #40]	; (392c <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    3904:	9b01      	ldr	r3, [sp, #4]
    3906:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    390a:	9b02      	ldr	r3, [sp, #8]
    390c:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    3910:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    3914:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    3918:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    391c:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    3920:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    3922:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    3924:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    3926:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    3928:	4770      	bx	lr
    392a:	bf00      	nop
    392c:	00007f5d 	.word	0x00007f5d

00003930 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    3930:	b508      	push	{r3, lr}
    3932:	4606      	mov	r6, r0
    3934:	460d      	mov	r5, r1
    3936:	4614      	mov	r4, r2
	z_arm_configure_static_mpu_regions();
    3938:	f000 fb0a 	bl	3f50 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    393c:	4b07      	ldr	r3, [pc, #28]	; (395c <arch_switch_to_main_thread+0x2c>)
    393e:	609e      	str	r6, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    3940:	4620      	mov	r0, r4
    3942:	f385 8809 	msr	PSP, r5
    3946:	2100      	movs	r1, #0
    3948:	b663      	cpsie	if
    394a:	f381 8811 	msr	BASEPRI, r1
    394e:	f3bf 8f6f 	isb	sy
    3952:	2200      	movs	r2, #0
    3954:	2300      	movs	r3, #0
    3956:	f004 fb01 	bl	7f5c <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    395a:	bf00      	nop
    395c:	20000940 	.word	0x20000940

00003960 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    3960:	4901      	ldr	r1, [pc, #4]	; (3968 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    3962:	2210      	movs	r2, #16
	str	r2, [r1]
    3964:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    3966:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    3968:	e000ed10 	.word	0xe000ed10

0000396c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    396c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    396e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    3970:	f380 8811 	msr	BASEPRI, r0
	isb
    3974:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    3978:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    397c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    397e:	b662      	cpsie	i
	isb
    3980:	f3bf 8f6f 	isb	sy

	bx	lr
    3984:	4770      	bx	lr
    3986:	bf00      	nop

00003988 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    3988:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    398a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    398c:	f381 8811 	msr	BASEPRI, r1

	wfe
    3990:	bf20      	wfe

	msr	BASEPRI, r0
    3992:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    3996:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    3998:	4770      	bx	lr
    399a:	bf00      	nop

0000399c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    399c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    399e:	4606      	mov	r6, r0

	if (esf != NULL) {
    39a0:	460c      	mov	r4, r1
    39a2:	b301      	cbz	r1, 39e6 <z_arm_fatal_error+0x4a>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    39a4:	4b13      	ldr	r3, [pc, #76]	; (39f4 <z_arm_fatal_error+0x58>)
    39a6:	4d14      	ldr	r5, [pc, #80]	; (39f8 <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    39a8:	4814      	ldr	r0, [pc, #80]	; (39fc <z_arm_fatal_error+0x60>)
    39aa:	1aed      	subs	r5, r5, r3
    39ac:	08ed      	lsrs	r5, r5, #3
    39ae:	01ad      	lsls	r5, r5, #6
    39b0:	f045 0501 	orr.w	r5, r5, #1
    39b4:	f8ad 5000 	strh.w	r5, [sp]
    39b8:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    39bc:	6809      	ldr	r1, [r1, #0]
    39be:	f004 fb4b 	bl	8058 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    39c2:	f8ad 5000 	strh.w	r5, [sp]
    39c6:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    39ca:	68e1      	ldr	r1, [r4, #12]
    39cc:	480c      	ldr	r0, [pc, #48]	; (3a00 <z_arm_fatal_error+0x64>)
    39ce:	f004 fb43 	bl	8058 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    39d2:	69e1      	ldr	r1, [r4, #28]
    39d4:	480b      	ldr	r0, [pc, #44]	; (3a04 <z_arm_fatal_error+0x68>)
    39d6:	462a      	mov	r2, r5
    39d8:	f004 fb11 	bl	7ffe <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    39dc:	69a1      	ldr	r1, [r4, #24]
    39de:	480a      	ldr	r0, [pc, #40]	; (3a08 <z_arm_fatal_error+0x6c>)
    39e0:	462a      	mov	r2, r5
    39e2:	f004 fb0c 	bl	7ffe <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    39e6:	4621      	mov	r1, r4
    39e8:	4630      	mov	r0, r6
}
    39ea:	b002      	add	sp, #8
    39ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    39f0:	f002 bec6 	b.w	6780 <z_fatal_error>
    39f4:	00009344 	.word	0x00009344
    39f8:	00009364 	.word	0x00009364
    39fc:	0000984e 	.word	0x0000984e
    3a00:	0000987d 	.word	0x0000987d
    3a04:	000098ac 	.word	0x000098ac
    3a08:	000098bb 	.word	0x000098bb

00003a0c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    3a0c:	bf30      	wfi
    b z_SysNmiOnReset
    3a0e:	f7ff bffd 	b.w	3a0c <z_SysNmiOnReset>
    3a12:	bf00      	nop

00003a14 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3a14:	4a0e      	ldr	r2, [pc, #56]	; (3a50 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    3a16:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3a18:	4b0e      	ldr	r3, [pc, #56]	; (3a54 <z_arm_prep_c+0x40>)
    3a1a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    3a1e:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3a20:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3a24:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    3a28:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    3a2c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    3a30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    3a34:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    3a38:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    3a3c:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    3a40:	f002 ff12 	bl	6868 <z_bss_zero>
	z_data_copy();
    3a44:	f003 fef4 	bl	7830 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    3a48:	f000 fa64 	bl	3f14 <z_arm_interrupt_init>
	z_cstart();
    3a4c:	f002 ff30 	bl	68b0 <z_cstart>
    3a50:	00000000 	.word	0x00000000
    3a54:	e000ed00 	.word	0xe000ed00

00003a58 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    3a58:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    3a5a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    3a5c:	4a0b      	ldr	r2, [pc, #44]	; (3a8c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    3a5e:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    3a60:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    3a62:	bf1e      	ittt	ne
	movne	r1, #0
    3a64:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    3a66:	6211      	strne	r1, [r2, #32]
		blne	z_pm_save_idle_exit
    3a68:	f005 f96b 	blne	8d42 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    3a6c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    3a6e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    3a72:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    3a76:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    3a7a:	4905      	ldr	r1, [pc, #20]	; (3a90 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    3a7c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    3a7e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    3a80:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    3a82:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    3a86:	4903      	ldr	r1, [pc, #12]	; (3a94 <_isr_wrapper+0x3c>)
	bx r1
    3a88:	4708      	bx	r1
    3a8a:	0000      	.short	0x0000
	ldr r2, =_kernel
    3a8c:	20000940 	.word	0x20000940
	ldr r1, =_sw_isr_table
    3a90:	000091c4 	.word	0x000091c4
	ldr r1, =z_arm_int_exit
    3a94:	00003ef9 	.word	0x00003ef9

00003a98 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    3a98:	f004 fe9c 	bl	87d4 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3a9c:	2020      	movs	r0, #32
    msr BASEPRI, r0
    3a9e:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    3aa2:	4808      	ldr	r0, [pc, #32]	; (3ac4 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    3aa4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    3aa8:	1840      	adds	r0, r0, r1
    msr PSP, r0
    3aaa:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    3aae:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    3ab2:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    3ab4:	4308      	orrs	r0, r1
    msr CONTROL, r0
    3ab6:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    3aba:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    3abe:	f7ff ffa9 	bl	3a14 <z_arm_prep_c>
    3ac2:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    3ac4:	200016f0 	.word	0x200016f0

00003ac8 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    3ac8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    3acc:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    3ad0:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    3ad2:	4672      	mov	r2, lr
	bl z_arm_fault
    3ad4:	f000 f934 	bl	3d40 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    3ad8:	bd01      	pop	{r0, pc}
    3ada:	bf00      	nop

00003adc <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    3adc:	b570      	push	{r4, r5, r6, lr}
    3ade:	4b23      	ldr	r3, [pc, #140]	; (3b6c <usage_fault.isra.0+0x90>)
    3ae0:	4c23      	ldr	r4, [pc, #140]	; (3b70 <usage_fault.isra.0+0x94>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    3ae2:	4d24      	ldr	r5, [pc, #144]	; (3b74 <usage_fault.isra.0+0x98>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    3ae4:	4824      	ldr	r0, [pc, #144]	; (3b78 <usage_fault.isra.0+0x9c>)
    3ae6:	1ae4      	subs	r4, r4, r3
    3ae8:	08e4      	lsrs	r4, r4, #3
    3aea:	01a4      	lsls	r4, r4, #6
    3aec:	f044 0601 	orr.w	r6, r4, #1
    3af0:	4631      	mov	r1, r6
    3af2:	f004 fa77 	bl	7fe4 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    3af6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    3af8:	0193      	lsls	r3, r2, #6
    3afa:	d503      	bpl.n	3b04 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
    3afc:	481f      	ldr	r0, [pc, #124]	; (3b7c <usage_fault.isra.0+0xa0>)
    3afe:	4631      	mov	r1, r6
    3b00:	f004 fa70 	bl	7fe4 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    3b04:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3b06:	01dd      	lsls	r5, r3, #7
    3b08:	d504      	bpl.n	3b14 <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
    3b0a:	481d      	ldr	r0, [pc, #116]	; (3b80 <usage_fault.isra.0+0xa4>)
    3b0c:	f044 0101 	orr.w	r1, r4, #1
    3b10:	f004 fa68 	bl	7fe4 <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    3b14:	4d17      	ldr	r5, [pc, #92]	; (3b74 <usage_fault.isra.0+0x98>)
    3b16:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    3b18:	0310      	lsls	r0, r2, #12
    3b1a:	d504      	bpl.n	3b26 <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    3b1c:	4819      	ldr	r0, [pc, #100]	; (3b84 <usage_fault.isra.0+0xa8>)
    3b1e:	f044 0101 	orr.w	r1, r4, #1
    3b22:	f004 fa5f 	bl	7fe4 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    3b26:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3b28:	0359      	lsls	r1, r3, #13
    3b2a:	d504      	bpl.n	3b36 <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    3b2c:	4816      	ldr	r0, [pc, #88]	; (3b88 <usage_fault.isra.0+0xac>)
    3b2e:	f044 0101 	orr.w	r1, r4, #1
    3b32:	f004 fa57 	bl	7fe4 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    3b36:	4d0f      	ldr	r5, [pc, #60]	; (3b74 <usage_fault.isra.0+0x98>)
    3b38:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    3b3a:	0392      	lsls	r2, r2, #14
    3b3c:	d504      	bpl.n	3b48 <usage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    3b3e:	4813      	ldr	r0, [pc, #76]	; (3b8c <usage_fault.isra.0+0xb0>)
    3b40:	f044 0101 	orr.w	r1, r4, #1
    3b44:	f004 fa4e 	bl	7fe4 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    3b48:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3b4a:	03db      	lsls	r3, r3, #15
    3b4c:	d504      	bpl.n	3b58 <usage_fault.isra.0+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    3b4e:	4810      	ldr	r0, [pc, #64]	; (3b90 <usage_fault.isra.0+0xb4>)
    3b50:	f044 0101 	orr.w	r1, r4, #1
    3b54:	f004 fa46 	bl	7fe4 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    3b58:	4a06      	ldr	r2, [pc, #24]	; (3b74 <usage_fault.isra.0+0x98>)
    3b5a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3b5c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    3b60:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    3b64:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    3b66:	2000      	movs	r0, #0
    3b68:	bd70      	pop	{r4, r5, r6, pc}
    3b6a:	bf00      	nop
    3b6c:	00009344 	.word	0x00009344
    3b70:	00009364 	.word	0x00009364
    3b74:	e000ed00 	.word	0xe000ed00
    3b78:	000098e9 	.word	0x000098e9
    3b7c:	00009901 	.word	0x00009901
    3b80:	00009914 	.word	0x00009914
    3b84:	0000992e 	.word	0x0000992e
    3b88:	0000994c 	.word	0x0000994c
    3b8c:	00009971 	.word	0x00009971
    3b90:	0000998b 	.word	0x0000998b

00003b94 <mem_manage_fault.isra.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    3b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3b98:	4b28      	ldr	r3, [pc, #160]	; (3c3c <mem_manage_fault.isra.0+0xa8>)
    3b9a:	4c29      	ldr	r4, [pc, #164]	; (3c40 <mem_manage_fault.isra.0+0xac>)
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    3b9c:	4d29      	ldr	r5, [pc, #164]	; (3c44 <mem_manage_fault.isra.0+0xb0>)
    3b9e:	1ae4      	subs	r4, r4, r3
    3ba0:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
    3ba2:	01a4      	lsls	r4, r4, #6
    3ba4:	f044 0801 	orr.w	r8, r4, #1
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    3ba8:	4607      	mov	r7, r0
    3baa:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    3bac:	4826      	ldr	r0, [pc, #152]	; (3c48 <mem_manage_fault.isra.0+0xb4>)
    3bae:	4641      	mov	r1, r8
    3bb0:	f004 fa18 	bl	7fe4 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    3bb4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    3bb6:	06d0      	lsls	r0, r2, #27
    3bb8:	d503      	bpl.n	3bc2 <mem_manage_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    3bba:	4824      	ldr	r0, [pc, #144]	; (3c4c <mem_manage_fault.isra.0+0xb8>)
    3bbc:	4641      	mov	r1, r8
    3bbe:	f004 fa11 	bl	7fe4 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    3bc2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3bc4:	0719      	lsls	r1, r3, #28
    3bc6:	d504      	bpl.n	3bd2 <mem_manage_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    3bc8:	4821      	ldr	r0, [pc, #132]	; (3c50 <mem_manage_fault.isra.0+0xbc>)
    3bca:	f044 0101 	orr.w	r1, r4, #1
    3bce:	f004 fa09 	bl	7fe4 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    3bd2:	4d1c      	ldr	r5, [pc, #112]	; (3c44 <mem_manage_fault.isra.0+0xb0>)
    3bd4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3bd6:	079a      	lsls	r2, r3, #30
    3bd8:	d512      	bpl.n	3c00 <mem_manage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Data Access Violation");
    3bda:	f044 0801 	orr.w	r8, r4, #1
    3bde:	4641      	mov	r1, r8
    3be0:	481c      	ldr	r0, [pc, #112]	; (3c54 <mem_manage_fault.isra.0+0xc0>)
    3be2:	f004 f9ff 	bl	7fe4 <log_0>
		uint32_t temp = SCB->MMFAR;
    3be6:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    3be8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3bea:	061b      	lsls	r3, r3, #24
    3bec:	d508      	bpl.n	3c00 <mem_manage_fault.isra.0+0x6c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    3bee:	481a      	ldr	r0, [pc, #104]	; (3c58 <mem_manage_fault.isra.0+0xc4>)
    3bf0:	4642      	mov	r2, r8
    3bf2:	f004 fa04 	bl	7ffe <log_1>
			if (from_hard_fault != 0) {
    3bf6:	b11f      	cbz	r7, 3c00 <mem_manage_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    3bf8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3bfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    3bfe:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    3c00:	4d10      	ldr	r5, [pc, #64]	; (3c44 <mem_manage_fault.isra.0+0xb0>)
    3c02:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    3c04:	07d0      	lsls	r0, r2, #31
    3c06:	d504      	bpl.n	3c12 <mem_manage_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Instruction Access Violation");
    3c08:	4814      	ldr	r0, [pc, #80]	; (3c5c <mem_manage_fault.isra.0+0xc8>)
    3c0a:	f044 0101 	orr.w	r1, r4, #1
    3c0e:	f004 f9e9 	bl	7fe4 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    3c12:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3c14:	0699      	lsls	r1, r3, #26
    3c16:	d504      	bpl.n	3c22 <mem_manage_fault.isra.0+0x8e>
		PR_FAULT_INFO(
    3c18:	4811      	ldr	r0, [pc, #68]	; (3c60 <mem_manage_fault.isra.0+0xcc>)
    3c1a:	f044 0101 	orr.w	r1, r4, #1
    3c1e:	f004 f9e1 	bl	7fe4 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3c22:	4b08      	ldr	r3, [pc, #32]	; (3c44 <mem_manage_fault.isra.0+0xb0>)
    3c24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3c26:	06d2      	lsls	r2, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    3c28:	bf58      	it	pl
    3c2a:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    3c2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    3c2e:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    3c30:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    3c34:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    3c36:	7030      	strb	r0, [r6, #0]
}
    3c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3c3c:	00009344 	.word	0x00009344
    3c40:	00009364 	.word	0x00009364
    3c44:	e000ed00 	.word	0xe000ed00
    3c48:	000099b6 	.word	0x000099b6
    3c4c:	000099cc 	.word	0x000099cc
    3c50:	000099ff 	.word	0x000099ff
    3c54:	00009a12 	.word	0x00009a12
    3c58:	00009a2a 	.word	0x00009a2a
    3c5c:	00009a40 	.word	0x00009a40
    3c60:	00009a5f 	.word	0x00009a5f

00003c64 <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    3c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3c68:	4b2a      	ldr	r3, [pc, #168]	; (3d14 <bus_fault.isra.0+0xb0>)
    3c6a:	4c2b      	ldr	r4, [pc, #172]	; (3d18 <bus_fault.isra.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    3c6c:	4d2b      	ldr	r5, [pc, #172]	; (3d1c <bus_fault.isra.0+0xb8>)
    3c6e:	1ae4      	subs	r4, r4, r3
    3c70:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
    3c72:	01a4      	lsls	r4, r4, #6
    3c74:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    3c78:	4607      	mov	r7, r0
    3c7a:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    3c7c:	4828      	ldr	r0, [pc, #160]	; (3d20 <bus_fault.isra.0+0xbc>)
    3c7e:	4641      	mov	r1, r8
    3c80:	f004 f9b0 	bl	7fe4 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    3c84:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    3c86:	04d1      	lsls	r1, r2, #19
    3c88:	d503      	bpl.n	3c92 <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
    3c8a:	4826      	ldr	r0, [pc, #152]	; (3d24 <bus_fault.isra.0+0xc0>)
    3c8c:	4641      	mov	r1, r8
    3c8e:	f004 f9a9 	bl	7fe4 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    3c92:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3c94:	051a      	lsls	r2, r3, #20
    3c96:	d504      	bpl.n	3ca2 <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    3c98:	4823      	ldr	r0, [pc, #140]	; (3d28 <bus_fault.isra.0+0xc4>)
    3c9a:	f044 0101 	orr.w	r1, r4, #1
    3c9e:	f004 f9a1 	bl	7fe4 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    3ca2:	4d1e      	ldr	r5, [pc, #120]	; (3d1c <bus_fault.isra.0+0xb8>)
    3ca4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3ca6:	059b      	lsls	r3, r3, #22
    3ca8:	d512      	bpl.n	3cd0 <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
    3caa:	f044 0801 	orr.w	r8, r4, #1
    3cae:	481f      	ldr	r0, [pc, #124]	; (3d2c <bus_fault.isra.0+0xc8>)
    3cb0:	4641      	mov	r1, r8
    3cb2:	f004 f997 	bl	7fe4 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    3cb6:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    3cb8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3cba:	0418      	lsls	r0, r3, #16
    3cbc:	d508      	bpl.n	3cd0 <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    3cbe:	481c      	ldr	r0, [pc, #112]	; (3d30 <bus_fault.isra.0+0xcc>)
    3cc0:	4642      	mov	r2, r8
    3cc2:	f004 f99c 	bl	7ffe <log_1>
			if (from_hard_fault != 0) {
    3cc6:	b11f      	cbz	r7, 3cd0 <bus_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    3cc8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3cca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    3cce:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    3cd0:	4d12      	ldr	r5, [pc, #72]	; (3d1c <bus_fault.isra.0+0xb8>)
    3cd2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3cd4:	0559      	lsls	r1, r3, #21
    3cd6:	d504      	bpl.n	3ce2 <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
    3cd8:	4816      	ldr	r0, [pc, #88]	; (3d34 <bus_fault.isra.0+0xd0>)
    3cda:	f044 0101 	orr.w	r1, r4, #1
    3cde:	f004 f981 	bl	7fe4 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    3ce2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3ce4:	05da      	lsls	r2, r3, #23
    3ce6:	d50d      	bpl.n	3d04 <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
    3ce8:	4813      	ldr	r0, [pc, #76]	; (3d38 <bus_fault.isra.0+0xd4>)
    3cea:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    3cee:	f004 f979 	bl	7fe4 <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    3cf2:	4a0a      	ldr	r2, [pc, #40]	; (3d1c <bus_fault.isra.0+0xb8>)
    3cf4:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    3cf6:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    3cf8:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    3cfc:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    3cfe:	7030      	strb	r0, [r6, #0]
}
    3d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    3d04:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3d06:	049b      	lsls	r3, r3, #18
    3d08:	d5f3      	bpl.n	3cf2 <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    3d0a:	480c      	ldr	r0, [pc, #48]	; (3d3c <bus_fault.isra.0+0xd8>)
    3d0c:	f044 0101 	orr.w	r1, r4, #1
    3d10:	e7ed      	b.n	3cee <bus_fault.isra.0+0x8a>
    3d12:	bf00      	nop
    3d14:	00009344 	.word	0x00009344
    3d18:	00009364 	.word	0x00009364
    3d1c:	e000ed00 	.word	0xe000ed00
    3d20:	00009a8e 	.word	0x00009a8e
    3d24:	00009aa4 	.word	0x00009aa4
    3d28:	000099ff 	.word	0x000099ff
    3d2c:	00009ab5 	.word	0x00009ab5
    3d30:	00009ace 	.word	0x00009ace
    3d34:	00009ae3 	.word	0x00009ae3
    3d38:	00009afe 	.word	0x00009afe
    3d3c:	00009a5f 	.word	0x00009a5f

00003d40 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    3d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3d44:	460d      	mov	r5, r1
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3d46:	495a      	ldr	r1, [pc, #360]	; (3eb0 <z_arm_fault+0x170>)
    3d48:	684f      	ldr	r7, [r1, #4]
{
    3d4a:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3d4c:	f3c7 0408 	ubfx	r4, r7, #0, #9
    3d50:	2600      	movs	r6, #0
    3d52:	f386 8811 	msr	BASEPRI, r6
    3d56:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    3d5a:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
    3d5e:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
    3d62:	d10d      	bne.n	3d80 <z_arm_fault+0x40>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    3d64:	f002 010c 	and.w	r1, r2, #12
    3d68:	2908      	cmp	r1, #8
    3d6a:	d10b      	bne.n	3d84 <z_arm_fault+0x44>
    3d6c:	4951      	ldr	r1, [pc, #324]	; (3eb4 <z_arm_fault+0x174>)
    3d6e:	4b52      	ldr	r3, [pc, #328]	; (3eb8 <z_arm_fault+0x178>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    3d70:	4852      	ldr	r0, [pc, #328]	; (3ebc <z_arm_fault+0x17c>)
    3d72:	1ac9      	subs	r1, r1, r3
    3d74:	08c9      	lsrs	r1, r1, #3
    3d76:	0189      	lsls	r1, r1, #6
    3d78:	f041 0101 	orr.w	r1, r1, #1
    3d7c:	f004 f932 	bl	7fe4 <log_0>
		return NULL;
    3d80:	4635      	mov	r5, r6
    3d82:	e003      	b.n	3d8c <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    3d84:	0712      	lsls	r2, r2, #28
    3d86:	d401      	bmi.n	3d8c <z_arm_fault+0x4c>
			ptr_esf = (z_arch_esf_t *)msp;
    3d88:	4605      	mov	r5, r0
			*nested_exc = true;
    3d8a:	2601      	movs	r6, #1
	*recoverable = false;
    3d8c:	2300      	movs	r3, #0
    3d8e:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    3d92:	1ee3      	subs	r3, r4, #3
    3d94:	2b09      	cmp	r3, #9
    3d96:	d871      	bhi.n	3e7c <z_arm_fault+0x13c>
    3d98:	e8df f003 	tbb	[pc, r3]
    3d9c:	3c635f05 	.word	0x3c635f05
    3da0:	70707070 	.word	0x70707070
    3da4:	6770      	.short	0x6770
    3da6:	4b44      	ldr	r3, [pc, #272]	; (3eb8 <z_arm_fault+0x178>)
    3da8:	4f42      	ldr	r7, [pc, #264]	; (3eb4 <z_arm_fault+0x174>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    3daa:	4845      	ldr	r0, [pc, #276]	; (3ec0 <z_arm_fault+0x180>)
    3dac:	1aff      	subs	r7, r7, r3
    3dae:	08ff      	lsrs	r7, r7, #3
    3db0:	01bf      	lsls	r7, r7, #6
    3db2:	f047 0701 	orr.w	r7, r7, #1
    3db6:	4639      	mov	r1, r7
    3db8:	f004 f914 	bl	7fe4 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    3dbc:	4b3c      	ldr	r3, [pc, #240]	; (3eb0 <z_arm_fault+0x170>)
    3dbe:	6adc      	ldr	r4, [r3, #44]	; 0x2c
	*recoverable = false;
    3dc0:	f04f 0800 	mov.w	r8, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    3dc4:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
    3dc8:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    3dcc:	d005      	beq.n	3dda <z_arm_fault+0x9a>
		PR_EXC("  Bus fault on vector table read");
    3dce:	483d      	ldr	r0, [pc, #244]	; (3ec4 <z_arm_fault+0x184>)
    3dd0:	4639      	mov	r1, r7
	PR_FAULT_INFO(
    3dd2:	f004 f907 	bl	7fe4 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    3dd6:	2400      	movs	r4, #0
}
    3dd8:	e01f      	b.n	3e1a <z_arm_fault+0xda>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    3dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3ddc:	005b      	lsls	r3, r3, #1
    3dde:	d51c      	bpl.n	3e1a <z_arm_fault+0xda>
		PR_EXC("  Fault escalation (see below)");
    3de0:	4839      	ldr	r0, [pc, #228]	; (3ec8 <z_arm_fault+0x188>)
    3de2:	4639      	mov	r1, r7
    3de4:	f004 f8fe 	bl	7fe4 <log_0>
		if (SCB_MMFSR != 0) {
    3de8:	4b38      	ldr	r3, [pc, #224]	; (3ecc <z_arm_fault+0x18c>)
    3dea:	781b      	ldrb	r3, [r3, #0]
    3dec:	b12b      	cbz	r3, 3dfa <z_arm_fault+0xba>
			reason = mem_manage_fault(esf, 1, recoverable);
    3dee:	f10d 0107 	add.w	r1, sp, #7
    3df2:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    3df4:	f7ff fece 	bl	3b94 <mem_manage_fault.isra.0>
    3df8:	e00e      	b.n	3e18 <z_arm_fault+0xd8>
		} else if (SCB_BFSR != 0) {
    3dfa:	4b35      	ldr	r3, [pc, #212]	; (3ed0 <z_arm_fault+0x190>)
    3dfc:	781b      	ldrb	r3, [r3, #0]
    3dfe:	b12b      	cbz	r3, 3e0c <z_arm_fault+0xcc>
			reason = bus_fault(esf, 1, recoverable);
    3e00:	f10d 0107 	add.w	r1, sp, #7
    3e04:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    3e06:	f7ff ff2d 	bl	3c64 <bus_fault.isra.0>
    3e0a:	e005      	b.n	3e18 <z_arm_fault+0xd8>
		} else if (SCB_UFSR != 0) {
    3e0c:	4b31      	ldr	r3, [pc, #196]	; (3ed4 <z_arm_fault+0x194>)
    3e0e:	881b      	ldrh	r3, [r3, #0]
    3e10:	b29b      	uxth	r3, r3
    3e12:	b113      	cbz	r3, 3e1a <z_arm_fault+0xda>
			reason = usage_fault(esf);
    3e14:	f7ff fe62 	bl	3adc <usage_fault.isra.0>
    3e18:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    3e1a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3e1e:	b9cb      	cbnz	r3, 3e54 <z_arm_fault+0x114>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    3e20:	462b      	mov	r3, r5
    3e22:	f103 0720 	add.w	r7, r3, #32
    3e26:	ad02      	add	r5, sp, #8
    3e28:	6818      	ldr	r0, [r3, #0]
    3e2a:	6859      	ldr	r1, [r3, #4]
    3e2c:	462a      	mov	r2, r5
    3e2e:	c203      	stmia	r2!, {r0, r1}
    3e30:	3308      	adds	r3, #8
    3e32:	42bb      	cmp	r3, r7
    3e34:	4615      	mov	r5, r2
    3e36:	d1f7      	bne.n	3e28 <z_arm_fault+0xe8>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    3e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3e3a:	b39e      	cbz	r6, 3ea4 <z_arm_fault+0x164>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    3e3c:	f3c3 0208 	ubfx	r2, r3, #0, #9
    3e40:	b922      	cbnz	r2, 3e4c <z_arm_fault+0x10c>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    3e42:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    3e46:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    3e4a:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    3e4c:	a902      	add	r1, sp, #8
    3e4e:	4620      	mov	r0, r4
    3e50:	f7ff fda4 	bl	399c <z_arm_fatal_error>
}
    3e54:	b00a      	add	sp, #40	; 0x28
    3e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    3e5a:	f10d 0107 	add.w	r1, sp, #7
    3e5e:	2000      	movs	r0, #0
    3e60:	e7c8      	b.n	3df4 <z_arm_fault+0xb4>
		reason = bus_fault(esf, 0, recoverable);
    3e62:	f10d 0107 	add.w	r1, sp, #7
    3e66:	2000      	movs	r0, #0
    3e68:	e7cd      	b.n	3e06 <z_arm_fault+0xc6>
    3e6a:	4912      	ldr	r1, [pc, #72]	; (3eb4 <z_arm_fault+0x174>)
    3e6c:	4b12      	ldr	r3, [pc, #72]	; (3eb8 <z_arm_fault+0x178>)
	PR_FAULT_INFO(
    3e6e:	481a      	ldr	r0, [pc, #104]	; (3ed8 <z_arm_fault+0x198>)
    3e70:	1ac9      	subs	r1, r1, r3
    3e72:	08c9      	lsrs	r1, r1, #3
    3e74:	0189      	lsls	r1, r1, #6
    3e76:	f041 0101 	orr.w	r1, r1, #1
    3e7a:	e7aa      	b.n	3dd2 <z_arm_fault+0x92>
    3e7c:	4a0e      	ldr	r2, [pc, #56]	; (3eb8 <z_arm_fault+0x178>)
    3e7e:	4b0d      	ldr	r3, [pc, #52]	; (3eb4 <z_arm_fault+0x174>)
	PR_FAULT_INFO("***** %s %d) *****",
    3e80:	4816      	ldr	r0, [pc, #88]	; (3edc <z_arm_fault+0x19c>)
    3e82:	4917      	ldr	r1, [pc, #92]	; (3ee0 <z_arm_fault+0x1a0>)
    3e84:	1a9b      	subs	r3, r3, r2
    3e86:	08db      	lsrs	r3, r3, #3
    3e88:	f417 7ff8 	tst.w	r7, #496	; 0x1f0
    3e8c:	ea4f 1383 	mov.w	r3, r3, lsl #6
    3e90:	bf18      	it	ne
    3e92:	4601      	movne	r1, r0
    3e94:	f043 0301 	orr.w	r3, r3, #1
    3e98:	4812      	ldr	r0, [pc, #72]	; (3ee4 <z_arm_fault+0x1a4>)
    3e9a:	f1a4 0210 	sub.w	r2, r4, #16
    3e9e:	f004 f8c2 	bl	8026 <log_2>
    3ea2:	e798      	b.n	3dd6 <z_arm_fault+0x96>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    3ea4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    3ea8:	f023 0301 	bic.w	r3, r3, #1
    3eac:	e7cd      	b.n	3e4a <z_arm_fault+0x10a>
    3eae:	bf00      	nop
    3eb0:	e000ed00 	.word	0xe000ed00
    3eb4:	00009364 	.word	0x00009364
    3eb8:	00009344 	.word	0x00009344
    3ebc:	00009b16 	.word	0x00009b16
    3ec0:	00009b41 	.word	0x00009b41
    3ec4:	00009b58 	.word	0x00009b58
    3ec8:	00009b79 	.word	0x00009b79
    3ecc:	e000ed28 	.word	0xe000ed28
    3ed0:	e000ed29 	.word	0xe000ed29
    3ed4:	e000ed2a 	.word	0xe000ed2a
    3ed8:	00009b98 	.word	0x00009b98
    3edc:	00009bd1 	.word	0x00009bd1
    3ee0:	00009bbc 	.word	0x00009bbc
    3ee4:	00009bea 	.word	0x00009bea

00003ee8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    3ee8:	4a02      	ldr	r2, [pc, #8]	; (3ef4 <z_arm_fault_init+0xc>)
    3eea:	6953      	ldr	r3, [r2, #20]
    3eec:	f043 0310 	orr.w	r3, r3, #16
    3ef0:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    3ef2:	4770      	bx	lr
    3ef4:	e000ed00 	.word	0xe000ed00

00003ef8 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    3ef8:	4b04      	ldr	r3, [pc, #16]	; (3f0c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    3efa:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    3efc:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
    3efe:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    3f00:	d003      	beq.n	3f0a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    3f02:	4903      	ldr	r1, [pc, #12]	; (3f10 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    3f04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    3f08:	600a      	str	r2, [r1, #0]

00003f0a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    3f0a:	4770      	bx	lr
	ldr r3, =_kernel
    3f0c:	20000940 	.word	0x20000940
	ldr r1, =_SCS_ICSR
    3f10:	e000ed04 	.word	0xe000ed04

00003f14 <z_arm_interrupt_init>:
    3f14:	4804      	ldr	r0, [pc, #16]	; (3f28 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    3f16:	2300      	movs	r3, #0
    3f18:	2120      	movs	r1, #32
    3f1a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    3f1c:	3301      	adds	r3, #1
    3f1e:	2b30      	cmp	r3, #48	; 0x30
    3f20:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    3f24:	d1f9      	bne.n	3f1a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    3f26:	4770      	bx	lr
    3f28:	e000e100 	.word	0xe000e100

00003f2c <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    3f2c:	4b06      	ldr	r3, [pc, #24]	; (3f48 <z_impl_k_thread_abort+0x1c>)
    3f2e:	689b      	ldr	r3, [r3, #8]
    3f30:	4283      	cmp	r3, r0
    3f32:	d107      	bne.n	3f44 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3f34:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    3f38:	b123      	cbz	r3, 3f44 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3f3a:	4a04      	ldr	r2, [pc, #16]	; (3f4c <z_impl_k_thread_abort+0x20>)
    3f3c:	6853      	ldr	r3, [r2, #4]
    3f3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3f42:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    3f44:	f003 b994 	b.w	7270 <z_thread_abort>
    3f48:	20000940 	.word	0x20000940
    3f4c:	e000ed00 	.word	0xe000ed00

00003f50 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    3f50:	4b02      	ldr	r3, [pc, #8]	; (3f5c <z_arm_configure_static_mpu_regions+0xc>)
    3f52:	4a03      	ldr	r2, [pc, #12]	; (3f60 <z_arm_configure_static_mpu_regions+0x10>)
    3f54:	4803      	ldr	r0, [pc, #12]	; (3f64 <z_arm_configure_static_mpu_regions+0x14>)
    3f56:	2101      	movs	r1, #1
    3f58:	f000 b8a2 	b.w	40a0 <arm_core_mpu_configure_static_mpu_regions>
    3f5c:	20040000 	.word	0x20040000
    3f60:	20000000 	.word	0x20000000
    3f64:	00009498 	.word	0x00009498

00003f68 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    3f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    3f6a:	4f28      	ldr	r7, [pc, #160]	; (400c <mpu_configure_regions+0xa4>)
    3f6c:	460e      	mov	r6, r1
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    3f6e:	2100      	movs	r1, #0
    3f70:	42b1      	cmp	r1, r6
    3f72:	da14      	bge.n	3f9e <mpu_configure_regions+0x36>
		if (regions[i].size == 0U) {
    3f74:	6844      	ldr	r4, [r0, #4]
    3f76:	2c00      	cmp	r4, #0
    3f78:	d045      	beq.n	4006 <mpu_configure_regions+0x9e>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    3f7a:	b1c3      	cbz	r3, 3fae <mpu_configure_regions+0x46>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    3f7c:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    3f80:	ea14 0f0c 	tst.w	r4, ip
    3f84:	d00d      	beq.n	3fa2 <mpu_configure_regions+0x3a>
    3f86:	4a22      	ldr	r2, [pc, #136]	; (4010 <mpu_configure_regions+0xa8>)
    3f88:	4b22      	ldr	r3, [pc, #136]	; (4014 <mpu_configure_regions+0xac>)
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    3f8a:	4823      	ldr	r0, [pc, #140]	; (4018 <mpu_configure_regions+0xb0>)
    3f8c:	1ad2      	subs	r2, r2, r3
    3f8e:	08d2      	lsrs	r2, r2, #3
    3f90:	0192      	lsls	r2, r2, #6
    3f92:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    3f96:	f004 f832 	bl	7ffe <log_1>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    3f9a:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    3f9e:	4610      	mov	r0, r2
    3fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
    3fa2:	2c1f      	cmp	r4, #31
    3fa4:	d9ef      	bls.n	3f86 <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
    3fa6:	6805      	ldr	r5, [r0, #0]
		&&
    3fa8:	ea1c 0f05 	tst.w	ip, r5
    3fac:	d1eb      	bne.n	3f86 <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    3fae:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    3fb0:	b2d5      	uxtb	r5, r2
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    3fb2:	f8d0 c008 	ldr.w	ip, [r0, #8]
	region_conf.base = new_region->start;
    3fb6:	6802      	ldr	r2, [r0, #0]
    3fb8:	d916      	bls.n	3fe8 <mpu_configure_regions+0x80>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    3fba:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    3fbe:	d815      	bhi.n	3fec <mpu_configure_regions+0x84>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    3fc0:	3c01      	subs	r4, #1
    3fc2:	fab4 f484 	clz	r4, r4
    3fc6:	f1c4 041f 	rsb	r4, r4, #31
    3fca:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    3fcc:	2d07      	cmp	r5, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    3fce:	ea4c 0404 	orr.w	r4, ip, r4
    3fd2:	d90d      	bls.n	3ff0 <mpu_configure_regions+0x88>
    3fd4:	4a0e      	ldr	r2, [pc, #56]	; (4010 <mpu_configure_regions+0xa8>)
    3fd6:	4b0f      	ldr	r3, [pc, #60]	; (4014 <mpu_configure_regions+0xac>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    3fd8:	4810      	ldr	r0, [pc, #64]	; (401c <mpu_configure_regions+0xb4>)
    3fda:	1ad2      	subs	r2, r2, r3
    3fdc:	08d2      	lsrs	r2, r2, #3
    3fde:	0192      	lsls	r2, r2, #6
    3fe0:	f042 0201 	orr.w	r2, r2, #1
    3fe4:	4629      	mov	r1, r5
    3fe6:	e7d6      	b.n	3f96 <mpu_configure_regions+0x2e>
		return REGION_32B;
    3fe8:	2408      	movs	r4, #8
    3fea:	e7ef      	b.n	3fcc <mpu_configure_regions+0x64>
		return REGION_4G;
    3fec:	243e      	movs	r4, #62	; 0x3e
    3fee:	e7ed      	b.n	3fcc <mpu_configure_regions+0x64>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3ff0:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    3ff4:	432a      	orrs	r2, r5
    3ff6:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    3ffa:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    3ffe:	60bd      	str	r5, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4000:	60fa      	str	r2, [r7, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    4002:	613c      	str	r4, [r7, #16]
		reg_index++;
    4004:	1c6a      	adds	r2, r5, #1
	for (i = 0; i < regions_num; i++) {
    4006:	3101      	adds	r1, #1
    4008:	300c      	adds	r0, #12
    400a:	e7b1      	b.n	3f70 <mpu_configure_regions+0x8>
    400c:	e000ed90 	.word	0xe000ed90
    4010:	0000935c 	.word	0x0000935c
    4014:	00009344 	.word	0x00009344
    4018:	00009c01 	.word	0x00009c01
    401c:	00009c24 	.word	0x00009c24

00004020 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    4020:	4b03      	ldr	r3, [pc, #12]	; (4030 <arm_core_mpu_enable+0x10>)
    4022:	2205      	movs	r2, #5
    4024:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    4026:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    402a:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    402e:	4770      	bx	lr
    4030:	e000ed90 	.word	0xe000ed90

00004034 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    4034:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    4038:	4b01      	ldr	r3, [pc, #4]	; (4040 <arm_core_mpu_disable+0xc>)
    403a:	2200      	movs	r2, #0
    403c:	605a      	str	r2, [r3, #4]
}
    403e:	4770      	bx	lr
    4040:	e000ed90 	.word	0xe000ed90

00004044 <arm_mpu_init>:
 */
static int arm_mpu_init(const struct device *arg)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    4044:	4913      	ldr	r1, [pc, #76]	; (4094 <arm_mpu_init+0x50>)
    4046:	6808      	ldr	r0, [r1, #0]
    4048:	2808      	cmp	r0, #8
{
    404a:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    404c:	d81e      	bhi.n	408c <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    404e:	f7ff fff1 	bl	4034 <arm_core_mpu_disable>
	MPU->RNR = index;
    4052:	4c11      	ldr	r4, [pc, #68]	; (4098 <arm_mpu_init+0x54>)
    4054:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4056:	2200      	movs	r2, #0
    4058:	4290      	cmp	r0, r2
    405a:	f101 010c 	add.w	r1, r1, #12
    405e:	d105      	bne.n	406c <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    4060:	4b0e      	ldr	r3, [pc, #56]	; (409c <arm_mpu_init+0x58>)
    4062:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    4064:	f7ff ffdc 	bl	4020 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    4068:	2000      	movs	r0, #0
}
    406a:	bd10      	pop	{r4, pc}
    406c:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    406e:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    4072:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    4076:	4313      	orrs	r3, r2
    4078:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    407c:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    407e:	f851 3c04 	ldr.w	r3, [r1, #-4]
    4082:	f043 0301 	orr.w	r3, r3, #1
    4086:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4088:	3201      	adds	r2, #1
    408a:	e7e5      	b.n	4058 <arm_mpu_init+0x14>
		return -1;
    408c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4090:	e7eb      	b.n	406a <arm_mpu_init+0x26>
    4092:	bf00      	nop
    4094:	000094a4 	.word	0x000094a4
    4098:	e000ed90 	.word	0xe000ed90
    409c:	20000dad 	.word	0x20000dad

000040a0 <arm_core_mpu_configure_static_mpu_regions>:
{
    40a0:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    40a2:	4c03      	ldr	r4, [pc, #12]	; (40b0 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    40a4:	2301      	movs	r3, #1
    40a6:	7822      	ldrb	r2, [r4, #0]
    40a8:	f7ff ff5e 	bl	3f68 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    40ac:	7020      	strb	r0, [r4, #0]
}
    40ae:	bd10      	pop	{r4, pc}
    40b0:	20000dad 	.word	0x20000dad

000040b4 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    40b4:	4b01      	ldr	r3, [pc, #4]	; (40bc <__stdout_hook_install+0x8>)
    40b6:	6018      	str	r0, [r3, #0]
}
    40b8:	4770      	bx	lr
    40ba:	bf00      	nop
    40bc:	2000000c 	.word	0x2000000c

000040c0 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    40c0:	f04f 0320 	mov.w	r3, #32
    40c4:	f3ef 8211 	mrs	r2, BASEPRI
    40c8:	f383 8811 	msr	BASEPRI, r3
    40cc:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    40d0:	4906      	ldr	r1, [pc, #24]	; (40ec <nordicsemi_nrf52_init+0x2c>)
    40d2:	2301      	movs	r3, #1
    40d4:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    40d8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    40dc:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    40e0:	f382 8811 	msr	BASEPRI, r2
    40e4:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    40e8:	2000      	movs	r0, #0
    40ea:	4770      	bx	lr
    40ec:	4001e000 	.word	0x4001e000

000040f0 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    40f0:	b120      	cbz	r0, 40fc <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    40f2:	4b03      	ldr	r3, [pc, #12]	; (4100 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    40f4:	0180      	lsls	r0, r0, #6
    40f6:	f043 0301 	orr.w	r3, r3, #1
    40fa:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    40fc:	4770      	bx	lr
    40fe:	bf00      	nop
    4100:	000093f0 	.word	0x000093f0

00004104 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    4104:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    4106:	4b09      	ldr	r3, [pc, #36]	; (412c <gpio_nrfx_init+0x28>)
    4108:	781a      	ldrb	r2, [r3, #0]
    410a:	b96a      	cbnz	r2, 4128 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    410c:	2101      	movs	r1, #1
    410e:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    4110:	2006      	movs	r0, #6
    4112:	2105      	movs	r1, #5
    4114:	f7ff fbd8 	bl	38c8 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
    4118:	2006      	movs	r0, #6
    411a:	f7ff fbb7 	bl	388c <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    411e:	4b04      	ldr	r3, [pc, #16]	; (4130 <gpio_nrfx_init+0x2c>)
    4120:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    4124:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    4128:	2000      	movs	r0, #0
    412a:	bd08      	pop	{r3, pc}
    412c:	20000dae 	.word	0x20000dae
    4130:	40006000 	.word	0x40006000

00004134 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    4134:	4b2b      	ldr	r3, [pc, #172]	; (41e4 <gpio_nrfx_config+0xb0>)
{
    4136:	b5f0      	push	{r4, r5, r6, r7, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4138:	6844      	ldr	r4, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    413a:	482b      	ldr	r0, [pc, #172]	; (41e8 <gpio_nrfx_config+0xb4>)
    413c:	4013      	ands	r3, r2
    413e:	4283      	cmp	r3, r0
    4140:	d041      	beq.n	41c6 <gpio_nrfx_config+0x92>
    4142:	d80d      	bhi.n	4160 <gpio_nrfx_config+0x2c>
    4144:	2b06      	cmp	r3, #6
    4146:	d015      	beq.n	4174 <gpio_nrfx_config+0x40>
    4148:	d805      	bhi.n	4156 <gpio_nrfx_config+0x22>
    414a:	b19b      	cbz	r3, 4174 <gpio_nrfx_config+0x40>
    414c:	2b02      	cmp	r3, #2
    414e:	d03c      	beq.n	41ca <gpio_nrfx_config+0x96>
    4150:	f06f 0015 	mvn.w	r0, #21
    4154:	e036      	b.n	41c4 <gpio_nrfx_config+0x90>
    4156:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    415a:	d1f9      	bne.n	4150 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
    415c:	2301      	movs	r3, #1
    415e:	e009      	b.n	4174 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    4160:	4822      	ldr	r0, [pc, #136]	; (41ec <gpio_nrfx_config+0xb8>)
    4162:	4283      	cmp	r3, r0
    4164:	d033      	beq.n	41ce <gpio_nrfx_config+0x9a>
    4166:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    416a:	d032      	beq.n	41d2 <gpio_nrfx_config+0x9e>
    416c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    4170:	d1ee      	bne.n	4150 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
    4172:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
    4174:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
    4176:	bf54      	ite	pl
    4178:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
    417c:	2603      	movmi	r6, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    417e:	f482 7580 	eor.w	r5, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
    4182:	0597      	lsls	r7, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
    4184:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    4188:	f3c5 2500 	ubfx	r5, r5, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    418c:	d507      	bpl.n	419e <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    418e:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4192:	6867      	ldr	r7, [r4, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    4194:	d01f      	beq.n	41d6 <gpio_nrfx_config+0xa2>
			nrf_gpio_port_out_set(reg, BIT(pin));
    4196:	2201      	movs	r2, #1
    4198:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    419a:	f8c7 2508 	str.w	r2, [r7, #1288]	; 0x508
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    419e:	7a22      	ldrb	r2, [r4, #8]
        case 1: return NRF_P1;
    41a0:	4c13      	ldr	r4, [pc, #76]	; (41f0 <gpio_nrfx_config+0xbc>)
    41a2:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    41a4:	f001 011f 	and.w	r1, r1, #31
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    41a8:	ea40 0245 	orr.w	r2, r0, r5, lsl #1
        case 1: return NRF_P1;
    41ac:	bf18      	it	ne
    41ae:	f04f 44a0 	movne.w	r4, #1342177280	; 0x50000000
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    41b2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    41b6:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    41ba:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    41be:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
	return 0;
    41c2:	2000      	movs	r0, #0
}
    41c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
    41c6:	2307      	movs	r3, #7
    41c8:	e7d4      	b.n	4174 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
    41ca:	2304      	movs	r3, #4
    41cc:	e7d2      	b.n	4174 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
    41ce:	2305      	movs	r3, #5
    41d0:	e7d0      	b.n	4174 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
    41d2:	2303      	movs	r3, #3
    41d4:	e7ce      	b.n	4174 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    41d6:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
    41d8:	bf42      	ittt	mi
    41da:	2201      	movmi	r2, #1
    41dc:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
    41de:	f8c7 250c 	strmi.w	r2, [r7, #1292]	; 0x50c
}
    41e2:	e7dc      	b.n	419e <gpio_nrfx_config+0x6a>
    41e4:	00f00006 	.word	0x00f00006
    41e8:	00100006 	.word	0x00100006
    41ec:	00400002 	.word	0x00400002
    41f0:	50000300 	.word	0x50000300

000041f4 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
    41f4:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    41f8:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    41fa:	4b08      	ldr	r3, [pc, #32]	; (421c <nrf_gpio_cfg_sense_set+0x28>)
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    41fc:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
    41fe:	bf18      	it	ne
    4200:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    4204:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4208:	f8d3 2700 	ldr.w	r2, [r3, #1792]	; 0x700
    420c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    4210:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    4214:	f8c3 2700 	str.w	r2, [r3, #1792]	; 0x700
}
    4218:	4770      	bx	lr
    421a:	bf00      	nop
    421c:	50000300 	.word	0x50000300

00004220 <check_level_trigger_pins>:
{
    4220:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct gpio_nrfx_data *data = get_port_data(port);
    4224:	6903      	ldr	r3, [r0, #16]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    4226:	f8d0 a004 	ldr.w	sl, [r0, #4]
	uint32_t out = data->pin_int_en;
    422a:	68de      	ldr	r6, [r3, #12]
        case 1: return NRF_P1;
    422c:	f8df b07c 	ldr.w	fp, [pc, #124]	; 42ac <check_level_trigger_pins+0x8c>
{
    4230:	4688      	mov	r8, r1
	out &= ~data->trig_edge & ~data->double_edge;
    4232:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
    4236:	430a      	orrs	r2, r1
    4238:	ea26 0602 	bic.w	r6, r6, r2
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
    423c:	f8da 2004 	ldr.w	r2, [sl, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    4240:	691b      	ldr	r3, [r3, #16]
    return p_reg->IN;
    4242:	f8d2 5510 	ldr.w	r5, [r2, #1296]	; 0x510
    4246:	405d      	eors	r5, r3
	uint32_t out = pin_states & level_pins;
    4248:	ea26 0505 	bic.w	r5, r6, r5
	uint32_t check_pins = level_pins;
    424c:	4637      	mov	r7, r6
	uint32_t bit = 1U << pin;
    424e:	2401      	movs	r4, #1
	uint32_t pin = 0U;
    4250:	f04f 0900 	mov.w	r9, #0
	while (check_pins) {
    4254:	b917      	cbnz	r7, 425c <check_level_trigger_pins+0x3c>
}
    4256:	4628      	mov	r0, r5
    4258:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (check_pins & bit) {
    425c:	423c      	tst	r4, r7
    425e:	d021      	beq.n	42a4 <check_level_trigger_pins+0x84>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    4260:	f89a 3008 	ldrb.w	r3, [sl, #8]
    4264:	f009 001f 	and.w	r0, r9, #31
			if (!(level_pins & bit)) {
    4268:	4234      	tst	r4, r6
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    426a:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
			if (!(level_pins & bit)) {
    426e:	d114      	bne.n	429a <check_level_trigger_pins+0x7a>
    return pin_number >> 5;
    4270:	0942      	lsrs	r2, r0, #5
        case 1: return NRF_P1;
    4272:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    4274:	f000 031f 	and.w	r3, r0, #31
        case 1: return NRF_P1;
    4278:	bf14      	ite	ne
    427a:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    427e:	465a      	moveq	r2, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4280:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    4284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    4288:	f3c3 4301 	ubfx	r3, r3, #16, #2
				if (high) {
    428c:	2b02      	cmp	r3, #2
					*sense_levels |= bit;
    428e:	bf02      	ittt	eq
    4290:	f8d8 3000 	ldreq.w	r3, [r8]
    4294:	4323      	orreq	r3, r4
    4296:	f8c8 3000 	streq.w	r3, [r8]
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    429a:	2100      	movs	r1, #0
    429c:	f7ff ffaa 	bl	41f4 <nrf_gpio_cfg_sense_set>
			check_pins &= ~bit;
    42a0:	ea27 0704 	bic.w	r7, r7, r4
		++pin;
    42a4:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
    42a8:	0064      	lsls	r4, r4, #1
    42aa:	e7d3      	b.n	4254 <check_level_trigger_pins+0x34>
    42ac:	50000300 	.word	0x50000300

000042b0 <gpio_nrfx_pin_interrupt_configure>:
{
    42b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    42b2:	460e      	mov	r6, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    42b4:	6841      	ldr	r1, [r0, #4]
	struct gpio_nrfx_data *data = get_port_data(port);
    42b6:	6907      	ldr	r7, [r0, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    42b8:	7a09      	ldrb	r1, [r1, #8]
    42ba:	f006 051f 	and.w	r5, r6, #31
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
    42be:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    42c2:	ea45 1541 	orr.w	r5, r5, r1, lsl #5
    42c6:	d110      	bne.n	42ea <gpio_nrfx_pin_interrupt_configure+0x3a>
    return pin_number >> 5;
    42c8:	0968      	lsrs	r0, r5, #5
        case 1: return NRF_P1;
    42ca:	2801      	cmp	r0, #1
    *p_pin = pin_number & 0x1F;
    42cc:	f005 011f 	and.w	r1, r5, #31
        case 1: return NRF_P1;
    42d0:	485d      	ldr	r0, [pc, #372]	; (4448 <gpio_nrfx_pin_interrupt_configure+0x198>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    42d2:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
        case 1: return NRF_P1;
    42d6:	bf18      	it	ne
    42d8:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    42dc:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    42e0:	07c8      	lsls	r0, r1, #31
    42e2:	d507      	bpl.n	42f4 <gpio_nrfx_pin_interrupt_configure+0x44>
		return -ENOTSUP;
    42e4:	f06f 0085 	mvn.w	r0, #133	; 0x85
    42e8:	e093      	b.n	4412 <gpio_nrfx_pin_interrupt_configure+0x162>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    42ea:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    42ee:	68f9      	ldr	r1, [r7, #12]
    42f0:	f000 8091 	beq.w	4416 <gpio_nrfx_pin_interrupt_configure+0x166>
    42f4:	68f8      	ldr	r0, [r7, #12]
    42f6:	2101      	movs	r1, #1
    42f8:	40b1      	lsls	r1, r6
    42fa:	4301      	orrs	r1, r0
    42fc:	6978      	ldr	r0, [r7, #20]
    42fe:	60f9      	str	r1, [r7, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    4300:	2101      	movs	r1, #1
    4302:	40b1      	lsls	r1, r6
    4304:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    4308:	69ba      	ldr	r2, [r7, #24]
    430a:	bf0c      	ite	eq
    430c:	4308      	orreq	r0, r1
    430e:	4388      	bicne	r0, r1
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    4310:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    4314:	bf0c      	ite	eq
    4316:	430a      	orreq	r2, r1
    4318:	438a      	bicne	r2, r1
    431a:	61ba      	str	r2, [r7, #24]
    431c:	693a      	ldr	r2, [r7, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    431e:	6178      	str	r0, [r7, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    4320:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    4324:	bf0c      	ite	eq
    4326:	4311      	orreq	r1, r2
    4328:	ea22 0101 	bicne.w	r1, r2, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    432c:	4a47      	ldr	r2, [pc, #284]	; (444c <gpio_nrfx_pin_interrupt_configure+0x19c>)
    432e:	6139      	str	r1, [r7, #16]
    4330:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    4334:	2000      	movs	r0, #0
    4336:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    4338:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    433c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    4340:	f3c1 2105 	ubfx	r1, r1, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    4344:	428d      	cmp	r5, r1
    4346:	d16b      	bne.n	4420 <gpio_nrfx_pin_interrupt_configure+0x170>
		    && (intenset & BIT(i))) {
    4348:	fa23 f100 	lsr.w	r1, r3, r0
    434c:	07c9      	lsls	r1, r1, #31
    434e:	d567      	bpl.n	4420 <gpio_nrfx_pin_interrupt_configure+0x170>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    4350:	0083      	lsls	r3, r0, #2
    4352:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4356:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    435a:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    435e:	f021 0101 	bic.w	r1, r1, #1
    4362:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    4366:	2301      	movs	r3, #1
    4368:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
    436a:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
    436e:	b2c0      	uxtb	r0, r0
    4370:	f001 fffa 	bl	6368 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    4374:	4628      	mov	r0, r5
    4376:	2100      	movs	r1, #0
    4378:	f7ff ff3c 	bl	41f4 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
    437c:	68f8      	ldr	r0, [r7, #12]
    437e:	40f0      	lsrs	r0, r6
    4380:	f010 0001 	ands.w	r0, r0, #1
    4384:	d045      	beq.n	4412 <gpio_nrfx_pin_interrupt_configure+0x162>
		if (data->trig_edge & BIT(pin)) {
    4386:	6978      	ldr	r0, [r7, #20]
    4388:	40f0      	lsrs	r0, r6
    438a:	f010 0401 	ands.w	r4, r0, #1
    438e:	d04e      	beq.n	442e <gpio_nrfx_pin_interrupt_configure+0x17e>
				if (data->double_edge & BIT(pin)) {
    4390:	69bb      	ldr	r3, [r7, #24]
    4392:	40f3      	lsrs	r3, r6
    4394:	07db      	lsls	r3, r3, #31
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
    4396:	bf5f      	itttt	pl
    4398:	6939      	ldrpl	r1, [r7, #16]
    439a:	fa21 f606 	lsrpl.w	r6, r1, r6
    439e:	f006 0601 	andpl.w	r6, r6, #1
    43a2:	f1c6 0602 	rsbpl	r6, r6, #2
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    43a6:	f10d 0007 	add.w	r0, sp, #7
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
    43aa:	bf54      	ite	pl
    43ac:	b2f6      	uxtbpl	r6, r6
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
    43ae:	2603      	movmi	r6, #3
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    43b0:	f001 fffc 	bl	63ac <nrfx_gpiote_channel_alloc>
    43b4:	4b26      	ldr	r3, [pc, #152]	; (4450 <gpio_nrfx_pin_interrupt_configure+0x1a0>)
    43b6:	4298      	cmp	r0, r3
    43b8:	d136      	bne.n	4428 <gpio_nrfx_pin_interrupt_configure+0x178>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
    43ba:	f89d 1007 	ldrb.w	r1, [sp, #7]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    43be:	008b      	lsls	r3, r1, #2
    43c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    43c4:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    43c8:	022d      	lsls	r5, r5, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    43ca:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    43ce:	f422 324f 	bic.w	r2, r2, #211968	; 0x33c00
    43d2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    43d6:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    43da:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    43de:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
    43e2:	4315      	orrs	r5, r2
    return ((uint32_t)p_reg + event);
    43e4:	008a      	lsls	r2, r1, #2
    43e6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    43ea:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    43ee:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    43f2:	2000      	movs	r0, #0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    43f4:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    43f8:	6010      	str	r0, [r2, #0]
    43fa:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    43fc:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    4400:	f042 0201 	orr.w	r2, r2, #1
    4404:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->INTENSET = mask;
    4408:	4a10      	ldr	r2, [pc, #64]	; (444c <gpio_nrfx_pin_interrupt_configure+0x19c>)
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    440a:	2301      	movs	r3, #1
    440c:	408b      	lsls	r3, r1
    440e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    4412:	b003      	add	sp, #12
    4414:	bdf0      	pop	{r4, r5, r6, r7, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    4416:	2001      	movs	r0, #1
    4418:	40b0      	lsls	r0, r6
    441a:	ea21 0100 	bic.w	r1, r1, r0
    441e:	e76d      	b.n	42fc <gpio_nrfx_pin_interrupt_configure+0x4c>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    4420:	3001      	adds	r0, #1
    4422:	2808      	cmp	r0, #8
    4424:	d188      	bne.n	4338 <gpio_nrfx_pin_interrupt_configure+0x88>
    4426:	e7a5      	b.n	4374 <gpio_nrfx_pin_interrupt_configure+0xc4>
		return -ENODEV;
    4428:	f06f 0012 	mvn.w	r0, #18
    442c:	e7f1      	b.n	4412 <gpio_nrfx_pin_interrupt_configure+0x162>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    442e:	6939      	ldr	r1, [r7, #16]
    4430:	40f1      	lsrs	r1, r6
    4432:	f001 0101 	and.w	r1, r1, #1
    4436:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    443a:	4628      	mov	r0, r5
    443c:	b2c9      	uxtb	r1, r1
    443e:	f7ff fed9 	bl	41f4 <nrf_gpio_cfg_sense_set>
	int res = 0;
    4442:	4620      	mov	r0, r4
    4444:	e7e5      	b.n	4412 <gpio_nrfx_pin_interrupt_configure+0x162>
    4446:	bf00      	nop
    4448:	50000300 	.word	0x50000300
    444c:	40006000 	.word	0x40006000
    4450:	0bad0000 	.word	0x0bad0000

00004454 <gpiote_event_handler>:
{
    4454:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    4456:	2400      	movs	r4, #0
{
    4458:	b085      	sub	sp, #20
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    445a:	e9cd 4400 	strd	r4, r4, [sp]
	uint32_t sense_levels[GPIO_COUNT] = {0};
    445e:	e9cd 4402 	strd	r4, r4, [sp, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4462:	4e26      	ldr	r6, [pc, #152]	; (44fc <gpiote_event_handler+0xa8>)
    4464:	6835      	ldr	r5, [r6, #0]
	if (port_event) {
    4466:	b15d      	cbz	r5, 4480 <gpiote_event_handler+0x2c>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)),
    4468:	a902      	add	r1, sp, #8
    446a:	4825      	ldr	r0, [pc, #148]	; (4500 <gpiote_event_handler+0xac>)
    446c:	f7ff fed8 	bl	4220 <check_level_trigger_pins>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
    4470:	a903      	add	r1, sp, #12
		fired_triggers[0] =
    4472:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
    4474:	4823      	ldr	r0, [pc, #140]	; (4504 <gpiote_event_handler+0xb0>)
    4476:	f7ff fed3 	bl	4220 <check_level_trigger_pins>
		fired_triggers[1] =
    447a:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    447c:	6034      	str	r4, [r6, #0]
    447e:	6833      	ldr	r3, [r6, #0]
    return p_reg->INTENSET & mask;
    4480:	4c21      	ldr	r4, [pc, #132]	; (4508 <gpiote_event_handler+0xb4>)
{
    4482:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    4484:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4486:	4694      	mov	ip, r2
    return p_reg->INTENSET & mask;
    4488:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
    448c:	fa06 f102 	lsl.w	r1, r6, r2
    4490:	4219      	tst	r1, r3
    4492:	d01b      	beq.n	44cc <gpiote_event_handler+0x78>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4494:	0091      	lsls	r1, r2, #2
    4496:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    449a:	f501 41c2 	add.w	r1, r1, #24832	; 0x6100
    449e:	680b      	ldr	r3, [r1, #0]
    44a0:	b1a3      	cbz	r3, 44cc <gpiote_event_handler+0x78>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    44a2:	f502 73a2 	add.w	r3, r2, #324	; 0x144
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    44a6:	af04      	add	r7, sp, #16
    44a8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    44ac:	f8c1 c000 	str.w	ip, [r1]
    44b0:	f3c3 3040 	ubfx	r0, r3, #13, #1
    44b4:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    44b8:	f3c3 2304 	ubfx	r3, r3, #8, #5
    44bc:	f850 7c10 	ldr.w	r7, [r0, #-16]
    44c0:	fa06 f303 	lsl.w	r3, r6, r3
    44c4:	433b      	orrs	r3, r7
    44c6:	f840 3c10 	str.w	r3, [r0, #-16]
    44ca:	680b      	ldr	r3, [r1, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    44cc:	3201      	adds	r2, #1
    44ce:	2a08      	cmp	r2, #8
    44d0:	d1da      	bne.n	4488 <gpiote_event_handler+0x34>
	if (fired_triggers[0]) {
    44d2:	9a00      	ldr	r2, [sp, #0]
    44d4:	b11a      	cbz	r2, 44de <gpiote_event_handler+0x8a>
	gpio_fire_callbacks(list, port, pins);
    44d6:	490a      	ldr	r1, [pc, #40]	; (4500 <gpiote_event_handler+0xac>)
    44d8:	480c      	ldr	r0, [pc, #48]	; (450c <gpiote_event_handler+0xb8>)
    44da:	f004 f99b 	bl	8814 <gpio_fire_callbacks>
	if (fired_triggers[1]) {
    44de:	9a01      	ldr	r2, [sp, #4]
    44e0:	b11a      	cbz	r2, 44ea <gpiote_event_handler+0x96>
	gpio_fire_callbacks(list, port, pins);
    44e2:	4908      	ldr	r1, [pc, #32]	; (4504 <gpiote_event_handler+0xb0>)
    44e4:	480a      	ldr	r0, [pc, #40]	; (4510 <gpiote_event_handler+0xbc>)
    44e6:	f004 f995 	bl	8814 <gpio_fire_callbacks>
	if (port_event) {
    44ea:	b12d      	cbz	r5, 44f8 <gpiote_event_handler+0xa4>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
    44ec:	4804      	ldr	r0, [pc, #16]	; (4500 <gpiote_event_handler+0xac>)
    44ee:	f004 f9fb 	bl	88e8 <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
    44f2:	4804      	ldr	r0, [pc, #16]	; (4504 <gpiote_event_handler+0xb0>)
    44f4:	f004 f9f8 	bl	88e8 <cfg_level_pins>
}
    44f8:	b005      	add	sp, #20
    44fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    44fc:	4000617c 	.word	0x4000617c
    4500:	2000010c 	.word	0x2000010c
    4504:	20000124 	.word	0x20000124
    4508:	40006000 	.word	0x40006000
    450c:	200005e0 	.word	0x200005e0
    4510:	200005fc 	.word	0x200005fc

00004514 <spi_1_init>:
#ifdef CONFIG_SPI_0_NRF_SPI
SPI_NRFX_SPI_DEVICE(0);
#endif

#ifdef CONFIG_SPI_1_NRF_SPI
SPI_NRFX_SPI_DEVICE(1);
    4514:	b538      	push	{r3, r4, r5, lr}
    4516:	4604      	mov	r4, r0
    4518:	2200      	movs	r2, #0
    451a:	2101      	movs	r1, #1
    451c:	2004      	movs	r0, #4
    451e:	f7ff f9d3 	bl	38c8 <z_arm_irq_priority_set>
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
    4522:	6923      	ldr	r3, [r4, #16]
	result = nrfx_spi_init(&get_dev_config(dev)->spi,
    4524:	4a0e      	ldr	r2, [pc, #56]	; (4560 <spi_1_init+0x4c>)
	dev_data->dev = dev;
    4526:	64dc      	str	r4, [r3, #76]	; 0x4c
	result = nrfx_spi_init(&get_dev_config(dev)->spi,
    4528:	6860      	ldr	r0, [r4, #4]
    452a:	f100 0108 	add.w	r1, r0, #8
    452e:	f001 ff83 	bl	6438 <nrfx_spi_init>
	if (result != NRFX_SUCCESS) {
    4532:	4b0c      	ldr	r3, [pc, #48]	; (4564 <spi_1_init+0x50>)
    4534:	4298      	cmp	r0, r3
    4536:	d011      	beq.n	455c <spi_1_init+0x48>
    4538:	4b0b      	ldr	r3, [pc, #44]	; (4568 <spi_1_init+0x54>)
    453a:	4a0c      	ldr	r2, [pc, #48]	; (456c <spi_1_init+0x58>)
		LOG_ERR("Failed to initialize device: %s", dev->name);
    453c:	6821      	ldr	r1, [r4, #0]
    453e:	480c      	ldr	r0, [pc, #48]	; (4570 <spi_1_init+0x5c>)
    4540:	1ad2      	subs	r2, r2, r3
    4542:	08d2      	lsrs	r2, r2, #3
    4544:	0192      	lsls	r2, r2, #6
    4546:	f042 0201 	orr.w	r2, r2, #1
    454a:	f003 fd58 	bl	7ffe <log_1>
		return -EBUSY;
    454e:	f06f 050f 	mvn.w	r5, #15
SPI_NRFX_SPI_DEVICE(1);
    4552:	6920      	ldr	r0, [r4, #16]
    4554:	f004 fa23 	bl	899e <spi_context_unlock_unconditionally>
    4558:	4628      	mov	r0, r5
    455a:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
    455c:	2500      	movs	r5, #0
    455e:	e7f8      	b.n	4552 <spi_1_init+0x3e>
    4560:	00004875 	.word	0x00004875
    4564:	0bad0000 	.word	0x0bad0000
    4568:	00009344 	.word	0x00009344
    456c:	0000937c 	.word	0x0000937c
    4570:	00009c6b 	.word	0x00009c6b

00004574 <transfer_next_chunk>:
{
    4574:	b530      	push	{r4, r5, lr}
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
    4576:	6905      	ldr	r5, [r0, #16]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
    4578:	6c2a      	ldr	r2, [r5, #64]	; 0x40
    457a:	6cab      	ldr	r3, [r5, #72]	; 0x48
{
    457c:	b085      	sub	sp, #20
    457e:	b982      	cbnz	r2, 45a2 <transfer_next_chunk+0x2e>
	if (chunk_len > 0) {
    4580:	bb73      	cbnz	r3, 45e0 <transfer_next_chunk+0x6c>
	int error = 0;
    4582:	461c      	mov	r4, r3
	_spi_context_cs_control(ctx, on, false);
    4584:	2200      	movs	r2, #0
    4586:	4611      	mov	r1, r2
    4588:	4628      	mov	r0, r5
    458a:	f004 f9e3 	bl	8954 <_spi_context_cs_control.isra.0>
	ctx->sync_status = status;
    458e:	62ac      	str	r4, [r5, #40]	; 0x28
	z_impl_k_sem_give(sem);
    4590:	f105 0018 	add.w	r0, r5, #24
    4594:	f002 fed0 	bl	7338 <z_impl_k_sem_give>
	dev_data->busy = false;
    4598:	2300      	movs	r3, #0
    459a:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
}
    459e:	b005      	add	sp, #20
    45a0:	bd30      	pop	{r4, r5, pc}
		return ctx->rx_len;
	} else if (!ctx->rx_len) {
    45a2:	4611      	mov	r1, r2
    45a4:	b113      	cbz	r3, 45ac <transfer_next_chunk+0x38>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
    45a6:	429a      	cmp	r2, r3
    45a8:	bf28      	it	cs
    45aa:	4619      	movcs	r1, r3
		xfer.p_tx_buffer = ctx->tx_buf;
    45ac:	6bec      	ldr	r4, [r5, #60]	; 0x3c
		dev_data->chunk_len = chunk_len;
    45ae:	6529      	str	r1, [r5, #80]	; 0x50
		xfer.p_tx_buffer = ctx->tx_buf;
    45b0:	9400      	str	r4, [sp, #0]
	return !!(ctx->tx_buf && ctx->tx_len);
    45b2:	b1bc      	cbz	r4, 45e4 <transfer_next_chunk+0x70>
    45b4:	2a00      	cmp	r2, #0
    45b6:	bf18      	it	ne
    45b8:	460a      	movne	r2, r1
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    45ba:	9201      	str	r2, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
    45bc:	6c6a      	ldr	r2, [r5, #68]	; 0x44
    45be:	9202      	str	r2, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
    45c0:	b192      	cbz	r2, 45e8 <transfer_next_chunk+0x74>
    45c2:	2b00      	cmp	r3, #0
    45c4:	bf18      	it	ne
    45c6:	460b      	movne	r3, r1
		result = nrfx_spi_xfer(&get_dev_config(dev)->spi, &xfer, 0);
    45c8:	6840      	ldr	r0, [r0, #4]
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    45ca:	9303      	str	r3, [sp, #12]
		result = nrfx_spi_xfer(&get_dev_config(dev)->spi, &xfer, 0);
    45cc:	2200      	movs	r2, #0
    45ce:	4669      	mov	r1, sp
    45d0:	f001 ffd4 	bl	657c <nrfx_spi_xfer>
		if (result == NRFX_SUCCESS) {
    45d4:	4b05      	ldr	r3, [pc, #20]	; (45ec <transfer_next_chunk+0x78>)
    45d6:	4298      	cmp	r0, r3
    45d8:	d0e1      	beq.n	459e <transfer_next_chunk+0x2a>
		error = -EIO;
    45da:	f06f 0404 	mvn.w	r4, #4
    45de:	e7d1      	b.n	4584 <transfer_next_chunk+0x10>
    45e0:	4619      	mov	r1, r3
    45e2:	e7e3      	b.n	45ac <transfer_next_chunk+0x38>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    45e4:	4622      	mov	r2, r4
    45e6:	e7e8      	b.n	45ba <transfer_next_chunk+0x46>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    45e8:	4613      	mov	r3, r2
    45ea:	e7ed      	b.n	45c8 <transfer_next_chunk+0x54>
    45ec:	0bad0000 	.word	0x0bad0000

000045f0 <spi_nrfx_transceive>:
{
    45f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    45f4:	461e      	mov	r6, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    45f6:	888b      	ldrh	r3, [r1, #4]
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
    45f8:	6904      	ldr	r4, [r0, #16]
    45fa:	045b      	lsls	r3, r3, #17
{
    45fc:	4680      	mov	r8, r0
    45fe:	460d      	mov	r5, r1
    4600:	4617      	mov	r7, r2
    4602:	d42d      	bmi.n	4660 <spi_nrfx_transceive+0x70>
	return z_impl_k_sem_take(sem, timeout);
    4604:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4608:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    460c:	f104 0008 	add.w	r0, r4, #8
    4610:	f002 feb2 	bl	7378 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
    4614:	6065      	str	r5, [r4, #4]
	struct spi_context *ctx = &get_dev_data(dev)->ctx;
    4616:	f8d8 2010 	ldr.w	r2, [r8, #16]
	if (spi_context_configured(ctx, spi_cfg)) {
    461a:	6813      	ldr	r3, [r2, #0]
    461c:	429d      	cmp	r5, r3
    461e:	f000 80b3 	beq.w	4788 <spi_nrfx_transceive+0x198>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
    4622:	88ab      	ldrh	r3, [r5, #4]
    4624:	07d8      	lsls	r0, r3, #31
    4626:	d522      	bpl.n	466e <spi_nrfx_transceive+0x7e>
    4628:	4a83      	ldr	r2, [pc, #524]	; (4838 <spi_nrfx_transceive+0x248>)
    462a:	4b84      	ldr	r3, [pc, #528]	; (483c <spi_nrfx_transceive+0x24c>)
		LOG_ERR("Slave mode is not supported on %s",
    462c:	f8d8 1000 	ldr.w	r1, [r8]
    4630:	4883      	ldr	r0, [pc, #524]	; (4840 <spi_nrfx_transceive+0x250>)
    4632:	1ad2      	subs	r2, r2, r3
    4634:	08d2      	lsrs	r2, r2, #3
    4636:	0192      	lsls	r2, r2, #6
    4638:	f042 0201 	orr.w	r2, r2, #1
    463c:	f003 fcdf 	bl	7ffe <log_1>
		return -EINVAL;
    4640:	f06f 0515 	mvn.w	r5, #21
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
    4644:	6823      	ldr	r3, [r4, #0]
    4646:	889b      	ldrh	r3, [r3, #4]
    4648:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
    464c:	d104      	bne.n	4658 <spi_nrfx_transceive+0x68>
		ctx->owner = NULL;
    464e:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    4650:	f104 0008 	add.w	r0, r4, #8
    4654:	f002 fe70 	bl	7338 <z_impl_k_sem_give>
}
    4658:	4628      	mov	r0, r5
    465a:	b003      	add	sp, #12
    465c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    4660:	6923      	ldr	r3, [r4, #16]
    4662:	2b00      	cmp	r3, #0
    4664:	d1ce      	bne.n	4604 <spi_nrfx_transceive+0x14>
		(k_sem_count_get(&ctx->lock) == 0) &&
    4666:	6863      	ldr	r3, [r4, #4]
    4668:	4299      	cmp	r1, r3
    466a:	d1cb      	bne.n	4604 <spi_nrfx_transceive+0x14>
    466c:	e7d3      	b.n	4616 <spi_nrfx_transceive+0x26>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
    466e:	0719      	lsls	r1, r3, #28
    4670:	d50a      	bpl.n	4688 <spi_nrfx_transceive+0x98>
    4672:	4971      	ldr	r1, [pc, #452]	; (4838 <spi_nrfx_transceive+0x248>)
    4674:	4b71      	ldr	r3, [pc, #452]	; (483c <spi_nrfx_transceive+0x24c>)
		LOG_ERR("Loopback mode is not supported");
    4676:	4873      	ldr	r0, [pc, #460]	; (4844 <spi_nrfx_transceive+0x254>)
    4678:	1ac9      	subs	r1, r1, r3
    467a:	08c9      	lsrs	r1, r1, #3
    467c:	0189      	lsls	r1, r1, #6
    467e:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Word sizes other than 8 bits"
    4682:	f003 fcaf 	bl	7fe4 <log_0>
    4686:	e7db      	b.n	4640 <spi_nrfx_transceive+0x50>
	if ((spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
    4688:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
    468c:	d008      	beq.n	46a0 <spi_nrfx_transceive+0xb0>
    468e:	496a      	ldr	r1, [pc, #424]	; (4838 <spi_nrfx_transceive+0x248>)
    4690:	4b6a      	ldr	r3, [pc, #424]	; (483c <spi_nrfx_transceive+0x24c>)
		LOG_ERR("Only single line mode is supported");
    4692:	486d      	ldr	r0, [pc, #436]	; (4848 <spi_nrfx_transceive+0x258>)
    4694:	1ac9      	subs	r1, r1, r3
    4696:	08c9      	lsrs	r1, r1, #3
    4698:	0189      	lsls	r1, r1, #6
    469a:	f041 0101 	orr.w	r1, r1, #1
    469e:	e7f0      	b.n	4682 <spi_nrfx_transceive+0x92>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
    46a0:	f3c3 1345 	ubfx	r3, r3, #5, #6
    46a4:	2b08      	cmp	r3, #8
    46a6:	d008      	beq.n	46ba <spi_nrfx_transceive+0xca>
    46a8:	4963      	ldr	r1, [pc, #396]	; (4838 <spi_nrfx_transceive+0x248>)
    46aa:	4b64      	ldr	r3, [pc, #400]	; (483c <spi_nrfx_transceive+0x24c>)
		LOG_ERR("Word sizes other than 8 bits"
    46ac:	4867      	ldr	r0, [pc, #412]	; (484c <spi_nrfx_transceive+0x25c>)
    46ae:	1ac9      	subs	r1, r1, r3
    46b0:	08c9      	lsrs	r1, r1, #3
    46b2:	0189      	lsls	r1, r1, #6
    46b4:	f041 0101 	orr.w	r1, r1, #1
    46b8:	e7e3      	b.n	4682 <spi_nrfx_transceive+0x92>
	if (spi_cfg->frequency < 125000) {
    46ba:	6829      	ldr	r1, [r5, #0]
    46bc:	4b64      	ldr	r3, [pc, #400]	; (4850 <spi_nrfx_transceive+0x260>)
    46be:	4299      	cmp	r1, r3
    46c0:	d808      	bhi.n	46d4 <spi_nrfx_transceive+0xe4>
    46c2:	495d      	ldr	r1, [pc, #372]	; (4838 <spi_nrfx_transceive+0x248>)
    46c4:	4b5d      	ldr	r3, [pc, #372]	; (483c <spi_nrfx_transceive+0x24c>)
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
    46c6:	4863      	ldr	r0, [pc, #396]	; (4854 <spi_nrfx_transceive+0x264>)
    46c8:	1ac9      	subs	r1, r1, r3
    46ca:	08c9      	lsrs	r1, r1, #3
    46cc:	0189      	lsls	r1, r1, #6
    46ce:	f041 0101 	orr.w	r1, r1, #1
    46d2:	e7d6      	b.n	4682 <spi_nrfx_transceive+0x92>
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
    46d4:	68ab      	ldr	r3, [r5, #8]
	const nrfx_spi_t *spi = &get_dev_config(dev)->spi;
    46d6:	f8d8 9004 	ldr.w	r9, [r8, #4]
	ctx->config = spi_cfg;
    46da:	6015      	str	r5, [r2, #0]
    46dc:	2b00      	cmp	r3, #0
    46de:	d07d      	beq.n	47dc <spi_nrfx_transceive+0x1ec>
    46e0:	6818      	ldr	r0, [r3, #0]
    46e2:	2800      	cmp	r0, #0
    46e4:	d07a      	beq.n	47dc <spi_nrfx_transceive+0x1ec>
				   ctx->config->cs->gpio_dt_flags |
    46e6:	f893 a009 	ldrb.w	sl, [r3, #9]
		gpio_pin_configure(ctx->config->cs->gpio_dev,
    46ea:	7a19      	ldrb	r1, [r3, #8]
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
    46ec:	f8d0 b010 	ldr.w	fp, [r0, #16]
		 != (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH),
		 "Output cannot be initialized low and high");

	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    46f0:	f01a 0f01 	tst.w	sl, #1
    46f4:	bf0c      	ite	eq
    46f6:	f44a 5ab0 	orreq.w	sl, sl, #5632	; 0x1600
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    46fa:	f48a 5ad0 	eorne.w	sl, sl, #6656	; 0x1a00
	return api->pin_configure(port, pin, flags);
    46fe:	6883      	ldr	r3, [r0, #8]
    4700:	9101      	str	r1, [sp, #4]
    4702:	681b      	ldr	r3, [r3, #0]
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    4704:	f42a 5280 	bic.w	r2, sl, #4096	; 0x1000
	return api->pin_configure(port, pin, flags);
    4708:	4798      	blx	r3
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_config(port, pin, flags);
	if (ret != 0) {
    470a:	b968      	cbnz	r0, 4728 <spi_nrfx_transceive+0x138>
		return ret;
	}

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    470c:	9901      	ldr	r1, [sp, #4]
    470e:	f8db 2000 	ldr.w	r2, [fp]
    4712:	2301      	movs	r3, #1
    4714:	fa03 f101 	lsl.w	r1, r3, r1
    4718:	f01a 0f01 	tst.w	sl, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
    471c:	bf14      	ite	ne
    471e:	4311      	orrne	r1, r2
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    4720:	ea22 0101 	biceq.w	r1, r2, r1
    4724:	f8cb 1000 	str.w	r1, [fp]
	nrf_spi_configure(spi->p_reg,
    4728:	88a9      	ldrh	r1, [r5, #4]
    472a:	f8d9 2000 	ldr.w	r2, [r9]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    472e:	0788      	lsls	r0, r1, #30
    4730:	f001 0304 	and.w	r3, r1, #4
    4734:	d55d      	bpl.n	47f2 <spi_nrfx_transceive+0x202>
			return NRF_SPI_MODE_2;
    4736:	2b00      	cmp	r3, #0
    4738:	bf14      	ite	ne
    473a:	2303      	movne	r3, #3
    473c:	2302      	moveq	r3, #2
                                         nrf_spi_mode_t      spi_mode,
                                         nrf_spi_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPI_BIT_ORDER_MSB_FIRST ?
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
    switch (spi_mode)
    473e:	2b02      	cmp	r3, #2
	if (operation & SPI_TRANSFER_LSB) {
    4740:	f3c1 1100 	ubfx	r1, r1, #4, #1
    4744:	d059      	beq.n	47fa <spi_nrfx_transceive+0x20a>
    4746:	2b03      	cmp	r3, #3
    4748:	d05a      	beq.n	4800 <spi_nrfx_transceive+0x210>
    474a:	2b01      	cmp	r3, #1
    474c:	d101      	bne.n	4752 <spi_nrfx_transceive+0x162>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Leading    << SPI_CONFIG_CPHA_Pos);
        break;

    case NRF_SPI_MODE_1:
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
    474e:	f041 0102 	orr.w	r1, r1, #2
	if (frequency < 250000) {
    4752:	4b41      	ldr	r3, [pc, #260]	; (4858 <spi_nrfx_transceive+0x268>)
    case NRF_SPI_MODE_3:
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Trailing   << SPI_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
    4754:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
	nrf_spi_frequency_set(spi->p_reg,
    4758:	6829      	ldr	r1, [r5, #0]
	if (frequency < 250000) {
    475a:	4299      	cmp	r1, r3
    475c:	d953      	bls.n	4806 <spi_nrfx_transceive+0x216>
	} else if (frequency < 500000) {
    475e:	4b3f      	ldr	r3, [pc, #252]	; (485c <spi_nrfx_transceive+0x26c>)
    4760:	4299      	cmp	r1, r3
    4762:	d953      	bls.n	480c <spi_nrfx_transceive+0x21c>
	} else if (frequency < 1000000) {
    4764:	4b3e      	ldr	r3, [pc, #248]	; (4860 <spi_nrfx_transceive+0x270>)
    4766:	4299      	cmp	r1, r3
    4768:	d953      	bls.n	4812 <spi_nrfx_transceive+0x222>
	} else if (frequency < 2000000) {
    476a:	4b3e      	ldr	r3, [pc, #248]	; (4864 <spi_nrfx_transceive+0x274>)
    476c:	4299      	cmp	r1, r3
    476e:	d953      	bls.n	4818 <spi_nrfx_transceive+0x228>
	} else if (frequency < 4000000) {
    4770:	4b3d      	ldr	r3, [pc, #244]	; (4868 <spi_nrfx_transceive+0x278>)
    4772:	4299      	cmp	r1, r3
    4774:	d953      	bls.n	481e <spi_nrfx_transceive+0x22e>
		return NRF_SPI_FREQ_8M;
    4776:	4b3d      	ldr	r3, [pc, #244]	; (486c <spi_nrfx_transceive+0x27c>)
    4778:	4299      	cmp	r1, r3
    477a:	bf34      	ite	cc
    477c:	f04f 4180 	movcc.w	r1, #1073741824	; 0x40000000
    4780:	f04f 4100 	movcs.w	r1, #2147483648	; 0x80000000
    p_reg->FREQUENCY = (uint32_t)frequency;
    4784:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
		dev_data->busy = true;
    4788:	2301      	movs	r3, #1
    478a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
	if (tx_bufs) {
    478e:	2f00      	cmp	r7, #0
    4790:	d048      	beq.n	4824 <spi_nrfx_transceive+0x234>
		ctx->current_tx = tx_bufs->buffers;
    4792:	683b      	ldr	r3, [r7, #0]
		ctx->tx_count = tx_bufs->count;
    4794:	687a      	ldr	r2, [r7, #4]
		ctx->current_tx = tx_bufs->buffers;
    4796:	62e3      	str	r3, [r4, #44]	; 0x2c
		ctx->tx_count = tx_bufs->count;
    4798:	6322      	str	r2, [r4, #48]	; 0x30
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
    479a:	681a      	ldr	r2, [r3, #0]
		ctx->tx_len = ctx->current_tx->len / dfs;
    479c:	685b      	ldr	r3, [r3, #4]
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
    479e:	63e2      	str	r2, [r4, #60]	; 0x3c
		ctx->tx_len = ctx->current_tx->len / dfs;
    47a0:	6423      	str	r3, [r4, #64]	; 0x40
	if (rx_bufs) {
    47a2:	2e00      	cmp	r6, #0
    47a4:	d043      	beq.n	482e <spi_nrfx_transceive+0x23e>
		ctx->current_rx = rx_bufs->buffers;
    47a6:	6833      	ldr	r3, [r6, #0]
		ctx->rx_count = rx_bufs->count;
    47a8:	6872      	ldr	r2, [r6, #4]
		ctx->current_rx = rx_bufs->buffers;
    47aa:	6363      	str	r3, [r4, #52]	; 0x34
		ctx->rx_count = rx_bufs->count;
    47ac:	63a2      	str	r2, [r4, #56]	; 0x38
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
    47ae:	681a      	ldr	r2, [r3, #0]
		ctx->rx_len = ctx->current_rx->len / dfs;
    47b0:	685b      	ldr	r3, [r3, #4]
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
    47b2:	6462      	str	r2, [r4, #68]	; 0x44
		ctx->rx_len = ctx->current_rx->len / dfs;
    47b4:	64a3      	str	r3, [r4, #72]	; 0x48
	ctx->sync_status = 0;
    47b6:	2200      	movs	r2, #0
    47b8:	62a2      	str	r2, [r4, #40]	; 0x28
	_spi_context_cs_control(ctx, on, false);
    47ba:	2101      	movs	r1, #1
    47bc:	4620      	mov	r0, r4
    47be:	f004 f8c9 	bl	8954 <_spi_context_cs_control.isra.0>
		transfer_next_chunk(dev);
    47c2:	4640      	mov	r0, r8
    47c4:	f7ff fed6 	bl	4574 <transfer_next_chunk>
	return z_impl_k_sem_take(sem, timeout);
    47c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    47cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    47d0:	f104 0018 	add.w	r0, r4, #24
    47d4:	f002 fdd0 	bl	7378 <z_impl_k_sem_take>
	status = ctx->sync_status;
    47d8:	6aa5      	ldr	r5, [r4, #40]	; 0x28
	return status;
    47da:	e733      	b.n	4644 <spi_nrfx_transceive+0x54>
    47dc:	4b17      	ldr	r3, [pc, #92]	; (483c <spi_nrfx_transceive+0x24c>)
    47de:	4916      	ldr	r1, [pc, #88]	; (4838 <spi_nrfx_transceive+0x248>)
		LOG_INF("CS control inhibited (no GPIO device)");
    47e0:	4823      	ldr	r0, [pc, #140]	; (4870 <spi_nrfx_transceive+0x280>)
    47e2:	1ac9      	subs	r1, r1, r3
    47e4:	08c9      	lsrs	r1, r1, #3
    47e6:	0189      	lsls	r1, r1, #6
    47e8:	f041 0103 	orr.w	r1, r1, #3
    47ec:	f003 fbfa 	bl	7fe4 <log_0>
    47f0:	e79a      	b.n	4728 <spi_nrfx_transceive+0x138>
			return NRF_SPI_MODE_0;
    47f2:	3b00      	subs	r3, #0
    47f4:	bf18      	it	ne
    47f6:	2301      	movne	r3, #1
    47f8:	e7a1      	b.n	473e <spi_nrfx_transceive+0x14e>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
    47fa:	f041 0104 	orr.w	r1, r1, #4
        break;
    47fe:	e7a8      	b.n	4752 <spi_nrfx_transceive+0x162>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
    4800:	f041 0106 	orr.w	r1, r1, #6
        break;
    4804:	e7a5      	b.n	4752 <spi_nrfx_transceive+0x162>
		return NRF_SPI_FREQ_125K;
    4806:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
    480a:	e7bb      	b.n	4784 <spi_nrfx_transceive+0x194>
		return NRF_SPI_FREQ_250K;
    480c:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
    4810:	e7b8      	b.n	4784 <spi_nrfx_transceive+0x194>
		return NRF_SPI_FREQ_500K;
    4812:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    4816:	e7b5      	b.n	4784 <spi_nrfx_transceive+0x194>
		return NRF_SPI_FREQ_1M;
    4818:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    481c:	e7b2      	b.n	4784 <spi_nrfx_transceive+0x194>
		return NRF_SPI_FREQ_2M;
    481e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    4822:	e7af      	b.n	4784 <spi_nrfx_transceive+0x194>
		ctx->tx_count = 0;
    4824:	e9c4 770b 	strd	r7, r7, [r4, #44]	; 0x2c
		ctx->tx_len = 0;
    4828:	e9c4 770f 	strd	r7, r7, [r4, #60]	; 0x3c
    482c:	e7b9      	b.n	47a2 <spi_nrfx_transceive+0x1b2>
		ctx->rx_count = 0;
    482e:	e9c4 660d 	strd	r6, r6, [r4, #52]	; 0x34
		ctx->rx_len = 0;
    4832:	e9c4 6611 	strd	r6, r6, [r4, #68]	; 0x44
    4836:	e7be      	b.n	47b6 <spi_nrfx_transceive+0x1c6>
    4838:	0000937c 	.word	0x0000937c
    483c:	00009344 	.word	0x00009344
    4840:	00009c8b 	.word	0x00009c8b
    4844:	00009cad 	.word	0x00009cad
    4848:	00009ccc 	.word	0x00009ccc
    484c:	00009cef 	.word	0x00009cef
    4850:	0001e847 	.word	0x0001e847
    4854:	00009d1e 	.word	0x00009d1e
    4858:	0003d08f 	.word	0x0003d08f
    485c:	0007a11f 	.word	0x0007a11f
    4860:	000f423f 	.word	0x000f423f
    4864:	001e847f 	.word	0x001e847f
    4868:	003d08ff 	.word	0x003d08ff
    486c:	007a1200 	.word	0x007a1200
    4870:	00009d4f 	.word	0x00009d4f

00004874 <event_handler>:
{
    4874:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
    4876:	7803      	ldrb	r3, [r0, #0]
{
    4878:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
    487a:	2b00      	cmp	r3, #0
    487c:	d14e      	bne.n	491c <event_handler+0xa8>
	if (!ctx->tx_len) {
    487e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    4880:	b163      	cbz	r3, 489c <event_handler+0x28>
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
    4882:	6d0a      	ldr	r2, [r1, #80]	; 0x50
	if (len > ctx->tx_len) {
    4884:	429a      	cmp	r2, r3
    4886:	d91d      	bls.n	48c4 <event_handler+0x50>
    4888:	4925      	ldr	r1, [pc, #148]	; (4920 <event_handler+0xac>)
    488a:	4b26      	ldr	r3, [pc, #152]	; (4924 <event_handler+0xb0>)
		LOG_ERR("Update exceeds current buffer");
    488c:	4826      	ldr	r0, [pc, #152]	; (4928 <event_handler+0xb4>)
    488e:	1ac9      	subs	r1, r1, r3
    4890:	08c9      	lsrs	r1, r1, #3
    4892:	0189      	lsls	r1, r1, #6
    4894:	f041 0101 	orr.w	r1, r1, #1
    4898:	f003 fba4 	bl	7fe4 <log_0>
	if (!ctx->rx_len) {
    489c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    489e:	b163      	cbz	r3, 48ba <event_handler+0x46>
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
    48a0:	6d22      	ldr	r2, [r4, #80]	; 0x50
	if (len > ctx->rx_len) {
    48a2:	429a      	cmp	r2, r3
    48a4:	d924      	bls.n	48f0 <event_handler+0x7c>
    48a6:	491e      	ldr	r1, [pc, #120]	; (4920 <event_handler+0xac>)
    48a8:	4b1e      	ldr	r3, [pc, #120]	; (4924 <event_handler+0xb0>)
		LOG_ERR("Update exceeds current buffer");
    48aa:	481f      	ldr	r0, [pc, #124]	; (4928 <event_handler+0xb4>)
    48ac:	1ac9      	subs	r1, r1, r3
    48ae:	08c9      	lsrs	r1, r1, #3
    48b0:	0189      	lsls	r1, r1, #6
    48b2:	f041 0101 	orr.w	r1, r1, #1
    48b6:	f003 fb95 	bl	7fe4 <log_0>
		transfer_next_chunk(dev_data->dev);
    48ba:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
}
    48bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
    48c0:	f7ff be58 	b.w	4574 <transfer_next_chunk>
	ctx->tx_len -= len;
    48c4:	1a9b      	subs	r3, r3, r2
    48c6:	640b      	str	r3, [r1, #64]	; 0x40
	if (!ctx->tx_len) {
    48c8:	b963      	cbnz	r3, 48e4 <event_handler+0x70>
		ctx->tx_count--;
    48ca:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    48cc:	3b01      	subs	r3, #1
    48ce:	630b      	str	r3, [r1, #48]	; 0x30
		if (ctx->tx_count) {
    48d0:	b163      	cbz	r3, 48ec <event_handler+0x78>
			ctx->current_tx++;
    48d2:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    48d4:	f103 0208 	add.w	r2, r3, #8
    48d8:	62ca      	str	r2, [r1, #44]	; 0x2c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
    48da:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
    48dc:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
    48de:	63ca      	str	r2, [r1, #60]	; 0x3c
			ctx->tx_len = ctx->current_tx->len / dfs;
    48e0:	640b      	str	r3, [r1, #64]	; 0x40
    48e2:	e7db      	b.n	489c <event_handler+0x28>
	} else if (ctx->tx_buf) {
    48e4:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    48e6:	2b00      	cmp	r3, #0
    48e8:	d0d8      	beq.n	489c <event_handler+0x28>
		ctx->tx_buf += dfs * len;
    48ea:	4413      	add	r3, r2
    48ec:	63e3      	str	r3, [r4, #60]	; 0x3c
    48ee:	e7d5      	b.n	489c <event_handler+0x28>
	ctx->rx_len -= len;
    48f0:	1a9b      	subs	r3, r3, r2
    48f2:	64a3      	str	r3, [r4, #72]	; 0x48
	if (!ctx->rx_len) {
    48f4:	b963      	cbnz	r3, 4910 <event_handler+0x9c>
		ctx->rx_count--;
    48f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    48f8:	3b01      	subs	r3, #1
    48fa:	63a3      	str	r3, [r4, #56]	; 0x38
		if (ctx->rx_count) {
    48fc:	b163      	cbz	r3, 4918 <event_handler+0xa4>
			ctx->current_rx++;
    48fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4900:	f103 0208 	add.w	r2, r3, #8
    4904:	6362      	str	r2, [r4, #52]	; 0x34
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
    4906:	689a      	ldr	r2, [r3, #8]
			ctx->rx_len = ctx->current_rx->len / dfs;
    4908:	68db      	ldr	r3, [r3, #12]
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
    490a:	6462      	str	r2, [r4, #68]	; 0x44
			ctx->rx_len = ctx->current_rx->len / dfs;
    490c:	64a3      	str	r3, [r4, #72]	; 0x48
    490e:	e7d4      	b.n	48ba <event_handler+0x46>
	} else if (ctx->rx_buf) {
    4910:	6c63      	ldr	r3, [r4, #68]	; 0x44
    4912:	2b00      	cmp	r3, #0
    4914:	d0d1      	beq.n	48ba <event_handler+0x46>
		ctx->rx_buf += dfs * len;
    4916:	4413      	add	r3, r2
    4918:	6463      	str	r3, [r4, #68]	; 0x44
    491a:	e7ce      	b.n	48ba <event_handler+0x46>
}
    491c:	bd10      	pop	{r4, pc}
    491e:	bf00      	nop
    4920:	0000937c 	.word	0x0000937c
    4924:	00009344 	.word	0x00009344
    4928:	00009d75 	.word	0x00009d75

0000492c <timer_callback>:
	return k_work_submit_to_queue(&k_sys_work_q, work);
    492c:	4901      	ldr	r1, [pc, #4]	; (4934 <timer_callback+0x8>)
    492e:	4802      	ldr	r0, [pc, #8]	; (4938 <timer_callback+0xc>)
    4930:	f004 bb41 	b.w	8fb6 <k_work_submit_to_queue>
    4934:	20000068 	.word	0x20000068
    4938:	20000388 	.word	0x20000388

0000493c <RtcGetTimerElapsedTime>:
{
	return k_uptime_get_32();
}

uint32_t RtcGetTimerElapsedTime(void)
{
    493c:	b508      	push	{r3, lr}
	return (uint32_t)k_uptime_get();
    493e:	f004 f852 	bl	89e6 <k_uptime_get>
	return (k_uptime_get_32() - saved_time);
    4942:	4b02      	ldr	r3, [pc, #8]	; (494c <RtcGetTimerElapsedTime+0x10>)
    4944:	681b      	ldr	r3, [r3, #0]
}
    4946:	1ac0      	subs	r0, r0, r3
    4948:	bd08      	pop	{r3, pc}
    494a:	bf00      	nop
    494c:	20000618 	.word	0x20000618

00004950 <RtcStopAlarm>:
	z_impl_k_timer_stop(timer);
    4950:	4801      	ldr	r0, [pc, #4]	; (4958 <RtcStopAlarm+0x8>)
    4952:	f004 bb9f 	b.w	9094 <z_impl_k_timer_stop>
    4956:	bf00      	nop
    4958:	20000170 	.word	0x20000170

0000495c <RtcSetAlarm>:
{
	k_timer_stop(&lora_timer);
}

void RtcSetAlarm(uint32_t timeout)
{
    495c:	b537      	push	{r0, r1, r2, r4, r5, lr}
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    495e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    4962:	f240 34e7 	movw	r4, #999	; 0x3e7
    4966:	2500      	movs	r5, #0
    4968:	fbe1 4500 	umlal	r4, r5, r1, r0
    496c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4970:	2300      	movs	r3, #0
    4972:	4620      	mov	r0, r4
    4974:	4629      	mov	r1, r5
    4976:	f7fc f861 	bl	a3c <__aeabi_uldivmod>
    497a:	4602      	mov	r2, r0
    497c:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
    497e:	2100      	movs	r1, #0
    4980:	2000      	movs	r0, #0
    4982:	e9cd 0100 	strd	r0, r1, [sp]
    4986:	4802      	ldr	r0, [pc, #8]	; (4990 <RtcSetAlarm+0x34>)
    4988:	f003 f8fa 	bl	7b80 <z_impl_k_timer_start>
	k_timer_start(&lora_timer, K_MSEC(timeout), K_NO_WAIT);
}
    498c:	b003      	add	sp, #12
    498e:	bd30      	pop	{r4, r5, pc}
    4990:	20000170 	.word	0x20000170

00004994 <RtcSetTimerContext>:

uint32_t RtcSetTimerContext(void)
{
    4994:	b508      	push	{r3, lr}
    4996:	f004 f826 	bl	89e6 <k_uptime_get>
	saved_time = k_uptime_get_32();
    499a:	4b01      	ldr	r3, [pc, #4]	; (49a0 <RtcSetTimerContext+0xc>)
    499c:	6018      	str	r0, [r3, #0]

	return saved_time;
}
    499e:	bd08      	pop	{r3, pc}
    49a0:	20000618 	.word	0x20000618

000049a4 <RtcGetTimerContext>:

/* For us, 1 tick = 1 milli second. So no need to do any conversion here */
uint32_t RtcGetTimerContext(void)
{
	return saved_time;
}
    49a4:	4b01      	ldr	r3, [pc, #4]	; (49ac <RtcGetTimerContext+0x8>)
    49a6:	6818      	ldr	r0, [r3, #0]
    49a8:	4770      	bx	lr
    49aa:	bf00      	nop
    49ac:	20000618 	.word	0x20000618

000049b0 <sx12xx_ev_tx_done>:
	k_sem_give(&dev_data.data_sem);
}

static void sx12xx_ev_tx_done(void)
{
	Radio.Sleep();
    49b0:	4b01      	ldr	r3, [pc, #4]	; (49b8 <sx12xx_ev_tx_done+0x8>)
    49b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    49b4:	4718      	bx	r3
    49b6:	bf00      	nop
    49b8:	00009520 	.word	0x00009520

000049bc <sx12xx_ev_rx_done>:
{
    49bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    49be:	461c      	mov	r4, r3
	Radio.Sleep();
    49c0:	4b08      	ldr	r3, [pc, #32]	; (49e4 <sx12xx_ev_rx_done+0x28>)
    49c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
    49c4:	4607      	mov	r7, r0
    49c6:	460e      	mov	r6, r1
    49c8:	4615      	mov	r5, r2
	Radio.Sleep();
    49ca:	4798      	blx	r3
	dev_data.rx_buf = payload;
    49cc:	4806      	ldr	r0, [pc, #24]	; (49e8 <sx12xx_ev_rx_done+0x2c>)
    49ce:	62c7      	str	r7, [r0, #44]	; 0x2c
	dev_data.rx_len = size;
    49d0:	f880 6030 	strb.w	r6, [r0, #48]	; 0x30
	dev_data.rssi = rssi;
    49d4:	8645      	strh	r5, [r0, #50]	; 0x32
	dev_data.snr = snr;
    49d6:	f880 4031 	strb.w	r4, [r0, #49]	; 0x31
}
    49da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_impl_k_sem_give(sem);
    49de:	f002 bcab 	b.w	7338 <z_impl_k_sem_give>
    49e2:	bf00      	nop
    49e4:	00009520 	.word	0x00009520
    49e8:	2000061c 	.word	0x2000061c

000049ec <__sx12xx_configure_pin>:
{
    49ec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    49f0:	4606      	mov	r6, r0
    49f2:	460f      	mov	r7, r1
    49f4:	4690      	mov	r8, r2
    49f6:	461c      	mov	r4, r3
    49f8:	4608      	mov	r0, r1
    49fa:	f001 fe7d 	bl	66f8 <z_impl_device_get_binding>
    49fe:	4605      	mov	r5, r0
	*dev = device_get_binding(controller);
    4a00:	6030      	str	r0, [r6, #0]
	if (!(*dev)) {
    4a02:	b980      	cbnz	r0, 4a26 <__sx12xx_configure_pin+0x3a>
    4a04:	4b2f      	ldr	r3, [pc, #188]	; (4ac4 <__sx12xx_configure_pin+0xd8>)
    4a06:	4a30      	ldr	r2, [pc, #192]	; (4ac8 <__sx12xx_configure_pin+0xdc>)
		LOG_ERR("Cannot get pointer to %s device", controller);
    4a08:	4830      	ldr	r0, [pc, #192]	; (4acc <__sx12xx_configure_pin+0xe0>)
    4a0a:	1ad2      	subs	r2, r2, r3
    4a0c:	08d2      	lsrs	r2, r2, #3
    4a0e:	0192      	lsls	r2, r2, #6
    4a10:	f042 0201 	orr.w	r2, r2, #1
    4a14:	4639      	mov	r1, r7
    4a16:	f003 faf2 	bl	7ffe <log_1>
		return -EIO;
    4a1a:	f06f 0604 	mvn.w	r6, #4
}
    4a1e:	4630      	mov	r0, r6
    4a20:	b002      	add	sp, #8
    4a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    4a26:	04e6      	lsls	r6, r4, #19
	const struct gpio_driver_api *api =
    4a28:	f8d0 a008 	ldr.w	sl, [r0, #8]
	struct gpio_driver_data *data =
    4a2c:	f8d0 9010 	ldr.w	r9, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    4a30:	d506      	bpl.n	4a40 <__sx12xx_configure_pin+0x54>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
    4a32:	f414 6f40 	tst.w	r4, #3072	; 0xc00
    4a36:	d003      	beq.n	4a40 <__sx12xx_configure_pin+0x54>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    4a38:	07e0      	lsls	r0, r4, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    4a3a:	bf48      	it	mi
    4a3c:	f484 6440 	eormi.w	r4, r4, #3072	; 0xc00
	return api->pin_configure(port, pin, flags);
    4a40:	68ab      	ldr	r3, [r5, #8]
    4a42:	f424 5280 	bic.w	r2, r4, #4096	; 0x1000
    4a46:	681b      	ldr	r3, [r3, #0]
    4a48:	4641      	mov	r1, r8
    4a4a:	4628      	mov	r0, r5
    4a4c:	4798      	blx	r3
	if (ret != 0) {
    4a4e:	4606      	mov	r6, r0
    4a50:	bb38      	cbnz	r0, 4aa2 <__sx12xx_configure_pin+0xb6>
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    4a52:	f8d9 2000 	ldr.w	r2, [r9]
    4a56:	2301      	movs	r3, #1
    4a58:	07e1      	lsls	r1, r4, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    4a5a:	fa03 f308 	lsl.w	r3, r3, r8
    4a5e:	bf4c      	ite	mi
    4a60:	431a      	orrmi	r2, r3
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    4a62:	439a      	bicpl	r2, r3
	}
	if (((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U)
    4a64:	f414 4fc0 	tst.w	r4, #24576	; 0x6000
    4a68:	f8c9 2000 	str.w	r2, [r9]
    4a6c:	d0d7      	beq.n	4a1e <__sx12xx_configure_pin+0x32>
	    && (api->pin_interrupt_configure != NULL)) {
    4a6e:	f8da 2018 	ldr.w	r2, [sl, #24]
    4a72:	2a00      	cmp	r2, #0
    4a74:	d0d3      	beq.n	4a1e <__sx12xx_configure_pin+0x32>
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    4a76:	0420      	lsls	r0, r4, #16
	const struct gpio_driver_api *api =
    4a78:	68a9      	ldr	r1, [r5, #8]
		flags &= ~GPIO_INT_DEBOUNCE;
    4a7a:	f424 2201 	bic.w	r2, r4, #528384	; 0x81000
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    4a7e:	d505      	bpl.n	4a8c <__sx12xx_configure_pin+0xa0>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    4a80:	6928      	ldr	r0, [r5, #16]
    4a82:	6800      	ldr	r0, [r0, #0]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    4a84:	4203      	tst	r3, r0
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
    4a86:	bf18      	it	ne
    4a88:	f482 22c0 	eorne.w	r2, r2, #393216	; 0x60000
	return api->pin_interrupt_configure(port, pin, mode, trig);
    4a8c:	698c      	ldr	r4, [r1, #24]
    4a8e:	f402 23c0 	and.w	r3, r2, #393216	; 0x60000
    4a92:	4641      	mov	r1, r8
    4a94:	f402 32b0 	and.w	r2, r2, #90112	; 0x16000
    4a98:	4628      	mov	r0, r5
    4a9a:	47a0      	blx	r4
	if (err) {
    4a9c:	2800      	cmp	r0, #0
    4a9e:	d0be      	beq.n	4a1e <__sx12xx_configure_pin+0x32>
    4aa0:	4606      	mov	r6, r0
    4aa2:	4a08      	ldr	r2, [pc, #32]	; (4ac4 <__sx12xx_configure_pin+0xd8>)
    4aa4:	4b08      	ldr	r3, [pc, #32]	; (4ac8 <__sx12xx_configure_pin+0xdc>)
		LOG_ERR("Cannot configure gpio %s %d: %d", controller, pin,
    4aa6:	480a      	ldr	r0, [pc, #40]	; (4ad0 <__sx12xx_configure_pin+0xe4>)
    4aa8:	1a9b      	subs	r3, r3, r2
    4aaa:	08db      	lsrs	r3, r3, #3
    4aac:	019b      	lsls	r3, r3, #6
    4aae:	f043 0301 	orr.w	r3, r3, #1
    4ab2:	f8ad 3000 	strh.w	r3, [sp]
    4ab6:	4642      	mov	r2, r8
    4ab8:	4633      	mov	r3, r6
    4aba:	4639      	mov	r1, r7
    4abc:	f003 facc 	bl	8058 <log_3>
		return err;
    4ac0:	e7ad      	b.n	4a1e <__sx12xx_configure_pin+0x32>
    4ac2:	bf00      	nop
    4ac4:	00009344 	.word	0x00009344
    4ac8:	0000938c 	.word	0x0000938c
    4acc:	00009da6 	.word	0x00009da6
    4ad0:	00009dc6 	.word	0x00009dc6

00004ad4 <sx12xx_lora_send>:
}

int sx12xx_lora_send(const struct device *dev, uint8_t *data,
		     uint32_t data_len)
{
    4ad4:	b570      	push	{r4, r5, r6, lr}
	Radio.SetMaxPayloadLength(MODEM_LORA, data_len);
    4ad6:	4e06      	ldr	r6, [pc, #24]	; (4af0 <sx12xx_lora_send+0x1c>)
    4ad8:	b2d4      	uxtb	r4, r2
    4ada:	6d73      	ldr	r3, [r6, #84]	; 0x54
{
    4adc:	460d      	mov	r5, r1
	Radio.SetMaxPayloadLength(MODEM_LORA, data_len);
    4ade:	2001      	movs	r0, #1
    4ae0:	4621      	mov	r1, r4
    4ae2:	4798      	blx	r3

	Radio.Send(data, data_len);
    4ae4:	4628      	mov	r0, r5
    4ae6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    4ae8:	4621      	mov	r1, r4
    4aea:	4798      	blx	r3

	return 0;
}
    4aec:	2000      	movs	r0, #0
    4aee:	bd70      	pop	{r4, r5, r6, pc}
    4af0:	00009520 	.word	0x00009520

00004af4 <sx12xx_lora_recv>:

int sx12xx_lora_recv(const struct device *dev, uint8_t *data, uint8_t size,
		     k_timeout_t timeout, int16_t *rssi, int8_t *snr)
{
    4af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int ret;

	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
    4af8:	4c1e      	ldr	r4, [pc, #120]	; (4b74 <sx12xx_lora_recv+0x80>)
{
    4afa:	460f      	mov	r7, r1
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
    4afc:	6d63      	ldr	r3, [r4, #84]	; 0x54
    4afe:	21ff      	movs	r1, #255	; 0xff
    4b00:	2001      	movs	r0, #1
{
    4b02:	4616      	mov	r6, r2
    4b04:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	; 0x28
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
    4b08:	4798      	blx	r3
	Radio.Rx(0);
    4b0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4b0c:	2000      	movs	r0, #0
    4b0e:	4798      	blx	r3
	return z_impl_k_sem_take(sem, timeout);
    4b10:	4c19      	ldr	r4, [pc, #100]	; (4b78 <sx12xx_lora_recv+0x84>)
    4b12:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    4b16:	4620      	mov	r0, r4
    4b18:	f002 fc2e 	bl	7378 <z_impl_k_sem_take>

	ret = k_sem_take(&dev_data.data_sem, timeout);
	if (ret < 0) {
    4b1c:	1e05      	subs	r5, r0, #0
    4b1e:	da0c      	bge.n	4b3a <sx12xx_lora_recv+0x46>
    4b20:	4916      	ldr	r1, [pc, #88]	; (4b7c <sx12xx_lora_recv+0x88>)
    4b22:	4b17      	ldr	r3, [pc, #92]	; (4b80 <sx12xx_lora_recv+0x8c>)
		LOG_ERR("Receive timeout!");
    4b24:	4817      	ldr	r0, [pc, #92]	; (4b84 <sx12xx_lora_recv+0x90>)
    4b26:	1ac9      	subs	r1, r1, r3
    4b28:	08c9      	lsrs	r1, r1, #3
    4b2a:	0189      	lsls	r1, r1, #6
    4b2c:	f041 0101 	orr.w	r1, r1, #1
    4b30:	f003 fa58 	bl	7fe4 <log_0>
	if (snr != NULL) {
		*snr = dev_data.snr;
	}

	return dev_data.rx_len;
}
    4b34:	4628      	mov	r0, r5
    4b36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (dev_data.rx_len > size)
    4b3a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    4b3e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    4b40:	42b3      	cmp	r3, r6
		dev_data.rx_len = size;
    4b42:	bf88      	it	hi
    4b44:	f884 6030 	strbhi.w	r6, [r4, #48]	; 0x30
    4b48:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
    4b4c:	4638      	mov	r0, r7
    4b4e:	f004 fabf 	bl	90d0 <memcpy>
	if (rssi != NULL) {
    4b52:	f1b9 0f00 	cmp.w	r9, #0
    4b56:	d003      	beq.n	4b60 <sx12xx_lora_recv+0x6c>
		*rssi = dev_data.rssi;
    4b58:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
    4b5c:	f8a9 3000 	strh.w	r3, [r9]
	if (snr != NULL) {
    4b60:	f1b8 0f00 	cmp.w	r8, #0
    4b64:	d003      	beq.n	4b6e <sx12xx_lora_recv+0x7a>
		*snr = dev_data.snr;
    4b66:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
    4b6a:	f888 3000 	strb.w	r3, [r8]
	return dev_data.rx_len;
    4b6e:	f894 5030 	ldrb.w	r5, [r4, #48]	; 0x30
    4b72:	e7df      	b.n	4b34 <sx12xx_lora_recv+0x40>
    4b74:	00009520 	.word	0x00009520
    4b78:	2000061c 	.word	0x2000061c
    4b7c:	0000938c 	.word	0x0000938c
    4b80:	00009344 	.word	0x00009344
    4b84:	00009de6 	.word	0x00009de6

00004b88 <sx12xx_lora_config>:

int sx12xx_lora_config(const struct device *dev,
		       struct lora_modem_config *config)
{
    4b88:	b5f0      	push	{r4, r5, r6, r7, lr}
	Radio.SetChannel(config->frequency);
    4b8a:	4e19      	ldr	r6, [pc, #100]	; (4bf0 <sx12xx_lora_config+0x68>)
    4b8c:	6808      	ldr	r0, [r1, #0]
    4b8e:	68f3      	ldr	r3, [r6, #12]
{
    4b90:	460c      	mov	r4, r1
    4b92:	b08b      	sub	sp, #44	; 0x2c
	Radio.SetChannel(config->frequency);
    4b94:	4798      	blx	r3

	if (config->tx) {
    4b96:	7ae5      	ldrb	r5, [r4, #11]
    4b98:	7921      	ldrb	r1, [r4, #4]
    4b9a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
    4b9e:	79a3      	ldrb	r3, [r4, #6]
    4ba0:	7967      	ldrb	r7, [r4, #5]
    4ba2:	b1a5      	cbz	r5, 4bce <sx12xx_lora_config+0x46>
		Radio.SetTxConfig(MODEM_LORA, config->tx_power, 0,
    4ba4:	2200      	movs	r2, #0
    4ba6:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
    4baa:	e9cd 2007 	strd	r2, r0, [sp, #28]
    4bae:	2001      	movs	r0, #1
    4bb0:	e9cd 3c01 	strd	r3, ip, [sp, #4]
    4bb4:	e9cd 2205 	strd	r2, r2, [sp, #20]
    4bb8:	e9cd 2003 	strd	r2, r0, [sp, #12]
    4bbc:	9700      	str	r7, [sp, #0]
    4bbe:	460b      	mov	r3, r1
    4bc0:	69f5      	ldr	r5, [r6, #28]
    4bc2:	f994 100a 	ldrsb.w	r1, [r4, #10]
    4bc6:	47a8      	blx	r5
				  0, config->preamble_len, 10, false, 0,
				  false, 0, 0, false, true);
	}

	return 0;
}
    4bc8:	2000      	movs	r0, #0
    4bca:	b00b      	add	sp, #44	; 0x2c
    4bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Radio.SetRxConfig(MODEM_LORA, config->bandwidth,
    4bce:	2001      	movs	r0, #1
    4bd0:	220a      	movs	r2, #10
    4bd2:	e9cd c201 	strd	ip, r2, [sp, #4]
    4bd6:	e9cd 5008 	strd	r5, r0, [sp, #32]
    4bda:	e9cd 5506 	strd	r5, r5, [sp, #24]
    4bde:	e9cd 5504 	strd	r5, r5, [sp, #16]
    4be2:	69b4      	ldr	r4, [r6, #24]
    4be4:	9503      	str	r5, [sp, #12]
    4be6:	9500      	str	r5, [sp, #0]
    4be8:	463a      	mov	r2, r7
    4bea:	47a0      	blx	r4
    4bec:	e7ec      	b.n	4bc8 <sx12xx_lora_config+0x40>
    4bee:	bf00      	nop
    4bf0:	00009520 	.word	0x00009520

00004bf4 <sx12xx_lora_test_cw>:

int sx12xx_lora_test_cw(const struct device *dev, uint32_t frequency,
			int8_t tx_power,
			uint16_t duration)
{
    4bf4:	b510      	push	{r4, lr}
    4bf6:	4608      	mov	r0, r1
    4bf8:	4611      	mov	r1, r2
	Radio.SetTxContinuousWave(frequency, tx_power, duration);
    4bfa:	4a03      	ldr	r2, [pc, #12]	; (4c08 <sx12xx_lora_test_cw+0x14>)
    4bfc:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
    4bfe:	461a      	mov	r2, r3
    4c00:	47a0      	blx	r4
	return 0;
}
    4c02:	2000      	movs	r0, #0
    4c04:	bd10      	pop	{r4, pc}
    4c06:	bf00      	nop
    4c08:	00009520 	.word	0x00009520

00004c0c <sx12xx_init>:

int sx12xx_init(const struct device *dev)
{
    4c0c:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
    4c0e:	4c0a      	ldr	r4, [pc, #40]	; (4c38 <sx12xx_init+0x2c>)
	k_sem_init(&dev_data.data_sem, 0, K_SEM_MAX_LIMIT);

	dev_data.events.TxDone = sx12xx_ev_tx_done;
	dev_data.events.RxDone = sx12xx_ev_rx_done;
	Radio.Init(&dev_data.events);
    4c10:	4d0a      	ldr	r5, [pc, #40]	; (4c3c <sx12xx_init+0x30>)
    4c12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4c16:	2100      	movs	r1, #0
    4c18:	4620      	mov	r0, r4
    4c1a:	f004 f99f 	bl	8f5c <z_impl_k_sem_init>
	dev_data.events.TxDone = sx12xx_ev_tx_done;
    4c1e:	4b08      	ldr	r3, [pc, #32]	; (4c40 <sx12xx_init+0x34>)
    4c20:	6123      	str	r3, [r4, #16]
	dev_data.events.RxDone = sx12xx_ev_rx_done;
    4c22:	4b08      	ldr	r3, [pc, #32]	; (4c44 <sx12xx_init+0x38>)
    4c24:	61a3      	str	r3, [r4, #24]
	Radio.Init(&dev_data.events);
    4c26:	f104 0010 	add.w	r0, r4, #16
    4c2a:	682b      	ldr	r3, [r5, #0]
    4c2c:	4798      	blx	r3
	 * The required `lora_config` call before transmission or reception
	 * will bring the radio out of sleep mode before it is used. The radio
	 * is automatically placed back into sleep mode upon TX or RX
	 * completion.
	 */
	Radio.Sleep();
    4c2e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    4c30:	4798      	blx	r3

	return 0;
}
    4c32:	2000      	movs	r0, #0
    4c34:	bd38      	pop	{r3, r4, r5, pc}
    4c36:	bf00      	nop
    4c38:	2000061c 	.word	0x2000061c
    4c3c:	00009520 	.word	0x00009520
    4c40:	000049b1 	.word	0x000049b1
    4c44:	000049bd 	.word	0x000049bd

00004c48 <sx127x_dio_work_handle>:
	k_sleep(K_MSEC(6));
}

static void sx127x_dio_work_handle(struct k_work *work)
{
	int dio = work - dev_data.dio_work;
    4c48:	4b03      	ldr	r3, [pc, #12]	; (4c58 <sx127x_dio_work_handle+0x10>)
    4c4a:	1ac0      	subs	r0, r0, r3
    4c4c:	1100      	asrs	r0, r0, #4

	(*DioIrq[dio])(NULL);
    4c4e:	4b03      	ldr	r3, [pc, #12]	; (4c5c <sx127x_dio_work_handle+0x14>)
    4c50:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    4c54:	2000      	movs	r0, #0
    4c56:	4718      	bx	r3
    4c58:	200006b8 	.word	0x200006b8
    4c5c:	20000078 	.word	0x20000078

00004c60 <sx127x_irq_callback>:
}

static void sx127x_irq_callback(const struct device *dev,
				struct gpio_callback *cb, uint32_t pins)
{
    4c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4c64:	4d11      	ldr	r5, [pc, #68]	; (4cac <sx127x_irq_callback+0x4c>)

	pin = find_lsb_set(pins) - 1;

	for (i = 0; i < SX127X_MAX_DIO; i++) {
		if (dev == dev_data.dio_dev[i] &&
		    pin == sx127x_dios[i].pin) {
    4c66:	f8df 8048 	ldr.w	r8, [pc, #72]	; 4cb0 <sx127x_irq_callback+0x50>
	return k_work_submit_to_queue(&k_sys_work_q, work);
    4c6a:	f8df a048 	ldr.w	sl, [pc, #72]	; 4cb4 <sx127x_irq_callback+0x54>
 * @return least significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
	return __builtin_ffs(op);
    4c6e:	fa92 f7a2 	rbit	r7, r2
    4c72:	2a00      	cmp	r2, #0
    4c74:	fab7 f787 	clz	r7, r7
{
    4c78:	4606      	mov	r6, r0
    4c7a:	bf08      	it	eq
    4c7c:	f04f 37ff 	moveq.w	r7, #4294967295	; 0xffffffff
	for (i = 0; i < SX127X_MAX_DIO; i++) {
    4c80:	2400      	movs	r4, #0
    4c82:	f105 0914 	add.w	r9, r5, #20
		if (dev == dev_data.dio_dev[i] &&
    4c86:	f855 3b04 	ldr.w	r3, [r5], #4
    4c8a:	42b3      	cmp	r3, r6
    4c8c:	d109      	bne.n	4ca2 <sx127x_irq_callback+0x42>
		    pin == sx127x_dios[i].pin) {
    4c8e:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
    4c92:	791b      	ldrb	r3, [r3, #4]
		if (dev == dev_data.dio_dev[i] &&
    4c94:	42bb      	cmp	r3, r7
    4c96:	d104      	bne.n	4ca2 <sx127x_irq_callback+0x42>
    4c98:	eb09 1104 	add.w	r1, r9, r4, lsl #4
    4c9c:	4650      	mov	r0, sl
    4c9e:	f004 f98a 	bl	8fb6 <k_work_submit_to_queue>
	for (i = 0; i < SX127X_MAX_DIO; i++) {
    4ca2:	3401      	adds	r4, #1
    4ca4:	2c05      	cmp	r4, #5
    4ca6:	d1ee      	bne.n	4c86 <sx127x_irq_callback+0x26>
			k_work_submit(&dev_data.dio_work[i]);
		}
	}
}
    4ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4cac:	200006a4 	.word	0x200006a4
    4cb0:	0000958c 	.word	0x0000958c
    4cb4:	20000388 	.word	0x20000388

00004cb8 <SX1276Reset>:
{
    4cb8:	b510      	push	{r4, lr}
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 1);
    4cba:	4c09      	ldr	r4, [pc, #36]	; (4ce0 <SX1276Reset+0x28>)
    4cbc:	2101      	movs	r1, #1
    4cbe:	6820      	ldr	r0, [r4, #0]
    4cc0:	f003 fee0 	bl	8a84 <gpio_pin_set.constprop.0>
	return z_impl_k_sleep(timeout);
    4cc4:	2100      	movs	r1, #0
    4cc6:	2021      	movs	r0, #33	; 0x21
    4cc8:	f002 fa9a 	bl	7200 <z_impl_k_sleep>
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 0);
    4ccc:	6820      	ldr	r0, [r4, #0]
    4cce:	2100      	movs	r1, #0
    4cd0:	f003 fed8 	bl	8a84 <gpio_pin_set.constprop.0>
    4cd4:	20c5      	movs	r0, #197	; 0xc5
}
    4cd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4cda:	2100      	movs	r1, #0
    4cdc:	f002 ba90 	b.w	7200 <z_impl_k_sleep>
    4ce0:	20000690 	.word	0x20000690

00004ce4 <SX1276IoIrqInit>:

void SX127xIoIrqInit(DioIrqHandler **irqHandlers)
{
    4ce4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4ce8:	4c37      	ldr	r4, [pc, #220]	; (4dc8 <SX1276IoIrqInit+0xe4>)
    4cea:	4e38      	ldr	r6, [pc, #224]	; (4dcc <SX1276IoIrqInit+0xe8>)
    4cec:	4d38      	ldr	r5, [pc, #224]	; (4dd0 <SX1276IoIrqInit+0xec>)
    4cee:	f100 0310 	add.w	r3, r0, #16
    4cf2:	f1a0 0804 	sub.w	r8, r0, #4
    4cf6:	f1a4 0914 	sub.w	r9, r4, #20
    4cfa:	9301      	str	r3, [sp, #4]
	unsigned int i;
	static struct gpio_callback callbacks[SX127X_MAX_DIO];

	/* Setup DIO gpios */
	for (i = 0; i < SX127X_MAX_DIO; i++) {
		if (!irqHandlers[i]) {
    4cfc:	f858 3f04 	ldr.w	r3, [r8, #4]!
    4d00:	2b00      	cmp	r3, #0
    4d02:	d053      	beq.n	4dac <SX1276IoIrqInit+0xc8>
			continue;
		}

		dev_data.dio_dev[i] = device_get_binding(sx127x_dios[i].port);
    4d04:	682f      	ldr	r7, [r5, #0]
    4d06:	4638      	mov	r0, r7
    4d08:	f001 fcf6 	bl	66f8 <z_impl_device_get_binding>
    4d0c:	6020      	str	r0, [r4, #0]
		if (dev_data.dio_dev[i] == NULL) {
    4d0e:	b968      	cbnz	r0, 4d2c <SX1276IoIrqInit+0x48>
    4d10:	4b30      	ldr	r3, [pc, #192]	; (4dd4 <SX1276IoIrqInit+0xf0>)
    4d12:	4a31      	ldr	r2, [pc, #196]	; (4dd8 <SX1276IoIrqInit+0xf4>)
			LOG_ERR("Cannot get pointer to %s device",
    4d14:	4831      	ldr	r0, [pc, #196]	; (4ddc <SX1276IoIrqInit+0xf8>)
    4d16:	1ad2      	subs	r2, r2, r3
    4d18:	08d2      	lsrs	r2, r2, #3
    4d1a:	0192      	lsls	r2, r2, #6
    4d1c:	f042 0201 	orr.w	r2, r2, #1
    4d20:	4639      	mov	r1, r7
		gpio_pin_interrupt_configure(dev_data.dio_dev[i],
					     sx127x_dios[i].pin,
					     GPIO_INT_EDGE_TO_ACTIVE);
	}

}
    4d22:	b003      	add	sp, #12
    4d24:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			LOG_ERR("Cannot get pointer to %s device",
    4d28:	f003 b969 	b.w	7ffe <log_1>
		k_work_init(&dev_data.dio_work[i], sx127x_dio_work_handle);
    4d2c:	f109 0028 	add.w	r0, r9, #40	; 0x28
    4d30:	492b      	ldr	r1, [pc, #172]	; (4de0 <SX1276IoIrqInit+0xfc>)
    4d32:	f004 f937 	bl	8fa4 <k_work_init>
		gpio_pin_configure(dev_data.dio_dev[i], sx127x_dios[i].pin,
    4d36:	6820      	ldr	r0, [r4, #0]
    4d38:	792f      	ldrb	r7, [r5, #4]
				   | sx127x_dios[i].flags);
    4d3a:	f895 b005 	ldrb.w	fp, [r5, #5]
	struct gpio_driver_data *data =
    4d3e:	f8d0 a010 	ldr.w	sl, [r0, #16]
	return api->pin_configure(port, pin, flags);
    4d42:	6883      	ldr	r3, [r0, #8]
    4d44:	f44b 2200 	orr.w	r2, fp, #524288	; 0x80000
    4d48:	681b      	ldr	r3, [r3, #0]
    4d4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    4d4e:	4639      	mov	r1, r7
    4d50:	4798      	blx	r3
	if (ret != 0) {
    4d52:	b950      	cbnz	r0, 4d6a <SX1276IoIrqInit+0x86>
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    4d54:	f8da 3000 	ldr.w	r3, [sl]
    4d58:	2201      	movs	r2, #1
    4d5a:	40ba      	lsls	r2, r7
    4d5c:	f01b 0f01 	tst.w	fp, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
    4d60:	bf14      	ite	ne
    4d62:	4313      	orrne	r3, r2
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    4d64:	4393      	biceq	r3, r2
    4d66:	f8ca 3000 	str.w	r3, [sl]
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    4d6a:	4b1e      	ldr	r3, [pc, #120]	; (4de4 <SX1276IoIrqInit+0x100>)
		if (gpio_add_callback(dev_data.dio_dev[i], &callbacks[i]) < 0) {
    4d6c:	6820      	ldr	r0, [r4, #0]
    4d6e:	6073      	str	r3, [r6, #4]
				   BIT(sx127x_dios[i].pin));
    4d70:	2201      	movs	r2, #1
    4d72:	fa02 f307 	lsl.w	r3, r2, r7
	callback->pin_mask = pin_mask;
    4d76:	60b3      	str	r3, [r6, #8]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
    4d78:	6883      	ldr	r3, [r0, #8]
    4d7a:	69db      	ldr	r3, [r3, #28]
    4d7c:	b963      	cbnz	r3, 4d98 <SX1276IoIrqInit+0xb4>
    4d7e:	4b15      	ldr	r3, [pc, #84]	; (4dd4 <SX1276IoIrqInit+0xf0>)
    4d80:	4915      	ldr	r1, [pc, #84]	; (4dd8 <SX1276IoIrqInit+0xf4>)
			LOG_ERR("Could not set gpio callback.");
    4d82:	4819      	ldr	r0, [pc, #100]	; (4de8 <SX1276IoIrqInit+0x104>)
    4d84:	1ac9      	subs	r1, r1, r3
    4d86:	08c9      	lsrs	r1, r1, #3
    4d88:	0189      	lsls	r1, r1, #6
    4d8a:	f041 0101 	orr.w	r1, r1, #1
}
    4d8e:	b003      	add	sp, #12
    4d90:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			LOG_ERR("Could not set gpio callback.");
    4d94:	f003 b926 	b.w	7fe4 <log_0>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    4d98:	4631      	mov	r1, r6
    4d9a:	4798      	blx	r3
		if (gpio_add_callback(dev_data.dio_dev[i], &callbacks[i]) < 0) {
    4d9c:	2800      	cmp	r0, #0
    4d9e:	dbee      	blt.n	4d7e <SX1276IoIrqInit+0x9a>
		gpio_pin_interrupt_configure(dev_data.dio_dev[i],
    4da0:	6820      	ldr	r0, [r4, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
    4da2:	f44f 22b8 	mov.w	r2, #376832	; 0x5c000
    4da6:	4639      	mov	r1, r7
    4da8:	f003 fe56 	bl	8a58 <z_impl_gpio_pin_interrupt_configure>
	for (i = 0; i < SX127X_MAX_DIO; i++) {
    4dac:	9b01      	ldr	r3, [sp, #4]
    4dae:	4598      	cmp	r8, r3
    4db0:	f104 0404 	add.w	r4, r4, #4
    4db4:	f106 060c 	add.w	r6, r6, #12
    4db8:	f109 0910 	add.w	r9, r9, #16
    4dbc:	f105 0508 	add.w	r5, r5, #8
    4dc0:	d19c      	bne.n	4cfc <SX1276IoIrqInit+0x18>
}
    4dc2:	b003      	add	sp, #12
    4dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4dc8:	200006a4 	.word	0x200006a4
    4dcc:	20000654 	.word	0x20000654
    4dd0:	0000958c 	.word	0x0000958c
    4dd4:	00009344 	.word	0x00009344
    4dd8:	00009384 	.word	0x00009384
    4ddc:	00009da6 	.word	0x00009da6
    4de0:	00004c49 	.word	0x00004c49
    4de4:	00004c61 	.word	0x00004c61
    4de8:	00009e05 	.word	0x00009e05

00004dec <sx127x_read>:

	return spi_write(dev_data.spi, &dev_data.spi_cfg, &tx);
}

int sx127x_read(uint8_t reg_addr, uint8_t *data, uint8_t len)
{
    4dec:	b510      	push	{r4, lr}
    4dee:	b08a      	sub	sp, #40	; 0x28
	const struct spi_buf buf[2] = {
    4df0:	f10d 0307 	add.w	r3, sp, #7
    4df4:	9306      	str	r3, [sp, #24]
    4df6:	2301      	movs	r3, #1
    4df8:	e9cd 3107 	strd	r3, r1, [sp, #28]
		return spi_transceive(dev_data.spi, &dev_data.spi_cfg, &tx, &rx);
    4dfc:	4909      	ldr	r1, [pc, #36]	; (4e24 <sx127x_read+0x38>)
	return sx127x_transceive(reg_addr, false, data, len);
    4dfe:	9209      	str	r2, [sp, #36]	; 0x24
	struct spi_buf_set tx = {
    4e00:	2302      	movs	r3, #2
    4e02:	aa06      	add	r2, sp, #24
    4e04:	f88d 0007 	strb.w	r0, [sp, #7]
		const struct spi_buf_set rx = {
    4e08:	e9cd 3203 	strd	r3, r2, [sp, #12]
		return spi_transceive(dev_data.spi, &dev_data.spi_cfg, &tx, &rx);
    4e0c:	6848      	ldr	r0, [r1, #4]
	struct spi_buf_set tx = {
    4e0e:	9202      	str	r2, [sp, #8]
		const struct spi_buf_set rx = {
    4e10:	9305      	str	r3, [sp, #20]
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
    4e12:	6883      	ldr	r3, [r0, #8]
    4e14:	aa02      	add	r2, sp, #8
    4e16:	681c      	ldr	r4, [r3, #0]
    4e18:	3108      	adds	r1, #8
    4e1a:	ab04      	add	r3, sp, #16
    4e1c:	47a0      	blx	r4
}
    4e1e:	b00a      	add	sp, #40	; 0x28
    4e20:	bd10      	pop	{r4, pc}
    4e22:	bf00      	nop
    4e24:	20000690 	.word	0x20000690

00004e28 <SX1276ReadBuffer>:
		LOG_ERR("Unable to write address: 0x%x", addr);
	}
}

void SX127xReadBuffer(uint16_t addr, uint8_t *buffer, uint8_t size)
{
    4e28:	b510      	push	{r4, lr}
    4e2a:	4604      	mov	r4, r0
	int ret;

	ret = sx127x_read(addr, buffer, size);
    4e2c:	b2c0      	uxtb	r0, r0
    4e2e:	f7ff ffdd 	bl	4dec <sx127x_read>
	if (ret < 0) {
    4e32:	2800      	cmp	r0, #0
    4e34:	da0c      	bge.n	4e50 <SX1276ReadBuffer+0x28>
    4e36:	4a07      	ldr	r2, [pc, #28]	; (4e54 <SX1276ReadBuffer+0x2c>)
    4e38:	4b07      	ldr	r3, [pc, #28]	; (4e58 <SX1276ReadBuffer+0x30>)
		LOG_ERR("Unable to read address: 0x%x", addr);
    4e3a:	4808      	ldr	r0, [pc, #32]	; (4e5c <SX1276ReadBuffer+0x34>)
    4e3c:	1ad2      	subs	r2, r2, r3
    4e3e:	08d2      	lsrs	r2, r2, #3
    4e40:	0192      	lsls	r2, r2, #6
    4e42:	4621      	mov	r1, r4
    4e44:	f042 0201 	orr.w	r2, r2, #1
	}
}
    4e48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("Unable to read address: 0x%x", addr);
    4e4c:	f003 b8d7 	b.w	7ffe <log_1>
}
    4e50:	bd10      	pop	{r4, pc}
    4e52:	bf00      	nop
    4e54:	00009384 	.word	0x00009384
    4e58:	00009344 	.word	0x00009344
    4e5c:	00009e22 	.word	0x00009e22

00004e60 <sx127x_lora_init>:

	return 0;
}

static int sx127x_lora_init(const struct device *dev)
{
    4e60:	b573      	push	{r0, r1, r4, r5, r6, lr}
    4e62:	4606      	mov	r6, r0
    4e64:	4839      	ldr	r0, [pc, #228]	; (4f4c <sx127x_lora_init+0xec>)
	static struct spi_cs_control spi_cs;
#endif
	int ret;
	uint8_t regval;

	dev_data.spi = device_get_binding(DT_INST_BUS_LABEL(0));
    4e66:	4d3a      	ldr	r5, [pc, #232]	; (4f50 <sx127x_lora_init+0xf0>)
    4e68:	f001 fc46 	bl	66f8 <z_impl_device_get_binding>
    4e6c:	6068      	str	r0, [r5, #4]
	if (!dev_data.spi) {
    4e6e:	b978      	cbnz	r0, 4e90 <sx127x_lora_init+0x30>
    4e70:	4b38      	ldr	r3, [pc, #224]	; (4f54 <sx127x_lora_init+0xf4>)
    4e72:	4a39      	ldr	r2, [pc, #228]	; (4f58 <sx127x_lora_init+0xf8>)
		LOG_ERR("Cannot get pointer to %s device",
    4e74:	4935      	ldr	r1, [pc, #212]	; (4f4c <sx127x_lora_init+0xec>)
    4e76:	4839      	ldr	r0, [pc, #228]	; (4f5c <sx127x_lora_init+0xfc>)
    4e78:	1ad2      	subs	r2, r2, r3
    4e7a:	08d2      	lsrs	r2, r2, #3
    4e7c:	0192      	lsls	r2, r2, #6
    4e7e:	f042 0201 	orr.w	r2, r2, #1
    4e82:	f003 f8bc 	bl	7ffe <log_1>
			DT_INST_BUS_LABEL(0));
		return -EINVAL;
    4e86:	f06f 0415 	mvn.w	r4, #21
		LOG_ERR("Failed to initialize SX12xx common");
		return ret;
	}

	return 0;
}
    4e8a:	4620      	mov	r0, r4
    4e8c:	b002      	add	sp, #8
    4e8e:	bd70      	pop	{r4, r5, r6, pc}
	dev_data.spi_cfg.operation = SPI_WORD_SET(8) | SPI_TRANSFER_MSB;
    4e90:	4a33      	ldr	r2, [pc, #204]	; (4f60 <sx127x_lora_init+0x100>)
    4e92:	f44f 7380 	mov.w	r3, #256	; 0x100
    4e96:	e9c5 2302 	strd	r2, r3, [r5, #8]
    4e9a:	4832      	ldr	r0, [pc, #200]	; (4f64 <sx127x_lora_init+0x104>)
    4e9c:	f001 fc2c 	bl	66f8 <z_impl_device_get_binding>
	spi_cs.gpio_dev = device_get_binding(DT_INST_SPI_DEV_CS_GPIOS_LABEL(0));
    4ea0:	4b31      	ldr	r3, [pc, #196]	; (4f68 <sx127x_lora_init+0x108>)
    4ea2:	6018      	str	r0, [r3, #0]
	if (!spi_cs.gpio_dev) {
    4ea4:	b968      	cbnz	r0, 4ec2 <sx127x_lora_init+0x62>
    4ea6:	4a2c      	ldr	r2, [pc, #176]	; (4f58 <sx127x_lora_init+0xf8>)
    4ea8:	4b2a      	ldr	r3, [pc, #168]	; (4f54 <sx127x_lora_init+0xf4>)
		LOG_ERR("Cannot get pointer to %s device",
    4eaa:	492e      	ldr	r1, [pc, #184]	; (4f64 <sx127x_lora_init+0x104>)
    4eac:	482b      	ldr	r0, [pc, #172]	; (4f5c <sx127x_lora_init+0xfc>)
    4eae:	1ad2      	subs	r2, r2, r3
    4eb0:	08d2      	lsrs	r2, r2, #3
    4eb2:	0192      	lsls	r2, r2, #6
    4eb4:	f042 0201 	orr.w	r2, r2, #1
    4eb8:	f003 f8a1 	bl	7ffe <log_1>
		return -EIO;
    4ebc:	f06f 0404 	mvn.w	r4, #4
    4ec0:	e7e3      	b.n	4e8a <sx127x_lora_init+0x2a>
	spi_cs.delay = 0U;
    4ec2:	2200      	movs	r2, #0
    4ec4:	605a      	str	r2, [r3, #4]
	spi_cs.gpio_pin = GPIO_CS_PIN;
    4ec6:	f240 1209 	movw	r2, #265	; 0x109
    4eca:	811a      	strh	r2, [r3, #8]
	dev_data.spi_cfg.cs = &spi_cs;
    4ecc:	612b      	str	r3, [r5, #16]
	ret = sx12xx_configure_pin(reset, GPIO_OUTPUT_ACTIVE);
    4ece:	4925      	ldr	r1, [pc, #148]	; (4f64 <sx127x_lora_init+0x104>)
    4ed0:	f641 2311 	movw	r3, #6673	; 0x1a11
    4ed4:	2208      	movs	r2, #8
    4ed6:	4628      	mov	r0, r5
    4ed8:	f7ff fd88 	bl	49ec <__sx12xx_configure_pin>
	if (ret) {
    4edc:	4604      	mov	r4, r0
    4ede:	2800      	cmp	r0, #0
    4ee0:	d1d3      	bne.n	4e8a <sx127x_lora_init+0x2a>
    4ee2:	2100      	movs	r1, #0
    4ee4:	f640 40cd 	movw	r0, #3277	; 0xccd
    4ee8:	f002 f98a 	bl	7200 <z_impl_k_sleep>
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 0);
    4eec:	6828      	ldr	r0, [r5, #0]
    4eee:	4621      	mov	r1, r4
    4ef0:	f003 fdc8 	bl	8a84 <gpio_pin_set.constprop.0>
    4ef4:	2100      	movs	r1, #0
    4ef6:	f640 40cd 	movw	r0, #3277	; 0xccd
    4efa:	f002 f981 	bl	7200 <z_impl_k_sleep>
	ret = sx127x_read(REG_VERSION, &regval, 1);
    4efe:	2201      	movs	r2, #1
    4f00:	f10d 0107 	add.w	r1, sp, #7
    4f04:	2042      	movs	r0, #66	; 0x42
    4f06:	f7ff ff71 	bl	4dec <sx127x_read>
	if (ret < 0) {
    4f0a:	4d13      	ldr	r5, [pc, #76]	; (4f58 <sx127x_lora_init+0xf8>)
    4f0c:	4b11      	ldr	r3, [pc, #68]	; (4f54 <sx127x_lora_init+0xf4>)
    4f0e:	1aed      	subs	r5, r5, r3
    4f10:	08ed      	lsrs	r5, r5, #3
    4f12:	2800      	cmp	r0, #0
    4f14:	ea4f 1585 	mov.w	r5, r5, lsl #6
    4f18:	da05      	bge.n	4f26 <sx127x_lora_init+0xc6>
		LOG_ERR("Unable to read version info");
    4f1a:	4814      	ldr	r0, [pc, #80]	; (4f6c <sx127x_lora_init+0x10c>)
    4f1c:	f045 0101 	orr.w	r1, r5, #1
    4f20:	f003 f860 	bl	7fe4 <log_0>
    4f24:	e7ca      	b.n	4ebc <sx127x_lora_init+0x5c>
	LOG_INF("SX127x version 0x%02x found", regval);
    4f26:	f89d 1007 	ldrb.w	r1, [sp, #7]
    4f2a:	4811      	ldr	r0, [pc, #68]	; (4f70 <sx127x_lora_init+0x110>)
    4f2c:	f045 0203 	orr.w	r2, r5, #3
    4f30:	f003 f865 	bl	7ffe <log_1>
	ret = sx12xx_init(dev);
    4f34:	4630      	mov	r0, r6
    4f36:	f7ff fe69 	bl	4c0c <sx12xx_init>
	if (ret < 0) {
    4f3a:	1e06      	subs	r6, r0, #0
    4f3c:	daa5      	bge.n	4e8a <sx127x_lora_init+0x2a>
		LOG_ERR("Failed to initialize SX12xx common");
    4f3e:	480d      	ldr	r0, [pc, #52]	; (4f74 <sx127x_lora_init+0x114>)
    4f40:	f045 0101 	orr.w	r1, r5, #1
    4f44:	f003 f84e 	bl	7fe4 <log_0>
		return ret;
    4f48:	4634      	mov	r4, r6
    4f4a:	e79e      	b.n	4e8a <sx127x_lora_init+0x2a>
    4f4c:	00009d93 	.word	0x00009d93
    4f50:	20000690 	.word	0x20000690
    4f54:	00009344 	.word	0x00009344
    4f58:	00009384 	.word	0x00009384
    4f5c:	00009da6 	.word	0x00009da6
    4f60:	000f4240 	.word	0x000f4240
    4f64:	00009c5d 	.word	0x00009c5d
    4f68:	20000708 	.word	0x20000708
    4f6c:	00009e3f 	.word	0x00009e3f
    4f70:	00009e5b 	.word	0x00009e5b
    4f74:	00009e77 	.word	0x00009e77

00004f78 <sx127x_write>:
{
    4f78:	b510      	push	{r4, lr}
    4f7a:	b088      	sub	sp, #32
	const struct spi_buf buf[2] = {
    4f7c:	f10d 0307 	add.w	r3, sp, #7
    4f80:	9304      	str	r3, [sp, #16]
    4f82:	2301      	movs	r3, #1
    4f84:	e9cd 3105 	strd	r3, r1, [sp, #20]
	struct spi_buf_set tx = {
    4f88:	ab04      	add	r3, sp, #16
	return spi_write(dev_data.spi, &dev_data.spi_cfg, &tx);
    4f8a:	4909      	ldr	r1, [pc, #36]	; (4fb0 <sx127x_write+0x38>)
	struct spi_buf_set tx = {
    4f8c:	9302      	str	r3, [sp, #8]
	return sx127x_transceive(reg_addr | BIT(7), true, data, len);
    4f8e:	f060 007f 	orn	r0, r0, #127	; 0x7f
	struct spi_buf_set tx = {
    4f92:	2302      	movs	r3, #2
    4f94:	f88d 0007 	strb.w	r0, [sp, #7]
	return sx127x_transceive(reg_addr | BIT(7), true, data, len);
    4f98:	9207      	str	r2, [sp, #28]
	return spi_write(dev_data.spi, &dev_data.spi_cfg, &tx);
    4f9a:	6848      	ldr	r0, [r1, #4]
	struct spi_buf_set tx = {
    4f9c:	9303      	str	r3, [sp, #12]
    4f9e:	6883      	ldr	r3, [r0, #8]
    4fa0:	aa02      	add	r2, sp, #8
    4fa2:	681c      	ldr	r4, [r3, #0]
    4fa4:	3108      	adds	r1, #8
    4fa6:	2300      	movs	r3, #0
    4fa8:	47a0      	blx	r4
}
    4faa:	b008      	add	sp, #32
    4fac:	bd10      	pop	{r4, pc}
    4fae:	bf00      	nop
    4fb0:	20000690 	.word	0x20000690

00004fb4 <SX1276WriteBuffer>:
{
    4fb4:	b510      	push	{r4, lr}
    4fb6:	4604      	mov	r4, r0
	ret = sx127x_write(addr, buffer, size);
    4fb8:	b2c0      	uxtb	r0, r0
    4fba:	f7ff ffdd 	bl	4f78 <sx127x_write>
	if (ret < 0) {
    4fbe:	2800      	cmp	r0, #0
    4fc0:	da0c      	bge.n	4fdc <SX1276WriteBuffer+0x28>
    4fc2:	4a07      	ldr	r2, [pc, #28]	; (4fe0 <SX1276WriteBuffer+0x2c>)
    4fc4:	4b07      	ldr	r3, [pc, #28]	; (4fe4 <SX1276WriteBuffer+0x30>)
		LOG_ERR("Unable to write address: 0x%x", addr);
    4fc6:	4808      	ldr	r0, [pc, #32]	; (4fe8 <SX1276WriteBuffer+0x34>)
    4fc8:	1ad2      	subs	r2, r2, r3
    4fca:	08d2      	lsrs	r2, r2, #3
    4fcc:	0192      	lsls	r2, r2, #6
    4fce:	4621      	mov	r1, r4
    4fd0:	f042 0201 	orr.w	r2, r2, #1
}
    4fd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("Unable to write address: 0x%x", addr);
    4fd8:	f003 b811 	b.w	7ffe <log_1>
}
    4fdc:	bd10      	pop	{r4, pc}
    4fde:	bf00      	nop
    4fe0:	00009384 	.word	0x00009384
    4fe4:	00009344 	.word	0x00009344
    4fe8:	00009e9a 	.word	0x00009e9a

00004fec <SX1276SetRfTxPower>:
{
    4fec:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t pa_config = 0;
    4fee:	2300      	movs	r3, #0
{
    4ff0:	4605      	mov	r5, r0
	ret = sx127x_read(REG_PADAC, &pa_dac, 1);
    4ff2:	2201      	movs	r2, #1
    4ff4:	f10d 0107 	add.w	r1, sp, #7
    4ff8:	204d      	movs	r0, #77	; 0x4d
	uint8_t pa_config = 0;
    4ffa:	f88d 3006 	strb.w	r3, [sp, #6]
	uint8_t pa_dac = 0;
    4ffe:	f88d 3007 	strb.w	r3, [sp, #7]
	ret = sx127x_read(REG_PADAC, &pa_dac, 1);
    5002:	f7ff fef3 	bl	4dec <sx127x_read>
	if (ret < 0) {
    5006:	2800      	cmp	r0, #0
    5008:	da0b      	bge.n	5022 <SX1276SetRfTxPower+0x36>
    500a:	4930      	ldr	r1, [pc, #192]	; (50cc <SX1276SetRfTxPower+0xe0>)
    500c:	4b30      	ldr	r3, [pc, #192]	; (50d0 <SX1276SetRfTxPower+0xe4>)
		LOG_ERR("Unable to read PA dac");
    500e:	4831      	ldr	r0, [pc, #196]	; (50d4 <SX1276SetRfTxPower+0xe8>)
    5010:	1ac9      	subs	r1, r1, r3
    5012:	08c9      	lsrs	r1, r1, #3
    5014:	0189      	lsls	r1, r1, #6
    5016:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Unable to write PA dac");
    501a:	f002 ffe3 	bl	7fe4 <log_0>
}
    501e:	b003      	add	sp, #12
    5020:	bd30      	pop	{r4, r5, pc}
	pa_dac &= ~SX127X_PADAC_20DBM_MASK;
    5022:	f89d 3007 	ldrb.w	r3, [sp, #7]
		printk("something here\n");
    5026:	482c      	ldr	r0, [pc, #176]	; (50d8 <SX1276SetRfTxPower+0xec>)
	pa_dac &= ~SX127X_PADAC_20DBM_MASK;
    5028:	f023 0307 	bic.w	r3, r3, #7
    502c:	f88d 3007 	strb.w	r3, [sp, #7]
	if (x < min) {
    5030:	2d14      	cmp	r5, #20
		pa_config |= SX127X_PACONFIG_PASELECT_PABOOST;
    5032:	f89d 3006 	ldrb.w	r3, [sp, #6]
    5036:	462c      	mov	r4, r5
    5038:	bfa8      	it	ge
    503a:	2414      	movge	r4, #20
    503c:	2c02      	cmp	r4, #2
    503e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5042:	bfb8      	it	lt
    5044:	2402      	movlt	r4, #2
    5046:	f88d 3006 	strb.w	r3, [sp, #6]
		printk("something here\n");
    504a:	f002 fec2 	bl	7dd2 <printk>
		if (power > 17) {
    504e:	2d11      	cmp	r5, #17
    5050:	dd1f      	ble.n	5092 <SX1276SetRfTxPower+0xa6>
			printk("something here11111\n");
    5052:	4822      	ldr	r0, [pc, #136]	; (50dc <SX1276SetRfTxPower+0xf0>)
    5054:	f002 febd 	bl	7dd2 <printk>
			pa_dac |= SX127X_PADAC_20DBM_ON;
    5058:	f89d 3007 	ldrb.w	r3, [sp, #7]
    505c:	f043 0307 	orr.w	r3, r3, #7
    5060:	f88d 3007 	strb.w	r3, [sp, #7]
			pa_config |= (power - 5) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
    5064:	3c05      	subs	r4, #5
			pa_config |= (power - 2) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
    5066:	f89d 3006 	ldrb.w	r3, [sp, #6]
	ret = sx127x_write(REG_PACONFIG, &pa_config, 1);
    506a:	2201      	movs	r2, #1
			pa_config |= (power - 2) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
    506c:	431c      	orrs	r4, r3
	ret = sx127x_write(REG_PACONFIG, &pa_config, 1);
    506e:	f10d 0106 	add.w	r1, sp, #6
    5072:	2009      	movs	r0, #9
			pa_config |= (power - 2) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
    5074:	f88d 4006 	strb.w	r4, [sp, #6]
	ret = sx127x_write(REG_PACONFIG, &pa_config, 1);
    5078:	f7ff ff7e 	bl	4f78 <sx127x_write>
	if (ret < 0) {
    507c:	2800      	cmp	r0, #0
    507e:	da13      	bge.n	50a8 <SX1276SetRfTxPower+0xbc>
    5080:	4912      	ldr	r1, [pc, #72]	; (50cc <SX1276SetRfTxPower+0xe0>)
    5082:	4b13      	ldr	r3, [pc, #76]	; (50d0 <SX1276SetRfTxPower+0xe4>)
		LOG_ERR("Unable to write PA config");
    5084:	4816      	ldr	r0, [pc, #88]	; (50e0 <SX1276SetRfTxPower+0xf4>)
    5086:	1ac9      	subs	r1, r1, r3
    5088:	08c9      	lsrs	r1, r1, #3
    508a:	0189      	lsls	r1, r1, #6
    508c:	f041 0101 	orr.w	r1, r1, #1
    5090:	e7c3      	b.n	501a <SX1276SetRfTxPower+0x2e>
			printk("something here22222\n");
    5092:	4814      	ldr	r0, [pc, #80]	; (50e4 <SX1276SetRfTxPower+0xf8>)
    5094:	f002 fe9d 	bl	7dd2 <printk>
			pa_dac |= SX127X_PADAC_20DBM_OFF;
    5098:	f89d 3007 	ldrb.w	r3, [sp, #7]
    509c:	f043 0304 	orr.w	r3, r3, #4
    50a0:	f88d 3007 	strb.w	r3, [sp, #7]
			pa_config |= (power - 2) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
    50a4:	3c02      	subs	r4, #2
    50a6:	e7de      	b.n	5066 <SX1276SetRfTxPower+0x7a>
	ret = sx127x_write(REG_PADAC, &pa_dac, 1);
    50a8:	2201      	movs	r2, #1
    50aa:	f10d 0107 	add.w	r1, sp, #7
    50ae:	204d      	movs	r0, #77	; 0x4d
    50b0:	f7ff ff62 	bl	4f78 <sx127x_write>
	if (ret < 0) {
    50b4:	2800      	cmp	r0, #0
    50b6:	dab2      	bge.n	501e <SX1276SetRfTxPower+0x32>
    50b8:	4904      	ldr	r1, [pc, #16]	; (50cc <SX1276SetRfTxPower+0xe0>)
    50ba:	4b05      	ldr	r3, [pc, #20]	; (50d0 <SX1276SetRfTxPower+0xe4>)
		LOG_ERR("Unable to write PA dac");
    50bc:	480a      	ldr	r0, [pc, #40]	; (50e8 <SX1276SetRfTxPower+0xfc>)
    50be:	1ac9      	subs	r1, r1, r3
    50c0:	08c9      	lsrs	r1, r1, #3
    50c2:	0189      	lsls	r1, r1, #6
    50c4:	f041 0101 	orr.w	r1, r1, #1
    50c8:	e7a7      	b.n	501a <SX1276SetRfTxPower+0x2e>
    50ca:	bf00      	nop
    50cc:	00009384 	.word	0x00009384
    50d0:	00009344 	.word	0x00009344
    50d4:	00009eb8 	.word	0x00009eb8
    50d8:	00009ece 	.word	0x00009ece
    50dc:	00009ede 	.word	0x00009ede
    50e0:	00009f08 	.word	0x00009f08
    50e4:	00009ef3 	.word	0x00009ef3
    50e8:	00009f22 	.word	0x00009f22

000050ec <GetFskBandwidthRegValue>:
{
    50ec:	b510      	push	{r4, lr}
    50ee:	4b09      	ldr	r3, [pc, #36]	; (5114 <GetFskBandwidthRegValue+0x28>)
    50f0:	2200      	movs	r2, #0
    50f2:	4619      	mov	r1, r3
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
    50f4:	681c      	ldr	r4, [r3, #0]
    50f6:	4284      	cmp	r4, r0
    50f8:	d806      	bhi.n	5108 <GetFskBandwidthRegValue+0x1c>
    50fa:	689c      	ldr	r4, [r3, #8]
    50fc:	4284      	cmp	r4, r0
    50fe:	d903      	bls.n	5108 <GetFskBandwidthRegValue+0x1c>
            return FskBandwidths[i].RegValue;
    5100:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    5104:	7910      	ldrb	r0, [r2, #4]
}
    5106:	bd10      	pop	{r4, pc}
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
    5108:	3201      	adds	r2, #1
    510a:	2a15      	cmp	r2, #21
    510c:	f103 0308 	add.w	r3, r3, #8
    5110:	d1f0      	bne.n	50f4 <GetFskBandwidthRegValue+0x8>
    while( 1 );
    5112:	e7fe      	b.n	5112 <GetFskBandwidthRegValue+0x26>
    5114:	000095c4 	.word	0x000095c4

00005118 <SX1276OnDio4Irq>:
    }
}

void SX1276OnDio4Irq( void* context )
{
    switch( SX1276.Settings.Modem )
    5118:	4b05      	ldr	r3, [pc, #20]	; (5130 <SX1276OnDio4Irq+0x18>)
    511a:	f893 20e1 	ldrb.w	r2, [r3, #225]	; 0xe1
    511e:	b92a      	cbnz	r2, 512c <SX1276OnDio4Irq+0x14>
    {
    case MODEM_FSK:
        {
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
    5120:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
    5124:	b912      	cbnz	r2, 512c <SX1276OnDio4Irq+0x14>
            {
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
    5126:	2201      	movs	r2, #1
    5128:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    case MODEM_LORA:
        break;
    default:
        break;
    }
}
    512c:	4770      	bx	lr
    512e:	bf00      	nop
    5130:	20000748 	.word	0x20000748

00005134 <SX1276GetStatus>:
}
    5134:	4b01      	ldr	r3, [pc, #4]	; (513c <SX1276GetStatus+0x8>)
    5136:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
    513a:	4770      	bx	lr
    513c:	20000748 	.word	0x20000748

00005140 <SX1276ReadRssi>:
{
    5140:	b508      	push	{r3, lr}
    switch( modem )
    5142:	b120      	cbz	r0, 514e <SX1276ReadRssi+0xe>
    5144:	2801      	cmp	r0, #1
    5146:	d00a      	beq.n	515e <SX1276ReadRssi+0x1e>
    5148:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    514c:	bd08      	pop	{r3, pc}
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
    514e:	2011      	movs	r0, #17
    5150:	f003 fcb7 	bl	8ac2 <SX1276Read>
    5154:	f3c0 0047 	ubfx	r0, r0, #1, #8
    5158:	4240      	negs	r0, r0
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
    515a:	b200      	sxth	r0, r0
    515c:	e7f6      	b.n	514c <SX1276ReadRssi+0xc>
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
    515e:	4b08      	ldr	r3, [pc, #32]	; (5180 <SX1276ReadRssi+0x40>)
    5160:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    5164:	4b07      	ldr	r3, [pc, #28]	; (5184 <SX1276ReadRssi+0x44>)
    5166:	429a      	cmp	r2, r3
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
    5168:	f04f 001b 	mov.w	r0, #27
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
    516c:	d903      	bls.n	5176 <SX1276ReadRssi+0x36>
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
    516e:	f003 fca8 	bl	8ac2 <SX1276Read>
    5172:	389d      	subs	r0, #157	; 0x9d
    5174:	e7f1      	b.n	515a <SX1276ReadRssi+0x1a>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
    5176:	f003 fca4 	bl	8ac2 <SX1276Read>
    517a:	38a4      	subs	r0, #164	; 0xa4
    517c:	e7ed      	b.n	515a <SX1276ReadRssi+0x1a>
    517e:	bf00      	nop
    5180:	20000748 	.word	0x20000748
    5184:	1f4add40 	.word	0x1f4add40

00005188 <SX1276SetSleep>:
{
    5188:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
    518a:	480a      	ldr	r0, [pc, #40]	; (51b4 <SX1276SetSleep+0x2c>)
    518c:	f000 fdc8 	bl	5d20 <TimerStop>
    TimerStop( &TxTimeoutTimer );
    5190:	4809      	ldr	r0, [pc, #36]	; (51b8 <SX1276SetSleep+0x30>)
    5192:	f000 fdc5 	bl	5d20 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
    5196:	4809      	ldr	r0, [pc, #36]	; (51bc <SX1276SetSleep+0x34>)
    5198:	f000 fdc2 	bl	5d20 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
    519c:	2000      	movs	r0, #0
    519e:	f003 fc9b 	bl	8ad8 <SX1276SetOpMode>
    SX1276SetBoardTcxo( false );
    51a2:	2000      	movs	r0, #0
    51a4:	f003 fc80 	bl	8aa8 <SX1276SetBoardTcxo>
    SX1276.Settings.State = RF_IDLE;
    51a8:	4b05      	ldr	r3, [pc, #20]	; (51c0 <SX1276SetSleep+0x38>)
    51aa:	2200      	movs	r2, #0
    51ac:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
    51b0:	bd08      	pop	{r3, pc}
    51b2:	bf00      	nop
    51b4:	20000730 	.word	0x20000730
    51b8:	2000088c 	.word	0x2000088c
    51bc:	20000718 	.word	0x20000718
    51c0:	20000748 	.word	0x20000748

000051c4 <SX1276SetStby>:
{
    51c4:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
    51c6:	4808      	ldr	r0, [pc, #32]	; (51e8 <SX1276SetStby+0x24>)
    51c8:	f000 fdaa 	bl	5d20 <TimerStop>
    TimerStop( &TxTimeoutTimer );
    51cc:	4807      	ldr	r0, [pc, #28]	; (51ec <SX1276SetStby+0x28>)
    51ce:	f000 fda7 	bl	5d20 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
    51d2:	4807      	ldr	r0, [pc, #28]	; (51f0 <SX1276SetStby+0x2c>)
    51d4:	f000 fda4 	bl	5d20 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_STANDBY );
    51d8:	2001      	movs	r0, #1
    51da:	f003 fc7d 	bl	8ad8 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
    51de:	4b05      	ldr	r3, [pc, #20]	; (51f4 <SX1276SetStby+0x30>)
    51e0:	2200      	movs	r2, #0
    51e2:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
    51e6:	bd08      	pop	{r3, pc}
    51e8:	20000730 	.word	0x20000730
    51ec:	2000088c 	.word	0x2000088c
    51f0:	20000718 	.word	0x20000718
    51f4:	20000748 	.word	0x20000748

000051f8 <SX1276SetRx>:
{
    51f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    switch( SX1276.Settings.Modem )
    51fa:	4c81      	ldr	r4, [pc, #516]	; (5400 <SX1276SetRx+0x208>)
{
    51fc:	4606      	mov	r6, r0
    TimerStop( &TxTimeoutTimer );
    51fe:	4881      	ldr	r0, [pc, #516]	; (5404 <SX1276SetRx+0x20c>)
    5200:	f000 fd8e 	bl	5d20 <TimerStop>
    switch( SX1276.Settings.Modem )
    5204:	f894 50e1 	ldrb.w	r5, [r4, #225]	; 0xe1
    5208:	b32d      	cbz	r5, 5256 <SX1276SetRx+0x5e>
    520a:	2d01      	cmp	r5, #1
    520c:	d04a      	beq.n	52a4 <SX1276SetRx+0xac>
    520e:	2700      	movs	r7, #0
    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
    5210:	487d      	ldr	r0, [pc, #500]	; (5408 <SX1276SetRx+0x210>)
    5212:	f44f 7280 	mov.w	r2, #256	; 0x100
    5216:	2100      	movs	r1, #0
    5218:	f003 ff68 	bl	90ec <memset>
    SX1276.Settings.State = RF_RX_RUNNING;
    521c:	2301      	movs	r3, #1
    521e:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    if( timeout != 0 )
    5222:	b136      	cbz	r6, 5232 <SX1276SetRx+0x3a>
        TimerSetValue( &RxTimeoutTimer, timeout );
    5224:	4879      	ldr	r0, [pc, #484]	; (540c <SX1276SetRx+0x214>)
    5226:	4631      	mov	r1, r6
    5228:	f003 fce3 	bl	8bf2 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
    522c:	4877      	ldr	r0, [pc, #476]	; (540c <SX1276SetRx+0x214>)
    522e:	f000 fd01 	bl	5c34 <TimerStart>
    if( SX1276.Settings.Modem == MODEM_FSK )
    5232:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    5236:	2b00      	cmp	r3, #0
    5238:	f040 80d9 	bne.w	53ee <SX1276SetRx+0x1f6>
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
    523c:	2005      	movs	r0, #5
    523e:	f003 fc4b 	bl	8ad8 <SX1276SetOpMode>
        TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
    5242:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
    5246:	4872      	ldr	r0, [pc, #456]	; (5410 <SX1276SetRx+0x218>)
    5248:	f003 fcd3 	bl	8bf2 <TimerSetValue>
}
    524c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        TimerStart( &RxTimeoutSyncWord );
    5250:	486f      	ldr	r0, [pc, #444]	; (5410 <SX1276SetRx+0x218>)
    5252:	f000 bcef 	b.w	5c34 <TimerStart>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
    5256:	2040      	movs	r0, #64	; 0x40
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
    5258:	f894 7102 	ldrb.w	r7, [r4, #258]	; 0x102
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
    525c:	f003 fc31 	bl	8ac2 <SX1276Read>
                                                                            RF_DIOMAPPING1_DIO0_00 |
    5260:	f000 0103 	and.w	r1, r0, #3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
    5264:	f041 010c 	orr.w	r1, r1, #12
    5268:	2040      	movs	r0, #64	; 0x40
    526a:	f003 fc1f 	bl	8aac <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
    526e:	2041      	movs	r0, #65	; 0x41
    5270:	f003 fc27 	bl	8ac2 <SX1276Read>
    5274:	f060 013e 	orn	r1, r0, #62	; 0x3e
    5278:	b2c9      	uxtb	r1, r1
    527a:	2041      	movs	r0, #65	; 0x41
    527c:	f003 fc16 	bl	8aac <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
    5280:	2035      	movs	r0, #53	; 0x35
    5282:	f003 fc1e 	bl	8ac2 <SX1276Read>
    5286:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    528a:	f884 011a 	strb.w	r0, [r4, #282]	; 0x11a
            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
    528e:	211e      	movs	r1, #30
    5290:	200d      	movs	r0, #13
    5292:	f003 fc0b 	bl	8aac <SX1276Write>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
    5296:	f8a4 510c 	strh.w	r5, [r4, #268]	; 0x10c
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
    529a:	f8a4 5118 	strh.w	r5, [r4, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = 0;
    529e:	f8a4 5116 	strh.w	r5, [r4, #278]	; 0x116
        break;
    52a2:	e7b5      	b.n	5210 <SX1276SetRx+0x18>
            if( SX1276.Settings.LoRa.IqInverted == true )
    52a4:	f894 3131 	ldrb.w	r3, [r4, #305]	; 0x131
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
    52a8:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
    52aa:	b33b      	cbz	r3, 52fc <SX1276SetRx+0x104>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
    52ac:	f003 fc09 	bl	8ac2 <SX1276Read>
    52b0:	f040 0141 	orr.w	r1, r0, #65	; 0x41
    52b4:	b2c9      	uxtb	r1, r1
    52b6:	2033      	movs	r0, #51	; 0x33
    52b8:	f003 fbf8 	bl	8aac <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
    52bc:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
    52be:	203b      	movs	r0, #59	; 0x3b
    52c0:	f003 fbf4 	bl	8aac <SX1276Write>
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
    52c4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    52c8:	2b08      	cmp	r3, #8
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
    52ca:	f04f 0031 	mov.w	r0, #49	; 0x31
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
    52ce:	d87d      	bhi.n	53cc <SX1276SetRx+0x1d4>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
    52d0:	f003 fbf7 	bl	8ac2 <SX1276Read>
    52d4:	f000 017f 	and.w	r1, r0, #127	; 0x7f
    52d8:	2031      	movs	r0, #49	; 0x31
    52da:	f003 fbe7 	bl	8aac <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
    52de:	2100      	movs	r1, #0
    52e0:	2030      	movs	r0, #48	; 0x30
    52e2:	f003 fbe3 	bl	8aac <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
    52e6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    52ea:	2b08      	cmp	r3, #8
    52ec:	d81c      	bhi.n	5328 <SX1276SetRx+0x130>
    52ee:	e8df f003 	tbb	[pc, r3]
    52f2:	3610      	.short	0x3610
    52f4:	5e544a40 	.word	0x5e544a40
    52f8:	6868      	.short	0x6868
    52fa:	68          	.byte	0x68
    52fb:	00          	.byte	0x00
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
    52fc:	f003 fbe1 	bl	8ac2 <SX1276Read>
    5300:	f000 01be 	and.w	r1, r0, #190	; 0xbe
    5304:	f041 0101 	orr.w	r1, r1, #1
    5308:	2033      	movs	r0, #51	; 0x33
    530a:	f003 fbcf 	bl	8aac <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
    530e:	211d      	movs	r1, #29
    5310:	e7d5      	b.n	52be <SX1276SetRx+0xc6>
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
    5312:	202f      	movs	r0, #47	; 0x2f
    5314:	2148      	movs	r1, #72	; 0x48
    5316:	f003 fbc9 	bl	8aac <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
    531a:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
    531e:	f500 50f4 	add.w	r0, r0, #7808	; 0x1e80
    5322:	3002      	adds	r0, #2
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
    5324:	f7fb fd18 	bl	d58 <SX1276SetChannel>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
    5328:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
    532c:	f894 7132 	ldrb.w	r7, [r4, #306]	; 0x132
            if( SX1276.Settings.LoRa.FreqHopOn == true )
    5330:	2b00      	cmp	r3, #0
    5332:	d052      	beq.n	53da <SX1276SetRx+0x1e2>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
    5334:	211d      	movs	r1, #29
    5336:	2011      	movs	r0, #17
    5338:	f003 fbb8 	bl	8aac <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
    533c:	2040      	movs	r0, #64	; 0x40
    533e:	f003 fbc0 	bl	8ac2 <SX1276Read>
    5342:	f000 0133 	and.w	r1, r0, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
    5346:	2040      	movs	r0, #64	; 0x40
    5348:	f003 fbb0 	bl	8aac <SX1276Write>
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
    534c:	2100      	movs	r1, #0
    534e:	200f      	movs	r0, #15
    5350:	f003 fbac 	bl	8aac <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
    5354:	2100      	movs	r1, #0
    5356:	200d      	movs	r0, #13
    5358:	f003 fba8 	bl	8aac <SX1276Write>
        break;
    535c:	e758      	b.n	5210 <SX1276SetRx+0x18>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
    535e:	202f      	movs	r0, #47	; 0x2f
    5360:	2144      	movs	r1, #68	; 0x44
    5362:	f003 fba3 	bl	8aac <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
    5366:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
    536a:	f500 5022 	add.w	r0, r0, #10368	; 0x2880
    536e:	3034      	adds	r0, #52	; 0x34
    5370:	e7d8      	b.n	5324 <SX1276SetRx+0x12c>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
    5372:	202f      	movs	r0, #47	; 0x2f
    5374:	2144      	movs	r1, #68	; 0x44
    5376:	f003 fb99 	bl	8aac <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
    537a:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
    537e:	f500 5074 	add.w	r0, r0, #15616	; 0x3d00
    5382:	3004      	adds	r0, #4
    5384:	e7ce      	b.n	5324 <SX1276SetRx+0x12c>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
    5386:	202f      	movs	r0, #47	; 0x2f
    5388:	2144      	movs	r1, #68	; 0x44
    538a:	f003 fb8f 	bl	8aac <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
    538e:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
    5392:	f500 40a2 	add.w	r0, r0, #20736	; 0x5100
    5396:	305e      	adds	r0, #94	; 0x5e
    5398:	e7c4      	b.n	5324 <SX1276SetRx+0x12c>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
    539a:	202f      	movs	r0, #47	; 0x2f
    539c:	2144      	movs	r1, #68	; 0x44
    539e:	f003 fb85 	bl	8aac <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
    53a2:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
    53a6:	f500 40f4 	add.w	r0, r0, #31232	; 0x7a00
    53aa:	3012      	adds	r0, #18
    53ac:	e7ba      	b.n	5324 <SX1276SetRx+0x12c>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
    53ae:	202f      	movs	r0, #47	; 0x2f
    53b0:	2144      	movs	r1, #68	; 0x44
    53b2:	f003 fb7b 	bl	8aac <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
    53b6:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
    53ba:	f500 4022 	add.w	r0, r0, #41472	; 0xa200
    53be:	30c6      	adds	r0, #198	; 0xc6
    53c0:	e7b0      	b.n	5324 <SX1276SetRx+0x12c>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
    53c2:	2140      	movs	r1, #64	; 0x40
    53c4:	202f      	movs	r0, #47	; 0x2f
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
    53c6:	f003 fb71 	bl	8aac <SX1276Write>
    53ca:	e7ad      	b.n	5328 <SX1276SetRx+0x130>
    53cc:	f003 fb79 	bl	8ac2 <SX1276Read>
    53d0:	f060 017f 	orn	r1, r0, #127	; 0x7f
    53d4:	b2c9      	uxtb	r1, r1
    53d6:	2031      	movs	r0, #49	; 0x31
    53d8:	e7f5      	b.n	53c6 <SX1276SetRx+0x1ce>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
    53da:	211f      	movs	r1, #31
    53dc:	2011      	movs	r0, #17
    53de:	f003 fb65 	bl	8aac <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
    53e2:	2040      	movs	r0, #64	; 0x40
    53e4:	f003 fb6d 	bl	8ac2 <SX1276Read>
    53e8:	f000 013f 	and.w	r1, r0, #63	; 0x3f
    53ec:	e7ab      	b.n	5346 <SX1276SetRx+0x14e>
        if( rxContinuous == true )
    53ee:	b127      	cbz	r7, 53fa <SX1276SetRx+0x202>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
    53f0:	2005      	movs	r0, #5
}
    53f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
    53f6:	f003 bb6f 	b.w	8ad8 <SX1276SetOpMode>
    53fa:	2006      	movs	r0, #6
    53fc:	e7f9      	b.n	53f2 <SX1276SetRx+0x1fa>
    53fe:	bf00      	nop
    5400:	20000748 	.word	0x20000748
    5404:	2000088c 	.word	0x2000088c
    5408:	20000daf 	.word	0x20000daf
    540c:	20000730 	.word	0x20000730
    5410:	20000718 	.word	0x20000718

00005414 <SX1276SetTx>:
{
    5414:	b510      	push	{r4, lr}
    5416:	4604      	mov	r4, r0
    TimerStop( &RxTimeoutTimer );
    5418:	4826      	ldr	r0, [pc, #152]	; (54b4 <SX1276SetTx+0xa0>)
    541a:	f000 fc81 	bl	5d20 <TimerStop>
    TimerSetValue( &TxTimeoutTimer, timeout );
    541e:	4621      	mov	r1, r4
    switch( SX1276.Settings.Modem )
    5420:	4c25      	ldr	r4, [pc, #148]	; (54b8 <SX1276SetTx+0xa4>)
    TimerSetValue( &TxTimeoutTimer, timeout );
    5422:	4826      	ldr	r0, [pc, #152]	; (54bc <SX1276SetTx+0xa8>)
    5424:	f003 fbe5 	bl	8bf2 <TimerSetValue>
    switch( SX1276.Settings.Modem )
    5428:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    542c:	b163      	cbz	r3, 5448 <SX1276SetTx+0x34>
    542e:	2b01      	cmp	r3, #1
    5430:	d024      	beq.n	547c <SX1276SetTx+0x68>
    TimerStart( &TxTimeoutTimer );
    5432:	4822      	ldr	r0, [pc, #136]	; (54bc <SX1276SetTx+0xa8>)
    SX1276.Settings.State = RF_TX_RUNNING;
    5434:	2302      	movs	r3, #2
    5436:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    TimerStart( &TxTimeoutTimer );
    543a:	f000 fbfb 	bl	5c34 <TimerStart>
}
    543e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
    5442:	2003      	movs	r0, #3
    5444:	f003 bb48 	b.w	8ad8 <SX1276SetOpMode>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
    5448:	2040      	movs	r0, #64	; 0x40
    544a:	f003 fb3a 	bl	8ac2 <SX1276Read>
                                                                            RF_DIOMAPPING1_DIO1_MASK &
    544e:	f000 0103 	and.w	r1, r0, #3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
    5452:	f041 0110 	orr.w	r1, r1, #16
    5456:	2040      	movs	r0, #64	; 0x40
    5458:	f003 fb28 	bl	8aac <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
    545c:	2041      	movs	r0, #65	; 0x41
    545e:	f003 fb30 	bl	8ac2 <SX1276Read>
    5462:	f000 013e 	and.w	r1, r0, #62	; 0x3e
    5466:	2041      	movs	r0, #65	; 0x41
    5468:	f003 fb20 	bl	8aac <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
    546c:	2035      	movs	r0, #53	; 0x35
    546e:	f003 fb28 	bl	8ac2 <SX1276Read>
    5472:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    5476:	f884 011a 	strb.w	r0, [r4, #282]	; 0x11a
        break;
    547a:	e7da      	b.n	5432 <SX1276SetTx+0x1e>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
    547c:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
    5480:	b173      	cbz	r3, 54a0 <SX1276SetTx+0x8c>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
    5482:	21f5      	movs	r1, #245	; 0xf5
    5484:	2011      	movs	r0, #17
    5486:	f003 fb11 	bl	8aac <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
    548a:	2040      	movs	r0, #64	; 0x40
    548c:	f003 fb19 	bl	8ac2 <SX1276Read>
    5490:	f000 0133 	and.w	r1, r0, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
    5494:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    5498:	2040      	movs	r0, #64	; 0x40
    549a:	f003 fb07 	bl	8aac <SX1276Write>
    549e:	e7c8      	b.n	5432 <SX1276SetTx+0x1e>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
    54a0:	21f7      	movs	r1, #247	; 0xf7
    54a2:	2011      	movs	r0, #17
    54a4:	f003 fb02 	bl	8aac <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
    54a8:	2040      	movs	r0, #64	; 0x40
    54aa:	f003 fb0a 	bl	8ac2 <SX1276Read>
    54ae:	f000 013f 	and.w	r1, r0, #63	; 0x3f
    54b2:	e7ef      	b.n	5494 <SX1276SetTx+0x80>
    54b4:	20000730 	.word	0x20000730
    54b8:	20000748 	.word	0x20000748
    54bc:	2000088c 	.word	0x2000088c

000054c0 <SX1276SetModem>:
{
    54c0:	b510      	push	{r4, lr}
    54c2:	4604      	mov	r4, r0
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
    54c4:	2001      	movs	r0, #1
    54c6:	f003 fafc 	bl	8ac2 <SX1276Read>
        SX1276.Settings.Modem = MODEM_LORA;
    54ca:	f3c0 10c0 	ubfx	r0, r0, #7, #1
    if( SX1276.Settings.Modem == modem )
    54ce:	42a0      	cmp	r0, r4
    54d0:	4b17      	ldr	r3, [pc, #92]	; (5530 <SX1276SetModem+0x70>)
    54d2:	d102      	bne.n	54da <SX1276SetModem+0x1a>
    54d4:	f883 00e1 	strb.w	r0, [r3, #225]	; 0xe1
}
    54d8:	bd10      	pop	{r4, pc}
    switch( SX1276.Settings.Modem )
    54da:	2c01      	cmp	r4, #1
    SX1276.Settings.Modem = modem;
    54dc:	f883 40e1 	strb.w	r4, [r3, #225]	; 0xe1
        SX1276SetOpMode( RF_OPMODE_SLEEP );
    54e0:	f04f 0000 	mov.w	r0, #0
    switch( SX1276.Settings.Modem )
    54e4:	d013      	beq.n	550e <SX1276SetModem+0x4e>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
    54e6:	f003 faf7 	bl	8ad8 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
    54ea:	2001      	movs	r0, #1
    54ec:	f003 fae9 	bl	8ac2 <SX1276Read>
    54f0:	f000 017f 	and.w	r1, r0, #127	; 0x7f
    54f4:	2001      	movs	r0, #1
    54f6:	f003 fad9 	bl	8aac <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
    54fa:	2100      	movs	r1, #0
    54fc:	2040      	movs	r0, #64	; 0x40
    54fe:	f003 fad5 	bl	8aac <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
    5502:	2130      	movs	r1, #48	; 0x30
}
    5504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        SX1276Write( REG_DIOMAPPING2, 0x00 );
    5508:	2041      	movs	r0, #65	; 0x41
    550a:	f003 bacf 	b.w	8aac <SX1276Write>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
    550e:	f003 fae3 	bl	8ad8 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
    5512:	4620      	mov	r0, r4
    5514:	f003 fad5 	bl	8ac2 <SX1276Read>
    5518:	f060 017f 	orn	r1, r0, #127	; 0x7f
    551c:	b2c9      	uxtb	r1, r1
    551e:	4620      	mov	r0, r4
    5520:	f003 fac4 	bl	8aac <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
    5524:	2100      	movs	r1, #0
    5526:	2040      	movs	r0, #64	; 0x40
    5528:	f003 fac0 	bl	8aac <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
    552c:	2100      	movs	r1, #0
    552e:	e7e9      	b.n	5504 <SX1276SetModem+0x44>
    5530:	20000748 	.word	0x20000748

00005534 <SX1276Init>:
{
    5534:	b538      	push	{r3, r4, r5, lr}
    RadioEvents = events;
    5536:	4b17      	ldr	r3, [pc, #92]	; (5594 <SX1276Init+0x60>)
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
    5538:	4917      	ldr	r1, [pc, #92]	; (5598 <SX1276Init+0x64>)
    RadioEvents = events;
    553a:	6018      	str	r0, [r3, #0]
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
    553c:	4817      	ldr	r0, [pc, #92]	; (559c <SX1276Init+0x68>)
    553e:	4c18      	ldr	r4, [pc, #96]	; (55a0 <SX1276Init+0x6c>)
    5540:	f003 fb4f 	bl	8be2 <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
    5544:	4914      	ldr	r1, [pc, #80]	; (5598 <SX1276Init+0x64>)
    5546:	4817      	ldr	r0, [pc, #92]	; (55a4 <SX1276Init+0x70>)
    5548:	f003 fb4b 	bl	8be2 <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
    554c:	4912      	ldr	r1, [pc, #72]	; (5598 <SX1276Init+0x64>)
    554e:	4816      	ldr	r0, [pc, #88]	; (55a8 <SX1276Init+0x74>)
    5550:	f003 fb47 	bl	8be2 <TimerInit>
    SX1276Reset( );
    5554:	f7ff fbb0 	bl	4cb8 <SX1276Reset>
    RxChainCalibration( );
    5558:	f7fb fc26 	bl	da8 <RxChainCalibration>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
    555c:	2000      	movs	r0, #0
    555e:	f003 fabb 	bl	8ad8 <SX1276SetOpMode>
    SX1276IoIrqInit( DioIrq );
    5562:	4812      	ldr	r0, [pc, #72]	; (55ac <SX1276Init+0x78>)
    5564:	f7ff fbbe 	bl	4ce4 <SX1276IoIrqInit>
    5568:	2500      	movs	r5, #0
        SX1276SetModem( RadioRegsInit[i].Modem );
    556a:	7820      	ldrb	r0, [r4, #0]
    556c:	f7ff ffa8 	bl	54c0 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
    5570:	3501      	adds	r5, #1
    5572:	78a1      	ldrb	r1, [r4, #2]
    5574:	7860      	ldrb	r0, [r4, #1]
    5576:	f003 fa99 	bl	8aac <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
    557a:	2d10      	cmp	r5, #16
    557c:	f104 0403 	add.w	r4, r4, #3
    5580:	d1f3      	bne.n	556a <SX1276Init+0x36>
    SX1276SetModem( MODEM_FSK );
    5582:	2000      	movs	r0, #0
    5584:	f7ff ff9c 	bl	54c0 <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
    5588:	4b09      	ldr	r3, [pc, #36]	; (55b0 <SX1276Init+0x7c>)
    558a:	2200      	movs	r2, #0
    558c:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
    5590:	bd38      	pop	{r3, r4, r5, pc}
    5592:	bf00      	nop
    5594:	20000714 	.word	0x20000714
    5598:	00005b4d 	.word	0x00005b4d
    559c:	2000088c 	.word	0x2000088c
    55a0:	00009f40 	.word	0x00009f40
    55a4:	20000730 	.word	0x20000730
    55a8:	20000718 	.word	0x20000718
    55ac:	20000078 	.word	0x20000078
    55b0:	20000748 	.word	0x20000748

000055b4 <SX1276SetTxContinuousWave>:
{
    55b4:	b530      	push	{r4, r5, lr}
    uint32_t timeout = ( uint32_t )( time * 1000 );
    55b6:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
    55ba:	b08b      	sub	sp, #44	; 0x2c
    uint32_t timeout = ( uint32_t )( time * 1000 );
    55bc:	4354      	muls	r4, r2
{
    55be:	460d      	mov	r5, r1
    SX1276SetChannel( freq );
    55c0:	f7fb fbca 	bl	d58 <SX1276SetChannel>
    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
    55c4:	2300      	movs	r3, #0
    55c6:	2205      	movs	r2, #5
    55c8:	e9cd 3201 	strd	r3, r2, [sp, #4]
    55cc:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
    55d0:	e9cd 3306 	strd	r3, r3, [sp, #24]
    55d4:	e9cd 3304 	strd	r3, r3, [sp, #16]
    55d8:	9303      	str	r3, [sp, #12]
    55da:	4618      	mov	r0, r3
    55dc:	4629      	mov	r1, r5
    55de:	9200      	str	r2, [sp, #0]
    55e0:	9408      	str	r4, [sp, #32]
    55e2:	461a      	mov	r2, r3
    55e4:	f7fb feb0 	bl	1348 <SX1276SetTxConfig>
    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
    55e8:	2031      	movs	r0, #49	; 0x31
    55ea:	f003 fa6a 	bl	8ac2 <SX1276Read>
    55ee:	f000 01bf 	and.w	r1, r0, #191	; 0xbf
    55f2:	2031      	movs	r0, #49	; 0x31
    55f4:	f003 fa5a 	bl	8aac <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
    55f8:	4d0c      	ldr	r5, [pc, #48]	; (562c <SX1276SetTxContinuousWave+0x78>)
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
    55fa:	21f0      	movs	r1, #240	; 0xf0
    55fc:	2040      	movs	r0, #64	; 0x40
    55fe:	f003 fa55 	bl	8aac <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
    5602:	21a0      	movs	r1, #160	; 0xa0
    5604:	2041      	movs	r0, #65	; 0x41
    5606:	f003 fa51 	bl	8aac <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
    560a:	4621      	mov	r1, r4
    560c:	4628      	mov	r0, r5
    560e:	f003 faf0 	bl	8bf2 <TimerSetValue>
    SX1276.Settings.State = RF_TX_RUNNING;
    5612:	4b07      	ldr	r3, [pc, #28]	; (5630 <SX1276SetTxContinuousWave+0x7c>)
    5614:	2202      	movs	r2, #2
    TimerStart( &TxTimeoutTimer );
    5616:	4628      	mov	r0, r5
    SX1276.Settings.State = RF_TX_RUNNING;
    5618:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    TimerStart( &TxTimeoutTimer );
    561c:	f000 fb0a 	bl	5c34 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
    5620:	2003      	movs	r0, #3
}
    5622:	b00b      	add	sp, #44	; 0x2c
    5624:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
    5628:	f003 ba56 	b.w	8ad8 <SX1276SetOpMode>
    562c:	2000088c 	.word	0x2000088c
    5630:	20000748 	.word	0x20000748

00005634 <SX1276OnDio3Irq>:
{
    5634:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.Modem )
    5636:	4b11      	ldr	r3, [pc, #68]	; (567c <SX1276OnDio3Irq+0x48>)
    5638:	f893 60e1 	ldrb.w	r6, [r3, #225]	; 0xe1
    563c:	2e01      	cmp	r6, #1
    563e:	d11c      	bne.n	567a <SX1276OnDio3Irq+0x46>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
    5640:	2012      	movs	r0, #18
    5642:	f003 fa3e 	bl	8ac2 <SX1276Read>
    5646:	f010 0401 	ands.w	r4, r0, #1
    564a:	4d0d      	ldr	r5, [pc, #52]	; (5680 <SX1276OnDio3Irq+0x4c>)
    564c:	d00b      	beq.n	5666 <SX1276OnDio3Irq+0x32>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
    564e:	2105      	movs	r1, #5
    5650:	2012      	movs	r0, #18
    5652:	f003 fa2b 	bl	8aac <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
    5656:	682b      	ldr	r3, [r5, #0]
    5658:	b17b      	cbz	r3, 567a <SX1276OnDio3Irq+0x46>
    565a:	699b      	ldr	r3, [r3, #24]
    565c:	b16b      	cbz	r3, 567a <SX1276OnDio3Irq+0x46>
                RadioEvents->CadDone( true );
    565e:	4630      	mov	r0, r6
}
    5660:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                RadioEvents->CadDone( false );
    5664:	4718      	bx	r3
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
    5666:	2104      	movs	r1, #4
    5668:	2012      	movs	r0, #18
    566a:	f003 fa1f 	bl	8aac <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
    566e:	682b      	ldr	r3, [r5, #0]
    5670:	b11b      	cbz	r3, 567a <SX1276OnDio3Irq+0x46>
    5672:	699b      	ldr	r3, [r3, #24]
    5674:	b10b      	cbz	r3, 567a <SX1276OnDio3Irq+0x46>
                RadioEvents->CadDone( false );
    5676:	4620      	mov	r0, r4
    5678:	e7f2      	b.n	5660 <SX1276OnDio3Irq+0x2c>
}
    567a:	bd70      	pop	{r4, r5, r6, pc}
    567c:	20000748 	.word	0x20000748
    5680:	20000714 	.word	0x20000714

00005684 <SX1276Send>:
{
    5684:	b537      	push	{r0, r1, r2, r4, r5, lr}
    switch( SX1276.Settings.Modem )
    5686:	4c3d      	ldr	r4, [pc, #244]	; (577c <SX1276Send+0xf8>)
{
    5688:	f88d 1007 	strb.w	r1, [sp, #7]
    switch( SX1276.Settings.Modem )
    568c:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
{
    5690:	4605      	mov	r5, r0
    switch( SX1276.Settings.Modem )
    5692:	b133      	cbz	r3, 56a2 <SX1276Send+0x1e>
    5694:	2b01      	cmp	r3, #1
    5696:	d034      	beq.n	5702 <SX1276Send+0x7e>
    5698:	2000      	movs	r0, #0
    SX1276SetTx( txTimeout );
    569a:	f7ff febb 	bl	5414 <SX1276SetTx>
}
    569e:	b003      	add	sp, #12
    56a0:	bd30      	pop	{r4, r5, pc}
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
    56a2:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
            if( SX1276.Settings.Fsk.FixLen == false )
    56a6:	f894 30fe 	ldrb.w	r3, [r4, #254]	; 0xfe
            SX1276.Settings.FskPacketHandler.Size = size;
    56aa:	f89d 1007 	ldrb.w	r1, [sp, #7]
    56ae:	f8a4 1116 	strh.w	r1, [r4, #278]	; 0x116
            if( SX1276.Settings.Fsk.FixLen == false )
    56b2:	b9d3      	cbnz	r3, 56ea <SX1276Send+0x66>
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
    56b4:	2101      	movs	r1, #1
    56b6:	f10d 0007 	add.w	r0, sp, #7
    56ba:	f003 fa6d 	bl	8b98 <SX1276WriteFifo>
            if( ( size > 0 ) && ( size <= 64 ) )
    56be:	f89d 2007 	ldrb.w	r2, [sp, #7]
    56c2:	1e53      	subs	r3, r2, #1
    56c4:	2b3f      	cmp	r3, #63	; 0x3f
    56c6:	d814      	bhi.n	56f2 <SX1276Send+0x6e>
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
    56c8:	f884 211b 	strb.w	r2, [r4, #283]	; 0x11b
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
    56cc:	4628      	mov	r0, r5
    56ce:	f894 111b 	ldrb.w	r1, [r4, #283]	; 0x11b
    56d2:	f003 fa61 	bl	8b98 <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
    56d6:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
    56da:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
    56de:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
    56e2:	4413      	add	r3, r2
    56e4:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
        break;
    56e8:	e7d7      	b.n	569a <SX1276Send+0x16>
                SX1276Write( REG_PAYLOADLENGTH, size );
    56ea:	2032      	movs	r0, #50	; 0x32
    56ec:	f003 f9de 	bl	8aac <SX1276Write>
    56f0:	e7e5      	b.n	56be <SX1276Send+0x3a>
                memcpy1( RxTxBuffer, buffer, size );
    56f2:	4823      	ldr	r0, [pc, #140]	; (5780 <SX1276Send+0xfc>)
    56f4:	4629      	mov	r1, r5
    56f6:	f003 faa5 	bl	8c44 <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
    56fa:	2320      	movs	r3, #32
    56fc:	f884 311b 	strb.w	r3, [r4, #283]	; 0x11b
    5700:	e7e4      	b.n	56cc <SX1276Send+0x48>
            if( SX1276.Settings.LoRa.IqInverted == true )
    5702:	f894 3131 	ldrb.w	r3, [r4, #305]	; 0x131
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
    5706:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
    5708:	b363      	cbz	r3, 5764 <SX1276Send+0xe0>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
    570a:	f003 f9da 	bl	8ac2 <SX1276Read>
    570e:	f000 01be 	and.w	r1, r0, #190	; 0xbe
    5712:	2033      	movs	r0, #51	; 0x33
    5714:	f003 f9ca 	bl	8aac <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
    5718:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
    571a:	203b      	movs	r0, #59	; 0x3b
    571c:	f003 f9c6 	bl	8aac <SX1276Write>
            SX1276.Settings.LoRaPacketHandler.Size = size;
    5720:	f89d 1007 	ldrb.w	r1, [sp, #7]
    5724:	f884 1140 	strb.w	r1, [r4, #320]	; 0x140
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
    5728:	2022      	movs	r0, #34	; 0x22
    572a:	f003 f9bf 	bl	8aac <SX1276Write>
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
    572e:	2100      	movs	r1, #0
    5730:	200e      	movs	r0, #14
    5732:	f003 f9bb 	bl	8aac <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
    5736:	2100      	movs	r1, #0
    5738:	200d      	movs	r0, #13
    573a:	f003 f9b7 	bl	8aac <SX1276Write>
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
    573e:	2001      	movs	r0, #1
    5740:	f003 f9bf 	bl	8ac2 <SX1276Read>
    5744:	f030 03f8 	bics.w	r3, r0, #248	; 0xf8
    5748:	d104      	bne.n	5754 <SX1276Send+0xd0>
                SX1276SetStby( );
    574a:	f7ff fd3b 	bl	51c4 <SX1276SetStby>
                DelayMs( 1 );
    574e:	2001      	movs	r0, #1
    5750:	f003 fa76 	bl	8c40 <DelayMs>
            SX1276WriteFifo( buffer, size );
    5754:	4628      	mov	r0, r5
    5756:	f89d 1007 	ldrb.w	r1, [sp, #7]
    575a:	f003 fa1d 	bl	8b98 <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
    575e:	f8d4 0134 	ldr.w	r0, [r4, #308]	; 0x134
        break;
    5762:	e79a      	b.n	569a <SX1276Send+0x16>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
    5764:	f003 f9ad 	bl	8ac2 <SX1276Read>
    5768:	f000 01be 	and.w	r1, r0, #190	; 0xbe
    576c:	f041 0101 	orr.w	r1, r1, #1
    5770:	2033      	movs	r0, #51	; 0x33
    5772:	f003 f99b 	bl	8aac <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
    5776:	211d      	movs	r1, #29
    5778:	e7cf      	b.n	571a <SX1276Send+0x96>
    577a:	bf00      	nop
    577c:	20000748 	.word	0x20000748
    5780:	20000daf 	.word	0x20000daf

00005784 <SX1276OnDio0Irq>:
{
    5784:	b573      	push	{r0, r1, r4, r5, r6, lr}
    switch( SX1276.Settings.State )
    5786:	4e91      	ldr	r6, [pc, #580]	; (59cc <SX1276OnDio0Irq+0x248>)
    volatile uint8_t irqFlags = 0;
    5788:	2300      	movs	r3, #0
    578a:	f88d 3007 	strb.w	r3, [sp, #7]
    switch( SX1276.Settings.State )
    578e:	f896 30e0 	ldrb.w	r3, [r6, #224]	; 0xe0
    5792:	2b01      	cmp	r3, #1
    5794:	4634      	mov	r4, r6
    5796:	d004      	beq.n	57a2 <SX1276OnDio0Irq+0x1e>
    5798:	2b02      	cmp	r3, #2
    579a:	f000 8101 	beq.w	59a0 <SX1276OnDio0Irq+0x21c>
}
    579e:	b002      	add	sp, #8
    57a0:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
    57a2:	f896 30e1 	ldrb.w	r3, [r6, #225]	; 0xe1
    57a6:	b33b      	cbz	r3, 57f8 <SX1276OnDio0Irq+0x74>
    57a8:	2b01      	cmp	r3, #1
    57aa:	d1f8      	bne.n	579e <SX1276OnDio0Irq+0x1a>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
    57ac:	2140      	movs	r1, #64	; 0x40
    57ae:	2012      	movs	r0, #18
    57b0:	f003 f97c 	bl	8aac <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
    57b4:	2012      	movs	r0, #18
    57b6:	f003 f984 	bl	8ac2 <SX1276Read>
    57ba:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
    57be:	f89d 3007 	ldrb.w	r3, [sp, #7]
    57c2:	4d83      	ldr	r5, [pc, #524]	; (59d0 <SX1276OnDio0Irq+0x24c>)
    57c4:	f013 0f20 	tst.w	r3, #32
    57c8:	f000 8098 	beq.w	58fc <SX1276OnDio0Irq+0x178>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
    57cc:	2120      	movs	r1, #32
    57ce:	2012      	movs	r0, #18
    57d0:	f003 f96c 	bl	8aac <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
    57d4:	f896 3132 	ldrb.w	r3, [r6, #306]	; 0x132
    57d8:	b90b      	cbnz	r3, 57de <SX1276OnDio0Irq+0x5a>
                            SX1276.Settings.State = RF_IDLE;
    57da:	f886 30e0 	strb.w	r3, [r6, #224]	; 0xe0
                        TimerStop( &RxTimeoutTimer );
    57de:	487d      	ldr	r0, [pc, #500]	; (59d4 <SX1276OnDio0Irq+0x250>)
    57e0:	f000 fa9e 	bl	5d20 <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
    57e4:	682b      	ldr	r3, [r5, #0]
    57e6:	2b00      	cmp	r3, #0
    57e8:	d0d9      	beq.n	579e <SX1276OnDio0Irq+0x1a>
    57ea:	691b      	ldr	r3, [r3, #16]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
    57ec:	2b00      	cmp	r3, #0
    57ee:	d0d6      	beq.n	579e <SX1276OnDio0Irq+0x1a>
}
    57f0:	b002      	add	sp, #8
    57f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    RadioEvents->TxDone( );
    57f6:	4718      	bx	r3
                if( SX1276.Settings.Fsk.CrcOn == true )
    57f8:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
    57fc:	4d74      	ldr	r5, [pc, #464]	; (59d0 <SX1276OnDio0Irq+0x24c>)
    57fe:	b3ab      	cbz	r3, 586c <SX1276OnDio0Irq+0xe8>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
    5800:	203f      	movs	r0, #63	; 0x3f
    5802:	f003 f95e 	bl	8ac2 <SX1276Read>
    5806:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
    580a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    580e:	079b      	lsls	r3, r3, #30
    5810:	d42c      	bmi.n	586c <SX1276OnDio0Irq+0xe8>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
    5812:	210b      	movs	r1, #11
    5814:	203e      	movs	r0, #62	; 0x3e
    5816:	f003 f949 	bl	8aac <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
    581a:	2110      	movs	r1, #16
    581c:	203f      	movs	r0, #63	; 0x3f
    581e:	f003 f945 	bl	8aac <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
    5822:	486c      	ldr	r0, [pc, #432]	; (59d4 <SX1276OnDio0Irq+0x250>)
    5824:	f000 fa7c 	bl	5d20 <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
    5828:	f896 6102 	ldrb.w	r6, [r6, #258]	; 0x102
    582c:	b98e      	cbnz	r6, 5852 <SX1276OnDio0Irq+0xce>
                            TimerStop( &RxTimeoutSyncWord );
    582e:	486a      	ldr	r0, [pc, #424]	; (59d8 <SX1276OnDio0Irq+0x254>)
    5830:	f000 fa76 	bl	5d20 <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
    5834:	f884 60e0 	strb.w	r6, [r4, #224]	; 0xe0
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
    5838:	682b      	ldr	r3, [r5, #0]
    583a:	b113      	cbz	r3, 5842 <SX1276OnDio0Irq+0xbe>
    583c:	691b      	ldr	r3, [r3, #16]
    583e:	b103      	cbz	r3, 5842 <SX1276OnDio0Irq+0xbe>
                            RadioEvents->RxError( );
    5840:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
    5842:	2300      	movs	r3, #0
    5844:	f8a4 310c 	strh.w	r3, [r4, #268]	; 0x10c
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
    5848:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
                        SX1276.Settings.FskPacketHandler.Size = 0;
    584c:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
                        break;
    5850:	e7a5      	b.n	579e <SX1276OnDio0Irq+0x1a>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
    5852:	200d      	movs	r0, #13
    5854:	f003 f935 	bl	8ac2 <SX1276Read>
    5858:	f040 0140 	orr.w	r1, r0, #64	; 0x40
    585c:	b2c9      	uxtb	r1, r1
    585e:	200d      	movs	r0, #13
    5860:	f003 f924 	bl	8aac <SX1276Write>
                            TimerStart( &RxTimeoutSyncWord );
    5864:	485c      	ldr	r0, [pc, #368]	; (59d8 <SX1276OnDio0Irq+0x254>)
    5866:	f000 f9e5 	bl	5c34 <TimerStart>
    586a:	e7e5      	b.n	5838 <SX1276OnDio0Irq+0xb4>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
    586c:	f8b4 1116 	ldrh.w	r1, [r4, #278]	; 0x116
    5870:	f8b4 0118 	ldrh.w	r0, [r4, #280]	; 0x118
    5874:	4e59      	ldr	r6, [pc, #356]	; (59dc <SX1276OnDio0Irq+0x258>)
    5876:	ea51 0300 	orrs.w	r3, r1, r0
    587a:	d10a      	bne.n	5892 <SX1276OnDio0Irq+0x10e>
                    if( SX1276.Settings.Fsk.FixLen == false )
    587c:	f894 30fe 	ldrb.w	r3, [r4, #254]	; 0xfe
    5880:	bb4b      	cbnz	r3, 58d6 <SX1276OnDio0Irq+0x152>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
    5882:	4857      	ldr	r0, [pc, #348]	; (59e0 <SX1276OnDio0Irq+0x25c>)
    5884:	2101      	movs	r1, #1
    5886:	f003 f98c 	bl	8ba2 <SX1276ReadFifo>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
    588a:	f8b4 0118 	ldrh.w	r0, [r4, #280]	; 0x118
    588e:	f894 1116 	ldrb.w	r1, [r4, #278]	; 0x116
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
    5892:	1a09      	subs	r1, r1, r0
    5894:	b2c9      	uxtb	r1, r1
    5896:	4430      	add	r0, r6
    5898:	f003 f983 	bl	8ba2 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
    589c:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
                TimerStop( &RxTimeoutTimer );
    58a0:	484c      	ldr	r0, [pc, #304]	; (59d4 <SX1276OnDio0Irq+0x250>)
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
    58a2:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
                TimerStop( &RxTimeoutTimer );
    58a6:	f000 fa3b 	bl	5d20 <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
    58aa:	f894 3102 	ldrb.w	r3, [r4, #258]	; 0x102
    58ae:	b9c3      	cbnz	r3, 58e2 <SX1276OnDio0Irq+0x15e>
                    TimerStop( &RxTimeoutSyncWord );
    58b0:	4849      	ldr	r0, [pc, #292]	; (59d8 <SX1276OnDio0Irq+0x254>)
                    SX1276.Settings.State = RF_IDLE;
    58b2:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                    TimerStop( &RxTimeoutSyncWord );
    58b6:	f000 fa33 	bl	5d20 <TimerStop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
    58ba:	682b      	ldr	r3, [r5, #0]
    58bc:	2b00      	cmp	r3, #0
    58be:	d0c0      	beq.n	5842 <SX1276OnDio0Irq+0xbe>
    58c0:	689d      	ldr	r5, [r3, #8]
    58c2:	2d00      	cmp	r5, #0
    58c4:	d0bd      	beq.n	5842 <SX1276OnDio0Irq+0xbe>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
    58c6:	f994 210e 	ldrsb.w	r2, [r4, #270]	; 0x10e
    58ca:	f8b4 1116 	ldrh.w	r1, [r4, #278]	; 0x116
    58ce:	4843      	ldr	r0, [pc, #268]	; (59dc <SX1276OnDio0Irq+0x258>)
    58d0:	2300      	movs	r3, #0
    58d2:	47a8      	blx	r5
    58d4:	e7b5      	b.n	5842 <SX1276OnDio0Irq+0xbe>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
    58d6:	2032      	movs	r0, #50	; 0x32
    58d8:	f003 f8f3 	bl	8ac2 <SX1276Read>
    58dc:	f8a4 0116 	strh.w	r0, [r4, #278]	; 0x116
    58e0:	e7d3      	b.n	588a <SX1276OnDio0Irq+0x106>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
    58e2:	200d      	movs	r0, #13
    58e4:	f003 f8ed 	bl	8ac2 <SX1276Read>
    58e8:	f040 0140 	orr.w	r1, r0, #64	; 0x40
    58ec:	b2c9      	uxtb	r1, r1
    58ee:	200d      	movs	r0, #13
    58f0:	f003 f8dc 	bl	8aac <SX1276Write>
                    TimerStart( &RxTimeoutSyncWord );
    58f4:	4838      	ldr	r0, [pc, #224]	; (59d8 <SX1276OnDio0Irq+0x254>)
    58f6:	f000 f99d 	bl	5c34 <TimerStart>
    58fa:	e7de      	b.n	58ba <SX1276OnDio0Irq+0x136>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
    58fc:	2019      	movs	r0, #25
    58fe:	f003 f8e0 	bl	8ac2 <SX1276Read>
    5902:	b240      	sxtb	r0, r0
    5904:	3002      	adds	r0, #2
    5906:	1080      	asrs	r0, r0, #2
    5908:	f886 013c 	strb.w	r0, [r6, #316]	; 0x13c
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
    590c:	201a      	movs	r0, #26
    590e:	f003 f8d8 	bl	8ac2 <SX1276Read>
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
    5912:	f996 213c 	ldrsb.w	r2, [r6, #316]	; 0x13c
    5916:	4933      	ldr	r1, [pc, #204]	; (59e4 <SX1276OnDio0Irq+0x260>)
    5918:	2a00      	cmp	r2, #0
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
    591a:	b203      	sxth	r3, r0
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
    591c:	f340 100b 	sbfx	r0, r0, #4, #12
    5920:	da37      	bge.n	5992 <SX1276OnDio0Irq+0x20e>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
    5922:	f8d6 60e4 	ldr.w	r6, [r6, #228]	; 0xe4
    5926:	b212      	sxth	r2, r2
    5928:	428e      	cmp	r6, r1
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
    592a:	bf8c      	ite	hi
    592c:	3a9d      	subhi	r2, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
    592e:	3aa4      	subls	r2, #164	; 0xa4
    5930:	4413      	add	r3, r2
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
    5932:	4403      	add	r3, r0
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
    5934:	2013      	movs	r0, #19
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
    5936:	f8a4 313e 	strh.w	r3, [r4, #318]	; 0x13e
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
    593a:	f003 f8c2 	bl	8ac2 <SX1276Read>
    593e:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
    5942:	2010      	movs	r0, #16
    5944:	f003 f8bd 	bl	8ac2 <SX1276Read>
    5948:	4601      	mov	r1, r0
    594a:	200d      	movs	r0, #13
    594c:	f003 f8ae 	bl	8aac <SX1276Write>
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
    5950:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
    5954:	4821      	ldr	r0, [pc, #132]	; (59dc <SX1276OnDio0Irq+0x258>)
    5956:	f003 f924 	bl	8ba2 <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
    595a:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
    595e:	b90b      	cbnz	r3, 5964 <SX1276OnDio0Irq+0x1e0>
                        SX1276.Settings.State = RF_IDLE;
    5960:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                    TimerStop( &RxTimeoutTimer );
    5964:	481b      	ldr	r0, [pc, #108]	; (59d4 <SX1276OnDio0Irq+0x250>)
    5966:	f000 f9db 	bl	5d20 <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
    596a:	682b      	ldr	r3, [r5, #0]
    596c:	2b00      	cmp	r3, #0
    596e:	f43f af16 	beq.w	579e <SX1276OnDio0Irq+0x1a>
    5972:	689d      	ldr	r5, [r3, #8]
    5974:	2d00      	cmp	r5, #0
    5976:	f43f af12 	beq.w	579e <SX1276OnDio0Irq+0x1a>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
    597a:	f994 313c 	ldrsb.w	r3, [r4, #316]	; 0x13c
    597e:	f9b4 213e 	ldrsh.w	r2, [r4, #318]	; 0x13e
    5982:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
    5986:	4815      	ldr	r0, [pc, #84]	; (59dc <SX1276OnDio0Irq+0x258>)
    5988:	46ac      	mov	ip, r5
}
    598a:	b002      	add	sp, #8
    598c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
    5990:	4760      	bx	ip
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
    5992:	f8d6 20e4 	ldr.w	r2, [r6, #228]	; 0xe4
    5996:	428a      	cmp	r2, r1
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
    5998:	bf8c      	ite	hi
    599a:	3b9d      	subhi	r3, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
    599c:	3ba4      	subls	r3, #164	; 0xa4
    599e:	e7c8      	b.n	5932 <SX1276OnDio0Irq+0x1ae>
            TimerStop( &TxTimeoutTimer );
    59a0:	4811      	ldr	r0, [pc, #68]	; (59e8 <SX1276OnDio0Irq+0x264>)
    59a2:	f000 f9bd 	bl	5d20 <TimerStop>
            switch( SX1276.Settings.Modem )
    59a6:	f896 30e1 	ldrb.w	r3, [r6, #225]	; 0xe1
    59aa:	2b01      	cmp	r3, #1
    59ac:	d103      	bne.n	59b6 <SX1276OnDio0Irq+0x232>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
    59ae:	2108      	movs	r1, #8
    59b0:	2012      	movs	r0, #18
    59b2:	f003 f87b 	bl	8aac <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
    59b6:	2300      	movs	r3, #0
    59b8:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
    59bc:	4b04      	ldr	r3, [pc, #16]	; (59d0 <SX1276OnDio0Irq+0x24c>)
    59be:	681b      	ldr	r3, [r3, #0]
    59c0:	2b00      	cmp	r3, #0
    59c2:	f43f aeec 	beq.w	579e <SX1276OnDio0Irq+0x1a>
    59c6:	681b      	ldr	r3, [r3, #0]
    59c8:	e710      	b.n	57ec <SX1276OnDio0Irq+0x68>
    59ca:	bf00      	nop
    59cc:	20000748 	.word	0x20000748
    59d0:	20000714 	.word	0x20000714
    59d4:	20000730 	.word	0x20000730
    59d8:	20000718 	.word	0x20000718
    59dc:	20000daf 	.word	0x20000daf
    59e0:	2000085e 	.word	0x2000085e
    59e4:	1f4add40 	.word	0x1f4add40
    59e8:	2000088c 	.word	0x2000088c

000059ec <SX1276OnDio1Irq>:
{
    59ec:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
    59ee:	4c3b      	ldr	r4, [pc, #236]	; (5adc <SX1276OnDio1Irq+0xf0>)
    59f0:	f894 60e0 	ldrb.w	r6, [r4, #224]	; 0xe0
    59f4:	2e01      	cmp	r6, #1
    59f6:	4625      	mov	r5, r4
    59f8:	d002      	beq.n	5a00 <SX1276OnDio1Irq+0x14>
    59fa:	2e02      	cmp	r6, #2
    59fc:	d04e      	beq.n	5a9c <SX1276OnDio1Irq+0xb0>
}
    59fe:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
    5a00:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    5a04:	b1ab      	cbz	r3, 5a32 <SX1276OnDio1Irq+0x46>
    5a06:	2b01      	cmp	r3, #1
    5a08:	d1f9      	bne.n	59fe <SX1276OnDio1Irq+0x12>
                TimerStop( &RxTimeoutTimer );
    5a0a:	4835      	ldr	r0, [pc, #212]	; (5ae0 <SX1276OnDio1Irq+0xf4>)
    5a0c:	f000 f988 	bl	5d20 <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
    5a10:	2180      	movs	r1, #128	; 0x80
    5a12:	2012      	movs	r0, #18
    5a14:	f003 f84a 	bl	8aac <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
    5a18:	2300      	movs	r3, #0
    5a1a:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
    5a1e:	4b31      	ldr	r3, [pc, #196]	; (5ae4 <SX1276OnDio1Irq+0xf8>)
    5a20:	681b      	ldr	r3, [r3, #0]
    5a22:	2b00      	cmp	r3, #0
    5a24:	d0eb      	beq.n	59fe <SX1276OnDio1Irq+0x12>
    5a26:	68db      	ldr	r3, [r3, #12]
    5a28:	2b00      	cmp	r3, #0
    5a2a:	d0e8      	beq.n	59fe <SX1276OnDio1Irq+0x12>
}
    5a2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    RadioEvents->RxTimeout( );
    5a30:	4718      	bx	r3
                TimerStop( &RxTimeoutSyncWord );
    5a32:	482d      	ldr	r0, [pc, #180]	; (5ae8 <SX1276OnDio1Irq+0xfc>)
    5a34:	f000 f974 	bl	5d20 <TimerStop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
    5a38:	f8b4 2116 	ldrh.w	r2, [r4, #278]	; 0x116
    5a3c:	f8b4 3118 	ldrh.w	r3, [r4, #280]	; 0x118
    5a40:	4313      	orrs	r3, r2
    5a42:	d107      	bne.n	5a54 <SX1276OnDio1Irq+0x68>
                    if( SX1276.Settings.Fsk.FixLen == false )
    5a44:	f894 30fe 	ldrb.w	r3, [r4, #254]	; 0xfe
    5a48:	b9e3      	cbnz	r3, 5a84 <SX1276OnDio1Irq+0x98>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
    5a4a:	4631      	mov	r1, r6
    5a4c:	f504 708b 	add.w	r0, r4, #278	; 0x116
    5a50:	f003 f8a7 	bl	8ba2 <SX1276ReadFifo>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
    5a54:	f8b5 2118 	ldrh.w	r2, [r5, #280]	; 0x118
    5a58:	f8b5 1116 	ldrh.w	r1, [r5, #278]	; 0x116
    5a5c:	f895 311a 	ldrb.w	r3, [r5, #282]	; 0x11a
    5a60:	4822      	ldr	r0, [pc, #136]	; (5aec <SX1276OnDio1Irq+0x100>)
    5a62:	1a89      	subs	r1, r1, r2
    5a64:	4299      	cmp	r1, r3
    5a66:	4410      	add	r0, r2
    5a68:	db12      	blt.n	5a90 <SX1276OnDio1Irq+0xa4>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
    5a6a:	1e59      	subs	r1, r3, #1
    5a6c:	b2c9      	uxtb	r1, r1
    5a6e:	f003 f898 	bl	8ba2 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
    5a72:	f895 311a 	ldrb.w	r3, [r5, #282]	; 0x11a
    5a76:	f8b5 2118 	ldrh.w	r2, [r5, #280]	; 0x118
    5a7a:	4413      	add	r3, r2
    5a7c:	3b01      	subs	r3, #1
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
    5a7e:	f8a5 3118 	strh.w	r3, [r5, #280]	; 0x118
    5a82:	e7bc      	b.n	59fe <SX1276OnDio1Irq+0x12>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
    5a84:	2032      	movs	r0, #50	; 0x32
    5a86:	f003 f81c 	bl	8ac2 <SX1276Read>
    5a8a:	f8a4 0116 	strh.w	r0, [r4, #278]	; 0x116
    5a8e:	e7e1      	b.n	5a54 <SX1276OnDio1Irq+0x68>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
    5a90:	b2c9      	uxtb	r1, r1
    5a92:	f003 f886 	bl	8ba2 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
    5a96:	f8b5 3116 	ldrh.w	r3, [r5, #278]	; 0x116
    5a9a:	e7f0      	b.n	5a7e <SX1276OnDio1Irq+0x92>
            switch( SX1276.Settings.Modem )
    5a9c:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    5aa0:	2b00      	cmp	r3, #0
    5aa2:	d1ac      	bne.n	59fe <SX1276OnDio1Irq+0x12>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
    5aa4:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
    5aa8:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
    5aac:	f894 111b 	ldrb.w	r1, [r4, #283]	; 0x11b
    5ab0:	480e      	ldr	r0, [pc, #56]	; (5aec <SX1276OnDio1Irq+0x100>)
    5ab2:	1a9b      	subs	r3, r3, r2
    5ab4:	428b      	cmp	r3, r1
    5ab6:	4410      	add	r0, r2
    5ab8:	dd09      	ble.n	5ace <SX1276OnDio1Irq+0xe2>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
    5aba:	f003 f86d 	bl	8b98 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
    5abe:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
    5ac2:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
    5ac6:	4413      	add	r3, r2
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
    5ac8:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
}
    5acc:	e797      	b.n	59fe <SX1276OnDio1Irq+0x12>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
    5ace:	b2d9      	uxtb	r1, r3
    5ad0:	f003 f862 	bl	8b98 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
    5ad4:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
    5ad8:	e7f6      	b.n	5ac8 <SX1276OnDio1Irq+0xdc>
    5ada:	bf00      	nop
    5adc:	20000748 	.word	0x20000748
    5ae0:	20000730 	.word	0x20000730
    5ae4:	20000714 	.word	0x20000714
    5ae8:	20000718 	.word	0x20000718
    5aec:	20000daf 	.word	0x20000daf

00005af0 <SX1276SetMaxPayloadLength>:
{
    5af0:	b538      	push	{r3, r4, r5, lr}
    5af2:	4605      	mov	r5, r0
    5af4:	460c      	mov	r4, r1
    SX1276SetModem( modem );
    5af6:	f7ff fce3 	bl	54c0 <SX1276SetModem>
    switch( modem )
    5afa:	b115      	cbz	r5, 5b02 <SX1276SetMaxPayloadLength+0x12>
    5afc:	2d01      	cmp	r5, #1
    5afe:	d00b      	beq.n	5b18 <SX1276SetMaxPayloadLength+0x28>
}
    5b00:	bd38      	pop	{r3, r4, r5, pc}
        if( SX1276.Settings.Fsk.FixLen == false )
    5b02:	4b07      	ldr	r3, [pc, #28]	; (5b20 <SX1276SetMaxPayloadLength+0x30>)
    5b04:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
    5b08:	2b00      	cmp	r3, #0
    5b0a:	d1f9      	bne.n	5b00 <SX1276SetMaxPayloadLength+0x10>
            SX1276Write( REG_PAYLOADLENGTH, max );
    5b0c:	4621      	mov	r1, r4
    5b0e:	2032      	movs	r0, #50	; 0x32
}
    5b10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
    5b14:	f002 bfca 	b.w	8aac <SX1276Write>
    5b18:	4621      	mov	r1, r4
    5b1a:	2023      	movs	r0, #35	; 0x23
    5b1c:	e7f8      	b.n	5b10 <SX1276SetMaxPayloadLength+0x20>
    5b1e:	bf00      	nop
    5b20:	20000748 	.word	0x20000748

00005b24 <SX1276SetPublicNetwork>:
{
    5b24:	b510      	push	{r4, lr}
    5b26:	4604      	mov	r4, r0
    SX1276SetModem( MODEM_LORA );
    5b28:	2001      	movs	r0, #1
    5b2a:	f7ff fcc9 	bl	54c0 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
    5b2e:	4b06      	ldr	r3, [pc, #24]	; (5b48 <SX1276SetPublicNetwork+0x24>)
    5b30:	f883 4138 	strb.w	r4, [r3, #312]	; 0x138
    if( enable == true )
    5b34:	b12c      	cbz	r4, 5b42 <SX1276SetPublicNetwork+0x1e>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
    5b36:	2134      	movs	r1, #52	; 0x34
}
    5b38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
    5b3c:	2039      	movs	r0, #57	; 0x39
    5b3e:	f002 bfb5 	b.w	8aac <SX1276Write>
    5b42:	2112      	movs	r1, #18
    5b44:	e7f8      	b.n	5b38 <SX1276SetPublicNetwork+0x14>
    5b46:	bf00      	nop
    5b48:	20000748 	.word	0x20000748

00005b4c <SX1276OnTimeoutIrq>:
{
    5b4c:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
    5b4e:	4c2f      	ldr	r4, [pc, #188]	; (5c0c <SX1276OnTimeoutIrq+0xc0>)
    5b50:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    5b54:	2b01      	cmp	r3, #1
    5b56:	4626      	mov	r6, r4
    5b58:	d002      	beq.n	5b60 <SX1276OnTimeoutIrq+0x14>
    5b5a:	2b02      	cmp	r3, #2
    5b5c:	d030      	beq.n	5bc0 <SX1276OnTimeoutIrq+0x74>
}
    5b5e:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Modem == MODEM_FSK )
    5b60:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    5b64:	b9e3      	cbnz	r3, 5ba0 <SX1276OnTimeoutIrq+0x54>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
    5b66:	f8a4 310c 	strh.w	r3, [r4, #268]	; 0x10c
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
    5b6a:	210b      	movs	r1, #11
    5b6c:	203e      	movs	r0, #62	; 0x3e
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
    5b6e:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = 0;
    5b72:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
    5b76:	f002 ff99 	bl	8aac <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
    5b7a:	2110      	movs	r1, #16
    5b7c:	203f      	movs	r0, #63	; 0x3f
    5b7e:	f002 ff95 	bl	8aac <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
    5b82:	f894 3102 	ldrb.w	r3, [r4, #258]	; 0x102
    5b86:	b1ab      	cbz	r3, 5bb4 <SX1276OnTimeoutIrq+0x68>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
    5b88:	200d      	movs	r0, #13
    5b8a:	f002 ff9a 	bl	8ac2 <SX1276Read>
    5b8e:	f040 0140 	orr.w	r1, r0, #64	; 0x40
    5b92:	b2c9      	uxtb	r1, r1
    5b94:	200d      	movs	r0, #13
    5b96:	f002 ff89 	bl	8aac <SX1276Write>
                TimerStart( &RxTimeoutSyncWord );
    5b9a:	481d      	ldr	r0, [pc, #116]	; (5c10 <SX1276OnTimeoutIrq+0xc4>)
    5b9c:	f000 f84a 	bl	5c34 <TimerStart>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
    5ba0:	4b1c      	ldr	r3, [pc, #112]	; (5c14 <SX1276OnTimeoutIrq+0xc8>)
    5ba2:	681b      	ldr	r3, [r3, #0]
    5ba4:	2b00      	cmp	r3, #0
    5ba6:	d0da      	beq.n	5b5e <SX1276OnTimeoutIrq+0x12>
    5ba8:	68db      	ldr	r3, [r3, #12]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
    5baa:	2b00      	cmp	r3, #0
    5bac:	d0d7      	beq.n	5b5e <SX1276OnTimeoutIrq+0x12>
}
    5bae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            RadioEvents->TxTimeout( );
    5bb2:	4718      	bx	r3
                TimerStop( &RxTimeoutSyncWord );
    5bb4:	4816      	ldr	r0, [pc, #88]	; (5c10 <SX1276OnTimeoutIrq+0xc4>)
                SX1276.Settings.State = RF_IDLE;
    5bb6:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                TimerStop( &RxTimeoutSyncWord );
    5bba:	f000 f8b1 	bl	5d20 <TimerStop>
    5bbe:	e7ef      	b.n	5ba0 <SX1276OnTimeoutIrq+0x54>
        SX1276Reset( );
    5bc0:	f7ff f87a 	bl	4cb8 <SX1276Reset>
        RxChainCalibration( );
    5bc4:	f7fb f8f0 	bl	da8 <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
    5bc8:	2000      	movs	r0, #0
    5bca:	f002 ff85 	bl	8ad8 <SX1276SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
    5bce:	4c12      	ldr	r4, [pc, #72]	; (5c18 <SX1276OnTimeoutIrq+0xcc>)
        SX1276SetOpMode( RF_OPMODE_SLEEP );
    5bd0:	2500      	movs	r5, #0
            SX1276SetModem( RadioRegsInit[i].Modem );
    5bd2:	7820      	ldrb	r0, [r4, #0]
    5bd4:	f7ff fc74 	bl	54c0 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
    5bd8:	3501      	adds	r5, #1
    5bda:	78a1      	ldrb	r1, [r4, #2]
    5bdc:	7860      	ldrb	r0, [r4, #1]
    5bde:	f002 ff65 	bl	8aac <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
    5be2:	2d10      	cmp	r5, #16
    5be4:	f104 0403 	add.w	r4, r4, #3
    5be8:	d1f3      	bne.n	5bd2 <SX1276OnTimeoutIrq+0x86>
        SX1276SetModem( MODEM_FSK );
    5bea:	2000      	movs	r0, #0
    5bec:	f7ff fc68 	bl	54c0 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
    5bf0:	f896 0138 	ldrb.w	r0, [r6, #312]	; 0x138
    5bf4:	f7ff ff96 	bl	5b24 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
    5bf8:	2300      	movs	r3, #0
    5bfa:	f886 30e0 	strb.w	r3, [r6, #224]	; 0xe0
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
    5bfe:	4b05      	ldr	r3, [pc, #20]	; (5c14 <SX1276OnTimeoutIrq+0xc8>)
    5c00:	681b      	ldr	r3, [r3, #0]
    5c02:	2b00      	cmp	r3, #0
    5c04:	d0ab      	beq.n	5b5e <SX1276OnTimeoutIrq+0x12>
    5c06:	685b      	ldr	r3, [r3, #4]
    5c08:	e7cf      	b.n	5baa <SX1276OnTimeoutIrq+0x5e>
    5c0a:	bf00      	nop
    5c0c:	20000748 	.word	0x20000748
    5c10:	20000718 	.word	0x20000718
    5c14:	20000714 	.word	0x20000714
    5c18:	00009f40 	.word	0x00009f40

00005c1c <TimerInsertNewHeadTimer>:
    obj->Next = NULL;
}

static void TimerInsertNewHeadTimer( TimerEvent_t *obj )
{
    TimerEvent_t* cur = TimerListHead;
    5c1c:	4b04      	ldr	r3, [pc, #16]	; (5c30 <TimerInsertNewHeadTimer+0x14>)
    5c1e:	681a      	ldr	r2, [r3, #0]

    if( cur != NULL )
    5c20:	b10a      	cbz	r2, 5c26 <TimerInsertNewHeadTimer+0xa>
    {
        cur->IsNext2Expire = false;
    5c22:	2100      	movs	r1, #0
    5c24:	7251      	strb	r1, [r2, #9]
    }

    obj->Next = cur;
    5c26:	6142      	str	r2, [r0, #20]
    TimerListHead = obj;
    5c28:	6018      	str	r0, [r3, #0]
    TimerSetTimeout( TimerListHead );
    5c2a:	f002 bfc4 	b.w	8bb6 <TimerSetTimeout>
    5c2e:	bf00      	nop
    5c30:	200008a4 	.word	0x200008a4

00005c34 <TimerStart>:
{
    5c34:	b537      	push	{r0, r1, r2, r4, r5, lr}
    5c36:	4604      	mov	r4, r0
    CRITICAL_SECTION_BEGIN( );
    5c38:	a801      	add	r0, sp, #4
    5c3a:	f002 fefd 	bl	8a38 <BoardCriticalSectionBegin>
    if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
    5c3e:	b16c      	cbz	r4, 5c5c <TimerStart+0x28>
    CRITICAL_SECTION_END( );
}

static bool TimerExists( TimerEvent_t *obj )
{
    TimerEvent_t* cur = TimerListHead;
    5c40:	4d17      	ldr	r5, [pc, #92]	; (5ca0 <TimerStart+0x6c>)
    5c42:	6829      	ldr	r1, [r5, #0]
    5c44:	460a      	mov	r2, r1

    while( cur != NULL )
    5c46:	b972      	cbnz	r2, 5c66 <TimerStart+0x32>
    obj->Timestamp = obj->ReloadValue;
    5c48:	6863      	ldr	r3, [r4, #4]
    5c4a:	6023      	str	r3, [r4, #0]
    obj->IsStarted = true;
    5c4c:	2301      	movs	r3, #1
    5c4e:	8123      	strh	r3, [r4, #8]
    if( TimerListHead == NULL )
    5c50:	b969      	cbnz	r1, 5c6e <TimerStart+0x3a>
        RtcSetTimerContext( );
    5c52:	f7fe fe9f 	bl	4994 <RtcSetTimerContext>
            TimerInsertNewHeadTimer( obj );
    5c56:	4620      	mov	r0, r4
    5c58:	f7ff ffe0 	bl	5c1c <TimerInsertNewHeadTimer>
        CRITICAL_SECTION_END( );
    5c5c:	a801      	add	r0, sp, #4
    5c5e:	f002 fef5 	bl	8a4c <BoardCriticalSectionEnd>
}
    5c62:	b003      	add	sp, #12
    5c64:	bd30      	pop	{r4, r5, pc}
    {
        if( cur == obj )
    5c66:	4294      	cmp	r4, r2
    5c68:	d0f8      	beq.n	5c5c <TimerStart+0x28>
        {
            return true;
        }
        cur = cur->Next;
    5c6a:	6952      	ldr	r2, [r2, #20]
    5c6c:	e7eb      	b.n	5c46 <TimerStart+0x12>
        elapsedTime = RtcGetTimerElapsedTime( );
    5c6e:	f7fe fe65 	bl	493c <RtcGetTimerElapsedTime>
        obj->Timestamp += elapsedTime;
    5c72:	6823      	ldr	r3, [r4, #0]
    5c74:	4418      	add	r0, r3
        if( obj->Timestamp < TimerListHead->Timestamp )
    5c76:	682b      	ldr	r3, [r5, #0]
        obj->Timestamp += elapsedTime;
    5c78:	6020      	str	r0, [r4, #0]
        if( obj->Timestamp < TimerListHead->Timestamp )
    5c7a:	681a      	ldr	r2, [r3, #0]
    5c7c:	4290      	cmp	r0, r2
    5c7e:	d3ea      	bcc.n	5c56 <TimerStart+0x22>
    TimerEvent_t* next = TimerListHead->Next;
    5c80:	695a      	ldr	r2, [r3, #20]
    while( cur->Next != NULL )
    5c82:	6959      	ldr	r1, [r3, #20]
    5c84:	b911      	cbnz	r1, 5c8c <TimerStart+0x58>
    cur->Next = obj;
    5c86:	615c      	str	r4, [r3, #20]
    obj->Next = NULL;
    5c88:	6161      	str	r1, [r4, #20]
    5c8a:	e7e7      	b.n	5c5c <TimerStart+0x28>
        if( obj->Timestamp > next->Timestamp )
    5c8c:	6811      	ldr	r1, [r2, #0]
    5c8e:	4288      	cmp	r0, r1
    5c90:	d902      	bls.n	5c98 <TimerStart+0x64>
            next = next->Next;
    5c92:	4613      	mov	r3, r2
    5c94:	6952      	ldr	r2, [r2, #20]
    5c96:	e7f4      	b.n	5c82 <TimerStart+0x4e>
            cur->Next = obj;
    5c98:	615c      	str	r4, [r3, #20]
            obj->Next = next;
    5c9a:	6162      	str	r2, [r4, #20]
            return;
    5c9c:	e7de      	b.n	5c5c <TimerStart+0x28>
    5c9e:	bf00      	nop
    5ca0:	200008a4 	.word	0x200008a4

00005ca4 <TimerIrqHandler>:
{
    5ca4:	b570      	push	{r4, r5, r6, lr}
    uint32_t old =  RtcGetTimerContext( );
    5ca6:	f7fe fe7d 	bl	49a4 <RtcGetTimerContext>
    if( TimerListHead != NULL )
    5caa:	4c1c      	ldr	r4, [pc, #112]	; (5d1c <TimerIrqHandler+0x78>)
    uint32_t old =  RtcGetTimerContext( );
    5cac:	4605      	mov	r5, r0
    uint32_t now =  RtcSetTimerContext( );
    5cae:	f7fe fe71 	bl	4994 <RtcSetTimerContext>
    if( TimerListHead != NULL )
    5cb2:	6822      	ldr	r2, [r4, #0]
    5cb4:	b9aa      	cbnz	r2, 5ce2 <TimerIrqHandler+0x3e>
        cur->IsStarted = false;
    5cb6:	2600      	movs	r6, #0
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
    5cb8:	6823      	ldr	r3, [r4, #0]
    5cba:	b9db      	cbnz	r3, 5cf4 <TimerIrqHandler+0x50>
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
    5cbc:	6820      	ldr	r0, [r4, #0]
    5cbe:	bb30      	cbnz	r0, 5d0e <TimerIrqHandler+0x6a>
}
    5cc0:	bd70      	pop	{r4, r5, r6, pc}
            if( next->Timestamp > deltaContext )
    5cc2:	680b      	ldr	r3, [r1, #0]
    5cc4:	42b3      	cmp	r3, r6
                next->Timestamp -= deltaContext;
    5cc6:	bf86      	itte	hi
    5cc8:	195b      	addhi	r3, r3, r5
    5cca:	1a1b      	subhi	r3, r3, r0
                next->Timestamp = 0;
    5ccc:	2300      	movls	r3, #0
    5cce:	600b      	str	r3, [r1, #0]
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
    5cd0:	6949      	ldr	r1, [r1, #20]
    5cd2:	2900      	cmp	r1, #0
    5cd4:	d1f5      	bne.n	5cc2 <TimerIrqHandler+0x1e>
        TimerListHead = TimerListHead->Next;
    5cd6:	6953      	ldr	r3, [r2, #20]
    5cd8:	6023      	str	r3, [r4, #0]
        ExecuteCallBack( cur->Callback, cur->Context );
    5cda:	68d3      	ldr	r3, [r2, #12]
        cur->IsStarted = false;
    5cdc:	7211      	strb	r1, [r2, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
    5cde:	b91b      	cbnz	r3, 5ce8 <TimerIrqHandler+0x44>
    5ce0:	e7fe      	b.n	5ce0 <TimerIrqHandler+0x3c>
    5ce2:	4611      	mov	r1, r2
    uint32_t deltaContext = now - old; // intentional wrap around
    5ce4:	1b46      	subs	r6, r0, r5
    5ce6:	e7f3      	b.n	5cd0 <TimerIrqHandler+0x2c>
        ExecuteCallBack( cur->Callback, cur->Context );
    5ce8:	6910      	ldr	r0, [r2, #16]
    5cea:	4798      	blx	r3
    5cec:	e7e3      	b.n	5cb6 <TimerIrqHandler+0x12>
        ExecuteCallBack( cur->Callback, cur->Context );
    5cee:	6918      	ldr	r0, [r3, #16]
    5cf0:	4790      	blx	r2
    5cf2:	e7e1      	b.n	5cb8 <TimerIrqHandler+0x14>
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
    5cf4:	681d      	ldr	r5, [r3, #0]
    5cf6:	f7fe fe21 	bl	493c <RtcGetTimerElapsedTime>
    5cfa:	4285      	cmp	r5, r0
    5cfc:	d2de      	bcs.n	5cbc <TimerIrqHandler+0x18>
        cur = TimerListHead;
    5cfe:	6823      	ldr	r3, [r4, #0]
        TimerListHead = TimerListHead->Next;
    5d00:	695a      	ldr	r2, [r3, #20]
    5d02:	6022      	str	r2, [r4, #0]
        ExecuteCallBack( cur->Callback, cur->Context );
    5d04:	68da      	ldr	r2, [r3, #12]
        cur->IsStarted = false;
    5d06:	721e      	strb	r6, [r3, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
    5d08:	2a00      	cmp	r2, #0
    5d0a:	d1f0      	bne.n	5cee <TimerIrqHandler+0x4a>
    5d0c:	e7fe      	b.n	5d0c <TimerIrqHandler+0x68>
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
    5d0e:	7a43      	ldrb	r3, [r0, #9]
    5d10:	2b00      	cmp	r3, #0
    5d12:	d1d5      	bne.n	5cc0 <TimerIrqHandler+0x1c>
}
    5d14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        TimerSetTimeout( TimerListHead );
    5d18:	f002 bf4d 	b.w	8bb6 <TimerSetTimeout>
    5d1c:	200008a4 	.word	0x200008a4

00005d20 <TimerStop>:
{
    5d20:	b537      	push	{r0, r1, r2, r4, r5, lr}
    TimerEvent_t* prev = TimerListHead;
    5d22:	4d14      	ldr	r5, [pc, #80]	; (5d74 <TimerStop+0x54>)
{
    5d24:	4604      	mov	r4, r0
    CRITICAL_SECTION_BEGIN( );
    5d26:	a801      	add	r0, sp, #4
    5d28:	f002 fe86 	bl	8a38 <BoardCriticalSectionBegin>
    TimerEvent_t* prev = TimerListHead;
    5d2c:	682b      	ldr	r3, [r5, #0]
    if( ( TimerListHead == NULL ) || ( obj == NULL ) )
    5d2e:	b103      	cbz	r3, 5d32 <TimerStop+0x12>
    5d30:	b924      	cbnz	r4, 5d3c <TimerStop+0x1c>
        CRITICAL_SECTION_END( );
    5d32:	a801      	add	r0, sp, #4
    5d34:	f002 fe8a 	bl	8a4c <BoardCriticalSectionEnd>
}
    5d38:	b003      	add	sp, #12
    5d3a:	bd30      	pop	{r4, r5, pc}
    obj->IsStarted = false;
    5d3c:	2200      	movs	r2, #0
    if( TimerListHead == obj ) // Stop the Head
    5d3e:	42a3      	cmp	r3, r4
    obj->IsStarted = false;
    5d40:	7222      	strb	r2, [r4, #8]
    if( TimerListHead == obj ) // Stop the Head
    5d42:	d10d      	bne.n	5d60 <TimerStop+0x40>
        if( TimerListHead->IsNext2Expire == true ) // The head is already running
    5d44:	7a59      	ldrb	r1, [r3, #9]
    5d46:	695c      	ldr	r4, [r3, #20]
    5d48:	b141      	cbz	r1, 5d5c <TimerStop+0x3c>
            TimerListHead->IsNext2Expire = false;
    5d4a:	725a      	strb	r2, [r3, #9]
            if( TimerListHead->Next != NULL )
    5d4c:	b124      	cbz	r4, 5d58 <TimerStop+0x38>
                TimerSetTimeout( TimerListHead );
    5d4e:	4620      	mov	r0, r4
                TimerListHead = TimerListHead->Next;
    5d50:	602c      	str	r4, [r5, #0]
                TimerSetTimeout( TimerListHead );
    5d52:	f002 ff30 	bl	8bb6 <TimerSetTimeout>
    5d56:	e7ec      	b.n	5d32 <TimerStop+0x12>
                RtcStopAlarm( );
    5d58:	f7fe fdfa 	bl	4950 <RtcStopAlarm>
                TimerListHead = NULL;
    5d5c:	602c      	str	r4, [r5, #0]
    5d5e:	e7e8      	b.n	5d32 <TimerStop+0x12>
                cur = cur->Next;
    5d60:	461a      	mov	r2, r3
    5d62:	695b      	ldr	r3, [r3, #20]
        while( cur != NULL )
    5d64:	2b00      	cmp	r3, #0
    5d66:	d0e4      	beq.n	5d32 <TimerStop+0x12>
            if( cur == obj )
    5d68:	429c      	cmp	r4, r3
    5d6a:	d1f9      	bne.n	5d60 <TimerStop+0x40>
                if( cur->Next != NULL )
    5d6c:	6963      	ldr	r3, [r4, #20]
                    prev->Next = cur;
    5d6e:	6153      	str	r3, [r2, #20]
    5d70:	e7df      	b.n	5d32 <TimerStop+0x12>
    5d72:	bf00      	nop
    5d74:	200008a4 	.word	0x200008a4

00005d78 <uart_nrfx_poll_in>:
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type const * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5d78:	4b06      	ldr	r3, [pc, #24]	; (5d94 <uart_nrfx_poll_in+0x1c>)
    5d7a:	681a      	ldr	r2, [r3, #0]
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrfx_poll_in(const struct device *dev, unsigned char *c)
{
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
    5d7c:	b13a      	cbz	r2, 5d8e <uart_nrfx_poll_in+0x16>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5d7e:	2000      	movs	r0, #0
    5d80:	6018      	str	r0, [r3, #0]
    5d82:	681b      	ldr	r3, [r3, #0]
    nrf_uart_hwfc_pins_set(p_reg, NRF_UART_PSEL_DISCONNECTED, NRF_UART_PSEL_DISCONNECTED);
}

NRF_STATIC_INLINE uint8_t nrf_uart_rxd_get(NRF_UART_Type const * p_reg)
{
    return p_reg->RXD;
    5d84:	4b04      	ldr	r3, [pc, #16]	; (5d98 <uart_nrfx_poll_in+0x20>)
    5d86:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    5d8a:	700b      	strb	r3, [r1, #0]
	nrf_uart_event_clear(uart0_addr, NRF_UART_EVENT_RXDRDY);

	/* got a character */
	*c = nrf_uart_rxd_get(uart0_addr);

	return 0;
    5d8c:	4770      	bx	lr
		return -1;
    5d8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    5d92:	4770      	bx	lr
    5d94:	40002108 	.word	0x40002108
    5d98:	40002000 	.word	0x40002000

00005d9c <uart_nrfx_err_check>:
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    5d9c:	4b02      	ldr	r3, [pc, #8]	; (5da8 <uart_nrfx_err_check+0xc>)
    5d9e:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    5da2:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
/** Console I/O function */
static int uart_nrfx_err_check(const struct device *dev)
{
	/* register bitfields maps to the defines in uart.h */
	return nrf_uart_errorsrc_get_and_clear(uart0_addr);
}
    5da6:	4770      	bx	lr
    5da8:	40002000 	.word	0x40002000

00005dac <uart_nrfx_configure>:

static int uart_nrfx_configure(const struct device *dev,
			       const struct uart_config *cfg)
{
    5dac:	b530      	push	{r4, r5, lr}
	nrf_uart_config_t uart_cfg;

#if defined(UART_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    5dae:	794b      	ldrb	r3, [r1, #5]
    5db0:	2b01      	cmp	r3, #1
    5db2:	d022      	beq.n	5dfa <uart_nrfx_configure+0x4e>
    5db4:	2b03      	cmp	r3, #3
    5db6:	d11d      	bne.n	5df4 <uart_nrfx_configure+0x48>
	case UART_CFG_STOP_BITS_1:
		uart_cfg.stop = NRF_UART_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uart_cfg.stop = NRF_UART_STOP_TWO;
    5db8:	2210      	movs	r2, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    5dba:	798b      	ldrb	r3, [r1, #6]
    5dbc:	2b03      	cmp	r3, #3
    5dbe:	d119      	bne.n	5df4 <uart_nrfx_configure+0x48>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    5dc0:	79cb      	ldrb	r3, [r1, #7]
    5dc2:	b9bb      	cbnz	r3, 5df4 <uart_nrfx_configure+0x48>
	}

#if defined(UART_CONFIG_PARITYTYPE_Msk)
	uart_cfg.paritytype = NRF_UART_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    5dc4:	790c      	ldrb	r4, [r1, #4]
    5dc6:	b114      	cbz	r4, 5dce <uart_nrfx_configure+0x22>
    5dc8:	2c02      	cmp	r4, #2
    5dca:	d113      	bne.n	5df4 <uart_nrfx_configure+0x48>
	case UART_CFG_PARITY_NONE:
		uart_cfg.parity = NRF_UART_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uart_cfg.parity = NRF_UART_PARITY_INCLUDED;
    5dcc:	240e      	movs	r4, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    5dce:	680b      	ldr	r3, [r1, #0]
	switch (baudrate) {
    5dd0:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
    5dd4:	d061      	beq.n	5e9a <uart_nrfx_configure+0xee>
    5dd6:	d82d      	bhi.n	5e34 <uart_nrfx_configure+0x88>
    5dd8:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    5ddc:	d05f      	beq.n	5e9e <uart_nrfx_configure+0xf2>
    5dde:	d816      	bhi.n	5e0e <uart_nrfx_configure+0x62>
    5de0:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    5de4:	d05d      	beq.n	5ea2 <uart_nrfx_configure+0xf6>
    5de6:	d80a      	bhi.n	5dfe <uart_nrfx_configure+0x52>
    5de8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    5dec:	d05c      	beq.n	5ea8 <uart_nrfx_configure+0xfc>
    5dee:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    5df2:	d05c      	beq.n	5eae <uart_nrfx_configure+0x102>
    5df4:	f06f 0085 	mvn.w	r0, #133	; 0x85
    5df8:	e04e      	b.n	5e98 <uart_nrfx_configure+0xec>
	switch (cfg->stop_bits) {
    5dfa:	2200      	movs	r2, #0
    5dfc:	e7dd      	b.n	5dba <uart_nrfx_configure+0xe>
	switch (baudrate) {
    5dfe:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    5e02:	d057      	beq.n	5eb4 <uart_nrfx_configure+0x108>
    5e04:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    5e08:	d1f4      	bne.n	5df4 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
    5e0a:	4b34      	ldr	r3, [pc, #208]	; (5edc <uart_nrfx_configure+0x130>)
    5e0c:	e039      	b.n	5e82 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
    5e0e:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    5e12:	d052      	beq.n	5eba <uart_nrfx_configure+0x10e>
    5e14:	d807      	bhi.n	5e26 <uart_nrfx_configure+0x7a>
    5e16:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    5e1a:	d050      	beq.n	5ebe <uart_nrfx_configure+0x112>
    5e1c:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    5e20:	d1e8      	bne.n	5df4 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
    5e22:	4b2f      	ldr	r3, [pc, #188]	; (5ee0 <uart_nrfx_configure+0x134>)
    5e24:	e02d      	b.n	5e82 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
    5e26:	f647 2512 	movw	r5, #31250	; 0x7a12
    5e2a:	42ab      	cmp	r3, r5
    5e2c:	d1e2      	bne.n	5df4 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
    5e2e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    5e32:	e026      	b.n	5e82 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
    5e34:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    5e38:	d044      	beq.n	5ec4 <uart_nrfx_configure+0x118>
    5e3a:	d811      	bhi.n	5e60 <uart_nrfx_configure+0xb4>
    5e3c:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    5e40:	d042      	beq.n	5ec8 <uart_nrfx_configure+0x11c>
    5e42:	d808      	bhi.n	5e56 <uart_nrfx_configure+0xaa>
    5e44:	f64d 25c0 	movw	r5, #56000	; 0xdac0
    5e48:	42ab      	cmp	r3, r5
    5e4a:	d03f      	beq.n	5ecc <uart_nrfx_configure+0x120>
    5e4c:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    5e50:	d1d0      	bne.n	5df4 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
    5e52:	4b24      	ldr	r3, [pc, #144]	; (5ee4 <uart_nrfx_configure+0x138>)
    5e54:	e015      	b.n	5e82 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
    5e56:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    5e5a:	d1cb      	bne.n	5df4 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
    5e5c:	4b22      	ldr	r3, [pc, #136]	; (5ee8 <uart_nrfx_configure+0x13c>)
    5e5e:	e010      	b.n	5e82 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
    5e60:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    5e64:	d035      	beq.n	5ed2 <uart_nrfx_configure+0x126>
    5e66:	d807      	bhi.n	5e78 <uart_nrfx_configure+0xcc>
    5e68:	4d20      	ldr	r5, [pc, #128]	; (5eec <uart_nrfx_configure+0x140>)
    5e6a:	42ab      	cmp	r3, r5
    5e6c:	d033      	beq.n	5ed6 <uart_nrfx_configure+0x12a>
    5e6e:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    5e72:	d1bf      	bne.n	5df4 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
    5e74:	4b1e      	ldr	r3, [pc, #120]	; (5ef0 <uart_nrfx_configure+0x144>)
    5e76:	e004      	b.n	5e82 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
    5e78:	4d1e      	ldr	r5, [pc, #120]	; (5ef4 <uart_nrfx_configure+0x148>)
    5e7a:	42ab      	cmp	r3, r5
    5e7c:	d1ba      	bne.n	5df4 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
    5e7e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    5e82:	4d1d      	ldr	r5, [pc, #116]	; (5ef8 <uart_nrfx_configure+0x14c>)
                    | (uint32_t)p_cfg->hwfc;
    5e84:	4322      	orrs	r2, r4
    p_reg->BAUDRATE = baudrate;
    5e86:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    5e8a:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uart_configure(uart0_addr, &uart_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    5e8e:	6903      	ldr	r3, [r0, #16]
    5e90:	c903      	ldmia	r1, {r0, r1}
    5e92:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    5e96:	2000      	movs	r0, #0
}
    5e98:	bd30      	pop	{r4, r5, pc}
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
    5e9a:	4b18      	ldr	r3, [pc, #96]	; (5efc <uart_nrfx_configure+0x150>)
    5e9c:	e7f1      	b.n	5e82 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
    5e9e:	4b18      	ldr	r3, [pc, #96]	; (5f00 <uart_nrfx_configure+0x154>)
    5ea0:	e7ef      	b.n	5e82 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
    5ea2:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    5ea6:	e7ec      	b.n	5e82 <uart_nrfx_configure+0xd6>
		nrf_baudrate = 0x00014000;
    5ea8:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    5eac:	e7e9      	b.n	5e82 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
    5eae:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    5eb2:	e7e6      	b.n	5e82 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
    5eb4:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    5eb8:	e7e3      	b.n	5e82 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
    5eba:	4b12      	ldr	r3, [pc, #72]	; (5f04 <uart_nrfx_configure+0x158>)
    5ebc:	e7e1      	b.n	5e82 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
    5ebe:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
    5ec2:	e7de      	b.n	5e82 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
    5ec4:	4b10      	ldr	r3, [pc, #64]	; (5f08 <uart_nrfx_configure+0x15c>)
    5ec6:	e7dc      	b.n	5e82 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
    5ec8:	4b10      	ldr	r3, [pc, #64]	; (5f0c <uart_nrfx_configure+0x160>)
    5eca:	e7da      	b.n	5e82 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
    5ecc:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    5ed0:	e7d7      	b.n	5e82 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
    5ed2:	4b0f      	ldr	r3, [pc, #60]	; (5f10 <uart_nrfx_configure+0x164>)
    5ed4:	e7d5      	b.n	5e82 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
    5ed6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    5eda:	e7d2      	b.n	5e82 <uart_nrfx_configure+0xd6>
    5edc:	0013b000 	.word	0x0013b000
    5ee0:	004ea000 	.word	0x004ea000
    5ee4:	00ebf000 	.word	0x00ebf000
    5ee8:	01d7e000 	.word	0x01d7e000
    5eec:	0003d090 	.word	0x0003d090
    5ef0:	075f7000 	.word	0x075f7000
    5ef4:	000f4240 	.word	0x000f4240
    5ef8:	40002000 	.word	0x40002000
    5efc:	009d5000 	.word	0x009d5000
    5f00:	00275000 	.word	0x00275000
    5f04:	0075f000 	.word	0x0075f000
    5f08:	03afb000 	.word	0x03afb000
    5f0c:	013a9000 	.word	0x013a9000
    5f10:	0ebed000 	.word	0x0ebed000

00005f14 <uart_nrfx_poll_out>:
{
    5f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5f16:	460e      	mov	r6, r1
	if (!k_is_in_isr()) {
    5f18:	f003 f82c 	bl	8f74 <k_is_in_isr>
    5f1c:	4d19      	ldr	r5, [pc, #100]	; (5f84 <uart_nrfx_poll_out+0x70>)
    5f1e:	bb70      	cbnz	r0, 5f7e <uart_nrfx_poll_out+0x6a>
    5f20:	2464      	movs	r4, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    5f22:	2701      	movs	r7, #1
    5f24:	f3bf 8f5b 	dmb	ish
    5f28:	e855 3f00 	ldrex	r3, [r5]
    5f2c:	2b00      	cmp	r3, #0
    5f2e:	d103      	bne.n	5f38 <uart_nrfx_poll_out+0x24>
    5f30:	e845 7200 	strex	r2, r7, [r5]
    5f34:	2a00      	cmp	r2, #0
    5f36:	d1f7      	bne.n	5f28 <uart_nrfx_poll_out+0x14>
    5f38:	f3bf 8f5b 	dmb	ish
		while (atomic_cas((atomic_t *) lock,
    5f3c:	d007      	beq.n	5f4e <uart_nrfx_poll_out+0x3a>
    5f3e:	2021      	movs	r0, #33	; 0x21
    5f40:	2100      	movs	r1, #0
    5f42:	3c01      	subs	r4, #1
    5f44:	f001 f95c 	bl	7200 <z_impl_k_sleep>
			if (--safety_cnt == 0) {
    5f48:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    5f4c:	d1ea      	bne.n	5f24 <uart_nrfx_poll_out+0x10>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5f4e:	4c0e      	ldr	r4, [pc, #56]	; (5f88 <uart_nrfx_poll_out+0x74>)
    5f50:	2200      	movs	r2, #0
    5f52:	6022      	str	r2, [r4, #0]
    5f54:	6822      	ldr	r2, [r4, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5f56:	4a0d      	ldr	r2, [pc, #52]	; (5f8c <uart_nrfx_poll_out+0x78>)
    5f58:	2101      	movs	r1, #1
    5f5a:	6011      	str	r1, [r2, #0]
    p_reg->TXD = txd;
    5f5c:	f8c2 6514 	str.w	r6, [r2, #1300]	; 0x514
    5f60:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5f64:	6823      	ldr	r3, [r4, #0]
	NRFX_WAIT_FOR(event_txdrdy_check(), 1000, 1, res);
    5f66:	b923      	cbnz	r3, 5f72 <uart_nrfx_poll_out+0x5e>
    5f68:	2001      	movs	r0, #1
    5f6a:	f002 fe7e 	bl	8c6a <nrfx_busy_wait>
    5f6e:	3e01      	subs	r6, #1
    5f70:	d1f8      	bne.n	5f64 <uart_nrfx_poll_out+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5f72:	4b07      	ldr	r3, [pc, #28]	; (5f90 <uart_nrfx_poll_out+0x7c>)
    5f74:	2201      	movs	r2, #1
    5f76:	601a      	str	r2, [r3, #0]
	*lock = 0;
    5f78:	2300      	movs	r3, #0
    5f7a:	602b      	str	r3, [r5, #0]
}
    5f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*lock = 1;
    5f7e:	2301      	movs	r3, #1
    5f80:	602b      	str	r3, [r5, #0]
    5f82:	e7e4      	b.n	5f4e <uart_nrfx_poll_out+0x3a>
    5f84:	200008ac 	.word	0x200008ac
    5f88:	4000211c 	.word	0x4000211c
    5f8c:	40002008 	.word	0x40002008
    5f90:	4000200c 	.word	0x4000200c

00005f94 <uart_nrfx_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(const struct device *dev)
{
    5f94:	b510      	push	{r4, lr}
    p_reg->OUTSET = set_mask;
    5f96:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    p_reg->ENABLE = UART_ENABLE_ENABLE_Disabled;
    5f9a:	4c13      	ldr	r4, [pc, #76]	; (5fe8 <uart_nrfx_init+0x54>)
    5f9c:	2200      	movs	r2, #0
    5f9e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
    5fa2:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    5fa6:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    5faa:	2103      	movs	r1, #3
    5fac:	f8c3 1764 	str.w	r1, [r3, #1892]	; 0x764
    5fb0:	f8c3 2760 	str.w	r2, [r3, #1888]	; 0x760
    p_reg->PSEL.RXD = pselrxd;
    5fb4:	2318      	movs	r3, #24
    5fb6:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
    p_reg->PSEL.TXD = pseltxd;
    5fba:	2319      	movs	r3, #25
    5fbc:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
    p_reg->PSEL.RTS = pselrts;
    5fc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5fc4:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
	}

	nrf_uart_hwfc_pins_set(uart0_addr, RTS_PIN, CTS_PIN);

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    5fc8:	6901      	ldr	r1, [r0, #16]
    p_reg->PSEL.CTS = pselcts;
    5fca:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    5fce:	f7ff feed 	bl	5dac <uart_nrfx_configure>
	if (err) {
    5fd2:	b938      	cbnz	r0, 5fe4 <uart_nrfx_init+0x50>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
    5fd4:	2304      	movs	r3, #4
    5fd6:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5fda:	4b04      	ldr	r3, [pc, #16]	; (5fec <uart_nrfx_init+0x58>)
    5fdc:	6018      	str	r0, [r3, #0]
    5fde:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5fe0:	2301      	movs	r3, #1
    5fe2:	6023      	str	r3, [r4, #0]
#if HW_FLOW_CONTROL_AVAILABLE
	k_timer_init(&uart0_cb.tx_timeout_timer, tx_timeout, NULL);
#endif
#endif
	return 0;
}
    5fe4:	bd10      	pop	{r4, pc}
    5fe6:	bf00      	nop
    5fe8:	40002000 	.word	0x40002000
    5fec:	40002108 	.word	0x40002108

00005ff0 <nrf52_errata_136>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5ff0:	4b06      	ldr	r3, [pc, #24]	; (600c <nrf52_errata_136+0x1c>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    5ff2:	681b      	ldr	r3, [r3, #0]
    5ff4:	2b08      	cmp	r3, #8
    5ff6:	d106      	bne.n	6006 <nrf52_errata_136+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    5ff8:	4b05      	ldr	r3, [pc, #20]	; (6010 <nrf52_errata_136+0x20>)
    5ffa:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
    5ffc:	2b05      	cmp	r3, #5
    5ffe:	d802      	bhi.n	6006 <nrf52_errata_136+0x16>
    6000:	4a04      	ldr	r2, [pc, #16]	; (6014 <nrf52_errata_136+0x24>)
    6002:	5cd0      	ldrb	r0, [r2, r3]
    6004:	4770      	bx	lr
                    default:
                        return true;
                }
            }
        #endif
        return false;
    6006:	2000      	movs	r0, #0
    #endif
}
    6008:	4770      	bx	lr
    600a:	bf00      	nop
    600c:	10000130 	.word	0x10000130
    6010:	10000134 	.word	0x10000134
    6014:	00009f77 	.word	0x00009f77

00006018 <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    6018:	4b06      	ldr	r3, [pc, #24]	; (6034 <nrf52_errata_103+0x1c>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    601a:	681b      	ldr	r3, [r3, #0]
    601c:	2b08      	cmp	r3, #8
    601e:	d106      	bne.n	602e <nrf52_errata_103+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    6020:	4b05      	ldr	r3, [pc, #20]	; (6038 <nrf52_errata_103+0x20>)
    6022:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
    6024:	2b05      	cmp	r3, #5
    6026:	d802      	bhi.n	602e <nrf52_errata_103+0x16>
    6028:	4a04      	ldr	r2, [pc, #16]	; (603c <nrf52_errata_103+0x24>)
    602a:	5cd0      	ldrb	r0, [r2, r3]
    602c:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
    602e:	2000      	movs	r0, #0
    #endif
}
    6030:	4770      	bx	lr
    6032:	bf00      	nop
    6034:	10000130 	.word	0x10000130
    6038:	10000134 	.word	0x10000134
    603c:	00009f7d 	.word	0x00009f7d

00006040 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    6040:	4a02      	ldr	r2, [pc, #8]	; (604c <nvmc_wait+0xc>)
    6042:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    6046:	2b00      	cmp	r3, #0
    6048:	d0fb      	beq.n	6042 <nvmc_wait+0x2>
}
    604a:	4770      	bx	lr
    604c:	4001e000 	.word	0x4001e000

00006050 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    6050:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    6052:	f7ff ffcd 	bl	5ff0 <nrf52_errata_136>
    6056:	b140      	cbz	r0, 606a <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    6058:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    605c:	2200      	movs	r2, #0
    605e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    6062:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    6066:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    606a:	f7ff ffc1 	bl	5ff0 <nrf52_errata_136>
    606e:	2800      	cmp	r0, #0
    6070:	d046      	beq.n	6100 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    6072:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    6076:	4b52      	ldr	r3, [pc, #328]	; (61c0 <SystemInit+0x170>)
    6078:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    607c:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    6080:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    6084:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    6088:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    608c:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    6090:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    6094:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    6098:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    609c:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    60a0:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    60a4:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    60a8:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    60ac:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    60b0:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    60b4:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    60b8:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    60bc:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    60c0:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    60c4:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    60c8:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    60cc:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    60d0:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    60d4:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    60d8:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    60dc:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    60e0:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    60e4:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    60e8:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    60ec:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    60f0:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    60f4:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    60f8:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    60fc:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    6100:	f7ff ff8a 	bl	6018 <nrf52_errata_103>
    6104:	b110      	cbz	r0, 610c <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    6106:	4b2f      	ldr	r3, [pc, #188]	; (61c4 <SystemInit+0x174>)
    6108:	4a2f      	ldr	r2, [pc, #188]	; (61c8 <SystemInit+0x178>)
    610a:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    610c:	f7ff ff84 	bl	6018 <nrf52_errata_103>
    6110:	b118      	cbz	r0, 611a <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    6112:	4b2e      	ldr	r3, [pc, #184]	; (61cc <SystemInit+0x17c>)
    6114:	22fb      	movs	r2, #251	; 0xfb
    6116:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    611a:	f7ff ff7d 	bl	6018 <nrf52_errata_103>
    611e:	b148      	cbz	r0, 6134 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    6120:	492b      	ldr	r1, [pc, #172]	; (61d0 <SystemInit+0x180>)
    6122:	4b2c      	ldr	r3, [pc, #176]	; (61d4 <SystemInit+0x184>)
    6124:	680a      	ldr	r2, [r1, #0]
    6126:	681b      	ldr	r3, [r3, #0]
    6128:	f022 020f 	bic.w	r2, r2, #15
    612c:	f003 030f 	and.w	r3, r3, #15
    6130:	4313      	orrs	r3, r2
    6132:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    6134:	f7ff ff70 	bl	6018 <nrf52_errata_103>
    6138:	b118      	cbz	r0, 6142 <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    613a:	4b27      	ldr	r3, [pc, #156]	; (61d8 <SystemInit+0x188>)
    613c:	f44f 7200 	mov.w	r2, #512	; 0x200
    6140:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    6142:	f7ff ff55 	bl	5ff0 <nrf52_errata_136>
    6146:	b148      	cbz	r0, 615c <SystemInit+0x10c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    6148:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    614c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    6150:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    6152:	bf44      	itt	mi
    6154:	f06f 0201 	mvnmi.w	r2, #1
    6158:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    615c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    6160:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    6164:	2a00      	cmp	r2, #0
    6166:	db03      	blt.n	6170 <SystemInit+0x120>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    6168:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    616c:	2b00      	cmp	r3, #0
    616e:	da22      	bge.n	61b6 <SystemInit+0x166>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    6170:	491a      	ldr	r1, [pc, #104]	; (61dc <SystemInit+0x18c>)
    6172:	2301      	movs	r3, #1
    6174:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    6178:	f7ff ff62 	bl	6040 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    617c:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    6180:	2412      	movs	r4, #18
    6182:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    6186:	f7ff ff5b 	bl	6040 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    618a:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    618e:	f7ff ff57 	bl	6040 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    6192:	2300      	movs	r3, #0
    6194:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    6198:	f7ff ff52 	bl	6040 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    619c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    61a0:	490f      	ldr	r1, [pc, #60]	; (61e0 <SystemInit+0x190>)
    61a2:	4b10      	ldr	r3, [pc, #64]	; (61e4 <SystemInit+0x194>)
    61a4:	68ca      	ldr	r2, [r1, #12]
    61a6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    61aa:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    61ac:	60cb      	str	r3, [r1, #12]
    61ae:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    61b2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    61b4:	e7fd      	b.n	61b2 <SystemInit+0x162>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    61b6:	4b0c      	ldr	r3, [pc, #48]	; (61e8 <SystemInit+0x198>)
    61b8:	4a0c      	ldr	r2, [pc, #48]	; (61ec <SystemInit+0x19c>)
    61ba:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    61bc:	bd10      	pop	{r4, pc}
    61be:	bf00      	nop
    61c0:	4000c000 	.word	0x4000c000
    61c4:	4000568c 	.word	0x4000568c
    61c8:	00038148 	.word	0x00038148
    61cc:	4000f000 	.word	0x4000f000
    61d0:	40000ee4 	.word	0x40000ee4
    61d4:	10000258 	.word	0x10000258
    61d8:	40029640 	.word	0x40029640
    61dc:	4001e000 	.word	0x4001e000
    61e0:	e000ed00 	.word	0xe000ed00
    61e4:	05fa0004 	.word	0x05fa0004
    61e8:	20000098 	.word	0x20000098
    61ec:	03d09000 	.word	0x03d09000

000061f0 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    61f0:	4b04      	ldr	r3, [pc, #16]	; (6204 <nrfx_clock_init+0x14>)
    61f2:	791a      	ldrb	r2, [r3, #4]
    61f4:	b922      	cbnz	r2, 6200 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    61f6:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    61f8:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    61fa:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    61fc:	4802      	ldr	r0, [pc, #8]	; (6208 <nrfx_clock_init+0x18>)
    61fe:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    6200:	4802      	ldr	r0, [pc, #8]	; (620c <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    6202:	4770      	bx	lr
    6204:	200008b0 	.word	0x200008b0
    6208:	0bad0000 	.word	0x0bad0000
    620c:	0bad000c 	.word	0x0bad000c

00006210 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    6210:	b110      	cbz	r0, 6218 <nrfx_clock_start+0x8>
    6212:	2801      	cmp	r0, #1
    6214:	d020      	beq.n	6258 <nrfx_clock_start+0x48>
    6216:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6218:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    621c:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6220:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    6224:	f411 3f80 	tst.w	r1, #65536	; 0x10000
    6228:	4619      	mov	r1, r3
    622a:	d011      	beq.n	6250 <nrfx_clock_start+0x40>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    622c:	f002 0203 	and.w	r2, r2, #3
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    6230:	2a01      	cmp	r2, #1
    6232:	d10d      	bne.n	6250 <nrfx_clock_start+0x40>
    p_reg->LFCLKSRC = (uint32_t)(source);
    6234:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6238:	4b0c      	ldr	r3, [pc, #48]	; (626c <nrfx_clock_start+0x5c>)
    623a:	2200      	movs	r2, #0
    623c:	601a      	str	r2, [r3, #0]
    623e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    6240:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6244:	2202      	movs	r2, #2
    6246:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    624a:	2201      	movs	r2, #1
    624c:	609a      	str	r2, [r3, #8]
}
    624e:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
    6250:	2300      	movs	r3, #0
    6252:	f8c1 3518 	str.w	r3, [r1, #1304]	; 0x518
}
    6256:	e7ef      	b.n	6238 <nrfx_clock_start+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6258:	4b05      	ldr	r3, [pc, #20]	; (6270 <nrfx_clock_start+0x60>)
    625a:	2200      	movs	r2, #0
    625c:	601a      	str	r2, [r3, #0]
    625e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    6260:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6264:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6268:	6018      	str	r0, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    626a:	4770      	bx	lr
    626c:	40000104 	.word	0x40000104
    6270:	40000100 	.word	0x40000100

00006274 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    6274:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    6276:	b110      	cbz	r0, 627e <nrfx_clock_stop+0xa>
    6278:	2801      	cmp	r0, #1
    627a:	d018      	beq.n	62ae <nrfx_clock_stop+0x3a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    627c:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
    627e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6282:	2202      	movs	r2, #2
    6284:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6288:	4a18      	ldr	r2, [pc, #96]	; (62ec <nrfx_clock_stop+0x78>)
    628a:	6010      	str	r0, [r2, #0]
    628c:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    628e:	4a18      	ldr	r2, [pc, #96]	; (62f0 <nrfx_clock_stop+0x7c>)
    6290:	2101      	movs	r1, #1
    6292:	6011      	str	r1, [r2, #0]
    6294:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6298:	461c      	mov	r4, r3
    629a:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
    629e:	03db      	lsls	r3, r3, #15
    62a0:	d5ec      	bpl.n	627c <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    62a2:	2001      	movs	r0, #1
    62a4:	f002 fce1 	bl	8c6a <nrfx_busy_wait>
    62a8:	3d01      	subs	r5, #1
    62aa:	d1f6      	bne.n	629a <nrfx_clock_stop+0x26>
    62ac:	e7e6      	b.n	627c <nrfx_clock_stop+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    62ae:	4b11      	ldr	r3, [pc, #68]	; (62f4 <nrfx_clock_stop+0x80>)
    p_reg->INTENCLR = mask;
    62b0:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    62b4:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    62b6:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    62ba:	601a      	str	r2, [r3, #0]
    62bc:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    62be:	4b0e      	ldr	r3, [pc, #56]	; (62f8 <nrfx_clock_stop+0x84>)
    62c0:	f242 7510 	movw	r5, #10000	; 0x2710
    62c4:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    62c6:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    62ca:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
    62ce:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    62d0:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    62d4:	d505      	bpl.n	62e2 <nrfx_clock_stop+0x6e>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    62d6:	b123      	cbz	r3, 62e2 <nrfx_clock_stop+0x6e>
    62d8:	2001      	movs	r0, #1
    62da:	f002 fcc6 	bl	8c6a <nrfx_busy_wait>
    62de:	3d01      	subs	r5, #1
    62e0:	d1f1      	bne.n	62c6 <nrfx_clock_stop+0x52>
            m_clock_cb.hfclk_started = false;
    62e2:	4b06      	ldr	r3, [pc, #24]	; (62fc <nrfx_clock_stop+0x88>)
    62e4:	2200      	movs	r2, #0
    62e6:	715a      	strb	r2, [r3, #5]
    62e8:	e7c8      	b.n	627c <nrfx_clock_stop+0x8>
    62ea:	bf00      	nop
    62ec:	40000104 	.word	0x40000104
    62f0:	4000000c 	.word	0x4000000c
    62f4:	40000100 	.word	0x40000100
    62f8:	40000004 	.word	0x40000004
    62fc:	200008b0 	.word	0x200008b0

00006300 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    6300:	4b16      	ldr	r3, [pc, #88]	; (635c <nrfx_power_clock_irq_handler+0x5c>)
    6302:	681a      	ldr	r2, [r3, #0]
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    6304:	b510      	push	{r4, lr}
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    6306:	b16a      	cbz	r2, 6324 <nrfx_power_clock_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6308:	2200      	movs	r2, #0
    630a:	601a      	str	r2, [r3, #0]
    630c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    630e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6312:	2201      	movs	r2, #1
    6314:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    6318:	4b11      	ldr	r3, [pc, #68]	; (6360 <nrfx_power_clock_irq_handler+0x60>)
    631a:	7958      	ldrb	r0, [r3, #5]
    631c:	b910      	cbnz	r0, 6324 <nrfx_power_clock_irq_handler+0x24>
        {
            m_clock_cb.hfclk_started = true;
    631e:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    6320:	681b      	ldr	r3, [r3, #0]
    6322:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    6324:	4b0f      	ldr	r3, [pc, #60]	; (6364 <nrfx_power_clock_irq_handler+0x64>)
    6326:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    6328:	b172      	cbz	r2, 6348 <nrfx_power_clock_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    632a:	2200      	movs	r2, #0
    632c:	601a      	str	r2, [r3, #0]
    632e:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6330:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6334:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6338:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    633c:	0792      	lsls	r2, r2, #30
    633e:	d104      	bne.n	634a <nrfx_power_clock_irq_handler+0x4a>
    p_reg->LFCLKSRC = (uint32_t)(source);
    6340:	2201      	movs	r2, #1
    6342:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6346:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    6348:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    634a:	2202      	movs	r2, #2
    634c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    6350:	4b03      	ldr	r3, [pc, #12]	; (6360 <nrfx_power_clock_irq_handler+0x60>)
}
    6352:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    6356:	681b      	ldr	r3, [r3, #0]
    6358:	2001      	movs	r0, #1
    635a:	4718      	bx	r3
    635c:	40000100 	.word	0x40000100
    6360:	200008b0 	.word	0x200008b0
    6364:	40000104 	.word	0x40000104

00006368 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
    6368:	2301      	movs	r3, #1
    636a:	fa03 f000 	lsl.w	r0, r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
    636e:	f010 0fff 	tst.w	r0, #255	; 0xff
    6372:	d012      	beq.n	639a <nrfx_gpiote_channel_free+0x32>
	__asm__ volatile(
    6374:	f04f 0320 	mov.w	r3, #32
    6378:	f3ef 8111 	mrs	r1, BASEPRI
    637c:	f383 8811 	msr	BASEPRI, r3
    6380:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
    6384:	4a06      	ldr	r2, [pc, #24]	; (63a0 <nrfx_gpiote_channel_free+0x38>)
    6386:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    6388:	ea23 0000 	bic.w	r0, r3, r0
    638c:	65d0      	str	r0, [r2, #92]	; 0x5c
	__asm__ volatile(
    638e:	f381 8811 	msr	BASEPRI, r1
    6392:	f3bf 8f6f 	isb	sy
    6396:	4803      	ldr	r0, [pc, #12]	; (63a4 <nrfx_gpiote_channel_free+0x3c>)
    6398:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    639a:	4803      	ldr	r0, [pc, #12]	; (63a8 <nrfx_gpiote_channel_free+0x40>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    639c:	4770      	bx	lr
    639e:	bf00      	nop
    63a0:	200008b8 	.word	0x200008b8
    63a4:	0bad0000 	.word	0x0bad0000
    63a8:	0bad0004 	.word	0x0bad0004

000063ac <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
    63ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    63b0:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
    63b2:	f8df e060 	ldr.w	lr, [pc, #96]	; 6414 <nrfx_gpiote_channel_alloc+0x68>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    63b6:	4816      	ldr	r0, [pc, #88]	; (6410 <nrfx_gpiote_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
    63b8:	f8df 805c 	ldr.w	r8, [pc, #92]	; 6418 <nrfx_gpiote_channel_alloc+0x6c>
{
    63bc:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
    63be:	22ff      	movs	r2, #255	; 0xff
    return m_cb.allocated_channels_mask & (1UL << index);
    63c0:	2601      	movs	r6, #1
    63c2:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
    63c4:	f04f 0120 	mov.w	r1, #32
    63c8:	f3ef 8c11 	mrs	ip, BASEPRI
    63cc:	f381 8811 	msr	BASEPRI, r1
    63d0:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    63d4:	fa22 f103 	lsr.w	r1, r2, r3
    63d8:	07c9      	lsls	r1, r1, #31
    63da:	d50a      	bpl.n	63f2 <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
    63dc:	f8de 105c 	ldr.w	r1, [lr, #92]	; 0x5c
    63e0:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    63e4:	4239      	tst	r1, r7
    m_cb.allocated_channels_mask |= (1UL << index);
    63e6:	bf01      	itttt	eq
    63e8:	4339      	orreq	r1, r7
    63ea:	f8ce 105c 	streq.w	r1, [lr, #92]	; 0x5c
            err_code = NRFX_SUCCESS;
    63ee:	4640      	moveq	r0, r8
            *p_channel = ch_idx;
    63f0:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
    63f2:	f38c 8811 	msr	BASEPRI, ip
    63f6:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
    63fa:	4540      	cmp	r0, r8
    63fc:	d005      	beq.n	640a <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
    63fe:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    6402:	439a      	bics	r2, r3
    6404:	f104 0401 	add.w	r4, r4, #1
    6408:	d1db      	bne.n	63c2 <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    640a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    640e:	bf00      	nop
    6410:	0bad0002 	.word	0x0bad0002
    6414:	200008b8 	.word	0x200008b8
    6418:	0bad0000 	.word	0x0bad0000

0000641c <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    641c:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    641e:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    6422:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6424:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    6426:	6002      	str	r2, [r0, #0]
}
    6428:	4802      	ldr	r0, [pc, #8]	; (6434 <nrf_gpio_pin_port_decode+0x18>)
    642a:	bf18      	it	ne
    642c:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    6430:	4770      	bx	lr
    6432:	bf00      	nop
    6434:	50000300 	.word	0x50000300

00006438 <nrfx_spi_init>:

nrfx_err_t nrfx_spi_init(nrfx_spi_t const *        p_instance,
                         nrfx_spi_config_t const * p_config,
                         nrfx_spi_evt_handler_t    handler,
                         void *                    p_context)
{
    6438:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    NRFX_ASSERT(p_config);
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    643c:	7906      	ldrb	r6, [r0, #4]
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    643e:	4c4c      	ldr	r4, [pc, #304]	; (6570 <nrfx_spi_init+0x138>)
{
    6440:	4680      	mov	r8, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    6442:	2028      	movs	r0, #40	; 0x28
    6444:	4370      	muls	r0, r6
    6446:	1825      	adds	r5, r4, r0
    6448:	7f2f      	ldrb	r7, [r5, #28]
    644a:	2f00      	cmp	r7, #0
    644c:	f040 808e 	bne.w	656c <nrfx_spi_init+0x134>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    6450:	5022      	str	r2, [r4, r0]
    p_cb->p_context = p_context;
    6452:	606b      	str	r3, [r5, #4]
    // Configure pins used by the peripheral:
    // - SCK - output with initial value corresponding with the SPI mode used:
    //   0 - for modes 0 and 1 (CPOL = 0), 1 - for modes 2 and 3 (CPOL = 1);
    //   according to the reference manual guidelines this pin and its input
    //   buffer must always be connected for the SPI to work.
    if (p_config->mode <= NRF_SPI_MODE_1)
    6454:	7b0b      	ldrb	r3, [r1, #12]
    6456:	7808      	ldrb	r0, [r1, #0]
    6458:	2b01      	cmp	r3, #1
    645a:	d878      	bhi.n	654e <nrfx_spi_init+0x116>
    {
        nrf_gpio_pin_clear(p_config->sck_pin);
    645c:	f002 fc1e 	bl	8c9c <nrf_gpio_pin_clear>
    }
    else
    {
        nrf_gpio_pin_set(p_config->sck_pin);
    }
    nrf_gpio_cfg(p_config->sck_pin,
    6460:	780b      	ldrb	r3, [r1, #0]
    6462:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6464:	a801      	add	r0, sp, #4
    6466:	f7ff ffd9 	bl	641c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    646a:	9b01      	ldr	r3, [sp, #4]
    646c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    6470:	2201      	movs	r2, #1
    6472:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                 NRF_GPIO_PIN_INPUT_CONNECT,
                 NRF_GPIO_PIN_NOPULL,
                 NRF_GPIO_PIN_S0S1,
                 NRF_GPIO_PIN_NOSENSE);
    // - MOSI (optional) - output with initial value 0,
    if (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
    6476:	784d      	ldrb	r5, [r1, #1]
    6478:	2dff      	cmp	r5, #255	; 0xff
    647a:	d06b      	beq.n	6554 <nrfx_spi_init+0x11c>
    {
        mosi_pin = p_config->mosi_pin;
        nrf_gpio_pin_clear(mosi_pin);
    647c:	4628      	mov	r0, r5
    647e:	f002 fc0d 	bl	8c9c <nrf_gpio_pin_clear>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6482:	a801      	add	r0, sp, #4
    6484:	9501      	str	r5, [sp, #4]
    6486:	f7ff ffc9 	bl	641c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    648a:	9b01      	ldr	r3, [sp, #4]
    648c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    6490:	2203      	movs	r2, #3
    6492:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    else
    {
        mosi_pin = NRF_SPI_PIN_NOT_CONNECTED;
    }
    // - MISO (optional) - input,
    if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
    6496:	788f      	ldrb	r7, [r1, #2]
    6498:	2fff      	cmp	r7, #255	; 0xff
    649a:	d05e      	beq.n	655a <nrfx_spi_init+0x122>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    649c:	a801      	add	r0, sp, #4
    {
        miso_pin = p_config->miso_pin;
        nrf_gpio_cfg_input(miso_pin, p_config->miso_pull);
    649e:	f891 900e 	ldrb.w	r9, [r1, #14]
    nrf_gpio_cfg(
    64a2:	9701      	str	r7, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    64a4:	f7ff ffba 	bl	641c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    64a8:	9b01      	ldr	r3, [sp, #4]
    64aa:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
                               | ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)
    64ae:	ea4f 0289 	mov.w	r2, r9, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    64b2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    else
    {
        miso_pin = NRF_SPI_PIN_NOT_CONNECTED;
    }
    // - Slave Select (optional) - output with initial value 1 (inactive).
    if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
    64b6:	78c8      	ldrb	r0, [r1, #3]
    64b8:	28ff      	cmp	r0, #255	; 0xff
    64ba:	d00c      	beq.n	64d6 <nrfx_spi_init+0x9e>
    {
        nrf_gpio_pin_set(p_config->ss_pin);
    64bc:	f002 fbe1 	bl	8c82 <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    64c0:	a801      	add	r0, sp, #4
        nrf_gpio_cfg_output(p_config->ss_pin);
    64c2:	78cb      	ldrb	r3, [r1, #3]
    64c4:	9301      	str	r3, [sp, #4]
    64c6:	f7ff ffa9 	bl	641c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    64ca:	9b01      	ldr	r3, [sp, #4]
    64cc:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    64d0:	2203      	movs	r2, #3
    64d2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    }
    m_cb[p_instance->drv_inst_idx].ss_pin = p_config->ss_pin;
    64d6:	f898 2004 	ldrb.w	r2, [r8, #4]
    64da:	78c8      	ldrb	r0, [r1, #3]
    64dc:	2328      	movs	r3, #40	; 0x28
    64de:	fb03 4302 	mla	r3, r3, r2, r4
    64e2:	7798      	strb	r0, [r3, #30]

    NRF_SPI_Type * p_spi = p_instance->p_reg;
    64e4:	f8d8 0000 	ldr.w	r0, [r8]
    nrf_spi_pins_set(p_spi, p_config->sck_pin, mosi_pin, miso_pin);
    64e8:	780b      	ldrb	r3, [r1, #0]
    p_reg->PSEL.SCK = sck_pin;
    64ea:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    p_reg->FREQUENCY = (uint32_t)frequency;
    64ee:	688b      	ldr	r3, [r1, #8]
    p_reg->PSEL.MOSI = mosi_pin;
    64f0:	f8c0 550c 	str.w	r5, [r0, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
    64f4:	f8c0 7510 	str.w	r7, [r0, #1296]	; 0x510
    p_reg->FREQUENCY = (uint32_t)frequency;
    64f8:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
    64fc:	7b4b      	ldrb	r3, [r1, #13]
    nrf_spi_frequency_set(p_spi, p_config->frequency);
    nrf_spi_configure(p_spi, p_config->mode, p_config->bit_order);
    64fe:	7b0d      	ldrb	r5, [r1, #12]
    6500:	3b00      	subs	r3, #0
    6502:	bf18      	it	ne
    6504:	2301      	movne	r3, #1
    switch (spi_mode)
    6506:	2d02      	cmp	r5, #2
    6508:	d02a      	beq.n	6560 <nrfx_spi_init+0x128>
    650a:	2d03      	cmp	r5, #3
    650c:	d02b      	beq.n	6566 <nrfx_spi_init+0x12e>
    650e:	2d01      	cmp	r5, #1
    6510:	d101      	bne.n	6516 <nrfx_spi_init+0xde>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
    6512:	f043 0302 	orr.w	r3, r3, #2
    p_reg->CONFIG = config;
    6516:	f8c0 3554 	str.w	r3, [r0, #1364]	; 0x554

    m_cb[p_instance->drv_inst_idx].orc = p_config->orc;
    651a:	2328      	movs	r3, #40	; 0x28
    651c:	fb03 4202 	mla	r2, r3, r2, r4

    nrf_spi_enable(p_spi);

    if (p_cb->handler)
    6520:	4373      	muls	r3, r6
    m_cb[p_instance->drv_inst_idx].orc = p_config->orc;
    6522:	7949      	ldrb	r1, [r1, #5]
    if (p_cb->handler)
    6524:	58e3      	ldr	r3, [r4, r3]
    m_cb[p_instance->drv_inst_idx].orc = p_config->orc;
    6526:	77d1      	strb	r1, [r2, #31]
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    6528:	2201      	movs	r2, #1
    652a:	f8c0 2500 	str.w	r2, [r0, #1280]	; 0x500
    if (p_cb->handler)
    652e:	b11b      	cbz	r3, 6538 <nrfx_spi_init+0x100>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
    6530:	f340 3007 	sbfx	r0, r0, #12, #8
    6534:	f7fd f9aa 	bl	388c <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
    6538:	2328      	movs	r3, #40	; 0x28
    653a:	fb03 4406 	mla	r4, r3, r6, r4
    653e:	2300      	movs	r3, #0
    6540:	7763      	strb	r3, [r4, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    6542:	480c      	ldr	r0, [pc, #48]	; (6574 <nrfx_spi_init+0x13c>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    6544:	2301      	movs	r3, #1
    6546:	7723      	strb	r3, [r4, #28]
}
    6548:	b003      	add	sp, #12
    654a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        nrf_gpio_pin_set(p_config->sck_pin);
    654e:	f002 fb98 	bl	8c82 <nrf_gpio_pin_set>
    6552:	e785      	b.n	6460 <nrfx_spi_init+0x28>
        mosi_pin = NRF_SPI_PIN_NOT_CONNECTED;
    6554:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    6558:	e79d      	b.n	6496 <nrfx_spi_init+0x5e>
        miso_pin = NRF_SPI_PIN_NOT_CONNECTED;
    655a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    655e:	e7aa      	b.n	64b6 <nrfx_spi_init+0x7e>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
    6560:	f043 0304 	orr.w	r3, r3, #4
        break;
    6564:	e7d7      	b.n	6516 <nrfx_spi_init+0xde>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
    6566:	f043 0306 	orr.w	r3, r3, #6
        break;
    656a:	e7d4      	b.n	6516 <nrfx_spi_init+0xde>
        return err_code;
    656c:	4802      	ldr	r0, [pc, #8]	; (6578 <nrfx_spi_init+0x140>)
    656e:	e7eb      	b.n	6548 <nrfx_spi_init+0x110>
    6570:	20000918 	.word	0x20000918
    6574:	0bad0000 	.word	0x0bad0000
    6578:	0bad0005 	.word	0x0bad0005

0000657c <nrfx_spi_xfer>:
}

nrfx_err_t nrfx_spi_xfer(nrfx_spi_t const *           p_instance,
                         nrfx_spi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
    657c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    6580:	7904      	ldrb	r4, [r0, #4]
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
    6582:	4d39      	ldr	r5, [pc, #228]	; (6668 <nrfx_spi_xfer+0xec>)
    6584:	2328      	movs	r3, #40	; 0x28
    6586:	4363      	muls	r3, r4
{
    6588:	4690      	mov	r8, r2
    if (p_cb->transfer_in_progress)
    658a:	18ea      	adds	r2, r5, r3
{
    658c:	460f      	mov	r7, r1
    if (p_cb->transfer_in_progress)
    658e:	7f51      	ldrb	r1, [r2, #29]
{
    6590:	4681      	mov	r9, r0
    if (p_cb->transfer_in_progress)
    6592:	2900      	cmp	r1, #0
    6594:	d165      	bne.n	6662 <nrfx_spi_xfer+0xe6>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler)
    6596:	58eb      	ldr	r3, [r5, r3]
    6598:	b10b      	cbz	r3, 659e <nrfx_spi_xfer+0x22>
        {
            p_cb->transfer_in_progress = true;
    659a:	2301      	movs	r3, #1
    659c:	7753      	strb	r3, [r2, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
    659e:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
    65a2:	2628      	movs	r6, #40	; 0x28
    65a4:	fb06 5604 	mla	r6, r6, r4, r5
    65a8:	f106 0c0c 	add.w	ip, r6, #12
    65ac:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    p_cb->abort = false;

    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    65b0:	7fb0      	ldrb	r0, [r6, #30]
    p_cb->abort = false;
    65b2:	2300      	movs	r3, #0
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    65b4:	28ff      	cmp	r0, #255	; 0xff
    p_cb->abort = false;
    65b6:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    65ba:	d001      	beq.n	65c0 <nrfx_spi_xfer+0x44>
    {
        nrf_gpio_pin_clear(p_cb->ss_pin);
    65bc:	f002 fb6e 	bl	8c9c <nrf_gpio_pin_clear>
    }
    if (flags)
    65c0:	2328      	movs	r3, #40	; 0x28
    65c2:	f1b8 0f00 	cmp.w	r8, #0
    65c6:	d006      	beq.n	65d6 <nrfx_spi_xfer+0x5a>
    {
        p_cb->transfer_in_progress = false;
    65c8:	fb03 5404 	mla	r4, r3, r4, r5
        err_code = NRFX_ERROR_NOT_SUPPORTED;
    65cc:	4827      	ldr	r0, [pc, #156]	; (666c <nrfx_spi_xfer+0xf0>)
        p_cb->transfer_in_progress = false;
    65ce:	2300      	movs	r3, #0
    65d0:	7763      	strb	r3, [r4, #29]
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    65d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        spi_xfer(p_instance->p_reg, p_cb, p_xfer_desc);
    65d6:	f8d9 6000 	ldr.w	r6, [r9]
    p_cb->bytes_transferred = 0;
    65da:	fb03 5304 	mla	r3, r3, r4, r5
    p_reg->INTENCLR = mask;
    65de:	2204      	movs	r2, #4
    65e0:	f8c6 2308 	str.w	r2, [r6, #776]	; 0x308
    65e4:	f8c3 8020 	str.w	r8, [r3, #32]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    65e8:	f8c6 8108 	str.w	r8, [r6, #264]	; 0x108
    65ec:	f8d6 2108 	ldr.w	r2, [r6, #264]	; 0x108
        (p_xfer_desc->tx_length > 0 ? p_xfer_desc->p_tx_buffer[0] : p_cb->orc));
    65f0:	687a      	ldr	r2, [r7, #4]
    nrf_spi_txd_set(p_spi,
    65f2:	b192      	cbz	r2, 661a <nrfx_spi_xfer+0x9e>
    65f4:	683b      	ldr	r3, [r7, #0]
    65f6:	781b      	ldrb	r3, [r3, #0]
    p_reg->TXD = data;
    65f8:	f8c6 351c 	str.w	r3, [r6, #1308]	; 0x51c
    if (p_xfer_desc->tx_length > 1)
    65fc:	2a01      	cmp	r2, #1
    65fe:	d90e      	bls.n	661e <nrfx_spi_xfer+0xa2>
        nrf_spi_txd_set(p_spi, p_xfer_desc->p_tx_buffer[1]);
    6600:	683b      	ldr	r3, [r7, #0]
    6602:	785b      	ldrb	r3, [r3, #1]
    6604:	f8c6 351c 	str.w	r3, [r6, #1308]	; 0x51c
    if (p_cb->handler)
    6608:	2328      	movs	r3, #40	; 0x28
    660a:	4363      	muls	r3, r4
    660c:	58ef      	ldr	r7, [r5, r3]
    660e:	b177      	cbz	r7, 662e <nrfx_spi_xfer+0xb2>
    p_reg->INTENSET = mask;
    6610:	2304      	movs	r3, #4
    6612:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
    nrfx_err_t err_code = NRFX_SUCCESS;
    6616:	4816      	ldr	r0, [pc, #88]	; (6670 <nrfx_spi_xfer+0xf4>)
    6618:	e7db      	b.n	65d2 <nrfx_spi_xfer+0x56>
    nrf_spi_txd_set(p_spi,
    661a:	7fdb      	ldrb	r3, [r3, #31]
    661c:	e7ec      	b.n	65f8 <nrfx_spi_xfer+0x7c>
    else if (p_xfer_desc->rx_length > 1)
    661e:	68fb      	ldr	r3, [r7, #12]
    6620:	2b01      	cmp	r3, #1
    6622:	d9f1      	bls.n	6608 <nrfx_spi_xfer+0x8c>
        nrf_spi_txd_set(p_spi, p_cb->orc);
    6624:	2328      	movs	r3, #40	; 0x28
    6626:	fb03 5304 	mla	r3, r3, r4, r5
    p_reg->TXD = data;
    662a:	7fdb      	ldrb	r3, [r3, #31]
    662c:	e7ea      	b.n	6604 <nrfx_spi_xfer+0x88>
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    662e:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    6632:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6636:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
            while (!nrf_spi_event_check(p_spi, NRF_SPI_EVENT_READY)) {}
    663a:	2b00      	cmp	r3, #0
    663c:	d0fb      	beq.n	6636 <nrfx_spi_xfer+0xba>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    663e:	f8c6 7108 	str.w	r7, [r6, #264]	; 0x108
        } while (transfer_byte(p_spi, p_cb));
    6642:	4630      	mov	r0, r6
    6644:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
    6648:	f002 fb35 	bl	8cb6 <transfer_byte>
    664c:	2800      	cmp	r0, #0
    664e:	d1f2      	bne.n	6636 <nrfx_spi_xfer+0xba>
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    6650:	2328      	movs	r3, #40	; 0x28
    6652:	fb03 5404 	mla	r4, r3, r4, r5
    6656:	7fa0      	ldrb	r0, [r4, #30]
    6658:	28ff      	cmp	r0, #255	; 0xff
    665a:	d0dc      	beq.n	6616 <nrfx_spi_xfer+0x9a>
            nrf_gpio_pin_set(p_cb->ss_pin);
    665c:	f002 fb11 	bl	8c82 <nrf_gpio_pin_set>
    6660:	e7d9      	b.n	6616 <nrfx_spi_xfer+0x9a>
        return err_code;
    6662:	4804      	ldr	r0, [pc, #16]	; (6674 <nrfx_spi_xfer+0xf8>)
    6664:	e7b5      	b.n	65d2 <nrfx_spi_xfer+0x56>
    6666:	bf00      	nop
    6668:	20000918 	.word	0x20000918
    666c:	0bad0003 	.word	0x0bad0003
    6670:	0bad0000 	.word	0x0bad0000
    6674:	0bad000b 	.word	0x0bad000b

00006678 <nrfx_spi_1_irq_handler>:
    6678:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    667c:	2300      	movs	r3, #0
}
#endif

#if NRFX_CHECK(NRFX_SPI1_ENABLED)
void nrfx_spi_1_irq_handler(void)
{
    667e:	b510      	push	{r4, lr}
    if (!transfer_byte(p_spi, p_cb))
    6680:	490b      	ldr	r1, [pc, #44]	; (66b0 <nrfx_spi_1_irq_handler+0x38>)
    6682:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    6686:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    668a:	f002 fb14 	bl	8cb6 <transfer_byte>
    668e:	b968      	cbnz	r0, 66ac <nrfx_spi_1_irq_handler+0x34>
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    6690:	7f88      	ldrb	r0, [r1, #30]
    6692:	28ff      	cmp	r0, #255	; 0xff
    6694:	d001      	beq.n	669a <nrfx_spi_1_irq_handler+0x22>
        nrf_gpio_pin_set(p_cb->ss_pin);
    6696:	f002 faf4 	bl	8c82 <nrf_gpio_pin_set>
    p_cb->transfer_in_progress = false;
    669a:	2300      	movs	r3, #0
    p_cb->evt.type = NRFX_SPI_EVENT_DONE;
    669c:	720b      	strb	r3, [r1, #8]
    p_cb->transfer_in_progress = false;
    669e:	774b      	strb	r3, [r1, #29]
    irq_handler(NRF_SPI1, &m_cb[NRFX_SPI1_INST_IDX]);
}
    66a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    66a4:	e9d1 3100 	ldrd	r3, r1, [r1]
    66a8:	4802      	ldr	r0, [pc, #8]	; (66b4 <nrfx_spi_1_irq_handler+0x3c>)
    66aa:	4718      	bx	r3
}
    66ac:	bd10      	pop	{r4, pc}
    66ae:	bf00      	nop
    66b0:	20000918 	.word	0x20000918
    66b4:	20000920 	.word	0x20000920

000066b8 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    66b8:	4b0e      	ldr	r3, [pc, #56]	; (66f4 <z_sys_init_run_level+0x3c>)
{
    66ba:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    66bc:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    66c0:	3001      	adds	r0, #1
    66c2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    66c6:	42a6      	cmp	r6, r4
    66c8:	d800      	bhi.n	66cc <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    66ca:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    66cc:	e9d4 3500 	ldrd	r3, r5, [r4]
    66d0:	4628      	mov	r0, r5
    66d2:	4798      	blx	r3
		if (dev != NULL) {
    66d4:	b165      	cbz	r5, 66f0 <z_sys_init_run_level+0x38>
			if (rc != 0) {
    66d6:	68eb      	ldr	r3, [r5, #12]
    66d8:	b130      	cbz	r0, 66e8 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    66da:	2800      	cmp	r0, #0
    66dc:	bfb8      	it	lt
    66de:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    66e0:	28ff      	cmp	r0, #255	; 0xff
    66e2:	bfa8      	it	ge
    66e4:	20ff      	movge	r0, #255	; 0xff
    66e6:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    66e8:	785a      	ldrb	r2, [r3, #1]
    66ea:	f042 0201 	orr.w	r2, r2, #1
    66ee:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    66f0:	3408      	adds	r4, #8
    66f2:	e7e8      	b.n	66c6 <z_sys_init_run_level+0xe>
    66f4:	00009688 	.word	0x00009688

000066f8 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    66f8:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    66fa:	4605      	mov	r5, r0
    66fc:	b910      	cbnz	r0, 6704 <z_impl_device_get_binding+0xc>
		return NULL;
    66fe:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    6700:	4620      	mov	r0, r4
    6702:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    6704:	7803      	ldrb	r3, [r0, #0]
    6706:	2b00      	cmp	r3, #0
    6708:	d0f9      	beq.n	66fe <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    670a:	4a0f      	ldr	r2, [pc, #60]	; (6748 <z_impl_device_get_binding+0x50>)
    670c:	4c0f      	ldr	r4, [pc, #60]	; (674c <z_impl_device_get_binding+0x54>)
    670e:	4616      	mov	r6, r2
    6710:	4294      	cmp	r4, r2
    6712:	d108      	bne.n	6726 <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
    6714:	4c0d      	ldr	r4, [pc, #52]	; (674c <z_impl_device_get_binding+0x54>)
    6716:	42b4      	cmp	r4, r6
    6718:	d0f1      	beq.n	66fe <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    671a:	4620      	mov	r0, r4
    671c:	f002 faff 	bl	8d1e <z_device_ready>
    6720:	b950      	cbnz	r0, 6738 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
    6722:	3418      	adds	r4, #24
    6724:	e7f7      	b.n	6716 <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
    6726:	4620      	mov	r0, r4
    6728:	f002 faf9 	bl	8d1e <z_device_ready>
    672c:	b110      	cbz	r0, 6734 <z_impl_device_get_binding+0x3c>
    672e:	6823      	ldr	r3, [r4, #0]
    6730:	42ab      	cmp	r3, r5
    6732:	d0e5      	beq.n	6700 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    6734:	3418      	adds	r4, #24
    6736:	e7eb      	b.n	6710 <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    6738:	6821      	ldr	r1, [r4, #0]
    673a:	4628      	mov	r0, r5
    673c:	f7fa fafa 	bl	d34 <strcmp>
    6740:	2800      	cmp	r0, #0
    6742:	d1ee      	bne.n	6722 <z_impl_device_get_binding+0x2a>
    6744:	e7dc      	b.n	6700 <z_impl_device_get_binding+0x8>
    6746:	bf00      	nop
    6748:	2000016c 	.word	0x2000016c
    674c:	200000c4 	.word	0x200000c4

00006750 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    6750:	b510      	push	{r4, lr}
    6752:	4604      	mov	r4, r0
	z_impl_log_panic();
    6754:	f7fc f92c 	bl	29b0 <z_impl_log_panic>
    6758:	4b06      	ldr	r3, [pc, #24]	; (6774 <k_sys_fatal_error_handler+0x24>)
    675a:	4907      	ldr	r1, [pc, #28]	; (6778 <k_sys_fatal_error_handler+0x28>)
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
    675c:	4807      	ldr	r0, [pc, #28]	; (677c <k_sys_fatal_error_handler+0x2c>)
    675e:	1ac9      	subs	r1, r1, r3
    6760:	08c9      	lsrs	r1, r1, #3
    6762:	0189      	lsls	r1, r1, #6
    6764:	f041 0101 	orr.w	r1, r1, #1
    6768:	f001 fc3c 	bl	7fe4 <log_0>
	arch_system_halt(reason);
    676c:	4620      	mov	r0, r4
    676e:	f002 fadf 	bl	8d30 <arch_system_halt>
    6772:	bf00      	nop
    6774:	00009344 	.word	0x00009344
    6778:	00009364 	.word	0x00009364
    677c:	00009f83 	.word	0x00009f83

00006780 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    6780:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    6784:	4606      	mov	r6, r0
    6786:	460f      	mov	r7, r1
	__asm__ volatile(
    6788:	f04f 0320 	mov.w	r3, #32
    678c:	f3ef 8811 	mrs	r8, BASEPRI
    6790:	f383 8811 	msr	BASEPRI, r3
    6794:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    6798:	f000 fd54 	bl	7244 <z_impl_k_current_get>
    679c:	4c1f      	ldr	r4, [pc, #124]	; (681c <z_fatal_error+0x9c>)
    679e:	4b20      	ldr	r3, [pc, #128]	; (6820 <z_fatal_error+0xa0>)
    67a0:	1ae4      	subs	r4, r4, r3
    67a2:	2e04      	cmp	r6, #4
    67a4:	ea4f 04d4 	mov.w	r4, r4, lsr #3
    67a8:	bf96      	itet	ls
    67aa:	4a1e      	ldrls	r2, [pc, #120]	; (6824 <z_fatal_error+0xa4>)
	struct k_thread *thread = k_current_get();

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    67ac:	4a1e      	ldrhi	r2, [pc, #120]	; (6828 <z_fatal_error+0xa8>)
    67ae:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
    67b2:	01a4      	lsls	r4, r4, #6
    67b4:	f044 0301 	orr.w	r3, r4, #1
    67b8:	4605      	mov	r5, r0
    67ba:	f8ad 3000 	strh.w	r3, [sp]
    67be:	481b      	ldr	r0, [pc, #108]	; (682c <z_fatal_error+0xac>)
    67c0:	2300      	movs	r3, #0
    67c2:	4631      	mov	r1, r6
    67c4:	f001 fc48 	bl	8058 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    67c8:	b147      	cbz	r7, 67dc <z_fatal_error+0x5c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    67ca:	69fb      	ldr	r3, [r7, #28]
    67cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
    67d0:	b123      	cbz	r3, 67dc <z_fatal_error+0x5c>
		LOG_ERR("Fault during interrupt handling\n");
    67d2:	4817      	ldr	r0, [pc, #92]	; (6830 <z_fatal_error+0xb0>)
    67d4:	f044 0101 	orr.w	r1, r4, #1
    67d8:	f001 fc04 	bl	7fe4 <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    67dc:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    67e0:	b12d      	cbz	r5, 67ee <z_fatal_error+0x6e>
    67e2:	4628      	mov	r0, r5
    67e4:	f002 fbd3 	bl	8f8e <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    67e8:	b108      	cbz	r0, 67ee <z_fatal_error+0x6e>
    67ea:	7803      	ldrb	r3, [r0, #0]
    67ec:	b903      	cbnz	r3, 67f0 <z_fatal_error+0x70>
		thread_name = "unknown";
    67ee:	4811      	ldr	r0, [pc, #68]	; (6834 <z_fatal_error+0xb4>)
	LOG_ERR("Current thread: %p (%s)", thread,
    67f0:	f7fb ff5a 	bl	26a8 <log_strdup>
    67f4:	4623      	mov	r3, r4
    67f6:	4602      	mov	r2, r0
    67f8:	4629      	mov	r1, r5
    67fa:	480f      	ldr	r0, [pc, #60]	; (6838 <z_fatal_error+0xb8>)
    67fc:	f001 fc13 	bl	8026 <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    6800:	4639      	mov	r1, r7
    6802:	4630      	mov	r0, r6
    6804:	f7ff ffa4 	bl	6750 <k_sys_fatal_error_handler>
	__asm__ volatile(
    6808:	f388 8811 	msr	BASEPRI, r8
    680c:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    6810:	4628      	mov	r0, r5
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
    6812:	b002      	add	sp, #8
    6814:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6818:	f7fd bb88 	b.w	3f2c <z_impl_k_thread_abort>
    681c:	00009364 	.word	0x00009364
    6820:	00009344 	.word	0x00009344
    6824:	000096a0 	.word	0x000096a0
    6828:	00009f92 	.word	0x00009f92
    682c:	00009fa8 	.word	0x00009fa8
    6830:	00009fd0 	.word	0x00009fd0
    6834:	00009fa0 	.word	0x00009fa0
    6838:	00009ff1 	.word	0x00009ff1

0000683c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    683c:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    683e:	4c09      	ldr	r4, [pc, #36]	; (6864 <idle+0x28>)
	__asm__ volatile(
    6840:	f04f 0220 	mov.w	r2, #32
    6844:	f3ef 8311 	mrs	r3, BASEPRI
    6848:	f382 8811 	msr	BASEPRI, r2
    684c:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
    6850:	f002 fbe4 	bl	901c <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
    6854:	6220      	str	r0, [r4, #32]
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
    6856:	f7fc fc0d 	bl	3074 <pm_system_suspend>
    685a:	2800      	cmp	r0, #0
    685c:	d1f0      	bne.n	6840 <idle+0x4>
	arch_cpu_idle();
    685e:	f7fd f885 	bl	396c <arch_cpu_idle>
}
    6862:	e7ed      	b.n	6840 <idle+0x4>
    6864:	20000940 	.word	0x20000940

00006868 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    6868:	4802      	ldr	r0, [pc, #8]	; (6874 <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
    686a:	4a03      	ldr	r2, [pc, #12]	; (6878 <z_bss_zero+0x10>)
    686c:	2100      	movs	r1, #0
    686e:	1a12      	subs	r2, r2, r0
    6870:	f002 bc3c 	b.w	90ec <memset>
    6874:	200001d0 	.word	0x200001d0
    6878:	20000eb0 	.word	0x20000eb0

0000687c <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    687c:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    687e:	4b0a      	ldr	r3, [pc, #40]	; (68a8 <bg_thread_main+0x2c>)
    6880:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    6882:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    6884:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    6886:	f7ff ff17 	bl	66b8 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    688a:	f000 ffc5 	bl	7818 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    688e:	2003      	movs	r0, #3
    6890:	f7ff ff12 	bl	66b8 <z_sys_init_run_level>

	z_init_static_threads();
    6894:	f000 fe10 	bl	74b8 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    6898:	f7fb f8be 	bl	1a18 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    689c:	4a03      	ldr	r2, [pc, #12]	; (68ac <bg_thread_main+0x30>)
    689e:	7b13      	ldrb	r3, [r2, #12]
    68a0:	f023 0301 	bic.w	r3, r3, #1
    68a4:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    68a6:	bd08      	pop	{r3, pc}
    68a8:	20000eaf 	.word	0x20000eaf
    68ac:	20000308 	.word	0x20000308

000068b0 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    68b0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
    68b4:	b0a7      	sub	sp, #156	; 0x9c
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
    68b6:	f7fb fe4f 	bl	2558 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    68ba:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 69b4 <z_cstart+0x104>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    68be:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    68c2:	4d34      	ldr	r5, [pc, #208]	; (6994 <z_cstart+0xe4>)
	_kernel.ready_q.cache = &z_main_thread;
    68c4:	4e34      	ldr	r6, [pc, #208]	; (6998 <z_cstart+0xe8>)
    68c6:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    68c8:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 69b8 <z_cstart+0x108>
	z_setup_new_thread(thread, stack,
    68cc:	4f33      	ldr	r7, [pc, #204]	; (699c <z_cstart+0xec>)
    68ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    68d2:	2400      	movs	r4, #0
    68d4:	616b      	str	r3, [r5, #20]
    68d6:	23e0      	movs	r3, #224	; 0xe0
    68d8:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    68dc:	77ec      	strb	r4, [r5, #31]
    68de:	762c      	strb	r4, [r5, #24]
    68e0:	766c      	strb	r4, [r5, #25]
    68e2:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    68e4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    68e6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    68ea:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    68ec:	f7fd fafc 	bl	3ee8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    68f0:	f7fd f836 	bl	3960 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    68f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    68f8:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    68fa:	62eb      	str	r3, [r5, #44]	; 0x2c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    68fc:	4d28      	ldr	r5, [pc, #160]	; (69a0 <z_cstart+0xf0>)
	dummy_thread->base.user_options = K_ESSENTIAL;
    68fe:	f240 1301 	movw	r3, #257	; 0x101
    6902:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    6906:	ab06      	add	r3, sp, #24
    6908:	60ab      	str	r3, [r5, #8]
	dummy_thread->stack_info.size = 0U;
    690a:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
#endif
#if defined(CONFIG_MMU) && defined(CONFIG_USERSPACE)
	z_kernel_map_fixup();
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    690e:	f002 fa05 	bl	8d1c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    6912:	4620      	mov	r0, r4
    6914:	f7ff fed0 	bl	66b8 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    6918:	2001      	movs	r0, #1
    691a:	f7ff fecd 	bl	66b8 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    691e:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
    6922:	f000 fc0f 	bl	7144 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    6926:	4b1f      	ldr	r3, [pc, #124]	; (69a4 <z_cstart+0xf4>)
	_kernel.ready_q.cache = &z_main_thread;
    6928:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    692a:	491f      	ldr	r1, [pc, #124]	; (69a8 <z_cstart+0xf8>)
    692c:	9305      	str	r3, [sp, #20]
    692e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    6932:	4653      	mov	r3, sl
    6934:	e9cd 4b03 	strd	r4, fp, [sp, #12]
    6938:	e9cd 4401 	strd	r4, r4, [sp, #4]
    693c:	9400      	str	r4, [sp, #0]
    693e:	4630      	mov	r0, r6
    6940:	f000 fd5e 	bl	7400 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    6944:	7b73      	ldrb	r3, [r6, #13]
    6946:	4680      	mov	r8, r0
    6948:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
    694c:	4630      	mov	r0, r6
    694e:	7373      	strb	r3, [r6, #13]
    6950:	f002 fa88 	bl	8e64 <z_ready_thread>
	z_setup_new_thread(thread, stack,
    6954:	230f      	movs	r3, #15
    6956:	e9cd 4302 	strd	r4, r3, [sp, #8]
    695a:	4914      	ldr	r1, [pc, #80]	; (69ac <z_cstart+0xfc>)
    695c:	4b14      	ldr	r3, [pc, #80]	; (69b0 <z_cstart+0x100>)
    695e:	f44f 72a0 	mov.w	r2, #320	; 0x140
    6962:	e9cd b404 	strd	fp, r4, [sp, #16]
    6966:	e9cd 5400 	strd	r5, r4, [sp]
    696a:	4638      	mov	r0, r7
    696c:	f000 fd48 	bl	7400 <z_setup_new_thread>
    6970:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    6972:	60ef      	str	r7, [r5, #12]
    6974:	f023 0304 	bic.w	r3, r3, #4
    6978:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    697a:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
    697e:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].id = i;
    6982:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
    6984:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    6988:	4652      	mov	r2, sl
    698a:	4641      	mov	r1, r8
    698c:	4630      	mov	r0, r6
    698e:	f7fc ffcf 	bl	3930 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    6992:	bf00      	nop
    6994:	e000ed00 	.word	0xe000ed00
    6998:	20000308 	.word	0x20000308
    699c:	20000288 	.word	0x20000288
    69a0:	20000940 	.word	0x20000940
    69a4:	0000a053 	.word	0x0000a053
    69a8:	200011b0 	.word	0x200011b0
    69ac:	200015b0 	.word	0x200015b0
    69b0:	0000683d 	.word	0x0000683d
    69b4:	20001ef0 	.word	0x20001ef0
    69b8:	0000687d 	.word	0x0000687d

000069bc <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    69bc:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    69be:	4b0e      	ldr	r3, [pc, #56]	; (69f8 <init_mem_slab_module+0x3c>)
    69c0:	4c0e      	ldr	r4, [pc, #56]	; (69fc <init_mem_slab_module+0x40>)
    69c2:	42a3      	cmp	r3, r4
    69c4:	d301      	bcc.n	69ca <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
    69c6:	2000      	movs	r0, #0
	return rc;
}
    69c8:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    69ca:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    69ce:	ea41 0200 	orr.w	r2, r1, r0
    69d2:	f012 0203 	ands.w	r2, r2, #3
    69d6:	d10b      	bne.n	69f0 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    69d8:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    69da:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    69dc:	42aa      	cmp	r2, r5
    69de:	d101      	bne.n	69e4 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    69e0:	331c      	adds	r3, #28
    69e2:	e7ee      	b.n	69c2 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    69e4:	695e      	ldr	r6, [r3, #20]
    69e6:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    69e8:	3201      	adds	r2, #1
		slab->free_list = p;
    69ea:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    69ec:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    69ee:	e7f5      	b.n	69dc <init_mem_slab_module+0x20>
		return -EINVAL;
    69f0:	f06f 0015 	mvn.w	r0, #21
	return rc;
    69f4:	e7e8      	b.n	69c8 <init_mem_slab_module+0xc>
    69f6:	bf00      	nop
    69f8:	200001a8 	.word	0x200001a8
    69fc:	200001a8 	.word	0x200001a8

00006a00 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    6a00:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
    6a02:	460c      	mov	r4, r1
    6a04:	4616      	mov	r6, r2
    6a06:	461f      	mov	r7, r3
    6a08:	f04f 0320 	mov.w	r3, #32
    6a0c:	f3ef 8111 	mrs	r1, BASEPRI
    6a10:	f383 8811 	msr	BASEPRI, r3
    6a14:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
    6a18:	6943      	ldr	r3, [r0, #20]
    6a1a:	b15b      	cbz	r3, 6a34 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
    6a1c:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    6a1e:	681b      	ldr	r3, [r3, #0]
    6a20:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    6a22:	6983      	ldr	r3, [r0, #24]
    6a24:	3301      	adds	r3, #1
    6a26:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    6a28:	2000      	movs	r0, #0
	__asm__ volatile(
    6a2a:	f381 8811 	msr	BASEPRI, r1
    6a2e:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
    6a32:	e011      	b.n	6a58 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    6a34:	ea56 0207 	orrs.w	r2, r6, r7
    6a38:	d103      	bne.n	6a42 <k_mem_slab_alloc+0x42>
		*mem = NULL;
    6a3a:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    6a3c:	f06f 000b 	mvn.w	r0, #11
    6a40:	e7f3      	b.n	6a2a <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
    6a42:	4602      	mov	r2, r0
    6a44:	e9cd 6700 	strd	r6, r7, [sp]
    6a48:	4804      	ldr	r0, [pc, #16]	; (6a5c <k_mem_slab_alloc+0x5c>)
    6a4a:	f000 f9bd 	bl	6dc8 <z_pend_curr>
		if (result == 0) {
    6a4e:	b918      	cbnz	r0, 6a58 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
    6a50:	4b03      	ldr	r3, [pc, #12]	; (6a60 <k_mem_slab_alloc+0x60>)
    6a52:	689b      	ldr	r3, [r3, #8]
    6a54:	695b      	ldr	r3, [r3, #20]
    6a56:	6023      	str	r3, [r4, #0]
}
    6a58:	b002      	add	sp, #8
    6a5a:	bdd0      	pop	{r4, r6, r7, pc}
    6a5c:	20000eb0 	.word	0x20000eb0
    6a60:	20000940 	.word	0x20000940

00006a64 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    6a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6a66:	4604      	mov	r4, r0
    6a68:	460d      	mov	r5, r1
	__asm__ volatile(
    6a6a:	f04f 0320 	mov.w	r3, #32
    6a6e:	f3ef 8611 	mrs	r6, BASEPRI
    6a72:	f383 8811 	msr	BASEPRI, r3
    6a76:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (slab->free_list == NULL) {
    6a7a:	6947      	ldr	r7, [r0, #20]
    6a7c:	b96f      	cbnz	r7, 6a9a <k_mem_slab_free+0x36>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    6a7e:	f002 fa38 	bl	8ef2 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    6a82:	b150      	cbz	r0, 6a9a <k_mem_slab_free+0x36>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    6a84:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    6a86:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    6a88:	6787      	str	r7, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    6a8a:	f002 f9eb 	bl	8e64 <z_ready_thread>
			z_reschedule(&lock, key);
    6a8e:	4631      	mov	r1, r6
    6a90:	4808      	ldr	r0, [pc, #32]	; (6ab4 <k_mem_slab_free+0x50>)
	}
	**(char ***) mem = slab->free_list;
	slab->free_list = *(char **) mem;
	slab->num_used--;
	k_spin_unlock(&lock, key);
}
    6a92:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&lock, key);
    6a96:	f000 b915 	b.w	6cc4 <z_reschedule>
	**(char ***) mem = slab->free_list;
    6a9a:	682b      	ldr	r3, [r5, #0]
    6a9c:	6962      	ldr	r2, [r4, #20]
    6a9e:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    6aa0:	682b      	ldr	r3, [r5, #0]
    6aa2:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    6aa4:	69a3      	ldr	r3, [r4, #24]
    6aa6:	3b01      	subs	r3, #1
    6aa8:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    6aaa:	f386 8811 	msr	BASEPRI, r6
    6aae:	f3bf 8f6f 	isb	sy
}
    6ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6ab4:	20000eb0 	.word	0x20000eb0

00006ab8 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    6ab8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    6abc:	4604      	mov	r4, r0
    6abe:	4616      	mov	r6, r2
    6ac0:	461f      	mov	r7, r3
	__asm__ volatile(
    6ac2:	f04f 0320 	mov.w	r3, #32
    6ac6:	f3ef 8811 	mrs	r8, BASEPRI
    6aca:	f383 8811 	msr	BASEPRI, r3
    6ace:	f3bf 8f6f 	isb	sy
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    6ad2:	68c3      	ldr	r3, [r0, #12]
    6ad4:	4a32      	ldr	r2, [pc, #200]	; (6ba0 <z_impl_k_mutex_lock+0xe8>)
    6ad6:	b16b      	cbz	r3, 6af4 <z_impl_k_mutex_lock+0x3c>
    6ad8:	6880      	ldr	r0, [r0, #8]
    6ada:	6891      	ldr	r1, [r2, #8]
    6adc:	4288      	cmp	r0, r1
    6ade:	d019      	beq.n	6b14 <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    6ae0:	ea56 0307 	orrs.w	r3, r6, r7
    6ae4:	d118      	bne.n	6b18 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    6ae6:	f388 8811 	msr	BASEPRI, r8
    6aea:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
    6aee:	f06f 000f 	mvn.w	r0, #15
    6af2:	e00c      	b.n	6b0e <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    6af4:	6891      	ldr	r1, [r2, #8]
    6af6:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    6afa:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    6afc:	3301      	adds	r3, #1
    6afe:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    6b00:	6893      	ldr	r3, [r2, #8]
    6b02:	60a3      	str	r3, [r4, #8]
    6b04:	f388 8811 	msr	BASEPRI, r8
    6b08:	f3bf 8f6f 	isb	sy
		return 0;
    6b0c:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
    6b0e:	b002      	add	sp, #8
    6b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    6b14:	6921      	ldr	r1, [r4, #16]
    6b16:	e7f0      	b.n	6afa <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    6b18:	f990 300e 	ldrsb.w	r3, [r0, #14]
    6b1c:	f991 100e 	ldrsb.w	r1, [r1, #14]
    6b20:	4299      	cmp	r1, r3
    6b22:	bfa8      	it	ge
    6b24:	4619      	movge	r1, r3
    6b26:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    6b2a:	428b      	cmp	r3, r1
    6b2c:	dd2c      	ble.n	6b88 <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
    6b2e:	f000 fabd 	bl	70ac <z_set_prio>
    6b32:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    6b34:	e9cd 6700 	strd	r6, r7, [sp]
    6b38:	481a      	ldr	r0, [pc, #104]	; (6ba4 <z_impl_k_mutex_lock+0xec>)
    6b3a:	4622      	mov	r2, r4
    6b3c:	4641      	mov	r1, r8
    6b3e:	f000 f943 	bl	6dc8 <z_pend_curr>
	if (got_mutex == 0) {
    6b42:	2800      	cmp	r0, #0
    6b44:	d0e3      	beq.n	6b0e <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    6b46:	f04f 0320 	mov.w	r3, #32
    6b4a:	f3ef 8611 	mrs	r6, BASEPRI
    6b4e:	f383 8811 	msr	BASEPRI, r3
    6b52:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    6b56:	6823      	ldr	r3, [r4, #0]
    6b58:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6b5a:	42a3      	cmp	r3, r4
    6b5c:	d007      	beq.n	6b6e <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    6b5e:	b133      	cbz	r3, 6b6e <z_impl_k_mutex_lock+0xb6>
    6b60:	f993 300e 	ldrsb.w	r3, [r3, #14]
    6b64:	4299      	cmp	r1, r3
    6b66:	bfa8      	it	ge
    6b68:	4619      	movge	r1, r3
    6b6a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    6b6e:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    6b70:	f990 300e 	ldrsb.w	r3, [r0, #14]
    6b74:	4299      	cmp	r1, r3
    6b76:	d109      	bne.n	6b8c <z_impl_k_mutex_lock+0xd4>
	if (resched) {
    6b78:	b16d      	cbz	r5, 6b96 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    6b7a:	480a      	ldr	r0, [pc, #40]	; (6ba4 <z_impl_k_mutex_lock+0xec>)
    6b7c:	4631      	mov	r1, r6
    6b7e:	f000 f8a1 	bl	6cc4 <z_reschedule>
	return -EAGAIN;
    6b82:	f06f 000a 	mvn.w	r0, #10
    6b86:	e7c2      	b.n	6b0e <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    6b88:	2500      	movs	r5, #0
    6b8a:	e7d3      	b.n	6b34 <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
    6b8c:	f000 fa8e 	bl	70ac <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    6b90:	2800      	cmp	r0, #0
    6b92:	d1f2      	bne.n	6b7a <z_impl_k_mutex_lock+0xc2>
    6b94:	e7f0      	b.n	6b78 <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
    6b96:	f386 8811 	msr	BASEPRI, r6
    6b9a:	f3bf 8f6f 	isb	sy
    6b9e:	e7f0      	b.n	6b82 <z_impl_k_mutex_lock+0xca>
    6ba0:	20000940 	.word	0x20000940
    6ba4:	20000eb0 	.word	0x20000eb0

00006ba8 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    6ba8:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	CHECKIF(mutex->owner == NULL) {
    6baa:	6883      	ldr	r3, [r0, #8]
{
    6bac:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    6bae:	2b00      	cmp	r3, #0
    6bb0:	d036      	beq.n	6c20 <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    6bb2:	4a1e      	ldr	r2, [pc, #120]	; (6c2c <z_impl_k_mutex_unlock+0x84>)
    6bb4:	6892      	ldr	r2, [r2, #8]
    6bb6:	4293      	cmp	r3, r2
    6bb8:	d135      	bne.n	6c26 <z_impl_k_mutex_unlock+0x7e>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    6bba:	7bda      	ldrb	r2, [r3, #15]
    6bbc:	3a01      	subs	r2, #1
    6bbe:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
    6bc0:	68c3      	ldr	r3, [r0, #12]
    6bc2:	2b01      	cmp	r3, #1
    6bc4:	d005      	beq.n	6bd2 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    6bc6:	3b01      	subs	r3, #1
    6bc8:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
    6bca:	f000 f97d 	bl	6ec8 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
    6bce:	2000      	movs	r0, #0
}
    6bd0:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    6bd2:	f04f 0320 	mov.w	r3, #32
    6bd6:	f3ef 8511 	mrs	r5, BASEPRI
    6bda:	f383 8811 	msr	BASEPRI, r3
    6bde:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    6be2:	6901      	ldr	r1, [r0, #16]
    6be4:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
    6be6:	f990 300e 	ldrsb.w	r3, [r0, #14]
    6bea:	4299      	cmp	r1, r3
    6bec:	d001      	beq.n	6bf2 <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
    6bee:	f000 fa5d 	bl	70ac <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    6bf2:	4620      	mov	r0, r4
    6bf4:	f002 f97d 	bl	8ef2 <z_unpend_first_thread>
	mutex->owner = new_owner;
    6bf8:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    6bfa:	b158      	cbz	r0, 6c14 <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
    6bfc:	f990 200e 	ldrsb.w	r2, [r0, #14]
    6c00:	6122      	str	r2, [r4, #16]
    6c02:	2200      	movs	r2, #0
    6c04:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    6c06:	f002 f92d 	bl	8e64 <z_ready_thread>
		z_reschedule(&lock, key);
    6c0a:	4809      	ldr	r0, [pc, #36]	; (6c30 <z_impl_k_mutex_unlock+0x88>)
    6c0c:	4629      	mov	r1, r5
    6c0e:	f000 f859 	bl	6cc4 <z_reschedule>
    6c12:	e7da      	b.n	6bca <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    6c14:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    6c16:	f385 8811 	msr	BASEPRI, r5
    6c1a:	f3bf 8f6f 	isb	sy
    6c1e:	e7d4      	b.n	6bca <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    6c20:	f06f 0015 	mvn.w	r0, #21
    6c24:	e7d4      	b.n	6bd0 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    6c26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6c2a:	e7d1      	b.n	6bd0 <z_impl_k_mutex_unlock+0x28>
    6c2c:	20000940 	.word	0x20000940
    6c30:	20000eb0 	.word	0x20000eb0

00006c34 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    6c34:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    6c36:	4c08      	ldr	r4, [pc, #32]	; (6c58 <z_reset_time_slice+0x24>)
    6c38:	6823      	ldr	r3, [r4, #0]
    6c3a:	b15b      	cbz	r3, 6c54 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    6c3c:	f7fc fcea 	bl	3614 <sys_clock_elapsed>
    6c40:	4603      	mov	r3, r0
    6c42:	6820      	ldr	r0, [r4, #0]
    6c44:	4a05      	ldr	r2, [pc, #20]	; (6c5c <z_reset_time_slice+0x28>)
    6c46:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
    6c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    6c4c:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    6c4e:	2100      	movs	r1, #0
    6c50:	f002 b9f4 	b.w	903c <z_set_timeout_expiry>
}
    6c54:	bd10      	pop	{r4, pc}
    6c56:	bf00      	nop
    6c58:	20000978 	.word	0x20000978
    6c5c:	20000940 	.word	0x20000940

00006c60 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    6c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6c62:	4604      	mov	r4, r0
    6c64:	460d      	mov	r5, r1
	__asm__ volatile(
    6c66:	f04f 0320 	mov.w	r3, #32
    6c6a:	f3ef 8611 	mrs	r6, BASEPRI
    6c6e:	f383 8811 	msr	BASEPRI, r3
    6c72:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    6c76:	4b10      	ldr	r3, [pc, #64]	; (6cb8 <k_sched_time_slice_set+0x58>)
    6c78:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    6c7a:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    6c7e:	f240 30e7 	movw	r0, #999	; 0x3e7
    6c82:	2100      	movs	r1, #0
    6c84:	611a      	str	r2, [r3, #16]
    6c86:	fbe7 0104 	umlal	r0, r1, r7, r4
    6c8a:	2300      	movs	r3, #0
    6c8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    6c90:	f7f9 fed4 	bl	a3c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    6c94:	2c00      	cmp	r4, #0
    6c96:	4b09      	ldr	r3, [pc, #36]	; (6cbc <k_sched_time_slice_set+0x5c>)
    6c98:	dc09      	bgt.n	6cae <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    6c9a:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    6c9c:	4b08      	ldr	r3, [pc, #32]	; (6cc0 <k_sched_time_slice_set+0x60>)
    6c9e:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    6ca0:	f7ff ffc8 	bl	6c34 <z_reset_time_slice>
	__asm__ volatile(
    6ca4:	f386 8811 	msr	BASEPRI, r6
    6ca8:	f3bf 8f6f 	isb	sy
	}
}
    6cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
    6cae:	2802      	cmp	r0, #2
    6cb0:	bfb8      	it	lt
    6cb2:	2002      	movlt	r0, #2
    6cb4:	e7f1      	b.n	6c9a <k_sched_time_slice_set+0x3a>
    6cb6:	bf00      	nop
    6cb8:	20000940 	.word	0x20000940
    6cbc:	20000978 	.word	0x20000978
    6cc0:	20000974 	.word	0x20000974

00006cc4 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    6cc4:	b949      	cbnz	r1, 6cda <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    6cc6:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    6cca:	b930      	cbnz	r0, 6cda <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    6ccc:	4b05      	ldr	r3, [pc, #20]	; (6ce4 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    6cce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    6cd0:	689b      	ldr	r3, [r3, #8]
    6cd2:	429a      	cmp	r2, r3
    6cd4:	d001      	beq.n	6cda <z_reschedule+0x16>
	ret = arch_swap(key);
    6cd6:	f7fc bd8b 	b.w	37f0 <arch_swap>
    6cda:	f381 8811 	msr	BASEPRI, r1
    6cde:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    6ce2:	4770      	bx	lr
    6ce4:	20000940 	.word	0x20000940

00006ce8 <k_sched_lock>:
	__asm__ volatile(
    6ce8:	f04f 0320 	mov.w	r3, #32
    6cec:	f3ef 8111 	mrs	r1, BASEPRI
    6cf0:	f383 8811 	msr	BASEPRI, r3
    6cf4:	f3bf 8f6f 	isb	sy
    6cf8:	4b04      	ldr	r3, [pc, #16]	; (6d0c <k_sched_lock+0x24>)
    6cfa:	689a      	ldr	r2, [r3, #8]
    6cfc:	7bd3      	ldrb	r3, [r2, #15]
    6cfe:	3b01      	subs	r3, #1
    6d00:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    6d02:	f381 8811 	msr	BASEPRI, r1
    6d06:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    6d0a:	4770      	bx	lr
    6d0c:	20000940 	.word	0x20000940

00006d10 <update_cache>:
{
    6d10:	b538      	push	{r3, r4, r5, lr}
	thread = _priq_run_best(&_kernel.ready_q.runq);
    6d12:	4c0d      	ldr	r4, [pc, #52]	; (6d48 <update_cache+0x38>)
{
    6d14:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
    6d16:	f104 0028 	add.w	r0, r4, #40	; 0x28
    6d1a:	f002 f86c 	bl	8df6 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    6d1e:	4605      	mov	r5, r0
    6d20:	b900      	cbnz	r0, 6d24 <update_cache+0x14>
    6d22:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
    6d24:	68a3      	ldr	r3, [r4, #8]
    6d26:	b94a      	cbnz	r2, 6d3c <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
    6d28:	7b5a      	ldrb	r2, [r3, #13]
    6d2a:	06d2      	lsls	r2, r2, #27
    6d2c:	d106      	bne.n	6d3c <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    6d2e:	69aa      	ldr	r2, [r5, #24]
    6d30:	b922      	cbnz	r2, 6d3c <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(thread)) {
    6d32:	89da      	ldrh	r2, [r3, #14]
    6d34:	2a7f      	cmp	r2, #127	; 0x7f
    6d36:	d901      	bls.n	6d3c <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
    6d38:	6263      	str	r3, [r4, #36]	; 0x24
}
    6d3a:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    6d3c:	429d      	cmp	r5, r3
    6d3e:	d001      	beq.n	6d44 <update_cache+0x34>
			z_reset_time_slice();
    6d40:	f7ff ff78 	bl	6c34 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    6d44:	6265      	str	r5, [r4, #36]	; 0x24
}
    6d46:	e7f8      	b.n	6d3a <update_cache+0x2a>
    6d48:	20000940 	.word	0x20000940

00006d4c <unready_thread>:
{
    6d4c:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    6d4e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    6d52:	7b43      	ldrb	r3, [r0, #13]
    6d54:	2a00      	cmp	r2, #0
{
    6d56:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    6d58:	da04      	bge.n	6d64 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6d5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6d5e:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    6d60:	f002 f811 	bl	8d86 <sys_dlist_remove>
	update_cache(thread == _current);
    6d64:	4b04      	ldr	r3, [pc, #16]	; (6d78 <unready_thread+0x2c>)
    6d66:	6898      	ldr	r0, [r3, #8]
    6d68:	1a43      	subs	r3, r0, r1
    6d6a:	4258      	negs	r0, r3
    6d6c:	4158      	adcs	r0, r3
}
    6d6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    6d72:	f7ff bfcd 	b.w	6d10 <update_cache>
    6d76:	bf00      	nop
    6d78:	20000940 	.word	0x20000940

00006d7c <pend>:
{
    6d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6d80:	4606      	mov	r6, r0
    6d82:	4614      	mov	r4, r2
    6d84:	461d      	mov	r5, r3
	__asm__ volatile(
    6d86:	f04f 0320 	mov.w	r3, #32
    6d8a:	f3ef 8711 	mrs	r7, BASEPRI
    6d8e:	f383 8811 	msr	BASEPRI, r3
    6d92:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    6d96:	f002 f838 	bl	8e0a <add_to_waitq_locked>
	__asm__ volatile(
    6d9a:	f387 8811 	msr	BASEPRI, r7
    6d9e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6da2:	1c6b      	adds	r3, r5, #1
    6da4:	bf08      	it	eq
    6da6:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
    6daa:	d008      	beq.n	6dbe <pend+0x42>

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    6dac:	4622      	mov	r2, r4
    6dae:	462b      	mov	r3, r5
    6db0:	f106 0018 	add.w	r0, r6, #24
    6db4:	4903      	ldr	r1, [pc, #12]	; (6dc4 <pend+0x48>)
}
    6db6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6dba:	f000 bda3 	b.w	7904 <z_add_timeout>
    6dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6dc2:	bf00      	nop
    6dc4:	00008e85 	.word	0x00008e85

00006dc8 <z_pend_curr>:
{
    6dc8:	b510      	push	{r4, lr}
	pending_current = _current;
    6dca:	4b07      	ldr	r3, [pc, #28]	; (6de8 <z_pend_curr+0x20>)
    6dcc:	6898      	ldr	r0, [r3, #8]
    6dce:	4b07      	ldr	r3, [pc, #28]	; (6dec <z_pend_curr+0x24>)
{
    6dd0:	460c      	mov	r4, r1
	pending_current = _current;
    6dd2:	6018      	str	r0, [r3, #0]
{
    6dd4:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    6dd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    6dda:	f7ff ffcf 	bl	6d7c <pend>
    6dde:	4620      	mov	r0, r4
}
    6de0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6de4:	f7fc bd04 	b.w	37f0 <arch_swap>
    6de8:	20000940 	.word	0x20000940
    6dec:	20000970 	.word	0x20000970

00006df0 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
    6df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6df4:	4605      	mov	r5, r0
    6df6:	460f      	mov	r7, r1
		return 0;
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);

	expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    6df8:	f002 f93a 	bl	9070 <sys_clock_tick_get_32>
    6dfc:	4604      	mov	r4, r0
	__asm__ volatile(
    6dfe:	f04f 0320 	mov.w	r3, #32
    6e02:	f3ef 8811 	mrs	r8, BASEPRI
    6e06:	f383 8811 	msr	BASEPRI, r3
    6e0a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    6e0e:	4e12      	ldr	r6, [pc, #72]	; (6e58 <z_tick_sleep.part.0+0x68>)
    6e10:	4b12      	ldr	r3, [pc, #72]	; (6e5c <z_tick_sleep.part.0+0x6c>)
    6e12:	68b0      	ldr	r0, [r6, #8]
    6e14:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    6e16:	f7ff ff99 	bl	6d4c <unready_thread>
	z_add_thread_timeout(_current, timeout);
    6e1a:	68b0      	ldr	r0, [r6, #8]
    6e1c:	4910      	ldr	r1, [pc, #64]	; (6e60 <z_tick_sleep.part.0+0x70>)
    6e1e:	462a      	mov	r2, r5
    6e20:	463b      	mov	r3, r7
    6e22:	3018      	adds	r0, #24
    6e24:	f000 fd6e 	bl	7904 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    6e28:	68b2      	ldr	r2, [r6, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    6e2a:	7b53      	ldrb	r3, [r2, #13]
    6e2c:	f043 0310 	orr.w	r3, r3, #16
    6e30:	7353      	strb	r3, [r2, #13]
    6e32:	4640      	mov	r0, r8
    6e34:	f7fc fcdc 	bl	37f0 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    6e38:	f002 f91a 	bl	9070 <sys_clock_tick_get_32>
	expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    6e3c:	442c      	add	r4, r5
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    6e3e:	1a24      	subs	r4, r4, r0
    6e40:	f04f 0500 	mov.w	r5, #0
    6e44:	f165 0500 	sbc.w	r5, r5, #0
    6e48:	2c00      	cmp	r4, #0
    6e4a:	f175 0300 	sbcs.w	r3, r5, #0
    6e4e:	bfb8      	it	lt
    6e50:	2400      	movlt	r4, #0
		return ticks;
	}
#endif

	return 0;
}
    6e52:	4620      	mov	r0, r4
    6e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6e58:	20000940 	.word	0x20000940
    6e5c:	20000970 	.word	0x20000970
    6e60:	00008e85 	.word	0x00008e85

00006e64 <z_impl_k_thread_suspend>:
{
    6e64:	b570      	push	{r4, r5, r6, lr}
    6e66:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    6e68:	3018      	adds	r0, #24
    6e6a:	f002 f8c1 	bl	8ff0 <z_abort_timeout>
    6e6e:	f04f 0320 	mov.w	r3, #32
    6e72:	f3ef 8611 	mrs	r6, BASEPRI
    6e76:	f383 8811 	msr	BASEPRI, r3
    6e7a:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    6e7e:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    6e82:	7b63      	ldrb	r3, [r4, #13]
    6e84:	2a00      	cmp	r2, #0
    6e86:	da05      	bge.n	6e94 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6e88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6e8c:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    6e8e:	4620      	mov	r0, r4
    6e90:	f001 ff79 	bl	8d86 <sys_dlist_remove>
		update_cache(thread == _current);
    6e94:	4d0b      	ldr	r5, [pc, #44]	; (6ec4 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    6e96:	7b63      	ldrb	r3, [r4, #13]
    6e98:	68a8      	ldr	r0, [r5, #8]
    6e9a:	f043 0310 	orr.w	r3, r3, #16
    6e9e:	7363      	strb	r3, [r4, #13]
    6ea0:	1b03      	subs	r3, r0, r4
    6ea2:	4258      	negs	r0, r3
    6ea4:	4158      	adcs	r0, r3
    6ea6:	f7ff ff33 	bl	6d10 <update_cache>
	__asm__ volatile(
    6eaa:	f386 8811 	msr	BASEPRI, r6
    6eae:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    6eb2:	68ab      	ldr	r3, [r5, #8]
    6eb4:	42a3      	cmp	r3, r4
    6eb6:	d103      	bne.n	6ec0 <z_impl_k_thread_suspend+0x5c>
}
    6eb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    6ebc:	f001 bf91 	b.w	8de2 <z_reschedule_unlocked>
}
    6ec0:	bd70      	pop	{r4, r5, r6, pc}
    6ec2:	bf00      	nop
    6ec4:	20000940 	.word	0x20000940

00006ec8 <k_sched_unlock>:
{
    6ec8:	b510      	push	{r4, lr}
	__asm__ volatile(
    6eca:	f04f 0320 	mov.w	r3, #32
    6ece:	f3ef 8411 	mrs	r4, BASEPRI
    6ed2:	f383 8811 	msr	BASEPRI, r3
    6ed6:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    6eda:	4b08      	ldr	r3, [pc, #32]	; (6efc <k_sched_unlock+0x34>)
    6edc:	689a      	ldr	r2, [r3, #8]
    6ede:	7bd3      	ldrb	r3, [r2, #15]
    6ee0:	3301      	adds	r3, #1
    6ee2:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    6ee4:	2000      	movs	r0, #0
    6ee6:	f7ff ff13 	bl	6d10 <update_cache>
	__asm__ volatile(
    6eea:	f384 8811 	msr	BASEPRI, r4
    6eee:	f3bf 8f6f 	isb	sy
}
    6ef2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    6ef6:	f001 bf74 	b.w	8de2 <z_reschedule_unlocked>
    6efa:	bf00      	nop
    6efc:	20000940 	.word	0x20000940

00006f00 <move_thread_to_end_of_prio_q>:
{
    6f00:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    6f02:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    6f06:	7b43      	ldrb	r3, [r0, #13]
    6f08:	2a00      	cmp	r2, #0
{
    6f0a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    6f0c:	da04      	bge.n	6f18 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6f0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6f12:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    6f14:	f001 ff37 	bl	8d86 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    6f18:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    6f1a:	4a17      	ldr	r2, [pc, #92]	; (6f78 <move_thread_to_end_of_prio_q+0x78>)
    6f1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6f20:	4610      	mov	r0, r2
    6f22:	734b      	strb	r3, [r1, #13]
    6f24:	f850 3f28 	ldr.w	r3, [r0, #40]!
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6f28:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6f2a:	4283      	cmp	r3, r0
    6f2c:	bf08      	it	eq
    6f2e:	2300      	moveq	r3, #0
    6f30:	2b00      	cmp	r3, #0
    6f32:	bf38      	it	cc
    6f34:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6f36:	b1cb      	cbz	r3, 6f6c <move_thread_to_end_of_prio_q+0x6c>
	int32_t b1 = thread_1->base.prio;
    6f38:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    6f3c:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
    6f40:	42a6      	cmp	r6, r4
    6f42:	d00f      	beq.n	6f64 <move_thread_to_end_of_prio_q+0x64>
		return b2 - b1;
    6f44:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    6f46:	2c00      	cmp	r4, #0
    6f48:	dd0c      	ble.n	6f64 <move_thread_to_end_of_prio_q+0x64>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    6f4a:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    6f4c:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    6f50:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    6f52:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    6f54:	6890      	ldr	r0, [r2, #8]
    6f56:	1a43      	subs	r3, r0, r1
    6f58:	4258      	negs	r0, r3
}
    6f5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    6f5e:	4158      	adcs	r0, r3
    6f60:	f7ff bed6 	b.w	6d10 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    6f64:	42ab      	cmp	r3, r5
    6f66:	d001      	beq.n	6f6c <move_thread_to_end_of_prio_q+0x6c>
    6f68:	681b      	ldr	r3, [r3, #0]
    6f6a:	e7e4      	b.n	6f36 <move_thread_to_end_of_prio_q+0x36>
	node->prev = tail;
    6f6c:	e9c1 0500 	strd	r0, r5, [r1]
	tail->next = node;
    6f70:	6029      	str	r1, [r5, #0]
	list->tail = node;
    6f72:	62d1      	str	r1, [r2, #44]	; 0x2c
}
    6f74:	e7ee      	b.n	6f54 <move_thread_to_end_of_prio_q+0x54>
    6f76:	bf00      	nop
    6f78:	20000940 	.word	0x20000940

00006f7c <z_time_slice>:
{
    6f7c:	b570      	push	{r4, r5, r6, lr}
    6f7e:	4601      	mov	r1, r0
	__asm__ volatile(
    6f80:	f04f 0320 	mov.w	r3, #32
    6f84:	f3ef 8411 	mrs	r4, BASEPRI
    6f88:	f383 8811 	msr	BASEPRI, r3
    6f8c:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    6f90:	4b16      	ldr	r3, [pc, #88]	; (6fec <z_time_slice+0x70>)
    6f92:	4a17      	ldr	r2, [pc, #92]	; (6ff0 <z_time_slice+0x74>)
    6f94:	6898      	ldr	r0, [r3, #8]
    6f96:	6815      	ldr	r5, [r2, #0]
    6f98:	42a8      	cmp	r0, r5
    6f9a:	461d      	mov	r5, r3
    6f9c:	d106      	bne.n	6fac <z_time_slice+0x30>
			z_reset_time_slice();
    6f9e:	f7ff fe49 	bl	6c34 <z_reset_time_slice>
	__asm__ volatile(
    6fa2:	f384 8811 	msr	BASEPRI, r4
    6fa6:	f3bf 8f6f 	isb	sy
}
    6faa:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    6fac:	2600      	movs	r6, #0
    6fae:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
    6fb0:	4a10      	ldr	r2, [pc, #64]	; (6ff4 <z_time_slice+0x78>)
    6fb2:	6812      	ldr	r2, [r2, #0]
    6fb4:	b1ba      	cbz	r2, 6fe6 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    6fb6:	89c2      	ldrh	r2, [r0, #14]
    6fb8:	2a7f      	cmp	r2, #127	; 0x7f
    6fba:	d814      	bhi.n	6fe6 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    6fbc:	7b42      	ldrb	r2, [r0, #13]
    6fbe:	06d2      	lsls	r2, r2, #27
    6fc0:	d111      	bne.n	6fe6 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    6fc2:	4a0d      	ldr	r2, [pc, #52]	; (6ff8 <z_time_slice+0x7c>)
    6fc4:	f990 600e 	ldrsb.w	r6, [r0, #14]
    6fc8:	6812      	ldr	r2, [r2, #0]
    6fca:	4296      	cmp	r6, r2
    6fcc:	db0b      	blt.n	6fe6 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    6fce:	4a0b      	ldr	r2, [pc, #44]	; (6ffc <z_time_slice+0x80>)
    6fd0:	4290      	cmp	r0, r2
    6fd2:	d008      	beq.n	6fe6 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    6fd4:	691a      	ldr	r2, [r3, #16]
    6fd6:	428a      	cmp	r2, r1
    6fd8:	dc02      	bgt.n	6fe0 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
    6fda:	f7ff ff91 	bl	6f00 <move_thread_to_end_of_prio_q>
    6fde:	e7de      	b.n	6f9e <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
    6fe0:	1a52      	subs	r2, r2, r1
    6fe2:	611a      	str	r2, [r3, #16]
    6fe4:	e7dd      	b.n	6fa2 <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
    6fe6:	2300      	movs	r3, #0
    6fe8:	612b      	str	r3, [r5, #16]
    6fea:	e7da      	b.n	6fa2 <z_time_slice+0x26>
    6fec:	20000940 	.word	0x20000940
    6ff0:	20000970 	.word	0x20000970
    6ff4:	20000978 	.word	0x20000978
    6ff8:	20000974 	.word	0x20000974
    6ffc:	20000288 	.word	0x20000288

00007000 <ready_thread>:
{
    7000:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    7002:	f990 300d 	ldrsb.w	r3, [r0, #13]
    7006:	7b42      	ldrb	r2, [r0, #13]
    7008:	2b00      	cmp	r3, #0
    700a:	db2d      	blt.n	7068 <ready_thread+0x68>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    700c:	06d3      	lsls	r3, r2, #27
    700e:	d12b      	bne.n	7068 <ready_thread+0x68>
	return !sys_dnode_is_linked(&to->node);
    7010:	6983      	ldr	r3, [r0, #24]
    7012:	bb4b      	cbnz	r3, 7068 <ready_thread+0x68>
	return list->head == list;
    7014:	4915      	ldr	r1, [pc, #84]	; (706c <ready_thread+0x6c>)
	thread->base.thread_state |= _THREAD_QUEUED;
    7016:	f062 027f 	orn	r2, r2, #127	; 0x7f
    701a:	7342      	strb	r2, [r0, #13]
    701c:	460a      	mov	r2, r1
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    701e:	6acd      	ldr	r5, [r1, #44]	; 0x2c
	return list->head == list;
    7020:	f852 4f28 	ldr.w	r4, [r2, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7024:	4294      	cmp	r4, r2
    7026:	bf18      	it	ne
    7028:	4623      	movne	r3, r4
    702a:	2b00      	cmp	r3, #0
    702c:	bf38      	it	cc
    702e:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7030:	b1ab      	cbz	r3, 705e <ready_thread+0x5e>
	int32_t b1 = thread_1->base.prio;
    7032:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    7036:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
    703a:	42a6      	cmp	r6, r4
    703c:	d00b      	beq.n	7056 <ready_thread+0x56>
		return b2 - b1;
    703e:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    7040:	2c00      	cmp	r4, #0
    7042:	dd08      	ble.n	7056 <ready_thread+0x56>
	sys_dnode_t *const prev = successor->prev;
    7044:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    7046:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    704a:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    704c:	6058      	str	r0, [r3, #4]
}
    704e:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    7050:	2000      	movs	r0, #0
    7052:	f7ff be5d 	b.w	6d10 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    7056:	42ab      	cmp	r3, r5
    7058:	d001      	beq.n	705e <ready_thread+0x5e>
    705a:	681b      	ldr	r3, [r3, #0]
    705c:	e7e8      	b.n	7030 <ready_thread+0x30>
	node->prev = tail;
    705e:	e9c0 2500 	strd	r2, r5, [r0]
	tail->next = node;
    7062:	6028      	str	r0, [r5, #0]
	list->tail = node;
    7064:	62c8      	str	r0, [r1, #44]	; 0x2c
}
    7066:	e7f2      	b.n	704e <ready_thread+0x4e>
}
    7068:	bc70      	pop	{r4, r5, r6}
    706a:	4770      	bx	lr
    706c:	20000940 	.word	0x20000940

00007070 <z_sched_start>:
{
    7070:	b510      	push	{r4, lr}
	__asm__ volatile(
    7072:	f04f 0220 	mov.w	r2, #32
    7076:	f3ef 8411 	mrs	r4, BASEPRI
    707a:	f382 8811 	msr	BASEPRI, r2
    707e:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
    7082:	7b42      	ldrb	r2, [r0, #13]
    7084:	0751      	lsls	r1, r2, #29
    7086:	d404      	bmi.n	7092 <z_sched_start+0x22>
	__asm__ volatile(
    7088:	f384 8811 	msr	BASEPRI, r4
    708c:	f3bf 8f6f 	isb	sy
}
    7090:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    7092:	f022 0204 	bic.w	r2, r2, #4
    7096:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    7098:	f7ff ffb2 	bl	7000 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    709c:	4621      	mov	r1, r4
    709e:	4802      	ldr	r0, [pc, #8]	; (70a8 <z_sched_start+0x38>)
}
    70a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    70a4:	f7ff be0e 	b.w	6cc4 <z_reschedule>
    70a8:	20000eb0 	.word	0x20000eb0

000070ac <z_set_prio>:
{
    70ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    70ae:	4604      	mov	r4, r0
	__asm__ volatile(
    70b0:	f04f 0320 	mov.w	r3, #32
    70b4:	f3ef 8611 	mrs	r6, BASEPRI
    70b8:	f383 8811 	msr	BASEPRI, r3
    70bc:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    70c0:	7b43      	ldrb	r3, [r0, #13]
    70c2:	06da      	lsls	r2, r3, #27
    70c4:	b249      	sxtb	r1, r1
    70c6:	d138      	bne.n	713a <z_set_prio+0x8e>
    70c8:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
    70ca:	2d00      	cmp	r5, #0
    70cc:	d135      	bne.n	713a <z_set_prio+0x8e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    70ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    70d2:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    70d4:	f001 fe57 	bl	8d86 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    70d8:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
    70da:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    70dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    70e0:	7343      	strb	r3, [r0, #13]
	return list->head == list;
    70e2:	4817      	ldr	r0, [pc, #92]	; (7140 <z_set_prio+0x94>)
    70e4:	4603      	mov	r3, r0
    70e6:	f853 7f28 	ldr.w	r7, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    70ea:	429f      	cmp	r7, r3
    70ec:	bf18      	it	ne
    70ee:	463d      	movne	r5, r7
    70f0:	2d00      	cmp	r5, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    70f2:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
    70f4:	461a      	mov	r2, r3
    70f6:	462b      	mov	r3, r5
    70f8:	bf38      	it	cc
    70fa:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    70fc:	b1c3      	cbz	r3, 7130 <z_set_prio+0x84>
	int32_t b2 = thread_2->base.prio;
    70fe:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    7102:	42a9      	cmp	r1, r5
    7104:	d010      	beq.n	7128 <z_set_prio+0x7c>
		return b2 - b1;
    7106:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    7108:	2d00      	cmp	r5, #0
    710a:	dd0d      	ble.n	7128 <z_set_prio+0x7c>
	sys_dnode_t *const prev = successor->prev;
    710c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    710e:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    7112:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    7114:	605c      	str	r4, [r3, #4]
			update_cache(1);
    7116:	2001      	movs	r0, #1
    7118:	f7ff fdfa 	bl	6d10 <update_cache>
    711c:	2001      	movs	r0, #1
	__asm__ volatile(
    711e:	f386 8811 	msr	BASEPRI, r6
    7122:	f3bf 8f6f 	isb	sy
}
    7126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    7128:	42bb      	cmp	r3, r7
    712a:	d001      	beq.n	7130 <z_set_prio+0x84>
    712c:	681b      	ldr	r3, [r3, #0]
    712e:	e7e5      	b.n	70fc <z_set_prio+0x50>
	node->prev = tail;
    7130:	e9c4 2700 	strd	r2, r7, [r4]
	tail->next = node;
    7134:	603c      	str	r4, [r7, #0]
	list->tail = node;
    7136:	62c4      	str	r4, [r0, #44]	; 0x2c
}
    7138:	e7ed      	b.n	7116 <z_set_prio+0x6a>
			thread->base.prio = prio;
    713a:	73a1      	strb	r1, [r4, #14]
    713c:	2000      	movs	r0, #0
    713e:	e7ee      	b.n	711e <z_set_prio+0x72>
    7140:	20000940 	.word	0x20000940

00007144 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    7144:	4b04      	ldr	r3, [pc, #16]	; (7158 <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    7146:	2100      	movs	r1, #0
    7148:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    714c:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
    7150:	4608      	mov	r0, r1
    7152:	f7ff bd85 	b.w	6c60 <k_sched_time_slice_set>
    7156:	bf00      	nop
    7158:	20000940 	.word	0x20000940

0000715c <z_impl_k_yield>:
	if (!z_is_idle_thread_object(_current)) {
    715c:	4926      	ldr	r1, [pc, #152]	; (71f8 <z_impl_k_yield+0x9c>)
{
    715e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
    7160:	688a      	ldr	r2, [r1, #8]
    7162:	4b26      	ldr	r3, [pc, #152]	; (71fc <z_impl_k_yield+0xa0>)
    7164:	429a      	cmp	r2, r3
    7166:	d03d      	beq.n	71e4 <z_impl_k_yield+0x88>
	__asm__ volatile(
    7168:	f04f 0320 	mov.w	r3, #32
    716c:	f3ef 8511 	mrs	r5, BASEPRI
    7170:	f383 8811 	msr	BASEPRI, r3
    7174:	f3bf 8f6f 	isb	sy
			dequeue_thread(&_kernel.ready_q.runq,
    7178:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    717a:	7b43      	ldrb	r3, [r0, #13]
    717c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7180:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    7182:	f001 fe00 	bl	8d86 <sys_dlist_remove>
		queue_thread(&_kernel.ready_q.runq, _current);
    7186:	688a      	ldr	r2, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    7188:	7b53      	ldrb	r3, [r2, #13]
	return list->head == list;
    718a:	4608      	mov	r0, r1
    718c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7190:	7353      	strb	r3, [r2, #13]
    7192:	f850 3f28 	ldr.w	r3, [r0, #40]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    7196:	6ace      	ldr	r6, [r1, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7198:	4283      	cmp	r3, r0
    719a:	bf08      	it	eq
    719c:	2300      	moveq	r3, #0
    719e:	2b00      	cmp	r3, #0
    71a0:	bf38      	it	cc
    71a2:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    71a4:	b1cb      	cbz	r3, 71da <z_impl_k_yield+0x7e>
	int32_t b1 = thread_1->base.prio;
    71a6:	f992 700e 	ldrsb.w	r7, [r2, #14]
	int32_t b2 = thread_2->base.prio;
    71aa:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
    71ae:	42a7      	cmp	r7, r4
    71b0:	d00f      	beq.n	71d2 <z_impl_k_yield+0x76>
		return b2 - b1;
    71b2:	1be4      	subs	r4, r4, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
    71b4:	2c00      	cmp	r4, #0
    71b6:	dd0c      	ble.n	71d2 <z_impl_k_yield+0x76>
	sys_dnode_t *const prev = successor->prev;
    71b8:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    71ba:	e9c2 3100 	strd	r3, r1, [r2]
	prev->next = node;
    71be:	600a      	str	r2, [r1, #0]
	successor->prev = node;
    71c0:	605a      	str	r2, [r3, #4]
		update_cache(1);
    71c2:	2001      	movs	r0, #1
    71c4:	f7ff fda4 	bl	6d10 <update_cache>
    71c8:	4628      	mov	r0, r5
}
    71ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    71ce:	f7fc bb0f 	b.w	37f0 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    71d2:	42b3      	cmp	r3, r6
    71d4:	d001      	beq.n	71da <z_impl_k_yield+0x7e>
    71d6:	681b      	ldr	r3, [r3, #0]
    71d8:	e7e4      	b.n	71a4 <z_impl_k_yield+0x48>
	node->prev = tail;
    71da:	e9c2 0600 	strd	r0, r6, [r2]
	tail->next = node;
    71de:	6032      	str	r2, [r6, #0]
	list->tail = node;
    71e0:	62ca      	str	r2, [r1, #44]	; 0x2c
}
    71e2:	e7ee      	b.n	71c2 <z_impl_k_yield+0x66>
    71e4:	f04f 0320 	mov.w	r3, #32
    71e8:	f3ef 8011 	mrs	r0, BASEPRI
    71ec:	f383 8811 	msr	BASEPRI, r3
    71f0:	f3bf 8f6f 	isb	sy
    71f4:	e7e9      	b.n	71ca <z_impl_k_yield+0x6e>
    71f6:	bf00      	nop
    71f8:	20000940 	.word	0x20000940
    71fc:	20000288 	.word	0x20000288

00007200 <z_impl_k_sleep>:

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    7200:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    7204:	bf08      	it	eq
    7206:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    720a:	b508      	push	{r3, lr}
    720c:	4602      	mov	r2, r0
    720e:	460b      	mov	r3, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    7210:	d106      	bne.n	7220 <z_impl_k_sleep+0x20>
		k_thread_suspend(_current);
    7212:	4b0b      	ldr	r3, [pc, #44]	; (7240 <z_impl_k_sleep+0x40>)
    7214:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    7216:	f7ff fe25 	bl	6e64 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    721a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	ticks = timeout.ticks;

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
    721e:	bd08      	pop	{r3, pc}
	if (ticks == 0) {
    7220:	4313      	orrs	r3, r2
    7222:	d10a      	bne.n	723a <z_impl_k_sleep+0x3a>
	z_impl_k_yield();
    7224:	f7ff ff9a 	bl	715c <z_impl_k_yield>
		return 0;
    7228:	2000      	movs	r0, #0
			return (t * to_hz + off) / from_hz;
    722a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    722e:	fb80 2303 	smull	r2, r3, r0, r3
    7232:	0bd0      	lsrs	r0, r2, #15
    7234:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return k_ticks_to_ms_floor64(ticks);
    7238:	e7f1      	b.n	721e <z_impl_k_sleep+0x1e>
    723a:	f7ff fdd9 	bl	6df0 <z_tick_sleep.part.0>
    723e:	e7f4      	b.n	722a <z_impl_k_sleep+0x2a>
    7240:	20000940 	.word	0x20000940

00007244 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    7244:	4b01      	ldr	r3, [pc, #4]	; (724c <z_impl_k_current_get+0x8>)
    7246:	6898      	ldr	r0, [r3, #8]
    7248:	4770      	bx	lr
    724a:	bf00      	nop
    724c:	20000940 	.word	0x20000940

00007250 <z_impl_k_is_preempt_thread>:
    7250:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/k_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
    7254:	b93b      	cbnz	r3, 7266 <z_impl_k_is_preempt_thread+0x16>
    7256:	4b05      	ldr	r3, [pc, #20]	; (726c <z_impl_k_is_preempt_thread+0x1c>)
    7258:	689b      	ldr	r3, [r3, #8]
    725a:	89d8      	ldrh	r0, [r3, #14]
    725c:	287f      	cmp	r0, #127	; 0x7f
    725e:	bf8c      	ite	hi
    7260:	2000      	movhi	r0, #0
    7262:	2001      	movls	r0, #1
    7264:	4770      	bx	lr
    7266:	2000      	movs	r0, #0
}
    7268:	4770      	bx	lr
    726a:	bf00      	nop
    726c:	20000940 	.word	0x20000940

00007270 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    7270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7274:	4604      	mov	r4, r0
    7276:	f04f 0320 	mov.w	r3, #32
    727a:	f3ef 8611 	mrs	r6, BASEPRI
    727e:	f383 8811 	msr	BASEPRI, r3
    7282:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    7286:	7b43      	ldrb	r3, [r0, #13]
    7288:	071a      	lsls	r2, r3, #28
    728a:	d505      	bpl.n	7298 <z_thread_abort+0x28>
	__asm__ volatile(
    728c:	f386 8811 	msr	BASEPRI, r6
    7290:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    7294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    7298:	f023 0220 	bic.w	r2, r3, #32
    729c:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    72a0:	09d2      	lsrs	r2, r2, #7
    72a2:	d120      	bne.n	72e6 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    72a4:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    72a6:	68a3      	ldr	r3, [r4, #8]
    72a8:	b113      	cbz	r3, 72b0 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
    72aa:	4620      	mov	r0, r4
    72ac:	f001 fd73 	bl	8d96 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    72b0:	f104 0018 	add.w	r0, r4, #24
    72b4:	f001 fe9c 	bl	8ff0 <z_abort_timeout>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    72b8:	f104 0758 	add.w	r7, r4, #88	; 0x58
    72bc:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    72c0:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    72c2:	42bd      	cmp	r5, r7
    72c4:	d000      	beq.n	72c8 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    72c6:	b9b5      	cbnz	r5, 72f6 <z_thread_abort+0x86>
		update_cache(1);
    72c8:	2001      	movs	r0, #1
    72ca:	f7ff fd21 	bl	6d10 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    72ce:	4b10      	ldr	r3, [pc, #64]	; (7310 <z_thread_abort+0xa0>)
    72d0:	689b      	ldr	r3, [r3, #8]
    72d2:	42a3      	cmp	r3, r4
    72d4:	d1da      	bne.n	728c <z_thread_abort+0x1c>
    72d6:	f3ef 8305 	mrs	r3, IPSR
    72da:	2b00      	cmp	r3, #0
    72dc:	d1d6      	bne.n	728c <z_thread_abort+0x1c>
    72de:	4630      	mov	r0, r6
    72e0:	f7fc fa86 	bl	37f0 <arch_swap>
	return ret;
    72e4:	e7d2      	b.n	728c <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    72e6:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    72ea:	f043 0308 	orr.w	r3, r3, #8
    72ee:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    72f0:	f001 fd49 	bl	8d86 <sys_dlist_remove>
}
    72f4:	e7d7      	b.n	72a6 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
    72f6:	4628      	mov	r0, r5
    72f8:	f001 fd4d 	bl	8d96 <unpend_thread_no_timeout>
    72fc:	f105 0018 	add.w	r0, r5, #24
    7300:	f001 fe76 	bl	8ff0 <z_abort_timeout>
    7304:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    7308:	4628      	mov	r0, r5
    730a:	f7ff fe79 	bl	7000 <ready_thread>
    730e:	e7d7      	b.n	72c0 <z_thread_abort+0x50>
    7310:	20000940 	.word	0x20000940

00007314 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    7314:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    7316:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    731a:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    731c:	e9cd 6700 	strd	r6, r7, [sp]
    7320:	f7ff fd52 	bl	6dc8 <z_pend_curr>

	if (data != NULL) {
    7324:	b11c      	cbz	r4, 732e <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    7326:	4b03      	ldr	r3, [pc, #12]	; (7334 <z_sched_wait+0x20>)
    7328:	689b      	ldr	r3, [r3, #8]
    732a:	695b      	ldr	r3, [r3, #20]
    732c:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    732e:	b002      	add	sp, #8
    7330:	bdd0      	pop	{r4, r6, r7, pc}
    7332:	bf00      	nop
    7334:	20000940 	.word	0x20000940

00007338 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    7338:	b538      	push	{r3, r4, r5, lr}
    733a:	4604      	mov	r4, r0
	__asm__ volatile(
    733c:	f04f 0320 	mov.w	r3, #32
    7340:	f3ef 8511 	mrs	r5, BASEPRI
    7344:	f383 8811 	msr	BASEPRI, r3
    7348:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
    734c:	f001 fdd1 	bl	8ef2 <z_unpend_first_thread>

	if (thread != NULL) {
    7350:	b148      	cbz	r0, 7366 <z_impl_k_sem_give+0x2e>
    7352:	2200      	movs	r2, #0
    7354:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    7356:	f001 fd85 	bl	8e64 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    735a:	4629      	mov	r1, r5
    735c:	4805      	ldr	r0, [pc, #20]	; (7374 <z_impl_k_sem_give+0x3c>)
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
    735e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    7362:	f7ff bcaf 	b.w	6cc4 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    7366:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    736a:	429a      	cmp	r2, r3
    736c:	bf18      	it	ne
    736e:	3301      	addne	r3, #1
    7370:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
    7372:	e7f2      	b.n	735a <z_impl_k_sem_give+0x22>
    7374:	20000eb0 	.word	0x20000eb0

00007378 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    7378:	b537      	push	{r0, r1, r2, r4, r5, lr}
    737a:	4614      	mov	r4, r2
    737c:	461d      	mov	r5, r3
    737e:	f04f 0320 	mov.w	r3, #32
    7382:	f3ef 8111 	mrs	r1, BASEPRI
    7386:	f383 8811 	msr	BASEPRI, r3
    738a:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
    738e:	6883      	ldr	r3, [r0, #8]
    7390:	b143      	cbz	r3, 73a4 <z_impl_k_sem_take+0x2c>
		sem->count--;
    7392:	3b01      	subs	r3, #1
    7394:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
    7396:	f381 8811 	msr	BASEPRI, r1
    739a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    739e:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
    73a0:	b003      	add	sp, #12
    73a2:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    73a4:	ea54 0305 	orrs.w	r3, r4, r5
    73a8:	d106      	bne.n	73b8 <z_impl_k_sem_take+0x40>
    73aa:	f381 8811 	msr	BASEPRI, r1
    73ae:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    73b2:	f06f 000f 	mvn.w	r0, #15
    73b6:	e7f3      	b.n	73a0 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    73b8:	4602      	mov	r2, r0
    73ba:	e9cd 4500 	strd	r4, r5, [sp]
    73be:	4802      	ldr	r0, [pc, #8]	; (73c8 <z_impl_k_sem_take+0x50>)
    73c0:	f7ff fd02 	bl	6dc8 <z_pend_curr>
	return ret;
    73c4:	e7ec      	b.n	73a0 <z_impl_k_sem_take+0x28>
    73c6:	bf00      	nop
    73c8:	20000eb0 	.word	0x20000eb0

000073cc <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    73cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    73ce:	4b09      	ldr	r3, [pc, #36]	; (73f4 <k_sys_work_q_init+0x28>)
    73d0:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    73d2:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
    73d4:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
    73d6:	9300      	str	r3, [sp, #0]
    73d8:	4907      	ldr	r1, [pc, #28]	; (73f8 <k_sys_work_q_init+0x2c>)
    73da:	4808      	ldr	r0, [pc, #32]	; (73fc <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    73dc:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    73e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    73e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    73e8:	f000 f9de 	bl	77a8 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    73ec:	4620      	mov	r0, r4
    73ee:	b004      	add	sp, #16
    73f0:	bd10      	pop	{r4, pc}
    73f2:	bf00      	nop
    73f4:	0000a05b 	.word	0x0000a05b
    73f8:	20001ef0 	.word	0x20001ef0
    73fc:	20000388 	.word	0x20000388

00007400 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    7400:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    7404:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    7406:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    7408:	2604      	movs	r6, #4
    740a:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    740c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    740e:	7386      	strb	r6, [r0, #14]
	sys_dlist_init(&w->waitq);
    7410:	f100 0558 	add.w	r5, r0, #88	; 0x58
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    7414:	1dd6      	adds	r6, r2, #7
	list->tail = (sys_dnode_t *)list;
    7416:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    741a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    741c:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    741e:	f026 0607 	bic.w	r6, r6, #7
	node->prev = NULL;
    7422:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    7426:	e9c0 1619 	strd	r1, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    742a:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    742c:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    742e:	66c5      	str	r5, [r0, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    7430:	9202      	str	r2, [sp, #8]
    7432:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    7434:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    7436:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    743a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    743c:	9200      	str	r2, [sp, #0]
    743e:	4642      	mov	r2, r8
{
    7440:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    7442:	f7fc fa59 	bl	38f8 <arch_new_thread>
	if (!_current) {
    7446:	4b05      	ldr	r3, [pc, #20]	; (745c <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
    7448:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    744a:	689b      	ldr	r3, [r3, #8]
    744c:	b103      	cbz	r3, 7450 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
    744e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    7450:	6723      	str	r3, [r4, #112]	; 0x70
}
    7452:	4640      	mov	r0, r8
    7454:	b004      	add	sp, #16
    7456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    745a:	bf00      	nop
    745c:	20000940 	.word	0x20000940

00007460 <z_impl_k_thread_create>:
{
    7460:	b5f0      	push	{r4, r5, r6, r7, lr}
    7462:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    7464:	2500      	movs	r5, #0
    7466:	9505      	str	r5, [sp, #20]
    7468:	9d10      	ldr	r5, [sp, #64]	; 0x40
    746a:	9504      	str	r5, [sp, #16]
    746c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    746e:	9503      	str	r5, [sp, #12]
    7470:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    7472:	9502      	str	r5, [sp, #8]
{
    7474:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    7478:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    747a:	9501      	str	r5, [sp, #4]
    747c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    747e:	9500      	str	r5, [sp, #0]
{
    7480:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    7482:	f7ff ffbd 	bl	7400 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    7486:	1c7b      	adds	r3, r7, #1
    7488:	bf08      	it	eq
    748a:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    748e:	d005      	beq.n	749c <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    7490:	ea56 0307 	orrs.w	r3, r6, r7
    7494:	d105      	bne.n	74a2 <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
    7496:	4620      	mov	r0, r4
    7498:	f7ff fdea 	bl	7070 <z_sched_start>
}
    749c:	4620      	mov	r0, r4
    749e:	b007      	add	sp, #28
    74a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    74a2:	4904      	ldr	r1, [pc, #16]	; (74b4 <z_impl_k_thread_create+0x54>)
    74a4:	4632      	mov	r2, r6
    74a6:	463b      	mov	r3, r7
    74a8:	f104 0018 	add.w	r0, r4, #24
    74ac:	f000 fa2a 	bl	7904 <z_add_timeout>
    74b0:	e7f4      	b.n	749c <z_impl_k_thread_create+0x3c>
    74b2:	bf00      	nop
    74b4:	00008e85 	.word	0x00008e85

000074b8 <z_init_static_threads>:
{
    74b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    74bc:	4e2a      	ldr	r6, [pc, #168]	; (7568 <z_init_static_threads+0xb0>)
    74be:	4d2b      	ldr	r5, [pc, #172]	; (756c <z_init_static_threads+0xb4>)
{
    74c0:	b086      	sub	sp, #24
    74c2:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
    74c4:	42b5      	cmp	r5, r6
    74c6:	f105 0430 	add.w	r4, r5, #48	; 0x30
    74ca:	d310      	bcc.n	74ee <z_init_static_threads+0x36>
	k_sched_lock();
    74cc:	f7ff fc0c 	bl	6ce8 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    74d0:	4c26      	ldr	r4, [pc, #152]	; (756c <z_init_static_threads+0xb4>)
    74d2:	f8df a09c 	ldr.w	sl, [pc, #156]	; 7570 <z_init_static_threads+0xb8>
    74d6:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    74da:	f240 36e7 	movw	r6, #999	; 0x3e7
    74de:	2700      	movs	r7, #0
    74e0:	4544      	cmp	r4, r8
    74e2:	d321      	bcc.n	7528 <z_init_static_threads+0x70>
}
    74e4:	b006      	add	sp, #24
    74e6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
    74ea:	f7ff bced 	b.w	6ec8 <k_sched_unlock>
		z_setup_new_thread(
    74ee:	f854 3c04 	ldr.w	r3, [r4, #-4]
    74f2:	9305      	str	r3, [sp, #20]
    74f4:	f854 3c10 	ldr.w	r3, [r4, #-16]
    74f8:	9304      	str	r3, [sp, #16]
    74fa:	f854 3c14 	ldr.w	r3, [r4, #-20]
    74fe:	9303      	str	r3, [sp, #12]
    7500:	f854 3c18 	ldr.w	r3, [r4, #-24]
    7504:	9302      	str	r3, [sp, #8]
    7506:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    750a:	9301      	str	r3, [sp, #4]
    750c:	f854 3c20 	ldr.w	r3, [r4, #-32]
    7510:	9300      	str	r3, [sp, #0]
    7512:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    7516:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    751a:	f7ff ff71 	bl	7400 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    751e:	f854 3c30 	ldr.w	r3, [r4, #-48]
    7522:	655d      	str	r5, [r3, #84]	; 0x54
    7524:	4625      	mov	r5, r4
    7526:	e7cd      	b.n	74c4 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    7528:	6a63      	ldr	r3, [r4, #36]	; 0x24
    752a:	1c5a      	adds	r2, r3, #1
    752c:	d00d      	beq.n	754a <z_init_static_threads+0x92>
					    K_MSEC(thread_data->init_delay));
    752e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    7532:	4630      	mov	r0, r6
    7534:	4639      	mov	r1, r7
    7536:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    753a:	42b9      	cmp	r1, r7
    753c:	bf08      	it	eq
    753e:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
    7540:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    7542:	d104      	bne.n	754e <z_init_static_threads+0x96>
	z_sched_start(thread);
    7544:	4628      	mov	r0, r5
    7546:	f7ff fd93 	bl	7070 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    754a:	3430      	adds	r4, #48	; 0x30
    754c:	e7c8      	b.n	74e0 <z_init_static_threads+0x28>
    754e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7552:	2300      	movs	r3, #0
    7554:	f7f9 fa72 	bl	a3c <__aeabi_uldivmod>
    7558:	4602      	mov	r2, r0
    755a:	460b      	mov	r3, r1
    755c:	f105 0018 	add.w	r0, r5, #24
    7560:	4651      	mov	r1, sl
    7562:	f000 f9cf 	bl	7904 <z_add_timeout>
    7566:	e7f0      	b.n	754a <z_init_static_threads+0x92>
    7568:	2000016c 	.word	0x2000016c
    756c:	2000016c 	.word	0x2000016c
    7570:	00008e85 	.word	0x00008e85

00007574 <submit_to_queue_locked>:
 * @retval -EINVAL if no queue is provided
 * @retval -ENODEV if the queue is not started
 */
static int submit_to_queue_locked(struct k_work *work,
				  struct k_work_q **queuep)
{
    7574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int ret = 0;

	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    7576:	68c3      	ldr	r3, [r0, #12]
    7578:	079a      	lsls	r2, r3, #30
{
    757a:	4604      	mov	r4, r0
    757c:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    757e:	f3c3 0540 	ubfx	r5, r3, #1, #1
    7582:	d41f      	bmi.n	75c4 <submit_to_queue_locked+0x50>
		/* Disallowed */
		ret = -EBUSY;
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    7584:	075f      	lsls	r7, r3, #29
    7586:	d41f      	bmi.n	75c8 <submit_to_queue_locked+0x54>
		/* Not currently queued */
		ret = 1;

		/* If no queue specified resubmit to last queue.
		 */
		if (*queuep == NULL) {
    7588:	680a      	ldr	r2, [r1, #0]
    758a:	b90a      	cbnz	r2, 7590 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    758c:	6882      	ldr	r2, [r0, #8]
    758e:	600a      	str	r2, [r1, #0]

		/* If the work is currently running we have to use the
		 * queue it's running on to prevent handler
		 * re-entrancy.
		 */
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    7590:	07d8      	lsls	r0, r3, #31
			__ASSERT_NO_MSG(work->queue != NULL);
			*queuep = work->queue;
    7592:	bf44      	itt	mi
    7594:	68a3      	ldrmi	r3, [r4, #8]
    7596:	6033      	strmi	r3, [r6, #0]
			ret = 2;
		}

		int rc = queue_submit_locked(*queuep, work);
    7598:	6837      	ldr	r7, [r6, #0]
			ret = 2;
    759a:	bf4c      	ite	mi
    759c:	2502      	movmi	r5, #2
		ret = 1;
    759e:	2501      	movpl	r5, #1
	if (queue == NULL) {
    75a0:	b37f      	cbz	r7, 7602 <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    75a2:	4b1b      	ldr	r3, [pc, #108]	; (7610 <submit_to_queue_locked+0x9c>)
    75a4:	689b      	ldr	r3, [r3, #8]
    75a6:	42bb      	cmp	r3, r7
    75a8:	d111      	bne.n	75ce <submit_to_queue_locked+0x5a>
    75aa:	f001 fce3 	bl	8f74 <k_is_in_isr>
    75ae:	f080 0001 	eor.w	r0, r0, #1
    75b2:	b2c0      	uxtb	r0, r0
	bool draining = flag_test(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
    75b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    75b8:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    75ba:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    75be:	d523      	bpl.n	7608 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
    75c0:	b13a      	cbz	r2, 75d2 <submit_to_queue_locked+0x5e>
    75c2:	b940      	cbnz	r0, 75d6 <submit_to_queue_locked+0x62>
		ret = -EBUSY;
    75c4:	f06f 050f 	mvn.w	r5, #15
	} else {
		/* Already queued, do nothing. */
	}

	if (ret <= 0) {
		*queuep = NULL;
    75c8:	2300      	movs	r3, #0
    75ca:	6033      	str	r3, [r6, #0]
	}

	return ret;
    75cc:	e013      	b.n	75f6 <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    75ce:	2000      	movs	r0, #0
    75d0:	e7f0      	b.n	75b4 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
    75d2:	071b      	lsls	r3, r3, #28
    75d4:	d4f6      	bmi.n	75c4 <submit_to_queue_locked+0x50>
	parent->next = child;
    75d6:	2300      	movs	r3, #0
    75d8:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
    75da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    75de:	b963      	cbnz	r3, 75fa <submit_to_queue_locked+0x86>
	list->head = node;
    75e0:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
    75e4:	4638      	mov	r0, r7
    75e6:	f001 fcd6 	bl	8f96 <notify_queue_locked>
	*flagp |= BIT(bit);
    75ea:	68e3      	ldr	r3, [r4, #12]
    75ec:	f043 0304 	orr.w	r3, r3, #4
    75f0:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    75f2:	6833      	ldr	r3, [r6, #0]
    75f4:	60a3      	str	r3, [r4, #8]
}
    75f6:	4628      	mov	r0, r5
    75f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    75fa:	601c      	str	r4, [r3, #0]
	list->tail = node;
    75fc:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
    7600:	e7f0      	b.n	75e4 <submit_to_queue_locked+0x70>
		return -EINVAL;
    7602:	f06f 0515 	mvn.w	r5, #21
    7606:	e7df      	b.n	75c8 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
    7608:	f06f 0512 	mvn.w	r5, #18
    760c:	e7dc      	b.n	75c8 <submit_to_queue_locked+0x54>
    760e:	bf00      	nop
    7610:	20000940 	.word	0x20000940

00007614 <finalize_cancel_locked>:
	*flagp &= ~BIT(bit);
    7614:	68c3      	ldr	r3, [r0, #12]
{
    7616:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    761a:	4c17      	ldr	r4, [pc, #92]	; (7678 <finalize_cancel_locked+0x64>)
	*flagp &= ~BIT(bit);
    761c:	f023 0302 	bic.w	r3, r3, #2
{
    7620:	4607      	mov	r7, r0
	*flagp &= ~BIT(bit);
    7622:	60c3      	str	r3, [r0, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    7624:	6820      	ldr	r0, [r4, #0]
    7626:	b320      	cbz	r0, 7672 <finalize_cancel_locked+0x5e>
	return node->next;
    7628:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    762a:	2600      	movs	r6, #0
    762c:	2d00      	cmp	r5, #0
    762e:	bf38      	it	cc
    7630:	2500      	movcc	r5, #0
	parent->next = child;
    7632:	46b0      	mov	r8, r6
		if (wc->work == work) {
    7634:	6842      	ldr	r2, [r0, #4]
    7636:	42ba      	cmp	r2, r7
    7638:	4603      	mov	r3, r0
    763a:	d10b      	bne.n	7654 <finalize_cancel_locked+0x40>
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    763c:	6803      	ldr	r3, [r0, #0]
    763e:	b996      	cbnz	r6, 7666 <finalize_cancel_locked+0x52>
    7640:	6862      	ldr	r2, [r4, #4]
	list->head = node;
    7642:	6023      	str	r3, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    7644:	4290      	cmp	r0, r2
    7646:	d100      	bne.n	764a <finalize_cancel_locked+0x36>
	list->tail = node;
    7648:	6063      	str	r3, [r4, #4]
	parent->next = child;
    764a:	f840 8b08 	str.w	r8, [r0], #8
	z_impl_k_sem_give(sem);
    764e:	f7ff fe73 	bl	7338 <z_impl_k_sem_give>
}
    7652:	4633      	mov	r3, r6
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    7654:	b16d      	cbz	r5, 7672 <finalize_cancel_locked+0x5e>
	return node->next;
    7656:	682a      	ldr	r2, [r5, #0]
    7658:	2a00      	cmp	r2, #0
    765a:	bf38      	it	cc
    765c:	2200      	movcc	r2, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    765e:	4628      	mov	r0, r5
    7660:	461e      	mov	r6, r3
    7662:	4615      	mov	r5, r2
    7664:	e7e6      	b.n	7634 <finalize_cancel_locked+0x20>
	parent->next = child;
    7666:	6033      	str	r3, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
    7668:	6863      	ldr	r3, [r4, #4]
    766a:	4298      	cmp	r0, r3
	list->tail = node;
    766c:	bf08      	it	eq
    766e:	6066      	streq	r6, [r4, #4]
}
    7670:	e7eb      	b.n	764a <finalize_cancel_locked+0x36>
}
    7672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7676:	bf00      	nop
    7678:	2000097c 	.word	0x2000097c

0000767c <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    767c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
    7680:	f8df 9120 	ldr.w	r9, [pc, #288]	; 77a4 <work_queue_main+0x128>
{
    7684:	b087      	sub	sp, #28
    7686:	4604      	mov	r4, r0
					   K_FOREVER, NULL);
    7688:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    768c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    7690:	f100 0888 	add.w	r8, r0, #136	; 0x88
	__asm__ volatile(
    7694:	f04f 0320 	mov.w	r3, #32
    7698:	f3ef 8a11 	mrs	sl, BASEPRI
    769c:	f383 8811 	msr	BASEPRI, r3
    76a0:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
    76a4:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
	return list->head;
    76a8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
Z_GENLIST_GET(slist, snode)
    76ac:	b9c5      	cbnz	r5, 76e0 <work_queue_main+0x64>
	*flagp &= ~BIT(bit);
    76ae:	f023 0204 	bic.w	r2, r3, #4
		} else if (flag_test_and_clear(&queue->flags,
    76b2:	0759      	lsls	r1, r3, #29
	*flagp &= ~BIT(bit);
    76b4:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
		} else if (flag_test_and_clear(&queue->flags,
    76b8:	d508      	bpl.n	76cc <work_queue_main+0x50>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    76ba:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    76be:	2200      	movs	r2, #0
    76c0:	2101      	movs	r1, #1
    76c2:	4628      	mov	r0, r5
    76c4:	f001 fc2d 	bl	8f22 <z_sched_wake>
    76c8:	2800      	cmp	r0, #0
    76ca:	d1f8      	bne.n	76be <work_queue_main+0x42>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    76cc:	2300      	movs	r3, #0
    76ce:	e9cd 6700 	strd	r6, r7, [sp]
    76d2:	9302      	str	r3, [sp, #8]
    76d4:	4642      	mov	r2, r8
    76d6:	4651      	mov	r1, sl
    76d8:	4648      	mov	r0, r9
    76da:	f7ff fe1b 	bl	7314 <z_sched_wait>
			continue;
    76de:	e7d9      	b.n	7694 <work_queue_main+0x18>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    76e0:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
    76e4:	6829      	ldr	r1, [r5, #0]
	list->head = node;
    76e6:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    76ea:	4295      	cmp	r5, r2
    76ec:	d101      	bne.n	76f2 <work_queue_main+0x76>
	list->tail = node;
    76ee:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
    76f2:	f043 0302 	orr.w	r3, r3, #2
    76f6:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
    76fa:	f38a 8811 	msr	BASEPRI, sl
    76fe:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		if (work != NULL) {
			bool yield;
			k_work_handler_t handler = work->handler;
    7702:	f8d5 a004 	ldr.w	sl, [r5, #4]
	__asm__ volatile(
    7706:	f04f 0320 	mov.w	r3, #32
    770a:	f3ef 8b11 	mrs	fp, BASEPRI
    770e:	f383 8811 	msr	BASEPRI, r3
    7712:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    7716:	68eb      	ldr	r3, [r5, #12]
    7718:	f023 0304 	bic.w	r3, r3, #4
	return (*flagp & BIT(bit)) != 0U;
    771c:	f3c3 0140 	ubfx	r1, r3, #1, #1
	*flagp &= ~BIT(bit);
    7720:	60eb      	str	r3, [r5, #12]
	if (ret) {
    7722:	f081 0201 	eor.w	r2, r1, #1
    7726:	b129      	cbz	r1, 7734 <work_queue_main+0xb8>
		finalize_cancel_locked(work);
    7728:	4628      	mov	r0, r5
    772a:	9205      	str	r2, [sp, #20]
    772c:	f7ff ff72 	bl	7614 <finalize_cancel_locked>
    7730:	9a05      	ldr	r2, [sp, #20]
    7732:	e002      	b.n	773a <work_queue_main+0xbe>
	*flagp |= BIT(bit);
    7734:	f043 0301 	orr.w	r3, r3, #1
    7738:	60eb      	str	r3, [r5, #12]
	__asm__ volatile(
    773a:	f38b 8811 	msr	BASEPRI, fp
    773e:	f3bf 8f6f 	isb	sy

			__ASSERT_NO_MSG(handler != 0);

			if (work_set_running(work, queue)) {
    7742:	b9b2      	cbnz	r2, 7772 <work_queue_main+0xf6>
	__asm__ volatile(
    7744:	f04f 0320 	mov.w	r3, #32
    7748:	f3ef 8211 	mrs	r2, BASEPRI
    774c:	f383 8811 	msr	BASEPRI, r3
    7750:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    7754:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    7758:	f023 0302 	bic.w	r3, r3, #2
    775c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
    7760:	f382 8811 	msr	BASEPRI, r2
    7764:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&lock, key);

			/* Optionally yield to prevent the work queue from
			 * starving other threads.
			 */
			if (yield) {
    7768:	05db      	lsls	r3, r3, #23
    776a:	d493      	bmi.n	7694 <work_queue_main+0x18>
	z_impl_k_yield();
    776c:	f7ff fcf6 	bl	715c <z_impl_k_yield>
}
    7770:	e790      	b.n	7694 <work_queue_main+0x18>
				handler(work);
    7772:	4628      	mov	r0, r5
    7774:	47d0      	blx	sl
	__asm__ volatile(
    7776:	f04f 0320 	mov.w	r3, #32
    777a:	f3ef 8a11 	mrs	sl, BASEPRI
    777e:	f383 8811 	msr	BASEPRI, r3
    7782:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    7786:	68eb      	ldr	r3, [r5, #12]
    7788:	f023 0301 	bic.w	r3, r3, #1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    778c:	079a      	lsls	r2, r3, #30
	*flagp &= ~BIT(bit);
    778e:	60eb      	str	r3, [r5, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    7790:	d502      	bpl.n	7798 <work_queue_main+0x11c>
		finalize_cancel_locked(work);
    7792:	4628      	mov	r0, r5
    7794:	f7ff ff3e 	bl	7614 <finalize_cancel_locked>
	__asm__ volatile(
    7798:	f38a 8811 	msr	BASEPRI, sl
    779c:	f3bf 8f6f 	isb	sy
}
    77a0:	e7d0      	b.n	7744 <work_queue_main+0xc8>
    77a2:	bf00      	nop
    77a4:	20000eb0 	.word	0x20000eb0

000077a8 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    77a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    77aa:	b089      	sub	sp, #36	; 0x24
    77ac:	4604      	mov	r4, r0
	list->head = NULL;
    77ae:	2000      	movs	r0, #0
	list->tail = NULL;
    77b0:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
    77b4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    77b6:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
    77ba:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
    77be:	f104 0090 	add.w	r0, r4, #144	; 0x90
    77c2:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    77c6:	b31d      	cbz	r5, 7810 <k_work_queue_start+0x68>
    77c8:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    77ca:	2800      	cmp	r0, #0
    77cc:	f240 1001 	movw	r0, #257	; 0x101
    77d0:	bf08      	it	eq
    77d2:	2001      	moveq	r0, #1
	*flagp = flags;
    77d4:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    77d8:	2000      	movs	r0, #0
    77da:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    77de:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    77e2:	e9cd 3003 	strd	r3, r0, [sp, #12]
    77e6:	e9cd 0001 	strd	r0, r0, [sp, #4]
    77ea:	e9cd 6706 	strd	r6, r7, [sp, #24]
    77ee:	4b09      	ldr	r3, [pc, #36]	; (7814 <k_work_queue_start+0x6c>)
    77f0:	9400      	str	r4, [sp, #0]
    77f2:	4620      	mov	r0, r4
    77f4:	f7ff fe34 	bl	7460 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    77f8:	b125      	cbz	r5, 7804 <k_work_queue_start+0x5c>
    77fa:	6829      	ldr	r1, [r5, #0]
    77fc:	b111      	cbz	r1, 7804 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
    77fe:	4620      	mov	r0, r4
    7800:	f001 fbc2 	bl	8f88 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    7804:	4620      	mov	r0, r4
		k_thread_name_set(&queue->thread, cfg->name);
	}

	k_thread_start(&queue->thread);
}
    7806:	b009      	add	sp, #36	; 0x24
    7808:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    780c:	f001 bbc1 	b.w	8f92 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    7810:	2001      	movs	r0, #1
    7812:	e7df      	b.n	77d4 <k_work_queue_start+0x2c>
    7814:	0000767d 	.word	0x0000767d

00007818 <boot_banner>:
#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
	       STRINGIFY(BUILD_VERSION), BOOT_DELAY_BANNER);
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
    7818:	4a02      	ldr	r2, [pc, #8]	; (7824 <boot_banner+0xc>)
    781a:	4903      	ldr	r1, [pc, #12]	; (7828 <boot_banner+0x10>)
    781c:	4803      	ldr	r0, [pc, #12]	; (782c <boot_banner+0x14>)
    781e:	f000 bad8 	b.w	7dd2 <printk>
    7822:	bf00      	nop
    7824:	000097a0 	.word	0x000097a0
    7828:	0000a064 	.word	0x0000a064
    782c:	0000a06b 	.word	0x0000a06b

00007830 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    7830:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    7832:	4806      	ldr	r0, [pc, #24]	; (784c <z_data_copy+0x1c>)
    7834:	4a06      	ldr	r2, [pc, #24]	; (7850 <z_data_copy+0x20>)
    7836:	4907      	ldr	r1, [pc, #28]	; (7854 <z_data_copy+0x24>)
    7838:	1a12      	subs	r2, r2, r0
    783a:	f001 fc49 	bl	90d0 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    783e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    7842:	4a05      	ldr	r2, [pc, #20]	; (7858 <z_data_copy+0x28>)
    7844:	4905      	ldr	r1, [pc, #20]	; (785c <z_data_copy+0x2c>)
    7846:	4806      	ldr	r0, [pc, #24]	; (7860 <z_data_copy+0x30>)
    7848:	f001 bc42 	b.w	90d0 <memcpy>
    784c:	20000000 	.word	0x20000000
    7850:	200001cc 	.word	0x200001cc
    7854:	0000a198 	.word	0x0000a198
    7858:	00000000 	.word	0x00000000
    785c:	0000a198 	.word	0x0000a198
    7860:	20000000 	.word	0x20000000

00007864 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    7864:	4b03      	ldr	r3, [pc, #12]	; (7874 <elapsed+0x10>)
    7866:	681b      	ldr	r3, [r3, #0]
    7868:	b90b      	cbnz	r3, 786e <elapsed+0xa>
    786a:	f7fb bed3 	b.w	3614 <sys_clock_elapsed>
}
    786e:	2000      	movs	r0, #0
    7870:	4770      	bx	lr
    7872:	bf00      	nop
    7874:	20000984 	.word	0x20000984

00007878 <remove_timeout>:
{
    7878:	b530      	push	{r4, r5, lr}
    787a:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    787c:	b168      	cbz	r0, 789a <remove_timeout+0x22>
    787e:	4a0a      	ldr	r2, [pc, #40]	; (78a8 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    7880:	6852      	ldr	r2, [r2, #4]
    7882:	4290      	cmp	r0, r2
    7884:	d009      	beq.n	789a <remove_timeout+0x22>
	if (next(t) != NULL) {
    7886:	b143      	cbz	r3, 789a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    7888:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    788c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    7890:	1912      	adds	r2, r2, r4
    7892:	eb45 0101 	adc.w	r1, r5, r1
    7896:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    789a:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    789c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    789e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    78a0:	2300      	movs	r3, #0
	node->prev = NULL;
    78a2:	e9c0 3300 	strd	r3, r3, [r0]
}
    78a6:	bd30      	pop	{r4, r5, pc}
    78a8:	2000009c 	.word	0x2000009c

000078ac <next_timeout>:

static int32_t next_timeout(void)
{
    78ac:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    78ae:	4b13      	ldr	r3, [pc, #76]	; (78fc <next_timeout+0x50>)
    78b0:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    78b2:	429c      	cmp	r4, r3
    78b4:	bf08      	it	eq
    78b6:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    78b8:	f7ff ffd4 	bl	7864 <elapsed>
    78bc:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
    78be:	b1bc      	cbz	r4, 78f0 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    78c0:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    78c4:	1b40      	subs	r0, r0, r5
    78c6:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    78ca:	2801      	cmp	r0, #1
    78cc:	f171 0300 	sbcs.w	r3, r1, #0
    78d0:	db11      	blt.n	78f6 <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    78d2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    78d6:	2300      	movs	r3, #0
    78d8:	4282      	cmp	r2, r0
    78da:	eb73 0401 	sbcs.w	r4, r3, r1
    78de:	da00      	bge.n	78e2 <next_timeout+0x36>
    78e0:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    78e2:	4b07      	ldr	r3, [pc, #28]	; (7900 <next_timeout+0x54>)
    78e4:	691b      	ldr	r3, [r3, #16]
    78e6:	b113      	cbz	r3, 78ee <next_timeout+0x42>
    78e8:	4298      	cmp	r0, r3
    78ea:	bfa8      	it	ge
    78ec:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    78ee:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    78f0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    78f4:	e7f5      	b.n	78e2 <next_timeout+0x36>
    78f6:	2000      	movs	r0, #0
    78f8:	e7f3      	b.n	78e2 <next_timeout+0x36>
    78fa:	bf00      	nop
    78fc:	2000009c 	.word	0x2000009c
    7900:	20000940 	.word	0x20000940

00007904 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    7904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    7908:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    790c:	bf08      	it	eq
    790e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    7912:	b085      	sub	sp, #20
    7914:	4604      	mov	r4, r0
    7916:	4692      	mov	sl, r2
    7918:	469b      	mov	fp, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    791a:	d070      	beq.n	79fe <z_add_timeout+0xfa>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	k_ticks_t ticks = timeout.ticks + 1;
    791c:	1c56      	adds	r6, r2, #1

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    791e:	f06f 0501 	mvn.w	r5, #1
	k_ticks_t ticks = timeout.ticks + 1;
    7922:	f143 0700 	adc.w	r7, r3, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    7926:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    792a:	ebb5 0806 	subs.w	r8, r5, r6
    792e:	eb63 0907 	sbc.w	r9, r3, r7
    7932:	f1b8 0f00 	cmp.w	r8, #0
    7936:	f179 0300 	sbcs.w	r3, r9, #0
    793a:	db16      	blt.n	796a <z_add_timeout+0x66>
		ticks = Z_TICK_ABS(timeout.ticks) - (curr_tick + elapsed());
    793c:	4e36      	ldr	r6, [pc, #216]	; (7a18 <z_add_timeout+0x114>)
    793e:	9103      	str	r1, [sp, #12]
    7940:	f7ff ff90 	bl	7864 <elapsed>
    7944:	e9d6 2600 	ldrd	r2, r6, [r6]
    7948:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    794c:	1aad      	subs	r5, r5, r2
    794e:	eb63 0306 	sbc.w	r3, r3, r6
    7952:	ebb5 020a 	subs.w	r2, r5, sl
    7956:	eb63 030b 	sbc.w	r3, r3, fp
    795a:	9200      	str	r2, [sp, #0]
    795c:	9301      	str	r3, [sp, #4]
    795e:	e9dd 6700 	ldrd	r6, r7, [sp]
    7962:	9903      	ldr	r1, [sp, #12]
    7964:	1a36      	subs	r6, r6, r0
    7966:	eb67 77e0 	sbc.w	r7, r7, r0, asr #31
	}

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    796a:	60a1      	str	r1, [r4, #8]
	__asm__ volatile(
    796c:	f04f 0320 	mov.w	r3, #32
    7970:	f3ef 8511 	mrs	r5, BASEPRI
    7974:	f383 8811 	msr	BASEPRI, r3
    7978:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    797c:	f7ff ff72 	bl	7864 <elapsed>
	ticks = MAX(1, ticks);
    7980:	2e01      	cmp	r6, #1
	return list->head == list;
    7982:	4a26      	ldr	r2, [pc, #152]	; (7a1c <z_add_timeout+0x118>)
    7984:	f177 0300 	sbcs.w	r3, r7, #0
    7988:	bfb8      	it	lt
    798a:	2601      	movlt	r6, #1
    798c:	6813      	ldr	r3, [r2, #0]
    798e:	bfb8      	it	lt
    7990:	2700      	movlt	r7, #0
		to->dticks = ticks + elapsed();
    7992:	1836      	adds	r6, r6, r0
    7994:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7998:	4293      	cmp	r3, r2
    799a:	e9c4 6704 	strd	r6, r7, [r4, #16]
    799e:	d002      	beq.n	79a6 <z_add_timeout+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    79a0:	f8d2 c004 	ldr.w	ip, [r2, #4]
		for (t = first(); t != NULL; t = next(t)) {
    79a4:	b92b      	cbnz	r3, 79b2 <z_add_timeout+0xae>
	sys_dnode_t *const tail = list->tail;
    79a6:	6853      	ldr	r3, [r2, #4]
	node->prev = tail;
    79a8:	e9c4 2300 	strd	r2, r3, [r4]
	tail->next = node;
    79ac:	601c      	str	r4, [r3, #0]
	list->tail = node;
    79ae:	6054      	str	r4, [r2, #4]
}
    79b0:	e012      	b.n	79d8 <z_add_timeout+0xd4>
			if (t->dticks > to->dticks) {
    79b2:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
    79b6:	e9d4 6704 	ldrd	r6, r7, [r4, #16]
    79ba:	4546      	cmp	r6, r8
    79bc:	eb77 0109 	sbcs.w	r1, r7, r9
    79c0:	da20      	bge.n	7a04 <z_add_timeout+0x100>
				t->dticks -= to->dticks;
    79c2:	ebb8 0006 	subs.w	r0, r8, r6
    79c6:	eb69 0107 	sbc.w	r1, r9, r7
    79ca:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    79ce:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    79d0:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    79d4:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    79d6:	605c      	str	r4, [r3, #4]
	return list->head == list;
    79d8:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    79da:	4293      	cmp	r3, r2
    79dc:	d00b      	beq.n	79f6 <z_add_timeout+0xf2>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    79de:	429c      	cmp	r4, r3
    79e0:	d109      	bne.n	79f6 <z_add_timeout+0xf2>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    79e2:	f7ff ff63 	bl	78ac <next_timeout>

			if (next_time == 0 ||
    79e6:	b118      	cbz	r0, 79f0 <z_add_timeout+0xec>
			    _current_cpu->slice_ticks != next_time) {
    79e8:	4b0d      	ldr	r3, [pc, #52]	; (7a20 <z_add_timeout+0x11c>)
			if (next_time == 0 ||
    79ea:	691b      	ldr	r3, [r3, #16]
    79ec:	4283      	cmp	r3, r0
    79ee:	d002      	beq.n	79f6 <z_add_timeout+0xf2>
				sys_clock_set_timeout(next_time, false);
    79f0:	2100      	movs	r1, #0
    79f2:	f7fb fddd 	bl	35b0 <sys_clock_set_timeout>
	__asm__ volatile(
    79f6:	f385 8811 	msr	BASEPRI, r5
    79fa:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    79fe:	b005      	add	sp, #20
    7a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
    7a04:	ebb6 0008 	subs.w	r0, r6, r8
    7a08:	eb67 0109 	sbc.w	r1, r7, r9
	return (node == list->tail) ? NULL : node->next;
    7a0c:	4563      	cmp	r3, ip
    7a0e:	e9c4 0104 	strd	r0, r1, [r4, #16]
    7a12:	d0c8      	beq.n	79a6 <z_add_timeout+0xa2>
    7a14:	681b      	ldr	r3, [r3, #0]
    7a16:	e7c5      	b.n	79a4 <z_add_timeout+0xa0>
    7a18:	20000428 	.word	0x20000428
    7a1c:	2000009c 	.word	0x2000009c
    7a20:	20000940 	.word	0x20000940

00007a24 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    7a24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7a28:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    7a2a:	f7ff faa7 	bl	6f7c <z_time_slice>
	__asm__ volatile(
    7a2e:	f04f 0320 	mov.w	r3, #32
    7a32:	f3ef 8411 	mrs	r4, BASEPRI
    7a36:	f383 8811 	msr	BASEPRI, r3
    7a3a:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    7a3e:	4d2c      	ldr	r5, [pc, #176]	; (7af0 <sys_clock_announce+0xcc>)
    7a40:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 7af4 <sys_clock_announce+0xd0>
	return list->head == list;
    7a44:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 7af8 <sys_clock_announce+0xd4>
    7a48:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    7a4a:	4651      	mov	r1, sl
    7a4c:	f8d5 c000 	ldr.w	ip, [r5]
    7a50:	f8db 0000 	ldr.w	r0, [fp]
    7a54:	4662      	mov	r2, ip
    7a56:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7a58:	4558      	cmp	r0, fp
    7a5a:	e9da 8900 	ldrd	r8, r9, [sl]
    7a5e:	e9cd 2300 	strd	r2, r3, [sp]
    7a62:	d00d      	beq.n	7a80 <sys_clock_announce+0x5c>
    7a64:	b160      	cbz	r0, 7a80 <sys_clock_announce+0x5c>
    7a66:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
    7a6a:	45b4      	cmp	ip, r6
    7a6c:	41bb      	sbcs	r3, r7
    7a6e:	da1e      	bge.n	7aae <sys_clock_announce+0x8a>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    7a70:	9b00      	ldr	r3, [sp, #0]
    7a72:	ebb6 0c03 	subs.w	ip, r6, r3
    7a76:	9b01      	ldr	r3, [sp, #4]
    7a78:	eb67 0603 	sbc.w	r6, r7, r3
    7a7c:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
    7a80:	9b00      	ldr	r3, [sp, #0]
    7a82:	eb13 0208 	adds.w	r2, r3, r8
    7a86:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
    7a88:	f04f 0600 	mov.w	r6, #0
	curr_tick += announce_remaining;
    7a8c:	eb43 0309 	adc.w	r3, r3, r9
    7a90:	e9c1 2300 	strd	r2, r3, [r1]
	announce_remaining = 0;
    7a94:	602e      	str	r6, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
    7a96:	f7ff ff09 	bl	78ac <next_timeout>
    7a9a:	4631      	mov	r1, r6
    7a9c:	f7fb fd88 	bl	35b0 <sys_clock_set_timeout>
	__asm__ volatile(
    7aa0:	f384 8811 	msr	BASEPRI, r4
    7aa4:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    7aa8:	b003      	add	sp, #12
    7aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
    7aae:	eb18 0806 	adds.w	r8, r8, r6
		t->dticks = 0;
    7ab2:	f04f 0200 	mov.w	r2, #0
    7ab6:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
    7aba:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
    7abe:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
    7ac2:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
    7ac6:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
    7aca:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
    7acc:	f7ff fed4 	bl	7878 <remove_timeout>
    7ad0:	f384 8811 	msr	BASEPRI, r4
    7ad4:	f3bf 8f6f 	isb	sy
		t->fn(t);
    7ad8:	6883      	ldr	r3, [r0, #8]
    7ada:	4798      	blx	r3
	__asm__ volatile(
    7adc:	f04f 0320 	mov.w	r3, #32
    7ae0:	f3ef 8411 	mrs	r4, BASEPRI
    7ae4:	f383 8811 	msr	BASEPRI, r3
    7ae8:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
    7aec:	4901      	ldr	r1, [pc, #4]	; (7af4 <sys_clock_announce+0xd0>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    7aee:	e7ad      	b.n	7a4c <sys_clock_announce+0x28>
    7af0:	20000984 	.word	0x20000984
    7af4:	20000428 	.word	0x20000428
    7af8:	2000009c 	.word	0x2000009c

00007afc <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    7afc:	b510      	push	{r4, lr}
    7afe:	f04f 0320 	mov.w	r3, #32
    7b02:	f3ef 8411 	mrs	r4, BASEPRI
    7b06:	f383 8811 	msr	BASEPRI, r3
    7b0a:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    7b0e:	f7fb fd81 	bl	3614 <sys_clock_elapsed>
    7b12:	4b06      	ldr	r3, [pc, #24]	; (7b2c <sys_clock_tick_get+0x30>)
    7b14:	e9d3 2300 	ldrd	r2, r3, [r3]
    7b18:	1812      	adds	r2, r2, r0
    7b1a:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
    7b1e:	f384 8811 	msr	BASEPRI, r4
    7b22:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    7b26:	4610      	mov	r0, r2
    7b28:	4619      	mov	r1, r3
    7b2a:	bd10      	pop	{r4, pc}
    7b2c:	20000428 	.word	0x20000428

00007b30 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    7b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    7b32:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
    7b36:	1c56      	adds	r6, r2, #1
    7b38:	f143 0700 	adc.w	r7, r3, #0
    7b3c:	2f00      	cmp	r7, #0
    7b3e:	bf08      	it	eq
    7b40:	2e02      	cmpeq	r6, #2
{
    7b42:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    7b44:	d302      	bcc.n	7b4c <z_timer_expiration_handler+0x1c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    7b46:	490d      	ldr	r1, [pc, #52]	; (7b7c <z_timer_expiration_handler+0x4c>)
    7b48:	f7ff fedc 	bl	7904 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    7b4c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    7b4e:	3301      	adds	r3, #1
    7b50:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    7b52:	6a23      	ldr	r3, [r4, #32]
    7b54:	b10b      	cbz	r3, 7b5a <z_timer_expiration_handler+0x2a>
		timer->expiry_fn(timer);
    7b56:	4620      	mov	r0, r4
    7b58:	4798      	blx	r3
	return list->head == list;
    7b5a:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7b5e:	42a5      	cmp	r5, r4
    7b60:	d00a      	beq.n	7b78 <z_timer_expiration_handler+0x48>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    7b62:	b14d      	cbz	r5, 7b78 <z_timer_expiration_handler+0x48>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
    7b64:	4628      	mov	r0, r5
    7b66:	f001 f920 	bl	8daa <z_unpend_thread_no_timeout>
    7b6a:	2300      	movs	r3, #0
    7b6c:	67ab      	str	r3, [r5, #120]	; 0x78

	arch_thread_return_value_set(thread, 0);

	z_ready_thread(thread);
    7b6e:	4628      	mov	r0, r5
}
    7b70:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
    7b74:	f001 b976 	b.w	8e64 <z_ready_thread>
}
    7b78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7b7a:	bf00      	nop
    7b7c:	00007b31 	.word	0x00007b31

00007b80 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    7b80:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
    7b84:	4619      	mov	r1, r3
    7b86:	4606      	mov	r6, r0
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    7b88:	1c4c      	adds	r4, r1, #1
{
    7b8a:	4610      	mov	r0, r2
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    7b8c:	bf08      	it	eq
    7b8e:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    7b92:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    7b96:	4680      	mov	r8, r0
    7b98:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    7b9a:	d04c      	beq.n	7c36 <z_impl_k_timer_start+0xb6>
    7b9c:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    7b9e:	1c6b      	adds	r3, r5, #1
    7ba0:	bf08      	it	eq
    7ba2:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    7ba6:	4614      	mov	r4, r2
    7ba8:	d019      	beq.n	7bde <z_impl_k_timer_start+0x5e>
    7baa:	ea54 0305 	orrs.w	r3, r4, r5
    7bae:	d016      	beq.n	7bde <z_impl_k_timer_start+0x5e>
	    Z_TICK_ABS(period.ticks) < 0) {
    7bb0:	f06f 0301 	mvn.w	r3, #1
    7bb4:	ebb3 0a02 	subs.w	sl, r3, r2
    7bb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7bbc:	eb63 0b05 	sbc.w	fp, r3, r5
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    7bc0:	f1ba 0f00 	cmp.w	sl, #0
    7bc4:	f17b 0300 	sbcs.w	r3, fp, #0
    7bc8:	da09      	bge.n	7bde <z_impl_k_timer_start+0x5e>
		period.ticks = MAX(period.ticks - 1, 1);
    7bca:	f112 34ff 	adds.w	r4, r2, #4294967295	; 0xffffffff
    7bce:	f145 35ff 	adc.w	r5, r5, #4294967295	; 0xffffffff
    7bd2:	2c01      	cmp	r4, #1
    7bd4:	f175 0300 	sbcs.w	r3, r5, #0
    7bd8:	bfbc      	itt	lt
    7bda:	2401      	movlt	r4, #1
    7bdc:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    7bde:	f06f 0301 	mvn.w	r3, #1
    7be2:	1a1b      	subs	r3, r3, r0
    7be4:	9300      	str	r3, [sp, #0]
    7be6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7bea:	eb63 0301 	sbc.w	r3, r3, r1
    7bee:	9301      	str	r3, [sp, #4]
    7bf0:	e9dd 2300 	ldrd	r2, r3, [sp]
    7bf4:	2a00      	cmp	r2, #0
    7bf6:	f173 0300 	sbcs.w	r3, r3, #0
    7bfa:	da0c      	bge.n	7c16 <z_impl_k_timer_start+0x96>
		duration.ticks = MAX(duration.ticks - 1, 0);
    7bfc:	f110 38ff 	adds.w	r8, r0, #4294967295	; 0xffffffff
    7c00:	f141 39ff 	adc.w	r9, r1, #4294967295	; 0xffffffff
    7c04:	f1b8 0f00 	cmp.w	r8, #0
    7c08:	f179 0300 	sbcs.w	r3, r9, #0
    7c0c:	bfbc      	itt	lt
    7c0e:	f04f 0800 	movlt.w	r8, #0
    7c12:	f04f 0900 	movlt.w	r9, #0
	}

	(void)z_abort_timeout(&timer->timeout);
    7c16:	4630      	mov	r0, r6
    7c18:	f001 f9ea 	bl	8ff0 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    7c1c:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    7c1e:	4907      	ldr	r1, [pc, #28]	; (7c3c <z_impl_k_timer_start+0xbc>)
	timer->status = 0U;
    7c20:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    7c22:	4642      	mov	r2, r8
    7c24:	464b      	mov	r3, r9
    7c26:	4630      	mov	r0, r6
	timer->period = period;
    7c28:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
    7c2c:	b002      	add	sp, #8
    7c2e:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    7c32:	f7ff be67 	b.w	7904 <z_add_timeout>
}
    7c36:	b002      	add	sp, #8
    7c38:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
    7c3c:	00007b31 	.word	0x00007b31

00007c40 <round>:
    7c40:	b580      	push	{r7, lr}
    7c42:	b08c      	sub	sp, #48	; 0x30
    7c44:	af00      	add	r7, sp, #0
    7c46:	e9c7 0100 	strd	r0, r1, [r7]
    7c4a:	e9d7 2300 	ldrd	r2, r3, [r7]
    7c4e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    7c52:	697b      	ldr	r3, [r7, #20]
    7c54:	62fb      	str	r3, [r7, #44]	; 0x2c
    7c56:	693b      	ldr	r3, [r7, #16]
    7c58:	62bb      	str	r3, [r7, #40]	; 0x28
    7c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7c5c:	151b      	asrs	r3, r3, #20
    7c5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
    7c62:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
    7c66:	627b      	str	r3, [r7, #36]	; 0x24
    7c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7c6a:	2b13      	cmp	r3, #19
    7c6c:	dc33      	bgt.n	7cd6 <round+0x96>
    7c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7c70:	2b00      	cmp	r3, #0
    7c72:	da10      	bge.n	7c96 <round+0x56>
    7c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7c76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    7c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    7c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7c7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    7c82:	d105      	bne.n	7c90 <round+0x50>
    7c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7c86:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
    7c8a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    7c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    7c90:	2300      	movs	r3, #0
    7c92:	62bb      	str	r3, [r7, #40]	; 0x28
    7c94:	e059      	b.n	7d4a <round+0x10a>
    7c96:	4a34      	ldr	r2, [pc, #208]	; (7d68 <round+0x128>)
    7c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7c9a:	fa42 f303 	asr.w	r3, r2, r3
    7c9e:	61bb      	str	r3, [r7, #24]
    7ca0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    7ca2:	69bb      	ldr	r3, [r7, #24]
    7ca4:	4013      	ands	r3, r2
    7ca6:	2b00      	cmp	r3, #0
    7ca8:	d105      	bne.n	7cb6 <round+0x76>
    7caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7cac:	2b00      	cmp	r3, #0
    7cae:	d102      	bne.n	7cb6 <round+0x76>
    7cb0:	e9d7 2300 	ldrd	r2, r3, [r7]
    7cb4:	e053      	b.n	7d5e <round+0x11e>
    7cb6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    7cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7cbc:	fa42 f303 	asr.w	r3, r2, r3
    7cc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    7cc2:	4413      	add	r3, r2
    7cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    7cc6:	69bb      	ldr	r3, [r7, #24]
    7cc8:	43da      	mvns	r2, r3
    7cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7ccc:	4013      	ands	r3, r2
    7cce:	62fb      	str	r3, [r7, #44]	; 0x2c
    7cd0:	2300      	movs	r3, #0
    7cd2:	62bb      	str	r3, [r7, #40]	; 0x28
    7cd4:	e039      	b.n	7d4a <round+0x10a>
    7cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7cd8:	2b33      	cmp	r3, #51	; 0x33
    7cda:	dd0f      	ble.n	7cfc <round+0xbc>
    7cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7cde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    7ce2:	d108      	bne.n	7cf6 <round+0xb6>
    7ce4:	e9d7 0100 	ldrd	r0, r1, [r7]
    7ce8:	4602      	mov	r2, r0
    7cea:	460b      	mov	r3, r1
    7cec:	f7f8 fa0e 	bl	10c <__adddf3>
    7cf0:	4602      	mov	r2, r0
    7cf2:	460b      	mov	r3, r1
    7cf4:	e033      	b.n	7d5e <round+0x11e>
    7cf6:	e9d7 2300 	ldrd	r2, r3, [r7]
    7cfa:	e030      	b.n	7d5e <round+0x11e>
    7cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7cfe:	3b14      	subs	r3, #20
    7d00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7d04:	fa22 f303 	lsr.w	r3, r2, r3
    7d08:	623b      	str	r3, [r7, #32]
    7d0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    7d0c:	6a3b      	ldr	r3, [r7, #32]
    7d0e:	4013      	ands	r3, r2
    7d10:	2b00      	cmp	r3, #0
    7d12:	d102      	bne.n	7d1a <round+0xda>
    7d14:	e9d7 2300 	ldrd	r2, r3, [r7]
    7d18:	e021      	b.n	7d5e <round+0x11e>
    7d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7d1c:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
    7d20:	2201      	movs	r2, #1
    7d22:	fa02 f303 	lsl.w	r3, r2, r3
    7d26:	461a      	mov	r2, r3
    7d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7d2a:	4413      	add	r3, r2
    7d2c:	61fb      	str	r3, [r7, #28]
    7d2e:	69fa      	ldr	r2, [r7, #28]
    7d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7d32:	429a      	cmp	r2, r3
    7d34:	d202      	bcs.n	7d3c <round+0xfc>
    7d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7d38:	3301      	adds	r3, #1
    7d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    7d3c:	69fb      	ldr	r3, [r7, #28]
    7d3e:	62bb      	str	r3, [r7, #40]	; 0x28
    7d40:	6a3b      	ldr	r3, [r7, #32]
    7d42:	43db      	mvns	r3, r3
    7d44:	6aba      	ldr	r2, [r7, #40]	; 0x28
    7d46:	4013      	ands	r3, r2
    7d48:	62bb      	str	r3, [r7, #40]	; 0x28
    7d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7d4c:	60fb      	str	r3, [r7, #12]
    7d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7d50:	60bb      	str	r3, [r7, #8]
    7d52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    7d56:	e9c7 2300 	strd	r2, r3, [r7]
    7d5a:	e9d7 2300 	ldrd	r2, r3, [r7]
    7d5e:	4610      	mov	r0, r2
    7d60:	4619      	mov	r1, r3
    7d62:	3730      	adds	r7, #48	; 0x30
    7d64:	46bd      	mov	sp, r7
    7d66:	bd80      	pop	{r7, pc}
    7d68:	000fffff 	.word	0x000fffff

00007d6c <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    7d6c:	4603      	mov	r3, r0
    7d6e:	b158      	cbz	r0, 7d88 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    7d70:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    7d72:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    7d76:	2a01      	cmp	r2, #1
    7d78:	d003      	beq.n	7d82 <sys_notify_validate+0x16>
    7d7a:	2a03      	cmp	r2, #3
    7d7c:	d104      	bne.n	7d88 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    7d7e:	6802      	ldr	r2, [r0, #0]
    7d80:	b112      	cbz	r2, 7d88 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    7d82:	2000      	movs	r0, #0
    7d84:	6098      	str	r0, [r3, #8]
    7d86:	4770      	bx	lr
		return -EINVAL;
    7d88:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    7d8c:	4770      	bx	lr

00007d8e <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    7d8e:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    7d90:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    7d92:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    7d96:	2a03      	cmp	r2, #3
    7d98:	f04f 0200 	mov.w	r2, #0
{
    7d9c:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    7d9e:	bf0c      	ite	eq
    7da0:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = 0;
    7da2:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    7da4:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    7da6:	4770      	bx	lr

00007da8 <arch_printk_char_out>:
}
    7da8:	2000      	movs	r0, #0
    7daa:	4770      	bx	lr

00007dac <str_out>:
{
    7dac:	b530      	push	{r4, r5, lr}
    7dae:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    7db0:	680c      	ldr	r4, [r1, #0]
    7db2:	1c55      	adds	r5, r2, #1
    7db4:	b114      	cbz	r4, 7dbc <str_out+0x10>
    7db6:	684b      	ldr	r3, [r1, #4]
    7db8:	4293      	cmp	r3, r2
    7dba:	dc01      	bgt.n	7dc0 <str_out+0x14>
		ctx->count++;
    7dbc:	608d      	str	r5, [r1, #8]
}
    7dbe:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
    7dc0:	3b01      	subs	r3, #1
    7dc2:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
    7dc4:	bf08      	it	eq
    7dc6:	2200      	moveq	r2, #0
    7dc8:	608d      	str	r5, [r1, #8]
    7dca:	bf0c      	ite	eq
    7dcc:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
    7dce:	54a0      	strbne	r0, [r4, r2]
    7dd0:	e7f5      	b.n	7dbe <str_out+0x12>

00007dd2 <printk>:
{
    7dd2:	b40f      	push	{r0, r1, r2, r3}
    7dd4:	b507      	push	{r0, r1, r2, lr}
    7dd6:	a904      	add	r1, sp, #16
    7dd8:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    7ddc:	9101      	str	r1, [sp, #4]
		log_printk(fmt, ap);
    7dde:	f000 f957 	bl	8090 <log_printk>
}
    7de2:	b003      	add	sp, #12
    7de4:	f85d eb04 	ldr.w	lr, [sp], #4
    7de8:	b004      	add	sp, #16
    7dea:	4770      	bx	lr

00007dec <snprintk>:
{
    7dec:	b40c      	push	{r2, r3}
    7dee:	b507      	push	{r0, r1, r2, lr}
    7df0:	ab04      	add	r3, sp, #16
    7df2:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    7df6:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    7df8:	f7f9 fe5e 	bl	1ab8 <vsnprintk>
}
    7dfc:	b003      	add	sp, #12
    7dfe:	f85d eb04 	ldr.w	lr, [sp], #4
    7e02:	b002      	add	sp, #8
    7e04:	4770      	bx	lr

00007e06 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    7e06:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    7e08:	f013 0307 	ands.w	r3, r3, #7
    7e0c:	d105      	bne.n	7e1a <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    7e0e:	6803      	ldr	r3, [r0, #0]
    7e10:	2b00      	cmp	r3, #0
		evt = EVT_START;
    7e12:	bf0c      	ite	eq
    7e14:	2000      	moveq	r0, #0
    7e16:	2003      	movne	r0, #3
    7e18:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    7e1a:	2b02      	cmp	r3, #2
    7e1c:	d105      	bne.n	7e2a <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    7e1e:	8b43      	ldrh	r3, [r0, #26]
    7e20:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
    7e22:	bf14      	ite	ne
    7e24:	2000      	movne	r0, #0
    7e26:	2004      	moveq	r0, #4
    7e28:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    7e2a:	2b01      	cmp	r3, #1
    7e2c:	d105      	bne.n	7e3a <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    7e2e:	6803      	ldr	r3, [r0, #0]
    7e30:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
    7e32:	bf0c      	ite	eq
    7e34:	2000      	moveq	r0, #0
    7e36:	2005      	movne	r0, #5
    7e38:	4770      	bx	lr
	int evt = EVT_NOP;
    7e3a:	2000      	movs	r0, #0
}
    7e3c:	4770      	bx	lr

00007e3e <notify_one>:
{
    7e3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7e42:	460d      	mov	r5, r1
    7e44:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    7e46:	4619      	mov	r1, r3
    7e48:	1d28      	adds	r0, r5, #4
{
    7e4a:	4690      	mov	r8, r2
    7e4c:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    7e4e:	f7ff ff9e 	bl	7d8e <sys_notify_finalize>
	if (cb) {
    7e52:	4604      	mov	r4, r0
    7e54:	b138      	cbz	r0, 7e66 <notify_one+0x28>
		cb(mgr, cli, state, res);
    7e56:	4633      	mov	r3, r6
    7e58:	4642      	mov	r2, r8
    7e5a:	4629      	mov	r1, r5
    7e5c:	4638      	mov	r0, r7
    7e5e:	46a4      	mov	ip, r4
}
    7e60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    7e64:	4760      	bx	ip
}
    7e66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007e6a <transition_complete>:
{
    7e6a:	b410      	push	{r4}
	__asm__ volatile(
    7e6c:	f04f 0420 	mov.w	r4, #32
    7e70:	f3ef 8211 	mrs	r2, BASEPRI
    7e74:	f384 8811 	msr	BASEPRI, r4
    7e78:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    7e7c:	6141      	str	r1, [r0, #20]
}
    7e7e:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    7e80:	2101      	movs	r1, #1
    7e82:	f7f9 be2d 	b.w	1ae0 <process_event>

00007e86 <validate_args>:
{
    7e86:	b510      	push	{r4, lr}
    7e88:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    7e8a:	b140      	cbz	r0, 7e9e <validate_args+0x18>
    7e8c:	b139      	cbz	r1, 7e9e <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    7e8e:	1d08      	adds	r0, r1, #4
    7e90:	f7ff ff6c 	bl	7d6c <sys_notify_validate>
	if ((rv == 0)
    7e94:	b928      	cbnz	r0, 7ea2 <validate_args+0x1c>
	    && ((cli->notify.flags
    7e96:	68a3      	ldr	r3, [r4, #8]
    7e98:	f033 0303 	bics.w	r3, r3, #3
    7e9c:	d001      	beq.n	7ea2 <validate_args+0x1c>
		rv = -EINVAL;
    7e9e:	f06f 0015 	mvn.w	r0, #21
}
    7ea2:	bd10      	pop	{r4, pc}

00007ea4 <onoff_manager_init>:
{
    7ea4:	b538      	push	{r3, r4, r5, lr}
    7ea6:	460c      	mov	r4, r1
	if ((mgr == NULL)
    7ea8:	4605      	mov	r5, r0
    7eaa:	b158      	cbz	r0, 7ec4 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    7eac:	b151      	cbz	r1, 7ec4 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    7eae:	680b      	ldr	r3, [r1, #0]
    7eb0:	b143      	cbz	r3, 7ec4 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    7eb2:	684b      	ldr	r3, [r1, #4]
    7eb4:	b133      	cbz	r3, 7ec4 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    7eb6:	221c      	movs	r2, #28
    7eb8:	2100      	movs	r1, #0
    7eba:	f001 f917 	bl	90ec <memset>
    7ebe:	612c      	str	r4, [r5, #16]
	return 0;
    7ec0:	2000      	movs	r0, #0
}
    7ec2:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    7ec4:	f06f 0015 	mvn.w	r0, #21
    7ec8:	e7fb      	b.n	7ec2 <onoff_manager_init+0x1e>

00007eca <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    7eca:	b570      	push	{r4, r5, r6, lr}
    7ecc:	4604      	mov	r4, r0
    7ece:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    7ed0:	f7ff ffd9 	bl	7e86 <validate_args>

	if (rv < 0) {
    7ed4:	1e05      	subs	r5, r0, #0
    7ed6:	db31      	blt.n	7f3c <onoff_request+0x72>
    7ed8:	f04f 0320 	mov.w	r3, #32
    7edc:	f3ef 8111 	mrs	r1, BASEPRI
    7ee0:	f383 8811 	msr	BASEPRI, r3
    7ee4:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    7ee8:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    7eea:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    7eec:	f64f 75ff 	movw	r5, #65535	; 0xffff
    7ef0:	42ab      	cmp	r3, r5
    7ef2:	f000 0207 	and.w	r2, r0, #7
    7ef6:	d02e      	beq.n	7f56 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    7ef8:	2a02      	cmp	r2, #2
    7efa:	d10e      	bne.n	7f1a <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    7efc:	3301      	adds	r3, #1
    7efe:	8363      	strh	r3, [r4, #26]
	rv = state;
    7f00:	4615      	mov	r5, r2
		notify = true;
    7f02:	2301      	movs	r3, #1
	__asm__ volatile(
    7f04:	f381 8811 	msr	BASEPRI, r1
    7f08:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    7f0c:	b1b3      	cbz	r3, 7f3c <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    7f0e:	2300      	movs	r3, #0
    7f10:	4631      	mov	r1, r6
    7f12:	4620      	mov	r0, r4
    7f14:	f7ff ff93 	bl	7e3e <notify_one>
    7f18:	e010      	b.n	7f3c <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    7f1a:	0783      	lsls	r3, r0, #30
    7f1c:	d001      	beq.n	7f22 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    7f1e:	2a06      	cmp	r2, #6
    7f20:	d10e      	bne.n	7f40 <onoff_request+0x76>
	parent->next = child;
    7f22:	2300      	movs	r3, #0
    7f24:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
    7f26:	6863      	ldr	r3, [r4, #4]
    7f28:	b993      	cbnz	r3, 7f50 <onoff_request+0x86>
	list->head = node;
    7f2a:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    7f2e:	4615      	mov	r5, r2
    7f30:	b962      	cbnz	r2, 7f4c <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    7f32:	460a      	mov	r2, r1
    7f34:	4620      	mov	r0, r4
    7f36:	2102      	movs	r1, #2
    7f38:	f7f9 fdd2 	bl	1ae0 <process_event>
		}
	}

	return rv;
}
    7f3c:	4628      	mov	r0, r5
    7f3e:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    7f40:	2a05      	cmp	r2, #5
    7f42:	bf0c      	ite	eq
    7f44:	f06f 0585 	mvneq.w	r5, #133	; 0x85
    7f48:	f06f 0504 	mvnne.w	r5, #4
    7f4c:	2300      	movs	r3, #0
    7f4e:	e7d9      	b.n	7f04 <onoff_request+0x3a>
	parent->next = child;
    7f50:	601e      	str	r6, [r3, #0]
	list->tail = node;
    7f52:	6066      	str	r6, [r4, #4]
}
    7f54:	e7eb      	b.n	7f2e <onoff_request+0x64>
		rv = -EAGAIN;
    7f56:	f06f 050a 	mvn.w	r5, #10
    7f5a:	e7f7      	b.n	7f4c <onoff_request+0x82>

00007f5c <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    7f5c:	4604      	mov	r4, r0
    7f5e:	b508      	push	{r3, lr}
    7f60:	4608      	mov	r0, r1
    7f62:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    7f64:	461a      	mov	r2, r3
    7f66:	47a0      	blx	r4
	return z_impl_k_current_get();
    7f68:	f7ff f96c 	bl	7244 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
    7f6c:	f7fb ffde 	bl	3f2c <z_impl_k_thread_abort>

00007f70 <outs>:
{
    7f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7f74:	4607      	mov	r7, r0
    7f76:	4688      	mov	r8, r1
    7f78:	4615      	mov	r5, r2
    7f7a:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    7f7c:	4614      	mov	r4, r2
    7f7e:	42b4      	cmp	r4, r6
    7f80:	eba4 0005 	sub.w	r0, r4, r5
    7f84:	d302      	bcc.n	7f8c <outs+0x1c>
    7f86:	b93e      	cbnz	r6, 7f98 <outs+0x28>
    7f88:	7823      	ldrb	r3, [r4, #0]
    7f8a:	b12b      	cbz	r3, 7f98 <outs+0x28>
		int rc = out((int)*sp++, ctx);
    7f8c:	f814 0b01 	ldrb.w	r0, [r4], #1
    7f90:	4641      	mov	r1, r8
    7f92:	47b8      	blx	r7
		if (rc < 0) {
    7f94:	2800      	cmp	r0, #0
    7f96:	daf2      	bge.n	7f7e <outs+0xe>
}
    7f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007f9c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    7f9c:	4770      	bx	lr

00007f9e <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
    7f9e:	2300      	movs	r3, #0
	list->head = NULL;
    7fa0:	e9c0 3300 	strd	r3, r3, [r0]
}
    7fa4:	4770      	bx	lr

00007fa6 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
    7fa6:	6803      	ldr	r3, [r0, #0]
    7fa8:	b923      	cbnz	r3, 7fb4 <log_list_add_tail+0xe>
		list->head = msg;
    7faa:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
    7fac:	2300      	movs	r3, #0
	list->tail = msg;
    7fae:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
    7fb0:	600b      	str	r3, [r1, #0]
}
    7fb2:	4770      	bx	lr
		list->tail->next = msg;
    7fb4:	6843      	ldr	r3, [r0, #4]
    7fb6:	6019      	str	r1, [r3, #0]
    7fb8:	e7f8      	b.n	7fac <log_list_add_tail+0x6>

00007fba <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
    7fba:	6800      	ldr	r0, [r0, #0]
    7fbc:	4770      	bx	lr

00007fbe <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
    7fbe:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
    7fc0:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
    7fc2:	b108      	cbz	r0, 7fc8 <log_list_head_get+0xa>
		list->head = list->head->next;
    7fc4:	6802      	ldr	r2, [r0, #0]
    7fc6:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
    7fc8:	4770      	bx	lr

00007fca <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
    7fca:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    7fcc:	f7fa fd50 	bl	2a70 <log_msg_chunk_alloc>

	if (msg != NULL) {
    7fd0:	b118      	cbz	r0, 7fda <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
    7fd2:	2301      	movs	r3, #1
    7fd4:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    7fd6:	2300      	movs	r3, #0
    7fd8:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
    7fda:	bd08      	pop	{r3, pc}

00007fdc <k_cycle_get_32_wrapper>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    7fdc:	f7fb bb34 	b.w	3648 <sys_clock_cycle_get_32>

00007fe0 <dummy_timestamp>:
    7fe0:	2000      	movs	r0, #0
    7fe2:	4770      	bx	lr

00007fe4 <log_0>:
{
    7fe4:	b538      	push	{r3, r4, r5, lr}
    7fe6:	4605      	mov	r5, r0
    7fe8:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
    7fea:	f7ff ffee 	bl	7fca <z_log_msg_std_alloc>

	if (msg != NULL) {
    7fee:	b128      	cbz	r0, 7ffc <log_0+0x18>
		msg->str = str;
    7ff0:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
    7ff2:	4621      	mov	r1, r4
}
    7ff4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
    7ff8:	f7fa bc54 	b.w	28a4 <msg_finalize>
}
    7ffc:	bd38      	pop	{r3, r4, r5, pc}

00007ffe <log_1>:
{
    7ffe:	b570      	push	{r4, r5, r6, lr}
    8000:	4606      	mov	r6, r0
    8002:	460d      	mov	r5, r1
    8004:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
    8006:	f7ff ffe0 	bl	7fca <z_log_msg_std_alloc>

	if (msg != NULL) {
    800a:	b158      	cbz	r0, 8024 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x24>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
    800c:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
    800e:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
    8010:	2101      	movs	r1, #1
    8012:	f361 1207 	bfi	r2, r1, #4, #4
    8016:	7242      	strb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
    8018:	6145      	str	r5, [r0, #20]
		msg_finalize(msg, src_level);
    801a:	4621      	mov	r1, r4
}
    801c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
    8020:	f7fa bc40 	b.w	28a4 <msg_finalize>
}
    8024:	bd70      	pop	{r4, r5, r6, pc}

00008026 <log_2>:
{
    8026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    802a:	4680      	mov	r8, r0
    802c:	460f      	mov	r7, r1
    802e:	4616      	mov	r6, r2
    8030:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
    8032:	f7ff ffca 	bl	7fca <z_log_msg_std_alloc>

	if (msg != NULL) {
    8036:	b168      	cbz	r0, 8054 <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
    8038:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
    803a:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
    803e:	2202      	movs	r2, #2
    8040:	f362 1307 	bfi	r3, r2, #4, #4
    8044:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
    8046:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg_finalize(msg, src_level);
    804a:	4629      	mov	r1, r5
}
    804c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
    8050:	f7fa bc28 	b.w	28a4 <msg_finalize>
}
    8054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008058 <log_3>:
{
    8058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    805c:	4680      	mov	r8, r0
    805e:	f8bd 9020 	ldrh.w	r9, [sp, #32]
    8062:	460f      	mov	r7, r1
    8064:	4616      	mov	r6, r2
    8066:	461d      	mov	r5, r3
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
    8068:	f7ff ffaf 	bl	7fca <z_log_msg_std_alloc>

	if (msg != NULL) {
    806c:	b170      	cbz	r0, 808c <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
    806e:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
    8070:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
    8074:	2203      	movs	r2, #3
    8076:	f362 1307 	bfi	r3, r2, #4, #4
    807a:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
    807c:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->payload.single.args[2] = arg3;
    8080:	61c5      	str	r5, [r0, #28]
		msg_finalize(msg, src_level);
    8082:	4649      	mov	r1, r9
}
    8084:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
    8088:	f7fa bc0c 	b.w	28a4 <msg_finalize>
}
    808c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00008090 <log_printk>:
{
    8090:	b500      	push	{lr}
    8092:	b0a3      	sub	sp, #140	; 0x8c
    8094:	4602      	mov	r2, r0
    8096:	460b      	mov	r3, r1
			length = vsnprintk(str, sizeof(str), fmt, ap);
    8098:	a801      	add	r0, sp, #4
    809a:	2181      	movs	r1, #129	; 0x81
    809c:	f7f9 fd0c 	bl	1ab8 <vsnprintk>
			msg = log_msg_hexdump_create(NULL, str, length);
    80a0:	2881      	cmp	r0, #129	; 0x81
    80a2:	4602      	mov	r2, r0
    80a4:	a901      	add	r1, sp, #4
    80a6:	bf28      	it	cs
    80a8:	2281      	movcs	r2, #129	; 0x81
    80aa:	2000      	movs	r0, #0
    80ac:	f000 f8a2 	bl	81f4 <log_msg_hexdump_create>
			if (msg == NULL) {
    80b0:	b118      	cbz	r0, 80ba <log_printk+0x2a>
			msg_finalize(msg, src_level_union.structure);
    80b2:	f04f 0100 	mov.w	r1, #0
    80b6:	f7fa fbf5 	bl	28a4 <msg_finalize>
}
    80ba:	b023      	add	sp, #140	; 0x8c
    80bc:	f85d fb04 	ldr.w	pc, [sp], #4

000080c0 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
    80c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    80c4:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
    80c6:	8903      	ldrh	r3, [r0, #8]
{
    80c8:	f89d 8020 	ldrb.w	r8, [sp, #32]
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
    80cc:	ebb4 0f93 	cmp.w	r4, r3, lsr #2
{
    80d0:	460e      	mov	r6, r1
    80d2:	4611      	mov	r1, r2
	uint32_t available_len = msg->hdr.params.hexdump.length;
    80d4:	ea4f 0293 	mov.w	r2, r3, lsr #2
	if (offset >= available_len) {
    80d8:	d303      	bcc.n	80e2 <log_msg_hexdump_data_op+0x22>
		*length = 0;
    80da:	2300      	movs	r3, #0
    80dc:	600b      	str	r3, [r1, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
    80de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
    80e2:	680b      	ldr	r3, [r1, #0]
    80e4:	4423      	add	r3, r4
    80e6:	4293      	cmp	r3, r2
		*length = available_len - offset;
    80e8:	bf84      	itt	hi
    80ea:	1b13      	subhi	r3, r2, r4
    80ec:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
    80ee:	2a0c      	cmp	r2, #12
	req_len = *length;
    80f0:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
    80f4:	d92b      	bls.n	814e <log_msg_hexdump_data_op+0x8e>
	if (offset < chunk_len) {
    80f6:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
    80f8:	6947      	ldr	r7, [r0, #20]
	if (offset < chunk_len) {
    80fa:	d82e      	bhi.n	815a <log_msg_hexdump_data_op+0x9a>
		head_data = msg->payload.ext.data.bytes;
    80fc:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
    80fe:	2208      	movs	r2, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
    8100:	454a      	cmp	r2, r9
    8102:	bf28      	it	cs
    8104:	464a      	movcs	r2, r9
    8106:	4615      	mov	r5, r2
		if (put_op) {
    8108:	4420      	add	r0, r4
    810a:	f1b8 0f00 	cmp.w	r8, #0
    810e:	d021      	beq.n	8154 <log_msg_hexdump_data_op+0x94>
    8110:	4631      	mov	r1, r6
    8112:	f000 ffdd 	bl	90d0 <memcpy>
		req_len -= cpy_len;
    8116:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
    811a:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
    811c:	f1b9 0f00 	cmp.w	r9, #0
    8120:	d0dd      	beq.n	80de <log_msg_hexdump_data_op+0x1e>
    8122:	2f00      	cmp	r7, #0
    8124:	d0db      	beq.n	80de <log_msg_hexdump_data_op+0x1e>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
    8126:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
    812a:	454d      	cmp	r5, r9
    812c:	bf28      	it	cs
    812e:	464d      	movcs	r5, r9
		if (put_op) {
    8130:	1d20      	adds	r0, r4, #4
    8132:	4438      	add	r0, r7
    8134:	462a      	mov	r2, r5
    8136:	f1b8 0f00 	cmp.w	r8, #0
    813a:	d014      	beq.n	8166 <log_msg_hexdump_data_op+0xa6>
    813c:	4631      	mov	r1, r6
    813e:	f000 ffc7 	bl	90d0 <memcpy>
		req_len -= cpy_len;
    8142:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
    8146:	683f      	ldr	r7, [r7, #0]
		data += cpy_len;
    8148:	442e      	add	r6, r5
		offset = 0;
    814a:	2400      	movs	r4, #0
    814c:	e7e6      	b.n	811c <log_msg_hexdump_data_op+0x5c>
		head_data = msg->payload.single.bytes;
    814e:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
    8150:	2700      	movs	r7, #0
    8152:	e7d5      	b.n	8100 <log_msg_hexdump_data_op+0x40>
    8154:	4601      	mov	r1, r0
    8156:	4630      	mov	r0, r6
    8158:	e7db      	b.n	8112 <log_msg_hexdump_data_op+0x52>
		offset -= chunk_len;
    815a:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
    815c:	2c1b      	cmp	r4, #27
    815e:	d9dd      	bls.n	811c <log_msg_hexdump_data_op+0x5c>
			cont = cont->next;
    8160:	683f      	ldr	r7, [r7, #0]
			offset -= chunk_len;
    8162:	3c1c      	subs	r4, #28
    8164:	e7fa      	b.n	815c <log_msg_hexdump_data_op+0x9c>
    8166:	4601      	mov	r1, r0
    8168:	4630      	mov	r0, r6
    816a:	e7e8      	b.n	813e <log_msg_hexdump_data_op+0x7e>

0000816c <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    816c:	3004      	adds	r0, #4
    816e:	f3bf 8f5b 	dmb	ish
    8172:	e850 3f00 	ldrex	r3, [r0]
    8176:	3301      	adds	r3, #1
    8178:	e840 3200 	strex	r2, r3, [r0]
    817c:	2a00      	cmp	r2, #0
    817e:	d1f8      	bne.n	8172 <log_msg_get+0x6>
    8180:	f3bf 8f5b 	dmb	ish
}
    8184:	4770      	bx	lr

00008186 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
    8186:	7a40      	ldrb	r0, [r0, #9]
}
    8188:	0900      	lsrs	r0, r0, #4
    818a:	4770      	bx	lr

0000818c <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
    818c:	7a43      	ldrb	r3, [r0, #9]
    818e:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
    8192:	ea4f 1213 	mov.w	r2, r3, lsr #4
    8196:	d216      	bcs.n	81c6 <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
    8198:	2a03      	cmp	r2, #3
    819a:	d803      	bhi.n	81a4 <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
    819c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    81a0:	6948      	ldr	r0, [r1, #20]
    81a2:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
    81a4:	2901      	cmp	r1, #1
    81a6:	d803      	bhi.n	81b0 <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
    81a8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    81ac:	6988      	ldr	r0, [r1, #24]
    81ae:	4770      	bx	lr
	cont = msg->payload.ext.next;
    81b0:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
    81b2:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
    81b4:	2906      	cmp	r1, #6
    81b6:	d803      	bhi.n	81c0 <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
    81b8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    81bc:	6848      	ldr	r0, [r1, #4]
    81be:	4770      	bx	lr
		cont = cont->next;
    81c0:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
    81c2:	3907      	subs	r1, #7
		cont = cont->next;
    81c4:	e7f6      	b.n	81b4 <log_msg_arg_get+0x28>
		return 0;
    81c6:	2000      	movs	r0, #0
}
    81c8:	4770      	bx	lr

000081ca <log_msg_put>:
{
    81ca:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    81cc:	1d02      	adds	r2, r0, #4
    81ce:	f3bf 8f5b 	dmb	ish
    81d2:	e852 1f00 	ldrex	r1, [r2]
    81d6:	3901      	subs	r1, #1
    81d8:	e842 1c00 	strex	ip, r1, [r2]
    81dc:	f1bc 0f00 	cmp.w	ip, #0
    81e0:	d1f7      	bne.n	81d2 <log_msg_put+0x8>
    81e2:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
    81e6:	685b      	ldr	r3, [r3, #4]
    81e8:	b90b      	cbnz	r3, 81ee <log_msg_put+0x24>
		msg_free(msg);
    81ea:	f7fa bc55 	b.w	2a98 <msg_free>
}
    81ee:	4770      	bx	lr

000081f0 <log_msg_str_get>:
}
    81f0:	6900      	ldr	r0, [r0, #16]
    81f2:	4770      	bx	lr

000081f4 <log_msg_hexdump_create>:
{
    81f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
    81f8:	f643 75ff 	movw	r5, #16383	; 0x3fff
    81fc:	4295      	cmp	r5, r2
{
    81fe:	4680      	mov	r8, r0
    8200:	460e      	mov	r6, r1
    8202:	4617      	mov	r7, r2
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
    8204:	bf28      	it	cs
    8206:	4615      	movcs	r5, r2
	msg = (struct log_msg *)log_msg_chunk_alloc();
    8208:	f7fa fc32 	bl	2a70 <log_msg_chunk_alloc>
	if (msg == NULL) {
    820c:	4604      	mov	r4, r0
    820e:	b378      	cbz	r0, 8270 <log_msg_hexdump_create+0x7c>
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
    8210:	8902      	ldrh	r2, [r0, #8]
	msg->str = str;
    8212:	f8c0 8010 	str.w	r8, [r0, #16]
	msg->hdr.ref_cnt = 1;
    8216:	2301      	movs	r3, #1
    8218:	6043      	str	r3, [r0, #4]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
    821a:	00ab      	lsls	r3, r5, #2
    821c:	f043 0301 	orr.w	r3, r3, #1
    8220:	f002 0202 	and.w	r2, r2, #2
    8224:	4313      	orrs	r3, r2
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
    8226:	2f0c      	cmp	r7, #12
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
    8228:	8103      	strh	r3, [r0, #8]
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
    822a:	f100 0814 	add.w	r8, r0, #20
    822e:	d916      	bls.n	825e <log_msg_hexdump_create+0x6a>
    8230:	6833      	ldr	r3, [r6, #0]
		msg->hdr.params.generic.ext = 1;
    8232:	7a02      	ldrb	r2, [r0, #8]
    8234:	6183      	str	r3, [r0, #24]
    8236:	6873      	ldr	r3, [r6, #4]
    8238:	61c3      	str	r3, [r0, #28]
    823a:	f042 0202 	orr.w	r2, r2, #2
		msg->payload.ext.next = NULL;
    823e:	2300      	movs	r3, #0
    8240:	6143      	str	r3, [r0, #20]
		msg->hdr.params.generic.ext = 1;
    8242:	7202      	strb	r2, [r0, #8]
		data += LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
    8244:	3608      	adds	r6, #8
		length -= LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
    8246:	3d08      	subs	r5, #8
	while (length > 0) {
    8248:	4699      	mov	r9, r3
    824a:	b18d      	cbz	r5, 8270 <log_msg_hexdump_create+0x7c>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
    824c:	f7fa fc10 	bl	2a70 <log_msg_chunk_alloc>
		if (cont == NULL) {
    8250:	4607      	mov	r7, r0
    8252:	b980      	cbnz	r0, 8276 <log_msg_hexdump_create+0x82>
			msg_free(msg);
    8254:	4620      	mov	r0, r4
    8256:	f7fa fc1f 	bl	2a98 <msg_free>
			return NULL;
    825a:	463c      	mov	r4, r7
    825c:	e008      	b.n	8270 <log_msg_hexdump_create+0x7c>
    825e:	462a      	mov	r2, r5
    8260:	4631      	mov	r1, r6
    8262:	4640      	mov	r0, r8
    8264:	f000 ff34 	bl	90d0 <memcpy>
		msg->hdr.params.generic.ext = 0;
    8268:	7a23      	ldrb	r3, [r4, #8]
    826a:	f36f 0341 	bfc	r3, #1, #1
    826e:	7223      	strb	r3, [r4, #8]
}
    8270:	4620      	mov	r0, r4
    8272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		chunk_length = (length > HEXDUMP_BYTES_CONT_MSG) ?
    8276:	2d1c      	cmp	r5, #28
    8278:	462f      	mov	r7, r5
    827a:	bf28      	it	cs
    827c:	271c      	movcs	r7, #28
		*prev_cont = cont;
    827e:	f8c8 0000 	str.w	r0, [r8]
    8282:	4631      	mov	r1, r6
		cont->next = NULL;
    8284:	f8c0 9000 	str.w	r9, [r0]
		prev_cont = &cont->next;
    8288:	4680      	mov	r8, r0
    828a:	463a      	mov	r2, r7
    828c:	3004      	adds	r0, #4
    828e:	f000 ff1f 	bl	90d0 <memcpy>
		data += chunk_length;
    8292:	443e      	add	r6, r7
		length -= chunk_length;
    8294:	1bed      	subs	r5, r5, r7
    8296:	e7d8      	b.n	824a <log_msg_hexdump_create+0x56>

00008298 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
    8298:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
    829a:	2400      	movs	r4, #0
    829c:	9400      	str	r4, [sp, #0]
    829e:	f7ff ff0f 	bl	80c0 <log_msg_hexdump_data_op>
}
    82a2:	b002      	add	sp, #8
    82a4:	bd10      	pop	{r4, pc}

000082a6 <buffer_write>:
{
    82a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    82a8:	4606      	mov	r6, r0
    82aa:	460d      	mov	r5, r1
    82ac:	4614      	mov	r4, r2
    82ae:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    82b0:	4621      	mov	r1, r4
    82b2:	4628      	mov	r0, r5
    82b4:	463a      	mov	r2, r7
    82b6:	47b0      	blx	r6
	} while (len != 0);
    82b8:	1a24      	subs	r4, r4, r0
		buf += processed;
    82ba:	4405      	add	r5, r0
	} while (len != 0);
    82bc:	d1f8      	bne.n	82b0 <buffer_write+0xa>
}
    82be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000082c0 <std_print>:
{
    82c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    82c4:	b08e      	sub	sp, #56	; 0x38
    82c6:	af0e      	add	r7, sp, #56	; 0x38
    82c8:	4680      	mov	r8, r0
    82ca:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
    82cc:	f7ff ff90 	bl	81f0 <log_msg_str_get>
    82d0:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
    82d2:	4640      	mov	r0, r8
    82d4:	f7ff ff57 	bl	8186 <log_msg_nargs_get>
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
    82d8:	0083      	lsls	r3, r0, #2
    82da:	3307      	adds	r3, #7
    82dc:	f023 0307 	bic.w	r3, r3, #7
    82e0:	ebad 0d03 	sub.w	sp, sp, r3
	uint32_t nargs = log_msg_nargs_get(msg);
    82e4:	4682      	mov	sl, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
    82e6:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
    82e8:	f04f 0900 	mov.w	r9, #0
    82ec:	45d1      	cmp	r9, sl
    82ee:	d116      	bne.n	831e <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
    82f0:	4640      	mov	r0, r8
    82f2:	f7ff ff48 	bl	8186 <log_msg_nargs_get>
    82f6:	280f      	cmp	r0, #15
    82f8:	d81e      	bhi.n	8338 <std_print+0x78>
    82fa:	e8df f010 	tbh	[pc, r0, lsl #1]
    82fe:	0019      	.short	0x0019
    8300:	00260020 	.word	0x00260020
    8304:	0036002d 	.word	0x0036002d
    8308:	004e0041 	.word	0x004e0041
    830c:	006e005d 	.word	0x006e005d
    8310:	00960081 	.word	0x00960081
    8314:	00c600ad 	.word	0x00c600ad
    8318:	00fe00e1 	.word	0x00fe00e1
    831c:	011d      	.short	0x011d
		args[i] = log_msg_arg_get(msg, i);
    831e:	4649      	mov	r1, r9
    8320:	4640      	mov	r0, r8
    8322:	f7ff ff33 	bl	818c <log_msg_arg_get>
    8326:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
    832a:	f109 0901 	add.w	r9, r9, #1
    832e:	e7dd      	b.n	82ec <std_print+0x2c>
		print_formatted(output, str);
    8330:	4631      	mov	r1, r6
    8332:	4628      	mov	r0, r5
    8334:	f7fa fbee 	bl	2b14 <print_formatted>
}
    8338:	46bd      	mov	sp, r7
    833a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
    833e:	6822      	ldr	r2, [r4, #0]
    8340:	4631      	mov	r1, r6
    8342:	4628      	mov	r0, r5
    8344:	f7fa fbe6 	bl	2b14 <print_formatted>
		break;
    8348:	e7f6      	b.n	8338 <std_print+0x78>
		print_formatted(output, str, args[0], args[1]);
    834a:	e9d4 2300 	ldrd	r2, r3, [r4]
    834e:	4631      	mov	r1, r6
    8350:	4628      	mov	r0, r5
    8352:	f7fa fbdf 	bl	2b14 <print_formatted>
		break;
    8356:	e7ef      	b.n	8338 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2]);
    8358:	68a3      	ldr	r3, [r4, #8]
    835a:	9300      	str	r3, [sp, #0]
    835c:	e9d4 2300 	ldrd	r2, r3, [r4]
    8360:	4631      	mov	r1, r6
    8362:	4628      	mov	r0, r5
    8364:	f7fa fbd6 	bl	2b14 <print_formatted>
		break;
    8368:	e7e6      	b.n	8338 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
    836a:	68e3      	ldr	r3, [r4, #12]
    836c:	9301      	str	r3, [sp, #4]
    836e:	68a3      	ldr	r3, [r4, #8]
    8370:	9300      	str	r3, [sp, #0]
    8372:	e9d4 2300 	ldrd	r2, r3, [r4]
    8376:	4631      	mov	r1, r6
    8378:	4628      	mov	r0, r5
    837a:	f7fa fbcb 	bl	2b14 <print_formatted>
		break;
    837e:	e7db      	b.n	8338 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
    8380:	6923      	ldr	r3, [r4, #16]
    8382:	9302      	str	r3, [sp, #8]
    8384:	68e3      	ldr	r3, [r4, #12]
    8386:	9301      	str	r3, [sp, #4]
    8388:	68a3      	ldr	r3, [r4, #8]
    838a:	9300      	str	r3, [sp, #0]
    838c:	e9d4 2300 	ldrd	r2, r3, [r4]
    8390:	4631      	mov	r1, r6
    8392:	4628      	mov	r0, r5
    8394:	f7fa fbbe 	bl	2b14 <print_formatted>
		break;
    8398:	e7ce      	b.n	8338 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
    839a:	6963      	ldr	r3, [r4, #20]
    839c:	9303      	str	r3, [sp, #12]
    839e:	6923      	ldr	r3, [r4, #16]
    83a0:	9302      	str	r3, [sp, #8]
    83a2:	68e3      	ldr	r3, [r4, #12]
    83a4:	9301      	str	r3, [sp, #4]
    83a6:	68a3      	ldr	r3, [r4, #8]
    83a8:	9300      	str	r3, [sp, #0]
    83aa:	e9d4 2300 	ldrd	r2, r3, [r4]
    83ae:	4631      	mov	r1, r6
    83b0:	4628      	mov	r0, r5
    83b2:	f7fa fbaf 	bl	2b14 <print_formatted>
		break;
    83b6:	e7bf      	b.n	8338 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
    83b8:	69a3      	ldr	r3, [r4, #24]
    83ba:	9304      	str	r3, [sp, #16]
    83bc:	6963      	ldr	r3, [r4, #20]
    83be:	9303      	str	r3, [sp, #12]
    83c0:	6923      	ldr	r3, [r4, #16]
    83c2:	9302      	str	r3, [sp, #8]
    83c4:	68e3      	ldr	r3, [r4, #12]
    83c6:	9301      	str	r3, [sp, #4]
    83c8:	68a3      	ldr	r3, [r4, #8]
    83ca:	9300      	str	r3, [sp, #0]
    83cc:	e9d4 2300 	ldrd	r2, r3, [r4]
    83d0:	4631      	mov	r1, r6
    83d2:	4628      	mov	r0, r5
    83d4:	f7fa fb9e 	bl	2b14 <print_formatted>
		break;
    83d8:	e7ae      	b.n	8338 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
    83da:	69e3      	ldr	r3, [r4, #28]
    83dc:	9305      	str	r3, [sp, #20]
    83de:	69a3      	ldr	r3, [r4, #24]
    83e0:	9304      	str	r3, [sp, #16]
    83e2:	6963      	ldr	r3, [r4, #20]
    83e4:	9303      	str	r3, [sp, #12]
    83e6:	6923      	ldr	r3, [r4, #16]
    83e8:	9302      	str	r3, [sp, #8]
    83ea:	68e3      	ldr	r3, [r4, #12]
    83ec:	9301      	str	r3, [sp, #4]
    83ee:	68a3      	ldr	r3, [r4, #8]
    83f0:	9300      	str	r3, [sp, #0]
    83f2:	e9d4 2300 	ldrd	r2, r3, [r4]
    83f6:	4631      	mov	r1, r6
    83f8:	4628      	mov	r0, r5
    83fa:	f7fa fb8b 	bl	2b14 <print_formatted>
		break;
    83fe:	e79b      	b.n	8338 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
    8400:	6a23      	ldr	r3, [r4, #32]
    8402:	9306      	str	r3, [sp, #24]
    8404:	69e3      	ldr	r3, [r4, #28]
    8406:	9305      	str	r3, [sp, #20]
    8408:	69a3      	ldr	r3, [r4, #24]
    840a:	9304      	str	r3, [sp, #16]
    840c:	6963      	ldr	r3, [r4, #20]
    840e:	9303      	str	r3, [sp, #12]
    8410:	6923      	ldr	r3, [r4, #16]
    8412:	9302      	str	r3, [sp, #8]
    8414:	68e3      	ldr	r3, [r4, #12]
    8416:	9301      	str	r3, [sp, #4]
    8418:	68a3      	ldr	r3, [r4, #8]
    841a:	9300      	str	r3, [sp, #0]
    841c:	e9d4 2300 	ldrd	r2, r3, [r4]
    8420:	4631      	mov	r1, r6
    8422:	4628      	mov	r0, r5
    8424:	f7fa fb76 	bl	2b14 <print_formatted>
		break;
    8428:	e786      	b.n	8338 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
    842a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    842c:	9307      	str	r3, [sp, #28]
    842e:	6a23      	ldr	r3, [r4, #32]
    8430:	9306      	str	r3, [sp, #24]
    8432:	69e3      	ldr	r3, [r4, #28]
    8434:	9305      	str	r3, [sp, #20]
    8436:	69a3      	ldr	r3, [r4, #24]
    8438:	9304      	str	r3, [sp, #16]
    843a:	6963      	ldr	r3, [r4, #20]
    843c:	9303      	str	r3, [sp, #12]
    843e:	6923      	ldr	r3, [r4, #16]
    8440:	9302      	str	r3, [sp, #8]
    8442:	68e3      	ldr	r3, [r4, #12]
    8444:	9301      	str	r3, [sp, #4]
    8446:	68a3      	ldr	r3, [r4, #8]
    8448:	9300      	str	r3, [sp, #0]
    844a:	e9d4 2300 	ldrd	r2, r3, [r4]
    844e:	4631      	mov	r1, r6
    8450:	4628      	mov	r0, r5
    8452:	f7fa fb5f 	bl	2b14 <print_formatted>
		break;
    8456:	e76f      	b.n	8338 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
    8458:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    845a:	9308      	str	r3, [sp, #32]
    845c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    845e:	9307      	str	r3, [sp, #28]
    8460:	6a23      	ldr	r3, [r4, #32]
    8462:	9306      	str	r3, [sp, #24]
    8464:	69e3      	ldr	r3, [r4, #28]
    8466:	9305      	str	r3, [sp, #20]
    8468:	69a3      	ldr	r3, [r4, #24]
    846a:	9304      	str	r3, [sp, #16]
    846c:	6963      	ldr	r3, [r4, #20]
    846e:	9303      	str	r3, [sp, #12]
    8470:	6923      	ldr	r3, [r4, #16]
    8472:	9302      	str	r3, [sp, #8]
    8474:	68e3      	ldr	r3, [r4, #12]
    8476:	9301      	str	r3, [sp, #4]
    8478:	68a3      	ldr	r3, [r4, #8]
    847a:	9300      	str	r3, [sp, #0]
    847c:	e9d4 2300 	ldrd	r2, r3, [r4]
    8480:	4631      	mov	r1, r6
    8482:	4628      	mov	r0, r5
    8484:	f7fa fb46 	bl	2b14 <print_formatted>
		break;
    8488:	e756      	b.n	8338 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
    848a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    848c:	9309      	str	r3, [sp, #36]	; 0x24
    848e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    8490:	9308      	str	r3, [sp, #32]
    8492:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8494:	9307      	str	r3, [sp, #28]
    8496:	6a23      	ldr	r3, [r4, #32]
    8498:	9306      	str	r3, [sp, #24]
    849a:	69e3      	ldr	r3, [r4, #28]
    849c:	9305      	str	r3, [sp, #20]
    849e:	69a3      	ldr	r3, [r4, #24]
    84a0:	9304      	str	r3, [sp, #16]
    84a2:	6963      	ldr	r3, [r4, #20]
    84a4:	9303      	str	r3, [sp, #12]
    84a6:	6923      	ldr	r3, [r4, #16]
    84a8:	9302      	str	r3, [sp, #8]
    84aa:	68e3      	ldr	r3, [r4, #12]
    84ac:	9301      	str	r3, [sp, #4]
    84ae:	68a3      	ldr	r3, [r4, #8]
    84b0:	9300      	str	r3, [sp, #0]
    84b2:	e9d4 2300 	ldrd	r2, r3, [r4]
    84b6:	4631      	mov	r1, r6
    84b8:	4628      	mov	r0, r5
    84ba:	f7fa fb2b 	bl	2b14 <print_formatted>
		break;
    84be:	e73b      	b.n	8338 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
    84c0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    84c2:	930a      	str	r3, [sp, #40]	; 0x28
    84c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    84c6:	9309      	str	r3, [sp, #36]	; 0x24
    84c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    84ca:	9308      	str	r3, [sp, #32]
    84cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    84ce:	9307      	str	r3, [sp, #28]
    84d0:	6a23      	ldr	r3, [r4, #32]
    84d2:	9306      	str	r3, [sp, #24]
    84d4:	69e3      	ldr	r3, [r4, #28]
    84d6:	9305      	str	r3, [sp, #20]
    84d8:	69a3      	ldr	r3, [r4, #24]
    84da:	9304      	str	r3, [sp, #16]
    84dc:	6963      	ldr	r3, [r4, #20]
    84de:	9303      	str	r3, [sp, #12]
    84e0:	6923      	ldr	r3, [r4, #16]
    84e2:	9302      	str	r3, [sp, #8]
    84e4:	68e3      	ldr	r3, [r4, #12]
    84e6:	9301      	str	r3, [sp, #4]
    84e8:	68a3      	ldr	r3, [r4, #8]
    84ea:	9300      	str	r3, [sp, #0]
    84ec:	e9d4 2300 	ldrd	r2, r3, [r4]
    84f0:	4631      	mov	r1, r6
    84f2:	4628      	mov	r0, r5
    84f4:	f7fa fb0e 	bl	2b14 <print_formatted>
		break;
    84f8:	e71e      	b.n	8338 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
    84fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
    84fc:	930b      	str	r3, [sp, #44]	; 0x2c
    84fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
    8500:	930a      	str	r3, [sp, #40]	; 0x28
    8502:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    8504:	9309      	str	r3, [sp, #36]	; 0x24
    8506:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    8508:	9308      	str	r3, [sp, #32]
    850a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    850c:	9307      	str	r3, [sp, #28]
    850e:	6a23      	ldr	r3, [r4, #32]
    8510:	9306      	str	r3, [sp, #24]
    8512:	69e3      	ldr	r3, [r4, #28]
    8514:	9305      	str	r3, [sp, #20]
    8516:	69a3      	ldr	r3, [r4, #24]
    8518:	9304      	str	r3, [sp, #16]
    851a:	6963      	ldr	r3, [r4, #20]
    851c:	9303      	str	r3, [sp, #12]
    851e:	6923      	ldr	r3, [r4, #16]
    8520:	9302      	str	r3, [sp, #8]
    8522:	68e3      	ldr	r3, [r4, #12]
    8524:	9301      	str	r3, [sp, #4]
    8526:	68a3      	ldr	r3, [r4, #8]
    8528:	9300      	str	r3, [sp, #0]
    852a:	e9d4 2300 	ldrd	r2, r3, [r4]
    852e:	4631      	mov	r1, r6
    8530:	4628      	mov	r0, r5
    8532:	f7fa faef 	bl	2b14 <print_formatted>
		break;
    8536:	e6ff      	b.n	8338 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
    8538:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    853a:	930c      	str	r3, [sp, #48]	; 0x30
    853c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    853e:	930b      	str	r3, [sp, #44]	; 0x2c
    8540:	6b23      	ldr	r3, [r4, #48]	; 0x30
    8542:	930a      	str	r3, [sp, #40]	; 0x28
    8544:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    8546:	9309      	str	r3, [sp, #36]	; 0x24
    8548:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    854a:	9308      	str	r3, [sp, #32]
    854c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    854e:	9307      	str	r3, [sp, #28]
    8550:	6a23      	ldr	r3, [r4, #32]
    8552:	9306      	str	r3, [sp, #24]
    8554:	69e3      	ldr	r3, [r4, #28]
    8556:	9305      	str	r3, [sp, #20]
    8558:	69a3      	ldr	r3, [r4, #24]
    855a:	9304      	str	r3, [sp, #16]
    855c:	6963      	ldr	r3, [r4, #20]
    855e:	9303      	str	r3, [sp, #12]
    8560:	6923      	ldr	r3, [r4, #16]
    8562:	9302      	str	r3, [sp, #8]
    8564:	68e3      	ldr	r3, [r4, #12]
    8566:	9301      	str	r3, [sp, #4]
    8568:	68a3      	ldr	r3, [r4, #8]
    856a:	9300      	str	r3, [sp, #0]
    856c:	e9d4 2300 	ldrd	r2, r3, [r4]
    8570:	4631      	mov	r1, r6
    8572:	4628      	mov	r0, r5
    8574:	f7fa face 	bl	2b14 <print_formatted>
}
    8578:	e6de      	b.n	8338 <std_print+0x78>

0000857a <log_output_flush>:
		     output->control_block->offset,
    857a:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    857c:	6881      	ldr	r1, [r0, #8]
{
    857e:	b510      	push	{r4, lr}
    8580:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
    8582:	e9d2 2300 	ldrd	r2, r3, [r2]
    8586:	6800      	ldr	r0, [r0, #0]
    8588:	f7ff fe8d 	bl	82a6 <buffer_write>
	output->control_block->offset = 0;
    858c:	6863      	ldr	r3, [r4, #4]
    858e:	2200      	movs	r2, #0
    8590:	601a      	str	r2, [r3, #0]
}
    8592:	bd10      	pop	{r4, pc}

00008594 <out_func>:
{
    8594:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
    8596:	684b      	ldr	r3, [r1, #4]
    8598:	681a      	ldr	r2, [r3, #0]
    859a:	68cb      	ldr	r3, [r1, #12]
    859c:	429a      	cmp	r2, r3
{
    859e:	4605      	mov	r5, r0
    85a0:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    85a2:	d102      	bne.n	85aa <out_func+0x16>
		log_output_flush(out_ctx);
    85a4:	4608      	mov	r0, r1
    85a6:	f7ff ffe8 	bl	857a <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    85aa:	6863      	ldr	r3, [r4, #4]
    85ac:	f3bf 8f5b 	dmb	ish
    85b0:	e853 2f00 	ldrex	r2, [r3]
    85b4:	1c51      	adds	r1, r2, #1
    85b6:	e843 1000 	strex	r0, r1, [r3]
    85ba:	2800      	cmp	r0, #0
    85bc:	d1f8      	bne.n	85b0 <out_func+0x1c>
    85be:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
    85c2:	68a3      	ldr	r3, [r4, #8]
    85c4:	549d      	strb	r5, [r3, r2]
}
    85c6:	2000      	movs	r0, #0
    85c8:	bd38      	pop	{r3, r4, r5, pc}

000085ca <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    85ca:	2200      	movs	r2, #0
    85cc:	8002      	strh	r2, [r0, #0]
    85ce:	6042      	str	r2, [r0, #4]
}
    85d0:	4770      	bx	lr

000085d2 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    85d2:	6902      	ldr	r2, [r0, #16]
    85d4:	b2cb      	uxtb	r3, r1
    85d6:	210c      	movs	r1, #12
    85d8:	fb03 2101 	mla	r1, r3, r1, r2
    85dc:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
    85de:	f000 0007 	and.w	r0, r0, #7
    85e2:	4770      	bx	lr

000085e4 <set_off_state>:
	__asm__ volatile(
    85e4:	f04f 0320 	mov.w	r3, #32
    85e8:	f3ef 8211 	mrs	r2, BASEPRI
    85ec:	f383 8811 	msr	BASEPRI, r3
    85f0:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    85f4:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    85f6:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    85fa:	d001      	beq.n	8600 <set_off_state+0x1c>
    85fc:	428b      	cmp	r3, r1
    85fe:	d107      	bne.n	8610 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    8600:	2301      	movs	r3, #1
    8602:	6003      	str	r3, [r0, #0]
	int err = 0;
    8604:	2000      	movs	r0, #0
	__asm__ volatile(
    8606:	f382 8811 	msr	BASEPRI, r2
    860a:	f3bf 8f6f 	isb	sy
}
    860e:	4770      	bx	lr
		err = -EPERM;
    8610:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8614:	e7f7      	b.n	8606 <set_off_state+0x22>

00008616 <set_starting_state>:
{
    8616:	b510      	push	{r4, lr}
	__asm__ volatile(
    8618:	f04f 0320 	mov.w	r3, #32
    861c:	f3ef 8211 	mrs	r2, BASEPRI
    8620:	f383 8811 	msr	BASEPRI, r3
    8624:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    8628:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    862a:	f003 0407 	and.w	r4, r3, #7
    862e:	2c01      	cmp	r4, #1
    8630:	d106      	bne.n	8640 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    8632:	6001      	str	r1, [r0, #0]
	int err = 0;
    8634:	2000      	movs	r0, #0
	__asm__ volatile(
    8636:	f382 8811 	msr	BASEPRI, r2
    863a:	f3bf 8f6f 	isb	sy
}
    863e:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    8640:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
    8644:	428b      	cmp	r3, r1
		err = -EALREADY;
    8646:	bf14      	ite	ne
    8648:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    864c:	f06f 0077 	mvneq.w	r0, #119	; 0x77
    8650:	e7f1      	b.n	8636 <set_starting_state+0x20>

00008652 <set_on_state>:
	__asm__ volatile(
    8652:	f04f 0320 	mov.w	r3, #32
    8656:	f3ef 8211 	mrs	r2, BASEPRI
    865a:	f383 8811 	msr	BASEPRI, r3
    865e:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    8662:	6803      	ldr	r3, [r0, #0]
    8664:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    8668:	f043 0302 	orr.w	r3, r3, #2
    866c:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    866e:	f382 8811 	msr	BASEPRI, r2
    8672:	f3bf 8f6f 	isb	sy
}
    8676:	4770      	bx	lr

00008678 <onoff_started_callback>:
	return &data->mgr[type];
    8678:	6900      	ldr	r0, [r0, #16]
{
    867a:	b410      	push	{r4}
	return &data->mgr[type];
    867c:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    867e:	241c      	movs	r4, #28
    8680:	fb03 0004 	mla	r0, r3, r4, r0
    8684:	2100      	movs	r1, #0
}
    8686:	bc10      	pop	{r4}
	notify(mgr, 0);
    8688:	4710      	bx	r2

0000868a <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    868a:	2000      	movs	r0, #0
    868c:	f7fd bdc0 	b.w	6210 <nrfx_clock_start>

00008690 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    8690:	2000      	movs	r0, #0
    8692:	f7fd bdef 	b.w	6274 <nrfx_clock_stop>

00008696 <blocking_start_callback>:
{
    8696:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    8698:	f7fe be4e 	b.w	7338 <z_impl_k_sem_give>

0000869c <api_stop>:
{
    869c:	b538      	push	{r3, r4, r5, lr}
    869e:	b2c9      	uxtb	r1, r1
	err = set_off_state(&subdata->flags, ctx);
    86a0:	240c      	movs	r4, #12
    86a2:	434c      	muls	r4, r1
{
    86a4:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
    86a6:	6900      	ldr	r0, [r0, #16]
    86a8:	f104 0340 	add.w	r3, r4, #64	; 0x40
    86ac:	2180      	movs	r1, #128	; 0x80
    86ae:	4418      	add	r0, r3
    86b0:	f7ff ff98 	bl	85e4 <set_off_state>
	if (err < 0) {
    86b4:	2800      	cmp	r0, #0
    86b6:	db04      	blt.n	86c2 <api_stop+0x26>
	get_sub_config(dev, type)->stop();
    86b8:	6869      	ldr	r1, [r5, #4]
    86ba:	440c      	add	r4, r1
    86bc:	6863      	ldr	r3, [r4, #4]
    86be:	4798      	blx	r3
	return 0;
    86c0:	2000      	movs	r0, #0
}
    86c2:	bd38      	pop	{r3, r4, r5, pc}

000086c4 <api_start>:
{
    86c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    86c8:	b2c9      	uxtb	r1, r1
	err = set_starting_state(&subdata->flags, ctx);
    86ca:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    86cc:	6905      	ldr	r5, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
    86ce:	434c      	muls	r4, r1
{
    86d0:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    86d2:	f104 0040 	add.w	r0, r4, #64	; 0x40
    86d6:	2180      	movs	r1, #128	; 0x80
    86d8:	4428      	add	r0, r5
{
    86da:	4690      	mov	r8, r2
    86dc:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
    86de:	f7ff ff9a 	bl	8616 <set_starting_state>
	if (err < 0) {
    86e2:	2800      	cmp	r0, #0
    86e4:	db06      	blt.n	86f4 <api_start+0x30>
	subdata->cb = cb;
    86e6:	4425      	add	r5, r4
	subdata->user_data = user_data;
    86e8:	e9c5 870e 	strd	r8, r7, [r5, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    86ec:	6873      	ldr	r3, [r6, #4]
    86ee:	591b      	ldr	r3, [r3, r4]
    86f0:	4798      	blx	r3
	return 0;
    86f2:	2000      	movs	r0, #0
}
    86f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000086f8 <sys_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    86f8:	4770      	bx	lr

000086fa <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    86fa:	4770      	bx	lr

000086fc <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
    86fc:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
    86fe:	68c1      	ldr	r1, [r0, #12]
  if (RdOff <= WrOff) {
    8700:	428b      	cmp	r3, r1
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    8702:	bf9d      	ittte	ls
    8704:	6882      	ldrls	r2, [r0, #8]
    8706:	18d2      	addls	r2, r2, r3
    8708:	f102 32ff 	addls.w	r2, r2, #4294967295	; 0xffffffff
    r = RdOff - WrOff - 1u;
    870c:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    8710:	bf94      	ite	ls
    8712:	1a50      	subls	r0, r2, r1
    r = RdOff - WrOff - 1u;
    8714:	1a58      	subhi	r0, r3, r1
}
    8716:	4770      	bx	lr

00008718 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    8718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
    871c:	e9d0 9402 	ldrd	r9, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    8720:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
    8722:	eba9 0804 	sub.w	r8, r9, r4
    8726:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
    8728:	4590      	cmp	r8, r2
    872a:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    872c:	460f      	mov	r7, r1
  if (Rem > NumBytes) {
    872e:	4414      	add	r4, r2
    8730:	d904      	bls.n	873c <_WriteNoCheck+0x24>
    8732:	f000 fccd 	bl	90d0 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
    8736:	60ec      	str	r4, [r5, #12]
}
    8738:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    873c:	4642      	mov	r2, r8
    NumBytesAtOnce = NumBytes - Rem;
    873e:	eba4 0409 	sub.w	r4, r4, r9
    8742:	f000 fcc5 	bl	90d0 <memcpy>
    8746:	6868      	ldr	r0, [r5, #4]
    8748:	4622      	mov	r2, r4
    874a:	eb07 0108 	add.w	r1, r7, r8
    874e:	e7f0      	b.n	8732 <_WriteNoCheck+0x1a>

00008750 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    8750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
    8754:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    8756:	4606      	mov	r6, r0
    8758:	4689      	mov	r9, r1
    875a:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
    875c:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    8760:	6934      	ldr	r4, [r6, #16]
    if (RdOff > WrOff) {
    8762:	68b3      	ldr	r3, [r6, #8]
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
    8764:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
    8766:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    8768:	bf28      	it	cs
    876a:	18e4      	addcs	r4, r4, r3
    876c:	3c01      	subs	r4, #1
    876e:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    8770:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    8772:	42bc      	cmp	r4, r7
    8774:	bf28      	it	cs
    8776:	463c      	movcs	r4, r7
    8778:	4294      	cmp	r4, r2
    877a:	bf28      	it	cs
    877c:	4614      	movcs	r4, r2
    877e:	4649      	mov	r1, r9
    8780:	4428      	add	r0, r5
    8782:	4622      	mov	r2, r4
    8784:	f000 fca4 	bl	90d0 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
    8788:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
    878a:	4425      	add	r5, r4
      WrOff = 0u;
    878c:	42ab      	cmp	r3, r5
    878e:	bf08      	it	eq
    8790:	2500      	moveq	r5, #0
  } while (NumBytes);
    8792:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
    8794:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
    8796:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
    8798:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
    879a:	d1e1      	bne.n	8760 <_WriteBlocking+0x10>
}
    879c:	4640      	mov	r0, r8
    879e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000087a2 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    87a2:	f7fa bf6b 	b.w	367c <_DoInit>

000087a6 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    87a6:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    87a8:	f7ff fffb 	bl	87a2 <SEGGER_RTT_Init>

	return 0;
}
    87ac:	2000      	movs	r0, #0
    87ae:	bd08      	pop	{r3, pc}

000087b0 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    87b0:	2100      	movs	r1, #0
    87b2:	2001      	movs	r0, #1
    87b4:	f7fb b8f2 	b.w	399c <z_arm_fatal_error>

000087b8 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    87b8:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    87ba:	6800      	ldr	r0, [r0, #0]
    87bc:	f7fb b8ee 	b.w	399c <z_arm_fatal_error>

000087c0 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    87c0:	b508      	push	{r3, lr}
	handler();
    87c2:	f7fb f923 	bl	3a0c <z_SysNmiOnReset>
	z_arm_int_exit();
}
    87c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    87ca:	f7fb bb95 	b.w	3ef8 <z_arm_exc_exit>

000087ce <_stdout_hook_default>:
}
    87ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    87d2:	4770      	bx	lr

000087d4 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
    87d4:	f7fd bc3c 	b.w	6050 <SystemInit>

000087d8 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
void pm_power_state_set(struct pm_state_info info)
{
    87d8:	b082      	sub	sp, #8
    87da:	ab02      	add	r3, sp, #8
    87dc:	e903 0003 	stmdb	r3, {r0, r1}
	switch (info.state) {
    87e0:	f89d 3000 	ldrb.w	r3, [sp]
    87e4:	2b06      	cmp	r3, #6
    87e6:	d108      	bne.n	87fa <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    87e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    87ec:	2201      	movs	r2, #1
    87ee:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    87f2:	f3bf 8f4f 	dsb	sy
        __WFE();
    87f6:	bf20      	wfe
    while (true)
    87f8:	e7fd      	b.n	87f6 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    87fa:	b002      	add	sp, #8
    87fc:	4770      	bx	lr

000087fe <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    87fe:	b082      	sub	sp, #8
    8800:	ab02      	add	r3, sp, #8
    8802:	e903 0003 	stmdb	r3, {r0, r1}
    8806:	2300      	movs	r3, #0
    8808:	f383 8811 	msr	BASEPRI, r3
    880c:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    8810:	b002      	add	sp, #8
    8812:	4770      	bx	lr

00008814 <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
    8814:	b570      	push	{r4, r5, r6, lr}
    8816:	460e      	mov	r6, r1
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    8818:	6801      	ldr	r1, [r0, #0]
{
    881a:	4615      	mov	r5, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    881c:	b189      	cbz	r1, 8842 <gpio_fire_callbacks+0x2e>
	return node->next;
    881e:	680c      	ldr	r4, [r1, #0]
    8820:	2c00      	cmp	r4, #0
    8822:	bf38      	it	cc
    8824:	2400      	movcc	r4, #0
		if (cb->pin_mask & pins) {
    8826:	688a      	ldr	r2, [r1, #8]
    8828:	402a      	ands	r2, r5
    882a:	d002      	beq.n	8832 <gpio_fire_callbacks+0x1e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    882c:	684b      	ldr	r3, [r1, #4]
    882e:	4630      	mov	r0, r6
    8830:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    8832:	b134      	cbz	r4, 8842 <gpio_fire_callbacks+0x2e>
    8834:	6823      	ldr	r3, [r4, #0]
    8836:	2b00      	cmp	r3, #0
    8838:	bf38      	it	cc
    883a:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    883c:	4621      	mov	r1, r4
    883e:	461c      	mov	r4, r3
    8840:	e7f1      	b.n	8826 <gpio_fire_callbacks+0x12>
		}
	}
}
    8842:	bd70      	pop	{r4, r5, r6, pc}

00008844 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8844:	6843      	ldr	r3, [r0, #4]
    8846:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    8848:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    884c:	600b      	str	r3, [r1, #0]
}
    884e:	2000      	movs	r0, #0
    8850:	4770      	bx	lr

00008852 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8852:	6843      	ldr	r3, [r0, #4]
    8854:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    8856:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    885a:	4042      	eors	r2, r0
    885c:	400a      	ands	r2, r1
    885e:	4042      	eors	r2, r0
    p_reg->OUT = value;
    8860:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    8864:	2000      	movs	r0, #0
    8866:	4770      	bx	lr

00008868 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8868:	6843      	ldr	r3, [r0, #4]
    886a:	685b      	ldr	r3, [r3, #4]
}
    886c:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    886e:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    8872:	4770      	bx	lr

00008874 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8874:	6843      	ldr	r3, [r0, #4]
    8876:	685b      	ldr	r3, [r3, #4]
}
    8878:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    887a:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    887e:	4770      	bx	lr

00008880 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8880:	6843      	ldr	r3, [r0, #4]
    8882:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    8884:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    8888:	404b      	eors	r3, r1
    p_reg->OUT = value;
    888a:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    888e:	2000      	movs	r0, #0
    8890:	4770      	bx	lr

00008892 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    8892:	6903      	ldr	r3, [r0, #16]
Z_GENLIST_IS_EMPTY(slist)
    8894:	6858      	ldr	r0, [r3, #4]
{
    8896:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
    8898:	b158      	cbz	r0, 88b2 <gpio_nrfx_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    889a:	2400      	movs	r4, #0
    889c:	4281      	cmp	r1, r0
    889e:	d113      	bne.n	88c8 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
    88a0:	6808      	ldr	r0, [r1, #0]
    88a2:	b95c      	cbnz	r4, 88bc <gpio_nrfx_manage_callback+0x2a>
    88a4:	689c      	ldr	r4, [r3, #8]
	list->head = node;
    88a6:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    88a8:	42a1      	cmp	r1, r4
    88aa:	d100      	bne.n	88ae <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    88ac:	6098      	str	r0, [r3, #8]
	parent->next = child;
    88ae:	2000      	movs	r0, #0
    88b0:	6008      	str	r0, [r1, #0]
	if (set) {
    88b2:	b972      	cbnz	r2, 88d2 <gpio_nrfx_manage_callback+0x40>
	return 0;
    88b4:	2000      	movs	r0, #0
}
    88b6:	bd30      	pop	{r4, r5, pc}
    88b8:	4628      	mov	r0, r5
    88ba:	e7ef      	b.n	889c <gpio_nrfx_manage_callback+0xa>
    88bc:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    88be:	6898      	ldr	r0, [r3, #8]
    88c0:	4281      	cmp	r1, r0
	list->tail = node;
    88c2:	bf08      	it	eq
    88c4:	609c      	streq	r4, [r3, #8]
}
    88c6:	e7f2      	b.n	88ae <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    88c8:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    88ca:	4604      	mov	r4, r0
    88cc:	2d00      	cmp	r5, #0
    88ce:	d1f3      	bne.n	88b8 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    88d0:	b13a      	cbz	r2, 88e2 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
    88d2:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    88d4:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    88d6:	6898      	ldr	r0, [r3, #8]
	list->head = node;
    88d8:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    88da:	2800      	cmp	r0, #0
    88dc:	d1ea      	bne.n	88b4 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    88de:	6099      	str	r1, [r3, #8]
}
    88e0:	e7e9      	b.n	88b6 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    88e2:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    88e6:	e7e6      	b.n	88b6 <gpio_nrfx_manage_callback+0x24>

000088e8 <cfg_level_pins>:
{
    88e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct gpio_nrfx_data *data = get_port_data(port);
    88ec:	6907      	ldr	r7, [r0, #16]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    88ee:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
    88f2:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    88f4:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
    88f8:	4313      	orrs	r3, r2
    88fa:	ea24 0403 	bic.w	r4, r4, r3
	uint32_t bit = 1U << pin;
    88fe:	2601      	movs	r6, #1
	uint32_t pin = 0U;
    8900:	2500      	movs	r5, #0
	while (level_pins) {
    8902:	b90c      	cbnz	r4, 8908 <cfg_level_pins+0x20>
}
    8904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
    8908:	4226      	tst	r6, r4
    890a:	d010      	beq.n	892e <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    890c:	6939      	ldr	r1, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    890e:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
    8912:	40e9      	lsrs	r1, r5
    8914:	f001 0101 	and.w	r1, r1, #1
    8918:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    891c:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    8920:	b2c9      	uxtb	r1, r1
    8922:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
    8926:	f7fb fc65 	bl	41f4 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    892a:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
    892e:	3501      	adds	r5, #1
		bit <<= 1;
    8930:	0076      	lsls	r6, r6, #1
    8932:	e7e6      	b.n	8902 <cfg_level_pins+0x1a>

00008934 <gpio_pin_set>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    8934:	2301      	movs	r3, #1
    8936:	fa03 f101 	lsl.w	r1, r3, r1
    893a:	6903      	ldr	r3, [r0, #16]
    893c:	681b      	ldr	r3, [r3, #0]
    893e:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
    8940:	bf18      	it	ne
    8942:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
    8946:	b112      	cbz	r2, 894e <gpio_pin_set+0x1a>
	return api->port_set_bits_raw(port, pins);
    8948:	6883      	ldr	r3, [r0, #8]
    894a:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    894c:	4718      	bx	r3
    894e:	6883      	ldr	r3, [r0, #8]
    8950:	691b      	ldr	r3, [r3, #16]
    8952:	e7fb      	b.n	894c <gpio_pin_set+0x18>

00008954 <_spi_context_cs_control.isra.0>:
static inline void _spi_context_cs_control(struct spi_context *ctx,
    8954:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
    8956:	6805      	ldr	r5, [r0, #0]
static inline void _spi_context_cs_control(struct spi_context *ctx,
    8958:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
    895a:	b1fd      	cbz	r5, 899c <_spi_context_cs_control.isra.0+0x48>
    895c:	68ab      	ldr	r3, [r5, #8]
    895e:	b1eb      	cbz	r3, 899c <_spi_context_cs_control.isra.0+0x48>
    8960:	6818      	ldr	r0, [r3, #0]
    8962:	b1d8      	cbz	r0, 899c <_spi_context_cs_control.isra.0+0x48>
		if (on) {
    8964:	b151      	cbz	r1, 897c <_spi_context_cs_control.isra.0+0x28>
			gpio_pin_set(ctx->config->cs->gpio_dev,
    8966:	7a19      	ldrb	r1, [r3, #8]
    8968:	2201      	movs	r2, #1
    896a:	f7ff ffe3 	bl	8934 <gpio_pin_set>
			k_busy_wait(ctx->config->cs->delay);
    896e:	6823      	ldr	r3, [r4, #0]
    8970:	689b      	ldr	r3, [r3, #8]
    8972:	6858      	ldr	r0, [r3, #4]
}
    8974:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
    8978:	f000 bb02 	b.w	8f80 <z_impl_k_busy_wait>
			if (!force_off &&
    897c:	b912      	cbnz	r2, 8984 <_spi_context_cs_control.isra.0+0x30>
    897e:	88aa      	ldrh	r2, [r5, #4]
    8980:	0492      	lsls	r2, r2, #18
    8982:	d40b      	bmi.n	899c <_spi_context_cs_control.isra.0+0x48>
			k_busy_wait(ctx->config->cs->delay);
    8984:	6858      	ldr	r0, [r3, #4]
    8986:	f000 fafb 	bl	8f80 <z_impl_k_busy_wait>
			gpio_pin_set(ctx->config->cs->gpio_dev,
    898a:	6823      	ldr	r3, [r4, #0]
    898c:	689b      	ldr	r3, [r3, #8]
    898e:	2200      	movs	r2, #0
    8990:	7a19      	ldrb	r1, [r3, #8]
    8992:	6818      	ldr	r0, [r3, #0]
}
    8994:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set(ctx->config->cs->gpio_dev,
    8998:	f7ff bfcc 	b.w	8934 <gpio_pin_set>
}
    899c:	bd38      	pop	{r3, r4, r5, pc}

0000899e <spi_context_unlock_unconditionally>:
{
    899e:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
    89a0:	2201      	movs	r2, #1
    89a2:	2100      	movs	r1, #0
{
    89a4:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
    89a6:	f7ff ffd5 	bl	8954 <_spi_context_cs_control.isra.0>
	if (!k_sem_count_get(&ctx->lock)) {
    89aa:	6923      	ldr	r3, [r4, #16]
    89ac:	b933      	cbnz	r3, 89bc <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
    89ae:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    89b0:	f104 0008 	add.w	r0, r4, #8
}
    89b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    89b8:	f7fe bcbe 	b.w	7338 <z_impl_k_sem_give>
    89bc:	bd10      	pop	{r4, pc}

000089be <spi_nrfx_release>:
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
    89be:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
    89c0:	6803      	ldr	r3, [r0, #0]
    89c2:	428b      	cmp	r3, r1
{
    89c4:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
    89c6:	d106      	bne.n	89d6 <spi_nrfx_release+0x18>
	if (dev_data->busy) {
    89c8:	f890 4054 	ldrb.w	r4, [r0, #84]	; 0x54
    89cc:	b934      	cbnz	r4, 89dc <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
    89ce:	f7ff ffe6 	bl	899e <spi_context_unlock_unconditionally>
	return 0;
    89d2:	4620      	mov	r0, r4
}
    89d4:	bd10      	pop	{r4, pc}
		return -EINVAL;
    89d6:	f06f 0015 	mvn.w	r0, #21
    89da:	e7fb      	b.n	89d4 <spi_nrfx_release+0x16>
		return -EBUSY;
    89dc:	f06f 000f 	mvn.w	r0, #15
    89e0:	e7f8      	b.n	89d4 <spi_nrfx_release+0x16>

000089e2 <timer_work_handler>:
	TimerIrqHandler();
    89e2:	f7fd b95f 	b.w	5ca4 <TimerIrqHandler>

000089e6 <k_uptime_get>:
{
    89e6:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
    89e8:	f000 fb46 	bl	9078 <z_impl_k_uptime_ticks>
    89ec:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    89f0:	fba0 2304 	umull	r2, r3, r0, r4
    89f4:	fb04 3301 	mla	r3, r4, r1, r3
    89f8:	0bd0      	lsrs	r0, r2, #15
}
    89fa:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
    89fe:	0bd9      	lsrs	r1, r3, #15
    8a00:	bd10      	pop	{r4, pc}

00008a02 <RtcGetTimerValue>:
{
    8a02:	b508      	push	{r3, lr}
	return (uint32_t)k_uptime_get();
    8a04:	f7ff ffef 	bl	89e6 <k_uptime_get>
}
    8a08:	bd08      	pop	{r3, pc}

00008a0a <RtcGetMinimumTimeout>:
}
    8a0a:	2001      	movs	r0, #1
    8a0c:	4770      	bx	lr

00008a0e <DelayMsMcu>:

void DelayMsMcu(uint32_t ms)
{
    8a0e:	b538      	push	{r3, r4, r5, lr}
    8a10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    8a14:	f240 34e7 	movw	r4, #999	; 0x3e7
    8a18:	2500      	movs	r5, #0
    8a1a:	fbe1 4500 	umlal	r4, r5, r1, r0
    8a1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8a22:	2300      	movs	r3, #0
    8a24:	4620      	mov	r0, r4
    8a26:	4629      	mov	r1, r5
    8a28:	f7f8 f808 	bl	a3c <__aeabi_uldivmod>
	k_sleep(K_MSEC(ms));
}
    8a2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return z_impl_k_sleep(timeout);
    8a30:	f7fe bbe6 	b.w	7200 <z_impl_k_sleep>

00008a34 <RtcMs2Tick>:

uint32_t RtcMs2Tick(uint32_t milliseconds)
{
	return milliseconds;
}
    8a34:	4770      	bx	lr

00008a36 <RtcTick2Ms>:
    8a36:	4770      	bx	lr

00008a38 <BoardCriticalSectionBegin>:
	__asm__ volatile(
    8a38:	f04f 0220 	mov.w	r2, #32
    8a3c:	f3ef 8311 	mrs	r3, BASEPRI
    8a40:	f382 8811 	msr	BASEPRI, r2
    8a44:	f3bf 8f6f 	isb	sy
	return tick;
}

void BoardCriticalSectionBegin(uint32_t *mask)
{
	*mask = irq_lock();
    8a48:	6003      	str	r3, [r0, #0]
}
    8a4a:	4770      	bx	lr

00008a4c <BoardCriticalSectionEnd>:
	__asm__ volatile(
    8a4c:	6803      	ldr	r3, [r0, #0]
    8a4e:	f383 8811 	msr	BASEPRI, r3
    8a52:	f3bf 8f6f 	isb	sy

void BoardCriticalSectionEnd(uint32_t *mask)
{
	irq_unlock(*mask);
}
    8a56:	4770      	bx	lr

00008a58 <z_impl_gpio_pin_interrupt_configure>:
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    8a58:	0413      	lsls	r3, r2, #16
{
    8a5a:	b430      	push	{r4, r5}
	const struct gpio_driver_api *api =
    8a5c:	6884      	ldr	r4, [r0, #8]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    8a5e:	d507      	bpl.n	8a70 <z_impl_gpio_pin_interrupt_configure+0x18>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    8a60:	6905      	ldr	r5, [r0, #16]
    8a62:	2301      	movs	r3, #1
    8a64:	682d      	ldr	r5, [r5, #0]
    8a66:	408b      	lsls	r3, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    8a68:	422b      	tst	r3, r5
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
    8a6a:	bf18      	it	ne
    8a6c:	f482 22c0 	eorne.w	r2, r2, #393216	; 0x60000
	return api->pin_interrupt_configure(port, pin, mode, trig);
    8a70:	69a4      	ldr	r4, [r4, #24]
    8a72:	f402 23c0 	and.w	r3, r2, #393216	; 0x60000
    8a76:	46a4      	mov	ip, r4
    8a78:	f402 32b0 	and.w	r2, r2, #90112	; 0x16000
}
    8a7c:	bc30      	pop	{r4, r5}
	return api->pin_interrupt_configure(port, pin, mode, trig);
    8a7e:	4760      	bx	ip

00008a80 <SX1276CheckRfFrequency>:
}
    8a80:	2001      	movs	r0, #1
    8a82:	4770      	bx	lr

00008a84 <gpio_pin_set.constprop.0>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    8a84:	6903      	ldr	r3, [r0, #16]
    8a86:	681b      	ldr	r3, [r3, #0]
    8a88:	05db      	lsls	r3, r3, #23
		value = (value != 0) ? 0 : 1;
    8a8a:	bf48      	it	mi
    8a8c:	f081 0101 	eormi.w	r1, r1, #1
	if (value != 0)	{
    8a90:	b121      	cbz	r1, 8a9c <gpio_pin_set.constprop.0+0x18>
	return api->port_set_bits_raw(port, pins);
    8a92:	6883      	ldr	r3, [r0, #8]
    8a94:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    8a96:	f44f 7180 	mov.w	r1, #256	; 0x100
    8a9a:	4718      	bx	r3
    8a9c:	6883      	ldr	r3, [r0, #8]
    8a9e:	691b      	ldr	r3, [r3, #16]
    8aa0:	e7f9      	b.n	8a96 <gpio_pin_set.constprop.0+0x12>

00008aa2 <SX1276GetBoardTcxoWakeupTime>:
}
    8aa2:	2000      	movs	r0, #0
    8aa4:	4770      	bx	lr

00008aa6 <SX1276SetAntSwLowPower>:
}
    8aa6:	4770      	bx	lr

00008aa8 <SX1276SetBoardTcxo>:
}
    8aa8:	4770      	bx	lr

00008aaa <SX1276SetAntSw>:
    8aaa:	4770      	bx	lr

00008aac <SX1276Write>:
{
    8aac:	b507      	push	{r0, r1, r2, lr}
    SX1276WriteBuffer( addr, &data, 1 );
    8aae:	2201      	movs	r2, #1
{
    8ab0:	f88d 1007 	strb.w	r1, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
    8ab4:	f10d 0107 	add.w	r1, sp, #7
    8ab8:	f7fc fa7c 	bl	4fb4 <SX1276WriteBuffer>
}
    8abc:	b003      	add	sp, #12
    8abe:	f85d fb04 	ldr.w	pc, [sp], #4

00008ac2 <SX1276Read>:
{
    8ac2:	b507      	push	{r0, r1, r2, lr}
    SX1276ReadBuffer( addr, &data, 1 );
    8ac4:	2201      	movs	r2, #1
    8ac6:	f10d 0107 	add.w	r1, sp, #7
    8aca:	f7fc f9ad 	bl	4e28 <SX1276ReadBuffer>
}
    8ace:	f89d 0007 	ldrb.w	r0, [sp, #7]
    8ad2:	b003      	add	sp, #12
    8ad4:	f85d fb04 	ldr.w	pc, [sp], #4

00008ad8 <SX1276SetOpMode>:
{
    8ad8:	b510      	push	{r4, lr}
    if( opMode == RF_OPMODE_SLEEP )
    8ada:	4604      	mov	r4, r0
        SX1276SetAntSwLowPower( true );
    8adc:	2001      	movs	r0, #1
    if( opMode == RF_OPMODE_SLEEP )
    8ade:	b964      	cbnz	r4, 8afa <SX1276SetOpMode+0x22>
        SX1276SetAntSwLowPower( true );
    8ae0:	f7ff ffe1 	bl	8aa6 <SX1276SetAntSwLowPower>
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
    8ae4:	2001      	movs	r0, #1
    8ae6:	f7ff ffec 	bl	8ac2 <SX1276Read>
    8aea:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
    8aee:	4321      	orrs	r1, r4
    8af0:	2001      	movs	r0, #1
}
    8af2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
    8af6:	f7ff bfd9 	b.w	8aac <SX1276Write>
        SX1276SetBoardTcxo( true );
    8afa:	f7ff ffd5 	bl	8aa8 <SX1276SetBoardTcxo>
        SX1276SetAntSwLowPower( false );
    8afe:	2000      	movs	r0, #0
    8b00:	f7ff ffd1 	bl	8aa6 <SX1276SetAntSwLowPower>
        SX1276SetAntSw( opMode );
    8b04:	4620      	mov	r0, r4
    8b06:	f7ff ffd0 	bl	8aaa <SX1276SetAntSw>
    8b0a:	e7eb      	b.n	8ae4 <SX1276SetOpMode+0xc>

00008b0c <SX1276IsChannelFree>:
{
    8b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8b0e:	4604      	mov	r4, r0
    8b10:	460e      	mov	r6, r1
    8b12:	4617      	mov	r7, r2
    8b14:	461d      	mov	r5, r3
    SX1276SetSleep( );
    8b16:	f7fc fb37 	bl	5188 <SX1276SetSleep>
    SX1276SetModem( modem );
    8b1a:	4620      	mov	r0, r4
    8b1c:	f7fc fcd0 	bl	54c0 <SX1276SetModem>
    SX1276SetChannel( freq );
    8b20:	4630      	mov	r0, r6
    8b22:	f7f8 f919 	bl	d58 <SX1276SetChannel>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
    8b26:	2005      	movs	r0, #5
    8b28:	f7ff ffd6 	bl	8ad8 <SX1276SetOpMode>
    DelayMs( 1 );
    8b2c:	2001      	movs	r0, #1
    8b2e:	f000 f887 	bl	8c40 <DelayMs>
    carrierSenseTime = TimerGetCurrentTime( );
    8b32:	f000 f86f 	bl	8c14 <TimerGetCurrentTime>
    8b36:	4606      	mov	r6, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
    8b38:	4630      	mov	r0, r6
    8b3a:	f000 f872 	bl	8c22 <TimerGetElapsedTime>
    8b3e:	42a8      	cmp	r0, r5
    8b40:	d304      	bcc.n	8b4c <SX1276IsChannelFree+0x40>
    bool status = true;
    8b42:	2401      	movs	r4, #1
    SX1276SetSleep( );
    8b44:	f7fc fb20 	bl	5188 <SX1276SetSleep>
}
    8b48:	4620      	mov	r0, r4
    8b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rssi = SX1276ReadRssi( modem );
    8b4c:	4620      	mov	r0, r4
    8b4e:	f7fc faf7 	bl	5140 <SX1276ReadRssi>
        if( rssi > rssiThresh )
    8b52:	42b8      	cmp	r0, r7
    8b54:	ddf0      	ble.n	8b38 <SX1276IsChannelFree+0x2c>
            status = false;
    8b56:	2400      	movs	r4, #0
    8b58:	e7f4      	b.n	8b44 <SX1276IsChannelFree+0x38>

00008b5a <SX1276Random>:
{
    8b5a:	b538      	push	{r3, r4, r5, lr}
    SX1276SetModem( MODEM_LORA );
    8b5c:	2001      	movs	r0, #1
    8b5e:	f7fc fcaf 	bl	54c0 <SX1276SetModem>
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
    8b62:	21ff      	movs	r1, #255	; 0xff
    8b64:	2011      	movs	r0, #17
    8b66:	f7ff ffa1 	bl	8aac <SX1276Write>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
    8b6a:	2005      	movs	r0, #5
    8b6c:	f7ff ffb4 	bl	8ad8 <SX1276SetOpMode>
    8b70:	2400      	movs	r4, #0
    uint32_t rnd = 0;
    8b72:	4625      	mov	r5, r4
        DelayMs( 1 );
    8b74:	2001      	movs	r0, #1
    8b76:	f000 f863 	bl	8c40 <DelayMs>
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
    8b7a:	202c      	movs	r0, #44	; 0x2c
    8b7c:	f7ff ffa1 	bl	8ac2 <SX1276Read>
    8b80:	f000 0001 	and.w	r0, r0, #1
    8b84:	40a0      	lsls	r0, r4
    8b86:	3401      	adds	r4, #1
    for( i = 0; i < 32; i++ )
    8b88:	2c20      	cmp	r4, #32
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
    8b8a:	ea45 0500 	orr.w	r5, r5, r0
    for( i = 0; i < 32; i++ )
    8b8e:	d1f1      	bne.n	8b74 <SX1276Random+0x1a>
    SX1276SetSleep( );
    8b90:	f7fc fafa 	bl	5188 <SX1276SetSleep>
}
    8b94:	4628      	mov	r0, r5
    8b96:	bd38      	pop	{r3, r4, r5, pc}

00008b98 <SX1276WriteFifo>:
{
    8b98:	460a      	mov	r2, r1
    SX1276WriteBuffer( 0, buffer, size );
    8b9a:	4601      	mov	r1, r0
    8b9c:	2000      	movs	r0, #0
    8b9e:	f7fc ba09 	b.w	4fb4 <SX1276WriteBuffer>

00008ba2 <SX1276ReadFifo>:
{
    8ba2:	460a      	mov	r2, r1
    SX1276ReadBuffer( 0, buffer, size );
    8ba4:	4601      	mov	r1, r0
    8ba6:	2000      	movs	r0, #0
    8ba8:	f7fc b93e 	b.w	4e28 <SX1276ReadBuffer>

00008bac <SX1276GetWakeupTime>:
{
    8bac:	b508      	push	{r3, lr}
    return SX1276GetBoardTcxoWakeupTime( ) + RADIO_WAKEUP_TIME;
    8bae:	f7ff ff78 	bl	8aa2 <SX1276GetBoardTcxoWakeupTime>
}
    8bb2:	3001      	adds	r0, #1
    8bb4:	bd08      	pop	{r3, pc}

00008bb6 <TimerSetTimeout>:
    // Intentional wrap around. Works Ok if tick duration below 1ms
    return RtcTick2Ms( nowInTicks - pastInTicks );
}

static void TimerSetTimeout( TimerEvent_t *obj )
{
    8bb6:	b570      	push	{r4, r5, r6, lr}
    8bb8:	4604      	mov	r4, r0
    int32_t minTicks= RtcGetMinimumTimeout( );
    8bba:	f7ff ff26 	bl	8a0a <RtcGetMinimumTimeout>
    obj->IsNext2Expire = true;
    8bbe:	2301      	movs	r3, #1
    8bc0:	7263      	strb	r3, [r4, #9]

    // In case deadline too soon
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
    8bc2:	6826      	ldr	r6, [r4, #0]
    int32_t minTicks= RtcGetMinimumTimeout( );
    8bc4:	4605      	mov	r5, r0
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
    8bc6:	f7fb feb9 	bl	493c <RtcGetTimerElapsedTime>
    8bca:	4428      	add	r0, r5
    8bcc:	4286      	cmp	r6, r0
    8bce:	d203      	bcs.n	8bd8 <TimerSetTimeout+0x22>
    {
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
    8bd0:	f7fb feb4 	bl	493c <RtcGetTimerElapsedTime>
    8bd4:	4405      	add	r5, r0
    8bd6:	6025      	str	r5, [r4, #0]
    }
    RtcSetAlarm( obj->Timestamp );
    8bd8:	6820      	ldr	r0, [r4, #0]
}
    8bda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    RtcSetAlarm( obj->Timestamp );
    8bde:	f7fb bebd 	b.w	495c <RtcSetAlarm>

00008be2 <TimerInit>:
    obj->Timestamp = 0;
    8be2:	2300      	movs	r3, #0
    obj->ReloadValue = 0;
    8be4:	e9c0 3300 	strd	r3, r3, [r0]
    obj->Context = NULL;
    8be8:	e9c0 1303 	strd	r1, r3, [r0, #12]
    obj->IsStarted = false;
    8bec:	8103      	strh	r3, [r0, #8]
    obj->Next = NULL;
    8bee:	6143      	str	r3, [r0, #20]
}
    8bf0:	4770      	bx	lr

00008bf2 <TimerSetValue>:
{
    8bf2:	b538      	push	{r3, r4, r5, lr}
    8bf4:	4605      	mov	r5, r0
    uint32_t ticks = RtcMs2Tick( value );
    8bf6:	4608      	mov	r0, r1
    8bf8:	f7ff ff1c 	bl	8a34 <RtcMs2Tick>
    8bfc:	4604      	mov	r4, r0
    TimerStop( obj );
    8bfe:	4628      	mov	r0, r5
    8c00:	f7fd f88e 	bl	5d20 <TimerStop>
    minValue = RtcGetMinimumTimeout( );
    8c04:	f7ff ff01 	bl	8a0a <RtcGetMinimumTimeout>
    if( ticks < minValue )
    8c08:	42a0      	cmp	r0, r4
    8c0a:	bf38      	it	cc
    8c0c:	4620      	movcc	r0, r4
    obj->ReloadValue = ticks;
    8c0e:	e9c5 0000 	strd	r0, r0, [r5]
}
    8c12:	bd38      	pop	{r3, r4, r5, pc}

00008c14 <TimerGetCurrentTime>:
{
    8c14:	b508      	push	{r3, lr}
    uint32_t now = RtcGetTimerValue( );
    8c16:	f7ff fef4 	bl	8a02 <RtcGetTimerValue>
}
    8c1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return  RtcTick2Ms( now );
    8c1e:	f7ff bf0a 	b.w	8a36 <RtcTick2Ms>

00008c22 <TimerGetElapsedTime>:
{
    8c22:	b538      	push	{r3, r4, r5, lr}
    if ( past == 0 )
    8c24:	4604      	mov	r4, r0
    8c26:	b150      	cbz	r0, 8c3e <TimerGetElapsedTime+0x1c>
    uint32_t nowInTicks = RtcGetTimerValue( );
    8c28:	f7ff feeb 	bl	8a02 <RtcGetTimerValue>
    8c2c:	4605      	mov	r5, r0
    uint32_t pastInTicks = RtcMs2Tick( past );
    8c2e:	4620      	mov	r0, r4
    8c30:	f7ff ff00 	bl	8a34 <RtcMs2Tick>
    return RtcTick2Ms( nowInTicks - pastInTicks );
    8c34:	1a28      	subs	r0, r5, r0
}
    8c36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return RtcTick2Ms( nowInTicks - pastInTicks );
    8c3a:	f7ff befc 	b.w	8a36 <RtcTick2Ms>
}
    8c3e:	bd38      	pop	{r3, r4, r5, pc}

00008c40 <DelayMs>:
    DelayMs( s * 1000.0f );
}

void DelayMs( uint32_t ms )
{
    DelayMsMcu( ms );
    8c40:	f7ff bee5 	b.w	8a0e <DelayMsMcu>

00008c44 <memcpy1>:
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
}

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
    8c44:	3801      	subs	r0, #1
    8c46:	440a      	add	r2, r1
    8c48:	4291      	cmp	r1, r2
    8c4a:	d100      	bne.n	8c4e <memcpy1+0xa>
    {
        *dst++ = *src++;
    }
}
    8c4c:	4770      	bx	lr
        *dst++ = *src++;
    8c4e:	f811 3b01 	ldrb.w	r3, [r1], #1
    8c52:	f800 3f01 	strb.w	r3, [r0, #1]!
    8c56:	e7f7      	b.n	8c48 <memcpy1+0x4>

00008c58 <uart_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    8c58:	6902      	ldr	r2, [r0, #16]
{
    8c5a:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    8c5c:	e892 0003 	ldmia.w	r2, {r0, r1}
    8c60:	e883 0003 	stmia.w	r3, {r0, r1}
}
    8c64:	2000      	movs	r0, #0
    8c66:	4770      	bx	lr

00008c68 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    8c68:	4700      	bx	r0

00008c6a <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    8c6a:	f000 b989 	b.w	8f80 <z_impl_k_busy_wait>

00008c6e <nrfx_clock_enable>:
{
    8c6e:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    8c70:	2000      	movs	r0, #0
    8c72:	f7fa fe1b 	bl	38ac <arch_irq_is_enabled>
    8c76:	b918      	cbnz	r0, 8c80 <nrfx_clock_enable+0x12>
}
    8c78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    8c7c:	f7fa be06 	b.w	388c <arch_irq_enable>
    8c80:	bd08      	pop	{r3, pc}

00008c82 <nrf_gpio_pin_set>:
{
    8c82:	b507      	push	{r0, r1, r2, lr}
    8c84:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    8c86:	a801      	add	r0, sp, #4
    8c88:	f7fd fbc8 	bl	641c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    8c8c:	9a01      	ldr	r2, [sp, #4]
    8c8e:	2301      	movs	r3, #1
    8c90:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    8c92:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
    8c96:	b003      	add	sp, #12
    8c98:	f85d fb04 	ldr.w	pc, [sp], #4

00008c9c <nrf_gpio_pin_clear>:
{
    8c9c:	b507      	push	{r0, r1, r2, lr}
    8c9e:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    8ca0:	a801      	add	r0, sp, #4
    8ca2:	f7fd fbbb 	bl	641c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    8ca6:	9a01      	ldr	r2, [sp, #4]
    8ca8:	2301      	movs	r3, #1
    8caa:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    8cac:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
    8cb0:	b003      	add	sp, #12
    8cb2:	f85d fb04 	ldr.w	pc, [sp], #4

00008cb6 <transfer_byte>:
{
    8cb6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return p_reg->RXD;
    8cb8:	f8d0 3518 	ldr.w	r3, [r0, #1304]	; 0x518
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
    8cbc:	698a      	ldr	r2, [r1, #24]
    8cbe:	b2db      	uxtb	r3, r3
    volatile uint8_t rx_data = nrf_spi_rxd_get(p_spi);
    8cc0:	f88d 3007 	strb.w	r3, [sp, #7]
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
    8cc4:	6a0b      	ldr	r3, [r1, #32]
    8cc6:	4293      	cmp	r3, r2
        p_cb->evt.xfer_desc.p_rx_buffer[p_cb->bytes_transferred] = rx_data;
    8cc8:	bf3e      	ittt	cc
    8cca:	694a      	ldrcc	r2, [r1, #20]
    8ccc:	f89d 4007 	ldrbcc.w	r4, [sp, #7]
    8cd0:	54d4      	strbcc	r4, [r2, r3]
    ++p_cb->bytes_transferred;
    8cd2:	6a0a      	ldr	r2, [r1, #32]
    if (p_cb->abort)
    8cd4:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
    ++p_cb->bytes_transferred;
    8cd8:	1c53      	adds	r3, r2, #1
    8cda:	620b      	str	r3, [r1, #32]
    size_t bytes_used = p_cb->bytes_transferred + 1;
    8cdc:	3202      	adds	r2, #2
    if (p_cb->abort)
    8cde:	b13c      	cbz	r4, 8cf0 <transfer_byte+0x3a>
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
    8ce0:	690c      	ldr	r4, [r1, #16]
    8ce2:	42a2      	cmp	r2, r4
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
    8ce4:	698c      	ldr	r4, [r1, #24]
            p_cb->evt.xfer_desc.tx_length = bytes_used;
    8ce6:	bf38      	it	cc
    8ce8:	610a      	strcc	r2, [r1, #16]
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
    8cea:	4294      	cmp	r4, r2
            p_cb->evt.xfer_desc.rx_length = bytes_used;
    8cec:	bf88      	it	hi
    8cee:	618a      	strhi	r2, [r1, #24]
    if (bytes_used < p_cb->evt.xfer_desc.tx_length)
    8cf0:	690d      	ldr	r5, [r1, #16]
    8cf2:	4295      	cmp	r5, r2
    8cf4:	d905      	bls.n	8d02 <transfer_byte+0x4c>
        nrf_spi_txd_set(p_spi, p_cb->evt.xfer_desc.p_tx_buffer[bytes_used]);
    8cf6:	68cb      	ldr	r3, [r1, #12]
    p_reg->TXD = data;
    8cf8:	5c9b      	ldrb	r3, [r3, r2]
    8cfa:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
    8cfe:	2001      	movs	r0, #1
    8d00:	e00a      	b.n	8d18 <transfer_byte+0x62>
    else if (bytes_used < p_cb->evt.xfer_desc.rx_length)
    8d02:	698c      	ldr	r4, [r1, #24]
    8d04:	4294      	cmp	r4, r2
    8d06:	d901      	bls.n	8d0c <transfer_byte+0x56>
    8d08:	7fcb      	ldrb	r3, [r1, #31]
    8d0a:	e7f6      	b.n	8cfa <transfer_byte+0x44>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
    8d0c:	42ab      	cmp	r3, r5
    8d0e:	d3f6      	bcc.n	8cfe <transfer_byte+0x48>
    8d10:	42a3      	cmp	r3, r4
    8d12:	bf2c      	ite	cs
    8d14:	2000      	movcs	r0, #0
    8d16:	2001      	movcc	r0, #1
}
    8d18:	b003      	add	sp, #12
    8d1a:	bd30      	pop	{r4, r5, pc}

00008d1c <z_device_state_init>:
}
    8d1c:	4770      	bx	lr

00008d1e <z_device_ready>:
	return __device_end - __device_start;
}

bool z_device_ready(const struct device *dev)
{
	return dev->state->initialized && (dev->state->init_res == 0U);
    8d1e:	68c3      	ldr	r3, [r0, #12]
    8d20:	8818      	ldrh	r0, [r3, #0]
    8d22:	f3c0 0008 	ubfx	r0, r0, #0, #9
}
    8d26:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    8d2a:	4258      	negs	r0, r3
    8d2c:	4158      	adcs	r0, r3
    8d2e:	4770      	bx	lr

00008d30 <arch_system_halt>:
	__asm__ volatile(
    8d30:	f04f 0220 	mov.w	r2, #32
    8d34:	f3ef 8311 	mrs	r3, BASEPRI
    8d38:	f382 8811 	msr	BASEPRI, r2
    8d3c:	f3bf 8f6f 	isb	sy
	for (;;) {
    8d40:	e7fe      	b.n	8d40 <arch_system_halt+0x10>

00008d42 <z_pm_save_idle_exit>:
{
    8d42:	b508      	push	{r3, lr}
	pm_system_resume();
    8d44:	f7fa f980 	bl	3048 <pm_system_resume>
}
    8d48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    8d4c:	f7ff bcd5 	b.w	86fa <sys_clock_idle_exit>

00008d50 <k_mem_slab_init>:
{
    8d50:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    8d52:	2400      	movs	r4, #0
    8d54:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    8d56:	ea41 0402 	orr.w	r4, r1, r2
    8d5a:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    8d5e:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
    8d62:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    8d64:	d10c      	bne.n	8d80 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
    8d66:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    8d68:	42a3      	cmp	r3, r4
    8d6a:	d103      	bne.n	8d74 <k_mem_slab_init+0x24>
	list->tail = (sys_dnode_t *)list;
    8d6c:	e9c0 0000 	strd	r0, r0, [r0]
}
    8d70:	2000      	movs	r0, #0
}
    8d72:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    8d74:	6945      	ldr	r5, [r0, #20]
    8d76:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    8d78:	3401      	adds	r4, #1
		slab->free_list = p;
    8d7a:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
    8d7c:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    8d7e:	e7f3      	b.n	8d68 <k_mem_slab_init+0x18>
		return -EINVAL;
    8d80:	f06f 0015 	mvn.w	r0, #21
	return rc;
    8d84:	e7f5      	b.n	8d72 <k_mem_slab_init+0x22>

00008d86 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    8d86:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    8d8a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    8d8c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    8d8e:	2300      	movs	r3, #0
	node->prev = NULL;
    8d90:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    8d94:	4770      	bx	lr

00008d96 <unpend_thread_no_timeout>:
{
    8d96:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    8d98:	f7ff fff5 	bl	8d86 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    8d9c:	7b43      	ldrb	r3, [r0, #13]
    8d9e:	f023 0302 	bic.w	r3, r3, #2
    8da2:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    8da4:	2300      	movs	r3, #0
    8da6:	6083      	str	r3, [r0, #8]
}
    8da8:	bd08      	pop	{r3, pc}

00008daa <z_unpend_thread_no_timeout>:
{
    8daa:	b508      	push	{r3, lr}
    8dac:	f04f 0320 	mov.w	r3, #32
    8db0:	f3ef 8111 	mrs	r1, BASEPRI
    8db4:	f383 8811 	msr	BASEPRI, r3
    8db8:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    8dbc:	f7ff ffeb 	bl	8d96 <unpend_thread_no_timeout>
	__asm__ volatile(
    8dc0:	f381 8811 	msr	BASEPRI, r1
    8dc4:	f3bf 8f6f 	isb	sy
}
    8dc8:	bd08      	pop	{r3, pc}

00008dca <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    8dca:	4603      	mov	r3, r0
    8dcc:	b920      	cbnz	r0, 8dd8 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    8dce:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    8dd2:	b90a      	cbnz	r2, 8dd8 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    8dd4:	f7fa bd0c 	b.w	37f0 <arch_swap>
    8dd8:	f383 8811 	msr	BASEPRI, r3
    8ddc:	f3bf 8f6f 	isb	sy
}
    8de0:	4770      	bx	lr

00008de2 <z_reschedule_unlocked>:
	__asm__ volatile(
    8de2:	f04f 0320 	mov.w	r3, #32
    8de6:	f3ef 8011 	mrs	r0, BASEPRI
    8dea:	f383 8811 	msr	BASEPRI, r3
    8dee:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    8df2:	f7ff bfea 	b.w	8dca <z_reschedule_irqlock>

00008df6 <z_priq_dumb_best>:
{
    8df6:	4603      	mov	r3, r0
	return list->head == list;
    8df8:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8dfa:	4283      	cmp	r3, r0
    8dfc:	d003      	beq.n	8e06 <z_priq_dumb_best+0x10>
	if (n != NULL) {
    8dfe:	2800      	cmp	r0, #0
    8e00:	bf38      	it	cc
    8e02:	2000      	movcc	r0, #0
    8e04:	4770      	bx	lr
	struct k_thread *thread = NULL;
    8e06:	2000      	movs	r0, #0
}
    8e08:	4770      	bx	lr

00008e0a <add_to_waitq_locked>:
{
    8e0a:	b538      	push	{r3, r4, r5, lr}
    8e0c:	4604      	mov	r4, r0
    8e0e:	460d      	mov	r5, r1
	unready_thread(thread);
    8e10:	f7fd ff9c 	bl	6d4c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    8e14:	7b63      	ldrb	r3, [r4, #13]
    8e16:	f043 0302 	orr.w	r3, r3, #2
    8e1a:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    8e1c:	b1b5      	cbz	r5, 8e4c <add_to_waitq_locked+0x42>
	return list->head == list;
    8e1e:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    8e20:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8e22:	429d      	cmp	r5, r3
    8e24:	bf08      	it	eq
    8e26:	2300      	moveq	r3, #0
    8e28:	2b00      	cmp	r3, #0
    8e2a:	bf38      	it	cc
    8e2c:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8e2e:	b19b      	cbz	r3, 8e58 <add_to_waitq_locked+0x4e>
	int32_t b1 = thread_1->base.prio;
    8e30:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    8e34:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    8e38:	4291      	cmp	r1, r2
    8e3a:	d008      	beq.n	8e4e <add_to_waitq_locked+0x44>
		return b2 - b1;
    8e3c:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    8e3e:	2a00      	cmp	r2, #0
    8e40:	dd05      	ble.n	8e4e <add_to_waitq_locked+0x44>
	sys_dnode_t *const prev = successor->prev;
    8e42:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    8e44:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    8e48:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    8e4a:	605c      	str	r4, [r3, #4]
}
    8e4c:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    8e4e:	686a      	ldr	r2, [r5, #4]
    8e50:	4293      	cmp	r3, r2
    8e52:	d001      	beq.n	8e58 <add_to_waitq_locked+0x4e>
    8e54:	681b      	ldr	r3, [r3, #0]
    8e56:	e7ea      	b.n	8e2e <add_to_waitq_locked+0x24>
	sys_dnode_t *const tail = list->tail;
    8e58:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    8e5a:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    8e5e:	601c      	str	r4, [r3, #0]
	list->tail = node;
    8e60:	606c      	str	r4, [r5, #4]
    8e62:	e7f3      	b.n	8e4c <add_to_waitq_locked+0x42>

00008e64 <z_ready_thread>:
{
    8e64:	b510      	push	{r4, lr}
    8e66:	f04f 0320 	mov.w	r3, #32
    8e6a:	f3ef 8411 	mrs	r4, BASEPRI
    8e6e:	f383 8811 	msr	BASEPRI, r3
    8e72:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    8e76:	f7fe f8c3 	bl	7000 <ready_thread>
	__asm__ volatile(
    8e7a:	f384 8811 	msr	BASEPRI, r4
    8e7e:	f3bf 8f6f 	isb	sy
}
    8e82:	bd10      	pop	{r4, pc}

00008e84 <z_thread_timeout>:
{
    8e84:	b510      	push	{r4, lr}
    8e86:	4601      	mov	r1, r0
	__asm__ volatile(
    8e88:	f04f 0320 	mov.w	r3, #32
    8e8c:	f3ef 8411 	mrs	r4, BASEPRI
    8e90:	f383 8811 	msr	BASEPRI, r3
    8e94:	f3bf 8f6f 	isb	sy
		if (!killed) {
    8e98:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    8e9c:	f013 0f28 	tst.w	r3, #40	; 0x28
    8ea0:	d10d      	bne.n	8ebe <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    8ea2:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    8ea6:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    8ea8:	b10b      	cbz	r3, 8eae <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    8eaa:	f7ff ff74 	bl	8d96 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    8eae:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    8eb2:	f023 0314 	bic.w	r3, r3, #20
    8eb6:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    8eba:	f7fe f8a1 	bl	7000 <ready_thread>
	__asm__ volatile(
    8ebe:	f384 8811 	msr	BASEPRI, r4
    8ec2:	f3bf 8f6f 	isb	sy
}
    8ec6:	bd10      	pop	{r4, pc}

00008ec8 <z_unpend1_no_timeout>:
{
    8ec8:	b510      	push	{r4, lr}
	__asm__ volatile(
    8eca:	f04f 0320 	mov.w	r3, #32
    8ece:	f3ef 8411 	mrs	r4, BASEPRI
    8ed2:	f383 8811 	msr	BASEPRI, r3
    8ed6:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    8eda:	f7ff ff8c 	bl	8df6 <z_priq_dumb_best>
		if (thread != NULL) {
    8ede:	4601      	mov	r1, r0
    8ee0:	b108      	cbz	r0, 8ee6 <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
    8ee2:	f7ff ff58 	bl	8d96 <unpend_thread_no_timeout>
	__asm__ volatile(
    8ee6:	f384 8811 	msr	BASEPRI, r4
    8eea:	f3bf 8f6f 	isb	sy
}
    8eee:	4608      	mov	r0, r1
    8ef0:	bd10      	pop	{r4, pc}

00008ef2 <z_unpend_first_thread>:
{
    8ef2:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    8ef4:	f04f 0320 	mov.w	r3, #32
    8ef8:	f3ef 8511 	mrs	r5, BASEPRI
    8efc:	f383 8811 	msr	BASEPRI, r3
    8f00:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    8f04:	f7ff ff77 	bl	8df6 <z_priq_dumb_best>
		if (thread != NULL) {
    8f08:	4604      	mov	r4, r0
    8f0a:	b120      	cbz	r0, 8f16 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
    8f0c:	f7ff ff43 	bl	8d96 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    8f10:	3018      	adds	r0, #24
    8f12:	f000 f86d 	bl	8ff0 <z_abort_timeout>
	__asm__ volatile(
    8f16:	f385 8811 	msr	BASEPRI, r5
    8f1a:	f3bf 8f6f 	isb	sy
}
    8f1e:	4620      	mov	r0, r4
    8f20:	bd38      	pop	{r3, r4, r5, pc}

00008f22 <z_sched_wake>:
{
    8f22:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    8f24:	f04f 0320 	mov.w	r3, #32
    8f28:	f3ef 8511 	mrs	r5, BASEPRI
    8f2c:	f383 8811 	msr	BASEPRI, r3
    8f30:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    8f34:	f7ff ff5f 	bl	8df6 <z_priq_dumb_best>
		if (thread != NULL) {
    8f38:	4604      	mov	r4, r0
    8f3a:	b150      	cbz	r0, 8f52 <z_sched_wake+0x30>
    8f3c:	6781      	str	r1, [r0, #120]	; 0x78
    8f3e:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
    8f40:	f7ff ff29 	bl	8d96 <unpend_thread_no_timeout>
    8f44:	3018      	adds	r0, #24
    8f46:	f000 f853 	bl	8ff0 <z_abort_timeout>
			ready_thread(thread);
    8f4a:	4620      	mov	r0, r4
    8f4c:	f7fe f858 	bl	7000 <ready_thread>
			ret = true;
    8f50:	2001      	movs	r0, #1
	__asm__ volatile(
    8f52:	f385 8811 	msr	BASEPRI, r5
    8f56:	f3bf 8f6f 	isb	sy
}
    8f5a:	bd38      	pop	{r3, r4, r5, pc}

00008f5c <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    8f5c:	b13a      	cbz	r2, 8f6e <z_impl_k_sem_init+0x12>
    8f5e:	428a      	cmp	r2, r1
    8f60:	d305      	bcc.n	8f6e <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    8f62:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
    8f66:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    8f6a:	2000      	movs	r0, #0
    8f6c:	4770      	bx	lr
		return -EINVAL;
    8f6e:	f06f 0015 	mvn.w	r0, #21
}
    8f72:	4770      	bx	lr

00008f74 <k_is_in_isr>:
    8f74:	f3ef 8005 	mrs	r0, IPSR
}
    8f78:	3800      	subs	r0, #0
    8f7a:	bf18      	it	ne
    8f7c:	2001      	movne	r0, #1
    8f7e:	4770      	bx	lr

00008f80 <z_impl_k_busy_wait>:
	if (usec_to_wait == 0U) {
    8f80:	b108      	cbz	r0, 8f86 <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
    8f82:	f7fb b8b5 	b.w	40f0 <arch_busy_wait>
}
    8f86:	4770      	bx	lr

00008f88 <z_impl_k_thread_name_set>:
}
    8f88:	f06f 0057 	mvn.w	r0, #87	; 0x57
    8f8c:	4770      	bx	lr

00008f8e <k_thread_name_get>:
}
    8f8e:	2000      	movs	r0, #0
    8f90:	4770      	bx	lr

00008f92 <z_impl_k_thread_start>:
	z_sched_start(thread);
    8f92:	f7fe b86d 	b.w	7070 <z_sched_start>

00008f96 <notify_queue_locked>:
	if (queue != NULL) {
    8f96:	b120      	cbz	r0, 8fa2 <notify_queue_locked+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    8f98:	2200      	movs	r2, #0
    8f9a:	4611      	mov	r1, r2
    8f9c:	3088      	adds	r0, #136	; 0x88
    8f9e:	f7ff bfc0 	b.w	8f22 <z_sched_wake>
}
    8fa2:	4770      	bx	lr

00008fa4 <k_work_init>:
{
    8fa4:	b538      	push	{r3, r4, r5, lr}
    8fa6:	4604      	mov	r4, r0
    8fa8:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    8faa:	2210      	movs	r2, #16
    8fac:	2100      	movs	r1, #0
    8fae:	f000 f89d 	bl	90ec <memset>
    8fb2:	6065      	str	r5, [r4, #4]
}
    8fb4:	bd38      	pop	{r3, r4, r5, pc}

00008fb6 <k_work_submit_to_queue>:
{
    8fb6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    8fb8:	9001      	str	r0, [sp, #4]
    8fba:	4608      	mov	r0, r1
	__asm__ volatile(
    8fbc:	f04f 0320 	mov.w	r3, #32
    8fc0:	f3ef 8511 	mrs	r5, BASEPRI
    8fc4:	f383 8811 	msr	BASEPRI, r3
    8fc8:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
    8fcc:	a901      	add	r1, sp, #4
    8fce:	f7fe fad1 	bl	7574 <submit_to_queue_locked>
    8fd2:	4604      	mov	r4, r0
	__asm__ volatile(
    8fd4:	f385 8811 	msr	BASEPRI, r5
    8fd8:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
    8fdc:	2800      	cmp	r0, #0
    8fde:	dd04      	ble.n	8fea <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
    8fe0:	f7fe f936 	bl	7250 <z_impl_k_is_preempt_thread>
    8fe4:	b108      	cbz	r0, 8fea <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
    8fe6:	f7fe f8b9 	bl	715c <z_impl_k_yield>
}
    8fea:	4620      	mov	r0, r4
    8fec:	b003      	add	sp, #12
    8fee:	bd30      	pop	{r4, r5, pc}

00008ff0 <z_abort_timeout>:
{
    8ff0:	b510      	push	{r4, lr}
	__asm__ volatile(
    8ff2:	f04f 0220 	mov.w	r2, #32
    8ff6:	f3ef 8411 	mrs	r4, BASEPRI
    8ffa:	f382 8811 	msr	BASEPRI, r2
    8ffe:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    9002:	6803      	ldr	r3, [r0, #0]
    9004:	b13b      	cbz	r3, 9016 <z_abort_timeout+0x26>
			remove_timeout(to);
    9006:	f7fe fc37 	bl	7878 <remove_timeout>
			ret = 0;
    900a:	2000      	movs	r0, #0
	__asm__ volatile(
    900c:	f384 8811 	msr	BASEPRI, r4
    9010:	f3bf 8f6f 	isb	sy
}
    9014:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    9016:	f06f 0015 	mvn.w	r0, #21
    901a:	e7f7      	b.n	900c <z_abort_timeout+0x1c>

0000901c <z_get_next_timeout_expiry>:
{
    901c:	b510      	push	{r4, lr}
	__asm__ volatile(
    901e:	f04f 0320 	mov.w	r3, #32
    9022:	f3ef 8411 	mrs	r4, BASEPRI
    9026:	f383 8811 	msr	BASEPRI, r3
    902a:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    902e:	f7fe fc3d 	bl	78ac <next_timeout>
	__asm__ volatile(
    9032:	f384 8811 	msr	BASEPRI, r4
    9036:	f3bf 8f6f 	isb	sy
}
    903a:	bd10      	pop	{r4, pc}

0000903c <z_set_timeout_expiry>:
{
    903c:	b570      	push	{r4, r5, r6, lr}
    903e:	4604      	mov	r4, r0
    9040:	460d      	mov	r5, r1
	__asm__ volatile(
    9042:	f04f 0320 	mov.w	r3, #32
    9046:	f3ef 8611 	mrs	r6, BASEPRI
    904a:	f383 8811 	msr	BASEPRI, r3
    904e:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    9052:	f7fe fc2b 	bl	78ac <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    9056:	2801      	cmp	r0, #1
    9058:	dd05      	ble.n	9066 <z_set_timeout_expiry+0x2a>
    905a:	42a0      	cmp	r0, r4
    905c:	db03      	blt.n	9066 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    905e:	4629      	mov	r1, r5
    9060:	4620      	mov	r0, r4
    9062:	f7fa faa5 	bl	35b0 <sys_clock_set_timeout>
	__asm__ volatile(
    9066:	f386 8811 	msr	BASEPRI, r6
    906a:	f3bf 8f6f 	isb	sy
}
    906e:	bd70      	pop	{r4, r5, r6, pc}

00009070 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    9070:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    9072:	f7fe fd43 	bl	7afc <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    9076:	bd08      	pop	{r3, pc}

00009078 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    9078:	f7fe bd40 	b.w	7afc <sys_clock_tick_get>

0000907c <k_timer_init>:
	timer->status = 0U;
    907c:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
    907e:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
    9082:	f100 0218 	add.w	r2, r0, #24
    9086:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
    908a:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
    908e:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
    9090:	6343      	str	r3, [r0, #52]	; 0x34
}
    9092:	4770      	bx	lr

00009094 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    9094:	b510      	push	{r4, lr}
    9096:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
    9098:	f7ff ffaa 	bl	8ff0 <z_abort_timeout>

	if (inactive) {
    909c:	b9b0      	cbnz	r0, 90cc <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    909e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    90a0:	b10b      	cbz	r3, 90a6 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    90a2:	4620      	mov	r0, r4
    90a4:	4798      	blx	r3
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    90a6:	f104 0018 	add.w	r0, r4, #24
    90aa:	f7ff ff0d 	bl	8ec8 <z_unpend1_no_timeout>

	if (pending_thread != NULL) {
    90ae:	b168      	cbz	r0, 90cc <z_impl_k_timer_stop+0x38>
		z_ready_thread(pending_thread);
    90b0:	f7ff fed8 	bl	8e64 <z_ready_thread>
	__asm__ volatile(
    90b4:	f04f 0320 	mov.w	r3, #32
    90b8:	f3ef 8011 	mrs	r0, BASEPRI
    90bc:	f383 8811 	msr	BASEPRI, r3
    90c0:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
    90c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
    90c8:	f7ff be7f 	b.w	8dca <z_reschedule_irqlock>
    90cc:	bd10      	pop	{r4, pc}

000090ce <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    90ce:	4770      	bx	lr

000090d0 <memcpy>:
    90d0:	440a      	add	r2, r1
    90d2:	4291      	cmp	r1, r2
    90d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    90d8:	d100      	bne.n	90dc <memcpy+0xc>
    90da:	4770      	bx	lr
    90dc:	b510      	push	{r4, lr}
    90de:	f811 4b01 	ldrb.w	r4, [r1], #1
    90e2:	f803 4f01 	strb.w	r4, [r3, #1]!
    90e6:	4291      	cmp	r1, r2
    90e8:	d1f9      	bne.n	90de <memcpy+0xe>
    90ea:	bd10      	pop	{r4, pc}

000090ec <memset>:
    90ec:	4402      	add	r2, r0
    90ee:	4603      	mov	r3, r0
    90f0:	4293      	cmp	r3, r2
    90f2:	d100      	bne.n	90f6 <memset+0xa>
    90f4:	4770      	bx	lr
    90f6:	f803 1b01 	strb.w	r1, [r3], #1
    90fa:	e7f9      	b.n	90f0 <memset+0x4>

000090fc <strcpy>:
    90fc:	4603      	mov	r3, r0
    90fe:	f811 2b01 	ldrb.w	r2, [r1], #1
    9102:	f803 2b01 	strb.w	r2, [r3], #1
    9106:	2a00      	cmp	r2, #0
    9108:	d1f9      	bne.n	90fe <strcpy+0x2>
    910a:	4770      	bx	lr

0000910c <strncpy>:
    910c:	b510      	push	{r4, lr}
    910e:	3901      	subs	r1, #1
    9110:	4603      	mov	r3, r0
    9112:	b132      	cbz	r2, 9122 <strncpy+0x16>
    9114:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    9118:	f803 4b01 	strb.w	r4, [r3], #1
    911c:	3a01      	subs	r2, #1
    911e:	2c00      	cmp	r4, #0
    9120:	d1f7      	bne.n	9112 <strncpy+0x6>
    9122:	441a      	add	r2, r3
    9124:	2100      	movs	r1, #0
    9126:	4293      	cmp	r3, r2
    9128:	d100      	bne.n	912c <strncpy+0x20>
    912a:	bd10      	pop	{r4, pc}
    912c:	f803 1b01 	strb.w	r1, [r3], #1
    9130:	e7f9      	b.n	9126 <strncpy+0x1a>

00009132 <strnlen>:
    9132:	b510      	push	{r4, lr}
    9134:	4602      	mov	r2, r0
    9136:	4401      	add	r1, r0
    9138:	428a      	cmp	r2, r1
    913a:	4613      	mov	r3, r2
    913c:	d101      	bne.n	9142 <strnlen+0x10>
    913e:	1a18      	subs	r0, r3, r0
    9140:	bd10      	pop	{r4, pc}
    9142:	781c      	ldrb	r4, [r3, #0]
    9144:	3201      	adds	r2, #1
    9146:	2c00      	cmp	r4, #0
    9148:	d1f6      	bne.n	9138 <strnlen+0x6>
    914a:	e7f8      	b.n	913e <strnlen+0xc>
